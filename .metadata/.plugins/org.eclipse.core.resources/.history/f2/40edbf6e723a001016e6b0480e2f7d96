#include "encoder.h"
#include "tim.h"

static int32_t ticks = 0;
static int16_t steps = 0;
static int16_t min = 0;
static int16_t max = 100;
static bool is_cyclic = true;
static bool is_reversed = true;

void encoder_init(void) {
    ticks = 0;
    steps = 0;
}

void encoder_update(void) {
    static int16_t last = 0;
    int16_t current = __HAL_TIM_GET_COUNTER(&htim4); // no mutex required, not a ressource, just a register read
    int16_t delta = current - last;
    last = current;

    // Inversion du sens si n√©cessaire
    if (is_reversed)
        delta = -delta;

    ticks += delta;
    int16_t new_steps = (int16_t)(ticks / 4);

    if (is_cyclic) {
    	 int32_t range = max - min + 1;
    	 steps = ((new_steps - min) % range + range) % range + min;
    } else {
        if (new_steps < min) new_steps = min;
        if (new_steps > max) new_steps = max;
        steps = new_steps;
    }
}

int32_t encoder_get_ticks(void) {
    return ticks;
}

int16_t encoder_get_steps(void) {
    return steps;
}

void encoder_set_min(int16_t min_val) {
    min = min_val;
}

void encoder_set_max(int16_t max_val) {
    max = max_val;
}

void encoder_reset_position(void) {
    ticks = 0;
    steps = 0;
}

void encoder_set_cyclic(bool enable) {
    is_cyclic = enable;
}

void encoder_set_direction(bool reverse) {
    is_reversed = reverse;
}
