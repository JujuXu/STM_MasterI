/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * File Name          : freertos.c
  * Description        : Code for freertos applications
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "tim.h"
#include "encoder.h"
#include "lcd.h"
#include "menu.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define FLAG_LED1		0x0001
#define FLAG_LED2		0x0002
#define FLAG_LED3		0x0004
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */
/* Definitions for defaultTask */
osThreadId_t defaultTaskHandle;
const osThreadAttr_t defaultTask_attributes = {
  .name = "defaultTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for encoderTask */
osThreadId_t encoderTaskHandle;
const osThreadAttr_t encoderTask_attributes = {
  .name = "encoderTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for SM_Task */
osThreadId_t SM_TaskHandle;
const osThreadAttr_t SM_Task_attributes = {
  .name = "SM_Task",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for ledsTask */
osThreadId_t ledsTaskHandle;
const osThreadAttr_t ledsTask_attributes = {
  .name = "ledsTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for infoFuncTask */
osThreadId_t infoFuncTaskHandle;
const osThreadAttr_t infoFuncTask_attributes = {
  .name = "infoFuncTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for sensFuncTask */
osThreadId_t sensFuncTaskHandle;
const osThreadAttr_t sensFuncTask_attributes = {
  .name = "sensFuncTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for convFuncTask */
osThreadId_t convFuncTaskHandle;
const osThreadAttr_t convFuncTask_attributes = {
  .name = "convFuncTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for actFuncTask */
osThreadId_t actFuncTaskHandle;
const osThreadAttr_t actFuncTask_attributes = {
  .name = "actFuncTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for mpuFuncTask */
osThreadId_t mpuFuncTaskHandle;
const osThreadAttr_t mpuFuncTask_attributes = {
  .name = "mpuFuncTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for smEvent */
osEventFlagsId_t smEventHandle;
const osEventFlagsAttr_t smEvent_attributes = {
  .name = "smEvent"
};
/* Definitions for funcEvent */
osEventFlagsId_t funcEventHandle;
const osEventFlagsAttr_t funcEvent_attributes = {
  .name = "funcEvent"
};
/* Definitions for ledEvent */
osEventFlagsId_t ledEventHandle;
const osEventFlagsAttr_t ledEvent_attributes = {
  .name = "ledEvent"
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void exitFunc(void);
/* USER CODE END FunctionPrototypes */

void StartDefaultTask(void *argument);
void encoder(void *argument);
void StateMachine(void *argument);
void leds(void *argument);
void infoFunc(void *argument);
void sensFunc(void *argument);
void convFunc(void *argument);
void actFunc(void *argument);
void mpuFunc(void *argument);

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(encoder, NULL, &encoderTask_attributes);

  /* creation of SM_Task */
  SM_TaskHandle = osThreadNew(StateMachine, NULL, &SM_Task_attributes);

  /* creation of ledsTask */
  ledsTaskHandle = osThreadNew(leds, NULL, &ledsTask_attributes);

  /* creation of infoFuncTask */
  infoFuncTaskHandle = osThreadNew(infoFunc, NULL, &infoFuncTask_attributes);

  /* creation of sensFuncTask */
  sensFuncTaskHandle = osThreadNew(sensFunc, NULL, &sensFuncTask_attributes);

  /* creation of convFuncTask */
  convFuncTaskHandle = osThreadNew(convFunc, NULL, &convFuncTask_attributes);

  /* creation of actFuncTask */
  actFuncTaskHandle = osThreadNew(actFunc, NULL, &actFuncTask_attributes);

  /* creation of mpuFuncTask */
  mpuFuncTaskHandle = osThreadNew(mpuFunc, NULL, &mpuFuncTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of smEvent */
  smEventHandle = osEventFlagsNew(&smEvent_attributes);

  /* creation of funcEvent */
  funcEventHandle = osEventFlagsNew(&funcEvent_attributes);

  /* creation of ledEvent */
  ledEventHandle = osEventFlagsNew(&ledEvent_attributes);

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}

/* USER CODE BEGIN Header_StartDefaultTask */
/**
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END StartDefaultTask */
}

/* USER CODE BEGIN Header_encoder */
/**
* @brief Function implementing the encoderTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder */
void encoder(void *argument)
{
  /* USER CODE BEGIN encoder */
  /* Infinite loop */
  for(;;)
  {
		encoder_update();
		encoder_button_update();

		osDelay(10);  // 100 Hz
  }
  /* USER CODE END encoder */
}

/* USER CODE BEGIN Header_StateMachine */
/**
* @brief Function implementing the SM_Task thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StateMachine */
void StateMachine(void *argument)
{
  /* USER CODE BEGIN StateMachine */
  /* Infinite loop */

  int16_t last_step = -1;
  for(;;)
  {
	  uint32_t flags = osEventFlagsGet(smEventHandle);

	  if (!(flags & 0x0001))  // tant que menu actif
	  {
		encoder_set_min(0);
		encoder_set_max(4);

		// Clignotement de la LED pour indiquer "mode menu"
		osEventFlagsSet(ledEventHandle, FLAG_LED1);

		int16_t step = encoder_get_steps();

		bool button = encoder_get_button();

		// Seulement si le step a changé
		if (step != last_step)
		{
		  const menu_state_t *entry = NULL;
		  for (int i = 0; menu_state[i].text != NULL; i++) {
			if (menu_state[i].step == step) {
			  entry = &menu_state[i];
			  break;
			}
		  }

		  if (entry != NULL) {
			clearLCD();
			setCursor(0, 0);
			writeLCD(entry->text);
			last_step = step;  // Mettre à jour le step affiché
		  }
		}

		// Si bouton pressé : sortir du menu et lancer l’action
		if (button)
		{
		  osEventFlagsSet(ledEventHandle, FLAG_LED2);
		  const menu_state_t *entry = NULL;
		  for (int i = 0; menu_state[i].text != NULL; i++) {
			if (menu_state[i].step == step) {
			  entry = &menu_state[i];
			  break;
			}
		  }

		  if (entry != NULL) {
			last_step = -1;
			encoder_reset_position();
			osEventFlagsSet(smEventHandle, FLAG_SM_OFF); // exit statemachine
			osEventFlagsSet(funcEventHandle, entry->flag); // set task flag
		  }
		}
	  }
	  else
	  {
		osDelay(100);  // on dort quand le menu n’est pas actif
	  }
	  osDelay(20); // 50 Hz
  }
  /* USER CODE END StateMachine */
}

/* USER CODE BEGIN Header_leds */
/**
* @brief Function implementing the ledsTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_leds */
void leds(void *argument)
{
  /* USER CODE BEGIN leds */
  /* Infinite loop */
  for(;;)
  {
	  uint32_t flags = osEventFlagsWait(ledEventHandle, FLAG_LED1|FLAG_LED2|FLAG_LED3, osFlagsWaitAny, osWaitForever);

	  if (flags & FLAG_LED1) {
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
		osDelay(50);
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);

	  }

	  if (flags & FLAG_LED2) {
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
		osDelay(50);
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

	  }

	  if (flags & FLAG_LED3) {
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
		osDelay(50);
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
	  }
		osDelay(50);
  }
  /* USER CODE END leds */
}

/* USER CODE BEGIN Header_infoFunc */
/**
* @brief Function implementing the infoFuncTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_infoFunc */
void infoFunc(void *argument)
{
  /* USER CODE BEGIN infoFunc */
  static bool FIF = false; // first in function
  /* Infinite loop */
  for(;;)
  {
	  uint32_t flags = osEventFlagsGet(funcEventHandle);

	  if (flags & FLAG_INFO) {
		  if (!FIF) {
			  clearLCD();
			  setCursor(0, 0);
			  writeLCD("Julien NAVEZ");
			  setCursor(0, 1);
			  writeLCD("Nattan PAPIER");

			  FIF = true;
		  } else {
			  bool button = encoder_get_button();

			  if (button) {
				  exitFunc();
				  FIF = false;
			  }
		  }
	  }
  }
  /* USER CODE END infoFunc */
}

/* USER CODE BEGIN Header_sensFunc */
/**
* @brief Function implementing the sensFuncTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensFunc */
void sensFunc(void *argument)
{
  /* USER CODE BEGIN sensFunc */
  int16_t step = 0;
  /* Infinite loop */
  for(;;)
  {
	  uint32_t flags = osEventFlagsGet(funcEventHandle);

	  if (flags & FLAG_SENSOR) {
		  encoder_set_min(0);
		  encoder_set_max(1);

		  step = encoder_get_steps();

		  clearLCD();
		  if (step == 0) {
			  setCursor(0, 0);
			  writeLCD("ax");
			  writeLCD("0.000");
			  writeLCD(" ay");
			  writeLCD("0.000");

			  setCursor(0, 1);
			  writeLCD("az");
			  writeLCD("0.000");
		  } else if (step == 1) {
			  setCursor(0, 0);
			  writeLCD("gx");
			  writeLCD("0.000");
			  writeLCD(" gy");
			  writeLCD("0.000");

			  setCursor(0, 1);
			  writeLCD("gz");
			  writeLCD("0.000");
		  }

		  bool button = encoder_get_button();

		  if (button) {
			  exitFunc();
		  }

		  osDelay(100);
	  }
  }
  /* USER CODE END sensFunc */
}

/* USER CODE BEGIN Header_convFunc */
/**
* @brief Function implementing the convFuncTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_convFunc */
void convFunc(void *argument)
{
  /* USER CODE BEGIN convFunc */
  static bool FIF = false; // first in function
  int16_t step = 0;
  static int16_t last_step = -1;
  const char *mode[] = {
		  "AUTO",
		  "MANUAL"
  };
  /* Infinite loop */
  for(;;)
  {
	  uint32_t flags = osEventFlagsGet(funcEventHandle);

	  if (flags & FLAG_CONV) {
		  encoder_set_min(0);
		  encoder_set_max(1);

		  if (!FIF) {
			  clearLCD();
			  setCursor(0, 0);
			  writeLCD("Mode:");

			  FIF = true;
		  } else {
			  step = encoder_get_steps();

			  if(step != last_step) {
				  last_step = step;

				  setCursor(0, 1);
				  writeLCD("                ");
				  setCursor(0, 1);

				  if (step < sizeof(mode)) {
					  writeLCD((char) mode[step]);
				  }

				  // TODO change mode
			  }

			  bool button = encoder_get_button();

			  if (button) {
				  exitFunc();
				  FIF = false;
			  }
		  }
	  }
  }
  /* USER CODE END convFunc */
}

/* USER CODE BEGIN Header_actFunc */
/**
* @brief Function implementing the actFuncTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_actFunc */
void actFunc(void *argument)
{
  /* USER CODE BEGIN actFunc */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END actFunc */
}

/* USER CODE BEGIN Header_mpuFunc */
/**
* @brief Function implementing the mpuFuncTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_mpuFunc */
void mpuFunc(void *argument)
{
  /* USER CODE BEGIN mpuFunc */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END mpuFunc */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void exitFunc(void) {
	encoder_reset_position();

	if (funcEventHandle != NULL) {
		osEventFlagsClear(funcEventHandle, FLAG_INFO);
		osEventFlagsClear(funcEventHandle, FLAG_SENSOR);
		osEventFlagsClear(funcEventHandle, FLAG_CONV);
		osEventFlagsClear(funcEventHandle, FLAG_ACT);
		osEventFlagsClear(funcEventHandle, FLAG_MPU);
	}
		//osEventFlagsSet(funcEventHandle, 0xFFFFFFFF);


	if (smEventHandle != NULL)
		osEventFlagsClear(smEventHandle, FLAG_SM_OFF);
}
/* USER CODE END Application */

