/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * File Name          : freertos.c
  * Description        : Code for freertos applications
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "tim.h"
#include "encoder.h"
#include "lcd.h"
#include "menu.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */
unsigned char state = ST_INFO;
bool enc_button = false;
/* USER CODE END Variables */
/* Definitions for defaultTask */
osThreadId_t defaultTaskHandle;
const osThreadAttr_t defaultTask_attributes = {
  .name = "defaultTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for encoderTask */
osThreadId_t encoderTaskHandle;
const osThreadAttr_t encoderTask_attributes = {
  .name = "encoderTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for lcdtestTask */
osThreadId_t lcdtestTaskHandle;
const osThreadAttr_t lcdtestTask_attributes = {
  .name = "lcdtestTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for SM_Task */
osThreadId_t SM_TaskHandle;
const osThreadAttr_t SM_Task_attributes = {
  .name = "SM_Task",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for encButtTask */
osThreadId_t encButtTaskHandle;
const osThreadAttr_t encButtTask_attributes = {
  .name = "encButtTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for encButtMutex */
osMutexId_t encButtMutexHandle;
const osMutexAttr_t encButtMutex_attributes = {
  .name = "encButtMutex"
};
/* Definitions for smEvent */
osEventFlagsId_t smEventHandle;
const osEventFlagsAttr_t smEvent_attributes = {
  .name = "smEvent"
};
/* Definitions for funcEvent */
osEventFlagsId_t funcEventHandle;
const osEventFlagsAttr_t funcEvent_attributes = {
  .name = "funcEvent"
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

/* USER CODE END FunctionPrototypes */

void StartDefaultTask(void *argument);
void encoder(void *argument);
void lcdTest(void *argument);
void StateMachine(void *argument);
void encButton(void *argument);

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of encButtMutex */
  encButtMutexHandle = osMutexNew(&encButtMutex_attributes);

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(encoder, NULL, &encoderTask_attributes);

  /* creation of lcdtestTask */
  lcdtestTaskHandle = osThreadNew(lcdTest, NULL, &lcdtestTask_attributes);

  /* creation of SM_Task */
  SM_TaskHandle = osThreadNew(StateMachine, NULL, &SM_Task_attributes);

  /* creation of encButtTask */
  encButtTaskHandle = osThreadNew(encButton, NULL, &encButtTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of smEvent */
  smEventHandle = osEventFlagsNew(&smEvent_attributes);

  /* creation of funcEvent */
  funcEventHandle = osEventFlagsNew(&funcEvent_attributes);

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}

/* USER CODE BEGIN Header_StartDefaultTask */
/**
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END StartDefaultTask */
}

/* USER CODE BEGIN Header_encoder */
/**
* @brief Function implementing the encoderTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder */
void encoder(void *argument)
{
  /* USER CODE BEGIN encoder */
  /* Infinite loop */
  for(;;)
  {
		encoder_update();

		osDelay(10);  // 100 Hz
  }
  /* USER CODE END encoder */
}

/* USER CODE BEGIN Header_lcdTest */
/**
* @brief Function implementing the lcdtestTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_lcdTest */
void lcdTest(void *argument)
{
  /* USER CODE BEGIN lcdTest */
	//static char s1[] = "Hello World!";
	//static char s2[] = "Hihi";
  /* Infinite loop */
  for(;;)
  {
	  /*
	clearLCD();
	setCursor(0, 0);
	writeLCD(s1);
	setCursor(0, 1);
	writeLCD(s2);
	osDelay(1000);
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	osDelay(1000);
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);*/
	  osDelay(1);
  }
  /* USER CODE END lcdTest */
}

/* USER CODE BEGIN Header_StateMachine */
/**
* @brief Function implementing the SM_Task thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StateMachine */
void StateMachine(void *argument)
{
  /* USER CODE BEGIN StateMachine */
  /* Infinite loop */

  int16_t last_step = -1;
  for(;;)
  {
	  uint32_t flags = osEventFlagsGet(smEventHandle);

	  if (!(flags & 0x0001))  // tant que menu actif
	  {
		encoder_set_min(0);
		encoder_set_max(4);

		// Clignotement de la LED pour indiquer "mode menu"
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
		osDelay(50);
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
		osDelay(50);

		int16_t step = encoder_get_steps();
		osMutexAcquire(encButtMutexHandle, osWaitForever);
		//bool button = (encoder_button_read() == BUTTON_PRESS);
		bool button = enc_button;
		enc_button = false;

		// Seulement si le step a changé
		if (step != last_step)
		{
		  const menu_state_t *entry = NULL;
		  for (int i = 0; menu_state[i].text != NULL; i++) {
			if (menu_state[i].step == step) {
			  entry = &menu_state[i];
			  break;
			}
		  }

		  if (entry != NULL) {
			clearLCD();
			setCursor(0, 0);
			writeLCD(entry->text);
			last_step = step;  // Mettre à jour le step affiché
		  }
		}

		// Si bouton pressé : sortir du menu et lancer l’action
		if (button)
		{
		  const menu_state_t *entry = NULL;
		  for (int i = 0; menu_state[i].text != NULL; i++) {
			if (menu_state[i].step == step) {
			  entry = &menu_state[i];
			  break;
			}
		  }

		  if (entry != NULL) {
			osEventFlagsClear(smEventHandle, 0x0001);         // sortir du menu
			osEventFlagsSet(smEventHandle, entry->flag);      // lancer action
		  }
		}

		osMutexRelease(encButtMutexHandle);
	  }
	  else
	  {
		osDelay(100);  // on dort quand le menu n’est pas actif
	  }
	  osDelay(20); // 50 Hz
  }
  /* USER CODE END StateMachine */
}

/* USER CODE BEGIN Header_encButton */
/**
* @brief Function implementing the encButtTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encButton */
void encButton(void *argument)
{
  /* USER CODE BEGIN encButton */
  /* Infinite loop */
  for(;;)
  {
	  static bool last_state = true;
	  bool current = HAL_GPIO_ReadPin(ENC_BUTT_GPIO_Port, ENC_BUTT_Pin) == GPIO_PIN_RESET;
	  osMutexAcquire(encButtMutexHandle, osWaitForever);
	  if (current && !last_state) {
		  last_state = true;
		  enc_button = true;
	  } else if (!current) {
		  last_state = false;
	  }

	  enc_button = false;

	  osMutexRelease(encButtMutexHandle);
	  osDelay(1);
  }
  /* USER CODE END encButton */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

/* USER CODE END Application */

