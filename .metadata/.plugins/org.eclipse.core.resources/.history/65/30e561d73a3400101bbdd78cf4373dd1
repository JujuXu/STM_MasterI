#include "encoder.h"
#include "tim.h"

static int32_t ticks = 0;
static int32_t crans = 0;
static int32_t min = 0;
static int32_t max = 100;
static bool is_cyclic = false;

void encoder_init(void) {
    ticks = 0;
    crans = 0;
}

void encoder_update(void) {
    static int16_t last = 0;
    int16_t current = __HAL_TIM_GET_COUNTER(&htim2);
    int16_t delta = current - last;
    last = current;

    ticks += delta;

    int32_t new_crans = ticks / 4;

    if (is_cyclic) {
        // Mode cyclique
        int32_t range = max - min + 1;
        if (new_crans > max)
            crans = min + (new_crans - max - 1) % range;
        else if (new_crans < min)
            crans = max - (min - new_crans - 1) % range;
        else
            crans = new_crans;
    } else {
        // Mode bloquÃ© (non cyclique)
        if (new_crans < min) new_crans = min;
        if (new_crans > max) new_crans = max;
        crans = new_crans;
    }
}

int32_t encoder_get_ticks(void) {
    return ticks;
}

int32_t encoder_get_crans(void) {
    return crans;
}

void encoder_set_min(int32_t min_val) {
    min = min_val;
}

void encoder_set_max(int32_t max_val) {
    max = max_val;
}

void encoder_reset_position(void) {
    ticks = 0;
    crans = 0;
}

void encoder_set_cyclic(bool enable) {
    is_cyclic = enable;
}
