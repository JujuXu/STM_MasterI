
TP5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e40  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  08008010  08008010  00009010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008348  08008348  0000a060  2**0
                  CONTENTS
  4 .ARM          00000008  08008348  08008348  00009348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008350  08008350  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008350  08008350  00009350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008354  08008354  00009354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08008358  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000050ec  20000060  080083b8  0000a060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000514c  080083b8  0000a14c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e0da  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043d2  00000000  00000000  0002816a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001888  00000000  00000000  0002c540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012f8  00000000  00000000  0002ddc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025581  00000000  00000000  0002f0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001db9d  00000000  00000000  00054641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddadd  00000000  00000000  000721de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014fcbb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a28  00000000  00000000  0014fd00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00156728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007ff8 	.word	0x08007ff8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08007ff8 	.word	0x08007ff8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of serialMut */
  serialMutHandle = osMutexNew(&serialMut_attributes);
 8000514:	482d      	ldr	r0, [pc, #180]	@ (80005cc <MX_FREERTOS_Init+0xbc>)
 8000516:	f003 ff10 	bl	800433a <osMutexNew>
 800051a:	4603      	mov	r3, r0
 800051c:	4a2c      	ldr	r2, [pc, #176]	@ (80005d0 <MX_FREERTOS_Init+0xc0>)
 800051e:	6013      	str	r3, [r2, #0]

  /* creation of ledMut */
  ledMutHandle = osMutexNew(&ledMut_attributes);
 8000520:	482c      	ldr	r0, [pc, #176]	@ (80005d4 <MX_FREERTOS_Init+0xc4>)
 8000522:	f003 ff0a 	bl	800433a <osMutexNew>
 8000526:	4603      	mov	r3, r0
 8000528:	4a2b      	ldr	r2, [pc, #172]	@ (80005d8 <MX_FREERTOS_Init+0xc8>)
 800052a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of rxQueue */
  rxQueueHandle = osMessageQueueNew (16, sizeof(uint8_t), &rxQueue_attributes);
 800052c:	4a2b      	ldr	r2, [pc, #172]	@ (80005dc <MX_FREERTOS_Init+0xcc>)
 800052e:	2101      	movs	r1, #1
 8000530:	2010      	movs	r0, #16
 8000532:	f004 f810 	bl	8004556 <osMessageQueueNew>
 8000536:	4603      	mov	r3, r0
 8000538:	4a29      	ldr	r2, [pc, #164]	@ (80005e0 <MX_FREERTOS_Init+0xd0>)
 800053a:	6013      	str	r3, [r2, #0]

  /* creation of ledQueue */
  ledQueueHandle = osMessageQueueNew (16, sizeof(morseData), &ledQueue_attributes);
 800053c:	4a29      	ldr	r2, [pc, #164]	@ (80005e4 <MX_FREERTOS_Init+0xd4>)
 800053e:	2102      	movs	r1, #2
 8000540:	2010      	movs	r0, #16
 8000542:	f004 f808 	bl	8004556 <osMessageQueueNew>
 8000546:	4603      	mov	r3, r0
 8000548:	4a27      	ldr	r2, [pc, #156]	@ (80005e8 <MX_FREERTOS_Init+0xd8>)
 800054a:	6013      	str	r3, [r2, #0]

  /* creation of txQueue */
  txQueueHandle = osMessageQueueNew (16, sizeof(uint32_t), &txQueue_attributes);
 800054c:	4a27      	ldr	r2, [pc, #156]	@ (80005ec <MX_FREERTOS_Init+0xdc>)
 800054e:	2104      	movs	r1, #4
 8000550:	2010      	movs	r0, #16
 8000552:	f004 f800 	bl	8004556 <osMessageQueueNew>
 8000556:	4603      	mov	r3, r0
 8000558:	4a25      	ldr	r2, [pc, #148]	@ (80005f0 <MX_FREERTOS_Init+0xe0>)
 800055a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800055c:	4a25      	ldr	r2, [pc, #148]	@ (80005f4 <MX_FREERTOS_Init+0xe4>)
 800055e:	2100      	movs	r1, #0
 8000560:	4825      	ldr	r0, [pc, #148]	@ (80005f8 <MX_FREERTOS_Init+0xe8>)
 8000562:	f003 fd57 	bl	8004014 <osThreadNew>
 8000566:	4603      	mov	r3, r0
 8000568:	4a24      	ldr	r2, [pc, #144]	@ (80005fc <MX_FREERTOS_Init+0xec>)
 800056a:	6013      	str	r3, [r2, #0]

  /* creation of serialRXTask */
  serialRXTaskHandle = osThreadNew(serialRX, NULL, &serialRXTask_attributes);
 800056c:	4a24      	ldr	r2, [pc, #144]	@ (8000600 <MX_FREERTOS_Init+0xf0>)
 800056e:	2100      	movs	r1, #0
 8000570:	4824      	ldr	r0, [pc, #144]	@ (8000604 <MX_FREERTOS_Init+0xf4>)
 8000572:	f003 fd4f 	bl	8004014 <osThreadNew>
 8000576:	4603      	mov	r3, r0
 8000578:	4a23      	ldr	r2, [pc, #140]	@ (8000608 <MX_FREERTOS_Init+0xf8>)
 800057a:	6013      	str	r3, [r2, #0]

  /* creation of asciiToMorseTas */
  asciiToMorseTasHandle = osThreadNew(asciiToMorse, NULL, &asciiToMorseTas_attributes);
 800057c:	4a23      	ldr	r2, [pc, #140]	@ (800060c <MX_FREERTOS_Init+0xfc>)
 800057e:	2100      	movs	r1, #0
 8000580:	4823      	ldr	r0, [pc, #140]	@ (8000610 <MX_FREERTOS_Init+0x100>)
 8000582:	f003 fd47 	bl	8004014 <osThreadNew>
 8000586:	4603      	mov	r3, r0
 8000588:	4a22      	ldr	r2, [pc, #136]	@ (8000614 <MX_FREERTOS_Init+0x104>)
 800058a:	6013      	str	r3, [r2, #0]

  /* creation of morseToLEDTask */
  morseToLEDTaskHandle = osThreadNew(morseToLED, NULL, &morseToLEDTask_attributes);
 800058c:	4a22      	ldr	r2, [pc, #136]	@ (8000618 <MX_FREERTOS_Init+0x108>)
 800058e:	2100      	movs	r1, #0
 8000590:	4822      	ldr	r0, [pc, #136]	@ (800061c <MX_FREERTOS_Init+0x10c>)
 8000592:	f003 fd3f 	bl	8004014 <osThreadNew>
 8000596:	4603      	mov	r3, r0
 8000598:	4a21      	ldr	r2, [pc, #132]	@ (8000620 <MX_FREERTOS_Init+0x110>)
 800059a:	6013      	str	r3, [r2, #0]

  /* creation of emptyRXTask */
  emptyRXTaskHandle = osThreadNew(emptyRXsendTX, NULL, &emptyRXTask_attributes);
 800059c:	4a21      	ldr	r2, [pc, #132]	@ (8000624 <MX_FREERTOS_Init+0x114>)
 800059e:	2100      	movs	r1, #0
 80005a0:	4821      	ldr	r0, [pc, #132]	@ (8000628 <MX_FREERTOS_Init+0x118>)
 80005a2:	f003 fd37 	bl	8004014 <osThreadNew>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a20      	ldr	r2, [pc, #128]	@ (800062c <MX_FREERTOS_Init+0x11c>)
 80005aa:	6013      	str	r3, [r2, #0]

  /* creation of serialTXTask */
  serialTXTaskHandle = osThreadNew(serialTX, NULL, &serialTXTask_attributes);
 80005ac:	4a20      	ldr	r2, [pc, #128]	@ (8000630 <MX_FREERTOS_Init+0x120>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	4820      	ldr	r0, [pc, #128]	@ (8000634 <MX_FREERTOS_Init+0x124>)
 80005b2:	f003 fd2f 	bl	8004014 <osThreadNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a1f      	ldr	r2, [pc, #124]	@ (8000638 <MX_FREERTOS_Init+0x128>)
 80005ba:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of morseEvents */
  morseEventsHandle = osEventFlagsNew(&morseEvents_attributes);
 80005bc:	481f      	ldr	r0, [pc, #124]	@ (800063c <MX_FREERTOS_Init+0x12c>)
 80005be:	f003 fdd6 	bl	800416e <osEventFlagsNew>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a1e      	ldr	r2, [pc, #120]	@ (8000640 <MX_FREERTOS_Init+0x130>)
 80005c6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	08008300 	.word	0x08008300
 80005d0:	200000a0 	.word	0x200000a0
 80005d4:	08008310 	.word	0x08008310
 80005d8:	200000a4 	.word	0x200000a4
 80005dc:	080082b8 	.word	0x080082b8
 80005e0:	20000094 	.word	0x20000094
 80005e4:	080082d0 	.word	0x080082d0
 80005e8:	20000098 	.word	0x20000098
 80005ec:	080082e8 	.word	0x080082e8
 80005f0:	2000009c 	.word	0x2000009c
 80005f4:	080081e0 	.word	0x080081e0
 80005f8:	08000645 	.word	0x08000645
 80005fc:	2000007c 	.word	0x2000007c
 8000600:	08008204 	.word	0x08008204
 8000604:	08000655 	.word	0x08000655
 8000608:	20000080 	.word	0x20000080
 800060c:	08008228 	.word	0x08008228
 8000610:	080006bd 	.word	0x080006bd
 8000614:	20000084 	.word	0x20000084
 8000618:	0800824c 	.word	0x0800824c
 800061c:	08000705 	.word	0x08000705
 8000620:	20000088 	.word	0x20000088
 8000624:	08008270 	.word	0x08008270
 8000628:	080007cd 	.word	0x080007cd
 800062c:	2000008c 	.word	0x2000008c
 8000630:	08008294 	.word	0x08008294
 8000634:	08000889 	.word	0x08000889
 8000638:	20000090 	.word	0x20000090
 800063c:	08008320 	.word	0x08008320
 8000640:	200000a8 	.word	0x200000a8

08000644 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800064c:	2001      	movs	r0, #1
 800064e:	f003 fd73 	bl	8004138 <osDelay>
 8000652:	e7fb      	b.n	800064c <StartDefaultTask+0x8>

08000654 <serialRX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_serialRX */
void serialRX(void *argument)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN serialRX */
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(serialMutHandle, osWaitForever);
 800065c:	4b13      	ldr	r3, [pc, #76]	@ (80006ac <serialRX+0x58>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f04f 31ff 	mov.w	r1, #4294967295
 8000664:	4618      	mov	r0, r3
 8000666:	f003 feee 	bl	8004446 <osMutexAcquire>

	  uint8_t rxC;

	  if (HAL_UART_Receive(&huart3, &rxC, 1, osWaitForever) == HAL_OK) {
 800066a:	f107 010f 	add.w	r1, r7, #15
 800066e:	f04f 33ff 	mov.w	r3, #4294967295
 8000672:	2201      	movs	r2, #1
 8000674:	480e      	ldr	r0, [pc, #56]	@ (80006b0 <serialRX+0x5c>)
 8000676:	f002 fd7e 	bl	8003176 <HAL_UART_Receive>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d109      	bne.n	8000694 <serialRX+0x40>
		  osMessageQueuePut(rxQueueHandle, &rxC, 0, osWaitForever);
 8000680:	4b0c      	ldr	r3, [pc, #48]	@ (80006b4 <serialRX+0x60>)
 8000682:	6818      	ldr	r0, [r3, #0]
 8000684:	f107 010f 	add.w	r1, r7, #15
 8000688:	f04f 33ff 	mov.w	r3, #4294967295
 800068c:	2200      	movs	r2, #0
 800068e:	f003 ffd5 	bl	800463c <osMessageQueuePut>
 8000692:	e005      	b.n	80006a0 <serialRX+0x4c>
	  } else {
		  osEventFlagsSet(morseEventsHandle, FLAG_EMPTY);
 8000694:	4b08      	ldr	r3, [pc, #32]	@ (80006b8 <serialRX+0x64>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2101      	movs	r1, #1
 800069a:	4618      	mov	r0, r3
 800069c:	f003 fda6 	bl	80041ec <osEventFlagsSet>
	  }

	  osMutexRelease(serialMutHandle);
 80006a0:	4b02      	ldr	r3, [pc, #8]	@ (80006ac <serialRX+0x58>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f003 ff19 	bl	80044dc <osMutexRelease>
  {
 80006aa:	e7d7      	b.n	800065c <serialRX+0x8>
 80006ac:	200000a0 	.word	0x200000a0
 80006b0:	200000f4 	.word	0x200000f4
 80006b4:	20000094 	.word	0x20000094
 80006b8:	200000a8 	.word	0x200000a8

080006bc <asciiToMorse>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_asciiToMorse */
void asciiToMorse(void *argument)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN asciiToMorse */
  /* Infinite loop */
  for(;;)
  {
	  uint8_t rxC;
	  osMessageQueueGet(rxQueueHandle, &rxC, 0, osWaitForever);
 80006c4:	4b0c      	ldr	r3, [pc, #48]	@ (80006f8 <asciiToMorse+0x3c>)
 80006c6:	6818      	ldr	r0, [r3, #0]
 80006c8:	f107 010f 	add.w	r1, r7, #15
 80006cc:	f04f 33ff 	mov.w	r3, #4294967295
 80006d0:	2200      	movs	r2, #0
 80006d2:	f004 f813 	bl	80046fc <osMessageQueueGet>

	  morseData data = morseLUT[rxC];
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
 80006d8:	461a      	mov	r2, r3
 80006da:	4b08      	ldr	r3, [pc, #32]	@ (80006fc <asciiToMorse+0x40>)
 80006dc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80006e0:	81bb      	strh	r3, [r7, #12]

	  osMessageQueuePut(ledQueueHandle, &data, 0, osWaitForever);
 80006e2:	4b07      	ldr	r3, [pc, #28]	@ (8000700 <asciiToMorse+0x44>)
 80006e4:	6818      	ldr	r0, [r3, #0]
 80006e6:	f107 010c 	add.w	r1, r7, #12
 80006ea:	f04f 33ff 	mov.w	r3, #4294967295
 80006ee:	2200      	movs	r2, #0
 80006f0:	f003 ffa4 	bl	800463c <osMessageQueuePut>
  {
 80006f4:	bf00      	nop
 80006f6:	e7e5      	b.n	80006c4 <asciiToMorse+0x8>
 80006f8:	20000094 	.word	0x20000094
 80006fc:	080080e0 	.word	0x080080e0
 8000700:	20000098 	.word	0x20000098

08000704 <morseToLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_morseToLED */
void morseToLED(void *argument)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN morseToLED */
  /* Infinite loop */
  for(;;)
  {
	  morseData data;
	  osMessageQueueGet(ledQueueHandle, &data, 0, osWaitForever);
 800070c:	4b2b      	ldr	r3, [pc, #172]	@ (80007bc <morseToLED+0xb8>)
 800070e:	6818      	ldr	r0, [r3, #0]
 8000710:	f107 010c 	add.w	r1, r7, #12
 8000714:	f04f 33ff 	mov.w	r3, #4294967295
 8000718:	2200      	movs	r2, #0
 800071a:	f003 ffef 	bl	80046fc <osMessageQueueGet>

	  osMutexAcquire(ledMutHandle, osWaitForever);
 800071e:	4b28      	ldr	r3, [pc, #160]	@ (80007c0 <morseToLED+0xbc>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f04f 31ff 	mov.w	r1, #4294967295
 8000726:	4618      	mov	r0, r3
 8000728:	f003 fe8d 	bl	8004446 <osMutexAcquire>

	  for (uint8_t i = 0; i<data.n; i++) {
 800072c:	2300      	movs	r3, #0
 800072e:	73fb      	strb	r3, [r7, #15]
 8000730:	e030      	b.n	8000794 <morseToLED+0x90>
		  if (data.symbols & (1<<i)) {
 8000732:	7b3b      	ldrb	r3, [r7, #12]
 8000734:	461a      	mov	r2, r3
 8000736:	7bfb      	ldrb	r3, [r7, #15]
 8000738:	fa42 f303 	asr.w	r3, r2, r3
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	2b00      	cmp	r3, #0
 8000742:	d012      	beq.n	800076a <morseToLED+0x66>
			  // dash
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000744:	2201      	movs	r2, #1
 8000746:	2180      	movs	r1, #128	@ 0x80
 8000748:	481e      	ldr	r0, [pc, #120]	@ (80007c4 <morseToLED+0xc0>)
 800074a:	f000 feff 	bl	800154c <HAL_GPIO_WritePin>
			  osDelay(3*timeUnit); // 3* dash
 800074e:	23c8      	movs	r3, #200	@ 0xc8
 8000750:	461a      	mov	r2, r3
 8000752:	4613      	mov	r3, r2
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	4413      	add	r3, r2
 8000758:	4618      	mov	r0, r3
 800075a:	f003 fced 	bl	8004138 <osDelay>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	2180      	movs	r1, #128	@ 0x80
 8000762:	4818      	ldr	r0, [pc, #96]	@ (80007c4 <morseToLED+0xc0>)
 8000764:	f000 fef2 	bl	800154c <HAL_GPIO_WritePin>
 8000768:	e00d      	b.n	8000786 <morseToLED+0x82>
		  } else {
			  // dott
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800076a:	2201      	movs	r2, #1
 800076c:	2180      	movs	r1, #128	@ 0x80
 800076e:	4815      	ldr	r0, [pc, #84]	@ (80007c4 <morseToLED+0xc0>)
 8000770:	f000 feec 	bl	800154c <HAL_GPIO_WritePin>
			  osDelay(timeUnit); // 1* dott
 8000774:	23c8      	movs	r3, #200	@ 0xc8
 8000776:	4618      	mov	r0, r3
 8000778:	f003 fcde 	bl	8004138 <osDelay>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	2180      	movs	r1, #128	@ 0x80
 8000780:	4810      	ldr	r0, [pc, #64]	@ (80007c4 <morseToLED+0xc0>)
 8000782:	f000 fee3 	bl	800154c <HAL_GPIO_WritePin>
		  }

		  osDelay(timeUnit); // 1* between 2 symbols
 8000786:	23c8      	movs	r3, #200	@ 0xc8
 8000788:	4618      	mov	r0, r3
 800078a:	f003 fcd5 	bl	8004138 <osDelay>
	  for (uint8_t i = 0; i<data.n; i++) {
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	3301      	adds	r3, #1
 8000792:	73fb      	strb	r3, [r7, #15]
 8000794:	7b7b      	ldrb	r3, [r7, #13]
 8000796:	7bfa      	ldrb	r2, [r7, #15]
 8000798:	429a      	cmp	r2, r3
 800079a:	d3ca      	bcc.n	8000732 <morseToLED+0x2e>
	  }

	  osDelay(3*200); // 3* between letters
 800079c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80007a0:	f003 fcca 	bl	8004138 <osDelay>

	  osMutexRelease(ledMutHandle);
 80007a4:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <morseToLED+0xbc>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f003 fe97 	bl	80044dc <osMutexRelease>
	  osEventFlagsSet(morseEventsHandle, FLAG_SENT);
 80007ae:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <morseToLED+0xc4>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2102      	movs	r1, #2
 80007b4:	4618      	mov	r0, r3
 80007b6:	f003 fd19 	bl	80041ec <osEventFlagsSet>
  {
 80007ba:	e7a7      	b.n	800070c <morseToLED+0x8>
 80007bc:	20000098 	.word	0x20000098
 80007c0:	200000a4 	.word	0x200000a4
 80007c4:	40020400 	.word	0x40020400
 80007c8:	200000a8 	.word	0x200000a8

080007cc <emptyRXsendTX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_emptyRXsendTX */
void emptyRXsendTX(void *argument)
{
 80007cc:	b5b0      	push	{r4, r5, r7, lr}
 80007ce:	b08c      	sub	sp, #48	@ 0x30
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  {
	  // empty buffer 0001
	  // sent done 0010
	  // FlagsWait sensitive on 0011 => 0x1 and 0x2 !
	  // use #define and make something like that: FLAG_EMPTY | FLAG_DONE => or means 0x3
	  uint32_t flags = osEventFlagsWait(morseEventsHandle, FLAG_EMPTY|FLAG_SENT, osFlagsWaitAny, osWaitForever);
 80007d4:	4b27      	ldr	r3, [pc, #156]	@ (8000874 <emptyRXsendTX+0xa8>)
 80007d6:	6818      	ldr	r0, [r3, #0]
 80007d8:	f04f 33ff 	mov.w	r3, #4294967295
 80007dc:	2200      	movs	r2, #0
 80007de:	2103      	movs	r1, #3
 80007e0:	f003 fd46 	bl	8004270 <osEventFlagsWait>
 80007e4:	62f8      	str	r0, [r7, #44]	@ 0x2c

	  if(flags & FLAG_EMPTY) { // emptybuffer
 80007e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d020      	beq.n	8000832 <emptyRXsendTX+0x66>
		  char txt[] = "RX Buffer empty!\r\n";
 80007f0:	4b21      	ldr	r3, [pc, #132]	@ (8000878 <emptyRXsendTX+0xac>)
 80007f2:	f107 0418 	add.w	r4, r7, #24
 80007f6:	461d      	mov	r5, r3
 80007f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007fc:	682b      	ldr	r3, [r5, #0]
 80007fe:	461a      	mov	r2, r3
 8000800:	8022      	strh	r2, [r4, #0]
 8000802:	3402      	adds	r4, #2
 8000804:	0c1b      	lsrs	r3, r3, #16
 8000806:	7023      	strb	r3, [r4, #0]
		  osMutexAcquire(serialMutHandle, osWaitForever);
 8000808:	4b1c      	ldr	r3, [pc, #112]	@ (800087c <emptyRXsendTX+0xb0>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f04f 31ff 	mov.w	r1, #4294967295
 8000810:	4618      	mov	r0, r3
 8000812:	f003 fe18 	bl	8004446 <osMutexAcquire>

		  osMessageQueuePut(ledQueueHandle, &txt, 0, osWaitForever);
 8000816:	4b1a      	ldr	r3, [pc, #104]	@ (8000880 <emptyRXsendTX+0xb4>)
 8000818:	6818      	ldr	r0, [r3, #0]
 800081a:	f107 0118 	add.w	r1, r7, #24
 800081e:	f04f 33ff 	mov.w	r3, #4294967295
 8000822:	2200      	movs	r2, #0
 8000824:	f003 ff0a 	bl	800463c <osMessageQueuePut>

		  osMutexRelease(serialMutHandle);
 8000828:	4b14      	ldr	r3, [pc, #80]	@ (800087c <emptyRXsendTX+0xb0>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4618      	mov	r0, r3
 800082e:	f003 fe55 	bl	80044dc <osMutexRelease>
	  }

	  if (flags & FLAG_SENT) { // sent done
 8000832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000834:	f003 0302 	and.w	r3, r3, #2
 8000838:	2b00      	cmp	r3, #0
 800083a:	d0cb      	beq.n	80007d4 <emptyRXsendTX+0x8>
		  char txt[] = "Sent done!\r\n";
 800083c:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <emptyRXsendTX+0xb8>)
 800083e:	f107 0408 	add.w	r4, r7, #8
 8000842:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000844:	c407      	stmia	r4!, {r0, r1, r2}
 8000846:	7023      	strb	r3, [r4, #0]
		  osMutexAcquire(serialMutHandle, osWaitForever);
 8000848:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <emptyRXsendTX+0xb0>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f04f 31ff 	mov.w	r1, #4294967295
 8000850:	4618      	mov	r0, r3
 8000852:	f003 fdf8 	bl	8004446 <osMutexAcquire>

		  osMessageQueuePut(ledQueueHandle, &txt, 0, osWaitForever);
 8000856:	4b0a      	ldr	r3, [pc, #40]	@ (8000880 <emptyRXsendTX+0xb4>)
 8000858:	6818      	ldr	r0, [r3, #0]
 800085a:	f107 0108 	add.w	r1, r7, #8
 800085e:	f04f 33ff 	mov.w	r3, #4294967295
 8000862:	2200      	movs	r2, #0
 8000864:	f003 feea 	bl	800463c <osMessageQueuePut>

		  osMutexRelease(serialMutHandle);
 8000868:	4b04      	ldr	r3, [pc, #16]	@ (800087c <emptyRXsendTX+0xb0>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4618      	mov	r0, r3
 800086e:	f003 fe35 	bl	80044dc <osMutexRelease>
  {
 8000872:	e7af      	b.n	80007d4 <emptyRXsendTX+0x8>
 8000874:	200000a8 	.word	0x200000a8
 8000878:	080080a4 	.word	0x080080a4
 800087c:	200000a0 	.word	0x200000a0
 8000880:	20000098 	.word	0x20000098
 8000884:	080080b8 	.word	0x080080b8

08000888 <serialTX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_serialTX */
void serialTX(void *argument)
{
 8000888:	b590      	push	{r4, r7, lr}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN serialTX */
  /* Infinite loop */
  for(;;)
  {
	  char* txt;
	  osMessageQueueGet(txQueueHandle, &txt, 0, osWaitForever);
 8000890:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <serialTX+0x50>)
 8000892:	6818      	ldr	r0, [r3, #0]
 8000894:	f107 010c 	add.w	r1, r7, #12
 8000898:	f04f 33ff 	mov.w	r3, #4294967295
 800089c:	2200      	movs	r2, #0
 800089e:	f003 ff2d 	bl	80046fc <osMessageQueueGet>

	  osMutexAcquire(serialMutHandle, osWaitForever);
 80008a2:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <serialTX+0x54>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f04f 31ff 	mov.w	r1, #4294967295
 80008aa:	4618      	mov	r0, r3
 80008ac:	f003 fdcb 	bl	8004446 <osMutexAcquire>
	  HAL_UART_Transmit(&huart3, (uint8_t *) txt, strlen(txt), 30);
 80008b0:	68fc      	ldr	r4, [r7, #12]
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff fcab 	bl	8000210 <strlen>
 80008ba:	4603      	mov	r3, r0
 80008bc:	b29a      	uxth	r2, r3
 80008be:	231e      	movs	r3, #30
 80008c0:	4621      	mov	r1, r4
 80008c2:	4807      	ldr	r0, [pc, #28]	@ (80008e0 <serialTX+0x58>)
 80008c4:	f002 fbcc 	bl	8003060 <HAL_UART_Transmit>
	  osMutexRelease(serialMutHandle);
 80008c8:	4b04      	ldr	r3, [pc, #16]	@ (80008dc <serialTX+0x54>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f003 fe05 	bl	80044dc <osMutexRelease>
  {
 80008d2:	bf00      	nop
 80008d4:	e7dc      	b.n	8000890 <serialTX+0x8>
 80008d6:	bf00      	nop
 80008d8:	2000009c 	.word	0x2000009c
 80008dc:	200000a0 	.word	0x200000a0
 80008e0:	200000f4 	.word	0x200000f4

080008e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08c      	sub	sp, #48	@ 0x30
 80008e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
 80008fe:	4b4c      	ldr	r3, [pc, #304]	@ (8000a30 <MX_GPIO_Init+0x14c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4a4b      	ldr	r2, [pc, #300]	@ (8000a30 <MX_GPIO_Init+0x14c>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
 800090a:	4b49      	ldr	r3, [pc, #292]	@ (8000a30 <MX_GPIO_Init+0x14c>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	61bb      	str	r3, [r7, #24]
 8000914:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
 800091a:	4b45      	ldr	r3, [pc, #276]	@ (8000a30 <MX_GPIO_Init+0x14c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a44      	ldr	r2, [pc, #272]	@ (8000a30 <MX_GPIO_Init+0x14c>)
 8000920:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b42      	ldr	r3, [pc, #264]	@ (8000a30 <MX_GPIO_Init+0x14c>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	4b3e      	ldr	r3, [pc, #248]	@ (8000a30 <MX_GPIO_Init+0x14c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a3d      	ldr	r2, [pc, #244]	@ (8000a30 <MX_GPIO_Init+0x14c>)
 800093c:	f043 0302 	orr.w	r3, r3, #2
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b3b      	ldr	r3, [pc, #236]	@ (8000a30 <MX_GPIO_Init+0x14c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	4b37      	ldr	r3, [pc, #220]	@ (8000a30 <MX_GPIO_Init+0x14c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	4a36      	ldr	r2, [pc, #216]	@ (8000a30 <MX_GPIO_Init+0x14c>)
 8000958:	f043 0308 	orr.w	r3, r3, #8
 800095c:	6313      	str	r3, [r2, #48]	@ 0x30
 800095e:	4b34      	ldr	r3, [pc, #208]	@ (8000a30 <MX_GPIO_Init+0x14c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	f003 0308 	and.w	r3, r3, #8
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	4b30      	ldr	r3, [pc, #192]	@ (8000a30 <MX_GPIO_Init+0x14c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a2f      	ldr	r2, [pc, #188]	@ (8000a30 <MX_GPIO_Init+0x14c>)
 8000974:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a30 <MX_GPIO_Init+0x14c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b29      	ldr	r3, [pc, #164]	@ (8000a30 <MX_GPIO_Init+0x14c>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	4a28      	ldr	r2, [pc, #160]	@ (8000a30 <MX_GPIO_Init+0x14c>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6313      	str	r3, [r2, #48]	@ 0x30
 8000996:	4b26      	ldr	r3, [pc, #152]	@ (8000a30 <MX_GPIO_Init+0x14c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	f244 0181 	movw	r1, #16513	@ 0x4081
 80009a8:	4822      	ldr	r0, [pc, #136]	@ (8000a34 <MX_GPIO_Init+0x150>)
 80009aa:	f000 fdcf 	bl	800154c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2140      	movs	r1, #64	@ 0x40
 80009b2:	4821      	ldr	r0, [pc, #132]	@ (8000a38 <MX_GPIO_Init+0x154>)
 80009b4:	f000 fdca 	bl	800154c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009be:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	481b      	ldr	r0, [pc, #108]	@ (8000a3c <MX_GPIO_Init+0x158>)
 80009d0:	f000 fc28 	bl	8001224 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009d4:	f244 0381 	movw	r3, #16513	@ 0x4081
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009da:	2301      	movs	r3, #1
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	4811      	ldr	r0, [pc, #68]	@ (8000a34 <MX_GPIO_Init+0x150>)
 80009ee:	f000 fc19 	bl	8001224 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009f2:	2340      	movs	r3, #64	@ 0x40
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	480b      	ldr	r0, [pc, #44]	@ (8000a38 <MX_GPIO_Init+0x154>)
 8000a0a:	f000 fc0b 	bl	8001224 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a0e:	2380      	movs	r3, #128	@ 0x80
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a12:	2300      	movs	r3, #0
 8000a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4805      	ldr	r0, [pc, #20]	@ (8000a38 <MX_GPIO_Init+0x154>)
 8000a22:	f000 fbff 	bl	8001224 <HAL_GPIO_Init>

}
 8000a26:	bf00      	nop
 8000a28:	3730      	adds	r7, #48	@ 0x30
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40020400 	.word	0x40020400
 8000a38:	40021800 	.word	0x40021800
 8000a3c:	40020800 	.word	0x40020800

08000a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a44:	f000 faa6 	bl	8000f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a48:	f000 f80e 	bl	8000a68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4c:	f7ff ff4a 	bl	80008e4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a50:	f000 f966 	bl	8000d20 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a54:	f000 f9d6 	bl	8000e04 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a58:	f003 fa92 	bl	8003f80 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000a5c:	f7ff fd58 	bl	8000510 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000a60:	f003 fab2 	bl	8003fc8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <main+0x24>

08000a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b094      	sub	sp, #80	@ 0x50
 8000a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	2234      	movs	r2, #52	@ 0x34
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f007 f9d6 	bl	8007e28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a7c:	f107 0308 	add.w	r3, r7, #8
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	4b29      	ldr	r3, [pc, #164]	@ (8000b38 <SystemClock_Config+0xd0>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a94:	4a28      	ldr	r2, [pc, #160]	@ (8000b38 <SystemClock_Config+0xd0>)
 8000a96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a9c:	4b26      	ldr	r3, [pc, #152]	@ (8000b38 <SystemClock_Config+0xd0>)
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	4b23      	ldr	r3, [pc, #140]	@ (8000b3c <SystemClock_Config+0xd4>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a22      	ldr	r2, [pc, #136]	@ (8000b3c <SystemClock_Config+0xd4>)
 8000ab2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ab6:	6013      	str	r3, [r2, #0]
 8000ab8:	4b20      	ldr	r3, [pc, #128]	@ (8000b3c <SystemClock_Config+0xd4>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ac0:	603b      	str	r3, [r7, #0]
 8000ac2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ac8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000acc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ad2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ad6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ad8:	2304      	movs	r3, #4
 8000ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000adc:	23a8      	movs	r3, #168	@ 0xa8
 8000ade:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ae4:	2307      	movs	r3, #7
 8000ae6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aec:	f107 031c 	add.w	r3, r7, #28
 8000af0:	4618      	mov	r0, r3
 8000af2:	f001 fd25 	bl	8002540 <HAL_RCC_OscConfig>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000afc:	f000 f832 	bl	8000b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b00:	230f      	movs	r3, #15
 8000b02:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b04:	2302      	movs	r3, #2
 8000b06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b0c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b10:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b16:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b18:	f107 0308 	add.w	r3, r7, #8
 8000b1c:	2105      	movs	r1, #5
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 fe68 	bl	80017f4 <HAL_RCC_ClockConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b2a:	f000 f81b 	bl	8000b64 <Error_Handler>
  }
}
 8000b2e:	bf00      	nop
 8000b30:	3750      	adds	r7, #80	@ 0x50
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40007000 	.word	0x40007000

08000b40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a04      	ldr	r2, [pc, #16]	@ (8000b60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d101      	bne.n	8000b56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b52:	f000 fa41 	bl	8000fd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40010000 	.word	0x40010000

08000b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b68:	b672      	cpsid	i
}
 8000b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <Error_Handler+0x8>

08000b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	4b12      	ldr	r3, [pc, #72]	@ (8000bc4 <HAL_MspInit+0x54>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b7e:	4a11      	ldr	r2, [pc, #68]	@ (8000bc4 <HAL_MspInit+0x54>)
 8000b80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b86:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc4 <HAL_MspInit+0x54>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	603b      	str	r3, [r7, #0]
 8000b96:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc4 <HAL_MspInit+0x54>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc4 <HAL_MspInit+0x54>)
 8000b9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ba0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ba2:	4b08      	ldr	r3, [pc, #32]	@ (8000bc4 <HAL_MspInit+0x54>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	210f      	movs	r1, #15
 8000bb2:	f06f 0001 	mvn.w	r0, #1
 8000bb6:	f000 fb0b 	bl	80011d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800

08000bc8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08c      	sub	sp, #48	@ 0x30
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	4b2f      	ldr	r3, [pc, #188]	@ (8000c9c <HAL_InitTick+0xd4>)
 8000bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be0:	4a2e      	ldr	r2, [pc, #184]	@ (8000c9c <HAL_InitTick+0xd4>)
 8000be2:	f043 0301 	orr.w	r3, r3, #1
 8000be6:	6453      	str	r3, [r2, #68]	@ 0x44
 8000be8:	4b2c      	ldr	r3, [pc, #176]	@ (8000c9c <HAL_InitTick+0xd4>)
 8000bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bec:	f003 0301 	and.w	r3, r3, #1
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bf4:	f107 020c 	add.w	r2, r7, #12
 8000bf8:	f107 0310 	add.w	r3, r7, #16
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 ff12 	bl	8001a28 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000c04:	f000 fefc 	bl	8001a00 <HAL_RCC_GetPCLK2Freq>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c10:	4a23      	ldr	r2, [pc, #140]	@ (8000ca0 <HAL_InitTick+0xd8>)
 8000c12:	fba2 2303 	umull	r2, r3, r2, r3
 8000c16:	0c9b      	lsrs	r3, r3, #18
 8000c18:	3b01      	subs	r3, #1
 8000c1a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c1c:	4b21      	ldr	r3, [pc, #132]	@ (8000ca4 <HAL_InitTick+0xdc>)
 8000c1e:	4a22      	ldr	r2, [pc, #136]	@ (8000ca8 <HAL_InitTick+0xe0>)
 8000c20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c22:	4b20      	ldr	r3, [pc, #128]	@ (8000ca4 <HAL_InitTick+0xdc>)
 8000c24:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c28:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c2a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ca4 <HAL_InitTick+0xdc>)
 8000c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c2e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c30:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca4 <HAL_InitTick+0xdc>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c36:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca4 <HAL_InitTick+0xdc>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3c:	4b19      	ldr	r3, [pc, #100]	@ (8000ca4 <HAL_InitTick+0xdc>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000c42:	4818      	ldr	r0, [pc, #96]	@ (8000ca4 <HAL_InitTick+0xdc>)
 8000c44:	f001 ff1a 	bl	8002a7c <HAL_TIM_Base_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000c4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d11b      	bne.n	8000c8e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c56:	4813      	ldr	r0, [pc, #76]	@ (8000ca4 <HAL_InitTick+0xdc>)
 8000c58:	f001 ff6a 	bl	8002b30 <HAL_TIM_Base_Start_IT>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000c62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d111      	bne.n	8000c8e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c6a:	2019      	movs	r0, #25
 8000c6c:	f000 facc 	bl	8001208 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2b0f      	cmp	r3, #15
 8000c74:	d808      	bhi.n	8000c88 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000c76:	2200      	movs	r2, #0
 8000c78:	6879      	ldr	r1, [r7, #4]
 8000c7a:	2019      	movs	r0, #25
 8000c7c:	f000 faa8 	bl	80011d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c80:	4a0a      	ldr	r2, [pc, #40]	@ (8000cac <HAL_InitTick+0xe4>)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6013      	str	r3, [r2, #0]
 8000c86:	e002      	b.n	8000c8e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3730      	adds	r7, #48	@ 0x30
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	431bde83 	.word	0x431bde83
 8000ca4:	200000ac 	.word	0x200000ac
 8000ca8:	40010000 	.word	0x40010000
 8000cac:	20000004 	.word	0x20000004

08000cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <NMI_Handler+0x4>

08000cb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cbc:	bf00      	nop
 8000cbe:	e7fd      	b.n	8000cbc <HardFault_Handler+0x4>

08000cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc4:	bf00      	nop
 8000cc6:	e7fd      	b.n	8000cc4 <MemManage_Handler+0x4>

08000cc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <BusFault_Handler+0x4>

08000cd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <UsageFault_Handler+0x4>

08000cd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
	...

08000ce8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cec:	4802      	ldr	r0, [pc, #8]	@ (8000cf8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000cee:	f001 ff8f 	bl	8002c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200000ac 	.word	0x200000ac

08000cfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d00:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <SystemInit+0x20>)
 8000d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d06:	4a05      	ldr	r2, [pc, #20]	@ (8000d1c <SystemInit+0x20>)
 8000d08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d24:	4b11      	ldr	r3, [pc, #68]	@ (8000d6c <MX_USART3_UART_Init+0x4c>)
 8000d26:	4a12      	ldr	r2, [pc, #72]	@ (8000d70 <MX_USART3_UART_Init+0x50>)
 8000d28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d2a:	4b10      	ldr	r3, [pc, #64]	@ (8000d6c <MX_USART3_UART_Init+0x4c>)
 8000d2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d32:	4b0e      	ldr	r3, [pc, #56]	@ (8000d6c <MX_USART3_UART_Init+0x4c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d38:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <MX_USART3_UART_Init+0x4c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d6c <MX_USART3_UART_Init+0x4c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d44:	4b09      	ldr	r3, [pc, #36]	@ (8000d6c <MX_USART3_UART_Init+0x4c>)
 8000d46:	220c      	movs	r2, #12
 8000d48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4a:	4b08      	ldr	r3, [pc, #32]	@ (8000d6c <MX_USART3_UART_Init+0x4c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <MX_USART3_UART_Init+0x4c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d56:	4805      	ldr	r0, [pc, #20]	@ (8000d6c <MX_USART3_UART_Init+0x4c>)
 8000d58:	f002 f932 	bl	8002fc0 <HAL_UART_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d62:	f7ff feff 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200000f4 	.word	0x200000f4
 8000d70:	40004800 	.word	0x40004800

08000d74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	@ 0x28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a19      	ldr	r2, [pc, #100]	@ (8000df8 <HAL_UART_MspInit+0x84>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d12c      	bne.n	8000df0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	4b18      	ldr	r3, [pc, #96]	@ (8000dfc <HAL_UART_MspInit+0x88>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9e:	4a17      	ldr	r2, [pc, #92]	@ (8000dfc <HAL_UART_MspInit+0x88>)
 8000da0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000da4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000da6:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <HAL_UART_MspInit+0x88>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000daa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	4b11      	ldr	r3, [pc, #68]	@ (8000dfc <HAL_UART_MspInit+0x88>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	4a10      	ldr	r2, [pc, #64]	@ (8000dfc <HAL_UART_MspInit+0x88>)
 8000dbc:	f043 0308 	orr.w	r3, r3, #8
 8000dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000dfc <HAL_UART_MspInit+0x88>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	f003 0308 	and.w	r3, r3, #8
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000de0:	2307      	movs	r3, #7
 8000de2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	4619      	mov	r1, r3
 8000dea:	4805      	ldr	r0, [pc, #20]	@ (8000e00 <HAL_UART_MspInit+0x8c>)
 8000dec:	f000 fa1a 	bl	8001224 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000df0:	bf00      	nop
 8000df2:	3728      	adds	r7, #40	@ 0x28
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40004800 	.word	0x40004800
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020c00 	.word	0x40020c00

08000e04 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e08:	4b14      	ldr	r3, [pc, #80]	@ (8000e5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e0a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000e0e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000e10:	4b12      	ldr	r3, [pc, #72]	@ (8000e5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e12:	2206      	movs	r2, #6
 8000e14:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e16:	4b11      	ldr	r3, [pc, #68]	@ (8000e5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e18:	2202      	movs	r2, #2
 8000e1a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e22:	4b0e      	ldr	r3, [pc, #56]	@ (8000e5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e24:	2202      	movs	r2, #2
 8000e26:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000e28:	4b0c      	ldr	r3, [pc, #48]	@ (8000e5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e34:	4b09      	ldr	r3, [pc, #36]	@ (8000e5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000e3a:	4b08      	ldr	r3, [pc, #32]	@ (8000e5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e40:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e46:	4805      	ldr	r0, [pc, #20]	@ (8000e5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e48:	f000 fb99 	bl	800157e <HAL_PCD_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000e52:	f7ff fe87 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	2000013c 	.word	0x2000013c

08000e60 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b0a0      	sub	sp, #128	@ 0x80
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e78:	f107 0310 	add.w	r3, r7, #16
 8000e7c:	225c      	movs	r2, #92	@ 0x5c
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4618      	mov	r0, r3
 8000e82:	f006 ffd1 	bl	8007e28 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e8e:	d14e      	bne.n	8000f2e <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000e90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e94:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000e96:	2300      	movs	r3, #0
 8000e98:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e9a:	f107 0310 	add.w	r3, r7, #16
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 fdf4 	bl	8001a8c <HAL_RCCEx_PeriphCLKConfig>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000eaa:	f7ff fe5b 	bl	8000b64 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	4b21      	ldr	r3, [pc, #132]	@ (8000f38 <HAL_PCD_MspInit+0xd8>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	4a20      	ldr	r2, [pc, #128]	@ (8000f38 <HAL_PCD_MspInit+0xd8>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ebe:	4b1e      	ldr	r3, [pc, #120]	@ (8000f38 <HAL_PCD_MspInit+0xd8>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000eca:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000ece:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000edc:	230a      	movs	r3, #10
 8000ede:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4815      	ldr	r0, [pc, #84]	@ (8000f3c <HAL_PCD_MspInit+0xdc>)
 8000ee8:	f000 f99c 	bl	8001224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000eec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ef0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000efa:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000efe:	4619      	mov	r1, r3
 8000f00:	480e      	ldr	r0, [pc, #56]	@ (8000f3c <HAL_PCD_MspInit+0xdc>)
 8000f02:	f000 f98f 	bl	8001224 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f06:	4b0c      	ldr	r3, [pc, #48]	@ (8000f38 <HAL_PCD_MspInit+0xd8>)
 8000f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f0a:	4a0b      	ldr	r2, [pc, #44]	@ (8000f38 <HAL_PCD_MspInit+0xd8>)
 8000f0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f10:	6353      	str	r3, [r2, #52]	@ 0x34
 8000f12:	2300      	movs	r3, #0
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <HAL_PCD_MspInit+0xd8>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1a:	4a07      	ldr	r2, [pc, #28]	@ (8000f38 <HAL_PCD_MspInit+0xd8>)
 8000f1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f22:	4b05      	ldr	r3, [pc, #20]	@ (8000f38 <HAL_PCD_MspInit+0xd8>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000f2e:	bf00      	nop
 8000f30:	3780      	adds	r7, #128	@ 0x80
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40020000 	.word	0x40020000

08000f40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f78 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f44:	f7ff feda 	bl	8000cfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f48:	480c      	ldr	r0, [pc, #48]	@ (8000f7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f4a:	490d      	ldr	r1, [pc, #52]	@ (8000f80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f50:	e002      	b.n	8000f58 <LoopCopyDataInit>

08000f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f56:	3304      	adds	r3, #4

08000f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f5c:	d3f9      	bcc.n	8000f52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f60:	4c0a      	ldr	r4, [pc, #40]	@ (8000f8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f64:	e001      	b.n	8000f6a <LoopFillZerobss>

08000f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f68:	3204      	adds	r2, #4

08000f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f6c:	d3fb      	bcc.n	8000f66 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f6e:	f006 ffb9 	bl	8007ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f72:	f7ff fd65 	bl	8000a40 <main>
  bx  lr    
 8000f76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f80:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000f84:	08008358 	.word	0x08008358
  ldr r2, =_sbss
 8000f88:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000f8c:	2000514c 	.word	0x2000514c

08000f90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f90:	e7fe      	b.n	8000f90 <ADC_IRQHandler>
	...

08000f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f98:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd4 <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd4 <HAL_Init+0x40>)
 8000f9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd4 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd4 <HAL_Init+0x40>)
 8000faa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb0:	4b08      	ldr	r3, [pc, #32]	@ (8000fd4 <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a07      	ldr	r2, [pc, #28]	@ (8000fd4 <HAL_Init+0x40>)
 8000fb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fbc:	2003      	movs	r0, #3
 8000fbe:	f000 f8fc 	bl	80011ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc2:	200f      	movs	r0, #15
 8000fc4:	f7ff fe00 	bl	8000bc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc8:	f7ff fdd2 	bl	8000b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40023c00 	.word	0x40023c00

08000fd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <HAL_IncTick+0x20>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <HAL_IncTick+0x24>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	4a04      	ldr	r2, [pc, #16]	@ (8000ffc <HAL_IncTick+0x24>)
 8000fea:	6013      	str	r3, [r2, #0]
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20000008 	.word	0x20000008
 8000ffc:	20000620 	.word	0x20000620

08001000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return uwTick;
 8001004:	4b03      	ldr	r3, [pc, #12]	@ (8001014 <HAL_GetTick+0x14>)
 8001006:	681b      	ldr	r3, [r3, #0]
}
 8001008:	4618      	mov	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20000620 	.word	0x20000620

08001018 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001020:	f7ff ffee 	bl	8001000 <HAL_GetTick>
 8001024:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001030:	d005      	beq.n	800103e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001032:	4b0a      	ldr	r3, [pc, #40]	@ (800105c <HAL_Delay+0x44>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	461a      	mov	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4413      	add	r3, r2
 800103c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800103e:	bf00      	nop
 8001040:	f7ff ffde 	bl	8001000 <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	429a      	cmp	r2, r3
 800104e:	d8f7      	bhi.n	8001040 <HAL_Delay+0x28>
  {
  }
}
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000008 	.word	0x20000008

08001060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001070:	4b0c      	ldr	r3, [pc, #48]	@ (80010a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800107c:	4013      	ands	r3, r2
 800107e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001088:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800108c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001092:	4a04      	ldr	r2, [pc, #16]	@ (80010a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	60d3      	str	r3, [r2, #12]
}
 8001098:	bf00      	nop
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010ac:	4b04      	ldr	r3, [pc, #16]	@ (80010c0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	0a1b      	lsrs	r3, r3, #8
 80010b2:	f003 0307 	and.w	r3, r3, #7
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	db0b      	blt.n	80010ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	f003 021f 	and.w	r2, r3, #31
 80010dc:	4907      	ldr	r1, [pc, #28]	@ (80010fc <__NVIC_EnableIRQ+0x38>)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	095b      	lsrs	r3, r3, #5
 80010e4:	2001      	movs	r0, #1
 80010e6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000e100 	.word	0xe000e100

08001100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	6039      	str	r1, [r7, #0]
 800110a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800110c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001110:	2b00      	cmp	r3, #0
 8001112:	db0a      	blt.n	800112a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	b2da      	uxtb	r2, r3
 8001118:	490c      	ldr	r1, [pc, #48]	@ (800114c <__NVIC_SetPriority+0x4c>)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	0112      	lsls	r2, r2, #4
 8001120:	b2d2      	uxtb	r2, r2
 8001122:	440b      	add	r3, r1
 8001124:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001128:	e00a      	b.n	8001140 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	b2da      	uxtb	r2, r3
 800112e:	4908      	ldr	r1, [pc, #32]	@ (8001150 <__NVIC_SetPriority+0x50>)
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	f003 030f 	and.w	r3, r3, #15
 8001136:	3b04      	subs	r3, #4
 8001138:	0112      	lsls	r2, r2, #4
 800113a:	b2d2      	uxtb	r2, r2
 800113c:	440b      	add	r3, r1
 800113e:	761a      	strb	r2, [r3, #24]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000e100 	.word	0xe000e100
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001154:	b480      	push	{r7}
 8001156:	b089      	sub	sp, #36	@ 0x24
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	f1c3 0307 	rsb	r3, r3, #7
 800116e:	2b04      	cmp	r3, #4
 8001170:	bf28      	it	cs
 8001172:	2304      	movcs	r3, #4
 8001174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3304      	adds	r3, #4
 800117a:	2b06      	cmp	r3, #6
 800117c:	d902      	bls.n	8001184 <NVIC_EncodePriority+0x30>
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3b03      	subs	r3, #3
 8001182:	e000      	b.n	8001186 <NVIC_EncodePriority+0x32>
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001188:	f04f 32ff 	mov.w	r2, #4294967295
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43da      	mvns	r2, r3
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	401a      	ands	r2, r3
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800119c:	f04f 31ff 	mov.w	r1, #4294967295
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	fa01 f303 	lsl.w	r3, r1, r3
 80011a6:	43d9      	mvns	r1, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ac:	4313      	orrs	r3, r2
         );
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3724      	adds	r7, #36	@ 0x24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ff4c 	bl	8001060 <__NVIC_SetPriorityGrouping>
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
 80011dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011e2:	f7ff ff61 	bl	80010a8 <__NVIC_GetPriorityGrouping>
 80011e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	68b9      	ldr	r1, [r7, #8]
 80011ec:	6978      	ldr	r0, [r7, #20]
 80011ee:	f7ff ffb1 	bl	8001154 <NVIC_EncodePriority>
 80011f2:	4602      	mov	r2, r0
 80011f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f8:	4611      	mov	r1, r2
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff ff80 	bl	8001100 <__NVIC_SetPriority>
}
 8001200:	bf00      	nop
 8001202:	3718      	adds	r7, #24
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ff54 	bl	80010c4 <__NVIC_EnableIRQ>
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001224:	b480      	push	{r7}
 8001226:	b089      	sub	sp, #36	@ 0x24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001236:	2300      	movs	r3, #0
 8001238:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
 800123e:	e165      	b.n	800150c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001240:	2201      	movs	r2, #1
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	4013      	ands	r3, r2
 8001252:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	429a      	cmp	r2, r3
 800125a:	f040 8154 	bne.w	8001506 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	2b01      	cmp	r3, #1
 8001268:	d005      	beq.n	8001276 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001272:	2b02      	cmp	r3, #2
 8001274:	d130      	bne.n	80012d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	2203      	movs	r2, #3
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4013      	ands	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	68da      	ldr	r2, [r3, #12]
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012ac:	2201      	movs	r2, #1
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	091b      	lsrs	r3, r3, #4
 80012c2:	f003 0201 	and.w	r2, r3, #1
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	2b03      	cmp	r3, #3
 80012e2:	d017      	beq.n	8001314 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	2203      	movs	r2, #3
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 0303 	and.w	r3, r3, #3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d123      	bne.n	8001368 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	08da      	lsrs	r2, r3, #3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3208      	adds	r2, #8
 8001328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800132c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	f003 0307 	and.w	r3, r3, #7
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	220f      	movs	r2, #15
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	691a      	ldr	r2, [r3, #16]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	08da      	lsrs	r2, r3, #3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	3208      	adds	r2, #8
 8001362:	69b9      	ldr	r1, [r7, #24]
 8001364:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	2203      	movs	r2, #3
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 0203 	and.w	r2, r3, #3
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f000 80ae 	beq.w	8001506 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001524 <HAL_GPIO_Init+0x300>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b2:	4a5c      	ldr	r2, [pc, #368]	@ (8001524 <HAL_GPIO_Init+0x300>)
 80013b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ba:	4b5a      	ldr	r3, [pc, #360]	@ (8001524 <HAL_GPIO_Init+0x300>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013c6:	4a58      	ldr	r2, [pc, #352]	@ (8001528 <HAL_GPIO_Init+0x304>)
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	089b      	lsrs	r3, r3, #2
 80013cc:	3302      	adds	r3, #2
 80013ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	220f      	movs	r2, #15
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a4f      	ldr	r2, [pc, #316]	@ (800152c <HAL_GPIO_Init+0x308>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d025      	beq.n	800143e <HAL_GPIO_Init+0x21a>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a4e      	ldr	r2, [pc, #312]	@ (8001530 <HAL_GPIO_Init+0x30c>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d01f      	beq.n	800143a <HAL_GPIO_Init+0x216>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a4d      	ldr	r2, [pc, #308]	@ (8001534 <HAL_GPIO_Init+0x310>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d019      	beq.n	8001436 <HAL_GPIO_Init+0x212>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a4c      	ldr	r2, [pc, #304]	@ (8001538 <HAL_GPIO_Init+0x314>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d013      	beq.n	8001432 <HAL_GPIO_Init+0x20e>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a4b      	ldr	r2, [pc, #300]	@ (800153c <HAL_GPIO_Init+0x318>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d00d      	beq.n	800142e <HAL_GPIO_Init+0x20a>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a4a      	ldr	r2, [pc, #296]	@ (8001540 <HAL_GPIO_Init+0x31c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d007      	beq.n	800142a <HAL_GPIO_Init+0x206>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a49      	ldr	r2, [pc, #292]	@ (8001544 <HAL_GPIO_Init+0x320>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d101      	bne.n	8001426 <HAL_GPIO_Init+0x202>
 8001422:	2306      	movs	r3, #6
 8001424:	e00c      	b.n	8001440 <HAL_GPIO_Init+0x21c>
 8001426:	2307      	movs	r3, #7
 8001428:	e00a      	b.n	8001440 <HAL_GPIO_Init+0x21c>
 800142a:	2305      	movs	r3, #5
 800142c:	e008      	b.n	8001440 <HAL_GPIO_Init+0x21c>
 800142e:	2304      	movs	r3, #4
 8001430:	e006      	b.n	8001440 <HAL_GPIO_Init+0x21c>
 8001432:	2303      	movs	r3, #3
 8001434:	e004      	b.n	8001440 <HAL_GPIO_Init+0x21c>
 8001436:	2302      	movs	r3, #2
 8001438:	e002      	b.n	8001440 <HAL_GPIO_Init+0x21c>
 800143a:	2301      	movs	r3, #1
 800143c:	e000      	b.n	8001440 <HAL_GPIO_Init+0x21c>
 800143e:	2300      	movs	r3, #0
 8001440:	69fa      	ldr	r2, [r7, #28]
 8001442:	f002 0203 	and.w	r2, r2, #3
 8001446:	0092      	lsls	r2, r2, #2
 8001448:	4093      	lsls	r3, r2
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001450:	4935      	ldr	r1, [pc, #212]	@ (8001528 <HAL_GPIO_Init+0x304>)
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	089b      	lsrs	r3, r3, #2
 8001456:	3302      	adds	r3, #2
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800145e:	4b3a      	ldr	r3, [pc, #232]	@ (8001548 <HAL_GPIO_Init+0x324>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	43db      	mvns	r3, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4013      	ands	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001482:	4a31      	ldr	r2, [pc, #196]	@ (8001548 <HAL_GPIO_Init+0x324>)
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001488:	4b2f      	ldr	r3, [pc, #188]	@ (8001548 <HAL_GPIO_Init+0x324>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	43db      	mvns	r3, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4013      	ands	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014ac:	4a26      	ldr	r2, [pc, #152]	@ (8001548 <HAL_GPIO_Init+0x324>)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014b2:	4b25      	ldr	r3, [pc, #148]	@ (8001548 <HAL_GPIO_Init+0x324>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	43db      	mvns	r3, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4013      	ands	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001548 <HAL_GPIO_Init+0x324>)
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001548 <HAL_GPIO_Init+0x324>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001500:	4a11      	ldr	r2, [pc, #68]	@ (8001548 <HAL_GPIO_Init+0x324>)
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3301      	adds	r3, #1
 800150a:	61fb      	str	r3, [r7, #28]
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	2b0f      	cmp	r3, #15
 8001510:	f67f ae96 	bls.w	8001240 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop
 8001518:	3724      	adds	r7, #36	@ 0x24
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800
 8001528:	40013800 	.word	0x40013800
 800152c:	40020000 	.word	0x40020000
 8001530:	40020400 	.word	0x40020400
 8001534:	40020800 	.word	0x40020800
 8001538:	40020c00 	.word	0x40020c00
 800153c:	40021000 	.word	0x40021000
 8001540:	40021400 	.word	0x40021400
 8001544:	40021800 	.word	0x40021800
 8001548:	40013c00 	.word	0x40013c00

0800154c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	807b      	strh	r3, [r7, #2]
 8001558:	4613      	mov	r3, r2
 800155a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800155c:	787b      	ldrb	r3, [r7, #1]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001562:	887a      	ldrh	r2, [r7, #2]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001568:	e003      	b.n	8001572 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800156a:	887b      	ldrh	r3, [r7, #2]
 800156c:	041a      	lsls	r2, r3, #16
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	619a      	str	r2, [r3, #24]
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b086      	sub	sp, #24
 8001582:	af02      	add	r7, sp, #8
 8001584:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e108      	b.n	80017a2 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d106      	bne.n	80015b0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff fc58 	bl	8000e60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2203      	movs	r2, #3
 80015b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015be:	d102      	bne.n	80015c6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f002 f9fe 	bl	80039cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6818      	ldr	r0, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	7c1a      	ldrb	r2, [r3, #16]
 80015d8:	f88d 2000 	strb.w	r2, [sp]
 80015dc:	3304      	adds	r3, #4
 80015de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015e0:	f002 f990 	bl	8003904 <USB_CoreInit>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d005      	beq.n	80015f6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2202      	movs	r2, #2
 80015ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e0d5      	b.n	80017a2 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2100      	movs	r1, #0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f002 f9f6 	bl	80039ee <USB_SetCurrentMode>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d005      	beq.n	8001614 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2202      	movs	r2, #2
 800160c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e0c6      	b.n	80017a2 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001614:	2300      	movs	r3, #0
 8001616:	73fb      	strb	r3, [r7, #15]
 8001618:	e04a      	b.n	80016b0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800161a:	7bfa      	ldrb	r2, [r7, #15]
 800161c:	6879      	ldr	r1, [r7, #4]
 800161e:	4613      	mov	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	4413      	add	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	440b      	add	r3, r1
 8001628:	3315      	adds	r3, #21
 800162a:	2201      	movs	r2, #1
 800162c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800162e:	7bfa      	ldrb	r2, [r7, #15]
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	4613      	mov	r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	4413      	add	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	440b      	add	r3, r1
 800163c:	3314      	adds	r3, #20
 800163e:	7bfa      	ldrb	r2, [r7, #15]
 8001640:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001642:	7bfa      	ldrb	r2, [r7, #15]
 8001644:	7bfb      	ldrb	r3, [r7, #15]
 8001646:	b298      	uxth	r0, r3
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	4413      	add	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	440b      	add	r3, r1
 8001654:	332e      	adds	r3, #46	@ 0x2e
 8001656:	4602      	mov	r2, r0
 8001658:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800165a:	7bfa      	ldrb	r2, [r7, #15]
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	4613      	mov	r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	4413      	add	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	440b      	add	r3, r1
 8001668:	3318      	adds	r3, #24
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800166e:	7bfa      	ldrb	r2, [r7, #15]
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	4413      	add	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	440b      	add	r3, r1
 800167c:	331c      	adds	r3, #28
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001682:	7bfa      	ldrb	r2, [r7, #15]
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	4413      	add	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	440b      	add	r3, r1
 8001690:	3320      	adds	r3, #32
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001696:	7bfa      	ldrb	r2, [r7, #15]
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	4413      	add	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	440b      	add	r3, r1
 80016a4:	3324      	adds	r3, #36	@ 0x24
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	3301      	adds	r3, #1
 80016ae:	73fb      	strb	r3, [r7, #15]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	791b      	ldrb	r3, [r3, #4]
 80016b4:	7bfa      	ldrb	r2, [r7, #15]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d3af      	bcc.n	800161a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016ba:	2300      	movs	r3, #0
 80016bc:	73fb      	strb	r3, [r7, #15]
 80016be:	e044      	b.n	800174a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016c0:	7bfa      	ldrb	r2, [r7, #15]
 80016c2:	6879      	ldr	r1, [r7, #4]
 80016c4:	4613      	mov	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	4413      	add	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	440b      	add	r3, r1
 80016ce:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80016d2:	2200      	movs	r2, #0
 80016d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016d6:	7bfa      	ldrb	r2, [r7, #15]
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	4413      	add	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	440b      	add	r3, r1
 80016e4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80016e8:	7bfa      	ldrb	r2, [r7, #15]
 80016ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016ec:	7bfa      	ldrb	r2, [r7, #15]
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	4613      	mov	r3, r2
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	4413      	add	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	440b      	add	r3, r1
 80016fa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001702:	7bfa      	ldrb	r2, [r7, #15]
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	4613      	mov	r3, r2
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	4413      	add	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	440b      	add	r3, r1
 8001710:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001718:	7bfa      	ldrb	r2, [r7, #15]
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	4613      	mov	r3, r2
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	4413      	add	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	440b      	add	r3, r1
 8001726:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800172e:	7bfa      	ldrb	r2, [r7, #15]
 8001730:	6879      	ldr	r1, [r7, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	4413      	add	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	440b      	add	r3, r1
 800173c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	3301      	adds	r3, #1
 8001748:	73fb      	strb	r3, [r7, #15]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	791b      	ldrb	r3, [r3, #4]
 800174e:	7bfa      	ldrb	r2, [r7, #15]
 8001750:	429a      	cmp	r2, r3
 8001752:	d3b5      	bcc.n	80016c0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6818      	ldr	r0, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	7c1a      	ldrb	r2, [r3, #16]
 800175c:	f88d 2000 	strb.w	r2, [sp]
 8001760:	3304      	adds	r3, #4
 8001762:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001764:	f002 f990 	bl	8003a88 <USB_DevInit>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d005      	beq.n	800177a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2202      	movs	r2, #2
 8001772:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e013      	b.n	80017a2 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	7b1b      	ldrb	r3, [r3, #12]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d102      	bne.n	8001796 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 f80a 	bl	80017aa <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f002 fb4b 	bl	8003e36 <USB_DevDisconnect>

  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b085      	sub	sp, #20
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017dc:	f043 0303 	orr.w	r3, r3, #3
 80017e0:	68fa      	ldr	r2, [r7, #12]
 80017e2:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e0cc      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001808:	4b68      	ldr	r3, [pc, #416]	@ (80019ac <HAL_RCC_ClockConfig+0x1b8>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 030f 	and.w	r3, r3, #15
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	d90c      	bls.n	8001830 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001816:	4b65      	ldr	r3, [pc, #404]	@ (80019ac <HAL_RCC_ClockConfig+0x1b8>)
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800181e:	4b63      	ldr	r3, [pc, #396]	@ (80019ac <HAL_RCC_ClockConfig+0x1b8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	d001      	beq.n	8001830 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e0b8      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d020      	beq.n	800187e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b00      	cmp	r3, #0
 8001846:	d005      	beq.n	8001854 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001848:	4b59      	ldr	r3, [pc, #356]	@ (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	4a58      	ldr	r2, [pc, #352]	@ (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001852:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0308 	and.w	r3, r3, #8
 800185c:	2b00      	cmp	r3, #0
 800185e:	d005      	beq.n	800186c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001860:	4b53      	ldr	r3, [pc, #332]	@ (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	4a52      	ldr	r2, [pc, #328]	@ (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001866:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800186a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800186c:	4b50      	ldr	r3, [pc, #320]	@ (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	494d      	ldr	r1, [pc, #308]	@ (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	4313      	orrs	r3, r2
 800187c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b00      	cmp	r3, #0
 8001888:	d044      	beq.n	8001914 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d107      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001892:	4b47      	ldr	r3, [pc, #284]	@ (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d119      	bne.n	80018d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e07f      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d003      	beq.n	80018b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ae:	2b03      	cmp	r3, #3
 80018b0:	d107      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b2:	4b3f      	ldr	r3, [pc, #252]	@ (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d109      	bne.n	80018d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e06f      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c2:	4b3b      	ldr	r3, [pc, #236]	@ (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e067      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018d2:	4b37      	ldr	r3, [pc, #220]	@ (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f023 0203 	bic.w	r2, r3, #3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	4934      	ldr	r1, [pc, #208]	@ (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018e4:	f7ff fb8c 	bl	8001000 <HAL_GetTick>
 80018e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ea:	e00a      	b.n	8001902 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ec:	f7ff fb88 	bl	8001000 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e04f      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001902:	4b2b      	ldr	r3, [pc, #172]	@ (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 020c 	and.w	r2, r3, #12
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	429a      	cmp	r2, r3
 8001912:	d1eb      	bne.n	80018ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001914:	4b25      	ldr	r3, [pc, #148]	@ (80019ac <HAL_RCC_ClockConfig+0x1b8>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 030f 	and.w	r3, r3, #15
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	429a      	cmp	r2, r3
 8001920:	d20c      	bcs.n	800193c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001922:	4b22      	ldr	r3, [pc, #136]	@ (80019ac <HAL_RCC_ClockConfig+0x1b8>)
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800192a:	4b20      	ldr	r3, [pc, #128]	@ (80019ac <HAL_RCC_ClockConfig+0x1b8>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	429a      	cmp	r2, r3
 8001936:	d001      	beq.n	800193c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e032      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	d008      	beq.n	800195a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001948:	4b19      	ldr	r3, [pc, #100]	@ (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	4916      	ldr	r1, [pc, #88]	@ (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	4313      	orrs	r3, r2
 8001958:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	2b00      	cmp	r3, #0
 8001964:	d009      	beq.n	800197a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001966:	4b12      	ldr	r3, [pc, #72]	@ (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	490e      	ldr	r1, [pc, #56]	@ (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	4313      	orrs	r3, r2
 8001978:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800197a:	f000 fbb1 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 800197e:	4602      	mov	r2, r0
 8001980:	4b0b      	ldr	r3, [pc, #44]	@ (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	091b      	lsrs	r3, r3, #4
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	490a      	ldr	r1, [pc, #40]	@ (80019b4 <HAL_RCC_ClockConfig+0x1c0>)
 800198c:	5ccb      	ldrb	r3, [r1, r3]
 800198e:	fa22 f303 	lsr.w	r3, r2, r3
 8001992:	4a09      	ldr	r2, [pc, #36]	@ (80019b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001994:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001996:	4b09      	ldr	r3, [pc, #36]	@ (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff f914 	bl	8000bc8 <HAL_InitTick>

  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40023c00 	.word	0x40023c00
 80019b0:	40023800 	.word	0x40023800
 80019b4:	08008330 	.word	0x08008330
 80019b8:	20000000 	.word	0x20000000
 80019bc:	20000004 	.word	0x20000004

080019c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019c4:	4b03      	ldr	r3, [pc, #12]	@ (80019d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80019c6:	681b      	ldr	r3, [r3, #0]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	20000000 	.word	0x20000000

080019d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019dc:	f7ff fff0 	bl	80019c0 <HAL_RCC_GetHCLKFreq>
 80019e0:	4602      	mov	r2, r0
 80019e2:	4b05      	ldr	r3, [pc, #20]	@ (80019f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	0a9b      	lsrs	r3, r3, #10
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	4903      	ldr	r1, [pc, #12]	@ (80019fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ee:	5ccb      	ldrb	r3, [r1, r3]
 80019f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40023800 	.word	0x40023800
 80019fc:	08008340 	.word	0x08008340

08001a00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a04:	f7ff ffdc 	bl	80019c0 <HAL_RCC_GetHCLKFreq>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	4b05      	ldr	r3, [pc, #20]	@ (8001a20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	0b5b      	lsrs	r3, r3, #13
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	4903      	ldr	r1, [pc, #12]	@ (8001a24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a16:	5ccb      	ldrb	r3, [r1, r3]
 8001a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40023800 	.word	0x40023800
 8001a24:	08008340 	.word	0x08008340

08001a28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	220f      	movs	r2, #15
 8001a36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a38:	4b12      	ldr	r3, [pc, #72]	@ (8001a84 <HAL_RCC_GetClockConfig+0x5c>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 0203 	and.w	r2, r3, #3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a44:	4b0f      	ldr	r3, [pc, #60]	@ (8001a84 <HAL_RCC_GetClockConfig+0x5c>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a50:	4b0c      	ldr	r3, [pc, #48]	@ (8001a84 <HAL_RCC_GetClockConfig+0x5c>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a5c:	4b09      	ldr	r3, [pc, #36]	@ (8001a84 <HAL_RCC_GetClockConfig+0x5c>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	08db      	lsrs	r3, r3, #3
 8001a62:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a6a:	4b07      	ldr	r3, [pc, #28]	@ (8001a88 <HAL_RCC_GetClockConfig+0x60>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 020f 	and.w	r2, r3, #15
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	601a      	str	r2, [r3, #0]
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40023c00 	.word	0x40023c00

08001a8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08c      	sub	sp, #48	@ 0x30
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d010      	beq.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001ac4:	4b6f      	ldr	r3, [pc, #444]	@ (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ac6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001aca:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ad2:	496c      	ldr	r1, [pc, #432]	@ (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d010      	beq.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001af2:	4b64      	ldr	r3, [pc, #400]	@ (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001af8:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b00:	4960      	ldr	r1, [pc, #384]	@ (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001b10:	2301      	movs	r3, #1
 8001b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d017      	beq.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b20:	4b58      	ldr	r3, [pc, #352]	@ (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2e:	4955      	ldr	r1, [pc, #340]	@ (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001b3e:	d101      	bne.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001b40:	2301      	movs	r3, #1
 8001b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0308 	and.w	r3, r3, #8
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d017      	beq.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001b5c:	4b49      	ldr	r3, [pc, #292]	@ (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b62:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b6a:	4946      	ldr	r1, [pc, #280]	@ (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b7a:	d101      	bne.n	8001b80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0320 	and.w	r3, r3, #32
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 808a 	beq.w	8001cae <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	4b39      	ldr	r3, [pc, #228]	@ (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba2:	4a38      	ldr	r2, [pc, #224]	@ (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ba4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ba8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001baa:	4b36      	ldr	r3, [pc, #216]	@ (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001bb6:	4b34      	ldr	r3, [pc, #208]	@ (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a33      	ldr	r2, [pc, #204]	@ (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001bbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bc0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001bc2:	f7ff fa1d 	bl	8001000 <HAL_GetTick>
 8001bc6:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bca:	f7ff fa19 	bl	8001000 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e278      	b.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001bdc:	4b2a      	ldr	r3, [pc, #168]	@ (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0f0      	beq.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001be8:	4b26      	ldr	r3, [pc, #152]	@ (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001bf0:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001bf2:	6a3b      	ldr	r3, [r7, #32]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d02f      	beq.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c00:	6a3a      	ldr	r2, [r7, #32]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d028      	beq.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c06:	4b1f      	ldr	r3, [pc, #124]	@ (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c0e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c10:	4b1e      	ldr	r3, [pc, #120]	@ (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c16:	4b1d      	ldr	r3, [pc, #116]	@ (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001c1c:	4a19      	ldr	r2, [pc, #100]	@ (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c1e:	6a3b      	ldr	r3, [r7, #32]
 8001c20:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001c22:	4b18      	ldr	r3, [pc, #96]	@ (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d114      	bne.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001c2e:	f7ff f9e7 	bl	8001000 <HAL_GetTick>
 8001c32:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c34:	e00a      	b.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c36:	f7ff f9e3 	bl	8001000 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e240      	b.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0ee      	beq.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001c64:	d114      	bne.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001c66:	4b07      	ldr	r3, [pc, #28]	@ (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c72:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001c76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c7a:	4902      	ldr	r1, [pc, #8]	@ (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	608b      	str	r3, [r1, #8]
 8001c80:	e00c      	b.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001c82:	bf00      	nop
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40007000 	.word	0x40007000
 8001c8c:	42470e40 	.word	0x42470e40
 8001c90:	4b4a      	ldr	r3, [pc, #296]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	4a49      	ldr	r2, [pc, #292]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c96:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001c9a:	6093      	str	r3, [r2, #8]
 8001c9c:	4b47      	ldr	r3, [pc, #284]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c9e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ca8:	4944      	ldr	r1, [pc, #272]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0310 	and.w	r3, r3, #16
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d004      	beq.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8001cc0:	4b3f      	ldr	r3, [pc, #252]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001cc2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d00a      	beq.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001cd0:	4b3a      	ldr	r3, [pc, #232]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cd6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cde:	4937      	ldr	r1, [pc, #220]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00a      	beq.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001cf2:	4b32      	ldr	r3, [pc, #200]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cf8:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d00:	492e      	ldr	r1, [pc, #184]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d011      	beq.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001d14:	4b29      	ldr	r3, [pc, #164]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d1a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d22:	4926      	ldr	r1, [pc, #152]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001d32:	d101      	bne.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001d34:	2301      	movs	r3, #1
 8001d36:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d00a      	beq.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001d44:	4b1d      	ldr	r3, [pc, #116]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d4a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d52:	491a      	ldr	r1, [pc, #104]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d011      	beq.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001d66:	4b15      	ldr	r3, [pc, #84]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d6c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d74:	4911      	ldr	r1, [pc, #68]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d84:	d101      	bne.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001d86:	2301      	movs	r3, #1
 8001d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d005      	beq.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d98:	f040 80ff 	bne.w	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001d9c:	4b09      	ldr	r3, [pc, #36]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001da2:	f7ff f92d 	bl	8001000 <HAL_GetTick>
 8001da6:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001da8:	e00e      	b.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001daa:	f7ff f929 	bl	8001000 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d907      	bls.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e188      	b.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	424711e0 	.word	0x424711e0
 8001dc4:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001dc8:	4b7e      	ldr	r3, [pc, #504]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1ea      	bne.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d003      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d009      	beq.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d028      	beq.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d124      	bne.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001dfc:	4b71      	ldr	r3, [pc, #452]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e02:	0c1b      	lsrs	r3, r3, #16
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	3301      	adds	r3, #1
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001e0e:	4b6d      	ldr	r3, [pc, #436]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e14:	0e1b      	lsrs	r3, r3, #24
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	019b      	lsls	r3, r3, #6
 8001e26:	431a      	orrs	r2, r3
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	085b      	lsrs	r3, r3, #1
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	041b      	lsls	r3, r3, #16
 8001e30:	431a      	orrs	r2, r3
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	061b      	lsls	r3, r3, #24
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	071b      	lsls	r3, r3, #28
 8001e3e:	4961      	ldr	r1, [pc, #388]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d004      	beq.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001e5a:	d00a      	beq.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d035      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e70:	d130      	bne.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001e72:	4b54      	ldr	r3, [pc, #336]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e78:	0c1b      	lsrs	r3, r3, #16
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	3301      	adds	r3, #1
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001e84:	4b4f      	ldr	r3, [pc, #316]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e8a:	0f1b      	lsrs	r3, r3, #28
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	019b      	lsls	r3, r3, #6
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	085b      	lsrs	r3, r3, #1
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	041b      	lsls	r3, r3, #16
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	061b      	lsls	r3, r3, #24
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	071b      	lsls	r3, r3, #28
 8001eb4:	4943      	ldr	r1, [pc, #268]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001ebc:	4b41      	ldr	r3, [pc, #260]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ec2:	f023 021f 	bic.w	r2, r3, #31
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	493d      	ldr	r1, [pc, #244]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d029      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ee4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ee8:	d124      	bne.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001eea:	4b36      	ldr	r3, [pc, #216]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ef0:	0c1b      	lsrs	r3, r3, #16
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001efc:	4b31      	ldr	r3, [pc, #196]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f02:	0f1b      	lsrs	r3, r3, #28
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	019b      	lsls	r3, r3, #6
 8001f14:	431a      	orrs	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	085b      	lsrs	r3, r3, #1
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	041b      	lsls	r3, r3, #16
 8001f20:	431a      	orrs	r2, r3
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	061b      	lsls	r3, r3, #24
 8001f26:	431a      	orrs	r2, r3
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	071b      	lsls	r3, r3, #28
 8001f2c:	4925      	ldr	r1, [pc, #148]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d016      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	019b      	lsls	r3, r3, #6
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	085b      	lsrs	r3, r3, #1
 8001f52:	3b01      	subs	r3, #1
 8001f54:	041b      	lsls	r3, r3, #16
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	061b      	lsls	r3, r3, #24
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	695b      	ldr	r3, [r3, #20]
 8001f64:	071b      	lsls	r3, r3, #28
 8001f66:	4917      	ldr	r1, [pc, #92]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001f6e:	4b16      	ldr	r3, [pc, #88]	@ (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f74:	f7ff f844 	bl	8001000 <HAL_GetTick>
 8001f78:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001f7c:	f7ff f840 	bl	8001000 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e09f      	b.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0f0      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8001f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	f040 8095 	bne.w	80020cc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001fa8:	f7ff f82a 	bl	8001000 <HAL_GetTick>
 8001fac:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001fae:	e00f      	b.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001fb0:	f7ff f826 	bl	8001000 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d908      	bls.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e085      	b.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	42470068 	.word	0x42470068
 8001fcc:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001fd0:	4b41      	ldr	r3, [pc, #260]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001fd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001fdc:	d0e8      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d009      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d02b      	beq.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002002:	2b00      	cmp	r3, #0
 8002004:	d127      	bne.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002006:	4b34      	ldr	r3, [pc, #208]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800200c:	0c1b      	lsrs	r3, r3, #16
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	3301      	adds	r3, #1
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	699a      	ldr	r2, [r3, #24]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	019b      	lsls	r3, r3, #6
 8002022:	431a      	orrs	r2, r3
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	085b      	lsrs	r3, r3, #1
 8002028:	3b01      	subs	r3, #1
 800202a:	041b      	lsls	r3, r3, #16
 800202c:	431a      	orrs	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002032:	061b      	lsls	r3, r3, #24
 8002034:	4928      	ldr	r1, [pc, #160]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002036:	4313      	orrs	r3, r2
 8002038:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800203c:	4b26      	ldr	r3, [pc, #152]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800203e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002042:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800204a:	3b01      	subs	r3, #1
 800204c:	021b      	lsls	r3, r3, #8
 800204e:	4922      	ldr	r1, [pc, #136]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002050:	4313      	orrs	r3, r2
 8002052:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800205e:	2b00      	cmp	r3, #0
 8002060:	d01d      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002066:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800206a:	d118      	bne.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800206c:	4b1a      	ldr	r3, [pc, #104]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800206e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002072:	0e1b      	lsrs	r3, r3, #24
 8002074:	f003 030f 	and.w	r3, r3, #15
 8002078:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	699a      	ldr	r2, [r3, #24]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	019b      	lsls	r3, r3, #6
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	085b      	lsrs	r3, r3, #1
 800208c:	3b01      	subs	r3, #1
 800208e:	041b      	lsls	r3, r3, #16
 8002090:	431a      	orrs	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	061b      	lsls	r3, r3, #24
 8002096:	4910      	ldr	r1, [pc, #64]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002098:	4313      	orrs	r3, r2
 800209a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800209e:	4b0f      	ldr	r3, [pc, #60]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80020a4:	f7fe ffac 	bl	8001000 <HAL_GetTick>
 80020a8:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80020ac:	f7fe ffa8 	bl	8001000 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e007      	b.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80020be:	4b06      	ldr	r3, [pc, #24]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80020c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80020ca:	d1ef      	bne.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3730      	adds	r7, #48	@ 0x30
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40023800 	.word	0x40023800
 80020dc:	42470070 	.word	0x42470070

080020e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020e4:	b0ae      	sub	sp, #184	@ 0xb8
 80020e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002106:	4bcb      	ldr	r3, [pc, #812]	@ (8002434 <HAL_RCC_GetSysClockFreq+0x354>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	2b0c      	cmp	r3, #12
 8002110:	f200 8206 	bhi.w	8002520 <HAL_RCC_GetSysClockFreq+0x440>
 8002114:	a201      	add	r2, pc, #4	@ (adr r2, 800211c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800211a:	bf00      	nop
 800211c:	08002151 	.word	0x08002151
 8002120:	08002521 	.word	0x08002521
 8002124:	08002521 	.word	0x08002521
 8002128:	08002521 	.word	0x08002521
 800212c:	08002159 	.word	0x08002159
 8002130:	08002521 	.word	0x08002521
 8002134:	08002521 	.word	0x08002521
 8002138:	08002521 	.word	0x08002521
 800213c:	08002161 	.word	0x08002161
 8002140:	08002521 	.word	0x08002521
 8002144:	08002521 	.word	0x08002521
 8002148:	08002521 	.word	0x08002521
 800214c:	08002351 	.word	0x08002351
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002150:	4bb9      	ldr	r3, [pc, #740]	@ (8002438 <HAL_RCC_GetSysClockFreq+0x358>)
 8002152:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002156:	e1e7      	b.n	8002528 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002158:	4bb8      	ldr	r3, [pc, #736]	@ (800243c <HAL_RCC_GetSysClockFreq+0x35c>)
 800215a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800215e:	e1e3      	b.n	8002528 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002160:	4bb4      	ldr	r3, [pc, #720]	@ (8002434 <HAL_RCC_GetSysClockFreq+0x354>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002168:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800216c:	4bb1      	ldr	r3, [pc, #708]	@ (8002434 <HAL_RCC_GetSysClockFreq+0x354>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d071      	beq.n	800225c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002178:	4bae      	ldr	r3, [pc, #696]	@ (8002434 <HAL_RCC_GetSysClockFreq+0x354>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	099b      	lsrs	r3, r3, #6
 800217e:	2200      	movs	r2, #0
 8002180:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002184:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002188:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800218c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002190:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002194:	2300      	movs	r3, #0
 8002196:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800219a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800219e:	4622      	mov	r2, r4
 80021a0:	462b      	mov	r3, r5
 80021a2:	f04f 0000 	mov.w	r0, #0
 80021a6:	f04f 0100 	mov.w	r1, #0
 80021aa:	0159      	lsls	r1, r3, #5
 80021ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021b0:	0150      	lsls	r0, r2, #5
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4621      	mov	r1, r4
 80021b8:	1a51      	subs	r1, r2, r1
 80021ba:	6439      	str	r1, [r7, #64]	@ 0x40
 80021bc:	4629      	mov	r1, r5
 80021be:	eb63 0301 	sbc.w	r3, r3, r1
 80021c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80021c4:	f04f 0200 	mov.w	r2, #0
 80021c8:	f04f 0300 	mov.w	r3, #0
 80021cc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80021d0:	4649      	mov	r1, r9
 80021d2:	018b      	lsls	r3, r1, #6
 80021d4:	4641      	mov	r1, r8
 80021d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021da:	4641      	mov	r1, r8
 80021dc:	018a      	lsls	r2, r1, #6
 80021de:	4641      	mov	r1, r8
 80021e0:	1a51      	subs	r1, r2, r1
 80021e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80021e4:	4649      	mov	r1, r9
 80021e6:	eb63 0301 	sbc.w	r3, r3, r1
 80021ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	f04f 0300 	mov.w	r3, #0
 80021f4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80021f8:	4649      	mov	r1, r9
 80021fa:	00cb      	lsls	r3, r1, #3
 80021fc:	4641      	mov	r1, r8
 80021fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002202:	4641      	mov	r1, r8
 8002204:	00ca      	lsls	r2, r1, #3
 8002206:	4610      	mov	r0, r2
 8002208:	4619      	mov	r1, r3
 800220a:	4603      	mov	r3, r0
 800220c:	4622      	mov	r2, r4
 800220e:	189b      	adds	r3, r3, r2
 8002210:	633b      	str	r3, [r7, #48]	@ 0x30
 8002212:	462b      	mov	r3, r5
 8002214:	460a      	mov	r2, r1
 8002216:	eb42 0303 	adc.w	r3, r2, r3
 800221a:	637b      	str	r3, [r7, #52]	@ 0x34
 800221c:	f04f 0200 	mov.w	r2, #0
 8002220:	f04f 0300 	mov.w	r3, #0
 8002224:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002228:	4629      	mov	r1, r5
 800222a:	024b      	lsls	r3, r1, #9
 800222c:	4621      	mov	r1, r4
 800222e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002232:	4621      	mov	r1, r4
 8002234:	024a      	lsls	r2, r1, #9
 8002236:	4610      	mov	r0, r2
 8002238:	4619      	mov	r1, r3
 800223a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800223e:	2200      	movs	r2, #0
 8002240:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002244:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002248:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800224c:	f7fd ffe8 	bl	8000220 <__aeabi_uldivmod>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	4613      	mov	r3, r2
 8002256:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800225a:	e067      	b.n	800232c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800225c:	4b75      	ldr	r3, [pc, #468]	@ (8002434 <HAL_RCC_GetSysClockFreq+0x354>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	099b      	lsrs	r3, r3, #6
 8002262:	2200      	movs	r2, #0
 8002264:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002268:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800226c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002274:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002276:	2300      	movs	r3, #0
 8002278:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800227a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800227e:	4622      	mov	r2, r4
 8002280:	462b      	mov	r3, r5
 8002282:	f04f 0000 	mov.w	r0, #0
 8002286:	f04f 0100 	mov.w	r1, #0
 800228a:	0159      	lsls	r1, r3, #5
 800228c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002290:	0150      	lsls	r0, r2, #5
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	4621      	mov	r1, r4
 8002298:	1a51      	subs	r1, r2, r1
 800229a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800229c:	4629      	mov	r1, r5
 800229e:	eb63 0301 	sbc.w	r3, r3, r1
 80022a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	f04f 0300 	mov.w	r3, #0
 80022ac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80022b0:	4649      	mov	r1, r9
 80022b2:	018b      	lsls	r3, r1, #6
 80022b4:	4641      	mov	r1, r8
 80022b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022ba:	4641      	mov	r1, r8
 80022bc:	018a      	lsls	r2, r1, #6
 80022be:	4641      	mov	r1, r8
 80022c0:	ebb2 0a01 	subs.w	sl, r2, r1
 80022c4:	4649      	mov	r1, r9
 80022c6:	eb63 0b01 	sbc.w	fp, r3, r1
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	f04f 0300 	mov.w	r3, #0
 80022d2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80022d6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80022da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022de:	4692      	mov	sl, r2
 80022e0:	469b      	mov	fp, r3
 80022e2:	4623      	mov	r3, r4
 80022e4:	eb1a 0303 	adds.w	r3, sl, r3
 80022e8:	623b      	str	r3, [r7, #32]
 80022ea:	462b      	mov	r3, r5
 80022ec:	eb4b 0303 	adc.w	r3, fp, r3
 80022f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80022f2:	f04f 0200 	mov.w	r2, #0
 80022f6:	f04f 0300 	mov.w	r3, #0
 80022fa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80022fe:	4629      	mov	r1, r5
 8002300:	028b      	lsls	r3, r1, #10
 8002302:	4621      	mov	r1, r4
 8002304:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002308:	4621      	mov	r1, r4
 800230a:	028a      	lsls	r2, r1, #10
 800230c:	4610      	mov	r0, r2
 800230e:	4619      	mov	r1, r3
 8002310:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002314:	2200      	movs	r2, #0
 8002316:	673b      	str	r3, [r7, #112]	@ 0x70
 8002318:	677a      	str	r2, [r7, #116]	@ 0x74
 800231a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800231e:	f7fd ff7f 	bl	8000220 <__aeabi_uldivmod>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	4613      	mov	r3, r2
 8002328:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800232c:	4b41      	ldr	r3, [pc, #260]	@ (8002434 <HAL_RCC_GetSysClockFreq+0x354>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	0c1b      	lsrs	r3, r3, #16
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	3301      	adds	r3, #1
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800233e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002342:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002346:	fbb2 f3f3 	udiv	r3, r2, r3
 800234a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800234e:	e0eb      	b.n	8002528 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002350:	4b38      	ldr	r3, [pc, #224]	@ (8002434 <HAL_RCC_GetSysClockFreq+0x354>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002358:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800235c:	4b35      	ldr	r3, [pc, #212]	@ (8002434 <HAL_RCC_GetSysClockFreq+0x354>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d06b      	beq.n	8002440 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002368:	4b32      	ldr	r3, [pc, #200]	@ (8002434 <HAL_RCC_GetSysClockFreq+0x354>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	099b      	lsrs	r3, r3, #6
 800236e:	2200      	movs	r2, #0
 8002370:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002372:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002374:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800237a:	663b      	str	r3, [r7, #96]	@ 0x60
 800237c:	2300      	movs	r3, #0
 800237e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002380:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002384:	4622      	mov	r2, r4
 8002386:	462b      	mov	r3, r5
 8002388:	f04f 0000 	mov.w	r0, #0
 800238c:	f04f 0100 	mov.w	r1, #0
 8002390:	0159      	lsls	r1, r3, #5
 8002392:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002396:	0150      	lsls	r0, r2, #5
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	4621      	mov	r1, r4
 800239e:	1a51      	subs	r1, r2, r1
 80023a0:	61b9      	str	r1, [r7, #24]
 80023a2:	4629      	mov	r1, r5
 80023a4:	eb63 0301 	sbc.w	r3, r3, r1
 80023a8:	61fb      	str	r3, [r7, #28]
 80023aa:	f04f 0200 	mov.w	r2, #0
 80023ae:	f04f 0300 	mov.w	r3, #0
 80023b2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80023b6:	4659      	mov	r1, fp
 80023b8:	018b      	lsls	r3, r1, #6
 80023ba:	4651      	mov	r1, sl
 80023bc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023c0:	4651      	mov	r1, sl
 80023c2:	018a      	lsls	r2, r1, #6
 80023c4:	4651      	mov	r1, sl
 80023c6:	ebb2 0801 	subs.w	r8, r2, r1
 80023ca:	4659      	mov	r1, fp
 80023cc:	eb63 0901 	sbc.w	r9, r3, r1
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	f04f 0300 	mov.w	r3, #0
 80023d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023e4:	4690      	mov	r8, r2
 80023e6:	4699      	mov	r9, r3
 80023e8:	4623      	mov	r3, r4
 80023ea:	eb18 0303 	adds.w	r3, r8, r3
 80023ee:	613b      	str	r3, [r7, #16]
 80023f0:	462b      	mov	r3, r5
 80023f2:	eb49 0303 	adc.w	r3, r9, r3
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	f04f 0300 	mov.w	r3, #0
 8002400:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002404:	4629      	mov	r1, r5
 8002406:	024b      	lsls	r3, r1, #9
 8002408:	4621      	mov	r1, r4
 800240a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800240e:	4621      	mov	r1, r4
 8002410:	024a      	lsls	r2, r1, #9
 8002412:	4610      	mov	r0, r2
 8002414:	4619      	mov	r1, r3
 8002416:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800241a:	2200      	movs	r2, #0
 800241c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800241e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002420:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002424:	f7fd fefc 	bl	8000220 <__aeabi_uldivmod>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4613      	mov	r3, r2
 800242e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002432:	e065      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0x420>
 8002434:	40023800 	.word	0x40023800
 8002438:	00f42400 	.word	0x00f42400
 800243c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002440:	4b3d      	ldr	r3, [pc, #244]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x458>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	099b      	lsrs	r3, r3, #6
 8002446:	2200      	movs	r2, #0
 8002448:	4618      	mov	r0, r3
 800244a:	4611      	mov	r1, r2
 800244c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002450:	653b      	str	r3, [r7, #80]	@ 0x50
 8002452:	2300      	movs	r3, #0
 8002454:	657b      	str	r3, [r7, #84]	@ 0x54
 8002456:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800245a:	4642      	mov	r2, r8
 800245c:	464b      	mov	r3, r9
 800245e:	f04f 0000 	mov.w	r0, #0
 8002462:	f04f 0100 	mov.w	r1, #0
 8002466:	0159      	lsls	r1, r3, #5
 8002468:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800246c:	0150      	lsls	r0, r2, #5
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4641      	mov	r1, r8
 8002474:	1a51      	subs	r1, r2, r1
 8002476:	60b9      	str	r1, [r7, #8]
 8002478:	4649      	mov	r1, r9
 800247a:	eb63 0301 	sbc.w	r3, r3, r1
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	f04f 0300 	mov.w	r3, #0
 8002488:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800248c:	4659      	mov	r1, fp
 800248e:	018b      	lsls	r3, r1, #6
 8002490:	4651      	mov	r1, sl
 8002492:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002496:	4651      	mov	r1, sl
 8002498:	018a      	lsls	r2, r1, #6
 800249a:	4651      	mov	r1, sl
 800249c:	1a54      	subs	r4, r2, r1
 800249e:	4659      	mov	r1, fp
 80024a0:	eb63 0501 	sbc.w	r5, r3, r1
 80024a4:	f04f 0200 	mov.w	r2, #0
 80024a8:	f04f 0300 	mov.w	r3, #0
 80024ac:	00eb      	lsls	r3, r5, #3
 80024ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024b2:	00e2      	lsls	r2, r4, #3
 80024b4:	4614      	mov	r4, r2
 80024b6:	461d      	mov	r5, r3
 80024b8:	4643      	mov	r3, r8
 80024ba:	18e3      	adds	r3, r4, r3
 80024bc:	603b      	str	r3, [r7, #0]
 80024be:	464b      	mov	r3, r9
 80024c0:	eb45 0303 	adc.w	r3, r5, r3
 80024c4:	607b      	str	r3, [r7, #4]
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	f04f 0300 	mov.w	r3, #0
 80024ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024d2:	4629      	mov	r1, r5
 80024d4:	028b      	lsls	r3, r1, #10
 80024d6:	4621      	mov	r1, r4
 80024d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024dc:	4621      	mov	r1, r4
 80024de:	028a      	lsls	r2, r1, #10
 80024e0:	4610      	mov	r0, r2
 80024e2:	4619      	mov	r1, r3
 80024e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024e8:	2200      	movs	r2, #0
 80024ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80024ec:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80024ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80024f2:	f7fd fe95 	bl	8000220 <__aeabi_uldivmod>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	4613      	mov	r3, r2
 80024fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002500:	4b0d      	ldr	r3, [pc, #52]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x458>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	0f1b      	lsrs	r3, r3, #28
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800250e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002512:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002516:	fbb2 f3f3 	udiv	r3, r2, r3
 800251a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800251e:	e003      	b.n	8002528 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002520:	4b06      	ldr	r3, [pc, #24]	@ (800253c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002522:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002526:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002528:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800252c:	4618      	mov	r0, r3
 800252e:	37b8      	adds	r7, #184	@ 0xb8
 8002530:	46bd      	mov	sp, r7
 8002532:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002536:	bf00      	nop
 8002538:	40023800 	.word	0x40023800
 800253c:	00f42400 	.word	0x00f42400

08002540 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e28d      	b.n	8002a6e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 8083 	beq.w	8002666 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002560:	4b94      	ldr	r3, [pc, #592]	@ (80027b4 <HAL_RCC_OscConfig+0x274>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 030c 	and.w	r3, r3, #12
 8002568:	2b04      	cmp	r3, #4
 800256a:	d019      	beq.n	80025a0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800256c:	4b91      	ldr	r3, [pc, #580]	@ (80027b4 <HAL_RCC_OscConfig+0x274>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 030c 	and.w	r3, r3, #12
        || \
 8002574:	2b08      	cmp	r3, #8
 8002576:	d106      	bne.n	8002586 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002578:	4b8e      	ldr	r3, [pc, #568]	@ (80027b4 <HAL_RCC_OscConfig+0x274>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002580:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002584:	d00c      	beq.n	80025a0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002586:	4b8b      	ldr	r3, [pc, #556]	@ (80027b4 <HAL_RCC_OscConfig+0x274>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800258e:	2b0c      	cmp	r3, #12
 8002590:	d112      	bne.n	80025b8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002592:	4b88      	ldr	r3, [pc, #544]	@ (80027b4 <HAL_RCC_OscConfig+0x274>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800259a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800259e:	d10b      	bne.n	80025b8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a0:	4b84      	ldr	r3, [pc, #528]	@ (80027b4 <HAL_RCC_OscConfig+0x274>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d05b      	beq.n	8002664 <HAL_RCC_OscConfig+0x124>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d157      	bne.n	8002664 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e25a      	b.n	8002a6e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025c0:	d106      	bne.n	80025d0 <HAL_RCC_OscConfig+0x90>
 80025c2:	4b7c      	ldr	r3, [pc, #496]	@ (80027b4 <HAL_RCC_OscConfig+0x274>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a7b      	ldr	r2, [pc, #492]	@ (80027b4 <HAL_RCC_OscConfig+0x274>)
 80025c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	e01d      	b.n	800260c <HAL_RCC_OscConfig+0xcc>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025d8:	d10c      	bne.n	80025f4 <HAL_RCC_OscConfig+0xb4>
 80025da:	4b76      	ldr	r3, [pc, #472]	@ (80027b4 <HAL_RCC_OscConfig+0x274>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a75      	ldr	r2, [pc, #468]	@ (80027b4 <HAL_RCC_OscConfig+0x274>)
 80025e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	4b73      	ldr	r3, [pc, #460]	@ (80027b4 <HAL_RCC_OscConfig+0x274>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a72      	ldr	r2, [pc, #456]	@ (80027b4 <HAL_RCC_OscConfig+0x274>)
 80025ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	e00b      	b.n	800260c <HAL_RCC_OscConfig+0xcc>
 80025f4:	4b6f      	ldr	r3, [pc, #444]	@ (80027b4 <HAL_RCC_OscConfig+0x274>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a6e      	ldr	r2, [pc, #440]	@ (80027b4 <HAL_RCC_OscConfig+0x274>)
 80025fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025fe:	6013      	str	r3, [r2, #0]
 8002600:	4b6c      	ldr	r3, [pc, #432]	@ (80027b4 <HAL_RCC_OscConfig+0x274>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a6b      	ldr	r2, [pc, #428]	@ (80027b4 <HAL_RCC_OscConfig+0x274>)
 8002606:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800260a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d013      	beq.n	800263c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002614:	f7fe fcf4 	bl	8001000 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800261c:	f7fe fcf0 	bl	8001000 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b64      	cmp	r3, #100	@ 0x64
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e21f      	b.n	8002a6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262e:	4b61      	ldr	r3, [pc, #388]	@ (80027b4 <HAL_RCC_OscConfig+0x274>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f0      	beq.n	800261c <HAL_RCC_OscConfig+0xdc>
 800263a:	e014      	b.n	8002666 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263c:	f7fe fce0 	bl	8001000 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002644:	f7fe fcdc 	bl	8001000 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b64      	cmp	r3, #100	@ 0x64
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e20b      	b.n	8002a6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002656:	4b57      	ldr	r3, [pc, #348]	@ (80027b4 <HAL_RCC_OscConfig+0x274>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0x104>
 8002662:	e000      	b.n	8002666 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d06f      	beq.n	8002752 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002672:	4b50      	ldr	r3, [pc, #320]	@ (80027b4 <HAL_RCC_OscConfig+0x274>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 030c 	and.w	r3, r3, #12
 800267a:	2b00      	cmp	r3, #0
 800267c:	d017      	beq.n	80026ae <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800267e:	4b4d      	ldr	r3, [pc, #308]	@ (80027b4 <HAL_RCC_OscConfig+0x274>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 030c 	and.w	r3, r3, #12
        || \
 8002686:	2b08      	cmp	r3, #8
 8002688:	d105      	bne.n	8002696 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800268a:	4b4a      	ldr	r3, [pc, #296]	@ (80027b4 <HAL_RCC_OscConfig+0x274>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00b      	beq.n	80026ae <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002696:	4b47      	ldr	r3, [pc, #284]	@ (80027b4 <HAL_RCC_OscConfig+0x274>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800269e:	2b0c      	cmp	r3, #12
 80026a0:	d11c      	bne.n	80026dc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026a2:	4b44      	ldr	r3, [pc, #272]	@ (80027b4 <HAL_RCC_OscConfig+0x274>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d116      	bne.n	80026dc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ae:	4b41      	ldr	r3, [pc, #260]	@ (80027b4 <HAL_RCC_OscConfig+0x274>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d005      	beq.n	80026c6 <HAL_RCC_OscConfig+0x186>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d001      	beq.n	80026c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e1d3      	b.n	8002a6e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c6:	4b3b      	ldr	r3, [pc, #236]	@ (80027b4 <HAL_RCC_OscConfig+0x274>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	4937      	ldr	r1, [pc, #220]	@ (80027b4 <HAL_RCC_OscConfig+0x274>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026da:	e03a      	b.n	8002752 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d020      	beq.n	8002726 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026e4:	4b34      	ldr	r3, [pc, #208]	@ (80027b8 <HAL_RCC_OscConfig+0x278>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ea:	f7fe fc89 	bl	8001000 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026f2:	f7fe fc85 	bl	8001000 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e1b4      	b.n	8002a6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002704:	4b2b      	ldr	r3, [pc, #172]	@ (80027b4 <HAL_RCC_OscConfig+0x274>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0f0      	beq.n	80026f2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002710:	4b28      	ldr	r3, [pc, #160]	@ (80027b4 <HAL_RCC_OscConfig+0x274>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	4925      	ldr	r1, [pc, #148]	@ (80027b4 <HAL_RCC_OscConfig+0x274>)
 8002720:	4313      	orrs	r3, r2
 8002722:	600b      	str	r3, [r1, #0]
 8002724:	e015      	b.n	8002752 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002726:	4b24      	ldr	r3, [pc, #144]	@ (80027b8 <HAL_RCC_OscConfig+0x278>)
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272c:	f7fe fc68 	bl	8001000 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002734:	f7fe fc64 	bl	8001000 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e193      	b.n	8002a6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002746:	4b1b      	ldr	r3, [pc, #108]	@ (80027b4 <HAL_RCC_OscConfig+0x274>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f0      	bne.n	8002734 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	2b00      	cmp	r3, #0
 800275c:	d036      	beq.n	80027cc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d016      	beq.n	8002794 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002766:	4b15      	ldr	r3, [pc, #84]	@ (80027bc <HAL_RCC_OscConfig+0x27c>)
 8002768:	2201      	movs	r2, #1
 800276a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276c:	f7fe fc48 	bl	8001000 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002774:	f7fe fc44 	bl	8001000 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e173      	b.n	8002a6e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002786:	4b0b      	ldr	r3, [pc, #44]	@ (80027b4 <HAL_RCC_OscConfig+0x274>)
 8002788:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f0      	beq.n	8002774 <HAL_RCC_OscConfig+0x234>
 8002792:	e01b      	b.n	80027cc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002794:	4b09      	ldr	r3, [pc, #36]	@ (80027bc <HAL_RCC_OscConfig+0x27c>)
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279a:	f7fe fc31 	bl	8001000 <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027a0:	e00e      	b.n	80027c0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a2:	f7fe fc2d 	bl	8001000 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d907      	bls.n	80027c0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e15c      	b.n	8002a6e <HAL_RCC_OscConfig+0x52e>
 80027b4:	40023800 	.word	0x40023800
 80027b8:	42470000 	.word	0x42470000
 80027bc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027c0:	4b8a      	ldr	r3, [pc, #552]	@ (80029ec <HAL_RCC_OscConfig+0x4ac>)
 80027c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1ea      	bne.n	80027a2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 8097 	beq.w	8002908 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027da:	2300      	movs	r3, #0
 80027dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027de:	4b83      	ldr	r3, [pc, #524]	@ (80029ec <HAL_RCC_OscConfig+0x4ac>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10f      	bne.n	800280a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	4b7f      	ldr	r3, [pc, #508]	@ (80029ec <HAL_RCC_OscConfig+0x4ac>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f2:	4a7e      	ldr	r2, [pc, #504]	@ (80029ec <HAL_RCC_OscConfig+0x4ac>)
 80027f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80027fa:	4b7c      	ldr	r3, [pc, #496]	@ (80029ec <HAL_RCC_OscConfig+0x4ac>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002802:	60bb      	str	r3, [r7, #8]
 8002804:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002806:	2301      	movs	r3, #1
 8002808:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280a:	4b79      	ldr	r3, [pc, #484]	@ (80029f0 <HAL_RCC_OscConfig+0x4b0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002812:	2b00      	cmp	r3, #0
 8002814:	d118      	bne.n	8002848 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002816:	4b76      	ldr	r3, [pc, #472]	@ (80029f0 <HAL_RCC_OscConfig+0x4b0>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a75      	ldr	r2, [pc, #468]	@ (80029f0 <HAL_RCC_OscConfig+0x4b0>)
 800281c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002820:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002822:	f7fe fbed 	bl	8001000 <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800282a:	f7fe fbe9 	bl	8001000 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e118      	b.n	8002a6e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800283c:	4b6c      	ldr	r3, [pc, #432]	@ (80029f0 <HAL_RCC_OscConfig+0x4b0>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0f0      	beq.n	800282a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d106      	bne.n	800285e <HAL_RCC_OscConfig+0x31e>
 8002850:	4b66      	ldr	r3, [pc, #408]	@ (80029ec <HAL_RCC_OscConfig+0x4ac>)
 8002852:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002854:	4a65      	ldr	r2, [pc, #404]	@ (80029ec <HAL_RCC_OscConfig+0x4ac>)
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	6713      	str	r3, [r2, #112]	@ 0x70
 800285c:	e01c      	b.n	8002898 <HAL_RCC_OscConfig+0x358>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	2b05      	cmp	r3, #5
 8002864:	d10c      	bne.n	8002880 <HAL_RCC_OscConfig+0x340>
 8002866:	4b61      	ldr	r3, [pc, #388]	@ (80029ec <HAL_RCC_OscConfig+0x4ac>)
 8002868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800286a:	4a60      	ldr	r2, [pc, #384]	@ (80029ec <HAL_RCC_OscConfig+0x4ac>)
 800286c:	f043 0304 	orr.w	r3, r3, #4
 8002870:	6713      	str	r3, [r2, #112]	@ 0x70
 8002872:	4b5e      	ldr	r3, [pc, #376]	@ (80029ec <HAL_RCC_OscConfig+0x4ac>)
 8002874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002876:	4a5d      	ldr	r2, [pc, #372]	@ (80029ec <HAL_RCC_OscConfig+0x4ac>)
 8002878:	f043 0301 	orr.w	r3, r3, #1
 800287c:	6713      	str	r3, [r2, #112]	@ 0x70
 800287e:	e00b      	b.n	8002898 <HAL_RCC_OscConfig+0x358>
 8002880:	4b5a      	ldr	r3, [pc, #360]	@ (80029ec <HAL_RCC_OscConfig+0x4ac>)
 8002882:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002884:	4a59      	ldr	r2, [pc, #356]	@ (80029ec <HAL_RCC_OscConfig+0x4ac>)
 8002886:	f023 0301 	bic.w	r3, r3, #1
 800288a:	6713      	str	r3, [r2, #112]	@ 0x70
 800288c:	4b57      	ldr	r3, [pc, #348]	@ (80029ec <HAL_RCC_OscConfig+0x4ac>)
 800288e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002890:	4a56      	ldr	r2, [pc, #344]	@ (80029ec <HAL_RCC_OscConfig+0x4ac>)
 8002892:	f023 0304 	bic.w	r3, r3, #4
 8002896:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d015      	beq.n	80028cc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a0:	f7fe fbae 	bl	8001000 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a6:	e00a      	b.n	80028be <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a8:	f7fe fbaa 	bl	8001000 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e0d7      	b.n	8002a6e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028be:	4b4b      	ldr	r3, [pc, #300]	@ (80029ec <HAL_RCC_OscConfig+0x4ac>)
 80028c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0ee      	beq.n	80028a8 <HAL_RCC_OscConfig+0x368>
 80028ca:	e014      	b.n	80028f6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028cc:	f7fe fb98 	bl	8001000 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028d2:	e00a      	b.n	80028ea <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d4:	f7fe fb94 	bl	8001000 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e0c1      	b.n	8002a6e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ea:	4b40      	ldr	r3, [pc, #256]	@ (80029ec <HAL_RCC_OscConfig+0x4ac>)
 80028ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1ee      	bne.n	80028d4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028f6:	7dfb      	ldrb	r3, [r7, #23]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d105      	bne.n	8002908 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028fc:	4b3b      	ldr	r3, [pc, #236]	@ (80029ec <HAL_RCC_OscConfig+0x4ac>)
 80028fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002900:	4a3a      	ldr	r2, [pc, #232]	@ (80029ec <HAL_RCC_OscConfig+0x4ac>)
 8002902:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002906:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 80ad 	beq.w	8002a6c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002912:	4b36      	ldr	r3, [pc, #216]	@ (80029ec <HAL_RCC_OscConfig+0x4ac>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 030c 	and.w	r3, r3, #12
 800291a:	2b08      	cmp	r3, #8
 800291c:	d060      	beq.n	80029e0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	2b02      	cmp	r3, #2
 8002924:	d145      	bne.n	80029b2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002926:	4b33      	ldr	r3, [pc, #204]	@ (80029f4 <HAL_RCC_OscConfig+0x4b4>)
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7fe fb68 	bl	8001000 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002934:	f7fe fb64 	bl	8001000 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e093      	b.n	8002a6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002946:	4b29      	ldr	r3, [pc, #164]	@ (80029ec <HAL_RCC_OscConfig+0x4ac>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	69da      	ldr	r2, [r3, #28]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	431a      	orrs	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002960:	019b      	lsls	r3, r3, #6
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002968:	085b      	lsrs	r3, r3, #1
 800296a:	3b01      	subs	r3, #1
 800296c:	041b      	lsls	r3, r3, #16
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002974:	061b      	lsls	r3, r3, #24
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297c:	071b      	lsls	r3, r3, #28
 800297e:	491b      	ldr	r1, [pc, #108]	@ (80029ec <HAL_RCC_OscConfig+0x4ac>)
 8002980:	4313      	orrs	r3, r2
 8002982:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002984:	4b1b      	ldr	r3, [pc, #108]	@ (80029f4 <HAL_RCC_OscConfig+0x4b4>)
 8002986:	2201      	movs	r2, #1
 8002988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298a:	f7fe fb39 	bl	8001000 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002992:	f7fe fb35 	bl	8001000 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e064      	b.n	8002a6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a4:	4b11      	ldr	r3, [pc, #68]	@ (80029ec <HAL_RCC_OscConfig+0x4ac>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0f0      	beq.n	8002992 <HAL_RCC_OscConfig+0x452>
 80029b0:	e05c      	b.n	8002a6c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b2:	4b10      	ldr	r3, [pc, #64]	@ (80029f4 <HAL_RCC_OscConfig+0x4b4>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b8:	f7fe fb22 	bl	8001000 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c0:	f7fe fb1e 	bl	8001000 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e04d      	b.n	8002a6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d2:	4b06      	ldr	r3, [pc, #24]	@ (80029ec <HAL_RCC_OscConfig+0x4ac>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f0      	bne.n	80029c0 <HAL_RCC_OscConfig+0x480>
 80029de:	e045      	b.n	8002a6c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d107      	bne.n	80029f8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e040      	b.n	8002a6e <HAL_RCC_OscConfig+0x52e>
 80029ec:	40023800 	.word	0x40023800
 80029f0:	40007000 	.word	0x40007000
 80029f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002a78 <HAL_RCC_OscConfig+0x538>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d030      	beq.n	8002a68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d129      	bne.n	8002a68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d122      	bne.n	8002a68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a28:	4013      	ands	r3, r2
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d119      	bne.n	8002a68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a3e:	085b      	lsrs	r3, r3, #1
 8002a40:	3b01      	subs	r3, #1
 8002a42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d10f      	bne.n	8002a68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d107      	bne.n	8002a68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a62:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d001      	beq.n	8002a6c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e000      	b.n	8002a6e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3718      	adds	r7, #24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40023800 	.word	0x40023800

08002a7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e041      	b.n	8002b12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d106      	bne.n	8002aa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f839 	bl	8002b1a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4610      	mov	r0, r2
 8002abc:	f000 f9c0 	bl	8002e40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b083      	sub	sp, #12
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
	...

08002b30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d001      	beq.n	8002b48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e04e      	b.n	8002be6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0201 	orr.w	r2, r2, #1
 8002b5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a23      	ldr	r2, [pc, #140]	@ (8002bf4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d022      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x80>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b72:	d01d      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x80>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a1f      	ldr	r2, [pc, #124]	@ (8002bf8 <HAL_TIM_Base_Start_IT+0xc8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d018      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x80>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a1e      	ldr	r2, [pc, #120]	@ (8002bfc <HAL_TIM_Base_Start_IT+0xcc>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d013      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x80>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a1c      	ldr	r2, [pc, #112]	@ (8002c00 <HAL_TIM_Base_Start_IT+0xd0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d00e      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x80>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a1b      	ldr	r2, [pc, #108]	@ (8002c04 <HAL_TIM_Base_Start_IT+0xd4>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d009      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x80>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a19      	ldr	r2, [pc, #100]	@ (8002c08 <HAL_TIM_Base_Start_IT+0xd8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d004      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x80>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a18      	ldr	r2, [pc, #96]	@ (8002c0c <HAL_TIM_Base_Start_IT+0xdc>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d111      	bne.n	8002bd4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2b06      	cmp	r3, #6
 8002bc0:	d010      	beq.n	8002be4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f042 0201 	orr.w	r2, r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bd2:	e007      	b.n	8002be4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 0201 	orr.w	r2, r2, #1
 8002be2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	40010000 	.word	0x40010000
 8002bf8:	40000400 	.word	0x40000400
 8002bfc:	40000800 	.word	0x40000800
 8002c00:	40000c00 	.word	0x40000c00
 8002c04:	40010400 	.word	0x40010400
 8002c08:	40014000 	.word	0x40014000
 8002c0c:	40001800 	.word	0x40001800

08002c10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d020      	beq.n	8002c74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d01b      	beq.n	8002c74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f06f 0202 	mvn.w	r2, #2
 8002c44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f8d2 	bl	8002e04 <HAL_TIM_IC_CaptureCallback>
 8002c60:	e005      	b.n	8002c6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f8c4 	bl	8002df0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 f8d5 	bl	8002e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	f003 0304 	and.w	r3, r3, #4
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d020      	beq.n	8002cc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d01b      	beq.n	8002cc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f06f 0204 	mvn.w	r2, #4
 8002c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2202      	movs	r2, #2
 8002c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f8ac 	bl	8002e04 <HAL_TIM_IC_CaptureCallback>
 8002cac:	e005      	b.n	8002cba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f89e 	bl	8002df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f8af 	bl	8002e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d020      	beq.n	8002d0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f003 0308 	and.w	r3, r3, #8
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d01b      	beq.n	8002d0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f06f 0208 	mvn.w	r2, #8
 8002cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2204      	movs	r2, #4
 8002ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f886 	bl	8002e04 <HAL_TIM_IC_CaptureCallback>
 8002cf8:	e005      	b.n	8002d06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f878 	bl	8002df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f889 	bl	8002e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f003 0310 	and.w	r3, r3, #16
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d020      	beq.n	8002d58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f003 0310 	and.w	r3, r3, #16
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d01b      	beq.n	8002d58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f06f 0210 	mvn.w	r2, #16
 8002d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2208      	movs	r2, #8
 8002d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f860 	bl	8002e04 <HAL_TIM_IC_CaptureCallback>
 8002d44:	e005      	b.n	8002d52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f852 	bl	8002df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f863 	bl	8002e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00c      	beq.n	8002d7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d007      	beq.n	8002d7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f06f 0201 	mvn.w	r2, #1
 8002d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7fd fee2 	bl	8000b40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00c      	beq.n	8002da0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d007      	beq.n	8002da0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f906 	bl	8002fac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00c      	beq.n	8002dc4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d007      	beq.n	8002dc4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f834 	bl	8002e2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f003 0320 	and.w	r3, r3, #32
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00c      	beq.n	8002de8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f003 0320 	and.w	r3, r3, #32
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d007      	beq.n	8002de8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f06f 0220 	mvn.w	r2, #32
 8002de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f8d8 	bl	8002f98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002de8:	bf00      	nop
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a46      	ldr	r2, [pc, #280]	@ (8002f6c <TIM_Base_SetConfig+0x12c>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d013      	beq.n	8002e80 <TIM_Base_SetConfig+0x40>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e5e:	d00f      	beq.n	8002e80 <TIM_Base_SetConfig+0x40>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a43      	ldr	r2, [pc, #268]	@ (8002f70 <TIM_Base_SetConfig+0x130>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d00b      	beq.n	8002e80 <TIM_Base_SetConfig+0x40>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a42      	ldr	r2, [pc, #264]	@ (8002f74 <TIM_Base_SetConfig+0x134>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d007      	beq.n	8002e80 <TIM_Base_SetConfig+0x40>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a41      	ldr	r2, [pc, #260]	@ (8002f78 <TIM_Base_SetConfig+0x138>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d003      	beq.n	8002e80 <TIM_Base_SetConfig+0x40>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a40      	ldr	r2, [pc, #256]	@ (8002f7c <TIM_Base_SetConfig+0x13c>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d108      	bne.n	8002e92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a35      	ldr	r2, [pc, #212]	@ (8002f6c <TIM_Base_SetConfig+0x12c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d02b      	beq.n	8002ef2 <TIM_Base_SetConfig+0xb2>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ea0:	d027      	beq.n	8002ef2 <TIM_Base_SetConfig+0xb2>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a32      	ldr	r2, [pc, #200]	@ (8002f70 <TIM_Base_SetConfig+0x130>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d023      	beq.n	8002ef2 <TIM_Base_SetConfig+0xb2>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a31      	ldr	r2, [pc, #196]	@ (8002f74 <TIM_Base_SetConfig+0x134>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d01f      	beq.n	8002ef2 <TIM_Base_SetConfig+0xb2>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a30      	ldr	r2, [pc, #192]	@ (8002f78 <TIM_Base_SetConfig+0x138>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d01b      	beq.n	8002ef2 <TIM_Base_SetConfig+0xb2>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a2f      	ldr	r2, [pc, #188]	@ (8002f7c <TIM_Base_SetConfig+0x13c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d017      	beq.n	8002ef2 <TIM_Base_SetConfig+0xb2>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a2e      	ldr	r2, [pc, #184]	@ (8002f80 <TIM_Base_SetConfig+0x140>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d013      	beq.n	8002ef2 <TIM_Base_SetConfig+0xb2>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a2d      	ldr	r2, [pc, #180]	@ (8002f84 <TIM_Base_SetConfig+0x144>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00f      	beq.n	8002ef2 <TIM_Base_SetConfig+0xb2>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a2c      	ldr	r2, [pc, #176]	@ (8002f88 <TIM_Base_SetConfig+0x148>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d00b      	beq.n	8002ef2 <TIM_Base_SetConfig+0xb2>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a2b      	ldr	r2, [pc, #172]	@ (8002f8c <TIM_Base_SetConfig+0x14c>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d007      	beq.n	8002ef2 <TIM_Base_SetConfig+0xb2>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a2a      	ldr	r2, [pc, #168]	@ (8002f90 <TIM_Base_SetConfig+0x150>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d003      	beq.n	8002ef2 <TIM_Base_SetConfig+0xb2>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a29      	ldr	r2, [pc, #164]	@ (8002f94 <TIM_Base_SetConfig+0x154>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d108      	bne.n	8002f04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a10      	ldr	r2, [pc, #64]	@ (8002f6c <TIM_Base_SetConfig+0x12c>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d003      	beq.n	8002f38 <TIM_Base_SetConfig+0xf8>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a12      	ldr	r2, [pc, #72]	@ (8002f7c <TIM_Base_SetConfig+0x13c>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d103      	bne.n	8002f40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d105      	bne.n	8002f5e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f023 0201 	bic.w	r2, r3, #1
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	611a      	str	r2, [r3, #16]
  }
}
 8002f5e:	bf00      	nop
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	40010000 	.word	0x40010000
 8002f70:	40000400 	.word	0x40000400
 8002f74:	40000800 	.word	0x40000800
 8002f78:	40000c00 	.word	0x40000c00
 8002f7c:	40010400 	.word	0x40010400
 8002f80:	40014000 	.word	0x40014000
 8002f84:	40014400 	.word	0x40014400
 8002f88:	40014800 	.word	0x40014800
 8002f8c:	40001800 	.word	0x40001800
 8002f90:	40001c00 	.word	0x40001c00
 8002f94:	40002000 	.word	0x40002000

08002f98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e042      	b.n	8003058 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d106      	bne.n	8002fec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7fd fec4 	bl	8000d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2224      	movs	r2, #36	@ 0x24
 8002ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68da      	ldr	r2, [r3, #12]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003002:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 fa09 	bl	800341c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	691a      	ldr	r2, [r3, #16]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003018:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695a      	ldr	r2, [r3, #20]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003028:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003038:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b08a      	sub	sp, #40	@ 0x28
 8003064:	af02      	add	r7, sp, #8
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	603b      	str	r3, [r7, #0]
 800306c:	4613      	mov	r3, r2
 800306e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003070:	2300      	movs	r3, #0
 8003072:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b20      	cmp	r3, #32
 800307e:	d175      	bne.n	800316c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d002      	beq.n	800308c <HAL_UART_Transmit+0x2c>
 8003086:	88fb      	ldrh	r3, [r7, #6]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e06e      	b.n	800316e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2221      	movs	r2, #33	@ 0x21
 800309a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800309e:	f7fd ffaf 	bl	8001000 <HAL_GetTick>
 80030a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	88fa      	ldrh	r2, [r7, #6]
 80030a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	88fa      	ldrh	r2, [r7, #6]
 80030ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030b8:	d108      	bne.n	80030cc <HAL_UART_Transmit+0x6c>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d104      	bne.n	80030cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80030c2:	2300      	movs	r3, #0
 80030c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	61bb      	str	r3, [r7, #24]
 80030ca:	e003      	b.n	80030d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030d0:	2300      	movs	r3, #0
 80030d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030d4:	e02e      	b.n	8003134 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2200      	movs	r2, #0
 80030de:	2180      	movs	r1, #128	@ 0x80
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 f8df 	bl	80032a4 <UART_WaitOnFlagUntilTimeout>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d005      	beq.n	80030f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2220      	movs	r2, #32
 80030f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e03a      	b.n	800316e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10b      	bne.n	8003116 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	461a      	mov	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800310c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	3302      	adds	r3, #2
 8003112:	61bb      	str	r3, [r7, #24]
 8003114:	e007      	b.n	8003126 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	781a      	ldrb	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	3301      	adds	r3, #1
 8003124:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800312a:	b29b      	uxth	r3, r3
 800312c:	3b01      	subs	r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003138:	b29b      	uxth	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1cb      	bne.n	80030d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	2200      	movs	r2, #0
 8003146:	2140      	movs	r1, #64	@ 0x40
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 f8ab 	bl	80032a4 <UART_WaitOnFlagUntilTimeout>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d005      	beq.n	8003160 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2220      	movs	r2, #32
 8003158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e006      	b.n	800316e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003168:	2300      	movs	r3, #0
 800316a:	e000      	b.n	800316e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800316c:	2302      	movs	r3, #2
  }
}
 800316e:	4618      	mov	r0, r3
 8003170:	3720      	adds	r7, #32
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b08a      	sub	sp, #40	@ 0x28
 800317a:	af02      	add	r7, sp, #8
 800317c:	60f8      	str	r0, [r7, #12]
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	603b      	str	r3, [r7, #0]
 8003182:	4613      	mov	r3, r2
 8003184:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003186:	2300      	movs	r3, #0
 8003188:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b20      	cmp	r3, #32
 8003194:	f040 8081 	bne.w	800329a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d002      	beq.n	80031a4 <HAL_UART_Receive+0x2e>
 800319e:	88fb      	ldrh	r3, [r7, #6]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e079      	b.n	800329c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2222      	movs	r2, #34	@ 0x22
 80031b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031bc:	f7fd ff20 	bl	8001000 <HAL_GetTick>
 80031c0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	88fa      	ldrh	r2, [r7, #6]
 80031c6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	88fa      	ldrh	r2, [r7, #6]
 80031cc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031d6:	d108      	bne.n	80031ea <HAL_UART_Receive+0x74>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d104      	bne.n	80031ea <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80031e0:	2300      	movs	r3, #0
 80031e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	61bb      	str	r3, [r7, #24]
 80031e8:	e003      	b.n	80031f2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80031f2:	e047      	b.n	8003284 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	2200      	movs	r2, #0
 80031fc:	2120      	movs	r1, #32
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 f850 	bl	80032a4 <UART_WaitOnFlagUntilTimeout>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d005      	beq.n	8003216 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2220      	movs	r2, #32
 800320e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e042      	b.n	800329c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10c      	bne.n	8003236 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	b29b      	uxth	r3, r3
 8003224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003228:	b29a      	uxth	r2, r3
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	3302      	adds	r3, #2
 8003232:	61bb      	str	r3, [r7, #24]
 8003234:	e01f      	b.n	8003276 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800323e:	d007      	beq.n	8003250 <HAL_UART_Receive+0xda>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10a      	bne.n	800325e <HAL_UART_Receive+0xe8>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d106      	bne.n	800325e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	b2da      	uxtb	r2, r3
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	701a      	strb	r2, [r3, #0]
 800325c:	e008      	b.n	8003270 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	b2db      	uxtb	r3, r3
 8003266:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800326a:	b2da      	uxtb	r2, r3
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	3301      	adds	r3, #1
 8003274:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800327a:	b29b      	uxth	r3, r3
 800327c:	3b01      	subs	r3, #1
 800327e:	b29a      	uxth	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003288:	b29b      	uxth	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1b2      	bne.n	80031f4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2220      	movs	r2, #32
 8003292:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003296:	2300      	movs	r3, #0
 8003298:	e000      	b.n	800329c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800329a:	2302      	movs	r3, #2
  }
}
 800329c:	4618      	mov	r0, r3
 800329e:	3720      	adds	r7, #32
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	603b      	str	r3, [r7, #0]
 80032b0:	4613      	mov	r3, r2
 80032b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032b4:	e03b      	b.n	800332e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032bc:	d037      	beq.n	800332e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032be:	f7fd fe9f 	bl	8001000 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	6a3a      	ldr	r2, [r7, #32]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d302      	bcc.n	80032d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e03a      	b.n	800334e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	f003 0304 	and.w	r3, r3, #4
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d023      	beq.n	800332e <UART_WaitOnFlagUntilTimeout+0x8a>
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	2b80      	cmp	r3, #128	@ 0x80
 80032ea:	d020      	beq.n	800332e <UART_WaitOnFlagUntilTimeout+0x8a>
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2b40      	cmp	r3, #64	@ 0x40
 80032f0:	d01d      	beq.n	800332e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0308 	and.w	r3, r3, #8
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d116      	bne.n	800332e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003300:	2300      	movs	r3, #0
 8003302:	617b      	str	r3, [r7, #20]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	617b      	str	r3, [r7, #20]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	617b      	str	r3, [r7, #20]
 8003314:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 f81d 	bl	8003356 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2208      	movs	r2, #8
 8003320:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e00f      	b.n	800334e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	4013      	ands	r3, r2
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	429a      	cmp	r2, r3
 800333c:	bf0c      	ite	eq
 800333e:	2301      	moveq	r3, #1
 8003340:	2300      	movne	r3, #0
 8003342:	b2db      	uxtb	r3, r3
 8003344:	461a      	mov	r2, r3
 8003346:	79fb      	ldrb	r3, [r7, #7]
 8003348:	429a      	cmp	r2, r3
 800334a:	d0b4      	beq.n	80032b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003356:	b480      	push	{r7}
 8003358:	b095      	sub	sp, #84	@ 0x54
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	330c      	adds	r3, #12
 8003364:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003368:	e853 3f00 	ldrex	r3, [r3]
 800336c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800336e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003370:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003374:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	330c      	adds	r3, #12
 800337c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800337e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003380:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003382:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003384:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003386:	e841 2300 	strex	r3, r2, [r1]
 800338a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800338c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1e5      	bne.n	800335e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	3314      	adds	r3, #20
 8003398:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	e853 3f00 	ldrex	r3, [r3]
 80033a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	f023 0301 	bic.w	r3, r3, #1
 80033a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	3314      	adds	r3, #20
 80033b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033ba:	e841 2300 	strex	r3, r2, [r1]
 80033be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80033c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1e5      	bne.n	8003392 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d119      	bne.n	8003402 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	330c      	adds	r3, #12
 80033d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	e853 3f00 	ldrex	r3, [r3]
 80033dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	f023 0310 	bic.w	r3, r3, #16
 80033e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	330c      	adds	r3, #12
 80033ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033ee:	61ba      	str	r2, [r7, #24]
 80033f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f2:	6979      	ldr	r1, [r7, #20]
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	e841 2300 	strex	r3, r2, [r1]
 80033fa:	613b      	str	r3, [r7, #16]
   return(result);
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1e5      	bne.n	80033ce <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2220      	movs	r2, #32
 8003406:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003410:	bf00      	nop
 8003412:	3754      	adds	r7, #84	@ 0x54
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800341c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003420:	b0c0      	sub	sp, #256	@ 0x100
 8003422:	af00      	add	r7, sp, #0
 8003424:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003438:	68d9      	ldr	r1, [r3, #12]
 800343a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	ea40 0301 	orr.w	r3, r0, r1
 8003444:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	431a      	orrs	r2, r3
 8003454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	431a      	orrs	r2, r3
 800345c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	4313      	orrs	r3, r2
 8003464:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003474:	f021 010c 	bic.w	r1, r1, #12
 8003478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003482:	430b      	orrs	r3, r1
 8003484:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003496:	6999      	ldr	r1, [r3, #24]
 8003498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	ea40 0301 	orr.w	r3, r0, r1
 80034a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	4b8f      	ldr	r3, [pc, #572]	@ (80036e8 <UART_SetConfig+0x2cc>)
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d005      	beq.n	80034bc <UART_SetConfig+0xa0>
 80034b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	4b8d      	ldr	r3, [pc, #564]	@ (80036ec <UART_SetConfig+0x2d0>)
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d104      	bne.n	80034c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034bc:	f7fe faa0 	bl	8001a00 <HAL_RCC_GetPCLK2Freq>
 80034c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80034c4:	e003      	b.n	80034ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034c6:	f7fe fa87 	bl	80019d8 <HAL_RCC_GetPCLK1Freq>
 80034ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034d8:	f040 810c 	bne.w	80036f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034e0:	2200      	movs	r2, #0
 80034e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80034e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80034ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80034ee:	4622      	mov	r2, r4
 80034f0:	462b      	mov	r3, r5
 80034f2:	1891      	adds	r1, r2, r2
 80034f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80034f6:	415b      	adcs	r3, r3
 80034f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80034fe:	4621      	mov	r1, r4
 8003500:	eb12 0801 	adds.w	r8, r2, r1
 8003504:	4629      	mov	r1, r5
 8003506:	eb43 0901 	adc.w	r9, r3, r1
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003516:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800351a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800351e:	4690      	mov	r8, r2
 8003520:	4699      	mov	r9, r3
 8003522:	4623      	mov	r3, r4
 8003524:	eb18 0303 	adds.w	r3, r8, r3
 8003528:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800352c:	462b      	mov	r3, r5
 800352e:	eb49 0303 	adc.w	r3, r9, r3
 8003532:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003542:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003546:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800354a:	460b      	mov	r3, r1
 800354c:	18db      	adds	r3, r3, r3
 800354e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003550:	4613      	mov	r3, r2
 8003552:	eb42 0303 	adc.w	r3, r2, r3
 8003556:	657b      	str	r3, [r7, #84]	@ 0x54
 8003558:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800355c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003560:	f7fc fe5e 	bl	8000220 <__aeabi_uldivmod>
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	4b61      	ldr	r3, [pc, #388]	@ (80036f0 <UART_SetConfig+0x2d4>)
 800356a:	fba3 2302 	umull	r2, r3, r3, r2
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	011c      	lsls	r4, r3, #4
 8003572:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003576:	2200      	movs	r2, #0
 8003578:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800357c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003580:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003584:	4642      	mov	r2, r8
 8003586:	464b      	mov	r3, r9
 8003588:	1891      	adds	r1, r2, r2
 800358a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800358c:	415b      	adcs	r3, r3
 800358e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003590:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003594:	4641      	mov	r1, r8
 8003596:	eb12 0a01 	adds.w	sl, r2, r1
 800359a:	4649      	mov	r1, r9
 800359c:	eb43 0b01 	adc.w	fp, r3, r1
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035b4:	4692      	mov	sl, r2
 80035b6:	469b      	mov	fp, r3
 80035b8:	4643      	mov	r3, r8
 80035ba:	eb1a 0303 	adds.w	r3, sl, r3
 80035be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035c2:	464b      	mov	r3, r9
 80035c4:	eb4b 0303 	adc.w	r3, fp, r3
 80035c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80035cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80035dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80035e0:	460b      	mov	r3, r1
 80035e2:	18db      	adds	r3, r3, r3
 80035e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80035e6:	4613      	mov	r3, r2
 80035e8:	eb42 0303 	adc.w	r3, r2, r3
 80035ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80035ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80035f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80035f6:	f7fc fe13 	bl	8000220 <__aeabi_uldivmod>
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	4611      	mov	r1, r2
 8003600:	4b3b      	ldr	r3, [pc, #236]	@ (80036f0 <UART_SetConfig+0x2d4>)
 8003602:	fba3 2301 	umull	r2, r3, r3, r1
 8003606:	095b      	lsrs	r3, r3, #5
 8003608:	2264      	movs	r2, #100	@ 0x64
 800360a:	fb02 f303 	mul.w	r3, r2, r3
 800360e:	1acb      	subs	r3, r1, r3
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003616:	4b36      	ldr	r3, [pc, #216]	@ (80036f0 <UART_SetConfig+0x2d4>)
 8003618:	fba3 2302 	umull	r2, r3, r3, r2
 800361c:	095b      	lsrs	r3, r3, #5
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003624:	441c      	add	r4, r3
 8003626:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800362a:	2200      	movs	r2, #0
 800362c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003630:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003634:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003638:	4642      	mov	r2, r8
 800363a:	464b      	mov	r3, r9
 800363c:	1891      	adds	r1, r2, r2
 800363e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003640:	415b      	adcs	r3, r3
 8003642:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003644:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003648:	4641      	mov	r1, r8
 800364a:	1851      	adds	r1, r2, r1
 800364c:	6339      	str	r1, [r7, #48]	@ 0x30
 800364e:	4649      	mov	r1, r9
 8003650:	414b      	adcs	r3, r1
 8003652:	637b      	str	r3, [r7, #52]	@ 0x34
 8003654:	f04f 0200 	mov.w	r2, #0
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003660:	4659      	mov	r1, fp
 8003662:	00cb      	lsls	r3, r1, #3
 8003664:	4651      	mov	r1, sl
 8003666:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800366a:	4651      	mov	r1, sl
 800366c:	00ca      	lsls	r2, r1, #3
 800366e:	4610      	mov	r0, r2
 8003670:	4619      	mov	r1, r3
 8003672:	4603      	mov	r3, r0
 8003674:	4642      	mov	r2, r8
 8003676:	189b      	adds	r3, r3, r2
 8003678:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800367c:	464b      	mov	r3, r9
 800367e:	460a      	mov	r2, r1
 8003680:	eb42 0303 	adc.w	r3, r2, r3
 8003684:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003694:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003698:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800369c:	460b      	mov	r3, r1
 800369e:	18db      	adds	r3, r3, r3
 80036a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036a2:	4613      	mov	r3, r2
 80036a4:	eb42 0303 	adc.w	r3, r2, r3
 80036a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80036ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80036b2:	f7fc fdb5 	bl	8000220 <__aeabi_uldivmod>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4b0d      	ldr	r3, [pc, #52]	@ (80036f0 <UART_SetConfig+0x2d4>)
 80036bc:	fba3 1302 	umull	r1, r3, r3, r2
 80036c0:	095b      	lsrs	r3, r3, #5
 80036c2:	2164      	movs	r1, #100	@ 0x64
 80036c4:	fb01 f303 	mul.w	r3, r1, r3
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	3332      	adds	r3, #50	@ 0x32
 80036ce:	4a08      	ldr	r2, [pc, #32]	@ (80036f0 <UART_SetConfig+0x2d4>)
 80036d0:	fba2 2303 	umull	r2, r3, r2, r3
 80036d4:	095b      	lsrs	r3, r3, #5
 80036d6:	f003 0207 	and.w	r2, r3, #7
 80036da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4422      	add	r2, r4
 80036e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036e4:	e106      	b.n	80038f4 <UART_SetConfig+0x4d8>
 80036e6:	bf00      	nop
 80036e8:	40011000 	.word	0x40011000
 80036ec:	40011400 	.word	0x40011400
 80036f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036f8:	2200      	movs	r2, #0
 80036fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80036fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003702:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003706:	4642      	mov	r2, r8
 8003708:	464b      	mov	r3, r9
 800370a:	1891      	adds	r1, r2, r2
 800370c:	6239      	str	r1, [r7, #32]
 800370e:	415b      	adcs	r3, r3
 8003710:	627b      	str	r3, [r7, #36]	@ 0x24
 8003712:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003716:	4641      	mov	r1, r8
 8003718:	1854      	adds	r4, r2, r1
 800371a:	4649      	mov	r1, r9
 800371c:	eb43 0501 	adc.w	r5, r3, r1
 8003720:	f04f 0200 	mov.w	r2, #0
 8003724:	f04f 0300 	mov.w	r3, #0
 8003728:	00eb      	lsls	r3, r5, #3
 800372a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800372e:	00e2      	lsls	r2, r4, #3
 8003730:	4614      	mov	r4, r2
 8003732:	461d      	mov	r5, r3
 8003734:	4643      	mov	r3, r8
 8003736:	18e3      	adds	r3, r4, r3
 8003738:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800373c:	464b      	mov	r3, r9
 800373e:	eb45 0303 	adc.w	r3, r5, r3
 8003742:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003752:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003756:	f04f 0200 	mov.w	r2, #0
 800375a:	f04f 0300 	mov.w	r3, #0
 800375e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003762:	4629      	mov	r1, r5
 8003764:	008b      	lsls	r3, r1, #2
 8003766:	4621      	mov	r1, r4
 8003768:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800376c:	4621      	mov	r1, r4
 800376e:	008a      	lsls	r2, r1, #2
 8003770:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003774:	f7fc fd54 	bl	8000220 <__aeabi_uldivmod>
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	4b60      	ldr	r3, [pc, #384]	@ (8003900 <UART_SetConfig+0x4e4>)
 800377e:	fba3 2302 	umull	r2, r3, r3, r2
 8003782:	095b      	lsrs	r3, r3, #5
 8003784:	011c      	lsls	r4, r3, #4
 8003786:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800378a:	2200      	movs	r2, #0
 800378c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003790:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003794:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003798:	4642      	mov	r2, r8
 800379a:	464b      	mov	r3, r9
 800379c:	1891      	adds	r1, r2, r2
 800379e:	61b9      	str	r1, [r7, #24]
 80037a0:	415b      	adcs	r3, r3
 80037a2:	61fb      	str	r3, [r7, #28]
 80037a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037a8:	4641      	mov	r1, r8
 80037aa:	1851      	adds	r1, r2, r1
 80037ac:	6139      	str	r1, [r7, #16]
 80037ae:	4649      	mov	r1, r9
 80037b0:	414b      	adcs	r3, r1
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037c0:	4659      	mov	r1, fp
 80037c2:	00cb      	lsls	r3, r1, #3
 80037c4:	4651      	mov	r1, sl
 80037c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037ca:	4651      	mov	r1, sl
 80037cc:	00ca      	lsls	r2, r1, #3
 80037ce:	4610      	mov	r0, r2
 80037d0:	4619      	mov	r1, r3
 80037d2:	4603      	mov	r3, r0
 80037d4:	4642      	mov	r2, r8
 80037d6:	189b      	adds	r3, r3, r2
 80037d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80037dc:	464b      	mov	r3, r9
 80037de:	460a      	mov	r2, r1
 80037e0:	eb42 0303 	adc.w	r3, r2, r3
 80037e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80037e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80037f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	f04f 0300 	mov.w	r3, #0
 80037fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003800:	4649      	mov	r1, r9
 8003802:	008b      	lsls	r3, r1, #2
 8003804:	4641      	mov	r1, r8
 8003806:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800380a:	4641      	mov	r1, r8
 800380c:	008a      	lsls	r2, r1, #2
 800380e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003812:	f7fc fd05 	bl	8000220 <__aeabi_uldivmod>
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	4611      	mov	r1, r2
 800381c:	4b38      	ldr	r3, [pc, #224]	@ (8003900 <UART_SetConfig+0x4e4>)
 800381e:	fba3 2301 	umull	r2, r3, r3, r1
 8003822:	095b      	lsrs	r3, r3, #5
 8003824:	2264      	movs	r2, #100	@ 0x64
 8003826:	fb02 f303 	mul.w	r3, r2, r3
 800382a:	1acb      	subs	r3, r1, r3
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	3332      	adds	r3, #50	@ 0x32
 8003830:	4a33      	ldr	r2, [pc, #204]	@ (8003900 <UART_SetConfig+0x4e4>)
 8003832:	fba2 2303 	umull	r2, r3, r2, r3
 8003836:	095b      	lsrs	r3, r3, #5
 8003838:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800383c:	441c      	add	r4, r3
 800383e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003842:	2200      	movs	r2, #0
 8003844:	673b      	str	r3, [r7, #112]	@ 0x70
 8003846:	677a      	str	r2, [r7, #116]	@ 0x74
 8003848:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800384c:	4642      	mov	r2, r8
 800384e:	464b      	mov	r3, r9
 8003850:	1891      	adds	r1, r2, r2
 8003852:	60b9      	str	r1, [r7, #8]
 8003854:	415b      	adcs	r3, r3
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800385c:	4641      	mov	r1, r8
 800385e:	1851      	adds	r1, r2, r1
 8003860:	6039      	str	r1, [r7, #0]
 8003862:	4649      	mov	r1, r9
 8003864:	414b      	adcs	r3, r1
 8003866:	607b      	str	r3, [r7, #4]
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	f04f 0300 	mov.w	r3, #0
 8003870:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003874:	4659      	mov	r1, fp
 8003876:	00cb      	lsls	r3, r1, #3
 8003878:	4651      	mov	r1, sl
 800387a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800387e:	4651      	mov	r1, sl
 8003880:	00ca      	lsls	r2, r1, #3
 8003882:	4610      	mov	r0, r2
 8003884:	4619      	mov	r1, r3
 8003886:	4603      	mov	r3, r0
 8003888:	4642      	mov	r2, r8
 800388a:	189b      	adds	r3, r3, r2
 800388c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800388e:	464b      	mov	r3, r9
 8003890:	460a      	mov	r2, r1
 8003892:	eb42 0303 	adc.w	r3, r2, r3
 8003896:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80038a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80038a4:	f04f 0200 	mov.w	r2, #0
 80038a8:	f04f 0300 	mov.w	r3, #0
 80038ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80038b0:	4649      	mov	r1, r9
 80038b2:	008b      	lsls	r3, r1, #2
 80038b4:	4641      	mov	r1, r8
 80038b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038ba:	4641      	mov	r1, r8
 80038bc:	008a      	lsls	r2, r1, #2
 80038be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80038c2:	f7fc fcad 	bl	8000220 <__aeabi_uldivmod>
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003900 <UART_SetConfig+0x4e4>)
 80038cc:	fba3 1302 	umull	r1, r3, r3, r2
 80038d0:	095b      	lsrs	r3, r3, #5
 80038d2:	2164      	movs	r1, #100	@ 0x64
 80038d4:	fb01 f303 	mul.w	r3, r1, r3
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	011b      	lsls	r3, r3, #4
 80038dc:	3332      	adds	r3, #50	@ 0x32
 80038de:	4a08      	ldr	r2, [pc, #32]	@ (8003900 <UART_SetConfig+0x4e4>)
 80038e0:	fba2 2303 	umull	r2, r3, r2, r3
 80038e4:	095b      	lsrs	r3, r3, #5
 80038e6:	f003 020f 	and.w	r2, r3, #15
 80038ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4422      	add	r2, r4
 80038f2:	609a      	str	r2, [r3, #8]
}
 80038f4:	bf00      	nop
 80038f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80038fa:	46bd      	mov	sp, r7
 80038fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003900:	51eb851f 	.word	0x51eb851f

08003904 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003904:	b084      	sub	sp, #16
 8003906:	b580      	push	{r7, lr}
 8003908:	b084      	sub	sp, #16
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
 800390e:	f107 001c 	add.w	r0, r7, #28
 8003912:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003916:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800391a:	2b01      	cmp	r3, #1
 800391c:	d123      	bne.n	8003966 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003922:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003932:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003946:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800394a:	2b01      	cmp	r3, #1
 800394c:	d105      	bne.n	800395a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 fa9a 	bl	8003e94 <USB_CoreReset>
 8003960:	4603      	mov	r3, r0
 8003962:	73fb      	strb	r3, [r7, #15]
 8003964:	e01b      	b.n	800399e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 fa8e 	bl	8003e94 <USB_CoreReset>
 8003978:	4603      	mov	r3, r0
 800397a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800397c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003980:	2b00      	cmp	r3, #0
 8003982:	d106      	bne.n	8003992 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003988:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003990:	e005      	b.n	800399e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003996:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800399e:	7fbb      	ldrb	r3, [r7, #30]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d10b      	bne.n	80039bc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f043 0206 	orr.w	r2, r3, #6
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f043 0220 	orr.w	r2, r3, #32
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039c8:	b004      	add	sp, #16
 80039ca:	4770      	bx	lr

080039cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f023 0201 	bic.w	r2, r3, #1
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b084      	sub	sp, #16
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	460b      	mov	r3, r1
 80039f8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003a0a:	78fb      	ldrb	r3, [r7, #3]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d115      	bne.n	8003a3c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003a1c:	200a      	movs	r0, #10
 8003a1e:	f7fd fafb 	bl	8001018 <HAL_Delay>
      ms += 10U;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	330a      	adds	r3, #10
 8003a26:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 fa25 	bl	8003e78 <USB_GetMode>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d01e      	beq.n	8003a72 <USB_SetCurrentMode+0x84>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2bc7      	cmp	r3, #199	@ 0xc7
 8003a38:	d9f0      	bls.n	8003a1c <USB_SetCurrentMode+0x2e>
 8003a3a:	e01a      	b.n	8003a72 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003a3c:	78fb      	ldrb	r3, [r7, #3]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d115      	bne.n	8003a6e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003a4e:	200a      	movs	r0, #10
 8003a50:	f7fd fae2 	bl	8001018 <HAL_Delay>
      ms += 10U;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	330a      	adds	r3, #10
 8003a58:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 fa0c 	bl	8003e78 <USB_GetMode>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d005      	beq.n	8003a72 <USB_SetCurrentMode+0x84>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2bc7      	cmp	r3, #199	@ 0xc7
 8003a6a:	d9f0      	bls.n	8003a4e <USB_SetCurrentMode+0x60>
 8003a6c:	e001      	b.n	8003a72 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e005      	b.n	8003a7e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2bc8      	cmp	r3, #200	@ 0xc8
 8003a76:	d101      	bne.n	8003a7c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e000      	b.n	8003a7e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
	...

08003a88 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a88:	b084      	sub	sp, #16
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b086      	sub	sp, #24
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
 8003a92:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003a96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	613b      	str	r3, [r7, #16]
 8003aa6:	e009      	b.n	8003abc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	3340      	adds	r3, #64	@ 0x40
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4413      	add	r3, r2
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	613b      	str	r3, [r7, #16]
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	2b0e      	cmp	r3, #14
 8003ac0:	d9f2      	bls.n	8003aa8 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003ac2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d11c      	bne.n	8003b04 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ad8:	f043 0302 	orr.w	r3, r3, #2
 8003adc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	601a      	str	r2, [r3, #0]
 8003b02:	e005      	b.n	8003b10 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b08:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003b16:	461a      	mov	r2, r3
 8003b18:	2300      	movs	r3, #0
 8003b1a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b1c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d10d      	bne.n	8003b40 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003b24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d104      	bne.n	8003b36 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f968 	bl	8003e04 <USB_SetDevSpeed>
 8003b34:	e008      	b.n	8003b48 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003b36:	2101      	movs	r1, #1
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 f963 	bl	8003e04 <USB_SetDevSpeed>
 8003b3e:	e003      	b.n	8003b48 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003b40:	2103      	movs	r1, #3
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f95e 	bl	8003e04 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003b48:	2110      	movs	r1, #16
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f8fa 	bl	8003d44 <USB_FlushTxFifo>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f924 	bl	8003da8 <USB_FlushRxFifo>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b70:	461a      	mov	r2, r3
 8003b72:	2300      	movs	r3, #0
 8003b74:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	2300      	movs	r3, #0
 8003b80:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b88:	461a      	mov	r2, r3
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b8e:	2300      	movs	r3, #0
 8003b90:	613b      	str	r3, [r7, #16]
 8003b92:	e043      	b.n	8003c1c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	015a      	lsls	r2, r3, #5
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ba6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003baa:	d118      	bne.n	8003bde <USB_DevInit+0x156>
    {
      if (i == 0U)
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10a      	bne.n	8003bc8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	015a      	lsls	r2, r3, #5
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003bc4:	6013      	str	r3, [r2, #0]
 8003bc6:	e013      	b.n	8003bf0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	015a      	lsls	r2, r3, #5
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4413      	add	r3, r2
 8003bd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003bda:	6013      	str	r3, [r2, #0]
 8003bdc:	e008      	b.n	8003bf0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	015a      	lsls	r2, r3, #5
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	4413      	add	r3, r2
 8003be6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bea:	461a      	mov	r2, r3
 8003bec:	2300      	movs	r3, #0
 8003bee:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	015a      	lsls	r2, r3, #5
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	2300      	movs	r3, #0
 8003c00:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	015a      	lsls	r2, r3, #5
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c0e:	461a      	mov	r2, r3
 8003c10:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003c14:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	613b      	str	r3, [r7, #16]
 8003c1c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003c20:	461a      	mov	r2, r3
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d3b5      	bcc.n	8003b94 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c28:	2300      	movs	r3, #0
 8003c2a:	613b      	str	r3, [r7, #16]
 8003c2c:	e043      	b.n	8003cb6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c44:	d118      	bne.n	8003c78 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10a      	bne.n	8003c62 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	015a      	lsls	r2, r3, #5
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c58:	461a      	mov	r2, r3
 8003c5a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003c5e:	6013      	str	r3, [r2, #0]
 8003c60:	e013      	b.n	8003c8a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	015a      	lsls	r2, r3, #5
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	4413      	add	r3, r2
 8003c6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c6e:	461a      	mov	r2, r3
 8003c70:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003c74:	6013      	str	r3, [r2, #0]
 8003c76:	e008      	b.n	8003c8a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c84:	461a      	mov	r2, r3
 8003c86:	2300      	movs	r3, #0
 8003c88:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	015a      	lsls	r2, r3, #5
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c96:	461a      	mov	r2, r3
 8003c98:	2300      	movs	r3, #0
 8003c9a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ca8:	461a      	mov	r2, r3
 8003caa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003cae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	613b      	str	r3, [r7, #16]
 8003cb6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003cba:	461a      	mov	r2, r3
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d3b5      	bcc.n	8003c2e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cd4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003ce2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003ce4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d105      	bne.n	8003cf8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	f043 0210 	orr.w	r2, r3, #16
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	699a      	ldr	r2, [r3, #24]
 8003cfc:	4b10      	ldr	r3, [pc, #64]	@ (8003d40 <USB_DevInit+0x2b8>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003d04:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d005      	beq.n	8003d18 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	f043 0208 	orr.w	r2, r3, #8
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003d18:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d107      	bne.n	8003d30 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003d28:	f043 0304 	orr.w	r3, r3, #4
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3718      	adds	r7, #24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d3c:	b004      	add	sp, #16
 8003d3e:	4770      	bx	lr
 8003d40:	803c3800 	.word	0x803c3800

08003d44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	3301      	adds	r3, #1
 8003d56:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d5e:	d901      	bls.n	8003d64 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e01b      	b.n	8003d9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	daf2      	bge.n	8003d52 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	019b      	lsls	r3, r3, #6
 8003d74:	f043 0220 	orr.w	r2, r3, #32
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d88:	d901      	bls.n	8003d8e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e006      	b.n	8003d9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	f003 0320 	and.w	r3, r3, #32
 8003d96:	2b20      	cmp	r3, #32
 8003d98:	d0f0      	beq.n	8003d7c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	3301      	adds	r3, #1
 8003db8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003dc0:	d901      	bls.n	8003dc6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e018      	b.n	8003df8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	daf2      	bge.n	8003db4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2210      	movs	r2, #16
 8003dd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003de4:	d901      	bls.n	8003dea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e006      	b.n	8003df8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	f003 0310 	and.w	r3, r3, #16
 8003df2:	2b10      	cmp	r3, #16
 8003df4:	d0f0      	beq.n	8003dd8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	78fb      	ldrb	r3, [r7, #3]
 8003e1e:	68f9      	ldr	r1, [r7, #12]
 8003e20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e24:	4313      	orrs	r3, r2
 8003e26:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b085      	sub	sp, #20
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003e50:	f023 0303 	bic.w	r3, r3, #3
 8003e54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e64:	f043 0302 	orr.w	r3, r3, #2
 8003e68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3714      	adds	r7, #20
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	f003 0301 	and.w	r3, r3, #1
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003eac:	d901      	bls.n	8003eb2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e01b      	b.n	8003eea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	daf2      	bge.n	8003ea0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f043 0201 	orr.w	r2, r3, #1
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003ed6:	d901      	bls.n	8003edc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e006      	b.n	8003eea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d0f0      	beq.n	8003eca <USB_CoreReset+0x36>

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
	...

08003ef8 <__NVIC_SetPriority>:
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	4603      	mov	r3, r0
 8003f00:	6039      	str	r1, [r7, #0]
 8003f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	db0a      	blt.n	8003f22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	b2da      	uxtb	r2, r3
 8003f10:	490c      	ldr	r1, [pc, #48]	@ (8003f44 <__NVIC_SetPriority+0x4c>)
 8003f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f16:	0112      	lsls	r2, r2, #4
 8003f18:	b2d2      	uxtb	r2, r2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003f20:	e00a      	b.n	8003f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	4908      	ldr	r1, [pc, #32]	@ (8003f48 <__NVIC_SetPriority+0x50>)
 8003f28:	79fb      	ldrb	r3, [r7, #7]
 8003f2a:	f003 030f 	and.w	r3, r3, #15
 8003f2e:	3b04      	subs	r3, #4
 8003f30:	0112      	lsls	r2, r2, #4
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	440b      	add	r3, r1
 8003f36:	761a      	strb	r2, [r3, #24]
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	e000e100 	.word	0xe000e100
 8003f48:	e000ed00 	.word	0xe000ed00

08003f4c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003f50:	4b05      	ldr	r3, [pc, #20]	@ (8003f68 <SysTick_Handler+0x1c>)
 8003f52:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003f54:	f002 fdb0 	bl	8006ab8 <xTaskGetSchedulerState>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d001      	beq.n	8003f62 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003f5e:	f003 fce3 	bl	8007928 <xPortSysTickHandler>
  }
}
 8003f62:	bf00      	nop
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	e000e010 	.word	0xe000e010

08003f6c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003f70:	2100      	movs	r1, #0
 8003f72:	f06f 0004 	mvn.w	r0, #4
 8003f76:	f7ff ffbf 	bl	8003ef8 <__NVIC_SetPriority>
#endif
}
 8003f7a:	bf00      	nop
 8003f7c:	bd80      	pop	{r7, pc}
	...

08003f80 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f86:	f3ef 8305 	mrs	r3, IPSR
 8003f8a:	603b      	str	r3, [r7, #0]
  return(result);
 8003f8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003f92:	f06f 0305 	mvn.w	r3, #5
 8003f96:	607b      	str	r3, [r7, #4]
 8003f98:	e00c      	b.n	8003fb4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8003fc4 <osKernelInitialize+0x44>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d105      	bne.n	8003fae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003fa2:	4b08      	ldr	r3, [pc, #32]	@ (8003fc4 <osKernelInitialize+0x44>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	607b      	str	r3, [r7, #4]
 8003fac:	e002      	b.n	8003fb4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003fae:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003fb4:	687b      	ldr	r3, [r7, #4]
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	20000624 	.word	0x20000624

08003fc8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fce:	f3ef 8305 	mrs	r3, IPSR
 8003fd2:	603b      	str	r3, [r7, #0]
  return(result);
 8003fd4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003fda:	f06f 0305 	mvn.w	r3, #5
 8003fde:	607b      	str	r3, [r7, #4]
 8003fe0:	e010      	b.n	8004004 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8004010 <osKernelStart+0x48>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d109      	bne.n	8003ffe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003fea:	f7ff ffbf 	bl	8003f6c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003fee:	4b08      	ldr	r3, [pc, #32]	@ (8004010 <osKernelStart+0x48>)
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003ff4:	f002 f84a 	bl	800608c <vTaskStartScheduler>
      stat = osOK;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	607b      	str	r3, [r7, #4]
 8003ffc:	e002      	b.n	8004004 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8004002:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004004:	687b      	ldr	r3, [r7, #4]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	20000624 	.word	0x20000624

08004014 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004014:	b580      	push	{r7, lr}
 8004016:	b08e      	sub	sp, #56	@ 0x38
 8004018:	af04      	add	r7, sp, #16
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004020:	2300      	movs	r3, #0
 8004022:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004024:	f3ef 8305 	mrs	r3, IPSR
 8004028:	617b      	str	r3, [r7, #20]
  return(result);
 800402a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800402c:	2b00      	cmp	r3, #0
 800402e:	d17e      	bne.n	800412e <osThreadNew+0x11a>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d07b      	beq.n	800412e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004036:	2380      	movs	r3, #128	@ 0x80
 8004038:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800403a:	2318      	movs	r3, #24
 800403c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800403e:	2300      	movs	r3, #0
 8004040:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004042:	f04f 33ff 	mov.w	r3, #4294967295
 8004046:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d045      	beq.n	80040da <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d002      	beq.n	800405c <osThreadNew+0x48>
        name = attr->name;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d002      	beq.n	800406a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d008      	beq.n	8004082 <osThreadNew+0x6e>
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	2b38      	cmp	r3, #56	@ 0x38
 8004074:	d805      	bhi.n	8004082 <osThreadNew+0x6e>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <osThreadNew+0x72>
        return (NULL);
 8004082:	2300      	movs	r3, #0
 8004084:	e054      	b.n	8004130 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	089b      	lsrs	r3, r3, #2
 8004094:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00e      	beq.n	80040bc <osThreadNew+0xa8>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	2ba7      	cmp	r3, #167	@ 0xa7
 80040a4:	d90a      	bls.n	80040bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d006      	beq.n	80040bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <osThreadNew+0xa8>
        mem = 1;
 80040b6:	2301      	movs	r3, #1
 80040b8:	61bb      	str	r3, [r7, #24]
 80040ba:	e010      	b.n	80040de <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10c      	bne.n	80040de <osThreadNew+0xca>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d108      	bne.n	80040de <osThreadNew+0xca>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d104      	bne.n	80040de <osThreadNew+0xca>
          mem = 0;
 80040d4:	2300      	movs	r3, #0
 80040d6:	61bb      	str	r3, [r7, #24]
 80040d8:	e001      	b.n	80040de <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80040da:	2300      	movs	r3, #0
 80040dc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d110      	bne.n	8004106 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80040ec:	9202      	str	r2, [sp, #8]
 80040ee:	9301      	str	r3, [sp, #4]
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	6a3a      	ldr	r2, [r7, #32]
 80040f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f001 fdd2 	bl	8005ca4 <xTaskCreateStatic>
 8004100:	4603      	mov	r3, r0
 8004102:	613b      	str	r3, [r7, #16]
 8004104:	e013      	b.n	800412e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d110      	bne.n	800412e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	b29a      	uxth	r2, r3
 8004110:	f107 0310 	add.w	r3, r7, #16
 8004114:	9301      	str	r3, [sp, #4]
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f001 fe20 	bl	8005d64 <xTaskCreate>
 8004124:	4603      	mov	r3, r0
 8004126:	2b01      	cmp	r3, #1
 8004128:	d001      	beq.n	800412e <osThreadNew+0x11a>
            hTask = NULL;
 800412a:	2300      	movs	r3, #0
 800412c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800412e:	693b      	ldr	r3, [r7, #16]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3728      	adds	r7, #40	@ 0x28
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004140:	f3ef 8305 	mrs	r3, IPSR
 8004144:	60bb      	str	r3, [r7, #8]
  return(result);
 8004146:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <osDelay+0x1c>
    stat = osErrorISR;
 800414c:	f06f 0305 	mvn.w	r3, #5
 8004150:	60fb      	str	r3, [r7, #12]
 8004152:	e007      	b.n	8004164 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004154:	2300      	movs	r3, #0
 8004156:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d002      	beq.n	8004164 <osDelay+0x2c>
      vTaskDelay(ticks);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f001 ff5e 	bl	8006020 <vTaskDelay>
    }
  }

  return (stat);
 8004164:	68fb      	ldr	r3, [r7, #12]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800416e:	b580      	push	{r7, lr}
 8004170:	b086      	sub	sp, #24
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8004176:	2300      	movs	r3, #0
 8004178:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800417a:	f3ef 8305 	mrs	r3, IPSR
 800417e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004180:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8004182:	2b00      	cmp	r3, #0
 8004184:	d12d      	bne.n	80041e2 <osEventFlagsNew+0x74>
    mem = -1;
 8004186:	f04f 33ff 	mov.w	r3, #4294967295
 800418a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d015      	beq.n	80041be <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d006      	beq.n	80041a8 <osEventFlagsNew+0x3a>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	2b1f      	cmp	r3, #31
 80041a0:	d902      	bls.n	80041a8 <osEventFlagsNew+0x3a>
        mem = 1;
 80041a2:	2301      	movs	r3, #1
 80041a4:	613b      	str	r3, [r7, #16]
 80041a6:	e00c      	b.n	80041c2 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d108      	bne.n	80041c2 <osEventFlagsNew+0x54>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d104      	bne.n	80041c2 <osEventFlagsNew+0x54>
          mem = 0;
 80041b8:	2300      	movs	r3, #0
 80041ba:	613b      	str	r3, [r7, #16]
 80041bc:	e001      	b.n	80041c2 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80041be:	2300      	movs	r3, #0
 80041c0:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d106      	bne.n	80041d6 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 fb27 	bl	8004820 <xEventGroupCreateStatic>
 80041d2:	6178      	str	r0, [r7, #20]
 80041d4:	e005      	b.n	80041e2 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d102      	bne.n	80041e2 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80041dc:	f000 fb59 	bl	8004892 <xEventGroupCreate>
 80041e0:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80041e2:	697b      	ldr	r3, [r7, #20]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3718      	adds	r7, #24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <osEventFlagsSet+0x1c>
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004206:	d303      	bcc.n	8004210 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8004208:	f06f 0303 	mvn.w	r3, #3
 800420c:	617b      	str	r3, [r7, #20]
 800420e:	e028      	b.n	8004262 <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004210:	f3ef 8305 	mrs	r3, IPSR
 8004214:	60fb      	str	r3, [r7, #12]
  return(result);
 8004216:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004218:	2b00      	cmp	r3, #0
 800421a:	d01d      	beq.n	8004258 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800421c:	2300      	movs	r3, #0
 800421e:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8004220:	f107 0308 	add.w	r3, r7, #8
 8004224:	461a      	mov	r2, r3
 8004226:	6839      	ldr	r1, [r7, #0]
 8004228:	6938      	ldr	r0, [r7, #16]
 800422a:	f000 fcdb 	bl	8004be4 <xEventGroupSetBitsFromISR>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d103      	bne.n	800423c <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 8004234:	f06f 0302 	mvn.w	r3, #2
 8004238:	617b      	str	r3, [r7, #20]
 800423a:	e012      	b.n	8004262 <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00d      	beq.n	8004262 <osEventFlagsSet+0x76>
 8004246:	4b09      	ldr	r3, [pc, #36]	@ (800426c <osEventFlagsSet+0x80>)
 8004248:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	f3bf 8f4f 	dsb	sy
 8004252:	f3bf 8f6f 	isb	sy
 8004256:	e004      	b.n	8004262 <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8004258:	6839      	ldr	r1, [r7, #0]
 800425a:	6938      	ldr	r0, [r7, #16]
 800425c:	f000 fc06 	bl	8004a6c <xEventGroupSetBits>
 8004260:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8004262:	697b      	ldr	r3, [r7, #20]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3718      	adds	r7, #24
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	e000ed04 	.word	0xe000ed04

08004270 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8004270:	b580      	push	{r7, lr}
 8004272:	b08c      	sub	sp, #48	@ 0x30
 8004274:	af02      	add	r7, sp, #8
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
 800427c:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <osEventFlagsWait+0x20>
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800428e:	d303      	bcc.n	8004298 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8004290:	f06f 0303 	mvn.w	r3, #3
 8004294:	61fb      	str	r3, [r7, #28]
 8004296:	e04b      	b.n	8004330 <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004298:	f3ef 8305 	mrs	r3, IPSR
 800429c:	617b      	str	r3, [r7, #20]
  return(result);
 800429e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d003      	beq.n	80042ac <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 80042a4:	f06f 0305 	mvn.w	r3, #5
 80042a8:	61fb      	str	r3, [r7, #28]
 80042aa:	e041      	b.n	8004330 <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d002      	beq.n	80042bc <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 80042b6:	2301      	movs	r3, #1
 80042b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80042ba:	e001      	b.n	80042c0 <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 80042bc:	2300      	movs	r3, #0
 80042be:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 80042ca:	2300      	movs	r3, #0
 80042cc:	623b      	str	r3, [r7, #32]
 80042ce:	e001      	b.n	80042d4 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 80042d0:	2301      	movs	r3, #1
 80042d2:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042da:	6a3a      	ldr	r2, [r7, #32]
 80042dc:	68b9      	ldr	r1, [r7, #8]
 80042de:	69b8      	ldr	r0, [r7, #24]
 80042e0:	f000 faf2 	bl	80048c8 <xEventGroupWaitBits>
 80042e4:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d010      	beq.n	8004312 <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	4013      	ands	r3, r2
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d019      	beq.n	8004330 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 8004302:	f06f 0301 	mvn.w	r3, #1
 8004306:	61fb      	str	r3, [r7, #28]
 8004308:	e012      	b.n	8004330 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 800430a:	f06f 0302 	mvn.w	r3, #2
 800430e:	61fb      	str	r3, [r7, #28]
 8004310:	e00e      	b.n	8004330 <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	4013      	ands	r3, r2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d109      	bne.n	8004330 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 8004322:	f06f 0301 	mvn.w	r3, #1
 8004326:	61fb      	str	r3, [r7, #28]
 8004328:	e002      	b.n	8004330 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 800432a:	f06f 0302 	mvn.w	r3, #2
 800432e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8004330:	69fb      	ldr	r3, [r7, #28]
}
 8004332:	4618      	mov	r0, r3
 8004334:	3728      	adds	r7, #40	@ 0x28
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800433a:	b580      	push	{r7, lr}
 800433c:	b088      	sub	sp, #32
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004342:	2300      	movs	r3, #0
 8004344:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004346:	f3ef 8305 	mrs	r3, IPSR
 800434a:	60bb      	str	r3, [r7, #8]
  return(result);
 800434c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800434e:	2b00      	cmp	r3, #0
 8004350:	d174      	bne.n	800443c <osMutexNew+0x102>
    if (attr != NULL) {
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <osMutexNew+0x26>
      type = attr->attr_bits;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	61bb      	str	r3, [r7, #24]
 800435e:	e001      	b.n	8004364 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <osMutexNew+0x3a>
      rmtx = 1U;
 800436e:	2301      	movs	r3, #1
 8004370:	617b      	str	r3, [r7, #20]
 8004372:	e001      	b.n	8004378 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	f003 0308 	and.w	r3, r3, #8
 800437e:	2b00      	cmp	r3, #0
 8004380:	d15c      	bne.n	800443c <osMutexNew+0x102>
      mem = -1;
 8004382:	f04f 33ff 	mov.w	r3, #4294967295
 8004386:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d015      	beq.n	80043ba <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d006      	beq.n	80043a4 <osMutexNew+0x6a>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	2b4f      	cmp	r3, #79	@ 0x4f
 800439c:	d902      	bls.n	80043a4 <osMutexNew+0x6a>
          mem = 1;
 800439e:	2301      	movs	r3, #1
 80043a0:	613b      	str	r3, [r7, #16]
 80043a2:	e00c      	b.n	80043be <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d108      	bne.n	80043be <osMutexNew+0x84>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d104      	bne.n	80043be <osMutexNew+0x84>
            mem = 0;
 80043b4:	2300      	movs	r3, #0
 80043b6:	613b      	str	r3, [r7, #16]
 80043b8:	e001      	b.n	80043be <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80043ba:	2300      	movs	r3, #0
 80043bc:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d112      	bne.n	80043ea <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d007      	beq.n	80043da <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	4619      	mov	r1, r3
 80043d0:	2004      	movs	r0, #4
 80043d2:	f000 fe46 	bl	8005062 <xQueueCreateMutexStatic>
 80043d6:	61f8      	str	r0, [r7, #28]
 80043d8:	e016      	b.n	8004408 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	4619      	mov	r1, r3
 80043e0:	2001      	movs	r0, #1
 80043e2:	f000 fe3e 	bl	8005062 <xQueueCreateMutexStatic>
 80043e6:	61f8      	str	r0, [r7, #28]
 80043e8:	e00e      	b.n	8004408 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10b      	bne.n	8004408 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d004      	beq.n	8004400 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80043f6:	2004      	movs	r0, #4
 80043f8:	f000 fe1b 	bl	8005032 <xQueueCreateMutex>
 80043fc:	61f8      	str	r0, [r7, #28]
 80043fe:	e003      	b.n	8004408 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8004400:	2001      	movs	r0, #1
 8004402:	f000 fe16 	bl	8005032 <xQueueCreateMutex>
 8004406:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00c      	beq.n	8004428 <osMutexNew+0xee>
        if (attr != NULL) {
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d003      	beq.n	800441c <osMutexNew+0xe2>
          name = attr->name;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	60fb      	str	r3, [r7, #12]
 800441a:	e001      	b.n	8004420 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800441c:	2300      	movs	r3, #0
 800441e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8004420:	68f9      	ldr	r1, [r7, #12]
 8004422:	69f8      	ldr	r0, [r7, #28]
 8004424:	f001 fbe0 	bl	8005be8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d006      	beq.n	800443c <osMutexNew+0x102>
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	f043 0301 	orr.w	r3, r3, #1
 800443a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800443c:	69fb      	ldr	r3, [r7, #28]
}
 800443e:	4618      	mov	r0, r3
 8004440:	3720      	adds	r7, #32
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004446:	b580      	push	{r7, lr}
 8004448:	b086      	sub	sp, #24
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f023 0301 	bic.w	r3, r3, #1
 8004456:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004460:	2300      	movs	r3, #0
 8004462:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004464:	f3ef 8305 	mrs	r3, IPSR
 8004468:	60bb      	str	r3, [r7, #8]
  return(result);
 800446a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800446c:	2b00      	cmp	r3, #0
 800446e:	d003      	beq.n	8004478 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8004470:	f06f 0305 	mvn.w	r3, #5
 8004474:	617b      	str	r3, [r7, #20]
 8004476:	e02c      	b.n	80044d2 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d103      	bne.n	8004486 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800447e:	f06f 0303 	mvn.w	r3, #3
 8004482:	617b      	str	r3, [r7, #20]
 8004484:	e025      	b.n	80044d2 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d011      	beq.n	80044b0 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800448c:	6839      	ldr	r1, [r7, #0]
 800448e:	6938      	ldr	r0, [r7, #16]
 8004490:	f000 fe37 	bl	8005102 <xQueueTakeMutexRecursive>
 8004494:	4603      	mov	r3, r0
 8004496:	2b01      	cmp	r3, #1
 8004498:	d01b      	beq.n	80044d2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d003      	beq.n	80044a8 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80044a0:	f06f 0301 	mvn.w	r3, #1
 80044a4:	617b      	str	r3, [r7, #20]
 80044a6:	e014      	b.n	80044d2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80044a8:	f06f 0302 	mvn.w	r3, #2
 80044ac:	617b      	str	r3, [r7, #20]
 80044ae:	e010      	b.n	80044d2 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80044b0:	6839      	ldr	r1, [r7, #0]
 80044b2:	6938      	ldr	r0, [r7, #16]
 80044b4:	f001 f8de 	bl	8005674 <xQueueSemaphoreTake>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d009      	beq.n	80044d2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80044c4:	f06f 0301 	mvn.w	r3, #1
 80044c8:	617b      	str	r3, [r7, #20]
 80044ca:	e002      	b.n	80044d2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80044cc:	f06f 0302 	mvn.w	r3, #2
 80044d0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80044d2:	697b      	ldr	r3, [r7, #20]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3718      	adds	r7, #24
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f023 0301 	bic.w	r3, r3, #1
 80044ea:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80044f4:	2300      	movs	r3, #0
 80044f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044f8:	f3ef 8305 	mrs	r3, IPSR
 80044fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80044fe:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004500:	2b00      	cmp	r3, #0
 8004502:	d003      	beq.n	800450c <osMutexRelease+0x30>
    stat = osErrorISR;
 8004504:	f06f 0305 	mvn.w	r3, #5
 8004508:	617b      	str	r3, [r7, #20]
 800450a:	e01f      	b.n	800454c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d103      	bne.n	800451a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8004512:	f06f 0303 	mvn.w	r3, #3
 8004516:	617b      	str	r3, [r7, #20]
 8004518:	e018      	b.n	800454c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d009      	beq.n	8004534 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004520:	6938      	ldr	r0, [r7, #16]
 8004522:	f000 fdb9 	bl	8005098 <xQueueGiveMutexRecursive>
 8004526:	4603      	mov	r3, r0
 8004528:	2b01      	cmp	r3, #1
 800452a:	d00f      	beq.n	800454c <osMutexRelease+0x70>
        stat = osErrorResource;
 800452c:	f06f 0302 	mvn.w	r3, #2
 8004530:	617b      	str	r3, [r7, #20]
 8004532:	e00b      	b.n	800454c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004534:	2300      	movs	r3, #0
 8004536:	2200      	movs	r2, #0
 8004538:	2100      	movs	r1, #0
 800453a:	6938      	ldr	r0, [r7, #16]
 800453c:	f000 fe18 	bl	8005170 <xQueueGenericSend>
 8004540:	4603      	mov	r3, r0
 8004542:	2b01      	cmp	r3, #1
 8004544:	d002      	beq.n	800454c <osMutexRelease+0x70>
        stat = osErrorResource;
 8004546:	f06f 0302 	mvn.w	r3, #2
 800454a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800454c:	697b      	ldr	r3, [r7, #20]
}
 800454e:	4618      	mov	r0, r3
 8004550:	3718      	adds	r7, #24
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004556:	b580      	push	{r7, lr}
 8004558:	b08a      	sub	sp, #40	@ 0x28
 800455a:	af02      	add	r7, sp, #8
 800455c:	60f8      	str	r0, [r7, #12]
 800455e:	60b9      	str	r1, [r7, #8]
 8004560:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004562:	2300      	movs	r3, #0
 8004564:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004566:	f3ef 8305 	mrs	r3, IPSR
 800456a:	613b      	str	r3, [r7, #16]
  return(result);
 800456c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800456e:	2b00      	cmp	r3, #0
 8004570:	d15f      	bne.n	8004632 <osMessageQueueNew+0xdc>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d05c      	beq.n	8004632 <osMessageQueueNew+0xdc>
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d059      	beq.n	8004632 <osMessageQueueNew+0xdc>
    mem = -1;
 800457e:	f04f 33ff 	mov.w	r3, #4294967295
 8004582:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d029      	beq.n	80045de <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d012      	beq.n	80045b8 <osMessageQueueNew+0x62>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	2b4f      	cmp	r3, #79	@ 0x4f
 8004598:	d90e      	bls.n	80045b8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00a      	beq.n	80045b8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	695a      	ldr	r2, [r3, #20]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	68b9      	ldr	r1, [r7, #8]
 80045aa:	fb01 f303 	mul.w	r3, r1, r3
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d302      	bcc.n	80045b8 <osMessageQueueNew+0x62>
        mem = 1;
 80045b2:	2301      	movs	r3, #1
 80045b4:	61bb      	str	r3, [r7, #24]
 80045b6:	e014      	b.n	80045e2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d110      	bne.n	80045e2 <osMessageQueueNew+0x8c>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10c      	bne.n	80045e2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d108      	bne.n	80045e2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d104      	bne.n	80045e2 <osMessageQueueNew+0x8c>
          mem = 0;
 80045d8:	2300      	movs	r3, #0
 80045da:	61bb      	str	r3, [r7, #24]
 80045dc:	e001      	b.n	80045e2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80045de:	2300      	movs	r3, #0
 80045e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d10b      	bne.n	8004600 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	2100      	movs	r1, #0
 80045f2:	9100      	str	r1, [sp, #0]
 80045f4:	68b9      	ldr	r1, [r7, #8]
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 fc26 	bl	8004e48 <xQueueGenericCreateStatic>
 80045fc:	61f8      	str	r0, [r7, #28]
 80045fe:	e008      	b.n	8004612 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d105      	bne.n	8004612 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004606:	2200      	movs	r2, #0
 8004608:	68b9      	ldr	r1, [r7, #8]
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 fc99 	bl	8004f42 <xQueueGenericCreate>
 8004610:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00c      	beq.n	8004632 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <osMessageQueueNew+0xd0>
        name = attr->name;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	e001      	b.n	800462a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004626:	2300      	movs	r3, #0
 8004628:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800462a:	6979      	ldr	r1, [r7, #20]
 800462c:	69f8      	ldr	r0, [r7, #28]
 800462e:	f001 fadb 	bl	8005be8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004632:	69fb      	ldr	r3, [r7, #28]
}
 8004634:	4618      	mov	r0, r3
 8004636:	3720      	adds	r7, #32
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800463c:	b580      	push	{r7, lr}
 800463e:	b088      	sub	sp, #32
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	603b      	str	r3, [r7, #0]
 8004648:	4613      	mov	r3, r2
 800464a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004650:	2300      	movs	r3, #0
 8004652:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004654:	f3ef 8305 	mrs	r3, IPSR
 8004658:	617b      	str	r3, [r7, #20]
  return(result);
 800465a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800465c:	2b00      	cmp	r3, #0
 800465e:	d028      	beq.n	80046b2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d005      	beq.n	8004672 <osMessageQueuePut+0x36>
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d002      	beq.n	8004672 <osMessageQueuePut+0x36>
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004672:	f06f 0303 	mvn.w	r3, #3
 8004676:	61fb      	str	r3, [r7, #28]
 8004678:	e038      	b.n	80046ec <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800467a:	2300      	movs	r3, #0
 800467c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800467e:	f107 0210 	add.w	r2, r7, #16
 8004682:	2300      	movs	r3, #0
 8004684:	68b9      	ldr	r1, [r7, #8]
 8004686:	69b8      	ldr	r0, [r7, #24]
 8004688:	f000 fe74 	bl	8005374 <xQueueGenericSendFromISR>
 800468c:	4603      	mov	r3, r0
 800468e:	2b01      	cmp	r3, #1
 8004690:	d003      	beq.n	800469a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004692:	f06f 0302 	mvn.w	r3, #2
 8004696:	61fb      	str	r3, [r7, #28]
 8004698:	e028      	b.n	80046ec <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d025      	beq.n	80046ec <osMessageQueuePut+0xb0>
 80046a0:	4b15      	ldr	r3, [pc, #84]	@ (80046f8 <osMessageQueuePut+0xbc>)
 80046a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	f3bf 8f6f 	isb	sy
 80046b0:	e01c      	b.n	80046ec <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d002      	beq.n	80046be <osMessageQueuePut+0x82>
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d103      	bne.n	80046c6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80046be:	f06f 0303 	mvn.w	r3, #3
 80046c2:	61fb      	str	r3, [r7, #28]
 80046c4:	e012      	b.n	80046ec <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80046c6:	2300      	movs	r3, #0
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	68b9      	ldr	r1, [r7, #8]
 80046cc:	69b8      	ldr	r0, [r7, #24]
 80046ce:	f000 fd4f 	bl	8005170 <xQueueGenericSend>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d009      	beq.n	80046ec <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80046de:	f06f 0301 	mvn.w	r3, #1
 80046e2:	61fb      	str	r3, [r7, #28]
 80046e4:	e002      	b.n	80046ec <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80046e6:	f06f 0302 	mvn.w	r3, #2
 80046ea:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80046ec:	69fb      	ldr	r3, [r7, #28]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3720      	adds	r7, #32
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	e000ed04 	.word	0xe000ed04

080046fc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b088      	sub	sp, #32
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
 8004708:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800470e:	2300      	movs	r3, #0
 8004710:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004712:	f3ef 8305 	mrs	r3, IPSR
 8004716:	617b      	str	r3, [r7, #20]
  return(result);
 8004718:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800471a:	2b00      	cmp	r3, #0
 800471c:	d028      	beq.n	8004770 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d005      	beq.n	8004730 <osMessageQueueGet+0x34>
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d002      	beq.n	8004730 <osMessageQueueGet+0x34>
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d003      	beq.n	8004738 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004730:	f06f 0303 	mvn.w	r3, #3
 8004734:	61fb      	str	r3, [r7, #28]
 8004736:	e037      	b.n	80047a8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004738:	2300      	movs	r3, #0
 800473a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800473c:	f107 0310 	add.w	r3, r7, #16
 8004740:	461a      	mov	r2, r3
 8004742:	68b9      	ldr	r1, [r7, #8]
 8004744:	69b8      	ldr	r0, [r7, #24]
 8004746:	f001 f8a5 	bl	8005894 <xQueueReceiveFromISR>
 800474a:	4603      	mov	r3, r0
 800474c:	2b01      	cmp	r3, #1
 800474e:	d003      	beq.n	8004758 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004750:	f06f 0302 	mvn.w	r3, #2
 8004754:	61fb      	str	r3, [r7, #28]
 8004756:	e027      	b.n	80047a8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d024      	beq.n	80047a8 <osMessageQueueGet+0xac>
 800475e:	4b15      	ldr	r3, [pc, #84]	@ (80047b4 <osMessageQueueGet+0xb8>)
 8004760:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	f3bf 8f4f 	dsb	sy
 800476a:	f3bf 8f6f 	isb	sy
 800476e:	e01b      	b.n	80047a8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d002      	beq.n	800477c <osMessageQueueGet+0x80>
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d103      	bne.n	8004784 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800477c:	f06f 0303 	mvn.w	r3, #3
 8004780:	61fb      	str	r3, [r7, #28]
 8004782:	e011      	b.n	80047a8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	68b9      	ldr	r1, [r7, #8]
 8004788:	69b8      	ldr	r0, [r7, #24]
 800478a:	f000 fe91 	bl	80054b0 <xQueueReceive>
 800478e:	4603      	mov	r3, r0
 8004790:	2b01      	cmp	r3, #1
 8004792:	d009      	beq.n	80047a8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800479a:	f06f 0301 	mvn.w	r3, #1
 800479e:	61fb      	str	r3, [r7, #28]
 80047a0:	e002      	b.n	80047a8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80047a2:	f06f 0302 	mvn.w	r3, #2
 80047a6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80047a8:	69fb      	ldr	r3, [r7, #28]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3720      	adds	r7, #32
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	e000ed04 	.word	0xe000ed04

080047b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4a07      	ldr	r2, [pc, #28]	@ (80047e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80047c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	4a06      	ldr	r2, [pc, #24]	@ (80047e8 <vApplicationGetIdleTaskMemory+0x30>)
 80047ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2280      	movs	r2, #128	@ 0x80
 80047d4:	601a      	str	r2, [r3, #0]
}
 80047d6:	bf00      	nop
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	20000628 	.word	0x20000628
 80047e8:	200006d0 	.word	0x200006d0

080047ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4a07      	ldr	r2, [pc, #28]	@ (8004818 <vApplicationGetTimerTaskMemory+0x2c>)
 80047fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	4a06      	ldr	r2, [pc, #24]	@ (800481c <vApplicationGetTimerTaskMemory+0x30>)
 8004802:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800480a:	601a      	str	r2, [r3, #0]
}
 800480c:	bf00      	nop
 800480e:	3714      	adds	r7, #20
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr
 8004818:	200008d0 	.word	0x200008d0
 800481c:	20000978 	.word	0x20000978

08004820 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10b      	bne.n	8004846 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800482e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004832:	f383 8811 	msr	BASEPRI, r3
 8004836:	f3bf 8f6f 	isb	sy
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004840:	bf00      	nop
 8004842:	bf00      	nop
 8004844:	e7fd      	b.n	8004842 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8004846:	2320      	movs	r3, #32
 8004848:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2b20      	cmp	r3, #32
 800484e:	d00b      	beq.n	8004868 <xEventGroupCreateStatic+0x48>
	__asm volatile
 8004850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004854:	f383 8811 	msr	BASEPRI, r3
 8004858:	f3bf 8f6f 	isb	sy
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	60fb      	str	r3, [r7, #12]
}
 8004862:	bf00      	nop
 8004864:	bf00      	nop
 8004866:	e7fd      	b.n	8004864 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00a      	beq.n	8004888 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	2200      	movs	r2, #0
 8004876:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	3304      	adds	r3, #4
 800487c:	4618      	mov	r0, r3
 800487e:	f000 f9c5 	bl	8004c0c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2201      	movs	r2, #1
 8004886:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8004888:	697b      	ldr	r3, [r7, #20]
	}
 800488a:	4618      	mov	r0, r3
 800488c:	3718      	adds	r7, #24
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8004892:	b580      	push	{r7, lr}
 8004894:	b082      	sub	sp, #8
 8004896:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8004898:	2020      	movs	r0, #32
 800489a:	f003 f8d7 	bl	8007a4c <pvPortMalloc>
 800489e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00a      	beq.n	80048bc <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	3304      	adds	r3, #4
 80048b0:	4618      	mov	r0, r3
 80048b2:	f000 f9ab 	bl	8004c0c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80048bc:	687b      	ldr	r3, [r7, #4]
	}
 80048be:	4618      	mov	r0, r3
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
	...

080048c8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b090      	sub	sp, #64	@ 0x40
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
 80048d4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80048da:	2300      	movs	r3, #0
 80048dc:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80048de:	2300      	movs	r3, #0
 80048e0:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10b      	bne.n	8004900 <xEventGroupWaitBits+0x38>
	__asm volatile
 80048e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ec:	f383 8811 	msr	BASEPRI, r3
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	623b      	str	r3, [r7, #32]
}
 80048fa:	bf00      	nop
 80048fc:	bf00      	nop
 80048fe:	e7fd      	b.n	80048fc <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004906:	d30b      	bcc.n	8004920 <xEventGroupWaitBits+0x58>
	__asm volatile
 8004908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800490c:	f383 8811 	msr	BASEPRI, r3
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	61fb      	str	r3, [r7, #28]
}
 800491a:	bf00      	nop
 800491c:	bf00      	nop
 800491e:	e7fd      	b.n	800491c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10b      	bne.n	800493e <xEventGroupWaitBits+0x76>
	__asm volatile
 8004926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800492a:	f383 8811 	msr	BASEPRI, r3
 800492e:	f3bf 8f6f 	isb	sy
 8004932:	f3bf 8f4f 	dsb	sy
 8004936:	61bb      	str	r3, [r7, #24]
}
 8004938:	bf00      	nop
 800493a:	bf00      	nop
 800493c:	e7fd      	b.n	800493a <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800493e:	f002 f8bb 	bl	8006ab8 <xTaskGetSchedulerState>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d102      	bne.n	800494e <xEventGroupWaitBits+0x86>
 8004948:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <xEventGroupWaitBits+0x8a>
 800494e:	2301      	movs	r3, #1
 8004950:	e000      	b.n	8004954 <xEventGroupWaitBits+0x8c>
 8004952:	2300      	movs	r3, #0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10b      	bne.n	8004970 <xEventGroupWaitBits+0xa8>
	__asm volatile
 8004958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800495c:	f383 8811 	msr	BASEPRI, r3
 8004960:	f3bf 8f6f 	isb	sy
 8004964:	f3bf 8f4f 	dsb	sy
 8004968:	617b      	str	r3, [r7, #20]
}
 800496a:	bf00      	nop
 800496c:	bf00      	nop
 800496e:	e7fd      	b.n	800496c <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 8004970:	f001 fbfc 	bl	800616c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8004974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	68b9      	ldr	r1, [r7, #8]
 800497e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004980:	f000 f90d 	bl	8004b9e <prvTestWaitCondition>
 8004984:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8004986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00e      	beq.n	80049aa <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800498c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800498e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8004990:	2300      	movs	r3, #0
 8004992:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d028      	beq.n	80049ec <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800499a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	43db      	mvns	r3, r3
 80049a2:	401a      	ands	r2, r3
 80049a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	e020      	b.n	80049ec <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80049aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d104      	bne.n	80049ba <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80049b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 80049b4:	2301      	movs	r3, #1
 80049b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80049b8:	e018      	b.n	80049ec <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80049c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049c6:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80049ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80049d4:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80049d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049d8:	1d18      	adds	r0, r3, #4
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049de:	4313      	orrs	r3, r2
 80049e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049e2:	4619      	mov	r1, r3
 80049e4:	f001 fdc4 	bl	8006570 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80049e8:	2300      	movs	r3, #0
 80049ea:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80049ec:	f001 fbcc 	bl	8006188 <xTaskResumeAll>
 80049f0:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80049f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d031      	beq.n	8004a5c <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 80049f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d107      	bne.n	8004a0e <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 80049fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004a68 <xEventGroupWaitBits+0x1a0>)
 8004a00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	f3bf 8f4f 	dsb	sy
 8004a0a:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8004a0e:	f002 f9cd 	bl	8006dac <uxTaskResetEventItemValue>
 8004a12:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8004a14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d11a      	bne.n	8004a54 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 8004a1e:	f002 fef3 	bl	8007808 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8004a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	68b9      	ldr	r1, [r7, #8]
 8004a2c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004a2e:	f000 f8b6 	bl	8004b9e <prvTestWaitCondition>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d009      	beq.n	8004a4c <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d006      	beq.n	8004a4c <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	43db      	mvns	r3, r3
 8004a46:	401a      	ands	r2, r3
 8004a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a4a:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8004a50:	f002 ff0c 	bl	800786c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004a54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a56:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8004a5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3740      	adds	r7, #64	@ 0x40
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	e000ed04 	.word	0xe000ed04

08004a6c <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b08e      	sub	sp, #56	@ 0x38
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8004a76:	2300      	movs	r3, #0
 8004a78:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10b      	bne.n	8004aa0 <xEventGroupSetBits+0x34>
	__asm volatile
 8004a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a8c:	f383 8811 	msr	BASEPRI, r3
 8004a90:	f3bf 8f6f 	isb	sy
 8004a94:	f3bf 8f4f 	dsb	sy
 8004a98:	613b      	str	r3, [r7, #16]
}
 8004a9a:	bf00      	nop
 8004a9c:	bf00      	nop
 8004a9e:	e7fd      	b.n	8004a9c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004aa6:	d30b      	bcc.n	8004ac0 <xEventGroupSetBits+0x54>
	__asm volatile
 8004aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	60fb      	str	r3, [r7, #12]
}
 8004aba:	bf00      	nop
 8004abc:	bf00      	nop
 8004abe:	e7fd      	b.n	8004abc <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8004ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac2:	3304      	adds	r3, #4
 8004ac4:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac8:	3308      	adds	r3, #8
 8004aca:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8004acc:	f001 fb4e 	bl	800616c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8004ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	431a      	orrs	r2, r3
 8004ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae0:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8004ae2:	e03c      	b.n	8004b5e <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8004ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8004af0:	2300      	movs	r3, #0
 8004af2:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004afa:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004b02:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d108      	bne.n	8004b20 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	4013      	ands	r3, r2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00b      	beq.n	8004b32 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b1e:	e008      	b.n	8004b32 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8004b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	4013      	ands	r3, r2
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d101      	bne.n	8004b32 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8004b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d010      	beq.n	8004b5a <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8004b42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8004b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004b52:	4619      	mov	r1, r3
 8004b54:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004b56:	f001 fdd9 	bl	800670c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8004b5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d1be      	bne.n	8004ae4 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b6c:	43db      	mvns	r3, r3
 8004b6e:	401a      	ands	r2, r3
 8004b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b72:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8004b74:	f001 fb08 	bl	8006188 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8004b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b7a:	681b      	ldr	r3, [r3, #0]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3738      	adds	r7, #56	@ 0x38
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8004b8e:	6839      	ldr	r1, [r7, #0]
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7ff ff6b 	bl	8004a6c <xEventGroupSetBits>
}
 8004b96:	bf00      	nop
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b087      	sub	sp, #28
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	60f8      	str	r0, [r7, #12]
 8004ba6:	60b9      	str	r1, [r7, #8]
 8004ba8:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8004baa:	2300      	movs	r3, #0
 8004bac:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d107      	bne.n	8004bc4 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00a      	beq.n	8004bd4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	617b      	str	r3, [r7, #20]
 8004bc2:	e007      	b.n	8004bd4 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	4013      	ands	r3, r2
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d101      	bne.n	8004bd4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8004bd4:	697b      	ldr	r3, [r7, #20]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	371c      	adds	r7, #28
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
	...

08004be4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	68f9      	ldr	r1, [r7, #12]
 8004bf6:	4804      	ldr	r0, [pc, #16]	@ (8004c08 <xEventGroupSetBitsFromISR+0x24>)
 8004bf8:	f002 fcb2 	bl	8007560 <xTimerPendFunctionCallFromISR>
 8004bfc:	6178      	str	r0, [r7, #20]

		return xReturn;
 8004bfe:	697b      	ldr	r3, [r7, #20]
	}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3718      	adds	r7, #24
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	08004b85 	.word	0x08004b85

08004c0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f103 0208 	add.w	r2, r3, #8
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f04f 32ff 	mov.w	r2, #4294967295
 8004c24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f103 0208 	add.w	r2, r3, #8
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f103 0208 	add.w	r2, r3, #8
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c5a:	bf00      	nop
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c66:	b480      	push	{r7}
 8004c68:	b085      	sub	sp, #20
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
 8004c6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	683a      	ldr	r2, [r7, #0]
 8004c8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	683a      	ldr	r2, [r7, #0]
 8004c90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	1c5a      	adds	r2, r3, #1
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	601a      	str	r2, [r3, #0]
}
 8004ca2:	bf00      	nop
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b085      	sub	sp, #20
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
 8004cb6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc4:	d103      	bne.n	8004cce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	60fb      	str	r3, [r7, #12]
 8004ccc:	e00c      	b.n	8004ce8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	3308      	adds	r3, #8
 8004cd2:	60fb      	str	r3, [r7, #12]
 8004cd4:	e002      	b.n	8004cdc <vListInsert+0x2e>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	60fb      	str	r3, [r7, #12]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d2f6      	bcs.n	8004cd6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	685a      	ldr	r2, [r3, #4]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	1c5a      	adds	r2, r3, #1
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	601a      	str	r2, [r3, #0]
}
 8004d14:	bf00      	nop
 8004d16:	3714      	adds	r7, #20
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	6892      	ldr	r2, [r2, #8]
 8004d36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	6852      	ldr	r2, [r2, #4]
 8004d40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d103      	bne.n	8004d54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	1e5a      	subs	r2, r3, #1
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10b      	bne.n	8004da0 <xQueueGenericReset+0x2c>
	__asm volatile
 8004d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d8c:	f383 8811 	msr	BASEPRI, r3
 8004d90:	f3bf 8f6f 	isb	sy
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	60bb      	str	r3, [r7, #8]
}
 8004d9a:	bf00      	nop
 8004d9c:	bf00      	nop
 8004d9e:	e7fd      	b.n	8004d9c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004da0:	f002 fd32 	bl	8007808 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dac:	68f9      	ldr	r1, [r7, #12]
 8004dae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004db0:	fb01 f303 	mul.w	r3, r1, r3
 8004db4:	441a      	add	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	68f9      	ldr	r1, [r7, #12]
 8004dd4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004dd6:	fb01 f303 	mul.w	r3, r1, r3
 8004dda:	441a      	add	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	22ff      	movs	r2, #255	@ 0xff
 8004de4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	22ff      	movs	r2, #255	@ 0xff
 8004dec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d114      	bne.n	8004e20 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d01a      	beq.n	8004e34 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	3310      	adds	r3, #16
 8004e02:	4618      	mov	r0, r3
 8004e04:	f001 fc1e 	bl	8006644 <xTaskRemoveFromEventList>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d012      	beq.n	8004e34 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e44 <xQueueGenericReset+0xd0>)
 8004e10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e14:	601a      	str	r2, [r3, #0]
 8004e16:	f3bf 8f4f 	dsb	sy
 8004e1a:	f3bf 8f6f 	isb	sy
 8004e1e:	e009      	b.n	8004e34 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	3310      	adds	r3, #16
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7ff fef1 	bl	8004c0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	3324      	adds	r3, #36	@ 0x24
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7ff feec 	bl	8004c0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004e34:	f002 fd1a 	bl	800786c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004e38:	2301      	movs	r3, #1
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	e000ed04 	.word	0xe000ed04

08004e48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b08e      	sub	sp, #56	@ 0x38
 8004e4c:	af02      	add	r7, sp, #8
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
 8004e54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10b      	bne.n	8004e74 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e60:	f383 8811 	msr	BASEPRI, r3
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004e6e:	bf00      	nop
 8004e70:	bf00      	nop
 8004e72:	e7fd      	b.n	8004e70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10b      	bne.n	8004e92 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e7e:	f383 8811 	msr	BASEPRI, r3
 8004e82:	f3bf 8f6f 	isb	sy
 8004e86:	f3bf 8f4f 	dsb	sy
 8004e8a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004e8c:	bf00      	nop
 8004e8e:	bf00      	nop
 8004e90:	e7fd      	b.n	8004e8e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d002      	beq.n	8004e9e <xQueueGenericCreateStatic+0x56>
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <xQueueGenericCreateStatic+0x5a>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e000      	b.n	8004ea4 <xQueueGenericCreateStatic+0x5c>
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10b      	bne.n	8004ec0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eac:	f383 8811 	msr	BASEPRI, r3
 8004eb0:	f3bf 8f6f 	isb	sy
 8004eb4:	f3bf 8f4f 	dsb	sy
 8004eb8:	623b      	str	r3, [r7, #32]
}
 8004eba:	bf00      	nop
 8004ebc:	bf00      	nop
 8004ebe:	e7fd      	b.n	8004ebc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d102      	bne.n	8004ecc <xQueueGenericCreateStatic+0x84>
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <xQueueGenericCreateStatic+0x88>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e000      	b.n	8004ed2 <xQueueGenericCreateStatic+0x8a>
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10b      	bne.n	8004eee <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eda:	f383 8811 	msr	BASEPRI, r3
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f3bf 8f4f 	dsb	sy
 8004ee6:	61fb      	str	r3, [r7, #28]
}
 8004ee8:	bf00      	nop
 8004eea:	bf00      	nop
 8004eec:	e7fd      	b.n	8004eea <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004eee:	2350      	movs	r3, #80	@ 0x50
 8004ef0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	2b50      	cmp	r3, #80	@ 0x50
 8004ef6:	d00b      	beq.n	8004f10 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004efc:	f383 8811 	msr	BASEPRI, r3
 8004f00:	f3bf 8f6f 	isb	sy
 8004f04:	f3bf 8f4f 	dsb	sy
 8004f08:	61bb      	str	r3, [r7, #24]
}
 8004f0a:	bf00      	nop
 8004f0c:	bf00      	nop
 8004f0e:	e7fd      	b.n	8004f0c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004f10:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00d      	beq.n	8004f38 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f24:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	68b9      	ldr	r1, [r7, #8]
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 f840 	bl	8004fb8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3730      	adds	r7, #48	@ 0x30
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b08a      	sub	sp, #40	@ 0x28
 8004f46:	af02      	add	r7, sp, #8
 8004f48:	60f8      	str	r0, [r7, #12]
 8004f4a:	60b9      	str	r1, [r7, #8]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10b      	bne.n	8004f6e <xQueueGenericCreate+0x2c>
	__asm volatile
 8004f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f5a:	f383 8811 	msr	BASEPRI, r3
 8004f5e:	f3bf 8f6f 	isb	sy
 8004f62:	f3bf 8f4f 	dsb	sy
 8004f66:	613b      	str	r3, [r7, #16]
}
 8004f68:	bf00      	nop
 8004f6a:	bf00      	nop
 8004f6c:	e7fd      	b.n	8004f6a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	fb02 f303 	mul.w	r3, r2, r3
 8004f76:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	3350      	adds	r3, #80	@ 0x50
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f002 fd65 	bl	8007a4c <pvPortMalloc>
 8004f82:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d011      	beq.n	8004fae <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	3350      	adds	r3, #80	@ 0x50
 8004f92:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f9c:	79fa      	ldrb	r2, [r7, #7]
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	68b9      	ldr	r1, [r7, #8]
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f000 f805 	bl	8004fb8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004fae:	69bb      	ldr	r3, [r7, #24]
	}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3720      	adds	r7, #32
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
 8004fc4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d103      	bne.n	8004fd4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	e002      	b.n	8004fda <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	69b8      	ldr	r0, [r7, #24]
 8004fea:	f7ff fec3 	bl	8004d74 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	78fa      	ldrb	r2, [r7, #3]
 8004ff2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ff6:	bf00      	nop
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b082      	sub	sp, #8
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00e      	beq.n	800502a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800501e:	2300      	movs	r3, #0
 8005020:	2200      	movs	r2, #0
 8005022:	2100      	movs	r1, #0
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f8a3 	bl	8005170 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800502a:	bf00      	nop
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005032:	b580      	push	{r7, lr}
 8005034:	b086      	sub	sp, #24
 8005036:	af00      	add	r7, sp, #0
 8005038:	4603      	mov	r3, r0
 800503a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800503c:	2301      	movs	r3, #1
 800503e:	617b      	str	r3, [r7, #20]
 8005040:	2300      	movs	r3, #0
 8005042:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005044:	79fb      	ldrb	r3, [r7, #7]
 8005046:	461a      	mov	r2, r3
 8005048:	6939      	ldr	r1, [r7, #16]
 800504a:	6978      	ldr	r0, [r7, #20]
 800504c:	f7ff ff79 	bl	8004f42 <xQueueGenericCreate>
 8005050:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f7ff ffd3 	bl	8004ffe <prvInitialiseMutex>

		return xNewQueue;
 8005058:	68fb      	ldr	r3, [r7, #12]
	}
 800505a:	4618      	mov	r0, r3
 800505c:	3718      	adds	r7, #24
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005062:	b580      	push	{r7, lr}
 8005064:	b088      	sub	sp, #32
 8005066:	af02      	add	r7, sp, #8
 8005068:	4603      	mov	r3, r0
 800506a:	6039      	str	r1, [r7, #0]
 800506c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800506e:	2301      	movs	r3, #1
 8005070:	617b      	str	r3, [r7, #20]
 8005072:	2300      	movs	r3, #0
 8005074:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005076:	79fb      	ldrb	r3, [r7, #7]
 8005078:	9300      	str	r3, [sp, #0]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2200      	movs	r2, #0
 800507e:	6939      	ldr	r1, [r7, #16]
 8005080:	6978      	ldr	r0, [r7, #20]
 8005082:	f7ff fee1 	bl	8004e48 <xQueueGenericCreateStatic>
 8005086:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f7ff ffb8 	bl	8004ffe <prvInitialiseMutex>

		return xNewQueue;
 800508e:	68fb      	ldr	r3, [r7, #12]
	}
 8005090:	4618      	mov	r0, r3
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005098:	b590      	push	{r4, r7, lr}
 800509a:	b087      	sub	sp, #28
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10b      	bne.n	80050c2 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80050aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ae:	f383 8811 	msr	BASEPRI, r3
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	60fb      	str	r3, [r7, #12]
}
 80050bc:	bf00      	nop
 80050be:	bf00      	nop
 80050c0:	e7fd      	b.n	80050be <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	689c      	ldr	r4, [r3, #8]
 80050c6:	f001 fce7 	bl	8006a98 <xTaskGetCurrentTaskHandle>
 80050ca:	4603      	mov	r3, r0
 80050cc:	429c      	cmp	r4, r3
 80050ce:	d111      	bne.n	80050f4 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	1e5a      	subs	r2, r3, #1
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d105      	bne.n	80050ee <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80050e2:	2300      	movs	r3, #0
 80050e4:	2200      	movs	r2, #0
 80050e6:	2100      	movs	r1, #0
 80050e8:	6938      	ldr	r0, [r7, #16]
 80050ea:	f000 f841 	bl	8005170 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80050ee:	2301      	movs	r3, #1
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	e001      	b.n	80050f8 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80050f4:	2300      	movs	r3, #0
 80050f6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80050f8:	697b      	ldr	r3, [r7, #20]
	}
 80050fa:	4618      	mov	r0, r3
 80050fc:	371c      	adds	r7, #28
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd90      	pop	{r4, r7, pc}

08005102 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005102:	b590      	push	{r4, r7, lr}
 8005104:	b087      	sub	sp, #28
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
 800510a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10b      	bne.n	800512e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8005116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800511a:	f383 8811 	msr	BASEPRI, r3
 800511e:	f3bf 8f6f 	isb	sy
 8005122:	f3bf 8f4f 	dsb	sy
 8005126:	60fb      	str	r3, [r7, #12]
}
 8005128:	bf00      	nop
 800512a:	bf00      	nop
 800512c:	e7fd      	b.n	800512a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	689c      	ldr	r4, [r3, #8]
 8005132:	f001 fcb1 	bl	8006a98 <xTaskGetCurrentTaskHandle>
 8005136:	4603      	mov	r3, r0
 8005138:	429c      	cmp	r4, r3
 800513a:	d107      	bne.n	800514c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	1c5a      	adds	r2, r3, #1
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005146:	2301      	movs	r3, #1
 8005148:	617b      	str	r3, [r7, #20]
 800514a:	e00c      	b.n	8005166 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800514c:	6839      	ldr	r1, [r7, #0]
 800514e:	6938      	ldr	r0, [r7, #16]
 8005150:	f000 fa90 	bl	8005674 <xQueueSemaphoreTake>
 8005154:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d004      	beq.n	8005166 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005166:	697b      	ldr	r3, [r7, #20]
	}
 8005168:	4618      	mov	r0, r3
 800516a:	371c      	adds	r7, #28
 800516c:	46bd      	mov	sp, r7
 800516e:	bd90      	pop	{r4, r7, pc}

08005170 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b08e      	sub	sp, #56	@ 0x38
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
 800517c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800517e:	2300      	movs	r3, #0
 8005180:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10b      	bne.n	80051a4 <xQueueGenericSend+0x34>
	__asm volatile
 800518c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005190:	f383 8811 	msr	BASEPRI, r3
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800519e:	bf00      	nop
 80051a0:	bf00      	nop
 80051a2:	e7fd      	b.n	80051a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d103      	bne.n	80051b2 <xQueueGenericSend+0x42>
 80051aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <xQueueGenericSend+0x46>
 80051b2:	2301      	movs	r3, #1
 80051b4:	e000      	b.n	80051b8 <xQueueGenericSend+0x48>
 80051b6:	2300      	movs	r3, #0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10b      	bne.n	80051d4 <xQueueGenericSend+0x64>
	__asm volatile
 80051bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c0:	f383 8811 	msr	BASEPRI, r3
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	f3bf 8f4f 	dsb	sy
 80051cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80051ce:	bf00      	nop
 80051d0:	bf00      	nop
 80051d2:	e7fd      	b.n	80051d0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d103      	bne.n	80051e2 <xQueueGenericSend+0x72>
 80051da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d101      	bne.n	80051e6 <xQueueGenericSend+0x76>
 80051e2:	2301      	movs	r3, #1
 80051e4:	e000      	b.n	80051e8 <xQueueGenericSend+0x78>
 80051e6:	2300      	movs	r3, #0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10b      	bne.n	8005204 <xQueueGenericSend+0x94>
	__asm volatile
 80051ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f0:	f383 8811 	msr	BASEPRI, r3
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	f3bf 8f4f 	dsb	sy
 80051fc:	623b      	str	r3, [r7, #32]
}
 80051fe:	bf00      	nop
 8005200:	bf00      	nop
 8005202:	e7fd      	b.n	8005200 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005204:	f001 fc58 	bl	8006ab8 <xTaskGetSchedulerState>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d102      	bne.n	8005214 <xQueueGenericSend+0xa4>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d101      	bne.n	8005218 <xQueueGenericSend+0xa8>
 8005214:	2301      	movs	r3, #1
 8005216:	e000      	b.n	800521a <xQueueGenericSend+0xaa>
 8005218:	2300      	movs	r3, #0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10b      	bne.n	8005236 <xQueueGenericSend+0xc6>
	__asm volatile
 800521e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	61fb      	str	r3, [r7, #28]
}
 8005230:	bf00      	nop
 8005232:	bf00      	nop
 8005234:	e7fd      	b.n	8005232 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005236:	f002 fae7 	bl	8007808 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800523a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800523e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005242:	429a      	cmp	r2, r3
 8005244:	d302      	bcc.n	800524c <xQueueGenericSend+0xdc>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b02      	cmp	r3, #2
 800524a:	d129      	bne.n	80052a0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	68b9      	ldr	r1, [r7, #8]
 8005250:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005252:	f000 fbb9 	bl	80059c8 <prvCopyDataToQueue>
 8005256:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800525a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525c:	2b00      	cmp	r3, #0
 800525e:	d010      	beq.n	8005282 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005262:	3324      	adds	r3, #36	@ 0x24
 8005264:	4618      	mov	r0, r3
 8005266:	f001 f9ed 	bl	8006644 <xTaskRemoveFromEventList>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d013      	beq.n	8005298 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005270:	4b3f      	ldr	r3, [pc, #252]	@ (8005370 <xQueueGenericSend+0x200>)
 8005272:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005276:	601a      	str	r2, [r3, #0]
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	f3bf 8f6f 	isb	sy
 8005280:	e00a      	b.n	8005298 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005284:	2b00      	cmp	r3, #0
 8005286:	d007      	beq.n	8005298 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005288:	4b39      	ldr	r3, [pc, #228]	@ (8005370 <xQueueGenericSend+0x200>)
 800528a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005298:	f002 fae8 	bl	800786c <vPortExitCritical>
				return pdPASS;
 800529c:	2301      	movs	r3, #1
 800529e:	e063      	b.n	8005368 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d103      	bne.n	80052ae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052a6:	f002 fae1 	bl	800786c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80052aa:	2300      	movs	r3, #0
 80052ac:	e05c      	b.n	8005368 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d106      	bne.n	80052c2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052b4:	f107 0314 	add.w	r3, r7, #20
 80052b8:	4618      	mov	r0, r3
 80052ba:	f001 fa8b 	bl	80067d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052be:	2301      	movs	r3, #1
 80052c0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052c2:	f002 fad3 	bl	800786c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052c6:	f000 ff51 	bl	800616c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052ca:	f002 fa9d 	bl	8007808 <vPortEnterCritical>
 80052ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052d4:	b25b      	sxtb	r3, r3
 80052d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052da:	d103      	bne.n	80052e4 <xQueueGenericSend+0x174>
 80052dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052ea:	b25b      	sxtb	r3, r3
 80052ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f0:	d103      	bne.n	80052fa <xQueueGenericSend+0x18a>
 80052f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052fa:	f002 fab7 	bl	800786c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052fe:	1d3a      	adds	r2, r7, #4
 8005300:	f107 0314 	add.w	r3, r7, #20
 8005304:	4611      	mov	r1, r2
 8005306:	4618      	mov	r0, r3
 8005308:	f001 fa7a 	bl	8006800 <xTaskCheckForTimeOut>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d124      	bne.n	800535c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005312:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005314:	f000 fc50 	bl	8005bb8 <prvIsQueueFull>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d018      	beq.n	8005350 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800531e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005320:	3310      	adds	r3, #16
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	4611      	mov	r1, r2
 8005326:	4618      	mov	r0, r3
 8005328:	f001 f8fc 	bl	8006524 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800532c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800532e:	f000 fbdb 	bl	8005ae8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005332:	f000 ff29 	bl	8006188 <xTaskResumeAll>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	f47f af7c 	bne.w	8005236 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800533e:	4b0c      	ldr	r3, [pc, #48]	@ (8005370 <xQueueGenericSend+0x200>)
 8005340:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	f3bf 8f4f 	dsb	sy
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	e772      	b.n	8005236 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005350:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005352:	f000 fbc9 	bl	8005ae8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005356:	f000 ff17 	bl	8006188 <xTaskResumeAll>
 800535a:	e76c      	b.n	8005236 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800535c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800535e:	f000 fbc3 	bl	8005ae8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005362:	f000 ff11 	bl	8006188 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005366:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005368:	4618      	mov	r0, r3
 800536a:	3738      	adds	r7, #56	@ 0x38
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	e000ed04 	.word	0xe000ed04

08005374 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b090      	sub	sp, #64	@ 0x40
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
 8005380:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10b      	bne.n	80053a4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800538c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005390:	f383 8811 	msr	BASEPRI, r3
 8005394:	f3bf 8f6f 	isb	sy
 8005398:	f3bf 8f4f 	dsb	sy
 800539c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800539e:	bf00      	nop
 80053a0:	bf00      	nop
 80053a2:	e7fd      	b.n	80053a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d103      	bne.n	80053b2 <xQueueGenericSendFromISR+0x3e>
 80053aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <xQueueGenericSendFromISR+0x42>
 80053b2:	2301      	movs	r3, #1
 80053b4:	e000      	b.n	80053b8 <xQueueGenericSendFromISR+0x44>
 80053b6:	2300      	movs	r3, #0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10b      	bne.n	80053d4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80053bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c0:	f383 8811 	msr	BASEPRI, r3
 80053c4:	f3bf 8f6f 	isb	sy
 80053c8:	f3bf 8f4f 	dsb	sy
 80053cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80053ce:	bf00      	nop
 80053d0:	bf00      	nop
 80053d2:	e7fd      	b.n	80053d0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d103      	bne.n	80053e2 <xQueueGenericSendFromISR+0x6e>
 80053da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d101      	bne.n	80053e6 <xQueueGenericSendFromISR+0x72>
 80053e2:	2301      	movs	r3, #1
 80053e4:	e000      	b.n	80053e8 <xQueueGenericSendFromISR+0x74>
 80053e6:	2300      	movs	r3, #0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10b      	bne.n	8005404 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80053ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f0:	f383 8811 	msr	BASEPRI, r3
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	f3bf 8f4f 	dsb	sy
 80053fc:	623b      	str	r3, [r7, #32]
}
 80053fe:	bf00      	nop
 8005400:	bf00      	nop
 8005402:	e7fd      	b.n	8005400 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005404:	f002 fae0 	bl	80079c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005408:	f3ef 8211 	mrs	r2, BASEPRI
 800540c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005410:	f383 8811 	msr	BASEPRI, r3
 8005414:	f3bf 8f6f 	isb	sy
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	61fa      	str	r2, [r7, #28]
 800541e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005420:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005422:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005426:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800542a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800542c:	429a      	cmp	r2, r3
 800542e:	d302      	bcc.n	8005436 <xQueueGenericSendFromISR+0xc2>
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	2b02      	cmp	r3, #2
 8005434:	d12f      	bne.n	8005496 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005438:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800543c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005444:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005446:	683a      	ldr	r2, [r7, #0]
 8005448:	68b9      	ldr	r1, [r7, #8]
 800544a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800544c:	f000 fabc 	bl	80059c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005450:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005458:	d112      	bne.n	8005480 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800545a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800545c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800545e:	2b00      	cmp	r3, #0
 8005460:	d016      	beq.n	8005490 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005464:	3324      	adds	r3, #36	@ 0x24
 8005466:	4618      	mov	r0, r3
 8005468:	f001 f8ec 	bl	8006644 <xTaskRemoveFromEventList>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00e      	beq.n	8005490 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00b      	beq.n	8005490 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	601a      	str	r2, [r3, #0]
 800547e:	e007      	b.n	8005490 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005480:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005484:	3301      	adds	r3, #1
 8005486:	b2db      	uxtb	r3, r3
 8005488:	b25a      	sxtb	r2, r3
 800548a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800548c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005490:	2301      	movs	r3, #1
 8005492:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005494:	e001      	b.n	800549a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005496:	2300      	movs	r3, #0
 8005498:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800549a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800549c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80054a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3740      	adds	r7, #64	@ 0x40
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b08c      	sub	sp, #48	@ 0x30
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80054bc:	2300      	movs	r3, #0
 80054be:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80054c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10b      	bne.n	80054e2 <xQueueReceive+0x32>
	__asm volatile
 80054ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	623b      	str	r3, [r7, #32]
}
 80054dc:	bf00      	nop
 80054de:	bf00      	nop
 80054e0:	e7fd      	b.n	80054de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d103      	bne.n	80054f0 <xQueueReceive+0x40>
 80054e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d101      	bne.n	80054f4 <xQueueReceive+0x44>
 80054f0:	2301      	movs	r3, #1
 80054f2:	e000      	b.n	80054f6 <xQueueReceive+0x46>
 80054f4:	2300      	movs	r3, #0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10b      	bne.n	8005512 <xQueueReceive+0x62>
	__asm volatile
 80054fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054fe:	f383 8811 	msr	BASEPRI, r3
 8005502:	f3bf 8f6f 	isb	sy
 8005506:	f3bf 8f4f 	dsb	sy
 800550a:	61fb      	str	r3, [r7, #28]
}
 800550c:	bf00      	nop
 800550e:	bf00      	nop
 8005510:	e7fd      	b.n	800550e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005512:	f001 fad1 	bl	8006ab8 <xTaskGetSchedulerState>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d102      	bne.n	8005522 <xQueueReceive+0x72>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <xQueueReceive+0x76>
 8005522:	2301      	movs	r3, #1
 8005524:	e000      	b.n	8005528 <xQueueReceive+0x78>
 8005526:	2300      	movs	r3, #0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10b      	bne.n	8005544 <xQueueReceive+0x94>
	__asm volatile
 800552c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005530:	f383 8811 	msr	BASEPRI, r3
 8005534:	f3bf 8f6f 	isb	sy
 8005538:	f3bf 8f4f 	dsb	sy
 800553c:	61bb      	str	r3, [r7, #24]
}
 800553e:	bf00      	nop
 8005540:	bf00      	nop
 8005542:	e7fd      	b.n	8005540 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005544:	f002 f960 	bl	8007808 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800554a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800554c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800554e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005550:	2b00      	cmp	r3, #0
 8005552:	d01f      	beq.n	8005594 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005554:	68b9      	ldr	r1, [r7, #8]
 8005556:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005558:	f000 faa0 	bl	8005a9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800555c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555e:	1e5a      	subs	r2, r3, #1
 8005560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005562:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00f      	beq.n	800558c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800556c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800556e:	3310      	adds	r3, #16
 8005570:	4618      	mov	r0, r3
 8005572:	f001 f867 	bl	8006644 <xTaskRemoveFromEventList>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d007      	beq.n	800558c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800557c:	4b3c      	ldr	r3, [pc, #240]	@ (8005670 <xQueueReceive+0x1c0>)
 800557e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	f3bf 8f4f 	dsb	sy
 8005588:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800558c:	f002 f96e 	bl	800786c <vPortExitCritical>
				return pdPASS;
 8005590:	2301      	movs	r3, #1
 8005592:	e069      	b.n	8005668 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d103      	bne.n	80055a2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800559a:	f002 f967 	bl	800786c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800559e:	2300      	movs	r3, #0
 80055a0:	e062      	b.n	8005668 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d106      	bne.n	80055b6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055a8:	f107 0310 	add.w	r3, r7, #16
 80055ac:	4618      	mov	r0, r3
 80055ae:	f001 f911 	bl	80067d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055b2:	2301      	movs	r3, #1
 80055b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055b6:	f002 f959 	bl	800786c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055ba:	f000 fdd7 	bl	800616c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055be:	f002 f923 	bl	8007808 <vPortEnterCritical>
 80055c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055c8:	b25b      	sxtb	r3, r3
 80055ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ce:	d103      	bne.n	80055d8 <xQueueReceive+0x128>
 80055d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055de:	b25b      	sxtb	r3, r3
 80055e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e4:	d103      	bne.n	80055ee <xQueueReceive+0x13e>
 80055e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055ee:	f002 f93d 	bl	800786c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055f2:	1d3a      	adds	r2, r7, #4
 80055f4:	f107 0310 	add.w	r3, r7, #16
 80055f8:	4611      	mov	r1, r2
 80055fa:	4618      	mov	r0, r3
 80055fc:	f001 f900 	bl	8006800 <xTaskCheckForTimeOut>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d123      	bne.n	800564e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005606:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005608:	f000 fac0 	bl	8005b8c <prvIsQueueEmpty>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d017      	beq.n	8005642 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005614:	3324      	adds	r3, #36	@ 0x24
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	4611      	mov	r1, r2
 800561a:	4618      	mov	r0, r3
 800561c:	f000 ff82 	bl	8006524 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005620:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005622:	f000 fa61 	bl	8005ae8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005626:	f000 fdaf 	bl	8006188 <xTaskResumeAll>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d189      	bne.n	8005544 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005630:	4b0f      	ldr	r3, [pc, #60]	@ (8005670 <xQueueReceive+0x1c0>)
 8005632:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005636:	601a      	str	r2, [r3, #0]
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	e780      	b.n	8005544 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005642:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005644:	f000 fa50 	bl	8005ae8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005648:	f000 fd9e 	bl	8006188 <xTaskResumeAll>
 800564c:	e77a      	b.n	8005544 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800564e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005650:	f000 fa4a 	bl	8005ae8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005654:	f000 fd98 	bl	8006188 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005658:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800565a:	f000 fa97 	bl	8005b8c <prvIsQueueEmpty>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	f43f af6f 	beq.w	8005544 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005666:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005668:	4618      	mov	r0, r3
 800566a:	3730      	adds	r7, #48	@ 0x30
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	e000ed04 	.word	0xe000ed04

08005674 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b08e      	sub	sp, #56	@ 0x38
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800567e:	2300      	movs	r3, #0
 8005680:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005686:	2300      	movs	r3, #0
 8005688:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800568a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10b      	bne.n	80056a8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	623b      	str	r3, [r7, #32]
}
 80056a2:	bf00      	nop
 80056a4:	bf00      	nop
 80056a6:	e7fd      	b.n	80056a4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80056a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00b      	beq.n	80056c8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80056b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b4:	f383 8811 	msr	BASEPRI, r3
 80056b8:	f3bf 8f6f 	isb	sy
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	61fb      	str	r3, [r7, #28]
}
 80056c2:	bf00      	nop
 80056c4:	bf00      	nop
 80056c6:	e7fd      	b.n	80056c4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056c8:	f001 f9f6 	bl	8006ab8 <xTaskGetSchedulerState>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d102      	bne.n	80056d8 <xQueueSemaphoreTake+0x64>
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <xQueueSemaphoreTake+0x68>
 80056d8:	2301      	movs	r3, #1
 80056da:	e000      	b.n	80056de <xQueueSemaphoreTake+0x6a>
 80056dc:	2300      	movs	r3, #0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d10b      	bne.n	80056fa <xQueueSemaphoreTake+0x86>
	__asm volatile
 80056e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e6:	f383 8811 	msr	BASEPRI, r3
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	61bb      	str	r3, [r7, #24]
}
 80056f4:	bf00      	nop
 80056f6:	bf00      	nop
 80056f8:	e7fd      	b.n	80056f6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056fa:	f002 f885 	bl	8007808 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80056fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005702:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005706:	2b00      	cmp	r3, #0
 8005708:	d024      	beq.n	8005754 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800570a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800570c:	1e5a      	subs	r2, r3, #1
 800570e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005710:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d104      	bne.n	8005724 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800571a:	f001 fb5f 	bl	8006ddc <pvTaskIncrementMutexHeldCount>
 800571e:	4602      	mov	r2, r0
 8005720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005722:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00f      	beq.n	800574c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800572c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800572e:	3310      	adds	r3, #16
 8005730:	4618      	mov	r0, r3
 8005732:	f000 ff87 	bl	8006644 <xTaskRemoveFromEventList>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d007      	beq.n	800574c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800573c:	4b54      	ldr	r3, [pc, #336]	@ (8005890 <xQueueSemaphoreTake+0x21c>)
 800573e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	f3bf 8f4f 	dsb	sy
 8005748:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800574c:	f002 f88e 	bl	800786c <vPortExitCritical>
				return pdPASS;
 8005750:	2301      	movs	r3, #1
 8005752:	e098      	b.n	8005886 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d112      	bne.n	8005780 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800575a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00b      	beq.n	8005778 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005764:	f383 8811 	msr	BASEPRI, r3
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	617b      	str	r3, [r7, #20]
}
 8005772:	bf00      	nop
 8005774:	bf00      	nop
 8005776:	e7fd      	b.n	8005774 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005778:	f002 f878 	bl	800786c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800577c:	2300      	movs	r3, #0
 800577e:	e082      	b.n	8005886 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005782:	2b00      	cmp	r3, #0
 8005784:	d106      	bne.n	8005794 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005786:	f107 030c 	add.w	r3, r7, #12
 800578a:	4618      	mov	r0, r3
 800578c:	f001 f822 	bl	80067d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005790:	2301      	movs	r3, #1
 8005792:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005794:	f002 f86a 	bl	800786c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005798:	f000 fce8 	bl	800616c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800579c:	f002 f834 	bl	8007808 <vPortEnterCritical>
 80057a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057a2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80057a6:	b25b      	sxtb	r3, r3
 80057a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ac:	d103      	bne.n	80057b6 <xQueueSemaphoreTake+0x142>
 80057ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057bc:	b25b      	sxtb	r3, r3
 80057be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c2:	d103      	bne.n	80057cc <xQueueSemaphoreTake+0x158>
 80057c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057cc:	f002 f84e 	bl	800786c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057d0:	463a      	mov	r2, r7
 80057d2:	f107 030c 	add.w	r3, r7, #12
 80057d6:	4611      	mov	r1, r2
 80057d8:	4618      	mov	r0, r3
 80057da:	f001 f811 	bl	8006800 <xTaskCheckForTimeOut>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d132      	bne.n	800584a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80057e6:	f000 f9d1 	bl	8005b8c <prvIsQueueEmpty>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d026      	beq.n	800583e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80057f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d109      	bne.n	800580c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80057f8:	f002 f806 	bl	8007808 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80057fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	4618      	mov	r0, r3
 8005802:	f001 f977 	bl	8006af4 <xTaskPriorityInherit>
 8005806:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005808:	f002 f830 	bl	800786c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800580c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800580e:	3324      	adds	r3, #36	@ 0x24
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	4611      	mov	r1, r2
 8005814:	4618      	mov	r0, r3
 8005816:	f000 fe85 	bl	8006524 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800581a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800581c:	f000 f964 	bl	8005ae8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005820:	f000 fcb2 	bl	8006188 <xTaskResumeAll>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	f47f af67 	bne.w	80056fa <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800582c:	4b18      	ldr	r3, [pc, #96]	@ (8005890 <xQueueSemaphoreTake+0x21c>)
 800582e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005832:	601a      	str	r2, [r3, #0]
 8005834:	f3bf 8f4f 	dsb	sy
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	e75d      	b.n	80056fa <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800583e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005840:	f000 f952 	bl	8005ae8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005844:	f000 fca0 	bl	8006188 <xTaskResumeAll>
 8005848:	e757      	b.n	80056fa <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800584a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800584c:	f000 f94c 	bl	8005ae8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005850:	f000 fc9a 	bl	8006188 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005854:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005856:	f000 f999 	bl	8005b8c <prvIsQueueEmpty>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	f43f af4c 	beq.w	80056fa <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00d      	beq.n	8005884 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005868:	f001 ffce 	bl	8007808 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800586c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800586e:	f000 f893 	bl	8005998 <prvGetDisinheritPriorityAfterTimeout>
 8005872:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800587a:	4618      	mov	r0, r3
 800587c:	f001 fa12 	bl	8006ca4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005880:	f001 fff4 	bl	800786c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005884:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005886:	4618      	mov	r0, r3
 8005888:	3738      	adds	r7, #56	@ 0x38
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	e000ed04 	.word	0xe000ed04

08005894 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b08e      	sub	sp, #56	@ 0x38
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80058a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10b      	bne.n	80058c2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80058aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ae:	f383 8811 	msr	BASEPRI, r3
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	623b      	str	r3, [r7, #32]
}
 80058bc:	bf00      	nop
 80058be:	bf00      	nop
 80058c0:	e7fd      	b.n	80058be <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d103      	bne.n	80058d0 <xQueueReceiveFromISR+0x3c>
 80058c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d101      	bne.n	80058d4 <xQueueReceiveFromISR+0x40>
 80058d0:	2301      	movs	r3, #1
 80058d2:	e000      	b.n	80058d6 <xQueueReceiveFromISR+0x42>
 80058d4:	2300      	movs	r3, #0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10b      	bne.n	80058f2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80058da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058de:	f383 8811 	msr	BASEPRI, r3
 80058e2:	f3bf 8f6f 	isb	sy
 80058e6:	f3bf 8f4f 	dsb	sy
 80058ea:	61fb      	str	r3, [r7, #28]
}
 80058ec:	bf00      	nop
 80058ee:	bf00      	nop
 80058f0:	e7fd      	b.n	80058ee <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058f2:	f002 f869 	bl	80079c8 <vPortValidateInterruptPriority>
	__asm volatile
 80058f6:	f3ef 8211 	mrs	r2, BASEPRI
 80058fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058fe:	f383 8811 	msr	BASEPRI, r3
 8005902:	f3bf 8f6f 	isb	sy
 8005906:	f3bf 8f4f 	dsb	sy
 800590a:	61ba      	str	r2, [r7, #24]
 800590c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800590e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005910:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005916:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800591a:	2b00      	cmp	r3, #0
 800591c:	d02f      	beq.n	800597e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800591e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005920:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005924:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005928:	68b9      	ldr	r1, [r7, #8]
 800592a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800592c:	f000 f8b6 	bl	8005a9c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005932:	1e5a      	subs	r2, r3, #1
 8005934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005936:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005938:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800593c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005940:	d112      	bne.n	8005968 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d016      	beq.n	8005978 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800594a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800594c:	3310      	adds	r3, #16
 800594e:	4618      	mov	r0, r3
 8005950:	f000 fe78 	bl	8006644 <xTaskRemoveFromEventList>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00e      	beq.n	8005978 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00b      	beq.n	8005978 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	601a      	str	r2, [r3, #0]
 8005966:	e007      	b.n	8005978 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005968:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800596c:	3301      	adds	r3, #1
 800596e:	b2db      	uxtb	r3, r3
 8005970:	b25a      	sxtb	r2, r3
 8005972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005974:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005978:	2301      	movs	r3, #1
 800597a:	637b      	str	r3, [r7, #52]	@ 0x34
 800597c:	e001      	b.n	8005982 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800597e:	2300      	movs	r3, #0
 8005980:	637b      	str	r3, [r7, #52]	@ 0x34
 8005982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005984:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	f383 8811 	msr	BASEPRI, r3
}
 800598c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800598e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005990:	4618      	mov	r0, r3
 8005992:	3738      	adds	r7, #56	@ 0x38
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d006      	beq.n	80059b6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80059b2:	60fb      	str	r3, [r7, #12]
 80059b4:	e001      	b.n	80059ba <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80059b6:	2300      	movs	r3, #0
 80059b8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80059ba:	68fb      	ldr	r3, [r7, #12]
	}
 80059bc:	4618      	mov	r0, r3
 80059be:	3714      	adds	r7, #20
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80059d4:	2300      	movs	r3, #0
 80059d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10d      	bne.n	8005a02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d14d      	bne.n	8005a8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	4618      	mov	r0, r3
 80059f4:	f001 f8e6 	bl	8006bc4 <xTaskPriorityDisinherit>
 80059f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	609a      	str	r2, [r3, #8]
 8005a00:	e043      	b.n	8005a8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d119      	bne.n	8005a3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6858      	ldr	r0, [r3, #4]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a10:	461a      	mov	r2, r3
 8005a12:	68b9      	ldr	r1, [r7, #8]
 8005a14:	f002 fa8c 	bl	8007f30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a20:	441a      	add	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	685a      	ldr	r2, [r3, #4]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d32b      	bcc.n	8005a8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	605a      	str	r2, [r3, #4]
 8005a3a:	e026      	b.n	8005a8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	68d8      	ldr	r0, [r3, #12]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a44:	461a      	mov	r2, r3
 8005a46:	68b9      	ldr	r1, [r7, #8]
 8005a48:	f002 fa72 	bl	8007f30 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	68da      	ldr	r2, [r3, #12]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a54:	425b      	negs	r3, r3
 8005a56:	441a      	add	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	68da      	ldr	r2, [r3, #12]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d207      	bcs.n	8005a78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	689a      	ldr	r2, [r3, #8]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a70:	425b      	negs	r3, r3
 8005a72:	441a      	add	r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d105      	bne.n	8005a8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d002      	beq.n	8005a8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	3b01      	subs	r3, #1
 8005a88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	1c5a      	adds	r2, r3, #1
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005a92:	697b      	ldr	r3, [r7, #20]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3718      	adds	r7, #24
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d018      	beq.n	8005ae0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68da      	ldr	r2, [r3, #12]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab6:	441a      	add	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68da      	ldr	r2, [r3, #12]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d303      	bcc.n	8005ad0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	68d9      	ldr	r1, [r3, #12]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad8:	461a      	mov	r2, r3
 8005ada:	6838      	ldr	r0, [r7, #0]
 8005adc:	f002 fa28 	bl	8007f30 <memcpy>
	}
}
 8005ae0:	bf00      	nop
 8005ae2:	3708      	adds	r7, #8
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005af0:	f001 fe8a 	bl	8007808 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005afa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005afc:	e011      	b.n	8005b22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d012      	beq.n	8005b2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	3324      	adds	r3, #36	@ 0x24
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 fd9a 	bl	8006644 <xTaskRemoveFromEventList>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005b16:	f000 fed7 	bl	80068c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005b1a:	7bfb      	ldrb	r3, [r7, #15]
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	dce9      	bgt.n	8005afe <prvUnlockQueue+0x16>
 8005b2a:	e000      	b.n	8005b2e <prvUnlockQueue+0x46>
					break;
 8005b2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	22ff      	movs	r2, #255	@ 0xff
 8005b32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005b36:	f001 fe99 	bl	800786c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005b3a:	f001 fe65 	bl	8007808 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b46:	e011      	b.n	8005b6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d012      	beq.n	8005b76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	3310      	adds	r3, #16
 8005b54:	4618      	mov	r0, r3
 8005b56:	f000 fd75 	bl	8006644 <xTaskRemoveFromEventList>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d001      	beq.n	8005b64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005b60:	f000 feb2 	bl	80068c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005b64:	7bbb      	ldrb	r3, [r7, #14]
 8005b66:	3b01      	subs	r3, #1
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	dce9      	bgt.n	8005b48 <prvUnlockQueue+0x60>
 8005b74:	e000      	b.n	8005b78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005b76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	22ff      	movs	r2, #255	@ 0xff
 8005b7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005b80:	f001 fe74 	bl	800786c <vPortExitCritical>
}
 8005b84:	bf00      	nop
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b94:	f001 fe38 	bl	8007808 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d102      	bne.n	8005ba6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	60fb      	str	r3, [r7, #12]
 8005ba4:	e001      	b.n	8005baa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005baa:	f001 fe5f 	bl	800786c <vPortExitCritical>

	return xReturn;
 8005bae:	68fb      	ldr	r3, [r7, #12]
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3710      	adds	r7, #16
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005bc0:	f001 fe22 	bl	8007808 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d102      	bne.n	8005bd6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	60fb      	str	r3, [r7, #12]
 8005bd4:	e001      	b.n	8005bda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005bda:	f001 fe47 	bl	800786c <vPortExitCritical>

	return xReturn;
 8005bde:	68fb      	ldr	r3, [r7, #12]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	60fb      	str	r3, [r7, #12]
 8005bf6:	e014      	b.n	8005c22 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005bf8:	4a0f      	ldr	r2, [pc, #60]	@ (8005c38 <vQueueAddToRegistry+0x50>)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10b      	bne.n	8005c1c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005c04:	490c      	ldr	r1, [pc, #48]	@ (8005c38 <vQueueAddToRegistry+0x50>)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8005c38 <vQueueAddToRegistry+0x50>)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	00db      	lsls	r3, r3, #3
 8005c14:	4413      	add	r3, r2
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005c1a:	e006      	b.n	8005c2a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	60fb      	str	r3, [r7, #12]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2b07      	cmp	r3, #7
 8005c26:	d9e7      	bls.n	8005bf8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005c28:	bf00      	nop
 8005c2a:	bf00      	nop
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	20000d78 	.word	0x20000d78

08005c3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005c4c:	f001 fddc 	bl	8007808 <vPortEnterCritical>
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c56:	b25b      	sxtb	r3, r3
 8005c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c5c:	d103      	bne.n	8005c66 <vQueueWaitForMessageRestricted+0x2a>
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c6c:	b25b      	sxtb	r3, r3
 8005c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c72:	d103      	bne.n	8005c7c <vQueueWaitForMessageRestricted+0x40>
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c7c:	f001 fdf6 	bl	800786c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d106      	bne.n	8005c96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	3324      	adds	r3, #36	@ 0x24
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	68b9      	ldr	r1, [r7, #8]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f000 fcab 	bl	80065ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005c96:	6978      	ldr	r0, [r7, #20]
 8005c98:	f7ff ff26 	bl	8005ae8 <prvUnlockQueue>
	}
 8005c9c:	bf00      	nop
 8005c9e:	3718      	adds	r7, #24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b08e      	sub	sp, #56	@ 0x38
 8005ca8:	af04      	add	r7, sp, #16
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
 8005cb0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10b      	bne.n	8005cd0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cbc:	f383 8811 	msr	BASEPRI, r3
 8005cc0:	f3bf 8f6f 	isb	sy
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	623b      	str	r3, [r7, #32]
}
 8005cca:	bf00      	nop
 8005ccc:	bf00      	nop
 8005cce:	e7fd      	b.n	8005ccc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10b      	bne.n	8005cee <xTaskCreateStatic+0x4a>
	__asm volatile
 8005cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cda:	f383 8811 	msr	BASEPRI, r3
 8005cde:	f3bf 8f6f 	isb	sy
 8005ce2:	f3bf 8f4f 	dsb	sy
 8005ce6:	61fb      	str	r3, [r7, #28]
}
 8005ce8:	bf00      	nop
 8005cea:	bf00      	nop
 8005cec:	e7fd      	b.n	8005cea <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005cee:	23a8      	movs	r3, #168	@ 0xa8
 8005cf0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	2ba8      	cmp	r3, #168	@ 0xa8
 8005cf6:	d00b      	beq.n	8005d10 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cfc:	f383 8811 	msr	BASEPRI, r3
 8005d00:	f3bf 8f6f 	isb	sy
 8005d04:	f3bf 8f4f 	dsb	sy
 8005d08:	61bb      	str	r3, [r7, #24]
}
 8005d0a:	bf00      	nop
 8005d0c:	bf00      	nop
 8005d0e:	e7fd      	b.n	8005d0c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005d10:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d01e      	beq.n	8005d56 <xTaskCreateStatic+0xb2>
 8005d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d01b      	beq.n	8005d56 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d20:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d26:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005d30:	2300      	movs	r3, #0
 8005d32:	9303      	str	r3, [sp, #12]
 8005d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d36:	9302      	str	r3, [sp, #8]
 8005d38:	f107 0314 	add.w	r3, r7, #20
 8005d3c:	9301      	str	r3, [sp, #4]
 8005d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	68b9      	ldr	r1, [r7, #8]
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f000 f851 	bl	8005df0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d4e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005d50:	f000 f8f6 	bl	8005f40 <prvAddNewTaskToReadyList>
 8005d54:	e001      	b.n	8005d5a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005d56:	2300      	movs	r3, #0
 8005d58:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005d5a:	697b      	ldr	r3, [r7, #20]
	}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3728      	adds	r7, #40	@ 0x28
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b08c      	sub	sp, #48	@ 0x30
 8005d68:	af04      	add	r7, sp, #16
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	603b      	str	r3, [r7, #0]
 8005d70:	4613      	mov	r3, r2
 8005d72:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005d74:	88fb      	ldrh	r3, [r7, #6]
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f001 fe67 	bl	8007a4c <pvPortMalloc>
 8005d7e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00e      	beq.n	8005da4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005d86:	20a8      	movs	r0, #168	@ 0xa8
 8005d88:	f001 fe60 	bl	8007a4c <pvPortMalloc>
 8005d8c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d003      	beq.n	8005d9c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	631a      	str	r2, [r3, #48]	@ 0x30
 8005d9a:	e005      	b.n	8005da8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005d9c:	6978      	ldr	r0, [r7, #20]
 8005d9e:	f001 ff23 	bl	8007be8 <vPortFree>
 8005da2:	e001      	b.n	8005da8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005da4:	2300      	movs	r3, #0
 8005da6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d017      	beq.n	8005dde <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005db6:	88fa      	ldrh	r2, [r7, #6]
 8005db8:	2300      	movs	r3, #0
 8005dba:	9303      	str	r3, [sp, #12]
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	9302      	str	r3, [sp, #8]
 8005dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dc2:	9301      	str	r3, [sp, #4]
 8005dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc6:	9300      	str	r3, [sp, #0]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	68b9      	ldr	r1, [r7, #8]
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f000 f80f 	bl	8005df0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005dd2:	69f8      	ldr	r0, [r7, #28]
 8005dd4:	f000 f8b4 	bl	8005f40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	61bb      	str	r3, [r7, #24]
 8005ddc:	e002      	b.n	8005de4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005dde:	f04f 33ff 	mov.w	r3, #4294967295
 8005de2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005de4:	69bb      	ldr	r3, [r7, #24]
	}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3720      	adds	r7, #32
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
	...

08005df0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b088      	sub	sp, #32
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
 8005dfc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e00:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	461a      	mov	r2, r3
 8005e08:	21a5      	movs	r1, #165	@ 0xa5
 8005e0a:	f002 f80d 	bl	8007e28 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	4413      	add	r3, r2
 8005e1e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	f023 0307 	bic.w	r3, r3, #7
 8005e26:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	f003 0307 	and.w	r3, r3, #7
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00b      	beq.n	8005e4a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e36:	f383 8811 	msr	BASEPRI, r3
 8005e3a:	f3bf 8f6f 	isb	sy
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	617b      	str	r3, [r7, #20]
}
 8005e44:	bf00      	nop
 8005e46:	bf00      	nop
 8005e48:	e7fd      	b.n	8005e46 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d01f      	beq.n	8005e90 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e50:	2300      	movs	r3, #0
 8005e52:	61fb      	str	r3, [r7, #28]
 8005e54:	e012      	b.n	8005e7c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	7819      	ldrb	r1, [r3, #0]
 8005e5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	4413      	add	r3, r2
 8005e64:	3334      	adds	r3, #52	@ 0x34
 8005e66:	460a      	mov	r2, r1
 8005e68:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	4413      	add	r3, r2
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d006      	beq.n	8005e84 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	61fb      	str	r3, [r7, #28]
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	2b0f      	cmp	r3, #15
 8005e80:	d9e9      	bls.n	8005e56 <prvInitialiseNewTask+0x66>
 8005e82:	e000      	b.n	8005e86 <prvInitialiseNewTask+0x96>
			{
				break;
 8005e84:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e8e:	e003      	b.n	8005e98 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e9a:	2b37      	cmp	r3, #55	@ 0x37
 8005e9c:	d901      	bls.n	8005ea2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005e9e:	2337      	movs	r3, #55	@ 0x37
 8005ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ea6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eaa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005eac:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb6:	3304      	adds	r3, #4
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7fe fec7 	bl	8004c4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec0:	3318      	adds	r3, #24
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7fe fec2 	bl	8004c4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ecc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005edc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef0:	3354      	adds	r3, #84	@ 0x54
 8005ef2:	224c      	movs	r2, #76	@ 0x4c
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f001 ff96 	bl	8007e28 <memset>
 8005efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005efe:	4a0d      	ldr	r2, [pc, #52]	@ (8005f34 <prvInitialiseNewTask+0x144>)
 8005f00:	659a      	str	r2, [r3, #88]	@ 0x58
 8005f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f04:	4a0c      	ldr	r2, [pc, #48]	@ (8005f38 <prvInitialiseNewTask+0x148>)
 8005f06:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f0a:	4a0c      	ldr	r2, [pc, #48]	@ (8005f3c <prvInitialiseNewTask+0x14c>)
 8005f0c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	68f9      	ldr	r1, [r7, #12]
 8005f12:	69b8      	ldr	r0, [r7, #24]
 8005f14:	f001 fb44 	bl	80075a0 <pxPortInitialiseStack>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f1c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d002      	beq.n	8005f2a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f2a:	bf00      	nop
 8005f2c:	3720      	adds	r7, #32
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	2000500c 	.word	0x2000500c
 8005f38:	20005074 	.word	0x20005074
 8005f3c:	200050dc 	.word	0x200050dc

08005f40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f48:	f001 fc5e 	bl	8007808 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005f4c:	4b2d      	ldr	r3, [pc, #180]	@ (8006004 <prvAddNewTaskToReadyList+0xc4>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3301      	adds	r3, #1
 8005f52:	4a2c      	ldr	r2, [pc, #176]	@ (8006004 <prvAddNewTaskToReadyList+0xc4>)
 8005f54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005f56:	4b2c      	ldr	r3, [pc, #176]	@ (8006008 <prvAddNewTaskToReadyList+0xc8>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d109      	bne.n	8005f72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005f5e:	4a2a      	ldr	r2, [pc, #168]	@ (8006008 <prvAddNewTaskToReadyList+0xc8>)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f64:	4b27      	ldr	r3, [pc, #156]	@ (8006004 <prvAddNewTaskToReadyList+0xc4>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d110      	bne.n	8005f8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005f6c:	f000 fcd0 	bl	8006910 <prvInitialiseTaskLists>
 8005f70:	e00d      	b.n	8005f8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005f72:	4b26      	ldr	r3, [pc, #152]	@ (800600c <prvAddNewTaskToReadyList+0xcc>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d109      	bne.n	8005f8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f7a:	4b23      	ldr	r3, [pc, #140]	@ (8006008 <prvAddNewTaskToReadyList+0xc8>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d802      	bhi.n	8005f8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005f88:	4a1f      	ldr	r2, [pc, #124]	@ (8006008 <prvAddNewTaskToReadyList+0xc8>)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005f8e:	4b20      	ldr	r3, [pc, #128]	@ (8006010 <prvAddNewTaskToReadyList+0xd0>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3301      	adds	r3, #1
 8005f94:	4a1e      	ldr	r2, [pc, #120]	@ (8006010 <prvAddNewTaskToReadyList+0xd0>)
 8005f96:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005f98:	4b1d      	ldr	r3, [pc, #116]	@ (8006010 <prvAddNewTaskToReadyList+0xd0>)
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8006014 <prvAddNewTaskToReadyList+0xd4>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d903      	bls.n	8005fb4 <prvAddNewTaskToReadyList+0x74>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb0:	4a18      	ldr	r2, [pc, #96]	@ (8006014 <prvAddNewTaskToReadyList+0xd4>)
 8005fb2:	6013      	str	r3, [r2, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fb8:	4613      	mov	r3, r2
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4413      	add	r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4a15      	ldr	r2, [pc, #84]	@ (8006018 <prvAddNewTaskToReadyList+0xd8>)
 8005fc2:	441a      	add	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	3304      	adds	r3, #4
 8005fc8:	4619      	mov	r1, r3
 8005fca:	4610      	mov	r0, r2
 8005fcc:	f7fe fe4b 	bl	8004c66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005fd0:	f001 fc4c 	bl	800786c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005fd4:	4b0d      	ldr	r3, [pc, #52]	@ (800600c <prvAddNewTaskToReadyList+0xcc>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00e      	beq.n	8005ffa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8006008 <prvAddNewTaskToReadyList+0xc8>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d207      	bcs.n	8005ffa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005fea:	4b0c      	ldr	r3, [pc, #48]	@ (800601c <prvAddNewTaskToReadyList+0xdc>)
 8005fec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ff0:	601a      	str	r2, [r3, #0]
 8005ff2:	f3bf 8f4f 	dsb	sy
 8005ff6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ffa:	bf00      	nop
 8005ffc:	3708      	adds	r7, #8
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	2000128c 	.word	0x2000128c
 8006008:	20000db8 	.word	0x20000db8
 800600c:	20001298 	.word	0x20001298
 8006010:	200012a8 	.word	0x200012a8
 8006014:	20001294 	.word	0x20001294
 8006018:	20000dbc 	.word	0x20000dbc
 800601c:	e000ed04 	.word	0xe000ed04

08006020 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006028:	2300      	movs	r3, #0
 800602a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d018      	beq.n	8006064 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006032:	4b14      	ldr	r3, [pc, #80]	@ (8006084 <vTaskDelay+0x64>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00b      	beq.n	8006052 <vTaskDelay+0x32>
	__asm volatile
 800603a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800603e:	f383 8811 	msr	BASEPRI, r3
 8006042:	f3bf 8f6f 	isb	sy
 8006046:	f3bf 8f4f 	dsb	sy
 800604a:	60bb      	str	r3, [r7, #8]
}
 800604c:	bf00      	nop
 800604e:	bf00      	nop
 8006050:	e7fd      	b.n	800604e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006052:	f000 f88b 	bl	800616c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006056:	2100      	movs	r1, #0
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 fed3 	bl	8006e04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800605e:	f000 f893 	bl	8006188 <xTaskResumeAll>
 8006062:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d107      	bne.n	800607a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800606a:	4b07      	ldr	r3, [pc, #28]	@ (8006088 <vTaskDelay+0x68>)
 800606c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006070:	601a      	str	r2, [r3, #0]
 8006072:	f3bf 8f4f 	dsb	sy
 8006076:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800607a:	bf00      	nop
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	200012b4 	.word	0x200012b4
 8006088:	e000ed04 	.word	0xe000ed04

0800608c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b08a      	sub	sp, #40	@ 0x28
 8006090:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006092:	2300      	movs	r3, #0
 8006094:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006096:	2300      	movs	r3, #0
 8006098:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800609a:	463a      	mov	r2, r7
 800609c:	1d39      	adds	r1, r7, #4
 800609e:	f107 0308 	add.w	r3, r7, #8
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7fe fb88 	bl	80047b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80060a8:	6839      	ldr	r1, [r7, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68ba      	ldr	r2, [r7, #8]
 80060ae:	9202      	str	r2, [sp, #8]
 80060b0:	9301      	str	r3, [sp, #4]
 80060b2:	2300      	movs	r3, #0
 80060b4:	9300      	str	r3, [sp, #0]
 80060b6:	2300      	movs	r3, #0
 80060b8:	460a      	mov	r2, r1
 80060ba:	4924      	ldr	r1, [pc, #144]	@ (800614c <vTaskStartScheduler+0xc0>)
 80060bc:	4824      	ldr	r0, [pc, #144]	@ (8006150 <vTaskStartScheduler+0xc4>)
 80060be:	f7ff fdf1 	bl	8005ca4 <xTaskCreateStatic>
 80060c2:	4603      	mov	r3, r0
 80060c4:	4a23      	ldr	r2, [pc, #140]	@ (8006154 <vTaskStartScheduler+0xc8>)
 80060c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80060c8:	4b22      	ldr	r3, [pc, #136]	@ (8006154 <vTaskStartScheduler+0xc8>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d002      	beq.n	80060d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80060d0:	2301      	movs	r3, #1
 80060d2:	617b      	str	r3, [r7, #20]
 80060d4:	e001      	b.n	80060da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80060d6:	2300      	movs	r3, #0
 80060d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d102      	bne.n	80060e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80060e0:	f000 fee4 	bl	8006eac <xTimerCreateTimerTask>
 80060e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d11b      	bne.n	8006124 <vTaskStartScheduler+0x98>
	__asm volatile
 80060ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f0:	f383 8811 	msr	BASEPRI, r3
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	613b      	str	r3, [r7, #16]
}
 80060fe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006100:	4b15      	ldr	r3, [pc, #84]	@ (8006158 <vTaskStartScheduler+0xcc>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	3354      	adds	r3, #84	@ 0x54
 8006106:	4a15      	ldr	r2, [pc, #84]	@ (800615c <vTaskStartScheduler+0xd0>)
 8006108:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800610a:	4b15      	ldr	r3, [pc, #84]	@ (8006160 <vTaskStartScheduler+0xd4>)
 800610c:	f04f 32ff 	mov.w	r2, #4294967295
 8006110:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006112:	4b14      	ldr	r3, [pc, #80]	@ (8006164 <vTaskStartScheduler+0xd8>)
 8006114:	2201      	movs	r2, #1
 8006116:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006118:	4b13      	ldr	r3, [pc, #76]	@ (8006168 <vTaskStartScheduler+0xdc>)
 800611a:	2200      	movs	r2, #0
 800611c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800611e:	f001 facf 	bl	80076c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006122:	e00f      	b.n	8006144 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800612a:	d10b      	bne.n	8006144 <vTaskStartScheduler+0xb8>
	__asm volatile
 800612c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006130:	f383 8811 	msr	BASEPRI, r3
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	60fb      	str	r3, [r7, #12]
}
 800613e:	bf00      	nop
 8006140:	bf00      	nop
 8006142:	e7fd      	b.n	8006140 <vTaskStartScheduler+0xb4>
}
 8006144:	bf00      	nop
 8006146:	3718      	adds	r7, #24
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	080080c8 	.word	0x080080c8
 8006150:	080068e1 	.word	0x080068e1
 8006154:	200012b0 	.word	0x200012b0
 8006158:	20000db8 	.word	0x20000db8
 800615c:	20000010 	.word	0x20000010
 8006160:	200012ac 	.word	0x200012ac
 8006164:	20001298 	.word	0x20001298
 8006168:	20001290 	.word	0x20001290

0800616c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800616c:	b480      	push	{r7}
 800616e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006170:	4b04      	ldr	r3, [pc, #16]	@ (8006184 <vTaskSuspendAll+0x18>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	3301      	adds	r3, #1
 8006176:	4a03      	ldr	r2, [pc, #12]	@ (8006184 <vTaskSuspendAll+0x18>)
 8006178:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800617a:	bf00      	nop
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr
 8006184:	200012b4 	.word	0x200012b4

08006188 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800618e:	2300      	movs	r3, #0
 8006190:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006192:	2300      	movs	r3, #0
 8006194:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006196:	4b42      	ldr	r3, [pc, #264]	@ (80062a0 <xTaskResumeAll+0x118>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d10b      	bne.n	80061b6 <xTaskResumeAll+0x2e>
	__asm volatile
 800619e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a2:	f383 8811 	msr	BASEPRI, r3
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	603b      	str	r3, [r7, #0]
}
 80061b0:	bf00      	nop
 80061b2:	bf00      	nop
 80061b4:	e7fd      	b.n	80061b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80061b6:	f001 fb27 	bl	8007808 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80061ba:	4b39      	ldr	r3, [pc, #228]	@ (80062a0 <xTaskResumeAll+0x118>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	3b01      	subs	r3, #1
 80061c0:	4a37      	ldr	r2, [pc, #220]	@ (80062a0 <xTaskResumeAll+0x118>)
 80061c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061c4:	4b36      	ldr	r3, [pc, #216]	@ (80062a0 <xTaskResumeAll+0x118>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d162      	bne.n	8006292 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80061cc:	4b35      	ldr	r3, [pc, #212]	@ (80062a4 <xTaskResumeAll+0x11c>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d05e      	beq.n	8006292 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061d4:	e02f      	b.n	8006236 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061d6:	4b34      	ldr	r3, [pc, #208]	@ (80062a8 <xTaskResumeAll+0x120>)
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	3318      	adds	r3, #24
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7fe fd9c 	bl	8004d20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	3304      	adds	r3, #4
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7fe fd97 	bl	8004d20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061f6:	4b2d      	ldr	r3, [pc, #180]	@ (80062ac <xTaskResumeAll+0x124>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d903      	bls.n	8006206 <xTaskResumeAll+0x7e>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006202:	4a2a      	ldr	r2, [pc, #168]	@ (80062ac <xTaskResumeAll+0x124>)
 8006204:	6013      	str	r3, [r2, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800620a:	4613      	mov	r3, r2
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4a27      	ldr	r2, [pc, #156]	@ (80062b0 <xTaskResumeAll+0x128>)
 8006214:	441a      	add	r2, r3
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	3304      	adds	r3, #4
 800621a:	4619      	mov	r1, r3
 800621c:	4610      	mov	r0, r2
 800621e:	f7fe fd22 	bl	8004c66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006226:	4b23      	ldr	r3, [pc, #140]	@ (80062b4 <xTaskResumeAll+0x12c>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800622c:	429a      	cmp	r2, r3
 800622e:	d302      	bcc.n	8006236 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006230:	4b21      	ldr	r3, [pc, #132]	@ (80062b8 <xTaskResumeAll+0x130>)
 8006232:	2201      	movs	r2, #1
 8006234:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006236:	4b1c      	ldr	r3, [pc, #112]	@ (80062a8 <xTaskResumeAll+0x120>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1cb      	bne.n	80061d6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d001      	beq.n	8006248 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006244:	f000 fc08 	bl	8006a58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006248:	4b1c      	ldr	r3, [pc, #112]	@ (80062bc <xTaskResumeAll+0x134>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d010      	beq.n	8006276 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006254:	f000 f846 	bl	80062e4 <xTaskIncrementTick>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d002      	beq.n	8006264 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800625e:	4b16      	ldr	r3, [pc, #88]	@ (80062b8 <xTaskResumeAll+0x130>)
 8006260:	2201      	movs	r2, #1
 8006262:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	3b01      	subs	r3, #1
 8006268:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1f1      	bne.n	8006254 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006270:	4b12      	ldr	r3, [pc, #72]	@ (80062bc <xTaskResumeAll+0x134>)
 8006272:	2200      	movs	r2, #0
 8006274:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006276:	4b10      	ldr	r3, [pc, #64]	@ (80062b8 <xTaskResumeAll+0x130>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d009      	beq.n	8006292 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800627e:	2301      	movs	r3, #1
 8006280:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006282:	4b0f      	ldr	r3, [pc, #60]	@ (80062c0 <xTaskResumeAll+0x138>)
 8006284:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006288:	601a      	str	r2, [r3, #0]
 800628a:	f3bf 8f4f 	dsb	sy
 800628e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006292:	f001 faeb 	bl	800786c <vPortExitCritical>

	return xAlreadyYielded;
 8006296:	68bb      	ldr	r3, [r7, #8]
}
 8006298:	4618      	mov	r0, r3
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	200012b4 	.word	0x200012b4
 80062a4:	2000128c 	.word	0x2000128c
 80062a8:	2000124c 	.word	0x2000124c
 80062ac:	20001294 	.word	0x20001294
 80062b0:	20000dbc 	.word	0x20000dbc
 80062b4:	20000db8 	.word	0x20000db8
 80062b8:	200012a0 	.word	0x200012a0
 80062bc:	2000129c 	.word	0x2000129c
 80062c0:	e000ed04 	.word	0xe000ed04

080062c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80062ca:	4b05      	ldr	r3, [pc, #20]	@ (80062e0 <xTaskGetTickCount+0x1c>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80062d0:	687b      	ldr	r3, [r7, #4]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	370c      	adds	r7, #12
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	20001290 	.word	0x20001290

080062e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80062ea:	2300      	movs	r3, #0
 80062ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062ee:	4b4f      	ldr	r3, [pc, #316]	@ (800642c <xTaskIncrementTick+0x148>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f040 8090 	bne.w	8006418 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80062f8:	4b4d      	ldr	r3, [pc, #308]	@ (8006430 <xTaskIncrementTick+0x14c>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	3301      	adds	r3, #1
 80062fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006300:	4a4b      	ldr	r2, [pc, #300]	@ (8006430 <xTaskIncrementTick+0x14c>)
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d121      	bne.n	8006350 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800630c:	4b49      	ldr	r3, [pc, #292]	@ (8006434 <xTaskIncrementTick+0x150>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00b      	beq.n	800632e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800631a:	f383 8811 	msr	BASEPRI, r3
 800631e:	f3bf 8f6f 	isb	sy
 8006322:	f3bf 8f4f 	dsb	sy
 8006326:	603b      	str	r3, [r7, #0]
}
 8006328:	bf00      	nop
 800632a:	bf00      	nop
 800632c:	e7fd      	b.n	800632a <xTaskIncrementTick+0x46>
 800632e:	4b41      	ldr	r3, [pc, #260]	@ (8006434 <xTaskIncrementTick+0x150>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	60fb      	str	r3, [r7, #12]
 8006334:	4b40      	ldr	r3, [pc, #256]	@ (8006438 <xTaskIncrementTick+0x154>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a3e      	ldr	r2, [pc, #248]	@ (8006434 <xTaskIncrementTick+0x150>)
 800633a:	6013      	str	r3, [r2, #0]
 800633c:	4a3e      	ldr	r2, [pc, #248]	@ (8006438 <xTaskIncrementTick+0x154>)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6013      	str	r3, [r2, #0]
 8006342:	4b3e      	ldr	r3, [pc, #248]	@ (800643c <xTaskIncrementTick+0x158>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	3301      	adds	r3, #1
 8006348:	4a3c      	ldr	r2, [pc, #240]	@ (800643c <xTaskIncrementTick+0x158>)
 800634a:	6013      	str	r3, [r2, #0]
 800634c:	f000 fb84 	bl	8006a58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006350:	4b3b      	ldr	r3, [pc, #236]	@ (8006440 <xTaskIncrementTick+0x15c>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	429a      	cmp	r2, r3
 8006358:	d349      	bcc.n	80063ee <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800635a:	4b36      	ldr	r3, [pc, #216]	@ (8006434 <xTaskIncrementTick+0x150>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d104      	bne.n	800636e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006364:	4b36      	ldr	r3, [pc, #216]	@ (8006440 <xTaskIncrementTick+0x15c>)
 8006366:	f04f 32ff 	mov.w	r2, #4294967295
 800636a:	601a      	str	r2, [r3, #0]
					break;
 800636c:	e03f      	b.n	80063ee <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800636e:	4b31      	ldr	r3, [pc, #196]	@ (8006434 <xTaskIncrementTick+0x150>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800637e:	693a      	ldr	r2, [r7, #16]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	429a      	cmp	r2, r3
 8006384:	d203      	bcs.n	800638e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006386:	4a2e      	ldr	r2, [pc, #184]	@ (8006440 <xTaskIncrementTick+0x15c>)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800638c:	e02f      	b.n	80063ee <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	3304      	adds	r3, #4
 8006392:	4618      	mov	r0, r3
 8006394:	f7fe fcc4 	bl	8004d20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800639c:	2b00      	cmp	r3, #0
 800639e:	d004      	beq.n	80063aa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	3318      	adds	r3, #24
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7fe fcbb 	bl	8004d20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063ae:	4b25      	ldr	r3, [pc, #148]	@ (8006444 <xTaskIncrementTick+0x160>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d903      	bls.n	80063be <xTaskIncrementTick+0xda>
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ba:	4a22      	ldr	r2, [pc, #136]	@ (8006444 <xTaskIncrementTick+0x160>)
 80063bc:	6013      	str	r3, [r2, #0]
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063c2:	4613      	mov	r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4413      	add	r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	4a1f      	ldr	r2, [pc, #124]	@ (8006448 <xTaskIncrementTick+0x164>)
 80063cc:	441a      	add	r2, r3
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	3304      	adds	r3, #4
 80063d2:	4619      	mov	r1, r3
 80063d4:	4610      	mov	r0, r2
 80063d6:	f7fe fc46 	bl	8004c66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063de:	4b1b      	ldr	r3, [pc, #108]	@ (800644c <xTaskIncrementTick+0x168>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d3b8      	bcc.n	800635a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80063e8:	2301      	movs	r3, #1
 80063ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063ec:	e7b5      	b.n	800635a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80063ee:	4b17      	ldr	r3, [pc, #92]	@ (800644c <xTaskIncrementTick+0x168>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063f4:	4914      	ldr	r1, [pc, #80]	@ (8006448 <xTaskIncrementTick+0x164>)
 80063f6:	4613      	mov	r3, r2
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4413      	add	r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	440b      	add	r3, r1
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d901      	bls.n	800640a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006406:	2301      	movs	r3, #1
 8006408:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800640a:	4b11      	ldr	r3, [pc, #68]	@ (8006450 <xTaskIncrementTick+0x16c>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d007      	beq.n	8006422 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006412:	2301      	movs	r3, #1
 8006414:	617b      	str	r3, [r7, #20]
 8006416:	e004      	b.n	8006422 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006418:	4b0e      	ldr	r3, [pc, #56]	@ (8006454 <xTaskIncrementTick+0x170>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	3301      	adds	r3, #1
 800641e:	4a0d      	ldr	r2, [pc, #52]	@ (8006454 <xTaskIncrementTick+0x170>)
 8006420:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006422:	697b      	ldr	r3, [r7, #20]
}
 8006424:	4618      	mov	r0, r3
 8006426:	3718      	adds	r7, #24
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	200012b4 	.word	0x200012b4
 8006430:	20001290 	.word	0x20001290
 8006434:	20001244 	.word	0x20001244
 8006438:	20001248 	.word	0x20001248
 800643c:	200012a4 	.word	0x200012a4
 8006440:	200012ac 	.word	0x200012ac
 8006444:	20001294 	.word	0x20001294
 8006448:	20000dbc 	.word	0x20000dbc
 800644c:	20000db8 	.word	0x20000db8
 8006450:	200012a0 	.word	0x200012a0
 8006454:	2000129c 	.word	0x2000129c

08006458 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800645e:	4b2b      	ldr	r3, [pc, #172]	@ (800650c <vTaskSwitchContext+0xb4>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d003      	beq.n	800646e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006466:	4b2a      	ldr	r3, [pc, #168]	@ (8006510 <vTaskSwitchContext+0xb8>)
 8006468:	2201      	movs	r2, #1
 800646a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800646c:	e047      	b.n	80064fe <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800646e:	4b28      	ldr	r3, [pc, #160]	@ (8006510 <vTaskSwitchContext+0xb8>)
 8006470:	2200      	movs	r2, #0
 8006472:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006474:	4b27      	ldr	r3, [pc, #156]	@ (8006514 <vTaskSwitchContext+0xbc>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	60fb      	str	r3, [r7, #12]
 800647a:	e011      	b.n	80064a0 <vTaskSwitchContext+0x48>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10b      	bne.n	800649a <vTaskSwitchContext+0x42>
	__asm volatile
 8006482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	607b      	str	r3, [r7, #4]
}
 8006494:	bf00      	nop
 8006496:	bf00      	nop
 8006498:	e7fd      	b.n	8006496 <vTaskSwitchContext+0x3e>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	3b01      	subs	r3, #1
 800649e:	60fb      	str	r3, [r7, #12]
 80064a0:	491d      	ldr	r1, [pc, #116]	@ (8006518 <vTaskSwitchContext+0xc0>)
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	4613      	mov	r3, r2
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4413      	add	r3, r2
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	440b      	add	r3, r1
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d0e3      	beq.n	800647c <vTaskSwitchContext+0x24>
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	4613      	mov	r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4413      	add	r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	4a16      	ldr	r2, [pc, #88]	@ (8006518 <vTaskSwitchContext+0xc0>)
 80064c0:	4413      	add	r3, r2
 80064c2:	60bb      	str	r3, [r7, #8]
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	685a      	ldr	r2, [r3, #4]
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	605a      	str	r2, [r3, #4]
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	3308      	adds	r3, #8
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d104      	bne.n	80064e4 <vTaskSwitchContext+0x8c>
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	685a      	ldr	r2, [r3, #4]
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	605a      	str	r2, [r3, #4]
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	4a0c      	ldr	r2, [pc, #48]	@ (800651c <vTaskSwitchContext+0xc4>)
 80064ec:	6013      	str	r3, [r2, #0]
 80064ee:	4a09      	ldr	r2, [pc, #36]	@ (8006514 <vTaskSwitchContext+0xbc>)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80064f4:	4b09      	ldr	r3, [pc, #36]	@ (800651c <vTaskSwitchContext+0xc4>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	3354      	adds	r3, #84	@ 0x54
 80064fa:	4a09      	ldr	r2, [pc, #36]	@ (8006520 <vTaskSwitchContext+0xc8>)
 80064fc:	6013      	str	r3, [r2, #0]
}
 80064fe:	bf00      	nop
 8006500:	3714      	adds	r7, #20
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	200012b4 	.word	0x200012b4
 8006510:	200012a0 	.word	0x200012a0
 8006514:	20001294 	.word	0x20001294
 8006518:	20000dbc 	.word	0x20000dbc
 800651c:	20000db8 	.word	0x20000db8
 8006520:	20000010 	.word	0x20000010

08006524 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d10b      	bne.n	800654c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006538:	f383 8811 	msr	BASEPRI, r3
 800653c:	f3bf 8f6f 	isb	sy
 8006540:	f3bf 8f4f 	dsb	sy
 8006544:	60fb      	str	r3, [r7, #12]
}
 8006546:	bf00      	nop
 8006548:	bf00      	nop
 800654a:	e7fd      	b.n	8006548 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800654c:	4b07      	ldr	r3, [pc, #28]	@ (800656c <vTaskPlaceOnEventList+0x48>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	3318      	adds	r3, #24
 8006552:	4619      	mov	r1, r3
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f7fe fbaa 	bl	8004cae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800655a:	2101      	movs	r1, #1
 800655c:	6838      	ldr	r0, [r7, #0]
 800655e:	f000 fc51 	bl	8006e04 <prvAddCurrentTaskToDelayedList>
}
 8006562:	bf00      	nop
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	20000db8 	.word	0x20000db8

08006570 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d10b      	bne.n	800659a <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8006582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006586:	f383 8811 	msr	BASEPRI, r3
 800658a:	f3bf 8f6f 	isb	sy
 800658e:	f3bf 8f4f 	dsb	sy
 8006592:	617b      	str	r3, [r7, #20]
}
 8006594:	bf00      	nop
 8006596:	bf00      	nop
 8006598:	e7fd      	b.n	8006596 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800659a:	4b12      	ldr	r3, [pc, #72]	@ (80065e4 <vTaskPlaceOnUnorderedEventList+0x74>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10b      	bne.n	80065ba <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 80065a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a6:	f383 8811 	msr	BASEPRI, r3
 80065aa:	f3bf 8f6f 	isb	sy
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	613b      	str	r3, [r7, #16]
}
 80065b4:	bf00      	nop
 80065b6:	bf00      	nop
 80065b8:	e7fd      	b.n	80065b6 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80065ba:	4b0b      	ldr	r3, [pc, #44]	@ (80065e8 <vTaskPlaceOnUnorderedEventList+0x78>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80065c4:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065c6:	4b08      	ldr	r3, [pc, #32]	@ (80065e8 <vTaskPlaceOnUnorderedEventList+0x78>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	3318      	adds	r3, #24
 80065cc:	4619      	mov	r1, r3
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f7fe fb49 	bl	8004c66 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80065d4:	2101      	movs	r1, #1
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fc14 	bl	8006e04 <prvAddCurrentTaskToDelayedList>
}
 80065dc:	bf00      	nop
 80065de:	3718      	adds	r7, #24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	200012b4 	.word	0x200012b4
 80065e8:	20000db8 	.word	0x20000db8

080065ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10b      	bne.n	8006616 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80065fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006602:	f383 8811 	msr	BASEPRI, r3
 8006606:	f3bf 8f6f 	isb	sy
 800660a:	f3bf 8f4f 	dsb	sy
 800660e:	617b      	str	r3, [r7, #20]
}
 8006610:	bf00      	nop
 8006612:	bf00      	nop
 8006614:	e7fd      	b.n	8006612 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006616:	4b0a      	ldr	r3, [pc, #40]	@ (8006640 <vTaskPlaceOnEventListRestricted+0x54>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	3318      	adds	r3, #24
 800661c:	4619      	mov	r1, r3
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f7fe fb21 	bl	8004c66 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d002      	beq.n	8006630 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800662a:	f04f 33ff 	mov.w	r3, #4294967295
 800662e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006630:	6879      	ldr	r1, [r7, #4]
 8006632:	68b8      	ldr	r0, [r7, #8]
 8006634:	f000 fbe6 	bl	8006e04 <prvAddCurrentTaskToDelayedList>
	}
 8006638:	bf00      	nop
 800663a:	3718      	adds	r7, #24
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	20000db8 	.word	0x20000db8

08006644 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b086      	sub	sp, #24
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10b      	bne.n	8006672 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800665a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800665e:	f383 8811 	msr	BASEPRI, r3
 8006662:	f3bf 8f6f 	isb	sy
 8006666:	f3bf 8f4f 	dsb	sy
 800666a:	60fb      	str	r3, [r7, #12]
}
 800666c:	bf00      	nop
 800666e:	bf00      	nop
 8006670:	e7fd      	b.n	800666e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	3318      	adds	r3, #24
 8006676:	4618      	mov	r0, r3
 8006678:	f7fe fb52 	bl	8004d20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800667c:	4b1d      	ldr	r3, [pc, #116]	@ (80066f4 <xTaskRemoveFromEventList+0xb0>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d11d      	bne.n	80066c0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	3304      	adds	r3, #4
 8006688:	4618      	mov	r0, r3
 800668a:	f7fe fb49 	bl	8004d20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006692:	4b19      	ldr	r3, [pc, #100]	@ (80066f8 <xTaskRemoveFromEventList+0xb4>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	429a      	cmp	r2, r3
 8006698:	d903      	bls.n	80066a2 <xTaskRemoveFromEventList+0x5e>
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800669e:	4a16      	ldr	r2, [pc, #88]	@ (80066f8 <xTaskRemoveFromEventList+0xb4>)
 80066a0:	6013      	str	r3, [r2, #0]
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066a6:	4613      	mov	r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	4413      	add	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4a13      	ldr	r2, [pc, #76]	@ (80066fc <xTaskRemoveFromEventList+0xb8>)
 80066b0:	441a      	add	r2, r3
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	3304      	adds	r3, #4
 80066b6:	4619      	mov	r1, r3
 80066b8:	4610      	mov	r0, r2
 80066ba:	f7fe fad4 	bl	8004c66 <vListInsertEnd>
 80066be:	e005      	b.n	80066cc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	3318      	adds	r3, #24
 80066c4:	4619      	mov	r1, r3
 80066c6:	480e      	ldr	r0, [pc, #56]	@ (8006700 <xTaskRemoveFromEventList+0xbc>)
 80066c8:	f7fe facd 	bl	8004c66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006704 <xTaskRemoveFromEventList+0xc0>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d905      	bls.n	80066e6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80066da:	2301      	movs	r3, #1
 80066dc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80066de:	4b0a      	ldr	r3, [pc, #40]	@ (8006708 <xTaskRemoveFromEventList+0xc4>)
 80066e0:	2201      	movs	r2, #1
 80066e2:	601a      	str	r2, [r3, #0]
 80066e4:	e001      	b.n	80066ea <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80066e6:	2300      	movs	r3, #0
 80066e8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80066ea:	697b      	ldr	r3, [r7, #20]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3718      	adds	r7, #24
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	200012b4 	.word	0x200012b4
 80066f8:	20001294 	.word	0x20001294
 80066fc:	20000dbc 	.word	0x20000dbc
 8006700:	2000124c 	.word	0x2000124c
 8006704:	20000db8 	.word	0x20000db8
 8006708:	200012a0 	.word	0x200012a0

0800670c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006716:	4b2a      	ldr	r3, [pc, #168]	@ (80067c0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d10b      	bne.n	8006736 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800671e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	613b      	str	r3, [r7, #16]
}
 8006730:	bf00      	nop
 8006732:	bf00      	nop
 8006734:	e7fd      	b.n	8006732 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10b      	bne.n	8006764 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800674c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006750:	f383 8811 	msr	BASEPRI, r3
 8006754:	f3bf 8f6f 	isb	sy
 8006758:	f3bf 8f4f 	dsb	sy
 800675c:	60fb      	str	r3, [r7, #12]
}
 800675e:	bf00      	nop
 8006760:	bf00      	nop
 8006762:	e7fd      	b.n	8006760 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f7fe fadb 	bl	8004d20 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	3304      	adds	r3, #4
 800676e:	4618      	mov	r0, r3
 8006770:	f7fe fad6 	bl	8004d20 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006778:	4b12      	ldr	r3, [pc, #72]	@ (80067c4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	429a      	cmp	r2, r3
 800677e:	d903      	bls.n	8006788 <vTaskRemoveFromUnorderedEventList+0x7c>
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006784:	4a0f      	ldr	r2, [pc, #60]	@ (80067c4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8006786:	6013      	str	r3, [r2, #0]
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800678c:	4613      	mov	r3, r2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	4413      	add	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4a0c      	ldr	r2, [pc, #48]	@ (80067c8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8006796:	441a      	add	r2, r3
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	3304      	adds	r3, #4
 800679c:	4619      	mov	r1, r3
 800679e:	4610      	mov	r0, r2
 80067a0:	f7fe fa61 	bl	8004c66 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067a8:	4b08      	ldr	r3, [pc, #32]	@ (80067cc <vTaskRemoveFromUnorderedEventList+0xc0>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d902      	bls.n	80067b8 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80067b2:	4b07      	ldr	r3, [pc, #28]	@ (80067d0 <vTaskRemoveFromUnorderedEventList+0xc4>)
 80067b4:	2201      	movs	r2, #1
 80067b6:	601a      	str	r2, [r3, #0]
	}
}
 80067b8:	bf00      	nop
 80067ba:	3718      	adds	r7, #24
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	200012b4 	.word	0x200012b4
 80067c4:	20001294 	.word	0x20001294
 80067c8:	20000dbc 	.word	0x20000dbc
 80067cc:	20000db8 	.word	0x20000db8
 80067d0:	200012a0 	.word	0x200012a0

080067d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80067dc:	4b06      	ldr	r3, [pc, #24]	@ (80067f8 <vTaskInternalSetTimeOutState+0x24>)
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80067e4:	4b05      	ldr	r3, [pc, #20]	@ (80067fc <vTaskInternalSetTimeOutState+0x28>)
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	605a      	str	r2, [r3, #4]
}
 80067ec:	bf00      	nop
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr
 80067f8:	200012a4 	.word	0x200012a4
 80067fc:	20001290 	.word	0x20001290

08006800 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b088      	sub	sp, #32
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10b      	bne.n	8006828 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006814:	f383 8811 	msr	BASEPRI, r3
 8006818:	f3bf 8f6f 	isb	sy
 800681c:	f3bf 8f4f 	dsb	sy
 8006820:	613b      	str	r3, [r7, #16]
}
 8006822:	bf00      	nop
 8006824:	bf00      	nop
 8006826:	e7fd      	b.n	8006824 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10b      	bne.n	8006846 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800682e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	60fb      	str	r3, [r7, #12]
}
 8006840:	bf00      	nop
 8006842:	bf00      	nop
 8006844:	e7fd      	b.n	8006842 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006846:	f000 ffdf 	bl	8007808 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800684a:	4b1d      	ldr	r3, [pc, #116]	@ (80068c0 <xTaskCheckForTimeOut+0xc0>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	69ba      	ldr	r2, [r7, #24]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006862:	d102      	bne.n	800686a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006864:	2300      	movs	r3, #0
 8006866:	61fb      	str	r3, [r7, #28]
 8006868:	e023      	b.n	80068b2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	4b15      	ldr	r3, [pc, #84]	@ (80068c4 <xTaskCheckForTimeOut+0xc4>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	429a      	cmp	r2, r3
 8006874:	d007      	beq.n	8006886 <xTaskCheckForTimeOut+0x86>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	69ba      	ldr	r2, [r7, #24]
 800687c:	429a      	cmp	r2, r3
 800687e:	d302      	bcc.n	8006886 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006880:	2301      	movs	r3, #1
 8006882:	61fb      	str	r3, [r7, #28]
 8006884:	e015      	b.n	80068b2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	429a      	cmp	r2, r3
 800688e:	d20b      	bcs.n	80068a8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	1ad2      	subs	r2, r2, r3
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f7ff ff99 	bl	80067d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80068a2:	2300      	movs	r3, #0
 80068a4:	61fb      	str	r3, [r7, #28]
 80068a6:	e004      	b.n	80068b2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	2200      	movs	r2, #0
 80068ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80068ae:	2301      	movs	r3, #1
 80068b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80068b2:	f000 ffdb 	bl	800786c <vPortExitCritical>

	return xReturn;
 80068b6:	69fb      	ldr	r3, [r7, #28]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3720      	adds	r7, #32
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	20001290 	.word	0x20001290
 80068c4:	200012a4 	.word	0x200012a4

080068c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80068c8:	b480      	push	{r7}
 80068ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80068cc:	4b03      	ldr	r3, [pc, #12]	@ (80068dc <vTaskMissedYield+0x14>)
 80068ce:	2201      	movs	r2, #1
 80068d0:	601a      	str	r2, [r3, #0]
}
 80068d2:	bf00      	nop
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr
 80068dc:	200012a0 	.word	0x200012a0

080068e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80068e8:	f000 f852 	bl	8006990 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80068ec:	4b06      	ldr	r3, [pc, #24]	@ (8006908 <prvIdleTask+0x28>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d9f9      	bls.n	80068e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80068f4:	4b05      	ldr	r3, [pc, #20]	@ (800690c <prvIdleTask+0x2c>)
 80068f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068fa:	601a      	str	r2, [r3, #0]
 80068fc:	f3bf 8f4f 	dsb	sy
 8006900:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006904:	e7f0      	b.n	80068e8 <prvIdleTask+0x8>
 8006906:	bf00      	nop
 8006908:	20000dbc 	.word	0x20000dbc
 800690c:	e000ed04 	.word	0xe000ed04

08006910 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006916:	2300      	movs	r3, #0
 8006918:	607b      	str	r3, [r7, #4]
 800691a:	e00c      	b.n	8006936 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	4613      	mov	r3, r2
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4413      	add	r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4a12      	ldr	r2, [pc, #72]	@ (8006970 <prvInitialiseTaskLists+0x60>)
 8006928:	4413      	add	r3, r2
 800692a:	4618      	mov	r0, r3
 800692c:	f7fe f96e 	bl	8004c0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	3301      	adds	r3, #1
 8006934:	607b      	str	r3, [r7, #4]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2b37      	cmp	r3, #55	@ 0x37
 800693a:	d9ef      	bls.n	800691c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800693c:	480d      	ldr	r0, [pc, #52]	@ (8006974 <prvInitialiseTaskLists+0x64>)
 800693e:	f7fe f965 	bl	8004c0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006942:	480d      	ldr	r0, [pc, #52]	@ (8006978 <prvInitialiseTaskLists+0x68>)
 8006944:	f7fe f962 	bl	8004c0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006948:	480c      	ldr	r0, [pc, #48]	@ (800697c <prvInitialiseTaskLists+0x6c>)
 800694a:	f7fe f95f 	bl	8004c0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800694e:	480c      	ldr	r0, [pc, #48]	@ (8006980 <prvInitialiseTaskLists+0x70>)
 8006950:	f7fe f95c 	bl	8004c0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006954:	480b      	ldr	r0, [pc, #44]	@ (8006984 <prvInitialiseTaskLists+0x74>)
 8006956:	f7fe f959 	bl	8004c0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800695a:	4b0b      	ldr	r3, [pc, #44]	@ (8006988 <prvInitialiseTaskLists+0x78>)
 800695c:	4a05      	ldr	r2, [pc, #20]	@ (8006974 <prvInitialiseTaskLists+0x64>)
 800695e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006960:	4b0a      	ldr	r3, [pc, #40]	@ (800698c <prvInitialiseTaskLists+0x7c>)
 8006962:	4a05      	ldr	r2, [pc, #20]	@ (8006978 <prvInitialiseTaskLists+0x68>)
 8006964:	601a      	str	r2, [r3, #0]
}
 8006966:	bf00      	nop
 8006968:	3708      	adds	r7, #8
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	20000dbc 	.word	0x20000dbc
 8006974:	2000121c 	.word	0x2000121c
 8006978:	20001230 	.word	0x20001230
 800697c:	2000124c 	.word	0x2000124c
 8006980:	20001260 	.word	0x20001260
 8006984:	20001278 	.word	0x20001278
 8006988:	20001244 	.word	0x20001244
 800698c:	20001248 	.word	0x20001248

08006990 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006996:	e019      	b.n	80069cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006998:	f000 ff36 	bl	8007808 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800699c:	4b10      	ldr	r3, [pc, #64]	@ (80069e0 <prvCheckTasksWaitingTermination+0x50>)
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	3304      	adds	r3, #4
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7fe f9b9 	bl	8004d20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80069ae:	4b0d      	ldr	r3, [pc, #52]	@ (80069e4 <prvCheckTasksWaitingTermination+0x54>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	3b01      	subs	r3, #1
 80069b4:	4a0b      	ldr	r2, [pc, #44]	@ (80069e4 <prvCheckTasksWaitingTermination+0x54>)
 80069b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80069b8:	4b0b      	ldr	r3, [pc, #44]	@ (80069e8 <prvCheckTasksWaitingTermination+0x58>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	3b01      	subs	r3, #1
 80069be:	4a0a      	ldr	r2, [pc, #40]	@ (80069e8 <prvCheckTasksWaitingTermination+0x58>)
 80069c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80069c2:	f000 ff53 	bl	800786c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f810 	bl	80069ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069cc:	4b06      	ldr	r3, [pc, #24]	@ (80069e8 <prvCheckTasksWaitingTermination+0x58>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1e1      	bne.n	8006998 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80069d4:	bf00      	nop
 80069d6:	bf00      	nop
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	20001260 	.word	0x20001260
 80069e4:	2000128c 	.word	0x2000128c
 80069e8:	20001274 	.word	0x20001274

080069ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	3354      	adds	r3, #84	@ 0x54
 80069f8:	4618      	mov	r0, r3
 80069fa:	f001 fa1d 	bl	8007e38 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d108      	bne.n	8006a1a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f001 f8eb 	bl	8007be8 <vPortFree>
				vPortFree( pxTCB );
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f001 f8e8 	bl	8007be8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a18:	e019      	b.n	8006a4e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d103      	bne.n	8006a2c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f001 f8df 	bl	8007be8 <vPortFree>
	}
 8006a2a:	e010      	b.n	8006a4e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d00b      	beq.n	8006a4e <prvDeleteTCB+0x62>
	__asm volatile
 8006a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a3a:	f383 8811 	msr	BASEPRI, r3
 8006a3e:	f3bf 8f6f 	isb	sy
 8006a42:	f3bf 8f4f 	dsb	sy
 8006a46:	60fb      	str	r3, [r7, #12]
}
 8006a48:	bf00      	nop
 8006a4a:	bf00      	nop
 8006a4c:	e7fd      	b.n	8006a4a <prvDeleteTCB+0x5e>
	}
 8006a4e:	bf00      	nop
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
	...

08006a58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8006a90 <prvResetNextTaskUnblockTime+0x38>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d104      	bne.n	8006a72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a68:	4b0a      	ldr	r3, [pc, #40]	@ (8006a94 <prvResetNextTaskUnblockTime+0x3c>)
 8006a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a70:	e008      	b.n	8006a84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a72:	4b07      	ldr	r3, [pc, #28]	@ (8006a90 <prvResetNextTaskUnblockTime+0x38>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	4a04      	ldr	r2, [pc, #16]	@ (8006a94 <prvResetNextTaskUnblockTime+0x3c>)
 8006a82:	6013      	str	r3, [r2, #0]
}
 8006a84:	bf00      	nop
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr
 8006a90:	20001244 	.word	0x20001244
 8006a94:	200012ac 	.word	0x200012ac

08006a98 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006a9e:	4b05      	ldr	r3, [pc, #20]	@ (8006ab4 <xTaskGetCurrentTaskHandle+0x1c>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006aa4:	687b      	ldr	r3, [r7, #4]
	}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	20000db8 	.word	0x20000db8

08006ab8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006abe:	4b0b      	ldr	r3, [pc, #44]	@ (8006aec <xTaskGetSchedulerState+0x34>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d102      	bne.n	8006acc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	607b      	str	r3, [r7, #4]
 8006aca:	e008      	b.n	8006ade <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006acc:	4b08      	ldr	r3, [pc, #32]	@ (8006af0 <xTaskGetSchedulerState+0x38>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d102      	bne.n	8006ada <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	607b      	str	r3, [r7, #4]
 8006ad8:	e001      	b.n	8006ade <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006ada:	2300      	movs	r3, #0
 8006adc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006ade:	687b      	ldr	r3, [r7, #4]
	}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr
 8006aec:	20001298 	.word	0x20001298
 8006af0:	200012b4 	.word	0x200012b4

08006af4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006b00:	2300      	movs	r3, #0
 8006b02:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d051      	beq.n	8006bae <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b0e:	4b2a      	ldr	r3, [pc, #168]	@ (8006bb8 <xTaskPriorityInherit+0xc4>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d241      	bcs.n	8006b9c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	db06      	blt.n	8006b2e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b20:	4b25      	ldr	r3, [pc, #148]	@ (8006bb8 <xTaskPriorityInherit+0xc4>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b26:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	6959      	ldr	r1, [r3, #20]
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b36:	4613      	mov	r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4413      	add	r3, r2
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	4a1f      	ldr	r2, [pc, #124]	@ (8006bbc <xTaskPriorityInherit+0xc8>)
 8006b40:	4413      	add	r3, r2
 8006b42:	4299      	cmp	r1, r3
 8006b44:	d122      	bne.n	8006b8c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	3304      	adds	r3, #4
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f7fe f8e8 	bl	8004d20 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006b50:	4b19      	ldr	r3, [pc, #100]	@ (8006bb8 <xTaskPriorityInherit+0xc4>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b5e:	4b18      	ldr	r3, [pc, #96]	@ (8006bc0 <xTaskPriorityInherit+0xcc>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d903      	bls.n	8006b6e <xTaskPriorityInherit+0x7a>
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b6a:	4a15      	ldr	r2, [pc, #84]	@ (8006bc0 <xTaskPriorityInherit+0xcc>)
 8006b6c:	6013      	str	r3, [r2, #0]
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b72:	4613      	mov	r3, r2
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4a10      	ldr	r2, [pc, #64]	@ (8006bbc <xTaskPriorityInherit+0xc8>)
 8006b7c:	441a      	add	r2, r3
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	3304      	adds	r3, #4
 8006b82:	4619      	mov	r1, r3
 8006b84:	4610      	mov	r0, r2
 8006b86:	f7fe f86e 	bl	8004c66 <vListInsertEnd>
 8006b8a:	e004      	b.n	8006b96 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8006bb8 <xTaskPriorityInherit+0xc4>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006b96:	2301      	movs	r3, #1
 8006b98:	60fb      	str	r3, [r7, #12]
 8006b9a:	e008      	b.n	8006bae <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006ba0:	4b05      	ldr	r3, [pc, #20]	@ (8006bb8 <xTaskPriorityInherit+0xc4>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d201      	bcs.n	8006bae <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006baa:	2301      	movs	r3, #1
 8006bac:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006bae:	68fb      	ldr	r3, [r7, #12]
	}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	20000db8 	.word	0x20000db8
 8006bbc:	20000dbc 	.word	0x20000dbc
 8006bc0:	20001294 	.word	0x20001294

08006bc4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b086      	sub	sp, #24
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d058      	beq.n	8006c8c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006bda:	4b2f      	ldr	r3, [pc, #188]	@ (8006c98 <xTaskPriorityDisinherit+0xd4>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	693a      	ldr	r2, [r7, #16]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d00b      	beq.n	8006bfc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006be8:	f383 8811 	msr	BASEPRI, r3
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	60fb      	str	r3, [r7, #12]
}
 8006bf6:	bf00      	nop
 8006bf8:	bf00      	nop
 8006bfa:	e7fd      	b.n	8006bf8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10b      	bne.n	8006c1c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	60bb      	str	r3, [r7, #8]
}
 8006c16:	bf00      	nop
 8006c18:	bf00      	nop
 8006c1a:	e7fd      	b.n	8006c18 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c20:	1e5a      	subs	r2, r3, #1
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d02c      	beq.n	8006c8c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d128      	bne.n	8006c8c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	3304      	adds	r3, #4
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7fe f86e 	bl	8004d20 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c50:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8006c9c <xTaskPriorityDisinherit+0xd8>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d903      	bls.n	8006c6c <xTaskPriorityDisinherit+0xa8>
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c68:	4a0c      	ldr	r2, [pc, #48]	@ (8006c9c <xTaskPriorityDisinherit+0xd8>)
 8006c6a:	6013      	str	r3, [r2, #0]
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c70:	4613      	mov	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4413      	add	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4a09      	ldr	r2, [pc, #36]	@ (8006ca0 <xTaskPriorityDisinherit+0xdc>)
 8006c7a:	441a      	add	r2, r3
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	3304      	adds	r3, #4
 8006c80:	4619      	mov	r1, r3
 8006c82:	4610      	mov	r0, r2
 8006c84:	f7fd ffef 	bl	8004c66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c8c:	697b      	ldr	r3, [r7, #20]
	}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3718      	adds	r7, #24
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	20000db8 	.word	0x20000db8
 8006c9c:	20001294 	.word	0x20001294
 8006ca0:	20000dbc 	.word	0x20000dbc

08006ca4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b088      	sub	sp, #32
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d06c      	beq.n	8006d96 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10b      	bne.n	8006cdc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc8:	f383 8811 	msr	BASEPRI, r3
 8006ccc:	f3bf 8f6f 	isb	sy
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	60fb      	str	r3, [r7, #12]
}
 8006cd6:	bf00      	nop
 8006cd8:	bf00      	nop
 8006cda:	e7fd      	b.n	8006cd8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ce0:	683a      	ldr	r2, [r7, #0]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d902      	bls.n	8006cec <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	61fb      	str	r3, [r7, #28]
 8006cea:	e002      	b.n	8006cf2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cf0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf6:	69fa      	ldr	r2, [r7, #28]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d04c      	beq.n	8006d96 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d147      	bne.n	8006d96 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006d06:	4b26      	ldr	r3, [pc, #152]	@ (8006da0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	69ba      	ldr	r2, [r7, #24]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d10b      	bne.n	8006d28 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d14:	f383 8811 	msr	BASEPRI, r3
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	60bb      	str	r3, [r7, #8]
}
 8006d22:	bf00      	nop
 8006d24:	bf00      	nop
 8006d26:	e7fd      	b.n	8006d24 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d2c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	69fa      	ldr	r2, [r7, #28]
 8006d32:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	db04      	blt.n	8006d46 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	6959      	ldr	r1, [r3, #20]
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4413      	add	r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4a13      	ldr	r2, [pc, #76]	@ (8006da4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006d56:	4413      	add	r3, r2
 8006d58:	4299      	cmp	r1, r3
 8006d5a:	d11c      	bne.n	8006d96 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	3304      	adds	r3, #4
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7fd ffdd 	bl	8004d20 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d6a:	4b0f      	ldr	r3, [pc, #60]	@ (8006da8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d903      	bls.n	8006d7a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d76:	4a0c      	ldr	r2, [pc, #48]	@ (8006da8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006d78:	6013      	str	r3, [r2, #0]
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d7e:	4613      	mov	r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4a07      	ldr	r2, [pc, #28]	@ (8006da4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006d88:	441a      	add	r2, r3
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	3304      	adds	r3, #4
 8006d8e:	4619      	mov	r1, r3
 8006d90:	4610      	mov	r0, r2
 8006d92:	f7fd ff68 	bl	8004c66 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d96:	bf00      	nop
 8006d98:	3720      	adds	r7, #32
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	20000db8 	.word	0x20000db8
 8006da4:	20000dbc 	.word	0x20000dbc
 8006da8:	20001294 	.word	0x20001294

08006dac <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8006db2:	4b09      	ldr	r3, [pc, #36]	@ (8006dd8 <uxTaskResetEventItemValue+0x2c>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dba:	4b07      	ldr	r3, [pc, #28]	@ (8006dd8 <uxTaskResetEventItemValue+0x2c>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dc0:	4b05      	ldr	r3, [pc, #20]	@ (8006dd8 <uxTaskResetEventItemValue+0x2c>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8006dc8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8006dca:	687b      	ldr	r3, [r7, #4]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr
 8006dd8:	20000db8 	.word	0x20000db8

08006ddc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006ddc:	b480      	push	{r7}
 8006dde:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006de0:	4b07      	ldr	r3, [pc, #28]	@ (8006e00 <pvTaskIncrementMutexHeldCount+0x24>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d004      	beq.n	8006df2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006de8:	4b05      	ldr	r3, [pc, #20]	@ (8006e00 <pvTaskIncrementMutexHeldCount+0x24>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006dee:	3201      	adds	r2, #1
 8006df0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006df2:	4b03      	ldr	r3, [pc, #12]	@ (8006e00 <pvTaskIncrementMutexHeldCount+0x24>)
 8006df4:	681b      	ldr	r3, [r3, #0]
	}
 8006df6:	4618      	mov	r0, r3
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	20000db8 	.word	0x20000db8

08006e04 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006e0e:	4b21      	ldr	r3, [pc, #132]	@ (8006e94 <prvAddCurrentTaskToDelayedList+0x90>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e14:	4b20      	ldr	r3, [pc, #128]	@ (8006e98 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	3304      	adds	r3, #4
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7fd ff80 	bl	8004d20 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e26:	d10a      	bne.n	8006e3e <prvAddCurrentTaskToDelayedList+0x3a>
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d007      	beq.n	8006e3e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8006e98 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	3304      	adds	r3, #4
 8006e34:	4619      	mov	r1, r3
 8006e36:	4819      	ldr	r0, [pc, #100]	@ (8006e9c <prvAddCurrentTaskToDelayedList+0x98>)
 8006e38:	f7fd ff15 	bl	8004c66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e3c:	e026      	b.n	8006e8c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4413      	add	r3, r2
 8006e44:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e46:	4b14      	ldr	r3, [pc, #80]	@ (8006e98 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68ba      	ldr	r2, [r7, #8]
 8006e4c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006e4e:	68ba      	ldr	r2, [r7, #8]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d209      	bcs.n	8006e6a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e56:	4b12      	ldr	r3, [pc, #72]	@ (8006ea0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8006e98 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	3304      	adds	r3, #4
 8006e60:	4619      	mov	r1, r3
 8006e62:	4610      	mov	r0, r2
 8006e64:	f7fd ff23 	bl	8004cae <vListInsert>
}
 8006e68:	e010      	b.n	8006e8c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8006ea4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8006e98 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	3304      	adds	r3, #4
 8006e74:	4619      	mov	r1, r3
 8006e76:	4610      	mov	r0, r2
 8006e78:	f7fd ff19 	bl	8004cae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8006ea8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68ba      	ldr	r2, [r7, #8]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d202      	bcs.n	8006e8c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006e86:	4a08      	ldr	r2, [pc, #32]	@ (8006ea8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	6013      	str	r3, [r2, #0]
}
 8006e8c:	bf00      	nop
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	20001290 	.word	0x20001290
 8006e98:	20000db8 	.word	0x20000db8
 8006e9c:	20001278 	.word	0x20001278
 8006ea0:	20001248 	.word	0x20001248
 8006ea4:	20001244 	.word	0x20001244
 8006ea8:	200012ac 	.word	0x200012ac

08006eac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b08a      	sub	sp, #40	@ 0x28
 8006eb0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006eb6:	f000 fb13 	bl	80074e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006eba:	4b1d      	ldr	r3, [pc, #116]	@ (8006f30 <xTimerCreateTimerTask+0x84>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d021      	beq.n	8006f06 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006eca:	1d3a      	adds	r2, r7, #4
 8006ecc:	f107 0108 	add.w	r1, r7, #8
 8006ed0:	f107 030c 	add.w	r3, r7, #12
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f7fd fc89 	bl	80047ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006eda:	6879      	ldr	r1, [r7, #4]
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	9202      	str	r2, [sp, #8]
 8006ee2:	9301      	str	r3, [sp, #4]
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	9300      	str	r3, [sp, #0]
 8006ee8:	2300      	movs	r3, #0
 8006eea:	460a      	mov	r2, r1
 8006eec:	4911      	ldr	r1, [pc, #68]	@ (8006f34 <xTimerCreateTimerTask+0x88>)
 8006eee:	4812      	ldr	r0, [pc, #72]	@ (8006f38 <xTimerCreateTimerTask+0x8c>)
 8006ef0:	f7fe fed8 	bl	8005ca4 <xTaskCreateStatic>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	4a11      	ldr	r2, [pc, #68]	@ (8006f3c <xTimerCreateTimerTask+0x90>)
 8006ef8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006efa:	4b10      	ldr	r3, [pc, #64]	@ (8006f3c <xTimerCreateTimerTask+0x90>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d001      	beq.n	8006f06 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006f02:	2301      	movs	r3, #1
 8006f04:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10b      	bne.n	8006f24 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f10:	f383 8811 	msr	BASEPRI, r3
 8006f14:	f3bf 8f6f 	isb	sy
 8006f18:	f3bf 8f4f 	dsb	sy
 8006f1c:	613b      	str	r3, [r7, #16]
}
 8006f1e:	bf00      	nop
 8006f20:	bf00      	nop
 8006f22:	e7fd      	b.n	8006f20 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006f24:	697b      	ldr	r3, [r7, #20]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3718      	adds	r7, #24
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	200012e8 	.word	0x200012e8
 8006f34:	080080d0 	.word	0x080080d0
 8006f38:	08007079 	.word	0x08007079
 8006f3c:	200012ec 	.word	0x200012ec

08006f40 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b08a      	sub	sp, #40	@ 0x28
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	607a      	str	r2, [r7, #4]
 8006f4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d10b      	bne.n	8006f70 <xTimerGenericCommand+0x30>
	__asm volatile
 8006f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f5c:	f383 8811 	msr	BASEPRI, r3
 8006f60:	f3bf 8f6f 	isb	sy
 8006f64:	f3bf 8f4f 	dsb	sy
 8006f68:	623b      	str	r3, [r7, #32]
}
 8006f6a:	bf00      	nop
 8006f6c:	bf00      	nop
 8006f6e:	e7fd      	b.n	8006f6c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006f70:	4b19      	ldr	r3, [pc, #100]	@ (8006fd8 <xTimerGenericCommand+0x98>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d02a      	beq.n	8006fce <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	2b05      	cmp	r3, #5
 8006f88:	dc18      	bgt.n	8006fbc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006f8a:	f7ff fd95 	bl	8006ab8 <xTaskGetSchedulerState>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d109      	bne.n	8006fa8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006f94:	4b10      	ldr	r3, [pc, #64]	@ (8006fd8 <xTimerGenericCommand+0x98>)
 8006f96:	6818      	ldr	r0, [r3, #0]
 8006f98:	f107 0110 	add.w	r1, r7, #16
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fa0:	f7fe f8e6 	bl	8005170 <xQueueGenericSend>
 8006fa4:	6278      	str	r0, [r7, #36]	@ 0x24
 8006fa6:	e012      	b.n	8006fce <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8006fd8 <xTimerGenericCommand+0x98>)
 8006faa:	6818      	ldr	r0, [r3, #0]
 8006fac:	f107 0110 	add.w	r1, r7, #16
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f7fe f8dc 	bl	8005170 <xQueueGenericSend>
 8006fb8:	6278      	str	r0, [r7, #36]	@ 0x24
 8006fba:	e008      	b.n	8006fce <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006fbc:	4b06      	ldr	r3, [pc, #24]	@ (8006fd8 <xTimerGenericCommand+0x98>)
 8006fbe:	6818      	ldr	r0, [r3, #0]
 8006fc0:	f107 0110 	add.w	r1, r7, #16
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	683a      	ldr	r2, [r7, #0]
 8006fc8:	f7fe f9d4 	bl	8005374 <xQueueGenericSendFromISR>
 8006fcc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3728      	adds	r7, #40	@ 0x28
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	200012e8 	.word	0x200012e8

08006fdc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b088      	sub	sp, #32
 8006fe0:	af02      	add	r7, sp, #8
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fe6:	4b23      	ldr	r3, [pc, #140]	@ (8007074 <prvProcessExpiredTimer+0x98>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	3304      	adds	r3, #4
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7fd fe93 	bl	8004d20 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007000:	f003 0304 	and.w	r3, r3, #4
 8007004:	2b00      	cmp	r3, #0
 8007006:	d023      	beq.n	8007050 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	699a      	ldr	r2, [r3, #24]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	18d1      	adds	r1, r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	683a      	ldr	r2, [r7, #0]
 8007014:	6978      	ldr	r0, [r7, #20]
 8007016:	f000 f8d5 	bl	80071c4 <prvInsertTimerInActiveList>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d020      	beq.n	8007062 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007020:	2300      	movs	r3, #0
 8007022:	9300      	str	r3, [sp, #0]
 8007024:	2300      	movs	r3, #0
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	2100      	movs	r1, #0
 800702a:	6978      	ldr	r0, [r7, #20]
 800702c:	f7ff ff88 	bl	8006f40 <xTimerGenericCommand>
 8007030:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d114      	bne.n	8007062 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800703c:	f383 8811 	msr	BASEPRI, r3
 8007040:	f3bf 8f6f 	isb	sy
 8007044:	f3bf 8f4f 	dsb	sy
 8007048:	60fb      	str	r3, [r7, #12]
}
 800704a:	bf00      	nop
 800704c:	bf00      	nop
 800704e:	e7fd      	b.n	800704c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007056:	f023 0301 	bic.w	r3, r3, #1
 800705a:	b2da      	uxtb	r2, r3
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	6978      	ldr	r0, [r7, #20]
 8007068:	4798      	blx	r3
}
 800706a:	bf00      	nop
 800706c:	3718      	adds	r7, #24
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	200012e0 	.word	0x200012e0

08007078 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007080:	f107 0308 	add.w	r3, r7, #8
 8007084:	4618      	mov	r0, r3
 8007086:	f000 f859 	bl	800713c <prvGetNextExpireTime>
 800708a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	4619      	mov	r1, r3
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f000 f805 	bl	80070a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007096:	f000 f8d7 	bl	8007248 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800709a:	bf00      	nop
 800709c:	e7f0      	b.n	8007080 <prvTimerTask+0x8>
	...

080070a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80070aa:	f7ff f85f 	bl	800616c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80070ae:	f107 0308 	add.w	r3, r7, #8
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 f866 	bl	8007184 <prvSampleTimeNow>
 80070b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d130      	bne.n	8007122 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d10a      	bne.n	80070dc <prvProcessTimerOrBlockTask+0x3c>
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d806      	bhi.n	80070dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80070ce:	f7ff f85b 	bl	8006188 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80070d2:	68f9      	ldr	r1, [r7, #12]
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f7ff ff81 	bl	8006fdc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80070da:	e024      	b.n	8007126 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d008      	beq.n	80070f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80070e2:	4b13      	ldr	r3, [pc, #76]	@ (8007130 <prvProcessTimerOrBlockTask+0x90>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d101      	bne.n	80070f0 <prvProcessTimerOrBlockTask+0x50>
 80070ec:	2301      	movs	r3, #1
 80070ee:	e000      	b.n	80070f2 <prvProcessTimerOrBlockTask+0x52>
 80070f0:	2300      	movs	r3, #0
 80070f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80070f4:	4b0f      	ldr	r3, [pc, #60]	@ (8007134 <prvProcessTimerOrBlockTask+0x94>)
 80070f6:	6818      	ldr	r0, [r3, #0]
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	683a      	ldr	r2, [r7, #0]
 8007100:	4619      	mov	r1, r3
 8007102:	f7fe fd9b 	bl	8005c3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007106:	f7ff f83f 	bl	8006188 <xTaskResumeAll>
 800710a:	4603      	mov	r3, r0
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10a      	bne.n	8007126 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007110:	4b09      	ldr	r3, [pc, #36]	@ (8007138 <prvProcessTimerOrBlockTask+0x98>)
 8007112:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007116:	601a      	str	r2, [r3, #0]
 8007118:	f3bf 8f4f 	dsb	sy
 800711c:	f3bf 8f6f 	isb	sy
}
 8007120:	e001      	b.n	8007126 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007122:	f7ff f831 	bl	8006188 <xTaskResumeAll>
}
 8007126:	bf00      	nop
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	200012e4 	.word	0x200012e4
 8007134:	200012e8 	.word	0x200012e8
 8007138:	e000ed04 	.word	0xe000ed04

0800713c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800713c:	b480      	push	{r7}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007144:	4b0e      	ldr	r3, [pc, #56]	@ (8007180 <prvGetNextExpireTime+0x44>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d101      	bne.n	8007152 <prvGetNextExpireTime+0x16>
 800714e:	2201      	movs	r2, #1
 8007150:	e000      	b.n	8007154 <prvGetNextExpireTime+0x18>
 8007152:	2200      	movs	r2, #0
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d105      	bne.n	800716c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007160:	4b07      	ldr	r3, [pc, #28]	@ (8007180 <prvGetNextExpireTime+0x44>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	60fb      	str	r3, [r7, #12]
 800716a:	e001      	b.n	8007170 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800716c:	2300      	movs	r3, #0
 800716e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007170:	68fb      	ldr	r3, [r7, #12]
}
 8007172:	4618      	mov	r0, r3
 8007174:	3714      	adds	r7, #20
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	200012e0 	.word	0x200012e0

08007184 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800718c:	f7ff f89a 	bl	80062c4 <xTaskGetTickCount>
 8007190:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007192:	4b0b      	ldr	r3, [pc, #44]	@ (80071c0 <prvSampleTimeNow+0x3c>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	429a      	cmp	r2, r3
 800719a:	d205      	bcs.n	80071a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800719c:	f000 f93a 	bl	8007414 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	601a      	str	r2, [r3, #0]
 80071a6:	e002      	b.n	80071ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80071ae:	4a04      	ldr	r2, [pc, #16]	@ (80071c0 <prvSampleTimeNow+0x3c>)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80071b4:	68fb      	ldr	r3, [r7, #12]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	200012f0 	.word	0x200012f0

080071c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b086      	sub	sp, #24
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
 80071d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80071d2:	2300      	movs	r3, #0
 80071d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	68ba      	ldr	r2, [r7, #8]
 80071da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d812      	bhi.n	8007210 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	1ad2      	subs	r2, r2, r3
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d302      	bcc.n	80071fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80071f8:	2301      	movs	r3, #1
 80071fa:	617b      	str	r3, [r7, #20]
 80071fc:	e01b      	b.n	8007236 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80071fe:	4b10      	ldr	r3, [pc, #64]	@ (8007240 <prvInsertTimerInActiveList+0x7c>)
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	3304      	adds	r3, #4
 8007206:	4619      	mov	r1, r3
 8007208:	4610      	mov	r0, r2
 800720a:	f7fd fd50 	bl	8004cae <vListInsert>
 800720e:	e012      	b.n	8007236 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	429a      	cmp	r2, r3
 8007216:	d206      	bcs.n	8007226 <prvInsertTimerInActiveList+0x62>
 8007218:	68ba      	ldr	r2, [r7, #8]
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	429a      	cmp	r2, r3
 800721e:	d302      	bcc.n	8007226 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007220:	2301      	movs	r3, #1
 8007222:	617b      	str	r3, [r7, #20]
 8007224:	e007      	b.n	8007236 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007226:	4b07      	ldr	r3, [pc, #28]	@ (8007244 <prvInsertTimerInActiveList+0x80>)
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	3304      	adds	r3, #4
 800722e:	4619      	mov	r1, r3
 8007230:	4610      	mov	r0, r2
 8007232:	f7fd fd3c 	bl	8004cae <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007236:	697b      	ldr	r3, [r7, #20]
}
 8007238:	4618      	mov	r0, r3
 800723a:	3718      	adds	r7, #24
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	200012e4 	.word	0x200012e4
 8007244:	200012e0 	.word	0x200012e0

08007248 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b08e      	sub	sp, #56	@ 0x38
 800724c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800724e:	e0ce      	b.n	80073ee <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2b00      	cmp	r3, #0
 8007254:	da19      	bge.n	800728a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007256:	1d3b      	adds	r3, r7, #4
 8007258:	3304      	adds	r3, #4
 800725a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800725c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800725e:	2b00      	cmp	r3, #0
 8007260:	d10b      	bne.n	800727a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007266:	f383 8811 	msr	BASEPRI, r3
 800726a:	f3bf 8f6f 	isb	sy
 800726e:	f3bf 8f4f 	dsb	sy
 8007272:	61fb      	str	r3, [r7, #28]
}
 8007274:	bf00      	nop
 8007276:	bf00      	nop
 8007278:	e7fd      	b.n	8007276 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800727a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007280:	6850      	ldr	r0, [r2, #4]
 8007282:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007284:	6892      	ldr	r2, [r2, #8]
 8007286:	4611      	mov	r1, r2
 8007288:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2b00      	cmp	r3, #0
 800728e:	f2c0 80ae 	blt.w	80073ee <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007298:	695b      	ldr	r3, [r3, #20]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d004      	beq.n	80072a8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800729e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a0:	3304      	adds	r3, #4
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fd fd3c 	bl	8004d20 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80072a8:	463b      	mov	r3, r7
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7ff ff6a 	bl	8007184 <prvSampleTimeNow>
 80072b0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2b09      	cmp	r3, #9
 80072b6:	f200 8097 	bhi.w	80073e8 <prvProcessReceivedCommands+0x1a0>
 80072ba:	a201      	add	r2, pc, #4	@ (adr r2, 80072c0 <prvProcessReceivedCommands+0x78>)
 80072bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c0:	080072e9 	.word	0x080072e9
 80072c4:	080072e9 	.word	0x080072e9
 80072c8:	080072e9 	.word	0x080072e9
 80072cc:	0800735f 	.word	0x0800735f
 80072d0:	08007373 	.word	0x08007373
 80072d4:	080073bf 	.word	0x080073bf
 80072d8:	080072e9 	.word	0x080072e9
 80072dc:	080072e9 	.word	0x080072e9
 80072e0:	0800735f 	.word	0x0800735f
 80072e4:	08007373 	.word	0x08007373
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80072e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80072ee:	f043 0301 	orr.w	r3, r3, #1
 80072f2:	b2da      	uxtb	r2, r3
 80072f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80072fa:	68ba      	ldr	r2, [r7, #8]
 80072fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072fe:	699b      	ldr	r3, [r3, #24]
 8007300:	18d1      	adds	r1, r2, r3
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007306:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007308:	f7ff ff5c 	bl	80071c4 <prvInsertTimerInActiveList>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d06c      	beq.n	80073ec <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007314:	6a1b      	ldr	r3, [r3, #32]
 8007316:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007318:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800731a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800731c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007320:	f003 0304 	and.w	r3, r3, #4
 8007324:	2b00      	cmp	r3, #0
 8007326:	d061      	beq.n	80073ec <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	441a      	add	r2, r3
 8007330:	2300      	movs	r3, #0
 8007332:	9300      	str	r3, [sp, #0]
 8007334:	2300      	movs	r3, #0
 8007336:	2100      	movs	r1, #0
 8007338:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800733a:	f7ff fe01 	bl	8006f40 <xTimerGenericCommand>
 800733e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007340:	6a3b      	ldr	r3, [r7, #32]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d152      	bne.n	80073ec <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800734a:	f383 8811 	msr	BASEPRI, r3
 800734e:	f3bf 8f6f 	isb	sy
 8007352:	f3bf 8f4f 	dsb	sy
 8007356:	61bb      	str	r3, [r7, #24]
}
 8007358:	bf00      	nop
 800735a:	bf00      	nop
 800735c:	e7fd      	b.n	800735a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800735e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007360:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007364:	f023 0301 	bic.w	r3, r3, #1
 8007368:	b2da      	uxtb	r2, r3
 800736a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800736c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007370:	e03d      	b.n	80073ee <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007374:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007378:	f043 0301 	orr.w	r3, r3, #1
 800737c:	b2da      	uxtb	r2, r3
 800737e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007380:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007384:	68ba      	ldr	r2, [r7, #8]
 8007386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007388:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800738a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10b      	bne.n	80073aa <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007396:	f383 8811 	msr	BASEPRI, r3
 800739a:	f3bf 8f6f 	isb	sy
 800739e:	f3bf 8f4f 	dsb	sy
 80073a2:	617b      	str	r3, [r7, #20]
}
 80073a4:	bf00      	nop
 80073a6:	bf00      	nop
 80073a8:	e7fd      	b.n	80073a6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80073aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ac:	699a      	ldr	r2, [r3, #24]
 80073ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b0:	18d1      	adds	r1, r2, r3
 80073b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073b8:	f7ff ff04 	bl	80071c4 <prvInsertTimerInActiveList>
					break;
 80073bc:	e017      	b.n	80073ee <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80073be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80073c4:	f003 0302 	and.w	r3, r3, #2
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d103      	bne.n	80073d4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80073cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073ce:	f000 fc0b 	bl	8007be8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80073d2:	e00c      	b.n	80073ee <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80073d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80073da:	f023 0301 	bic.w	r3, r3, #1
 80073de:	b2da      	uxtb	r2, r3
 80073e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80073e6:	e002      	b.n	80073ee <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80073e8:	bf00      	nop
 80073ea:	e000      	b.n	80073ee <prvProcessReceivedCommands+0x1a6>
					break;
 80073ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073ee:	4b08      	ldr	r3, [pc, #32]	@ (8007410 <prvProcessReceivedCommands+0x1c8>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	1d39      	adds	r1, r7, #4
 80073f4:	2200      	movs	r2, #0
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7fe f85a 	bl	80054b0 <xQueueReceive>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	f47f af26 	bne.w	8007250 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007404:	bf00      	nop
 8007406:	bf00      	nop
 8007408:	3730      	adds	r7, #48	@ 0x30
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	200012e8 	.word	0x200012e8

08007414 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b088      	sub	sp, #32
 8007418:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800741a:	e049      	b.n	80074b0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800741c:	4b2e      	ldr	r3, [pc, #184]	@ (80074d8 <prvSwitchTimerLists+0xc4>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007426:	4b2c      	ldr	r3, [pc, #176]	@ (80074d8 <prvSwitchTimerLists+0xc4>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	3304      	adds	r3, #4
 8007434:	4618      	mov	r0, r3
 8007436:	f7fd fc73 	bl	8004d20 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6a1b      	ldr	r3, [r3, #32]
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007448:	f003 0304 	and.w	r3, r3, #4
 800744c:	2b00      	cmp	r3, #0
 800744e:	d02f      	beq.n	80074b0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	699b      	ldr	r3, [r3, #24]
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	4413      	add	r3, r2
 8007458:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800745a:	68ba      	ldr	r2, [r7, #8]
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	429a      	cmp	r2, r3
 8007460:	d90e      	bls.n	8007480 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	68ba      	ldr	r2, [r7, #8]
 8007466:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800746e:	4b1a      	ldr	r3, [pc, #104]	@ (80074d8 <prvSwitchTimerLists+0xc4>)
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	3304      	adds	r3, #4
 8007476:	4619      	mov	r1, r3
 8007478:	4610      	mov	r0, r2
 800747a:	f7fd fc18 	bl	8004cae <vListInsert>
 800747e:	e017      	b.n	80074b0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007480:	2300      	movs	r3, #0
 8007482:	9300      	str	r3, [sp, #0]
 8007484:	2300      	movs	r3, #0
 8007486:	693a      	ldr	r2, [r7, #16]
 8007488:	2100      	movs	r1, #0
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	f7ff fd58 	bl	8006f40 <xTimerGenericCommand>
 8007490:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10b      	bne.n	80074b0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800749c:	f383 8811 	msr	BASEPRI, r3
 80074a0:	f3bf 8f6f 	isb	sy
 80074a4:	f3bf 8f4f 	dsb	sy
 80074a8:	603b      	str	r3, [r7, #0]
}
 80074aa:	bf00      	nop
 80074ac:	bf00      	nop
 80074ae:	e7fd      	b.n	80074ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80074b0:	4b09      	ldr	r3, [pc, #36]	@ (80074d8 <prvSwitchTimerLists+0xc4>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1b0      	bne.n	800741c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80074ba:	4b07      	ldr	r3, [pc, #28]	@ (80074d8 <prvSwitchTimerLists+0xc4>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80074c0:	4b06      	ldr	r3, [pc, #24]	@ (80074dc <prvSwitchTimerLists+0xc8>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a04      	ldr	r2, [pc, #16]	@ (80074d8 <prvSwitchTimerLists+0xc4>)
 80074c6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80074c8:	4a04      	ldr	r2, [pc, #16]	@ (80074dc <prvSwitchTimerLists+0xc8>)
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	6013      	str	r3, [r2, #0]
}
 80074ce:	bf00      	nop
 80074d0:	3718      	adds	r7, #24
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	200012e0 	.word	0x200012e0
 80074dc:	200012e4 	.word	0x200012e4

080074e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80074e6:	f000 f98f 	bl	8007808 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80074ea:	4b15      	ldr	r3, [pc, #84]	@ (8007540 <prvCheckForValidListAndQueue+0x60>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d120      	bne.n	8007534 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80074f2:	4814      	ldr	r0, [pc, #80]	@ (8007544 <prvCheckForValidListAndQueue+0x64>)
 80074f4:	f7fd fb8a 	bl	8004c0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80074f8:	4813      	ldr	r0, [pc, #76]	@ (8007548 <prvCheckForValidListAndQueue+0x68>)
 80074fa:	f7fd fb87 	bl	8004c0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80074fe:	4b13      	ldr	r3, [pc, #76]	@ (800754c <prvCheckForValidListAndQueue+0x6c>)
 8007500:	4a10      	ldr	r2, [pc, #64]	@ (8007544 <prvCheckForValidListAndQueue+0x64>)
 8007502:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007504:	4b12      	ldr	r3, [pc, #72]	@ (8007550 <prvCheckForValidListAndQueue+0x70>)
 8007506:	4a10      	ldr	r2, [pc, #64]	@ (8007548 <prvCheckForValidListAndQueue+0x68>)
 8007508:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800750a:	2300      	movs	r3, #0
 800750c:	9300      	str	r3, [sp, #0]
 800750e:	4b11      	ldr	r3, [pc, #68]	@ (8007554 <prvCheckForValidListAndQueue+0x74>)
 8007510:	4a11      	ldr	r2, [pc, #68]	@ (8007558 <prvCheckForValidListAndQueue+0x78>)
 8007512:	2110      	movs	r1, #16
 8007514:	200a      	movs	r0, #10
 8007516:	f7fd fc97 	bl	8004e48 <xQueueGenericCreateStatic>
 800751a:	4603      	mov	r3, r0
 800751c:	4a08      	ldr	r2, [pc, #32]	@ (8007540 <prvCheckForValidListAndQueue+0x60>)
 800751e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007520:	4b07      	ldr	r3, [pc, #28]	@ (8007540 <prvCheckForValidListAndQueue+0x60>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d005      	beq.n	8007534 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007528:	4b05      	ldr	r3, [pc, #20]	@ (8007540 <prvCheckForValidListAndQueue+0x60>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	490b      	ldr	r1, [pc, #44]	@ (800755c <prvCheckForValidListAndQueue+0x7c>)
 800752e:	4618      	mov	r0, r3
 8007530:	f7fe fb5a 	bl	8005be8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007534:	f000 f99a 	bl	800786c <vPortExitCritical>
}
 8007538:	bf00      	nop
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	200012e8 	.word	0x200012e8
 8007544:	200012b8 	.word	0x200012b8
 8007548:	200012cc 	.word	0x200012cc
 800754c:	200012e0 	.word	0x200012e0
 8007550:	200012e4 	.word	0x200012e4
 8007554:	20001394 	.word	0x20001394
 8007558:	200012f4 	.word	0x200012f4
 800755c:	080080d8 	.word	0x080080d8

08007560 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007560:	b580      	push	{r7, lr}
 8007562:	b08a      	sub	sp, #40	@ 0x28
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
 800756c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800756e:	f06f 0301 	mvn.w	r3, #1
 8007572:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007580:	4b06      	ldr	r3, [pc, #24]	@ (800759c <xTimerPendFunctionCallFromISR+0x3c>)
 8007582:	6818      	ldr	r0, [r3, #0]
 8007584:	f107 0114 	add.w	r1, r7, #20
 8007588:	2300      	movs	r3, #0
 800758a:	683a      	ldr	r2, [r7, #0]
 800758c:	f7fd fef2 	bl	8005374 <xQueueGenericSendFromISR>
 8007590:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8007592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8007594:	4618      	mov	r0, r3
 8007596:	3728      	adds	r7, #40	@ 0x28
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	200012e8 	.word	0x200012e8

080075a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80075a0:	b480      	push	{r7}
 80075a2:	b085      	sub	sp, #20
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	3b04      	subs	r3, #4
 80075b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80075b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	3b04      	subs	r3, #4
 80075be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	f023 0201 	bic.w	r2, r3, #1
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	3b04      	subs	r3, #4
 80075ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80075d0:	4a0c      	ldr	r2, [pc, #48]	@ (8007604 <pxPortInitialiseStack+0x64>)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	3b14      	subs	r3, #20
 80075da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	3b04      	subs	r3, #4
 80075e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f06f 0202 	mvn.w	r2, #2
 80075ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	3b20      	subs	r3, #32
 80075f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80075f6:	68fb      	ldr	r3, [r7, #12]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3714      	adds	r7, #20
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr
 8007604:	08007609 	.word	0x08007609

08007608 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800760e:	2300      	movs	r3, #0
 8007610:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007612:	4b13      	ldr	r3, [pc, #76]	@ (8007660 <prvTaskExitError+0x58>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800761a:	d00b      	beq.n	8007634 <prvTaskExitError+0x2c>
	__asm volatile
 800761c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007620:	f383 8811 	msr	BASEPRI, r3
 8007624:	f3bf 8f6f 	isb	sy
 8007628:	f3bf 8f4f 	dsb	sy
 800762c:	60fb      	str	r3, [r7, #12]
}
 800762e:	bf00      	nop
 8007630:	bf00      	nop
 8007632:	e7fd      	b.n	8007630 <prvTaskExitError+0x28>
	__asm volatile
 8007634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007638:	f383 8811 	msr	BASEPRI, r3
 800763c:	f3bf 8f6f 	isb	sy
 8007640:	f3bf 8f4f 	dsb	sy
 8007644:	60bb      	str	r3, [r7, #8]
}
 8007646:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007648:	bf00      	nop
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d0fc      	beq.n	800764a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007650:	bf00      	nop
 8007652:	bf00      	nop
 8007654:	3714      	adds	r7, #20
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	2000000c 	.word	0x2000000c
	...

08007670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007670:	4b07      	ldr	r3, [pc, #28]	@ (8007690 <pxCurrentTCBConst2>)
 8007672:	6819      	ldr	r1, [r3, #0]
 8007674:	6808      	ldr	r0, [r1, #0]
 8007676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800767a:	f380 8809 	msr	PSP, r0
 800767e:	f3bf 8f6f 	isb	sy
 8007682:	f04f 0000 	mov.w	r0, #0
 8007686:	f380 8811 	msr	BASEPRI, r0
 800768a:	4770      	bx	lr
 800768c:	f3af 8000 	nop.w

08007690 <pxCurrentTCBConst2>:
 8007690:	20000db8 	.word	0x20000db8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007694:	bf00      	nop
 8007696:	bf00      	nop

08007698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007698:	4808      	ldr	r0, [pc, #32]	@ (80076bc <prvPortStartFirstTask+0x24>)
 800769a:	6800      	ldr	r0, [r0, #0]
 800769c:	6800      	ldr	r0, [r0, #0]
 800769e:	f380 8808 	msr	MSP, r0
 80076a2:	f04f 0000 	mov.w	r0, #0
 80076a6:	f380 8814 	msr	CONTROL, r0
 80076aa:	b662      	cpsie	i
 80076ac:	b661      	cpsie	f
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	f3bf 8f6f 	isb	sy
 80076b6:	df00      	svc	0
 80076b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80076ba:	bf00      	nop
 80076bc:	e000ed08 	.word	0xe000ed08

080076c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b086      	sub	sp, #24
 80076c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80076c6:	4b47      	ldr	r3, [pc, #284]	@ (80077e4 <xPortStartScheduler+0x124>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a47      	ldr	r2, [pc, #284]	@ (80077e8 <xPortStartScheduler+0x128>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d10b      	bne.n	80076e8 <xPortStartScheduler+0x28>
	__asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	613b      	str	r3, [r7, #16]
}
 80076e2:	bf00      	nop
 80076e4:	bf00      	nop
 80076e6:	e7fd      	b.n	80076e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80076e8:	4b3e      	ldr	r3, [pc, #248]	@ (80077e4 <xPortStartScheduler+0x124>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a3f      	ldr	r2, [pc, #252]	@ (80077ec <xPortStartScheduler+0x12c>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d10b      	bne.n	800770a <xPortStartScheduler+0x4a>
	__asm volatile
 80076f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	60fb      	str	r3, [r7, #12]
}
 8007704:	bf00      	nop
 8007706:	bf00      	nop
 8007708:	e7fd      	b.n	8007706 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800770a:	4b39      	ldr	r3, [pc, #228]	@ (80077f0 <xPortStartScheduler+0x130>)
 800770c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	b2db      	uxtb	r3, r3
 8007714:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	22ff      	movs	r2, #255	@ 0xff
 800771a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	b2db      	uxtb	r3, r3
 8007722:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007724:	78fb      	ldrb	r3, [r7, #3]
 8007726:	b2db      	uxtb	r3, r3
 8007728:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800772c:	b2da      	uxtb	r2, r3
 800772e:	4b31      	ldr	r3, [pc, #196]	@ (80077f4 <xPortStartScheduler+0x134>)
 8007730:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007732:	4b31      	ldr	r3, [pc, #196]	@ (80077f8 <xPortStartScheduler+0x138>)
 8007734:	2207      	movs	r2, #7
 8007736:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007738:	e009      	b.n	800774e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800773a:	4b2f      	ldr	r3, [pc, #188]	@ (80077f8 <xPortStartScheduler+0x138>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	3b01      	subs	r3, #1
 8007740:	4a2d      	ldr	r2, [pc, #180]	@ (80077f8 <xPortStartScheduler+0x138>)
 8007742:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007744:	78fb      	ldrb	r3, [r7, #3]
 8007746:	b2db      	uxtb	r3, r3
 8007748:	005b      	lsls	r3, r3, #1
 800774a:	b2db      	uxtb	r3, r3
 800774c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800774e:	78fb      	ldrb	r3, [r7, #3]
 8007750:	b2db      	uxtb	r3, r3
 8007752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007756:	2b80      	cmp	r3, #128	@ 0x80
 8007758:	d0ef      	beq.n	800773a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800775a:	4b27      	ldr	r3, [pc, #156]	@ (80077f8 <xPortStartScheduler+0x138>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f1c3 0307 	rsb	r3, r3, #7
 8007762:	2b04      	cmp	r3, #4
 8007764:	d00b      	beq.n	800777e <xPortStartScheduler+0xbe>
	__asm volatile
 8007766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800776a:	f383 8811 	msr	BASEPRI, r3
 800776e:	f3bf 8f6f 	isb	sy
 8007772:	f3bf 8f4f 	dsb	sy
 8007776:	60bb      	str	r3, [r7, #8]
}
 8007778:	bf00      	nop
 800777a:	bf00      	nop
 800777c:	e7fd      	b.n	800777a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800777e:	4b1e      	ldr	r3, [pc, #120]	@ (80077f8 <xPortStartScheduler+0x138>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	021b      	lsls	r3, r3, #8
 8007784:	4a1c      	ldr	r2, [pc, #112]	@ (80077f8 <xPortStartScheduler+0x138>)
 8007786:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007788:	4b1b      	ldr	r3, [pc, #108]	@ (80077f8 <xPortStartScheduler+0x138>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007790:	4a19      	ldr	r2, [pc, #100]	@ (80077f8 <xPortStartScheduler+0x138>)
 8007792:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	b2da      	uxtb	r2, r3
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800779c:	4b17      	ldr	r3, [pc, #92]	@ (80077fc <xPortStartScheduler+0x13c>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a16      	ldr	r2, [pc, #88]	@ (80077fc <xPortStartScheduler+0x13c>)
 80077a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80077a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80077a8:	4b14      	ldr	r3, [pc, #80]	@ (80077fc <xPortStartScheduler+0x13c>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a13      	ldr	r2, [pc, #76]	@ (80077fc <xPortStartScheduler+0x13c>)
 80077ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80077b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80077b4:	f000 f8da 	bl	800796c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80077b8:	4b11      	ldr	r3, [pc, #68]	@ (8007800 <xPortStartScheduler+0x140>)
 80077ba:	2200      	movs	r2, #0
 80077bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80077be:	f000 f8f9 	bl	80079b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80077c2:	4b10      	ldr	r3, [pc, #64]	@ (8007804 <xPortStartScheduler+0x144>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a0f      	ldr	r2, [pc, #60]	@ (8007804 <xPortStartScheduler+0x144>)
 80077c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80077cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80077ce:	f7ff ff63 	bl	8007698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80077d2:	f7fe fe41 	bl	8006458 <vTaskSwitchContext>
	prvTaskExitError();
 80077d6:	f7ff ff17 	bl	8007608 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3718      	adds	r7, #24
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	e000ed00 	.word	0xe000ed00
 80077e8:	410fc271 	.word	0x410fc271
 80077ec:	410fc270 	.word	0x410fc270
 80077f0:	e000e400 	.word	0xe000e400
 80077f4:	200013e4 	.word	0x200013e4
 80077f8:	200013e8 	.word	0x200013e8
 80077fc:	e000ed20 	.word	0xe000ed20
 8007800:	2000000c 	.word	0x2000000c
 8007804:	e000ef34 	.word	0xe000ef34

08007808 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
	__asm volatile
 800780e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007812:	f383 8811 	msr	BASEPRI, r3
 8007816:	f3bf 8f6f 	isb	sy
 800781a:	f3bf 8f4f 	dsb	sy
 800781e:	607b      	str	r3, [r7, #4]
}
 8007820:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007822:	4b10      	ldr	r3, [pc, #64]	@ (8007864 <vPortEnterCritical+0x5c>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	3301      	adds	r3, #1
 8007828:	4a0e      	ldr	r2, [pc, #56]	@ (8007864 <vPortEnterCritical+0x5c>)
 800782a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800782c:	4b0d      	ldr	r3, [pc, #52]	@ (8007864 <vPortEnterCritical+0x5c>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d110      	bne.n	8007856 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007834:	4b0c      	ldr	r3, [pc, #48]	@ (8007868 <vPortEnterCritical+0x60>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	b2db      	uxtb	r3, r3
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00b      	beq.n	8007856 <vPortEnterCritical+0x4e>
	__asm volatile
 800783e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007842:	f383 8811 	msr	BASEPRI, r3
 8007846:	f3bf 8f6f 	isb	sy
 800784a:	f3bf 8f4f 	dsb	sy
 800784e:	603b      	str	r3, [r7, #0]
}
 8007850:	bf00      	nop
 8007852:	bf00      	nop
 8007854:	e7fd      	b.n	8007852 <vPortEnterCritical+0x4a>
	}
}
 8007856:	bf00      	nop
 8007858:	370c      	adds	r7, #12
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop
 8007864:	2000000c 	.word	0x2000000c
 8007868:	e000ed04 	.word	0xe000ed04

0800786c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007872:	4b12      	ldr	r3, [pc, #72]	@ (80078bc <vPortExitCritical+0x50>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10b      	bne.n	8007892 <vPortExitCritical+0x26>
	__asm volatile
 800787a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800787e:	f383 8811 	msr	BASEPRI, r3
 8007882:	f3bf 8f6f 	isb	sy
 8007886:	f3bf 8f4f 	dsb	sy
 800788a:	607b      	str	r3, [r7, #4]
}
 800788c:	bf00      	nop
 800788e:	bf00      	nop
 8007890:	e7fd      	b.n	800788e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007892:	4b0a      	ldr	r3, [pc, #40]	@ (80078bc <vPortExitCritical+0x50>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	3b01      	subs	r3, #1
 8007898:	4a08      	ldr	r2, [pc, #32]	@ (80078bc <vPortExitCritical+0x50>)
 800789a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800789c:	4b07      	ldr	r3, [pc, #28]	@ (80078bc <vPortExitCritical+0x50>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d105      	bne.n	80078b0 <vPortExitCritical+0x44>
 80078a4:	2300      	movs	r3, #0
 80078a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	f383 8811 	msr	BASEPRI, r3
}
 80078ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr
 80078bc:	2000000c 	.word	0x2000000c

080078c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80078c0:	f3ef 8009 	mrs	r0, PSP
 80078c4:	f3bf 8f6f 	isb	sy
 80078c8:	4b15      	ldr	r3, [pc, #84]	@ (8007920 <pxCurrentTCBConst>)
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	f01e 0f10 	tst.w	lr, #16
 80078d0:	bf08      	it	eq
 80078d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80078d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078da:	6010      	str	r0, [r2, #0]
 80078dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80078e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80078e4:	f380 8811 	msr	BASEPRI, r0
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	f3bf 8f6f 	isb	sy
 80078f0:	f7fe fdb2 	bl	8006458 <vTaskSwitchContext>
 80078f4:	f04f 0000 	mov.w	r0, #0
 80078f8:	f380 8811 	msr	BASEPRI, r0
 80078fc:	bc09      	pop	{r0, r3}
 80078fe:	6819      	ldr	r1, [r3, #0]
 8007900:	6808      	ldr	r0, [r1, #0]
 8007902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007906:	f01e 0f10 	tst.w	lr, #16
 800790a:	bf08      	it	eq
 800790c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007910:	f380 8809 	msr	PSP, r0
 8007914:	f3bf 8f6f 	isb	sy
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	f3af 8000 	nop.w

08007920 <pxCurrentTCBConst>:
 8007920:	20000db8 	.word	0x20000db8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007924:	bf00      	nop
 8007926:	bf00      	nop

08007928 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
	__asm volatile
 800792e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007932:	f383 8811 	msr	BASEPRI, r3
 8007936:	f3bf 8f6f 	isb	sy
 800793a:	f3bf 8f4f 	dsb	sy
 800793e:	607b      	str	r3, [r7, #4]
}
 8007940:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007942:	f7fe fccf 	bl	80062e4 <xTaskIncrementTick>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d003      	beq.n	8007954 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800794c:	4b06      	ldr	r3, [pc, #24]	@ (8007968 <xPortSysTickHandler+0x40>)
 800794e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007952:	601a      	str	r2, [r3, #0]
 8007954:	2300      	movs	r3, #0
 8007956:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	f383 8811 	msr	BASEPRI, r3
}
 800795e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007960:	bf00      	nop
 8007962:	3708      	adds	r7, #8
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	e000ed04 	.word	0xe000ed04

0800796c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800796c:	b480      	push	{r7}
 800796e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007970:	4b0b      	ldr	r3, [pc, #44]	@ (80079a0 <vPortSetupTimerInterrupt+0x34>)
 8007972:	2200      	movs	r2, #0
 8007974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007976:	4b0b      	ldr	r3, [pc, #44]	@ (80079a4 <vPortSetupTimerInterrupt+0x38>)
 8007978:	2200      	movs	r2, #0
 800797a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800797c:	4b0a      	ldr	r3, [pc, #40]	@ (80079a8 <vPortSetupTimerInterrupt+0x3c>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a0a      	ldr	r2, [pc, #40]	@ (80079ac <vPortSetupTimerInterrupt+0x40>)
 8007982:	fba2 2303 	umull	r2, r3, r2, r3
 8007986:	099b      	lsrs	r3, r3, #6
 8007988:	4a09      	ldr	r2, [pc, #36]	@ (80079b0 <vPortSetupTimerInterrupt+0x44>)
 800798a:	3b01      	subs	r3, #1
 800798c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800798e:	4b04      	ldr	r3, [pc, #16]	@ (80079a0 <vPortSetupTimerInterrupt+0x34>)
 8007990:	2207      	movs	r2, #7
 8007992:	601a      	str	r2, [r3, #0]
}
 8007994:	bf00      	nop
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	e000e010 	.word	0xe000e010
 80079a4:	e000e018 	.word	0xe000e018
 80079a8:	20000000 	.word	0x20000000
 80079ac:	10624dd3 	.word	0x10624dd3
 80079b0:	e000e014 	.word	0xe000e014

080079b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80079b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80079c4 <vPortEnableVFP+0x10>
 80079b8:	6801      	ldr	r1, [r0, #0]
 80079ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80079be:	6001      	str	r1, [r0, #0]
 80079c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80079c2:	bf00      	nop
 80079c4:	e000ed88 	.word	0xe000ed88

080079c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80079c8:	b480      	push	{r7}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80079ce:	f3ef 8305 	mrs	r3, IPSR
 80079d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2b0f      	cmp	r3, #15
 80079d8:	d915      	bls.n	8007a06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80079da:	4a18      	ldr	r2, [pc, #96]	@ (8007a3c <vPortValidateInterruptPriority+0x74>)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	4413      	add	r3, r2
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80079e4:	4b16      	ldr	r3, [pc, #88]	@ (8007a40 <vPortValidateInterruptPriority+0x78>)
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	7afa      	ldrb	r2, [r7, #11]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d20b      	bcs.n	8007a06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80079ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f2:	f383 8811 	msr	BASEPRI, r3
 80079f6:	f3bf 8f6f 	isb	sy
 80079fa:	f3bf 8f4f 	dsb	sy
 80079fe:	607b      	str	r3, [r7, #4]
}
 8007a00:	bf00      	nop
 8007a02:	bf00      	nop
 8007a04:	e7fd      	b.n	8007a02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007a06:	4b0f      	ldr	r3, [pc, #60]	@ (8007a44 <vPortValidateInterruptPriority+0x7c>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8007a48 <vPortValidateInterruptPriority+0x80>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d90b      	bls.n	8007a2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a1a:	f383 8811 	msr	BASEPRI, r3
 8007a1e:	f3bf 8f6f 	isb	sy
 8007a22:	f3bf 8f4f 	dsb	sy
 8007a26:	603b      	str	r3, [r7, #0]
}
 8007a28:	bf00      	nop
 8007a2a:	bf00      	nop
 8007a2c:	e7fd      	b.n	8007a2a <vPortValidateInterruptPriority+0x62>
	}
 8007a2e:	bf00      	nop
 8007a30:	3714      	adds	r7, #20
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	e000e3f0 	.word	0xe000e3f0
 8007a40:	200013e4 	.word	0x200013e4
 8007a44:	e000ed0c 	.word	0xe000ed0c
 8007a48:	200013e8 	.word	0x200013e8

08007a4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b08a      	sub	sp, #40	@ 0x28
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007a54:	2300      	movs	r3, #0
 8007a56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007a58:	f7fe fb88 	bl	800616c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007a5c:	4b5c      	ldr	r3, [pc, #368]	@ (8007bd0 <pvPortMalloc+0x184>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d101      	bne.n	8007a68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007a64:	f000 f924 	bl	8007cb0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a68:	4b5a      	ldr	r3, [pc, #360]	@ (8007bd4 <pvPortMalloc+0x188>)
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4013      	ands	r3, r2
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f040 8095 	bne.w	8007ba0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d01e      	beq.n	8007aba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007a7c:	2208      	movs	r2, #8
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4413      	add	r3, r2
 8007a82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f003 0307 	and.w	r3, r3, #7
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d015      	beq.n	8007aba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f023 0307 	bic.w	r3, r3, #7
 8007a94:	3308      	adds	r3, #8
 8007a96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f003 0307 	and.w	r3, r3, #7
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00b      	beq.n	8007aba <pvPortMalloc+0x6e>
	__asm volatile
 8007aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa6:	f383 8811 	msr	BASEPRI, r3
 8007aaa:	f3bf 8f6f 	isb	sy
 8007aae:	f3bf 8f4f 	dsb	sy
 8007ab2:	617b      	str	r3, [r7, #20]
}
 8007ab4:	bf00      	nop
 8007ab6:	bf00      	nop
 8007ab8:	e7fd      	b.n	8007ab6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d06f      	beq.n	8007ba0 <pvPortMalloc+0x154>
 8007ac0:	4b45      	ldr	r3, [pc, #276]	@ (8007bd8 <pvPortMalloc+0x18c>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d86a      	bhi.n	8007ba0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007aca:	4b44      	ldr	r3, [pc, #272]	@ (8007bdc <pvPortMalloc+0x190>)
 8007acc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007ace:	4b43      	ldr	r3, [pc, #268]	@ (8007bdc <pvPortMalloc+0x190>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ad4:	e004      	b.n	8007ae0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d903      	bls.n	8007af2 <pvPortMalloc+0xa6>
 8007aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1f1      	bne.n	8007ad6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007af2:	4b37      	ldr	r3, [pc, #220]	@ (8007bd0 <pvPortMalloc+0x184>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d051      	beq.n	8007ba0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007afc:	6a3b      	ldr	r3, [r7, #32]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2208      	movs	r2, #8
 8007b02:	4413      	add	r3, r2
 8007b04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	6a3b      	ldr	r3, [r7, #32]
 8007b0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b10:	685a      	ldr	r2, [r3, #4]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	1ad2      	subs	r2, r2, r3
 8007b16:	2308      	movs	r3, #8
 8007b18:	005b      	lsls	r3, r3, #1
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d920      	bls.n	8007b60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4413      	add	r3, r2
 8007b24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	f003 0307 	and.w	r3, r3, #7
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00b      	beq.n	8007b48 <pvPortMalloc+0xfc>
	__asm volatile
 8007b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b34:	f383 8811 	msr	BASEPRI, r3
 8007b38:	f3bf 8f6f 	isb	sy
 8007b3c:	f3bf 8f4f 	dsb	sy
 8007b40:	613b      	str	r3, [r7, #16]
}
 8007b42:	bf00      	nop
 8007b44:	bf00      	nop
 8007b46:	e7fd      	b.n	8007b44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b4a:	685a      	ldr	r2, [r3, #4]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	1ad2      	subs	r2, r2, r3
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b5a:	69b8      	ldr	r0, [r7, #24]
 8007b5c:	f000 f90a 	bl	8007d74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b60:	4b1d      	ldr	r3, [pc, #116]	@ (8007bd8 <pvPortMalloc+0x18c>)
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	4a1b      	ldr	r2, [pc, #108]	@ (8007bd8 <pvPortMalloc+0x18c>)
 8007b6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8007bd8 <pvPortMalloc+0x18c>)
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	4b1b      	ldr	r3, [pc, #108]	@ (8007be0 <pvPortMalloc+0x194>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d203      	bcs.n	8007b82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b7a:	4b17      	ldr	r3, [pc, #92]	@ (8007bd8 <pvPortMalloc+0x18c>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a18      	ldr	r2, [pc, #96]	@ (8007be0 <pvPortMalloc+0x194>)
 8007b80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b84:	685a      	ldr	r2, [r3, #4]
 8007b86:	4b13      	ldr	r3, [pc, #76]	@ (8007bd4 <pvPortMalloc+0x188>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	431a      	orrs	r2, r3
 8007b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b92:	2200      	movs	r2, #0
 8007b94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007b96:	4b13      	ldr	r3, [pc, #76]	@ (8007be4 <pvPortMalloc+0x198>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	4a11      	ldr	r2, [pc, #68]	@ (8007be4 <pvPortMalloc+0x198>)
 8007b9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007ba0:	f7fe faf2 	bl	8006188 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	f003 0307 	and.w	r3, r3, #7
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00b      	beq.n	8007bc6 <pvPortMalloc+0x17a>
	__asm volatile
 8007bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb2:	f383 8811 	msr	BASEPRI, r3
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	60fb      	str	r3, [r7, #12]
}
 8007bc0:	bf00      	nop
 8007bc2:	bf00      	nop
 8007bc4:	e7fd      	b.n	8007bc2 <pvPortMalloc+0x176>
	return pvReturn;
 8007bc6:	69fb      	ldr	r3, [r7, #28]
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3728      	adds	r7, #40	@ 0x28
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	20004ff4 	.word	0x20004ff4
 8007bd4:	20005008 	.word	0x20005008
 8007bd8:	20004ff8 	.word	0x20004ff8
 8007bdc:	20004fec 	.word	0x20004fec
 8007be0:	20004ffc 	.word	0x20004ffc
 8007be4:	20005000 	.word	0x20005000

08007be8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b086      	sub	sp, #24
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d04f      	beq.n	8007c9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007bfa:	2308      	movs	r3, #8
 8007bfc:	425b      	negs	r3, r3
 8007bfe:	697a      	ldr	r2, [r7, #20]
 8007c00:	4413      	add	r3, r2
 8007c02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	685a      	ldr	r2, [r3, #4]
 8007c0c:	4b25      	ldr	r3, [pc, #148]	@ (8007ca4 <vPortFree+0xbc>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4013      	ands	r3, r2
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d10b      	bne.n	8007c2e <vPortFree+0x46>
	__asm volatile
 8007c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c1a:	f383 8811 	msr	BASEPRI, r3
 8007c1e:	f3bf 8f6f 	isb	sy
 8007c22:	f3bf 8f4f 	dsb	sy
 8007c26:	60fb      	str	r3, [r7, #12]
}
 8007c28:	bf00      	nop
 8007c2a:	bf00      	nop
 8007c2c:	e7fd      	b.n	8007c2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00b      	beq.n	8007c4e <vPortFree+0x66>
	__asm volatile
 8007c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c3a:	f383 8811 	msr	BASEPRI, r3
 8007c3e:	f3bf 8f6f 	isb	sy
 8007c42:	f3bf 8f4f 	dsb	sy
 8007c46:	60bb      	str	r3, [r7, #8]
}
 8007c48:	bf00      	nop
 8007c4a:	bf00      	nop
 8007c4c:	e7fd      	b.n	8007c4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	685a      	ldr	r2, [r3, #4]
 8007c52:	4b14      	ldr	r3, [pc, #80]	@ (8007ca4 <vPortFree+0xbc>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4013      	ands	r3, r2
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d01e      	beq.n	8007c9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d11a      	bne.n	8007c9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	685a      	ldr	r2, [r3, #4]
 8007c68:	4b0e      	ldr	r3, [pc, #56]	@ (8007ca4 <vPortFree+0xbc>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	43db      	mvns	r3, r3
 8007c6e:	401a      	ands	r2, r3
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c74:	f7fe fa7a 	bl	800616c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	685a      	ldr	r2, [r3, #4]
 8007c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8007ca8 <vPortFree+0xc0>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4413      	add	r3, r2
 8007c82:	4a09      	ldr	r2, [pc, #36]	@ (8007ca8 <vPortFree+0xc0>)
 8007c84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c86:	6938      	ldr	r0, [r7, #16]
 8007c88:	f000 f874 	bl	8007d74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007c8c:	4b07      	ldr	r3, [pc, #28]	@ (8007cac <vPortFree+0xc4>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	3301      	adds	r3, #1
 8007c92:	4a06      	ldr	r2, [pc, #24]	@ (8007cac <vPortFree+0xc4>)
 8007c94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007c96:	f7fe fa77 	bl	8006188 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c9a:	bf00      	nop
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	20005008 	.word	0x20005008
 8007ca8:	20004ff8 	.word	0x20004ff8
 8007cac:	20005004 	.word	0x20005004

08007cb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b085      	sub	sp, #20
 8007cb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007cb6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007cba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007cbc:	4b27      	ldr	r3, [pc, #156]	@ (8007d5c <prvHeapInit+0xac>)
 8007cbe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f003 0307 	and.w	r3, r3, #7
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d00c      	beq.n	8007ce4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	3307      	adds	r3, #7
 8007cce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f023 0307 	bic.w	r3, r3, #7
 8007cd6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007cd8:	68ba      	ldr	r2, [r7, #8]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	1ad3      	subs	r3, r2, r3
 8007cde:	4a1f      	ldr	r2, [pc, #124]	@ (8007d5c <prvHeapInit+0xac>)
 8007ce0:	4413      	add	r3, r2
 8007ce2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8007d60 <prvHeapInit+0xb0>)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007cee:	4b1c      	ldr	r3, [pc, #112]	@ (8007d60 <prvHeapInit+0xb0>)
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	68ba      	ldr	r2, [r7, #8]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007cfc:	2208      	movs	r2, #8
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	1a9b      	subs	r3, r3, r2
 8007d02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f023 0307 	bic.w	r3, r3, #7
 8007d0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	4a15      	ldr	r2, [pc, #84]	@ (8007d64 <prvHeapInit+0xb4>)
 8007d10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007d12:	4b14      	ldr	r3, [pc, #80]	@ (8007d64 <prvHeapInit+0xb4>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2200      	movs	r2, #0
 8007d18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007d1a:	4b12      	ldr	r3, [pc, #72]	@ (8007d64 <prvHeapInit+0xb4>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	68fa      	ldr	r2, [r7, #12]
 8007d2a:	1ad2      	subs	r2, r2, r3
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d30:	4b0c      	ldr	r3, [pc, #48]	@ (8007d64 <prvHeapInit+0xb4>)
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	4a0a      	ldr	r2, [pc, #40]	@ (8007d68 <prvHeapInit+0xb8>)
 8007d3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	4a09      	ldr	r2, [pc, #36]	@ (8007d6c <prvHeapInit+0xbc>)
 8007d46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d48:	4b09      	ldr	r3, [pc, #36]	@ (8007d70 <prvHeapInit+0xc0>)
 8007d4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007d4e:	601a      	str	r2, [r3, #0]
}
 8007d50:	bf00      	nop
 8007d52:	3714      	adds	r7, #20
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr
 8007d5c:	200013ec 	.word	0x200013ec
 8007d60:	20004fec 	.word	0x20004fec
 8007d64:	20004ff4 	.word	0x20004ff4
 8007d68:	20004ffc 	.word	0x20004ffc
 8007d6c:	20004ff8 	.word	0x20004ff8
 8007d70:	20005008 	.word	0x20005008

08007d74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007d74:	b480      	push	{r7}
 8007d76:	b085      	sub	sp, #20
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d7c:	4b28      	ldr	r3, [pc, #160]	@ (8007e20 <prvInsertBlockIntoFreeList+0xac>)
 8007d7e:	60fb      	str	r3, [r7, #12]
 8007d80:	e002      	b.n	8007d88 <prvInsertBlockIntoFreeList+0x14>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	60fb      	str	r3, [r7, #12]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d8f7      	bhi.n	8007d82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d108      	bne.n	8007db6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	685a      	ldr	r2, [r3, #4]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	441a      	add	r2, r3
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	68ba      	ldr	r2, [r7, #8]
 8007dc0:	441a      	add	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d118      	bne.n	8007dfc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	4b15      	ldr	r3, [pc, #84]	@ (8007e24 <prvInsertBlockIntoFreeList+0xb0>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d00d      	beq.n	8007df2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	685a      	ldr	r2, [r3, #4]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	441a      	add	r2, r3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	601a      	str	r2, [r3, #0]
 8007df0:	e008      	b.n	8007e04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007df2:	4b0c      	ldr	r3, [pc, #48]	@ (8007e24 <prvInsertBlockIntoFreeList+0xb0>)
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	601a      	str	r2, [r3, #0]
 8007dfa:	e003      	b.n	8007e04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d002      	beq.n	8007e12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e12:	bf00      	nop
 8007e14:	3714      	adds	r7, #20
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	20004fec 	.word	0x20004fec
 8007e24:	20004ff4 	.word	0x20004ff4

08007e28 <memset>:
 8007e28:	4402      	add	r2, r0
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d100      	bne.n	8007e32 <memset+0xa>
 8007e30:	4770      	bx	lr
 8007e32:	f803 1b01 	strb.w	r1, [r3], #1
 8007e36:	e7f9      	b.n	8007e2c <memset+0x4>

08007e38 <_reclaim_reent>:
 8007e38:	4b29      	ldr	r3, [pc, #164]	@ (8007ee0 <_reclaim_reent+0xa8>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4283      	cmp	r3, r0
 8007e3e:	b570      	push	{r4, r5, r6, lr}
 8007e40:	4604      	mov	r4, r0
 8007e42:	d04b      	beq.n	8007edc <_reclaim_reent+0xa4>
 8007e44:	69c3      	ldr	r3, [r0, #28]
 8007e46:	b1ab      	cbz	r3, 8007e74 <_reclaim_reent+0x3c>
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	b16b      	cbz	r3, 8007e68 <_reclaim_reent+0x30>
 8007e4c:	2500      	movs	r5, #0
 8007e4e:	69e3      	ldr	r3, [r4, #28]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	5959      	ldr	r1, [r3, r5]
 8007e54:	2900      	cmp	r1, #0
 8007e56:	d13b      	bne.n	8007ed0 <_reclaim_reent+0x98>
 8007e58:	3504      	adds	r5, #4
 8007e5a:	2d80      	cmp	r5, #128	@ 0x80
 8007e5c:	d1f7      	bne.n	8007e4e <_reclaim_reent+0x16>
 8007e5e:	69e3      	ldr	r3, [r4, #28]
 8007e60:	4620      	mov	r0, r4
 8007e62:	68d9      	ldr	r1, [r3, #12]
 8007e64:	f000 f872 	bl	8007f4c <_free_r>
 8007e68:	69e3      	ldr	r3, [r4, #28]
 8007e6a:	6819      	ldr	r1, [r3, #0]
 8007e6c:	b111      	cbz	r1, 8007e74 <_reclaim_reent+0x3c>
 8007e6e:	4620      	mov	r0, r4
 8007e70:	f000 f86c 	bl	8007f4c <_free_r>
 8007e74:	6961      	ldr	r1, [r4, #20]
 8007e76:	b111      	cbz	r1, 8007e7e <_reclaim_reent+0x46>
 8007e78:	4620      	mov	r0, r4
 8007e7a:	f000 f867 	bl	8007f4c <_free_r>
 8007e7e:	69e1      	ldr	r1, [r4, #28]
 8007e80:	b111      	cbz	r1, 8007e88 <_reclaim_reent+0x50>
 8007e82:	4620      	mov	r0, r4
 8007e84:	f000 f862 	bl	8007f4c <_free_r>
 8007e88:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007e8a:	b111      	cbz	r1, 8007e92 <_reclaim_reent+0x5a>
 8007e8c:	4620      	mov	r0, r4
 8007e8e:	f000 f85d 	bl	8007f4c <_free_r>
 8007e92:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e94:	b111      	cbz	r1, 8007e9c <_reclaim_reent+0x64>
 8007e96:	4620      	mov	r0, r4
 8007e98:	f000 f858 	bl	8007f4c <_free_r>
 8007e9c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007e9e:	b111      	cbz	r1, 8007ea6 <_reclaim_reent+0x6e>
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	f000 f853 	bl	8007f4c <_free_r>
 8007ea6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007ea8:	b111      	cbz	r1, 8007eb0 <_reclaim_reent+0x78>
 8007eaa:	4620      	mov	r0, r4
 8007eac:	f000 f84e 	bl	8007f4c <_free_r>
 8007eb0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007eb2:	b111      	cbz	r1, 8007eba <_reclaim_reent+0x82>
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	f000 f849 	bl	8007f4c <_free_r>
 8007eba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007ebc:	b111      	cbz	r1, 8007ec4 <_reclaim_reent+0x8c>
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	f000 f844 	bl	8007f4c <_free_r>
 8007ec4:	6a23      	ldr	r3, [r4, #32]
 8007ec6:	b14b      	cbz	r3, 8007edc <_reclaim_reent+0xa4>
 8007ec8:	4620      	mov	r0, r4
 8007eca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007ece:	4718      	bx	r3
 8007ed0:	680e      	ldr	r6, [r1, #0]
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	f000 f83a 	bl	8007f4c <_free_r>
 8007ed8:	4631      	mov	r1, r6
 8007eda:	e7bb      	b.n	8007e54 <_reclaim_reent+0x1c>
 8007edc:	bd70      	pop	{r4, r5, r6, pc}
 8007ede:	bf00      	nop
 8007ee0:	20000010 	.word	0x20000010

08007ee4 <__libc_init_array>:
 8007ee4:	b570      	push	{r4, r5, r6, lr}
 8007ee6:	4d0d      	ldr	r5, [pc, #52]	@ (8007f1c <__libc_init_array+0x38>)
 8007ee8:	4c0d      	ldr	r4, [pc, #52]	@ (8007f20 <__libc_init_array+0x3c>)
 8007eea:	1b64      	subs	r4, r4, r5
 8007eec:	10a4      	asrs	r4, r4, #2
 8007eee:	2600      	movs	r6, #0
 8007ef0:	42a6      	cmp	r6, r4
 8007ef2:	d109      	bne.n	8007f08 <__libc_init_array+0x24>
 8007ef4:	4d0b      	ldr	r5, [pc, #44]	@ (8007f24 <__libc_init_array+0x40>)
 8007ef6:	4c0c      	ldr	r4, [pc, #48]	@ (8007f28 <__libc_init_array+0x44>)
 8007ef8:	f000 f87e 	bl	8007ff8 <_init>
 8007efc:	1b64      	subs	r4, r4, r5
 8007efe:	10a4      	asrs	r4, r4, #2
 8007f00:	2600      	movs	r6, #0
 8007f02:	42a6      	cmp	r6, r4
 8007f04:	d105      	bne.n	8007f12 <__libc_init_array+0x2e>
 8007f06:	bd70      	pop	{r4, r5, r6, pc}
 8007f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f0c:	4798      	blx	r3
 8007f0e:	3601      	adds	r6, #1
 8007f10:	e7ee      	b.n	8007ef0 <__libc_init_array+0xc>
 8007f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f16:	4798      	blx	r3
 8007f18:	3601      	adds	r6, #1
 8007f1a:	e7f2      	b.n	8007f02 <__libc_init_array+0x1e>
 8007f1c:	08008350 	.word	0x08008350
 8007f20:	08008350 	.word	0x08008350
 8007f24:	08008350 	.word	0x08008350
 8007f28:	08008354 	.word	0x08008354

08007f2c <__retarget_lock_acquire_recursive>:
 8007f2c:	4770      	bx	lr

08007f2e <__retarget_lock_release_recursive>:
 8007f2e:	4770      	bx	lr

08007f30 <memcpy>:
 8007f30:	440a      	add	r2, r1
 8007f32:	4291      	cmp	r1, r2
 8007f34:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f38:	d100      	bne.n	8007f3c <memcpy+0xc>
 8007f3a:	4770      	bx	lr
 8007f3c:	b510      	push	{r4, lr}
 8007f3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f46:	4291      	cmp	r1, r2
 8007f48:	d1f9      	bne.n	8007f3e <memcpy+0xe>
 8007f4a:	bd10      	pop	{r4, pc}

08007f4c <_free_r>:
 8007f4c:	b538      	push	{r3, r4, r5, lr}
 8007f4e:	4605      	mov	r5, r0
 8007f50:	2900      	cmp	r1, #0
 8007f52:	d041      	beq.n	8007fd8 <_free_r+0x8c>
 8007f54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f58:	1f0c      	subs	r4, r1, #4
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	bfb8      	it	lt
 8007f5e:	18e4      	addlt	r4, r4, r3
 8007f60:	f000 f83e 	bl	8007fe0 <__malloc_lock>
 8007f64:	4a1d      	ldr	r2, [pc, #116]	@ (8007fdc <_free_r+0x90>)
 8007f66:	6813      	ldr	r3, [r2, #0]
 8007f68:	b933      	cbnz	r3, 8007f78 <_free_r+0x2c>
 8007f6a:	6063      	str	r3, [r4, #4]
 8007f6c:	6014      	str	r4, [r2, #0]
 8007f6e:	4628      	mov	r0, r5
 8007f70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f74:	f000 b83a 	b.w	8007fec <__malloc_unlock>
 8007f78:	42a3      	cmp	r3, r4
 8007f7a:	d908      	bls.n	8007f8e <_free_r+0x42>
 8007f7c:	6820      	ldr	r0, [r4, #0]
 8007f7e:	1821      	adds	r1, r4, r0
 8007f80:	428b      	cmp	r3, r1
 8007f82:	bf01      	itttt	eq
 8007f84:	6819      	ldreq	r1, [r3, #0]
 8007f86:	685b      	ldreq	r3, [r3, #4]
 8007f88:	1809      	addeq	r1, r1, r0
 8007f8a:	6021      	streq	r1, [r4, #0]
 8007f8c:	e7ed      	b.n	8007f6a <_free_r+0x1e>
 8007f8e:	461a      	mov	r2, r3
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	b10b      	cbz	r3, 8007f98 <_free_r+0x4c>
 8007f94:	42a3      	cmp	r3, r4
 8007f96:	d9fa      	bls.n	8007f8e <_free_r+0x42>
 8007f98:	6811      	ldr	r1, [r2, #0]
 8007f9a:	1850      	adds	r0, r2, r1
 8007f9c:	42a0      	cmp	r0, r4
 8007f9e:	d10b      	bne.n	8007fb8 <_free_r+0x6c>
 8007fa0:	6820      	ldr	r0, [r4, #0]
 8007fa2:	4401      	add	r1, r0
 8007fa4:	1850      	adds	r0, r2, r1
 8007fa6:	4283      	cmp	r3, r0
 8007fa8:	6011      	str	r1, [r2, #0]
 8007faa:	d1e0      	bne.n	8007f6e <_free_r+0x22>
 8007fac:	6818      	ldr	r0, [r3, #0]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	6053      	str	r3, [r2, #4]
 8007fb2:	4408      	add	r0, r1
 8007fb4:	6010      	str	r0, [r2, #0]
 8007fb6:	e7da      	b.n	8007f6e <_free_r+0x22>
 8007fb8:	d902      	bls.n	8007fc0 <_free_r+0x74>
 8007fba:	230c      	movs	r3, #12
 8007fbc:	602b      	str	r3, [r5, #0]
 8007fbe:	e7d6      	b.n	8007f6e <_free_r+0x22>
 8007fc0:	6820      	ldr	r0, [r4, #0]
 8007fc2:	1821      	adds	r1, r4, r0
 8007fc4:	428b      	cmp	r3, r1
 8007fc6:	bf04      	itt	eq
 8007fc8:	6819      	ldreq	r1, [r3, #0]
 8007fca:	685b      	ldreq	r3, [r3, #4]
 8007fcc:	6063      	str	r3, [r4, #4]
 8007fce:	bf04      	itt	eq
 8007fd0:	1809      	addeq	r1, r1, r0
 8007fd2:	6021      	streq	r1, [r4, #0]
 8007fd4:	6054      	str	r4, [r2, #4]
 8007fd6:	e7ca      	b.n	8007f6e <_free_r+0x22>
 8007fd8:	bd38      	pop	{r3, r4, r5, pc}
 8007fda:	bf00      	nop
 8007fdc:	20005148 	.word	0x20005148

08007fe0 <__malloc_lock>:
 8007fe0:	4801      	ldr	r0, [pc, #4]	@ (8007fe8 <__malloc_lock+0x8>)
 8007fe2:	f7ff bfa3 	b.w	8007f2c <__retarget_lock_acquire_recursive>
 8007fe6:	bf00      	nop
 8007fe8:	20005144 	.word	0x20005144

08007fec <__malloc_unlock>:
 8007fec:	4801      	ldr	r0, [pc, #4]	@ (8007ff4 <__malloc_unlock+0x8>)
 8007fee:	f7ff bf9e 	b.w	8007f2e <__retarget_lock_release_recursive>
 8007ff2:	bf00      	nop
 8007ff4:	20005144 	.word	0x20005144

08007ff8 <_init>:
 8007ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ffa:	bf00      	nop
 8007ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ffe:	bc08      	pop	{r3}
 8008000:	469e      	mov	lr, r3
 8008002:	4770      	bx	lr

08008004 <_fini>:
 8008004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008006:	bf00      	nop
 8008008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800800a:	bc08      	pop	{r3}
 800800c:	469e      	mov	lr, r3
 800800e:	4770      	bx	lr
