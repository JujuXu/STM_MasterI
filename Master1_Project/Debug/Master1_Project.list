
Master1_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007674  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08007844  08007844  00008844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a48  08007a48  00009014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007a48  08007a48  00008a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a50  08007a50  00009014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a50  08007a50  00008a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a54  08007a54  00008a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08007a58  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f14  20000014  08007a6c  00009014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004f28  08007a6c  00009f28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d634  00000000  00000000  00009044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004752  00000000  00000000  00026678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001970  00000000  00000000  0002add0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013a0  00000000  00000000  0002c740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002528f  00000000  00000000  0002dae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e716  00000000  00000000  00052d6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddfee  00000000  00000000  00071485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014f473  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a70  00000000  00000000  0014f4b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00155f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000014 	.word	0x20000014
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800782c 	.word	0x0800782c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000018 	.word	0x20000018
 800020c:	0800782c 	.word	0x0800782c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b988 	b.w	8000538 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	468e      	mov	lr, r1
 8000248:	4604      	mov	r4, r0
 800024a:	4688      	mov	r8, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d962      	bls.n	800031c <__udivmoddi4+0xdc>
 8000256:	fab2 f682 	clz	r6, r2
 800025a:	b14e      	cbz	r6, 8000270 <__udivmoddi4+0x30>
 800025c:	f1c6 0320 	rsb	r3, r6, #32
 8000260:	fa01 f806 	lsl.w	r8, r1, r6
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	40b7      	lsls	r7, r6
 800026a:	ea43 0808 	orr.w	r8, r3, r8
 800026e:	40b4      	lsls	r4, r6
 8000270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000274:	fa1f fc87 	uxth.w	ip, r7
 8000278:	fbb8 f1fe 	udiv	r1, r8, lr
 800027c:	0c23      	lsrs	r3, r4, #16
 800027e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000282:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000286:	fb01 f20c 	mul.w	r2, r1, ip
 800028a:	429a      	cmp	r2, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f101 30ff 	add.w	r0, r1, #4294967295
 8000294:	f080 80ea 	bcs.w	800046c <__udivmoddi4+0x22c>
 8000298:	429a      	cmp	r2, r3
 800029a:	f240 80e7 	bls.w	800046c <__udivmoddi4+0x22c>
 800029e:	3902      	subs	r1, #2
 80002a0:	443b      	add	r3, r7
 80002a2:	1a9a      	subs	r2, r3, r2
 80002a4:	b2a3      	uxth	r3, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b6:	459c      	cmp	ip, r3
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0x8e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c0:	f080 80d6 	bcs.w	8000470 <__udivmoddi4+0x230>
 80002c4:	459c      	cmp	ip, r3
 80002c6:	f240 80d3 	bls.w	8000470 <__udivmoddi4+0x230>
 80002ca:	443b      	add	r3, r7
 80002cc:	3802      	subs	r0, #2
 80002ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d2:	eba3 030c 	sub.w	r3, r3, ip
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11d      	cbz	r5, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40f3      	lsrs	r3, r6
 80002dc:	2200      	movs	r2, #0
 80002de:	e9c5 3200 	strd	r3, r2, [r5]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d905      	bls.n	80002f6 <__udivmoddi4+0xb6>
 80002ea:	b10d      	cbz	r5, 80002f0 <__udivmoddi4+0xb0>
 80002ec:	e9c5 0100 	strd	r0, r1, [r5]
 80002f0:	2100      	movs	r1, #0
 80002f2:	4608      	mov	r0, r1
 80002f4:	e7f5      	b.n	80002e2 <__udivmoddi4+0xa2>
 80002f6:	fab3 f183 	clz	r1, r3
 80002fa:	2900      	cmp	r1, #0
 80002fc:	d146      	bne.n	800038c <__udivmoddi4+0x14c>
 80002fe:	4573      	cmp	r3, lr
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xc8>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 8105 	bhi.w	8000512 <__udivmoddi4+0x2d2>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb6e 0203 	sbc.w	r2, lr, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4690      	mov	r8, r2
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e5      	beq.n	80002e2 <__udivmoddi4+0xa2>
 8000316:	e9c5 4800 	strd	r4, r8, [r5]
 800031a:	e7e2      	b.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	2a00      	cmp	r2, #0
 800031e:	f000 8090 	beq.w	8000442 <__udivmoddi4+0x202>
 8000322:	fab2 f682 	clz	r6, r2
 8000326:	2e00      	cmp	r6, #0
 8000328:	f040 80a4 	bne.w	8000474 <__udivmoddi4+0x234>
 800032c:	1a8a      	subs	r2, r1, r2
 800032e:	0c03      	lsrs	r3, r0, #16
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	b280      	uxth	r0, r0
 8000336:	b2bc      	uxth	r4, r7
 8000338:	2101      	movs	r1, #1
 800033a:	fbb2 fcfe 	udiv	ip, r2, lr
 800033e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000346:	fb04 f20c 	mul.w	r2, r4, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d907      	bls.n	800035e <__udivmoddi4+0x11e>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x11c>
 8000356:	429a      	cmp	r2, r3
 8000358:	f200 80e0 	bhi.w	800051c <__udivmoddi4+0x2dc>
 800035c:	46c4      	mov	ip, r8
 800035e:	1a9b      	subs	r3, r3, r2
 8000360:	fbb3 f2fe 	udiv	r2, r3, lr
 8000364:	fb0e 3312 	mls	r3, lr, r2, r3
 8000368:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800036c:	fb02 f404 	mul.w	r4, r2, r4
 8000370:	429c      	cmp	r4, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x144>
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	f102 30ff 	add.w	r0, r2, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x142>
 800037c:	429c      	cmp	r4, r3
 800037e:	f200 80ca 	bhi.w	8000516 <__udivmoddi4+0x2d6>
 8000382:	4602      	mov	r2, r0
 8000384:	1b1b      	subs	r3, r3, r4
 8000386:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0x98>
 800038c:	f1c1 0620 	rsb	r6, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 f706 	lsr.w	r7, r2, r6
 8000396:	431f      	orrs	r7, r3
 8000398:	fa0e f401 	lsl.w	r4, lr, r1
 800039c:	fa20 f306 	lsr.w	r3, r0, r6
 80003a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	fa1f fc87 	uxth.w	ip, r7
 80003b2:	fbbe f0f9 	udiv	r0, lr, r9
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x1a0>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d2:	f080 809c 	bcs.w	800050e <__udivmoddi4+0x2ce>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	f240 8099 	bls.w	800050e <__udivmoddi4+0x2ce>
 80003dc:	3802      	subs	r0, #2
 80003de:	443c      	add	r4, r7
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	fa1f fe83 	uxth.w	lr, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1ce>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000402:	f080 8082 	bcs.w	800050a <__udivmoddi4+0x2ca>
 8000406:	45a4      	cmp	ip, r4
 8000408:	d97f      	bls.n	800050a <__udivmoddi4+0x2ca>
 800040a:	3b02      	subs	r3, #2
 800040c:	443c      	add	r4, r7
 800040e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	fba0 ec02 	umull	lr, ip, r0, r2
 800041a:	4564      	cmp	r4, ip
 800041c:	4673      	mov	r3, lr
 800041e:	46e1      	mov	r9, ip
 8000420:	d362      	bcc.n	80004e8 <__udivmoddi4+0x2a8>
 8000422:	d05f      	beq.n	80004e4 <__udivmoddi4+0x2a4>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x1fe>
 8000426:	ebb8 0203 	subs.w	r2, r8, r3
 800042a:	eb64 0409 	sbc.w	r4, r4, r9
 800042e:	fa04 f606 	lsl.w	r6, r4, r6
 8000432:	fa22 f301 	lsr.w	r3, r2, r1
 8000436:	431e      	orrs	r6, r3
 8000438:	40cc      	lsrs	r4, r1
 800043a:	e9c5 6400 	strd	r6, r4, [r5]
 800043e:	2100      	movs	r1, #0
 8000440:	e74f      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000442:	fbb1 fcf2 	udiv	ip, r1, r2
 8000446:	0c01      	lsrs	r1, r0, #16
 8000448:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800044c:	b280      	uxth	r0, r0
 800044e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000452:	463b      	mov	r3, r7
 8000454:	4638      	mov	r0, r7
 8000456:	463c      	mov	r4, r7
 8000458:	46b8      	mov	r8, r7
 800045a:	46be      	mov	lr, r7
 800045c:	2620      	movs	r6, #32
 800045e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000462:	eba2 0208 	sub.w	r2, r2, r8
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	e766      	b.n	800033a <__udivmoddi4+0xfa>
 800046c:	4601      	mov	r1, r0
 800046e:	e718      	b.n	80002a2 <__udivmoddi4+0x62>
 8000470:	4610      	mov	r0, r2
 8000472:	e72c      	b.n	80002ce <__udivmoddi4+0x8e>
 8000474:	f1c6 0220 	rsb	r2, r6, #32
 8000478:	fa2e f302 	lsr.w	r3, lr, r2
 800047c:	40b7      	lsls	r7, r6
 800047e:	40b1      	lsls	r1, r6
 8000480:	fa20 f202 	lsr.w	r2, r0, r2
 8000484:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000488:	430a      	orrs	r2, r1
 800048a:	fbb3 f8fe 	udiv	r8, r3, lr
 800048e:	b2bc      	uxth	r4, r7
 8000490:	fb0e 3318 	mls	r3, lr, r8, r3
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb08 f904 	mul.w	r9, r8, r4
 800049e:	40b0      	lsls	r0, r6
 80004a0:	4589      	cmp	r9, r1
 80004a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004a6:	b280      	uxth	r0, r0
 80004a8:	d93e      	bls.n	8000528 <__udivmoddi4+0x2e8>
 80004aa:	1879      	adds	r1, r7, r1
 80004ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b0:	d201      	bcs.n	80004b6 <__udivmoddi4+0x276>
 80004b2:	4589      	cmp	r9, r1
 80004b4:	d81f      	bhi.n	80004f6 <__udivmoddi4+0x2b6>
 80004b6:	eba1 0109 	sub.w	r1, r1, r9
 80004ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80004be:	fb09 f804 	mul.w	r8, r9, r4
 80004c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004c6:	b292      	uxth	r2, r2
 80004c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d229      	bcs.n	8000524 <__udivmoddi4+0x2e4>
 80004d0:	18ba      	adds	r2, r7, r2
 80004d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004d6:	d2c4      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004d8:	4542      	cmp	r2, r8
 80004da:	d2c2      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004dc:	f1a9 0102 	sub.w	r1, r9, #2
 80004e0:	443a      	add	r2, r7
 80004e2:	e7be      	b.n	8000462 <__udivmoddi4+0x222>
 80004e4:	45f0      	cmp	r8, lr
 80004e6:	d29d      	bcs.n	8000424 <__udivmoddi4+0x1e4>
 80004e8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f0:	3801      	subs	r0, #1
 80004f2:	46e1      	mov	r9, ip
 80004f4:	e796      	b.n	8000424 <__udivmoddi4+0x1e4>
 80004f6:	eba7 0909 	sub.w	r9, r7, r9
 80004fa:	4449      	add	r1, r9
 80004fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000500:	fbb1 f9fe 	udiv	r9, r1, lr
 8000504:	fb09 f804 	mul.w	r8, r9, r4
 8000508:	e7db      	b.n	80004c2 <__udivmoddi4+0x282>
 800050a:	4673      	mov	r3, lr
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1ce>
 800050e:	4650      	mov	r0, sl
 8000510:	e766      	b.n	80003e0 <__udivmoddi4+0x1a0>
 8000512:	4608      	mov	r0, r1
 8000514:	e6fd      	b.n	8000312 <__udivmoddi4+0xd2>
 8000516:	443b      	add	r3, r7
 8000518:	3a02      	subs	r2, #2
 800051a:	e733      	b.n	8000384 <__udivmoddi4+0x144>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	443b      	add	r3, r7
 8000522:	e71c      	b.n	800035e <__udivmoddi4+0x11e>
 8000524:	4649      	mov	r1, r9
 8000526:	e79c      	b.n	8000462 <__udivmoddi4+0x222>
 8000528:	eba1 0109 	sub.w	r1, r1, r9
 800052c:	46c4      	mov	ip, r8
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	e7c4      	b.n	80004c2 <__udivmoddi4+0x282>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <encoder_update>:
void encoder_init(void) {
    ticks = 0;
    steps = 0;
}

void encoder_update(void) {
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
    static int16_t last = 0;
    int16_t current = __HAL_TIM_GET_COUNTER(&htim4); // no mutex required, not a ressource, just a register read
 8000542:	4b38      	ldr	r3, [pc, #224]	@ (8000624 <encoder_update+0xe8>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000548:	817b      	strh	r3, [r7, #10]
    int16_t delta = current - last;
 800054a:	897a      	ldrh	r2, [r7, #10]
 800054c:	4b36      	ldr	r3, [pc, #216]	@ (8000628 <encoder_update+0xec>)
 800054e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000552:	b29b      	uxth	r3, r3
 8000554:	1ad3      	subs	r3, r2, r3
 8000556:	b29b      	uxth	r3, r3
 8000558:	81fb      	strh	r3, [r7, #14]
    last = current;
 800055a:	4a33      	ldr	r2, [pc, #204]	@ (8000628 <encoder_update+0xec>)
 800055c:	897b      	ldrh	r3, [r7, #10]
 800055e:	8013      	strh	r3, [r2, #0]

    // Inversion du sens si nécessaire
    if (is_reversed)
 8000560:	4b32      	ldr	r3, [pc, #200]	@ (800062c <encoder_update+0xf0>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d003      	beq.n	8000570 <encoder_update+0x34>
        delta = -delta;
 8000568:	89fb      	ldrh	r3, [r7, #14]
 800056a:	425b      	negs	r3, r3
 800056c:	b29b      	uxth	r3, r3
 800056e:	81fb      	strh	r3, [r7, #14]

    ticks += delta;
 8000570:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000574:	4b2e      	ldr	r3, [pc, #184]	@ (8000630 <encoder_update+0xf4>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4413      	add	r3, r2
 800057a:	4a2d      	ldr	r2, [pc, #180]	@ (8000630 <encoder_update+0xf4>)
 800057c:	6013      	str	r3, [r2, #0]
    int16_t new_steps = (int16_t)(ticks / 4);
 800057e:	4b2c      	ldr	r3, [pc, #176]	@ (8000630 <encoder_update+0xf4>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2b00      	cmp	r3, #0
 8000584:	da00      	bge.n	8000588 <encoder_update+0x4c>
 8000586:	3303      	adds	r3, #3
 8000588:	109b      	asrs	r3, r3, #2
 800058a:	81bb      	strh	r3, [r7, #12]

    if (is_cyclic) {
 800058c:	4b29      	ldr	r3, [pc, #164]	@ (8000634 <encoder_update+0xf8>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d02a      	beq.n	80005ea <encoder_update+0xae>
    	 int32_t range = max - min + 1;
 8000594:	4b28      	ldr	r3, [pc, #160]	@ (8000638 <encoder_update+0xfc>)
 8000596:	f9b3 3000 	ldrsh.w	r3, [r3]
 800059a:	461a      	mov	r2, r3
 800059c:	4b27      	ldr	r3, [pc, #156]	@ (800063c <encoder_update+0x100>)
 800059e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005a2:	1ad3      	subs	r3, r2, r3
 80005a4:	3301      	adds	r3, #1
 80005a6:	607b      	str	r3, [r7, #4]
    	 steps = ((new_steps - min) % range + range) % range + min;
 80005a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80005ac:	4a23      	ldr	r2, [pc, #140]	@ (800063c <encoder_update+0x100>)
 80005ae:	f9b2 2000 	ldrsh.w	r2, [r2]
 80005b2:	1a9b      	subs	r3, r3, r2
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	fb93 f2f2 	sdiv	r2, r3, r2
 80005ba:	6879      	ldr	r1, [r7, #4]
 80005bc:	fb01 f202 	mul.w	r2, r1, r2
 80005c0:	1a9a      	subs	r2, r3, r2
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4413      	add	r3, r2
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	fb93 f2f2 	sdiv	r2, r3, r2
 80005cc:	6879      	ldr	r1, [r7, #4]
 80005ce:	fb01 f202 	mul.w	r2, r1, r2
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	4b19      	ldr	r3, [pc, #100]	@ (800063c <encoder_update+0x100>)
 80005d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005dc:	b29b      	uxth	r3, r3
 80005de:	4413      	add	r3, r2
 80005e0:	b29b      	uxth	r3, r3
 80005e2:	b21a      	sxth	r2, r3
 80005e4:	4b16      	ldr	r3, [pc, #88]	@ (8000640 <encoder_update+0x104>)
 80005e6:	801a      	strh	r2, [r3, #0]
    } else {
        if (new_steps < min) new_steps = min;
        if (new_steps > max) new_steps = max;
        steps = new_steps;
    }
}
 80005e8:	e016      	b.n	8000618 <encoder_update+0xdc>
        if (new_steps < min) new_steps = min;
 80005ea:	4b14      	ldr	r3, [pc, #80]	@ (800063c <encoder_update+0x100>)
 80005ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005f0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	da02      	bge.n	80005fe <encoder_update+0xc2>
 80005f8:	4b10      	ldr	r3, [pc, #64]	@ (800063c <encoder_update+0x100>)
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	81bb      	strh	r3, [r7, #12]
        if (new_steps > max) new_steps = max;
 80005fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000638 <encoder_update+0xfc>)
 8000600:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000604:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000608:	429a      	cmp	r2, r3
 800060a:	dd02      	ble.n	8000612 <encoder_update+0xd6>
 800060c:	4b0a      	ldr	r3, [pc, #40]	@ (8000638 <encoder_update+0xfc>)
 800060e:	881b      	ldrh	r3, [r3, #0]
 8000610:	81bb      	strh	r3, [r7, #12]
        steps = new_steps;
 8000612:	4a0b      	ldr	r2, [pc, #44]	@ (8000640 <encoder_update+0x104>)
 8000614:	89bb      	ldrh	r3, [r7, #12]
 8000616:	8013      	strh	r3, [r2, #0]
}
 8000618:	bf00      	nop
 800061a:	3714      	adds	r7, #20
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	20000060 	.word	0x20000060
 8000628:	2000003a 	.word	0x2000003a
 800062c:	20000038 	.word	0x20000038
 8000630:	20000030 	.word	0x20000030
 8000634:	20000002 	.word	0x20000002
 8000638:	20000000 	.word	0x20000000
 800063c:	20000036 	.word	0x20000036
 8000640:	20000034 	.word	0x20000034

08000644 <encoder_get_steps>:

int32_t encoder_get_ticks(void) {
    return ticks;
}

int16_t encoder_get_steps(void) {
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
    return steps;
 8000648:	4b03      	ldr	r3, [pc, #12]	@ (8000658 <encoder_get_steps+0x14>)
 800064a:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800064e:	4618      	mov	r0, r3
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	20000034 	.word	0x20000034

0800065c <encoder_set_min>:

void encoder_set_min(int16_t min_val) {
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	80fb      	strh	r3, [r7, #6]
    min = min_val;
 8000666:	4a04      	ldr	r2, [pc, #16]	@ (8000678 <encoder_set_min+0x1c>)
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	8013      	strh	r3, [r2, #0]
}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	20000036 	.word	0x20000036

0800067c <encoder_set_max>:

void encoder_set_max(int16_t max_val) {
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	80fb      	strh	r3, [r7, #6]
    max = max_val;
 8000686:	4a04      	ldr	r2, [pc, #16]	@ (8000698 <encoder_set_max+0x1c>)
 8000688:	88fb      	ldrh	r3, [r7, #6]
 800068a:	8013      	strh	r3, [r2, #0]
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	20000000 	.word	0x20000000

0800069c <encoder_reset_position>:

void encoder_reset_position(void) {
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
    ticks = 0;
 80006a0:	4b05      	ldr	r3, [pc, #20]	@ (80006b8 <encoder_reset_position+0x1c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
    steps = 0;
 80006a6:	4b05      	ldr	r3, [pc, #20]	@ (80006bc <encoder_reset_position+0x20>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	801a      	strh	r2, [r3, #0]
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	20000030 	.word	0x20000030
 80006bc:	20000034 	.word	0x20000034

080006c0 <encoder_button_update>:

void encoder_set_direction(bool reverse) {
    is_reversed = reverse;
}

void encoder_button_update(void) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
	static bool last_state = true;
	bool current = HAL_GPIO_ReadPin(ENC_BUTT_GPIO_Port, ENC_BUTT_Pin) == GPIO_PIN_RESET;
 80006c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006ca:	4813      	ldr	r0, [pc, #76]	@ (8000718 <encoder_button_update+0x58>)
 80006cc:	f001 fa48 	bl	8001b60 <HAL_GPIO_ReadPin>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	bf0c      	ite	eq
 80006d6:	2301      	moveq	r3, #1
 80006d8:	2300      	movne	r3, #0
 80006da:	71fb      	strb	r3, [r7, #7]
	if (current && !last_state) {
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d00d      	beq.n	80006fe <encoder_button_update+0x3e>
 80006e2:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <encoder_button_update+0x5c>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	f083 0301 	eor.w	r3, r3, #1
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d006      	beq.n	80006fe <encoder_button_update+0x3e>
		last_state = true;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	@ (800071c <encoder_button_update+0x5c>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	701a      	strb	r2, [r3, #0]
		button = true;
 80006f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000720 <encoder_button_update+0x60>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
		osDelay(50);
	} else {
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
	}*/
}
 80006fc:	e008      	b.n	8000710 <encoder_button_update+0x50>
	} else if (!current) {
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	f083 0301 	eor.w	r3, r3, #1
 8000704:	b2db      	uxtb	r3, r3
 8000706:	2b00      	cmp	r3, #0
 8000708:	d002      	beq.n	8000710 <encoder_button_update+0x50>
		last_state = false;
 800070a:	4b04      	ldr	r3, [pc, #16]	@ (800071c <encoder_button_update+0x5c>)
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40020c00 	.word	0x40020c00
 800071c:	20000003 	.word	0x20000003
 8000720:	20000039 	.word	0x20000039

08000724 <encoder_get_button>:

bool encoder_get_button(void) {
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
	if (button) {
 8000728:	4b08      	ldr	r3, [pc, #32]	@ (800074c <encoder_get_button+0x28>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	b2db      	uxtb	r3, r3
 800072e:	2b00      	cmp	r3, #0
 8000730:	d004      	beq.n	800073c <encoder_get_button+0x18>
		button = false;
 8000732:	4b06      	ldr	r3, [pc, #24]	@ (800074c <encoder_get_button+0x28>)
 8000734:	2200      	movs	r2, #0
 8000736:	701a      	strb	r2, [r3, #0]

		/*HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
		osDelay(50);
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);*/

		return true;
 8000738:	2301      	movs	r3, #1
 800073a:	e002      	b.n	8000742 <encoder_get_button+0x1e>
	}

	return button;
 800073c:	4b03      	ldr	r3, [pc, #12]	@ (800074c <encoder_get_button+0x28>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	b2db      	uxtb	r3, r3
}
 8000742:	4618      	mov	r0, r3
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	20000039 	.word	0x20000039

08000750 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000754:	4a1d      	ldr	r2, [pc, #116]	@ (80007cc <MX_FREERTOS_Init+0x7c>)
 8000756:	2100      	movs	r1, #0
 8000758:	481d      	ldr	r0, [pc, #116]	@ (80007d0 <MX_FREERTOS_Init+0x80>)
 800075a:	f003 fe73 	bl	8004444 <osThreadNew>
 800075e:	4603      	mov	r3, r0
 8000760:	4a1c      	ldr	r2, [pc, #112]	@ (80007d4 <MX_FREERTOS_Init+0x84>)
 8000762:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(encoder, NULL, &encoderTask_attributes);
 8000764:	4a1c      	ldr	r2, [pc, #112]	@ (80007d8 <MX_FREERTOS_Init+0x88>)
 8000766:	2100      	movs	r1, #0
 8000768:	481c      	ldr	r0, [pc, #112]	@ (80007dc <MX_FREERTOS_Init+0x8c>)
 800076a:	f003 fe6b 	bl	8004444 <osThreadNew>
 800076e:	4603      	mov	r3, r0
 8000770:	4a1b      	ldr	r2, [pc, #108]	@ (80007e0 <MX_FREERTOS_Init+0x90>)
 8000772:	6013      	str	r3, [r2, #0]

  /* creation of SM_Task */
  SM_TaskHandle = osThreadNew(StateMachine, NULL, &SM_Task_attributes);
 8000774:	4a1b      	ldr	r2, [pc, #108]	@ (80007e4 <MX_FREERTOS_Init+0x94>)
 8000776:	2100      	movs	r1, #0
 8000778:	481b      	ldr	r0, [pc, #108]	@ (80007e8 <MX_FREERTOS_Init+0x98>)
 800077a:	f003 fe63 	bl	8004444 <osThreadNew>
 800077e:	4603      	mov	r3, r0
 8000780:	4a1a      	ldr	r2, [pc, #104]	@ (80007ec <MX_FREERTOS_Init+0x9c>)
 8000782:	6013      	str	r3, [r2, #0]

  /* creation of ledsTask */
  ledsTaskHandle = osThreadNew(leds, NULL, &ledsTask_attributes);
 8000784:	4a1a      	ldr	r2, [pc, #104]	@ (80007f0 <MX_FREERTOS_Init+0xa0>)
 8000786:	2100      	movs	r1, #0
 8000788:	481a      	ldr	r0, [pc, #104]	@ (80007f4 <MX_FREERTOS_Init+0xa4>)
 800078a:	f003 fe5b 	bl	8004444 <osThreadNew>
 800078e:	4603      	mov	r3, r0
 8000790:	4a19      	ldr	r2, [pc, #100]	@ (80007f8 <MX_FREERTOS_Init+0xa8>)
 8000792:	6013      	str	r3, [r2, #0]

  /* creation of infoFuncTask */
  infoFuncTaskHandle = osThreadNew(infoFunc, NULL, &infoFuncTask_attributes);
 8000794:	4a19      	ldr	r2, [pc, #100]	@ (80007fc <MX_FREERTOS_Init+0xac>)
 8000796:	2100      	movs	r1, #0
 8000798:	4819      	ldr	r0, [pc, #100]	@ (8000800 <MX_FREERTOS_Init+0xb0>)
 800079a:	f003 fe53 	bl	8004444 <osThreadNew>
 800079e:	4603      	mov	r3, r0
 80007a0:	4a18      	ldr	r2, [pc, #96]	@ (8000804 <MX_FREERTOS_Init+0xb4>)
 80007a2:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of smEvent */
  smEventHandle = osEventFlagsNew(&smEvent_attributes);
 80007a4:	4818      	ldr	r0, [pc, #96]	@ (8000808 <MX_FREERTOS_Init+0xb8>)
 80007a6:	f003 fefa 	bl	800459e <osEventFlagsNew>
 80007aa:	4603      	mov	r3, r0
 80007ac:	4a17      	ldr	r2, [pc, #92]	@ (800080c <MX_FREERTOS_Init+0xbc>)
 80007ae:	6013      	str	r3, [r2, #0]

  /* creation of funcEvent */
  funcEventHandle = osEventFlagsNew(&funcEvent_attributes);
 80007b0:	4817      	ldr	r0, [pc, #92]	@ (8000810 <MX_FREERTOS_Init+0xc0>)
 80007b2:	f003 fef4 	bl	800459e <osEventFlagsNew>
 80007b6:	4603      	mov	r3, r0
 80007b8:	4a16      	ldr	r2, [pc, #88]	@ (8000814 <MX_FREERTOS_Init+0xc4>)
 80007ba:	6013      	str	r3, [r2, #0]

  /* creation of ledEvent */
  ledEventHandle = osEventFlagsNew(&ledEvent_attributes);
 80007bc:	4816      	ldr	r0, [pc, #88]	@ (8000818 <MX_FREERTOS_Init+0xc8>)
 80007be:	f003 feee 	bl	800459e <osEventFlagsNew>
 80007c2:	4603      	mov	r3, r0
 80007c4:	4a15      	ldr	r2, [pc, #84]	@ (800081c <MX_FREERTOS_Init+0xcc>)
 80007c6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	0800794c 	.word	0x0800794c
 80007d0:	08000821 	.word	0x08000821
 80007d4:	2000003c 	.word	0x2000003c
 80007d8:	08007970 	.word	0x08007970
 80007dc:	08000831 	.word	0x08000831
 80007e0:	20000040 	.word	0x20000040
 80007e4:	08007994 	.word	0x08007994
 80007e8:	0800084d 	.word	0x0800084d
 80007ec:	20000044 	.word	0x20000044
 80007f0:	080079b8 	.word	0x080079b8
 80007f4:	080009c9 	.word	0x080009c9
 80007f8:	20000048 	.word	0x20000048
 80007fc:	080079dc 	.word	0x080079dc
 8000800:	08000a61 	.word	0x08000a61
 8000804:	2000004c 	.word	0x2000004c
 8000808:	08007a00 	.word	0x08007a00
 800080c:	20000050 	.word	0x20000050
 8000810:	08007a10 	.word	0x08007a10
 8000814:	20000054 	.word	0x20000054
 8000818:	08007a20 	.word	0x08007a20
 800081c:	20000058 	.word	0x20000058

08000820 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000828:	2001      	movs	r0, #1
 800082a:	f003 fe9d 	bl	8004568 <osDelay>
 800082e:	e7fb      	b.n	8000828 <StartDefaultTask+0x8>

08000830 <encoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder */
void encoder(void *argument)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoder */
  /* Infinite loop */
  for(;;)
  {
		encoder_update();
 8000838:	f7ff fe80 	bl	800053c <encoder_update>
		encoder_button_update();
 800083c:	f7ff ff40 	bl	80006c0 <encoder_button_update>

		osDelay(10);  // 100 Hz
 8000840:	200a      	movs	r0, #10
 8000842:	f003 fe91 	bl	8004568 <osDelay>
		encoder_update();
 8000846:	bf00      	nop
 8000848:	e7f6      	b.n	8000838 <encoder+0x8>
	...

0800084c <StateMachine>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StateMachine */
void StateMachine(void *argument)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	@ 0x28
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StateMachine */
  /* Infinite loop */

  int16_t last_step = -1;
 8000854:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000858:	84fb      	strh	r3, [r7, #38]	@ 0x26
  for(;;)
  {
	  uint32_t flags = osEventFlagsGet(smEventHandle);
 800085a:	4b57      	ldr	r3, [pc, #348]	@ (80009b8 <StateMachine+0x16c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4618      	mov	r0, r3
 8000860:	f003 ff4f 	bl	8004702 <osEventFlagsGet>
 8000864:	6138      	str	r0, [r7, #16]

	  if (!(flags & 0x0001))  // tant que menu actif
 8000866:	693b      	ldr	r3, [r7, #16]
 8000868:	f003 0301 	and.w	r3, r3, #1
 800086c:	2b00      	cmp	r3, #0
 800086e:	f040 809c 	bne.w	80009aa <StateMachine+0x15e>
	  {
		encoder_set_min(0);
 8000872:	2000      	movs	r0, #0
 8000874:	f7ff fef2 	bl	800065c <encoder_set_min>
		encoder_set_max(4);
 8000878:	2004      	movs	r0, #4
 800087a:	f7ff feff 	bl	800067c <encoder_set_max>

		// Clignotement de la LED pour indiquer "mode menu"
		osEventFlagsSet(ledEventHandle, FLAG_LED1);
 800087e:	4b4f      	ldr	r3, [pc, #316]	@ (80009bc <StateMachine+0x170>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2101      	movs	r1, #1
 8000884:	4618      	mov	r0, r3
 8000886:	f003 fec9 	bl	800461c <osEventFlagsSet>

		int16_t step = encoder_get_steps();
 800088a:	f7ff fedb 	bl	8000644 <encoder_get_steps>
 800088e:	4603      	mov	r3, r0
 8000890:	81fb      	strh	r3, [r7, #14]

		bool button = encoder_get_button();
 8000892:	f7ff ff47 	bl	8000724 <encoder_get_button>
 8000896:	4603      	mov	r3, r0
 8000898:	737b      	strb	r3, [r7, #13]

		// Seulement si le step a changé
		if (step != last_step)
 800089a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800089e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80008a2:	429a      	cmp	r2, r3
 80008a4:	d039      	beq.n	800091a <StateMachine+0xce>
		{
		  const menu_state_t *entry = NULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	623b      	str	r3, [r7, #32]
		  for (int i = 0; menu_state[i].text != NULL; i++) {
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
 80008ae:	e019      	b.n	80008e4 <StateMachine+0x98>
			if (menu_state[i].step == step) {
 80008b0:	4943      	ldr	r1, [pc, #268]	@ (80009c0 <StateMachine+0x174>)
 80008b2:	69fa      	ldr	r2, [r7, #28]
 80008b4:	4613      	mov	r3, r2
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	4413      	add	r3, r2
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	440b      	add	r3, r1
 80008be:	3302      	adds	r3, #2
 80008c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008c4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d108      	bne.n	80008de <StateMachine+0x92>
			  entry = &menu_state[i];
 80008cc:	69fa      	ldr	r2, [r7, #28]
 80008ce:	4613      	mov	r3, r2
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	4413      	add	r3, r2
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	4a3a      	ldr	r2, [pc, #232]	@ (80009c0 <StateMachine+0x174>)
 80008d8:	4413      	add	r3, r2
 80008da:	623b      	str	r3, [r7, #32]
			  break;
 80008dc:	e00d      	b.n	80008fa <StateMachine+0xae>
		  for (int i = 0; menu_state[i].text != NULL; i++) {
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	3301      	adds	r3, #1
 80008e2:	61fb      	str	r3, [r7, #28]
 80008e4:	4936      	ldr	r1, [pc, #216]	@ (80009c0 <StateMachine+0x174>)
 80008e6:	69fa      	ldr	r2, [r7, #28]
 80008e8:	4613      	mov	r3, r2
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	4413      	add	r3, r2
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	440b      	add	r3, r1
 80008f2:	3308      	adds	r3, #8
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d1da      	bne.n	80008b0 <StateMachine+0x64>
			}
		  }

		  if (entry != NULL) {
 80008fa:	6a3b      	ldr	r3, [r7, #32]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d00c      	beq.n	800091a <StateMachine+0xce>
			clearLCD();
 8000900:	f000 fa78 	bl	8000df4 <clearLCD>
			setCursor(0, 0);
 8000904:	2100      	movs	r1, #0
 8000906:	2000      	movs	r0, #0
 8000908:	f000 faea 	bl	8000ee0 <setCursor>
			writeLCD(entry->text);
 800090c:	6a3b      	ldr	r3, [r7, #32]
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	4618      	mov	r0, r3
 8000912:	f000 fa79 	bl	8000e08 <writeLCD>
			last_step = step;  // Mettre à jour le step affiché
 8000916:	89fb      	ldrh	r3, [r7, #14]
 8000918:	84fb      	strh	r3, [r7, #38]	@ 0x26
		  }
		}

		// Si bouton pressé : sortir du menu et lancer l’action
		if (button)
 800091a:	7b7b      	ldrb	r3, [r7, #13]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d047      	beq.n	80009b0 <StateMachine+0x164>
		{
		  osEventFlagsSet(ledEventHandle, FLAG_LED2);
 8000920:	4b26      	ldr	r3, [pc, #152]	@ (80009bc <StateMachine+0x170>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2102      	movs	r1, #2
 8000926:	4618      	mov	r0, r3
 8000928:	f003 fe78 	bl	800461c <osEventFlagsSet>
		  const menu_state_t *entry = NULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61bb      	str	r3, [r7, #24]
		  for (int i = 0; menu_state[i].text != NULL; i++) {
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
 8000934:	e019      	b.n	800096a <StateMachine+0x11e>
			if (menu_state[i].step == step) {
 8000936:	4922      	ldr	r1, [pc, #136]	@ (80009c0 <StateMachine+0x174>)
 8000938:	697a      	ldr	r2, [r7, #20]
 800093a:	4613      	mov	r3, r2
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	4413      	add	r3, r2
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	440b      	add	r3, r1
 8000944:	3302      	adds	r3, #2
 8000946:	f9b3 3000 	ldrsh.w	r3, [r3]
 800094a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800094e:	429a      	cmp	r2, r3
 8000950:	d108      	bne.n	8000964 <StateMachine+0x118>
			  entry = &menu_state[i];
 8000952:	697a      	ldr	r2, [r7, #20]
 8000954:	4613      	mov	r3, r2
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	4413      	add	r3, r2
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	4a18      	ldr	r2, [pc, #96]	@ (80009c0 <StateMachine+0x174>)
 800095e:	4413      	add	r3, r2
 8000960:	61bb      	str	r3, [r7, #24]
			  break;
 8000962:	e00d      	b.n	8000980 <StateMachine+0x134>
		  for (int i = 0; menu_state[i].text != NULL; i++) {
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	3301      	adds	r3, #1
 8000968:	617b      	str	r3, [r7, #20]
 800096a:	4915      	ldr	r1, [pc, #84]	@ (80009c0 <StateMachine+0x174>)
 800096c:	697a      	ldr	r2, [r7, #20]
 800096e:	4613      	mov	r3, r2
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	4413      	add	r3, r2
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	440b      	add	r3, r1
 8000978:	3308      	adds	r3, #8
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d1da      	bne.n	8000936 <StateMachine+0xea>
			}
		  }

		  if (entry != NULL) {
 8000980:	69bb      	ldr	r3, [r7, #24]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d014      	beq.n	80009b0 <StateMachine+0x164>
			osEventFlagsSet(smEventHandle, FLAG_SM_OFF); // exit statemachine
 8000986:	4b0c      	ldr	r3, [pc, #48]	@ (80009b8 <StateMachine+0x16c>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2101      	movs	r1, #1
 800098c:	4618      	mov	r0, r3
 800098e:	f003 fe45 	bl	800461c <osEventFlagsSet>
			osEventFlagsSet(funcEventHandle, entry->flag); // set task flag
 8000992:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <StateMachine+0x178>)
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	69bb      	ldr	r3, [r7, #24]
 8000998:	889b      	ldrh	r3, [r3, #4]
 800099a:	4619      	mov	r1, r3
 800099c:	4610      	mov	r0, r2
 800099e:	f003 fe3d 	bl	800461c <osEventFlagsSet>
			last_step = -1;
 80009a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009a6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80009a8:	e002      	b.n	80009b0 <StateMachine+0x164>
		  }
		}
	  }
	  else
	  {
		osDelay(100);  // on dort quand le menu n’est pas actif
 80009aa:	2064      	movs	r0, #100	@ 0x64
 80009ac:	f003 fddc 	bl	8004568 <osDelay>
	  }
	  osDelay(20); // 50 Hz
 80009b0:	2014      	movs	r0, #20
 80009b2:	f003 fdd9 	bl	8004568 <osDelay>
  {
 80009b6:	e750      	b.n	800085a <StateMachine+0xe>
 80009b8:	20000050 	.word	0x20000050
 80009bc:	20000058 	.word	0x20000058
 80009c0:	08007904 	.word	0x08007904
 80009c4:	20000054 	.word	0x20000054

080009c8 <leds>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_leds */
void leds(void *argument)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN leds */
  /* Infinite loop */
  for(;;)
  {
	  uint32_t flags = osEventFlagsWait(ledEventHandle, FLAG_LED1|FLAG_LED2|FLAG_LED3, osFlagsWaitAny, osWaitForever);
 80009d0:	4b21      	ldr	r3, [pc, #132]	@ (8000a58 <leds+0x90>)
 80009d2:	6818      	ldr	r0, [r3, #0]
 80009d4:	f04f 33ff 	mov.w	r3, #4294967295
 80009d8:	2200      	movs	r2, #0
 80009da:	2107      	movs	r1, #7
 80009dc:	f003 feb2 	bl	8004744 <osEventFlagsWait>
 80009e0:	60f8      	str	r0, [r7, #12]

	  if (flags & FLAG_LED1) {
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	f003 0301 	and.w	r3, r3, #1
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d00c      	beq.n	8000a06 <leds+0x3e>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	2101      	movs	r1, #1
 80009f0:	481a      	ldr	r0, [pc, #104]	@ (8000a5c <leds+0x94>)
 80009f2:	f001 f8cd 	bl	8001b90 <HAL_GPIO_WritePin>
		osDelay(50);
 80009f6:	2032      	movs	r0, #50	@ 0x32
 80009f8:	f003 fdb6 	bl	8004568 <osDelay>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2101      	movs	r1, #1
 8000a00:	4816      	ldr	r0, [pc, #88]	@ (8000a5c <leds+0x94>)
 8000a02:	f001 f8c5 	bl	8001b90 <HAL_GPIO_WritePin>

	  }

	  if (flags & FLAG_LED2) {
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	f003 0302 	and.w	r3, r3, #2
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d00c      	beq.n	8000a2a <leds+0x62>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000a10:	2201      	movs	r2, #1
 8000a12:	2180      	movs	r1, #128	@ 0x80
 8000a14:	4811      	ldr	r0, [pc, #68]	@ (8000a5c <leds+0x94>)
 8000a16:	f001 f8bb 	bl	8001b90 <HAL_GPIO_WritePin>
		osDelay(50);
 8000a1a:	2032      	movs	r0, #50	@ 0x32
 8000a1c:	f003 fda4 	bl	8004568 <osDelay>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2180      	movs	r1, #128	@ 0x80
 8000a24:	480d      	ldr	r0, [pc, #52]	@ (8000a5c <leds+0x94>)
 8000a26:	f001 f8b3 	bl	8001b90 <HAL_GPIO_WritePin>

	  }

	  if (flags & FLAG_LED3) {
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	f003 0304 	and.w	r3, r3, #4
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d00c      	beq.n	8000a4e <leds+0x86>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000a34:	2201      	movs	r2, #1
 8000a36:	2180      	movs	r1, #128	@ 0x80
 8000a38:	4808      	ldr	r0, [pc, #32]	@ (8000a5c <leds+0x94>)
 8000a3a:	f001 f8a9 	bl	8001b90 <HAL_GPIO_WritePin>
		osDelay(50);
 8000a3e:	2032      	movs	r0, #50	@ 0x32
 8000a40:	f003 fd92 	bl	8004568 <osDelay>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2180      	movs	r1, #128	@ 0x80
 8000a48:	4804      	ldr	r0, [pc, #16]	@ (8000a5c <leds+0x94>)
 8000a4a:	f001 f8a1 	bl	8001b90 <HAL_GPIO_WritePin>
	  }
		osDelay(50);
 8000a4e:	2032      	movs	r0, #50	@ 0x32
 8000a50:	f003 fd8a 	bl	8004568 <osDelay>
  {
 8000a54:	e7bc      	b.n	80009d0 <leds+0x8>
 8000a56:	bf00      	nop
 8000a58:	20000058 	.word	0x20000058
 8000a5c:	40020400 	.word	0x40020400

08000a60 <infoFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_infoFunc */
void infoFunc(void *argument)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN infoFunc */
  /* Infinite loop */
  for(;;)
  {
	  uint32_t flags = osEventFlagsGet(funcEventHandle);
 8000a68:	4b19      	ldr	r3, [pc, #100]	@ (8000ad0 <infoFunc+0x70>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f003 fe48 	bl	8004702 <osEventFlagsGet>
 8000a72:	60f8      	str	r0, [r7, #12]
	  static bool FIF = false; // first in function

	  if (flags & FLAG_INFO) {
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d0f4      	beq.n	8000a68 <infoFunc+0x8>
		  if (!FIF) {
 8000a7e:	4b15      	ldr	r3, [pc, #84]	@ (8000ad4 <infoFunc+0x74>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	f083 0301 	eor.w	r3, r3, #1
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d013      	beq.n	8000ab4 <infoFunc+0x54>
			  clearLCD();
 8000a8c:	f000 f9b2 	bl	8000df4 <clearLCD>
			  setCursor(0, 0);
 8000a90:	2100      	movs	r1, #0
 8000a92:	2000      	movs	r0, #0
 8000a94:	f000 fa24 	bl	8000ee0 <setCursor>
			  writeLCD("Julien NAVEZ");
 8000a98:	480f      	ldr	r0, [pc, #60]	@ (8000ad8 <infoFunc+0x78>)
 8000a9a:	f000 f9b5 	bl	8000e08 <writeLCD>
			  setCursor(0, 1);
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f000 fa1d 	bl	8000ee0 <setCursor>
			  writeLCD("Nattan PAPIER");
 8000aa6:	480d      	ldr	r0, [pc, #52]	@ (8000adc <infoFunc+0x7c>)
 8000aa8:	f000 f9ae 	bl	8000e08 <writeLCD>

			  FIF = true;
 8000aac:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <infoFunc+0x74>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	701a      	strb	r2, [r3, #0]
 8000ab2:	e7d9      	b.n	8000a68 <infoFunc+0x8>
		  } else {
			  bool button = encoder_get_button();
 8000ab4:	f7ff fe36 	bl	8000724 <encoder_get_button>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	72fb      	strb	r3, [r7, #11]

			  if (button) {
 8000abc:	7afb      	ldrb	r3, [r7, #11]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d0d2      	beq.n	8000a68 <infoFunc+0x8>
				  exitFunc();
 8000ac2:	f000 f80d 	bl	8000ae0 <exitFunc>
				  FIF = false;
 8000ac6:	4b03      	ldr	r3, [pc, #12]	@ (8000ad4 <infoFunc+0x74>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	701a      	strb	r2, [r3, #0]
  {
 8000acc:	e7cc      	b.n	8000a68 <infoFunc+0x8>
 8000ace:	bf00      	nop
 8000ad0:	20000054 	.word	0x20000054
 8000ad4:	2000005c 	.word	0x2000005c
 8000ad8:	080078cc 	.word	0x080078cc
 8000adc:	080078dc 	.word	0x080078dc

08000ae0 <exitFunc>:
  /* USER CODE END infoFunc */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void exitFunc(void) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	encoder_reset_position();
 8000ae4:	f7ff fdda 	bl	800069c <encoder_reset_position>

	if (funcEventHandle != NULL) {
 8000ae8:	4b16      	ldr	r3, [pc, #88]	@ (8000b44 <exitFunc+0x64>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d01d      	beq.n	8000b2c <exitFunc+0x4c>
		osEventFlagsClear(funcEventHandle, FLAG_INFO);
 8000af0:	4b14      	ldr	r3, [pc, #80]	@ (8000b44 <exitFunc+0x64>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2101      	movs	r1, #1
 8000af6:	4618      	mov	r0, r3
 8000af8:	f003 fdd2 	bl	80046a0 <osEventFlagsClear>
		osEventFlagsClear(funcEventHandle, FLAG_SENSOR);
 8000afc:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <exitFunc+0x64>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2102      	movs	r1, #2
 8000b02:	4618      	mov	r0, r3
 8000b04:	f003 fdcc 	bl	80046a0 <osEventFlagsClear>
		osEventFlagsClear(funcEventHandle, FLAG_CONV);
 8000b08:	4b0e      	ldr	r3, [pc, #56]	@ (8000b44 <exitFunc+0x64>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2104      	movs	r1, #4
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f003 fdc6 	bl	80046a0 <osEventFlagsClear>
		osEventFlagsClear(funcEventHandle, FLAG_ACT);
 8000b14:	4b0b      	ldr	r3, [pc, #44]	@ (8000b44 <exitFunc+0x64>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2108      	movs	r1, #8
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f003 fdc0 	bl	80046a0 <osEventFlagsClear>
		osEventFlagsClear(funcEventHandle, FLAG_MPU);
 8000b20:	4b08      	ldr	r3, [pc, #32]	@ (8000b44 <exitFunc+0x64>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2110      	movs	r1, #16
 8000b26:	4618      	mov	r0, r3
 8000b28:	f003 fdba 	bl	80046a0 <osEventFlagsClear>
	}
		//osEventFlagsSet(funcEventHandle, 0xFFFFFFFF);


	if (smEventHandle != NULL)
 8000b2c:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <exitFunc+0x68>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d005      	beq.n	8000b40 <exitFunc+0x60>
		osEventFlagsClear(smEventHandle, FLAG_SM_OFF);
 8000b34:	4b04      	ldr	r3, [pc, #16]	@ (8000b48 <exitFunc+0x68>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2101      	movs	r1, #1
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f003 fdb0 	bl	80046a0 <osEventFlagsClear>
}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000054 	.word	0x20000054
 8000b48:	20000050 	.word	0x20000050

08000b4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08c      	sub	sp, #48	@ 0x30
 8000b50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	61bb      	str	r3, [r7, #24]
 8000b66:	4b5c      	ldr	r3, [pc, #368]	@ (8000cd8 <MX_GPIO_Init+0x18c>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	4a5b      	ldr	r2, [pc, #364]	@ (8000cd8 <MX_GPIO_Init+0x18c>)
 8000b6c:	f043 0304 	orr.w	r3, r3, #4
 8000b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b72:	4b59      	ldr	r3, [pc, #356]	@ (8000cd8 <MX_GPIO_Init+0x18c>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	f003 0304 	and.w	r3, r3, #4
 8000b7a:	61bb      	str	r3, [r7, #24]
 8000b7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	4b55      	ldr	r3, [pc, #340]	@ (8000cd8 <MX_GPIO_Init+0x18c>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	4a54      	ldr	r2, [pc, #336]	@ (8000cd8 <MX_GPIO_Init+0x18c>)
 8000b88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8e:	4b52      	ldr	r3, [pc, #328]	@ (8000cd8 <MX_GPIO_Init+0x18c>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	4b4e      	ldr	r3, [pc, #312]	@ (8000cd8 <MX_GPIO_Init+0x18c>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	4a4d      	ldr	r2, [pc, #308]	@ (8000cd8 <MX_GPIO_Init+0x18c>)
 8000ba4:	f043 0302 	orr.w	r3, r3, #2
 8000ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000baa:	4b4b      	ldr	r3, [pc, #300]	@ (8000cd8 <MX_GPIO_Init+0x18c>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	4b47      	ldr	r3, [pc, #284]	@ (8000cd8 <MX_GPIO_Init+0x18c>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	4a46      	ldr	r2, [pc, #280]	@ (8000cd8 <MX_GPIO_Init+0x18c>)
 8000bc0:	f043 0308 	orr.w	r3, r3, #8
 8000bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc6:	4b44      	ldr	r3, [pc, #272]	@ (8000cd8 <MX_GPIO_Init+0x18c>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	f003 0308 	and.w	r3, r3, #8
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	4b40      	ldr	r3, [pc, #256]	@ (8000cd8 <MX_GPIO_Init+0x18c>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	4a3f      	ldr	r2, [pc, #252]	@ (8000cd8 <MX_GPIO_Init+0x18c>)
 8000bdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be2:	4b3d      	ldr	r3, [pc, #244]	@ (8000cd8 <MX_GPIO_Init+0x18c>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	4b39      	ldr	r3, [pc, #228]	@ (8000cd8 <MX_GPIO_Init+0x18c>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	4a38      	ldr	r2, [pc, #224]	@ (8000cd8 <MX_GPIO_Init+0x18c>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfe:	4b36      	ldr	r3, [pc, #216]	@ (8000cd8 <MX_GPIO_Init+0x18c>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000c10:	4832      	ldr	r0, [pc, #200]	@ (8000cdc <MX_GPIO_Init+0x190>)
 8000c12:	f000 ffbd 	bl	8001b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2140      	movs	r1, #64	@ 0x40
 8000c1a:	4831      	ldr	r0, [pc, #196]	@ (8000ce0 <MX_GPIO_Init+0x194>)
 8000c1c:	f000 ffb8 	bl	8001b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_RS_Pin|LCD_E_Pin|LCD_D4_Pin|LCD_D5_Pin
 8000c20:	2200      	movs	r2, #0
 8000c22:	21fc      	movs	r1, #252	@ 0xfc
 8000c24:	482f      	ldr	r0, [pc, #188]	@ (8000ce4 <MX_GPIO_Init+0x198>)
 8000c26:	f000 ffb3 	bl	8001b90 <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c30:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	f107 031c 	add.w	r3, r7, #28
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4829      	ldr	r0, [pc, #164]	@ (8000ce8 <MX_GPIO_Init+0x19c>)
 8000c42:	f000 fdf9 	bl	8001838 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c46:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	481f      	ldr	r0, [pc, #124]	@ (8000cdc <MX_GPIO_Init+0x190>)
 8000c60:	f000 fdea 	bl	8001838 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_BUTT_Pin */
  GPIO_InitStruct.Pin = ENC_BUTT_Pin;
 8000c64:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ENC_BUTT_GPIO_Port, &GPIO_InitStruct);
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	4619      	mov	r1, r3
 8000c78:	481a      	ldr	r0, [pc, #104]	@ (8000ce4 <MX_GPIO_Init+0x198>)
 8000c7a:	f000 fddd 	bl	8001838 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c7e:	2340      	movs	r3, #64	@ 0x40
 8000c80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c82:	2301      	movs	r3, #1
 8000c84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c8e:	f107 031c 	add.w	r3, r7, #28
 8000c92:	4619      	mov	r1, r3
 8000c94:	4812      	ldr	r0, [pc, #72]	@ (8000ce0 <MX_GPIO_Init+0x194>)
 8000c96:	f000 fdcf 	bl	8001838 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c9a:	2380      	movs	r3, #128	@ 0x80
 8000c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ca6:	f107 031c 	add.w	r3, r7, #28
 8000caa:	4619      	mov	r1, r3
 8000cac:	480c      	ldr	r0, [pc, #48]	@ (8000ce0 <MX_GPIO_Init+0x194>)
 8000cae:	f000 fdc3 	bl	8001838 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_E_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_E_Pin|LCD_D4_Pin|LCD_D5_Pin
 8000cb2:	23fc      	movs	r3, #252	@ 0xfc
 8000cb4:	61fb      	str	r3, [r7, #28]
                          |LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cc2:	f107 031c 	add.w	r3, r7, #28
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4806      	ldr	r0, [pc, #24]	@ (8000ce4 <MX_GPIO_Init+0x198>)
 8000cca:	f000 fdb5 	bl	8001838 <HAL_GPIO_Init>

}
 8000cce:	bf00      	nop
 8000cd0:	3730      	adds	r7, #48	@ 0x30
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020400 	.word	0x40020400
 8000ce0:	40021800 	.word	0x40021800
 8000ce4:	40020c00 	.word	0x40020c00
 8000ce8:	40020800 	.word	0x40020800

08000cec <fallingEdge>:
#define SET_IF(expr)  ((expr) ? GPIO_PIN_SET : GPIO_PIN_RESET)
char display_settings;

//Sending falling edge signal to EPin for waking up LCD
static void fallingEdge(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIO_PORT, E_Pin, GPIO_PIN_RESET);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2108      	movs	r1, #8
 8000cf4:	4808      	ldr	r0, [pc, #32]	@ (8000d18 <fallingEdge+0x2c>)
 8000cf6:	f000 ff4b 	bl	8001b90 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PORT, E_Pin, GPIO_PIN_SET);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	2108      	movs	r1, #8
 8000cfe:	4806      	ldr	r0, [pc, #24]	@ (8000d18 <fallingEdge+0x2c>)
 8000d00:	f000 ff46 	bl	8001b90 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PORT, E_Pin, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2108      	movs	r1, #8
 8000d08:	4803      	ldr	r0, [pc, #12]	@ (8000d18 <fallingEdge+0x2c>)
 8000d0a:	f000 ff41 	bl	8001b90 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000d0e:	2001      	movs	r0, #1
 8000d10:	f000 fc5c 	bl	80015cc <HAL_Delay>
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40020c00 	.word	0x40020c00

08000d1c <send4Bits>:

#ifndef LCD8Bit
	static void send4Bits(char data)
	{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(GPIO_PORT, DATA5_Pin, SET_IF(data&0x01));
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	f003 0301 	and.w	r3, r3, #1
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	461a      	mov	r2, r3
 8000d30:	2110      	movs	r1, #16
 8000d32:	4815      	ldr	r0, [pc, #84]	@ (8000d88 <send4Bits+0x6c>)
 8000d34:	f000 ff2c 	bl	8001b90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_PORT, DATA6_Pin, SET_IF(data&0x02));
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	105b      	asrs	r3, r3, #1
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	461a      	mov	r2, r3
 8000d46:	2120      	movs	r1, #32
 8000d48:	480f      	ldr	r0, [pc, #60]	@ (8000d88 <send4Bits+0x6c>)
 8000d4a:	f000 ff21 	bl	8001b90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_PORT, DATA7_Pin, SET_IF(data&0x04));
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	109b      	asrs	r3, r3, #2
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	2140      	movs	r1, #64	@ 0x40
 8000d5e:	480a      	ldr	r0, [pc, #40]	@ (8000d88 <send4Bits+0x6c>)
 8000d60:	f000 ff16 	bl	8001b90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_PORT, DATA8_Pin, SET_IF(data&0x08));
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	10db      	asrs	r3, r3, #3
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	461a      	mov	r2, r3
 8000d72:	2180      	movs	r1, #128	@ 0x80
 8000d74:	4804      	ldr	r0, [pc, #16]	@ (8000d88 <send4Bits+0x6c>)
 8000d76:	f000 ff0b 	bl	8001b90 <HAL_GPIO_WritePin>

		fallingEdge();
 8000d7a:	f7ff ffb7 	bl	8000cec <fallingEdge>
	}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40020c00 	.word	0x40020c00

08000d8c <sendCommand>:
		fallingEdge();
	}
#endif

static void sendCommand(char cmd)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
	#ifdef LCD8Bit
    	HAL_GPIO_WritePin(GPIO_PORT, RS_Pin, GPIO_PIN_RESET);
		send8Bits(cmd);
	#else
	    HAL_GPIO_WritePin(GPIO_PORT, RS_Pin, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2104      	movs	r1, #4
 8000d9a:	4808      	ldr	r0, [pc, #32]	@ (8000dbc <sendCommand+0x30>)
 8000d9c:	f000 fef8 	bl	8001b90 <HAL_GPIO_WritePin>
		send4Bits(cmd >> 4);
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	091b      	lsrs	r3, r3, #4
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff ffb8 	bl	8000d1c <send4Bits>
		send4Bits(cmd);
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff ffb4 	bl	8000d1c <send4Bits>
	#endif
}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40020c00 	.word	0x40020c00

08000dc0 <sendData>:

static void sendData(char data)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
	#ifdef LCD8Bit
    	HAL_GPIO_WritePin(GPIO_PORT, RS_Pin, GPIO_PIN_SET);
		send8Bits(data);
	#else
	    HAL_GPIO_WritePin(GPIO_PORT, RS_Pin, GPIO_PIN_SET);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	2104      	movs	r1, #4
 8000dce:	4808      	ldr	r0, [pc, #32]	@ (8000df0 <sendData+0x30>)
 8000dd0:	f000 fede 	bl	8001b90 <HAL_GPIO_WritePin>
		send4Bits(data >> 4);
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	091b      	lsrs	r3, r3, #4
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff9e 	bl	8000d1c <send4Bits>
		send4Bits(data);
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff ff9a 	bl	8000d1c <send4Bits>
	#endif
}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40020c00 	.word	0x40020c00

08000df4 <clearLCD>:

void clearLCD(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	sendCommand(LCD_CLEARDISPLAY);
 8000df8:	2001      	movs	r0, #1
 8000dfa:	f7ff ffc7 	bl	8000d8c <sendCommand>
	HAL_Delay(5);
 8000dfe:	2005      	movs	r0, #5
 8000e00:	f000 fbe4 	bl	80015cc <HAL_Delay>
}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <writeLCD>:
{
	sendData(c);
}

void writeLCD (char *str)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	for(; *str != 0; ++str)
 8000e10:	e007      	b.n	8000e22 <writeLCD+0x1a>
	{
		sendData(*str);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff ffd2 	bl	8000dc0 <sendData>
	for(; *str != 0; ++str)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d1f3      	bne.n	8000e12 <writeLCD+0xa>
	}
}
 8000e2a:	bf00      	nop
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <initLCD>:

void initLCD(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIO_PORT, E_Pin,  	 GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2108      	movs	r1, #8
 8000e3c:	4826      	ldr	r0, [pc, #152]	@ (8000ed8 <initLCD+0xa4>)
 8000e3e:	f000 fea7 	bl	8001b90 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PORT, RS_Pin, 	 GPIO_PIN_RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2104      	movs	r1, #4
 8000e46:	4824      	ldr	r0, [pc, #144]	@ (8000ed8 <initLCD+0xa4>)
 8000e48:	f000 fea2 	bl	8001b90 <HAL_GPIO_WritePin>

	HAL_Delay(50);
 8000e4c:	2032      	movs	r0, #50	@ 0x32
 8000e4e:	f000 fbbd 	bl	80015cc <HAL_Delay>
		HAL_Delay(5);
		sendCommand(LCD_FUNCTIONSET | display_settings);
		HAL_Delay(5);

	#else
		display_settings = LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS;
 8000e52:	4b22      	ldr	r3, [pc, #136]	@ (8000edc <initLCD+0xa8>)
 8000e54:	2208      	movs	r2, #8
 8000e56:	701a      	strb	r2, [r3, #0]
		send4Bits(0x03);
		HAL_Delay(2);
		send4Bits(0x02);
		HAL_Delay(2);*/

		send4Bits(0x03);
 8000e58:	2003      	movs	r0, #3
 8000e5a:	f7ff ff5f 	bl	8000d1c <send4Bits>
		HAL_Delay(10);
 8000e5e:	200a      	movs	r0, #10
 8000e60:	f000 fbb4 	bl	80015cc <HAL_Delay>
		send4Bits(0x03);
 8000e64:	2003      	movs	r0, #3
 8000e66:	f7ff ff59 	bl	8000d1c <send4Bits>
		HAL_Delay(10);
 8000e6a:	200a      	movs	r0, #10
 8000e6c:	f000 fbae 	bl	80015cc <HAL_Delay>
		send4Bits(0x03);
 8000e70:	2003      	movs	r0, #3
 8000e72:	f7ff ff53 	bl	8000d1c <send4Bits>
		HAL_Delay(10);
 8000e76:	200a      	movs	r0, #10
 8000e78:	f000 fba8 	bl	80015cc <HAL_Delay>
		send4Bits(0x02);
 8000e7c:	2002      	movs	r0, #2
 8000e7e:	f7ff ff4d 	bl	8000d1c <send4Bits>
		HAL_Delay(10);
 8000e82:	200a      	movs	r0, #10
 8000e84:	f000 fba2 	bl	80015cc <HAL_Delay>
	#endif
		sendCommand(LCD_FUNCTIONSET | display_settings);
 8000e88:	4b14      	ldr	r3, [pc, #80]	@ (8000edc <initLCD+0xa8>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	f043 0320 	orr.w	r3, r3, #32
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ff7a 	bl	8000d8c <sendCommand>
		display_settings = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000e98:	4b10      	ldr	r3, [pc, #64]	@ (8000edc <initLCD+0xa8>)
 8000e9a:	2204      	movs	r2, #4
 8000e9c:	701a      	strb	r2, [r3, #0]
		sendCommand(LCD_DISPLAYCONTROL | display_settings);
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000edc <initLCD+0xa8>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	f043 0308 	orr.w	r3, r3, #8
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff6f 	bl	8000d8c <sendCommand>
		HAL_Delay(2);
 8000eae:	2002      	movs	r0, #2
 8000eb0:	f000 fb8c 	bl	80015cc <HAL_Delay>

		clearLCD();
 8000eb4:	f7ff ff9e 	bl	8000df4 <clearLCD>
		display_settings =  LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000eb8:	4b08      	ldr	r3, [pc, #32]	@ (8000edc <initLCD+0xa8>)
 8000eba:	2202      	movs	r2, #2
 8000ebc:	701a      	strb	r2, [r3, #0]
		sendCommand(LCD_ENTRYMODESET | display_settings);
 8000ebe:	4b07      	ldr	r3, [pc, #28]	@ (8000edc <initLCD+0xa8>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	f043 0304 	orr.w	r3, r3, #4
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff5f 	bl	8000d8c <sendCommand>
		HAL_Delay(2);
 8000ece:	2002      	movs	r0, #2
 8000ed0:	f000 fb7c 	bl	80015cc <HAL_Delay>
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40020c00 	.word	0x40020c00
 8000edc:	2000005d 	.word	0x2000005d

08000ee0 <setCursor>:


void setCursor(char x, char y)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	460a      	mov	r2, r1
 8000eea:	71fb      	strb	r3, [r7, #7]
 8000eec:	4613      	mov	r3, r2
 8000eee:	71bb      	strb	r3, [r7, #6]
	uint8_t base = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]

	if(y == 1)
 8000ef4:	79bb      	ldrb	r3, [r7, #6]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d102      	bne.n	8000f00 <setCursor+0x20>
	{
		base = 0x40;
 8000efa:	2340      	movs	r3, #64	@ 0x40
 8000efc:	73fb      	strb	r3, [r7, #15]
 8000efe:	e001      	b.n	8000f04 <setCursor+0x24>
	}
	else
	{
		base = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	73fb      	strb	r3, [r7, #15]
	}

	sendCommand( 0x80 | (base + x));
 8000f04:	7bfa      	ldrb	r2, [r7, #15]
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	4413      	add	r3, r2
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	b25b      	sxtb	r3, r3
 8000f0e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f12:	b25b      	sxtb	r3, r3
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ff38 	bl	8000d8c <sendCommand>
}
 8000f1c:	bf00      	nop
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f28:	f000 fade 	bl	80014e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f2c:	f000 f81c 	bl	8000f68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f30:	f7ff fe0c 	bl	8000b4c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f34:	f000 f99e 	bl	8001274 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f38:	f000 fa0e 	bl	8001358 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM4_Init();
 8000f3c:	f000 f8f6 	bl	800112c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // easier to wire
 8000f40:	213c      	movs	r1, #60	@ 0x3c
 8000f42:	4808      	ldr	r0, [pc, #32]	@ (8000f64 <main+0x40>)
 8000f44:	f002 f930 	bl	80031a8 <HAL_TIM_Encoder_Start>

  HAL_Delay(100);
 8000f48:	2064      	movs	r0, #100	@ 0x64
 8000f4a:	f000 fb3f 	bl	80015cc <HAL_Delay>
  initLCD();
 8000f4e:	f7ff ff71 	bl	8000e34 <initLCD>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f52:	f003 fa2d 	bl	80043b0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000f56:	f7ff fbfb 	bl	8000750 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000f5a:	f003 fa4d 	bl	80043f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f5e:	bf00      	nop
 8000f60:	e7fd      	b.n	8000f5e <main+0x3a>
 8000f62:	bf00      	nop
 8000f64:	20000060 	.word	0x20000060

08000f68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b094      	sub	sp, #80	@ 0x50
 8000f6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6e:	f107 031c 	add.w	r3, r7, #28
 8000f72:	2234      	movs	r2, #52	@ 0x34
 8000f74:	2100      	movs	r1, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f006 fc1e 	bl	80077b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f7c:	f107 0308 	add.w	r3, r7, #8
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	4b29      	ldr	r3, [pc, #164]	@ (8001038 <SystemClock_Config+0xd0>)
 8000f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f94:	4a28      	ldr	r2, [pc, #160]	@ (8001038 <SystemClock_Config+0xd0>)
 8000f96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f9c:	4b26      	ldr	r3, [pc, #152]	@ (8001038 <SystemClock_Config+0xd0>)
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa8:	2300      	movs	r3, #0
 8000faa:	603b      	str	r3, [r7, #0]
 8000fac:	4b23      	ldr	r3, [pc, #140]	@ (800103c <SystemClock_Config+0xd4>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a22      	ldr	r2, [pc, #136]	@ (800103c <SystemClock_Config+0xd4>)
 8000fb2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fb6:	6013      	str	r3, [r2, #0]
 8000fb8:	4b20      	ldr	r3, [pc, #128]	@ (800103c <SystemClock_Config+0xd4>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fc0:	603b      	str	r3, [r7, #0]
 8000fc2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fc8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000fcc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fd2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fd8:	2304      	movs	r3, #4
 8000fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fdc:	23a8      	movs	r3, #168	@ 0xa8
 8000fde:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fe4:	2307      	movs	r3, #7
 8000fe6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f001 fd95 	bl	8002b20 <HAL_RCC_OscConfig>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ffc:	f000 f820 	bl	8001040 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001000:	230f      	movs	r3, #15
 8001002:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001004:	2302      	movs	r3, #2
 8001006:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001008:	2300      	movs	r3, #0
 800100a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800100c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001010:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001012:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001016:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001018:	f107 0308 	add.w	r3, r7, #8
 800101c:	2105      	movs	r1, #5
 800101e:	4618      	mov	r0, r3
 8001020:	f000 ff0a 	bl	8001e38 <HAL_RCC_ClockConfig>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800102a:	f000 f809 	bl	8001040 <Error_Handler>
  }
}
 800102e:	bf00      	nop
 8001030:	3750      	adds	r7, #80	@ 0x50
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40023800 	.word	0x40023800
 800103c:	40007000 	.word	0x40007000

08001040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001044:	b672      	cpsid	i
}
 8001046:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <Error_Handler+0x8>

0800104c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	4b12      	ldr	r3, [pc, #72]	@ (80010a0 <HAL_MspInit+0x54>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800105a:	4a11      	ldr	r2, [pc, #68]	@ (80010a0 <HAL_MspInit+0x54>)
 800105c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001060:	6453      	str	r3, [r2, #68]	@ 0x44
 8001062:	4b0f      	ldr	r3, [pc, #60]	@ (80010a0 <HAL_MspInit+0x54>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001066:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	603b      	str	r3, [r7, #0]
 8001072:	4b0b      	ldr	r3, [pc, #44]	@ (80010a0 <HAL_MspInit+0x54>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001076:	4a0a      	ldr	r2, [pc, #40]	@ (80010a0 <HAL_MspInit+0x54>)
 8001078:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800107c:	6413      	str	r3, [r2, #64]	@ 0x40
 800107e:	4b08      	ldr	r3, [pc, #32]	@ (80010a0 <HAL_MspInit+0x54>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	210f      	movs	r1, #15
 800108e:	f06f 0001 	mvn.w	r0, #1
 8001092:	f000 fb9a 	bl	80017ca <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800

080010a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <NMI_Handler+0x4>

080010ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <HardFault_Handler+0x4>

080010b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <MemManage_Handler+0x4>

080010bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <BusFault_Handler+0x4>

080010c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <UsageFault_Handler+0x4>

080010cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010de:	f000 fa55 	bl	800158c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80010e2:	f005 fab7 	bl	8006654 <xTaskGetSchedulerState>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d001      	beq.n	80010f0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80010ec:	f006 f8e4 	bl	80072b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80010f8:	4802      	ldr	r0, [pc, #8]	@ (8001104 <TIM4_IRQHandler+0x10>)
 80010fa:	f002 f8e3 	bl	80032c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000060 	.word	0x20000060

08001108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <SystemInit+0x20>)
 800110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001112:	4a05      	ldr	r2, [pc, #20]	@ (8001128 <SystemInit+0x20>)
 8001114:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001118:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08c      	sub	sp, #48	@ 0x30
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001132:	f107 030c 	add.w	r3, r7, #12
 8001136:	2224      	movs	r2, #36	@ 0x24
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f006 fb3c 	bl	80077b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001148:	4b20      	ldr	r3, [pc, #128]	@ (80011cc <MX_TIM4_Init+0xa0>)
 800114a:	4a21      	ldr	r2, [pc, #132]	@ (80011d0 <MX_TIM4_Init+0xa4>)
 800114c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800114e:	4b1f      	ldr	r3, [pc, #124]	@ (80011cc <MX_TIM4_Init+0xa0>)
 8001150:	2200      	movs	r2, #0
 8001152:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001154:	4b1d      	ldr	r3, [pc, #116]	@ (80011cc <MX_TIM4_Init+0xa0>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800115a:	4b1c      	ldr	r3, [pc, #112]	@ (80011cc <MX_TIM4_Init+0xa0>)
 800115c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001160:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001162:	4b1a      	ldr	r3, [pc, #104]	@ (80011cc <MX_TIM4_Init+0xa0>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001168:	4b18      	ldr	r3, [pc, #96]	@ (80011cc <MX_TIM4_Init+0xa0>)
 800116a:	2200      	movs	r2, #0
 800116c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800116e:	2303      	movs	r3, #3
 8001170:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001172:	2302      	movs	r3, #2
 8001174:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001176:	2301      	movs	r3, #1
 8001178:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800117a:	2300      	movs	r3, #0
 800117c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001182:	2302      	movs	r3, #2
 8001184:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001186:	2301      	movs	r3, #1
 8001188:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800118a:	2300      	movs	r3, #0
 800118c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001192:	f107 030c 	add.w	r3, r7, #12
 8001196:	4619      	mov	r1, r3
 8001198:	480c      	ldr	r0, [pc, #48]	@ (80011cc <MX_TIM4_Init+0xa0>)
 800119a:	f001 ff5f 	bl	800305c <HAL_TIM_Encoder_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80011a4:	f7ff ff4c 	bl	8001040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a8:	2300      	movs	r3, #0
 80011aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	4619      	mov	r1, r3
 80011b4:	4805      	ldr	r0, [pc, #20]	@ (80011cc <MX_TIM4_Init+0xa0>)
 80011b6:	f002 fa73 	bl	80036a0 <HAL_TIMEx_MasterConfigSynchronization>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80011c0:	f7ff ff3e 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011c4:	bf00      	nop
 80011c6:	3730      	adds	r7, #48	@ 0x30
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000060 	.word	0x20000060
 80011d0:	40000800 	.word	0x40000800

080011d4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	@ 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001268 <HAL_TIM_Encoder_MspInit+0x94>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d134      	bne.n	8001260 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	4b1c      	ldr	r3, [pc, #112]	@ (800126c <HAL_TIM_Encoder_MspInit+0x98>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fe:	4a1b      	ldr	r2, [pc, #108]	@ (800126c <HAL_TIM_Encoder_MspInit+0x98>)
 8001200:	f043 0304 	orr.w	r3, r3, #4
 8001204:	6413      	str	r3, [r2, #64]	@ 0x40
 8001206:	4b19      	ldr	r3, [pc, #100]	@ (800126c <HAL_TIM_Encoder_MspInit+0x98>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120a:	f003 0304 	and.w	r3, r3, #4
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	4b15      	ldr	r3, [pc, #84]	@ (800126c <HAL_TIM_Encoder_MspInit+0x98>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	4a14      	ldr	r2, [pc, #80]	@ (800126c <HAL_TIM_Encoder_MspInit+0x98>)
 800121c:	f043 0308 	orr.w	r3, r3, #8
 8001220:	6313      	str	r3, [r2, #48]	@ 0x30
 8001222:	4b12      	ldr	r3, [pc, #72]	@ (800126c <HAL_TIM_Encoder_MspInit+0x98>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	f003 0308 	and.w	r3, r3, #8
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800122e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001240:	2302      	movs	r3, #2
 8001242:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	4619      	mov	r1, r3
 800124a:	4809      	ldr	r0, [pc, #36]	@ (8001270 <HAL_TIM_Encoder_MspInit+0x9c>)
 800124c:	f000 faf4 	bl	8001838 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001250:	2200      	movs	r2, #0
 8001252:	2105      	movs	r1, #5
 8001254:	201e      	movs	r0, #30
 8001256:	f000 fab8 	bl	80017ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800125a:	201e      	movs	r0, #30
 800125c:	f000 fad1 	bl	8001802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001260:	bf00      	nop
 8001262:	3728      	adds	r7, #40	@ 0x28
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40000800 	.word	0x40000800
 800126c:	40023800 	.word	0x40023800
 8001270:	40020c00 	.word	0x40020c00

08001274 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001278:	4b11      	ldr	r3, [pc, #68]	@ (80012c0 <MX_USART3_UART_Init+0x4c>)
 800127a:	4a12      	ldr	r2, [pc, #72]	@ (80012c4 <MX_USART3_UART_Init+0x50>)
 800127c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800127e:	4b10      	ldr	r3, [pc, #64]	@ (80012c0 <MX_USART3_UART_Init+0x4c>)
 8001280:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001284:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001286:	4b0e      	ldr	r3, [pc, #56]	@ (80012c0 <MX_USART3_UART_Init+0x4c>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800128c:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <MX_USART3_UART_Init+0x4c>)
 800128e:	2200      	movs	r2, #0
 8001290:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001292:	4b0b      	ldr	r3, [pc, #44]	@ (80012c0 <MX_USART3_UART_Init+0x4c>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001298:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <MX_USART3_UART_Init+0x4c>)
 800129a:	220c      	movs	r2, #12
 800129c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129e:	4b08      	ldr	r3, [pc, #32]	@ (80012c0 <MX_USART3_UART_Init+0x4c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a4:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <MX_USART3_UART_Init+0x4c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012aa:	4805      	ldr	r0, [pc, #20]	@ (80012c0 <MX_USART3_UART_Init+0x4c>)
 80012ac:	f002 fa88 	bl	80037c0 <HAL_UART_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80012b6:	f7ff fec3 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200000a8 	.word	0x200000a8
 80012c4:	40004800 	.word	0x40004800

080012c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	@ 0x28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a19      	ldr	r2, [pc, #100]	@ (800134c <HAL_UART_MspInit+0x84>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d12c      	bne.n	8001344 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	4b18      	ldr	r3, [pc, #96]	@ (8001350 <HAL_UART_MspInit+0x88>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f2:	4a17      	ldr	r2, [pc, #92]	@ (8001350 <HAL_UART_MspInit+0x88>)
 80012f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012fa:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <HAL_UART_MspInit+0x88>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b11      	ldr	r3, [pc, #68]	@ (8001350 <HAL_UART_MspInit+0x88>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	4a10      	ldr	r2, [pc, #64]	@ (8001350 <HAL_UART_MspInit+0x88>)
 8001310:	f043 0308 	orr.w	r3, r3, #8
 8001314:	6313      	str	r3, [r2, #48]	@ 0x30
 8001316:	4b0e      	ldr	r3, [pc, #56]	@ (8001350 <HAL_UART_MspInit+0x88>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001322:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001330:	2303      	movs	r3, #3
 8001332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001334:	2307      	movs	r3, #7
 8001336:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4619      	mov	r1, r3
 800133e:	4805      	ldr	r0, [pc, #20]	@ (8001354 <HAL_UART_MspInit+0x8c>)
 8001340:	f000 fa7a 	bl	8001838 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001344:	bf00      	nop
 8001346:	3728      	adds	r7, #40	@ 0x28
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40004800 	.word	0x40004800
 8001350:	40023800 	.word	0x40023800
 8001354:	40020c00 	.word	0x40020c00

08001358 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800135c:	4b14      	ldr	r3, [pc, #80]	@ (80013b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800135e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001362:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001364:	4b12      	ldr	r3, [pc, #72]	@ (80013b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001366:	2206      	movs	r2, #6
 8001368:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800136a:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800136c:	2202      	movs	r2, #2
 800136e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001370:	4b0f      	ldr	r3, [pc, #60]	@ (80013b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001372:	2200      	movs	r2, #0
 8001374:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001376:	4b0e      	ldr	r3, [pc, #56]	@ (80013b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001378:	2202      	movs	r2, #2
 800137a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800137c:	4b0c      	ldr	r3, [pc, #48]	@ (80013b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800137e:	2201      	movs	r2, #1
 8001380:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001382:	4b0b      	ldr	r3, [pc, #44]	@ (80013b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001384:	2200      	movs	r2, #0
 8001386:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001388:	4b09      	ldr	r3, [pc, #36]	@ (80013b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800138a:	2200      	movs	r2, #0
 800138c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800138e:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001390:	2201      	movs	r2, #1
 8001392:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001396:	2200      	movs	r2, #0
 8001398:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800139a:	4805      	ldr	r0, [pc, #20]	@ (80013b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800139c:	f000 fc11 	bl	8001bc2 <HAL_PCD_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80013a6:	f7ff fe4b 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	200000f0 	.word	0x200000f0

080013b4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b0a0      	sub	sp, #128	@ 0x80
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013cc:	f107 0310 	add.w	r3, r7, #16
 80013d0:	225c      	movs	r2, #92	@ 0x5c
 80013d2:	2100      	movs	r1, #0
 80013d4:	4618      	mov	r0, r3
 80013d6:	f006 f9ef 	bl	80077b8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013e2:	d14e      	bne.n	8001482 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80013e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013e8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80013ea:	2300      	movs	r3, #0
 80013ec:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ee:	f107 0310 	add.w	r3, r7, #16
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 fe3a 	bl	800206c <HAL_RCCEx_PeriphCLKConfig>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80013fe:	f7ff fe1f 	bl	8001040 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	4b21      	ldr	r3, [pc, #132]	@ (800148c <HAL_PCD_MspInit+0xd8>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	4a20      	ldr	r2, [pc, #128]	@ (800148c <HAL_PCD_MspInit+0xd8>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6313      	str	r3, [r2, #48]	@ 0x30
 8001412:	4b1e      	ldr	r3, [pc, #120]	@ (800148c <HAL_PCD_MspInit+0xd8>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800141e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001422:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	2302      	movs	r3, #2
 8001426:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142c:	2303      	movs	r3, #3
 800142e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001430:	230a      	movs	r3, #10
 8001432:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001434:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001438:	4619      	mov	r1, r3
 800143a:	4815      	ldr	r0, [pc, #84]	@ (8001490 <HAL_PCD_MspInit+0xdc>)
 800143c:	f000 f9fc 	bl	8001838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001440:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001444:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001446:	2300      	movs	r3, #0
 8001448:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800144e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001452:	4619      	mov	r1, r3
 8001454:	480e      	ldr	r0, [pc, #56]	@ (8001490 <HAL_PCD_MspInit+0xdc>)
 8001456:	f000 f9ef 	bl	8001838 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800145a:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <HAL_PCD_MspInit+0xd8>)
 800145c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800145e:	4a0b      	ldr	r2, [pc, #44]	@ (800148c <HAL_PCD_MspInit+0xd8>)
 8001460:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001464:	6353      	str	r3, [r2, #52]	@ 0x34
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	4b08      	ldr	r3, [pc, #32]	@ (800148c <HAL_PCD_MspInit+0xd8>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146e:	4a07      	ldr	r2, [pc, #28]	@ (800148c <HAL_PCD_MspInit+0xd8>)
 8001470:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001474:	6453      	str	r3, [r2, #68]	@ 0x44
 8001476:	4b05      	ldr	r3, [pc, #20]	@ (800148c <HAL_PCD_MspInit+0xd8>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001482:	bf00      	nop
 8001484:	3780      	adds	r7, #128	@ 0x80
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800
 8001490:	40020000 	.word	0x40020000

08001494 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001494:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014cc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001498:	f7ff fe36 	bl	8001108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800149c:	480c      	ldr	r0, [pc, #48]	@ (80014d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800149e:	490d      	ldr	r1, [pc, #52]	@ (80014d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014a0:	4a0d      	ldr	r2, [pc, #52]	@ (80014d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a4:	e002      	b.n	80014ac <LoopCopyDataInit>

080014a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014aa:	3304      	adds	r3, #4

080014ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b0:	d3f9      	bcc.n	80014a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014b2:	4a0a      	ldr	r2, [pc, #40]	@ (80014dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014b4:	4c0a      	ldr	r4, [pc, #40]	@ (80014e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b8:	e001      	b.n	80014be <LoopFillZerobss>

080014ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014bc:	3204      	adds	r2, #4

080014be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c0:	d3fb      	bcc.n	80014ba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80014c2:	f006 f981 	bl	80077c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014c6:	f7ff fd2d 	bl	8000f24 <main>
  bx  lr    
 80014ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80014d8:	08007a58 	.word	0x08007a58
  ldr r2, =_sbss
 80014dc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80014e0:	20004f28 	.word	0x20004f28

080014e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014e4:	e7fe      	b.n	80014e4 <ADC_IRQHandler>
	...

080014e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001528 <HAL_Init+0x40>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001528 <HAL_Init+0x40>)
 80014f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001528 <HAL_Init+0x40>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001528 <HAL_Init+0x40>)
 80014fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001502:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001504:	4b08      	ldr	r3, [pc, #32]	@ (8001528 <HAL_Init+0x40>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a07      	ldr	r2, [pc, #28]	@ (8001528 <HAL_Init+0x40>)
 800150a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800150e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001510:	2003      	movs	r0, #3
 8001512:	f000 f94f 	bl	80017b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001516:	200f      	movs	r0, #15
 8001518:	f000 f808 	bl	800152c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800151c:	f7ff fd96 	bl	800104c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40023c00 	.word	0x40023c00

0800152c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001534:	4b12      	ldr	r3, [pc, #72]	@ (8001580 <HAL_InitTick+0x54>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4b12      	ldr	r3, [pc, #72]	@ (8001584 <HAL_InitTick+0x58>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	4619      	mov	r1, r3
 800153e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001542:	fbb3 f3f1 	udiv	r3, r3, r1
 8001546:	fbb2 f3f3 	udiv	r3, r2, r3
 800154a:	4618      	mov	r0, r3
 800154c:	f000 f967 	bl	800181e <HAL_SYSTICK_Config>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e00e      	b.n	8001578 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b0f      	cmp	r3, #15
 800155e:	d80a      	bhi.n	8001576 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001560:	2200      	movs	r2, #0
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	f04f 30ff 	mov.w	r0, #4294967295
 8001568:	f000 f92f 	bl	80017ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800156c:	4a06      	ldr	r2, [pc, #24]	@ (8001588 <HAL_InitTick+0x5c>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001572:	2300      	movs	r3, #0
 8001574:	e000      	b.n	8001578 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
}
 8001578:	4618      	mov	r0, r3
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000004 	.word	0x20000004
 8001584:	2000000c 	.word	0x2000000c
 8001588:	20000008 	.word	0x20000008

0800158c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001590:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <HAL_IncTick+0x20>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	461a      	mov	r2, r3
 8001596:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <HAL_IncTick+0x24>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4413      	add	r3, r2
 800159c:	4a04      	ldr	r2, [pc, #16]	@ (80015b0 <HAL_IncTick+0x24>)
 800159e:	6013      	str	r3, [r2, #0]
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	2000000c 	.word	0x2000000c
 80015b0:	200005d4 	.word	0x200005d4

080015b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return uwTick;
 80015b8:	4b03      	ldr	r3, [pc, #12]	@ (80015c8 <HAL_GetTick+0x14>)
 80015ba:	681b      	ldr	r3, [r3, #0]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	200005d4 	.word	0x200005d4

080015cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015d4:	f7ff ffee 	bl	80015b4 <HAL_GetTick>
 80015d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e4:	d005      	beq.n	80015f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001610 <HAL_Delay+0x44>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	461a      	mov	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4413      	add	r3, r2
 80015f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015f2:	bf00      	nop
 80015f4:	f7ff ffde 	bl	80015b4 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	429a      	cmp	r2, r3
 8001602:	d8f7      	bhi.n	80015f4 <HAL_Delay+0x28>
  {
  }
}
 8001604:	bf00      	nop
 8001606:	bf00      	nop
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	2000000c 	.word	0x2000000c

08001614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001624:	4b0c      	ldr	r3, [pc, #48]	@ (8001658 <__NVIC_SetPriorityGrouping+0x44>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001630:	4013      	ands	r3, r2
 8001632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800163c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001640:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001646:	4a04      	ldr	r2, [pc, #16]	@ (8001658 <__NVIC_SetPriorityGrouping+0x44>)
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	60d3      	str	r3, [r2, #12]
}
 800164c:	bf00      	nop
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001660:	4b04      	ldr	r3, [pc, #16]	@ (8001674 <__NVIC_GetPriorityGrouping+0x18>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	0a1b      	lsrs	r3, r3, #8
 8001666:	f003 0307 	and.w	r3, r3, #7
}
 800166a:	4618      	mov	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	2b00      	cmp	r3, #0
 8001688:	db0b      	blt.n	80016a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	f003 021f 	and.w	r2, r3, #31
 8001690:	4907      	ldr	r1, [pc, #28]	@ (80016b0 <__NVIC_EnableIRQ+0x38>)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	095b      	lsrs	r3, r3, #5
 8001698:	2001      	movs	r0, #1
 800169a:	fa00 f202 	lsl.w	r2, r0, r2
 800169e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000e100 	.word	0xe000e100

080016b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	6039      	str	r1, [r7, #0]
 80016be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	db0a      	blt.n	80016de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	490c      	ldr	r1, [pc, #48]	@ (8001700 <__NVIC_SetPriority+0x4c>)
 80016ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d2:	0112      	lsls	r2, r2, #4
 80016d4:	b2d2      	uxtb	r2, r2
 80016d6:	440b      	add	r3, r1
 80016d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016dc:	e00a      	b.n	80016f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	4908      	ldr	r1, [pc, #32]	@ (8001704 <__NVIC_SetPriority+0x50>)
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	3b04      	subs	r3, #4
 80016ec:	0112      	lsls	r2, r2, #4
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	440b      	add	r3, r1
 80016f2:	761a      	strb	r2, [r3, #24]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	e000e100 	.word	0xe000e100
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001708:	b480      	push	{r7}
 800170a:	b089      	sub	sp, #36	@ 0x24
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	f1c3 0307 	rsb	r3, r3, #7
 8001722:	2b04      	cmp	r3, #4
 8001724:	bf28      	it	cs
 8001726:	2304      	movcs	r3, #4
 8001728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3304      	adds	r3, #4
 800172e:	2b06      	cmp	r3, #6
 8001730:	d902      	bls.n	8001738 <NVIC_EncodePriority+0x30>
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3b03      	subs	r3, #3
 8001736:	e000      	b.n	800173a <NVIC_EncodePriority+0x32>
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173c:	f04f 32ff 	mov.w	r2, #4294967295
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43da      	mvns	r2, r3
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	401a      	ands	r2, r3
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001750:	f04f 31ff 	mov.w	r1, #4294967295
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	fa01 f303 	lsl.w	r3, r1, r3
 800175a:	43d9      	mvns	r1, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001760:	4313      	orrs	r3, r2
         );
}
 8001762:	4618      	mov	r0, r3
 8001764:	3724      	adds	r7, #36	@ 0x24
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
	...

08001770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3b01      	subs	r3, #1
 800177c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001780:	d301      	bcc.n	8001786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001782:	2301      	movs	r3, #1
 8001784:	e00f      	b.n	80017a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001786:	4a0a      	ldr	r2, [pc, #40]	@ (80017b0 <SysTick_Config+0x40>)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3b01      	subs	r3, #1
 800178c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800178e:	210f      	movs	r1, #15
 8001790:	f04f 30ff 	mov.w	r0, #4294967295
 8001794:	f7ff ff8e 	bl	80016b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001798:	4b05      	ldr	r3, [pc, #20]	@ (80017b0 <SysTick_Config+0x40>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800179e:	4b04      	ldr	r3, [pc, #16]	@ (80017b0 <SysTick_Config+0x40>)
 80017a0:	2207      	movs	r2, #7
 80017a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	e000e010 	.word	0xe000e010

080017b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff ff29 	bl	8001614 <__NVIC_SetPriorityGrouping>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b086      	sub	sp, #24
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	4603      	mov	r3, r0
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	607a      	str	r2, [r7, #4]
 80017d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017dc:	f7ff ff3e 	bl	800165c <__NVIC_GetPriorityGrouping>
 80017e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	68b9      	ldr	r1, [r7, #8]
 80017e6:	6978      	ldr	r0, [r7, #20]
 80017e8:	f7ff ff8e 	bl	8001708 <NVIC_EncodePriority>
 80017ec:	4602      	mov	r2, r0
 80017ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f2:	4611      	mov	r1, r2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff5d 	bl	80016b4 <__NVIC_SetPriority>
}
 80017fa:	bf00      	nop
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	4603      	mov	r3, r0
 800180a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800180c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ff31 	bl	8001678 <__NVIC_EnableIRQ>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff ffa2 	bl	8001770 <SysTick_Config>
 800182c:	4603      	mov	r3, r0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
	...

08001838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001838:	b480      	push	{r7}
 800183a:	b089      	sub	sp, #36	@ 0x24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800184a:	2300      	movs	r3, #0
 800184c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
 8001852:	e165      	b.n	8001b20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001854:	2201      	movs	r2, #1
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	4013      	ands	r3, r2
 8001866:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	429a      	cmp	r2, r3
 800186e:	f040 8154 	bne.w	8001b1a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	2b01      	cmp	r3, #1
 800187c:	d005      	beq.n	800188a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001886:	2b02      	cmp	r3, #2
 8001888:	d130      	bne.n	80018ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	2203      	movs	r2, #3
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4013      	ands	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	68da      	ldr	r2, [r3, #12]
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018c0:	2201      	movs	r2, #1
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	091b      	lsrs	r3, r3, #4
 80018d6:	f003 0201 	and.w	r2, r3, #1
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 0303 	and.w	r3, r3, #3
 80018f4:	2b03      	cmp	r3, #3
 80018f6:	d017      	beq.n	8001928 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	2203      	movs	r2, #3
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d123      	bne.n	800197c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	08da      	lsrs	r2, r3, #3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3208      	adds	r2, #8
 800193c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001940:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	f003 0307 	and.w	r3, r3, #7
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	220f      	movs	r2, #15
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	691a      	ldr	r2, [r3, #16]
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	08da      	lsrs	r2, r3, #3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3208      	adds	r2, #8
 8001976:	69b9      	ldr	r1, [r7, #24]
 8001978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	2203      	movs	r2, #3
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 0203 	and.w	r2, r3, #3
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 80ae 	beq.w	8001b1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	4b5d      	ldr	r3, [pc, #372]	@ (8001b38 <HAL_GPIO_Init+0x300>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c6:	4a5c      	ldr	r2, [pc, #368]	@ (8001b38 <HAL_GPIO_Init+0x300>)
 80019c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ce:	4b5a      	ldr	r3, [pc, #360]	@ (8001b38 <HAL_GPIO_Init+0x300>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019da:	4a58      	ldr	r2, [pc, #352]	@ (8001b3c <HAL_GPIO_Init+0x304>)
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	089b      	lsrs	r3, r3, #2
 80019e0:	3302      	adds	r3, #2
 80019e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f003 0303 	and.w	r3, r3, #3
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	220f      	movs	r2, #15
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43db      	mvns	r3, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4013      	ands	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a4f      	ldr	r2, [pc, #316]	@ (8001b40 <HAL_GPIO_Init+0x308>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d025      	beq.n	8001a52 <HAL_GPIO_Init+0x21a>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a4e      	ldr	r2, [pc, #312]	@ (8001b44 <HAL_GPIO_Init+0x30c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d01f      	beq.n	8001a4e <HAL_GPIO_Init+0x216>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a4d      	ldr	r2, [pc, #308]	@ (8001b48 <HAL_GPIO_Init+0x310>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d019      	beq.n	8001a4a <HAL_GPIO_Init+0x212>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a4c      	ldr	r2, [pc, #304]	@ (8001b4c <HAL_GPIO_Init+0x314>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d013      	beq.n	8001a46 <HAL_GPIO_Init+0x20e>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a4b      	ldr	r2, [pc, #300]	@ (8001b50 <HAL_GPIO_Init+0x318>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d00d      	beq.n	8001a42 <HAL_GPIO_Init+0x20a>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a4a      	ldr	r2, [pc, #296]	@ (8001b54 <HAL_GPIO_Init+0x31c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d007      	beq.n	8001a3e <HAL_GPIO_Init+0x206>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a49      	ldr	r2, [pc, #292]	@ (8001b58 <HAL_GPIO_Init+0x320>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d101      	bne.n	8001a3a <HAL_GPIO_Init+0x202>
 8001a36:	2306      	movs	r3, #6
 8001a38:	e00c      	b.n	8001a54 <HAL_GPIO_Init+0x21c>
 8001a3a:	2307      	movs	r3, #7
 8001a3c:	e00a      	b.n	8001a54 <HAL_GPIO_Init+0x21c>
 8001a3e:	2305      	movs	r3, #5
 8001a40:	e008      	b.n	8001a54 <HAL_GPIO_Init+0x21c>
 8001a42:	2304      	movs	r3, #4
 8001a44:	e006      	b.n	8001a54 <HAL_GPIO_Init+0x21c>
 8001a46:	2303      	movs	r3, #3
 8001a48:	e004      	b.n	8001a54 <HAL_GPIO_Init+0x21c>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e002      	b.n	8001a54 <HAL_GPIO_Init+0x21c>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <HAL_GPIO_Init+0x21c>
 8001a52:	2300      	movs	r3, #0
 8001a54:	69fa      	ldr	r2, [r7, #28]
 8001a56:	f002 0203 	and.w	r2, r2, #3
 8001a5a:	0092      	lsls	r2, r2, #2
 8001a5c:	4093      	lsls	r3, r2
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a64:	4935      	ldr	r1, [pc, #212]	@ (8001b3c <HAL_GPIO_Init+0x304>)
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	089b      	lsrs	r3, r3, #2
 8001a6a:	3302      	adds	r3, #2
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a72:	4b3a      	ldr	r3, [pc, #232]	@ (8001b5c <HAL_GPIO_Init+0x324>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a96:	4a31      	ldr	r2, [pc, #196]	@ (8001b5c <HAL_GPIO_Init+0x324>)
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a9c:	4b2f      	ldr	r3, [pc, #188]	@ (8001b5c <HAL_GPIO_Init+0x324>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ac0:	4a26      	ldr	r2, [pc, #152]	@ (8001b5c <HAL_GPIO_Init+0x324>)
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ac6:	4b25      	ldr	r3, [pc, #148]	@ (8001b5c <HAL_GPIO_Init+0x324>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aea:	4a1c      	ldr	r2, [pc, #112]	@ (8001b5c <HAL_GPIO_Init+0x324>)
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001af0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b5c <HAL_GPIO_Init+0x324>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b14:	4a11      	ldr	r2, [pc, #68]	@ (8001b5c <HAL_GPIO_Init+0x324>)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	61fb      	str	r3, [r7, #28]
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	2b0f      	cmp	r3, #15
 8001b24:	f67f ae96 	bls.w	8001854 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b28:	bf00      	nop
 8001b2a:	bf00      	nop
 8001b2c:	3724      	adds	r7, #36	@ 0x24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40013800 	.word	0x40013800
 8001b40:	40020000 	.word	0x40020000
 8001b44:	40020400 	.word	0x40020400
 8001b48:	40020800 	.word	0x40020800
 8001b4c:	40020c00 	.word	0x40020c00
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40021400 	.word	0x40021400
 8001b58:	40021800 	.word	0x40021800
 8001b5c:	40013c00 	.word	0x40013c00

08001b60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	691a      	ldr	r2, [r3, #16]
 8001b70:	887b      	ldrh	r3, [r7, #2]
 8001b72:	4013      	ands	r3, r2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d002      	beq.n	8001b7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	73fb      	strb	r3, [r7, #15]
 8001b7c:	e001      	b.n	8001b82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	807b      	strh	r3, [r7, #2]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ba0:	787b      	ldrb	r3, [r7, #1]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ba6:	887a      	ldrh	r2, [r7, #2]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bac:	e003      	b.n	8001bb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bae:	887b      	ldrh	r3, [r7, #2]
 8001bb0:	041a      	lsls	r2, r3, #16
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	619a      	str	r2, [r3, #24]
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b086      	sub	sp, #24
 8001bc6:	af02      	add	r7, sp, #8
 8001bc8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e108      	b.n	8001de6 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d106      	bne.n	8001bf4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff fbe0 	bl	80013b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c02:	d102      	bne.n	8001c0a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f002 f8fe 	bl	8003e10 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6818      	ldr	r0, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	7c1a      	ldrb	r2, [r3, #16]
 8001c1c:	f88d 2000 	strb.w	r2, [sp]
 8001c20:	3304      	adds	r3, #4
 8001c22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c24:	f002 f890 	bl	8003d48 <USB_CoreInit>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d005      	beq.n	8001c3a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2202      	movs	r2, #2
 8001c32:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e0d5      	b.n	8001de6 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f002 f8f6 	bl	8003e32 <USB_SetCurrentMode>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d005      	beq.n	8001c58 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e0c6      	b.n	8001de6 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c58:	2300      	movs	r3, #0
 8001c5a:	73fb      	strb	r3, [r7, #15]
 8001c5c:	e04a      	b.n	8001cf4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c5e:	7bfa      	ldrb	r2, [r7, #15]
 8001c60:	6879      	ldr	r1, [r7, #4]
 8001c62:	4613      	mov	r3, r2
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	4413      	add	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	3315      	adds	r3, #21
 8001c6e:	2201      	movs	r2, #1
 8001c70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c72:	7bfa      	ldrb	r2, [r7, #15]
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	4613      	mov	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	4413      	add	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	440b      	add	r3, r1
 8001c80:	3314      	adds	r3, #20
 8001c82:	7bfa      	ldrb	r2, [r7, #15]
 8001c84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c86:	7bfa      	ldrb	r2, [r7, #15]
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
 8001c8a:	b298      	uxth	r0, r3
 8001c8c:	6879      	ldr	r1, [r7, #4]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	4413      	add	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	440b      	add	r3, r1
 8001c98:	332e      	adds	r3, #46	@ 0x2e
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	440b      	add	r3, r1
 8001cac:	3318      	adds	r3, #24
 8001cae:	2200      	movs	r2, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cb2:	7bfa      	ldrb	r2, [r7, #15]
 8001cb4:	6879      	ldr	r1, [r7, #4]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	4413      	add	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	331c      	adds	r3, #28
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cc6:	7bfa      	ldrb	r2, [r7, #15]
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	4413      	add	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	440b      	add	r3, r1
 8001cd4:	3320      	adds	r3, #32
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cda:	7bfa      	ldrb	r2, [r7, #15]
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	4413      	add	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	440b      	add	r3, r1
 8001ce8:	3324      	adds	r3, #36	@ 0x24
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	73fb      	strb	r3, [r7, #15]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	791b      	ldrb	r3, [r3, #4]
 8001cf8:	7bfa      	ldrb	r2, [r7, #15]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d3af      	bcc.n	8001c5e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cfe:	2300      	movs	r3, #0
 8001d00:	73fb      	strb	r3, [r7, #15]
 8001d02:	e044      	b.n	8001d8e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d04:	7bfa      	ldrb	r2, [r7, #15]
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	4413      	add	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001d16:	2200      	movs	r2, #0
 8001d18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d1a:	7bfa      	ldrb	r2, [r7, #15]
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	4413      	add	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	440b      	add	r3, r1
 8001d28:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001d2c:	7bfa      	ldrb	r2, [r7, #15]
 8001d2e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d30:	7bfa      	ldrb	r2, [r7, #15]
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	4613      	mov	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	4413      	add	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001d42:	2200      	movs	r2, #0
 8001d44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d46:	7bfa      	ldrb	r2, [r7, #15]
 8001d48:	6879      	ldr	r1, [r7, #4]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	4413      	add	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	440b      	add	r3, r1
 8001d54:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d5c:	7bfa      	ldrb	r2, [r7, #15]
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4413      	add	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	440b      	add	r3, r1
 8001d6a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d72:	7bfa      	ldrb	r2, [r7, #15]
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	4613      	mov	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	4413      	add	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	440b      	add	r3, r1
 8001d80:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	73fb      	strb	r3, [r7, #15]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	791b      	ldrb	r3, [r3, #4]
 8001d92:	7bfa      	ldrb	r2, [r7, #15]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d3b5      	bcc.n	8001d04 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6818      	ldr	r0, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	7c1a      	ldrb	r2, [r3, #16]
 8001da0:	f88d 2000 	strb.w	r2, [sp]
 8001da4:	3304      	adds	r3, #4
 8001da6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001da8:	f002 f890 	bl	8003ecc <USB_DevInit>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d005      	beq.n	8001dbe <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2202      	movs	r2, #2
 8001db6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e013      	b.n	8001de6 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	7b1b      	ldrb	r3, [r3, #12]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d102      	bne.n	8001dda <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f80a 	bl	8001dee <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f002 fa4b 	bl	800427a <USB_DevDisconnect>

  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b085      	sub	sp, #20
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e20:	f043 0303 	orr.w	r3, r3, #3
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e0cc      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e4c:	4b68      	ldr	r3, [pc, #416]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 030f 	and.w	r3, r3, #15
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d90c      	bls.n	8001e74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5a:	4b65      	ldr	r3, [pc, #404]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e62:	4b63      	ldr	r3, [pc, #396]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d001      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e0b8      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d020      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d005      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e8c:	4b59      	ldr	r3, [pc, #356]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	4a58      	ldr	r2, [pc, #352]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001e96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0308 	and.w	r3, r3, #8
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d005      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ea4:	4b53      	ldr	r3, [pc, #332]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	4a52      	ldr	r2, [pc, #328]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8001eaa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001eae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb0:	4b50      	ldr	r3, [pc, #320]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	494d      	ldr	r1, [pc, #308]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d044      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d107      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed6:	4b47      	ldr	r3, [pc, #284]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d119      	bne.n	8001f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e07f      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d003      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ef2:	2b03      	cmp	r3, #3
 8001ef4:	d107      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d109      	bne.n	8001f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e06f      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f06:	4b3b      	ldr	r3, [pc, #236]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e067      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f16:	4b37      	ldr	r3, [pc, #220]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f023 0203 	bic.w	r2, r3, #3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	4934      	ldr	r1, [pc, #208]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f28:	f7ff fb44 	bl	80015b4 <HAL_GetTick>
 8001f2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2e:	e00a      	b.n	8001f46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f30:	f7ff fb40 	bl	80015b4 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e04f      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f46:	4b2b      	ldr	r3, [pc, #172]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 020c 	and.w	r2, r3, #12
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d1eb      	bne.n	8001f30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f58:	4b25      	ldr	r3, [pc, #148]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 030f 	and.w	r3, r3, #15
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d20c      	bcs.n	8001f80 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f66:	4b22      	ldr	r3, [pc, #136]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6e:	4b20      	ldr	r3, [pc, #128]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d001      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e032      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d008      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f8c:	4b19      	ldr	r3, [pc, #100]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	4916      	ldr	r1, [pc, #88]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d009      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001faa:	4b12      	ldr	r3, [pc, #72]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	490e      	ldr	r1, [pc, #56]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fbe:	f000 fb7f 	bl	80026c0 <HAL_RCC_GetSysClockFreq>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	091b      	lsrs	r3, r3, #4
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	490a      	ldr	r1, [pc, #40]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd0:	5ccb      	ldrb	r3, [r1, r3]
 8001fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd6:	4a09      	ldr	r2, [pc, #36]	@ (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001fda:	4b09      	ldr	r3, [pc, #36]	@ (8002000 <HAL_RCC_ClockConfig+0x1c8>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff faa4 	bl	800152c <HAL_InitTick>

  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40023c00 	.word	0x40023c00
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	08007a30 	.word	0x08007a30
 8001ffc:	20000004 	.word	0x20000004
 8002000:	20000008 	.word	0x20000008

08002004 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002008:	4b03      	ldr	r3, [pc, #12]	@ (8002018 <HAL_RCC_GetHCLKFreq+0x14>)
 800200a:	681b      	ldr	r3, [r3, #0]
}
 800200c:	4618      	mov	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	20000004 	.word	0x20000004

0800201c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002020:	f7ff fff0 	bl	8002004 <HAL_RCC_GetHCLKFreq>
 8002024:	4602      	mov	r2, r0
 8002026:	4b05      	ldr	r3, [pc, #20]	@ (800203c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	0a9b      	lsrs	r3, r3, #10
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	4903      	ldr	r1, [pc, #12]	@ (8002040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002032:	5ccb      	ldrb	r3, [r1, r3]
 8002034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002038:	4618      	mov	r0, r3
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40023800 	.word	0x40023800
 8002040:	08007a40 	.word	0x08007a40

08002044 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002048:	f7ff ffdc 	bl	8002004 <HAL_RCC_GetHCLKFreq>
 800204c:	4602      	mov	r2, r0
 800204e:	4b05      	ldr	r3, [pc, #20]	@ (8002064 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	0b5b      	lsrs	r3, r3, #13
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	4903      	ldr	r1, [pc, #12]	@ (8002068 <HAL_RCC_GetPCLK2Freq+0x24>)
 800205a:	5ccb      	ldrb	r3, [r1, r3]
 800205c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002060:	4618      	mov	r0, r3
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40023800 	.word	0x40023800
 8002068:	08007a40 	.word	0x08007a40

0800206c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08c      	sub	sp, #48	@ 0x30
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8002078:	2300      	movs	r3, #0
 800207a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8002094:	2300      	movs	r3, #0
 8002096:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d010      	beq.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80020a4:	4b6f      	ldr	r3, [pc, #444]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020aa:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020b2:	496c      	ldr	r1, [pc, #432]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80020c2:	2301      	movs	r3, #1
 80020c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d010      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80020d2:	4b64      	ldr	r3, [pc, #400]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020d8:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020e0:	4960      	ldr	r1, [pc, #384]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80020f0:	2301      	movs	r3, #1
 80020f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d017      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002100:	4b58      	ldr	r3, [pc, #352]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002102:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002106:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210e:	4955      	ldr	r1, [pc, #340]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002110:	4313      	orrs	r3, r2
 8002112:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800211e:	d101      	bne.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002120:	2301      	movs	r3, #1
 8002122:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800212c:	2301      	movs	r3, #1
 800212e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	2b00      	cmp	r3, #0
 800213a:	d017      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800213c:	4b49      	ldr	r3, [pc, #292]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800213e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002142:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800214a:	4946      	ldr	r1, [pc, #280]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800214c:	4313      	orrs	r3, r2
 800214e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002156:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800215a:	d101      	bne.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800215c:	2301      	movs	r3, #1
 800215e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002168:	2301      	movs	r3, #1
 800216a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0320 	and.w	r3, r3, #32
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 808a 	beq.w	800228e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	4b39      	ldr	r3, [pc, #228]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	4a38      	ldr	r2, [pc, #224]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002184:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002188:	6413      	str	r3, [r2, #64]	@ 0x40
 800218a:	4b36      	ldr	r3, [pc, #216]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002196:	4b34      	ldr	r3, [pc, #208]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a33      	ldr	r2, [pc, #204]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800219c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021a0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80021a2:	f7ff fa07 	bl	80015b4 <HAL_GetTick>
 80021a6:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80021a8:	e008      	b.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021aa:	f7ff fa03 	bl	80015b4 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e278      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80021bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0f0      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021c8:	4b26      	ldr	r3, [pc, #152]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021d0:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021d2:	6a3b      	ldr	r3, [r7, #32]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d02f      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021e0:	6a3a      	ldr	r2, [r7, #32]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d028      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021ee:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021f0:	4b1e      	ldr	r3, [pc, #120]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021f6:	4b1d      	ldr	r3, [pc, #116]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80021fc:	4a19      	ldr	r2, [pc, #100]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021fe:	6a3b      	ldr	r3, [r7, #32]
 8002200:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002202:	4b18      	ldr	r3, [pc, #96]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b01      	cmp	r3, #1
 800220c:	d114      	bne.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800220e:	f7ff f9d1 	bl	80015b4 <HAL_GetTick>
 8002212:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002214:	e00a      	b.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002216:	f7ff f9cd 	bl	80015b4 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002224:	4293      	cmp	r3, r2
 8002226:	d901      	bls.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e240      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800222c:	4b0d      	ldr	r3, [pc, #52]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800222e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0ee      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002240:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002244:	d114      	bne.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002246:	4b07      	ldr	r3, [pc, #28]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002252:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002256:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800225a:	4902      	ldr	r1, [pc, #8]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800225c:	4313      	orrs	r3, r2
 800225e:	608b      	str	r3, [r1, #8]
 8002260:	e00c      	b.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002262:	bf00      	nop
 8002264:	40023800 	.word	0x40023800
 8002268:	40007000 	.word	0x40007000
 800226c:	42470e40 	.word	0x42470e40
 8002270:	4b4a      	ldr	r3, [pc, #296]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	4a49      	ldr	r2, [pc, #292]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002276:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800227a:	6093      	str	r3, [r2, #8]
 800227c:	4b47      	ldr	r3, [pc, #284]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800227e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002288:	4944      	ldr	r1, [pc, #272]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800228a:	4313      	orrs	r3, r2
 800228c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0310 	and.w	r3, r3, #16
 8002296:	2b00      	cmp	r3, #0
 8002298:	d004      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80022a0:	4b3f      	ldr	r3, [pc, #252]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80022a2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00a      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80022b0:	4b3a      	ldr	r3, [pc, #232]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022b6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022be:	4937      	ldr	r1, [pc, #220]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00a      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80022d2:	4b32      	ldr	r3, [pc, #200]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022d8:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022e0:	492e      	ldr	r1, [pc, #184]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d011      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80022f4:	4b29      	ldr	r3, [pc, #164]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022fa:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002302:	4926      	ldr	r1, [pc, #152]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002304:	4313      	orrs	r3, r2
 8002306:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800230e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002312:	d101      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002314:	2301      	movs	r3, #1
 8002316:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00a      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002324:	4b1d      	ldr	r3, [pc, #116]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002326:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800232a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002332:	491a      	ldr	r1, [pc, #104]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002342:	2b00      	cmp	r3, #0
 8002344:	d011      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002346:	4b15      	ldr	r3, [pc, #84]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002348:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800234c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002354:	4911      	ldr	r1, [pc, #68]	@ (800239c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002360:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002364:	d101      	bne.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002366:	2301      	movs	r3, #1
 8002368:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800236a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800236c:	2b01      	cmp	r3, #1
 800236e:	d005      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002378:	f040 80ff 	bne.w	800257a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800237c:	4b09      	ldr	r3, [pc, #36]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002382:	f7ff f917 	bl	80015b4 <HAL_GetTick>
 8002386:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002388:	e00e      	b.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800238a:	f7ff f913 	bl	80015b4 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d907      	bls.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e188      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x642>
 800239c:	40023800 	.word	0x40023800
 80023a0:	424711e0 	.word	0x424711e0
 80023a4:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80023a8:	4b7e      	ldr	r3, [pc, #504]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1ea      	bne.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d009      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d028      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d124      	bne.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80023dc:	4b71      	ldr	r3, [pc, #452]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80023de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023e2:	0c1b      	lsrs	r3, r3, #16
 80023e4:	f003 0303 	and.w	r3, r3, #3
 80023e8:	3301      	adds	r3, #1
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80023ee:	4b6d      	ldr	r3, [pc, #436]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80023f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023f4:	0e1b      	lsrs	r3, r3, #24
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	019b      	lsls	r3, r3, #6
 8002406:	431a      	orrs	r2, r3
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	085b      	lsrs	r3, r3, #1
 800240c:	3b01      	subs	r3, #1
 800240e:	041b      	lsls	r3, r3, #16
 8002410:	431a      	orrs	r2, r3
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	061b      	lsls	r3, r3, #24
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	071b      	lsls	r3, r3, #28
 800241e:	4961      	ldr	r1, [pc, #388]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002420:	4313      	orrs	r3, r2
 8002422:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	2b00      	cmp	r3, #0
 8002430:	d004      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002436:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800243a:	d00a      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002444:	2b00      	cmp	r3, #0
 8002446:	d035      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800244c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002450:	d130      	bne.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002452:	4b54      	ldr	r3, [pc, #336]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002454:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002458:	0c1b      	lsrs	r3, r3, #16
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	3301      	adds	r3, #1
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002464:	4b4f      	ldr	r3, [pc, #316]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002466:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800246a:	0f1b      	lsrs	r3, r3, #28
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685a      	ldr	r2, [r3, #4]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	019b      	lsls	r3, r3, #6
 800247c:	431a      	orrs	r2, r3
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	085b      	lsrs	r3, r3, #1
 8002482:	3b01      	subs	r3, #1
 8002484:	041b      	lsls	r3, r3, #16
 8002486:	431a      	orrs	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	061b      	lsls	r3, r3, #24
 800248e:	431a      	orrs	r2, r3
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	071b      	lsls	r3, r3, #28
 8002494:	4943      	ldr	r1, [pc, #268]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002496:	4313      	orrs	r3, r2
 8002498:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800249c:	4b41      	ldr	r3, [pc, #260]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800249e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024a2:	f023 021f 	bic.w	r2, r3, #31
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024aa:	3b01      	subs	r3, #1
 80024ac:	493d      	ldr	r1, [pc, #244]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d029      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024c8:	d124      	bne.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80024ca:	4b36      	ldr	r3, [pc, #216]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80024cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024d0:	0c1b      	lsrs	r3, r3, #16
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	3301      	adds	r3, #1
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80024dc:	4b31      	ldr	r3, [pc, #196]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80024de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024e2:	0f1b      	lsrs	r3, r3, #28
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	019b      	lsls	r3, r3, #6
 80024f4:	431a      	orrs	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	085b      	lsrs	r3, r3, #1
 80024fc:	3b01      	subs	r3, #1
 80024fe:	041b      	lsls	r3, r3, #16
 8002500:	431a      	orrs	r2, r3
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	061b      	lsls	r3, r3, #24
 8002506:	431a      	orrs	r2, r3
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	071b      	lsls	r3, r3, #28
 800250c:	4925      	ldr	r1, [pc, #148]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800250e:	4313      	orrs	r3, r2
 8002510:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800251c:	2b00      	cmp	r3, #0
 800251e:	d016      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	019b      	lsls	r3, r3, #6
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	085b      	lsrs	r3, r3, #1
 8002532:	3b01      	subs	r3, #1
 8002534:	041b      	lsls	r3, r3, #16
 8002536:	431a      	orrs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	061b      	lsls	r3, r3, #24
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	071b      	lsls	r3, r3, #28
 8002546:	4917      	ldr	r1, [pc, #92]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002548:	4313      	orrs	r3, r2
 800254a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800254e:	4b16      	ldr	r3, [pc, #88]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002550:	2201      	movs	r2, #1
 8002552:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002554:	f7ff f82e 	bl	80015b4 <HAL_GetTick>
 8002558:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800255a:	e008      	b.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800255c:	f7ff f82a 	bl	80015b4 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e09f      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800256e:	4b0d      	ldr	r3, [pc, #52]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0f0      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 800257a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800257c:	2b01      	cmp	r3, #1
 800257e:	f040 8095 	bne.w	80026ac <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002582:	4b0a      	ldr	r3, [pc, #40]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002588:	f7ff f814 	bl	80015b4 <HAL_GetTick>
 800258c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800258e:	e00f      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002590:	f7ff f810 	bl	80015b4 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d908      	bls.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e085      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x642>
 80025a2:	bf00      	nop
 80025a4:	40023800 	.word	0x40023800
 80025a8:	42470068 	.word	0x42470068
 80025ac:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80025b0:	4b41      	ldr	r3, [pc, #260]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025bc:	d0e8      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0304 	and.w	r3, r3, #4
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d009      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d02b      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d127      	bne.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80025e6:	4b34      	ldr	r3, [pc, #208]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80025e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ec:	0c1b      	lsrs	r3, r3, #16
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	3301      	adds	r3, #1
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	699a      	ldr	r2, [r3, #24]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	019b      	lsls	r3, r3, #6
 8002602:	431a      	orrs	r2, r3
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	085b      	lsrs	r3, r3, #1
 8002608:	3b01      	subs	r3, #1
 800260a:	041b      	lsls	r3, r3, #16
 800260c:	431a      	orrs	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002612:	061b      	lsls	r3, r3, #24
 8002614:	4928      	ldr	r1, [pc, #160]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002616:	4313      	orrs	r3, r2
 8002618:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800261c:	4b26      	ldr	r3, [pc, #152]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800261e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002622:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800262a:	3b01      	subs	r3, #1
 800262c:	021b      	lsls	r3, r3, #8
 800262e:	4922      	ldr	r1, [pc, #136]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002630:	4313      	orrs	r3, r2
 8002632:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800263e:	2b00      	cmp	r3, #0
 8002640:	d01d      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002646:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800264a:	d118      	bne.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800264c:	4b1a      	ldr	r3, [pc, #104]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800264e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002652:	0e1b      	lsrs	r3, r3, #24
 8002654:	f003 030f 	and.w	r3, r3, #15
 8002658:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699a      	ldr	r2, [r3, #24]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	019b      	lsls	r3, r3, #6
 8002664:	431a      	orrs	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	085b      	lsrs	r3, r3, #1
 800266c:	3b01      	subs	r3, #1
 800266e:	041b      	lsls	r3, r3, #16
 8002670:	431a      	orrs	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	061b      	lsls	r3, r3, #24
 8002676:	4910      	ldr	r1, [pc, #64]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800267e:	4b0f      	ldr	r3, [pc, #60]	@ (80026bc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002680:	2201      	movs	r2, #1
 8002682:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002684:	f7fe ff96 	bl	80015b4 <HAL_GetTick>
 8002688:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800268a:	e008      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800268c:	f7fe ff92 	bl	80015b4 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e007      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800269e:	4b06      	ldr	r3, [pc, #24]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026aa:	d1ef      	bne.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3730      	adds	r7, #48	@ 0x30
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40023800 	.word	0x40023800
 80026bc:	42470070 	.word	0x42470070

080026c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026c4:	b0ae      	sub	sp, #184	@ 0xb8
 80026c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80026da:	2300      	movs	r3, #0
 80026dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026e6:	4bcb      	ldr	r3, [pc, #812]	@ (8002a14 <HAL_RCC_GetSysClockFreq+0x354>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 030c 	and.w	r3, r3, #12
 80026ee:	2b0c      	cmp	r3, #12
 80026f0:	f200 8206 	bhi.w	8002b00 <HAL_RCC_GetSysClockFreq+0x440>
 80026f4:	a201      	add	r2, pc, #4	@ (adr r2, 80026fc <HAL_RCC_GetSysClockFreq+0x3c>)
 80026f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026fa:	bf00      	nop
 80026fc:	08002731 	.word	0x08002731
 8002700:	08002b01 	.word	0x08002b01
 8002704:	08002b01 	.word	0x08002b01
 8002708:	08002b01 	.word	0x08002b01
 800270c:	08002739 	.word	0x08002739
 8002710:	08002b01 	.word	0x08002b01
 8002714:	08002b01 	.word	0x08002b01
 8002718:	08002b01 	.word	0x08002b01
 800271c:	08002741 	.word	0x08002741
 8002720:	08002b01 	.word	0x08002b01
 8002724:	08002b01 	.word	0x08002b01
 8002728:	08002b01 	.word	0x08002b01
 800272c:	08002931 	.word	0x08002931
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002730:	4bb9      	ldr	r3, [pc, #740]	@ (8002a18 <HAL_RCC_GetSysClockFreq+0x358>)
 8002732:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002736:	e1e7      	b.n	8002b08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002738:	4bb8      	ldr	r3, [pc, #736]	@ (8002a1c <HAL_RCC_GetSysClockFreq+0x35c>)
 800273a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800273e:	e1e3      	b.n	8002b08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002740:	4bb4      	ldr	r3, [pc, #720]	@ (8002a14 <HAL_RCC_GetSysClockFreq+0x354>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002748:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800274c:	4bb1      	ldr	r3, [pc, #708]	@ (8002a14 <HAL_RCC_GetSysClockFreq+0x354>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d071      	beq.n	800283c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002758:	4bae      	ldr	r3, [pc, #696]	@ (8002a14 <HAL_RCC_GetSysClockFreq+0x354>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	099b      	lsrs	r3, r3, #6
 800275e:	2200      	movs	r2, #0
 8002760:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002764:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002768:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800276c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002770:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002774:	2300      	movs	r3, #0
 8002776:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800277a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800277e:	4622      	mov	r2, r4
 8002780:	462b      	mov	r3, r5
 8002782:	f04f 0000 	mov.w	r0, #0
 8002786:	f04f 0100 	mov.w	r1, #0
 800278a:	0159      	lsls	r1, r3, #5
 800278c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002790:	0150      	lsls	r0, r2, #5
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	4621      	mov	r1, r4
 8002798:	1a51      	subs	r1, r2, r1
 800279a:	6439      	str	r1, [r7, #64]	@ 0x40
 800279c:	4629      	mov	r1, r5
 800279e:	eb63 0301 	sbc.w	r3, r3, r1
 80027a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80027b0:	4649      	mov	r1, r9
 80027b2:	018b      	lsls	r3, r1, #6
 80027b4:	4641      	mov	r1, r8
 80027b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027ba:	4641      	mov	r1, r8
 80027bc:	018a      	lsls	r2, r1, #6
 80027be:	4641      	mov	r1, r8
 80027c0:	1a51      	subs	r1, r2, r1
 80027c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80027c4:	4649      	mov	r1, r9
 80027c6:	eb63 0301 	sbc.w	r3, r3, r1
 80027ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027cc:	f04f 0200 	mov.w	r2, #0
 80027d0:	f04f 0300 	mov.w	r3, #0
 80027d4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80027d8:	4649      	mov	r1, r9
 80027da:	00cb      	lsls	r3, r1, #3
 80027dc:	4641      	mov	r1, r8
 80027de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027e2:	4641      	mov	r1, r8
 80027e4:	00ca      	lsls	r2, r1, #3
 80027e6:	4610      	mov	r0, r2
 80027e8:	4619      	mov	r1, r3
 80027ea:	4603      	mov	r3, r0
 80027ec:	4622      	mov	r2, r4
 80027ee:	189b      	adds	r3, r3, r2
 80027f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80027f2:	462b      	mov	r3, r5
 80027f4:	460a      	mov	r2, r1
 80027f6:	eb42 0303 	adc.w	r3, r2, r3
 80027fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80027fc:	f04f 0200 	mov.w	r2, #0
 8002800:	f04f 0300 	mov.w	r3, #0
 8002804:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002808:	4629      	mov	r1, r5
 800280a:	024b      	lsls	r3, r1, #9
 800280c:	4621      	mov	r1, r4
 800280e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002812:	4621      	mov	r1, r4
 8002814:	024a      	lsls	r2, r1, #9
 8002816:	4610      	mov	r0, r2
 8002818:	4619      	mov	r1, r3
 800281a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800281e:	2200      	movs	r2, #0
 8002820:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002824:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002828:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800282c:	f7fd fcf0 	bl	8000210 <__aeabi_uldivmod>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4613      	mov	r3, r2
 8002836:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800283a:	e067      	b.n	800290c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800283c:	4b75      	ldr	r3, [pc, #468]	@ (8002a14 <HAL_RCC_GetSysClockFreq+0x354>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	099b      	lsrs	r3, r3, #6
 8002842:	2200      	movs	r2, #0
 8002844:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002848:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800284c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002854:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002856:	2300      	movs	r3, #0
 8002858:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800285a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800285e:	4622      	mov	r2, r4
 8002860:	462b      	mov	r3, r5
 8002862:	f04f 0000 	mov.w	r0, #0
 8002866:	f04f 0100 	mov.w	r1, #0
 800286a:	0159      	lsls	r1, r3, #5
 800286c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002870:	0150      	lsls	r0, r2, #5
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4621      	mov	r1, r4
 8002878:	1a51      	subs	r1, r2, r1
 800287a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800287c:	4629      	mov	r1, r5
 800287e:	eb63 0301 	sbc.w	r3, r3, r1
 8002882:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	f04f 0300 	mov.w	r3, #0
 800288c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002890:	4649      	mov	r1, r9
 8002892:	018b      	lsls	r3, r1, #6
 8002894:	4641      	mov	r1, r8
 8002896:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800289a:	4641      	mov	r1, r8
 800289c:	018a      	lsls	r2, r1, #6
 800289e:	4641      	mov	r1, r8
 80028a0:	ebb2 0a01 	subs.w	sl, r2, r1
 80028a4:	4649      	mov	r1, r9
 80028a6:	eb63 0b01 	sbc.w	fp, r3, r1
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	f04f 0300 	mov.w	r3, #0
 80028b2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80028b6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80028ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028be:	4692      	mov	sl, r2
 80028c0:	469b      	mov	fp, r3
 80028c2:	4623      	mov	r3, r4
 80028c4:	eb1a 0303 	adds.w	r3, sl, r3
 80028c8:	623b      	str	r3, [r7, #32]
 80028ca:	462b      	mov	r3, r5
 80028cc:	eb4b 0303 	adc.w	r3, fp, r3
 80028d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80028d2:	f04f 0200 	mov.w	r2, #0
 80028d6:	f04f 0300 	mov.w	r3, #0
 80028da:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80028de:	4629      	mov	r1, r5
 80028e0:	028b      	lsls	r3, r1, #10
 80028e2:	4621      	mov	r1, r4
 80028e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028e8:	4621      	mov	r1, r4
 80028ea:	028a      	lsls	r2, r1, #10
 80028ec:	4610      	mov	r0, r2
 80028ee:	4619      	mov	r1, r3
 80028f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028f4:	2200      	movs	r2, #0
 80028f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80028f8:	677a      	str	r2, [r7, #116]	@ 0x74
 80028fa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80028fe:	f7fd fc87 	bl	8000210 <__aeabi_uldivmod>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	4613      	mov	r3, r2
 8002908:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800290c:	4b41      	ldr	r3, [pc, #260]	@ (8002a14 <HAL_RCC_GetSysClockFreq+0x354>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	0c1b      	lsrs	r3, r3, #16
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	3301      	adds	r3, #1
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800291e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002922:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002926:	fbb2 f3f3 	udiv	r3, r2, r3
 800292a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800292e:	e0eb      	b.n	8002b08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002930:	4b38      	ldr	r3, [pc, #224]	@ (8002a14 <HAL_RCC_GetSysClockFreq+0x354>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002938:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800293c:	4b35      	ldr	r3, [pc, #212]	@ (8002a14 <HAL_RCC_GetSysClockFreq+0x354>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d06b      	beq.n	8002a20 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002948:	4b32      	ldr	r3, [pc, #200]	@ (8002a14 <HAL_RCC_GetSysClockFreq+0x354>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	099b      	lsrs	r3, r3, #6
 800294e:	2200      	movs	r2, #0
 8002950:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002952:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002954:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800295a:	663b      	str	r3, [r7, #96]	@ 0x60
 800295c:	2300      	movs	r3, #0
 800295e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002960:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002964:	4622      	mov	r2, r4
 8002966:	462b      	mov	r3, r5
 8002968:	f04f 0000 	mov.w	r0, #0
 800296c:	f04f 0100 	mov.w	r1, #0
 8002970:	0159      	lsls	r1, r3, #5
 8002972:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002976:	0150      	lsls	r0, r2, #5
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4621      	mov	r1, r4
 800297e:	1a51      	subs	r1, r2, r1
 8002980:	61b9      	str	r1, [r7, #24]
 8002982:	4629      	mov	r1, r5
 8002984:	eb63 0301 	sbc.w	r3, r3, r1
 8002988:	61fb      	str	r3, [r7, #28]
 800298a:	f04f 0200 	mov.w	r2, #0
 800298e:	f04f 0300 	mov.w	r3, #0
 8002992:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002996:	4659      	mov	r1, fp
 8002998:	018b      	lsls	r3, r1, #6
 800299a:	4651      	mov	r1, sl
 800299c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029a0:	4651      	mov	r1, sl
 80029a2:	018a      	lsls	r2, r1, #6
 80029a4:	4651      	mov	r1, sl
 80029a6:	ebb2 0801 	subs.w	r8, r2, r1
 80029aa:	4659      	mov	r1, fp
 80029ac:	eb63 0901 	sbc.w	r9, r3, r1
 80029b0:	f04f 0200 	mov.w	r2, #0
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029c0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029c4:	4690      	mov	r8, r2
 80029c6:	4699      	mov	r9, r3
 80029c8:	4623      	mov	r3, r4
 80029ca:	eb18 0303 	adds.w	r3, r8, r3
 80029ce:	613b      	str	r3, [r7, #16]
 80029d0:	462b      	mov	r3, r5
 80029d2:	eb49 0303 	adc.w	r3, r9, r3
 80029d6:	617b      	str	r3, [r7, #20]
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	f04f 0300 	mov.w	r3, #0
 80029e0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80029e4:	4629      	mov	r1, r5
 80029e6:	024b      	lsls	r3, r1, #9
 80029e8:	4621      	mov	r1, r4
 80029ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029ee:	4621      	mov	r1, r4
 80029f0:	024a      	lsls	r2, r1, #9
 80029f2:	4610      	mov	r0, r2
 80029f4:	4619      	mov	r1, r3
 80029f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029fa:	2200      	movs	r2, #0
 80029fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80029fe:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002a00:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a04:	f7fd fc04 	bl	8000210 <__aeabi_uldivmod>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a12:	e065      	b.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x420>
 8002a14:	40023800 	.word	0x40023800
 8002a18:	00f42400 	.word	0x00f42400
 8002a1c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a20:	4b3d      	ldr	r3, [pc, #244]	@ (8002b18 <HAL_RCC_GetSysClockFreq+0x458>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	099b      	lsrs	r3, r3, #6
 8002a26:	2200      	movs	r2, #0
 8002a28:	4618      	mov	r0, r3
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a30:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a32:	2300      	movs	r3, #0
 8002a34:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a36:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002a3a:	4642      	mov	r2, r8
 8002a3c:	464b      	mov	r3, r9
 8002a3e:	f04f 0000 	mov.w	r0, #0
 8002a42:	f04f 0100 	mov.w	r1, #0
 8002a46:	0159      	lsls	r1, r3, #5
 8002a48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a4c:	0150      	lsls	r0, r2, #5
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	4641      	mov	r1, r8
 8002a54:	1a51      	subs	r1, r2, r1
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	4649      	mov	r1, r9
 8002a5a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002a6c:	4659      	mov	r1, fp
 8002a6e:	018b      	lsls	r3, r1, #6
 8002a70:	4651      	mov	r1, sl
 8002a72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a76:	4651      	mov	r1, sl
 8002a78:	018a      	lsls	r2, r1, #6
 8002a7a:	4651      	mov	r1, sl
 8002a7c:	1a54      	subs	r4, r2, r1
 8002a7e:	4659      	mov	r1, fp
 8002a80:	eb63 0501 	sbc.w	r5, r3, r1
 8002a84:	f04f 0200 	mov.w	r2, #0
 8002a88:	f04f 0300 	mov.w	r3, #0
 8002a8c:	00eb      	lsls	r3, r5, #3
 8002a8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a92:	00e2      	lsls	r2, r4, #3
 8002a94:	4614      	mov	r4, r2
 8002a96:	461d      	mov	r5, r3
 8002a98:	4643      	mov	r3, r8
 8002a9a:	18e3      	adds	r3, r4, r3
 8002a9c:	603b      	str	r3, [r7, #0]
 8002a9e:	464b      	mov	r3, r9
 8002aa0:	eb45 0303 	adc.w	r3, r5, r3
 8002aa4:	607b      	str	r3, [r7, #4]
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	f04f 0300 	mov.w	r3, #0
 8002aae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ab2:	4629      	mov	r1, r5
 8002ab4:	028b      	lsls	r3, r1, #10
 8002ab6:	4621      	mov	r1, r4
 8002ab8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002abc:	4621      	mov	r1, r4
 8002abe:	028a      	lsls	r2, r1, #10
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ac8:	2200      	movs	r2, #0
 8002aca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002acc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002ace:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ad2:	f7fd fb9d 	bl	8000210 <__aeabi_uldivmod>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	4613      	mov	r3, r2
 8002adc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8002b18 <HAL_RCC_GetSysClockFreq+0x458>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	0f1b      	lsrs	r3, r3, #28
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002aee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002af2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002afe:	e003      	b.n	8002b08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b00:	4b06      	ldr	r3, [pc, #24]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002b02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	37b8      	adds	r7, #184	@ 0xb8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b16:	bf00      	nop
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	00f42400 	.word	0x00f42400

08002b20 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e28d      	b.n	800304e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f000 8083 	beq.w	8002c46 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002b40:	4b94      	ldr	r3, [pc, #592]	@ (8002d94 <HAL_RCC_OscConfig+0x274>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 030c 	and.w	r3, r3, #12
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d019      	beq.n	8002b80 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002b4c:	4b91      	ldr	r3, [pc, #580]	@ (8002d94 <HAL_RCC_OscConfig+0x274>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 030c 	and.w	r3, r3, #12
        || \
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d106      	bne.n	8002b66 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002b58:	4b8e      	ldr	r3, [pc, #568]	@ (8002d94 <HAL_RCC_OscConfig+0x274>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b64:	d00c      	beq.n	8002b80 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b66:	4b8b      	ldr	r3, [pc, #556]	@ (8002d94 <HAL_RCC_OscConfig+0x274>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002b6e:	2b0c      	cmp	r3, #12
 8002b70:	d112      	bne.n	8002b98 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b72:	4b88      	ldr	r3, [pc, #544]	@ (8002d94 <HAL_RCC_OscConfig+0x274>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b7e:	d10b      	bne.n	8002b98 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b80:	4b84      	ldr	r3, [pc, #528]	@ (8002d94 <HAL_RCC_OscConfig+0x274>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d05b      	beq.n	8002c44 <HAL_RCC_OscConfig+0x124>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d157      	bne.n	8002c44 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e25a      	b.n	800304e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ba0:	d106      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x90>
 8002ba2:	4b7c      	ldr	r3, [pc, #496]	@ (8002d94 <HAL_RCC_OscConfig+0x274>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a7b      	ldr	r2, [pc, #492]	@ (8002d94 <HAL_RCC_OscConfig+0x274>)
 8002ba8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	e01d      	b.n	8002bec <HAL_RCC_OscConfig+0xcc>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_RCC_OscConfig+0xb4>
 8002bba:	4b76      	ldr	r3, [pc, #472]	@ (8002d94 <HAL_RCC_OscConfig+0x274>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a75      	ldr	r2, [pc, #468]	@ (8002d94 <HAL_RCC_OscConfig+0x274>)
 8002bc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	4b73      	ldr	r3, [pc, #460]	@ (8002d94 <HAL_RCC_OscConfig+0x274>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a72      	ldr	r2, [pc, #456]	@ (8002d94 <HAL_RCC_OscConfig+0x274>)
 8002bcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	e00b      	b.n	8002bec <HAL_RCC_OscConfig+0xcc>
 8002bd4:	4b6f      	ldr	r3, [pc, #444]	@ (8002d94 <HAL_RCC_OscConfig+0x274>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a6e      	ldr	r2, [pc, #440]	@ (8002d94 <HAL_RCC_OscConfig+0x274>)
 8002bda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	4b6c      	ldr	r3, [pc, #432]	@ (8002d94 <HAL_RCC_OscConfig+0x274>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a6b      	ldr	r2, [pc, #428]	@ (8002d94 <HAL_RCC_OscConfig+0x274>)
 8002be6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d013      	beq.n	8002c1c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf4:	f7fe fcde 	bl	80015b4 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bfc:	f7fe fcda 	bl	80015b4 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b64      	cmp	r3, #100	@ 0x64
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e21f      	b.n	800304e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0e:	4b61      	ldr	r3, [pc, #388]	@ (8002d94 <HAL_RCC_OscConfig+0x274>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0f0      	beq.n	8002bfc <HAL_RCC_OscConfig+0xdc>
 8002c1a:	e014      	b.n	8002c46 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1c:	f7fe fcca 	bl	80015b4 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c24:	f7fe fcc6 	bl	80015b4 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b64      	cmp	r3, #100	@ 0x64
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e20b      	b.n	800304e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c36:	4b57      	ldr	r3, [pc, #348]	@ (8002d94 <HAL_RCC_OscConfig+0x274>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f0      	bne.n	8002c24 <HAL_RCC_OscConfig+0x104>
 8002c42:	e000      	b.n	8002c46 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d06f      	beq.n	8002d32 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002c52:	4b50      	ldr	r3, [pc, #320]	@ (8002d94 <HAL_RCC_OscConfig+0x274>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 030c 	and.w	r3, r3, #12
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d017      	beq.n	8002c8e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002c5e:	4b4d      	ldr	r3, [pc, #308]	@ (8002d94 <HAL_RCC_OscConfig+0x274>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 030c 	and.w	r3, r3, #12
        || \
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d105      	bne.n	8002c76 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002c6a:	4b4a      	ldr	r3, [pc, #296]	@ (8002d94 <HAL_RCC_OscConfig+0x274>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00b      	beq.n	8002c8e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c76:	4b47      	ldr	r3, [pc, #284]	@ (8002d94 <HAL_RCC_OscConfig+0x274>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002c7e:	2b0c      	cmp	r3, #12
 8002c80:	d11c      	bne.n	8002cbc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c82:	4b44      	ldr	r3, [pc, #272]	@ (8002d94 <HAL_RCC_OscConfig+0x274>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d116      	bne.n	8002cbc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c8e:	4b41      	ldr	r3, [pc, #260]	@ (8002d94 <HAL_RCC_OscConfig+0x274>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d005      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x186>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d001      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e1d3      	b.n	800304e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca6:	4b3b      	ldr	r3, [pc, #236]	@ (8002d94 <HAL_RCC_OscConfig+0x274>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	4937      	ldr	r1, [pc, #220]	@ (8002d94 <HAL_RCC_OscConfig+0x274>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cba:	e03a      	b.n	8002d32 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d020      	beq.n	8002d06 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cc4:	4b34      	ldr	r3, [pc, #208]	@ (8002d98 <HAL_RCC_OscConfig+0x278>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cca:	f7fe fc73 	bl	80015b4 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cd2:	f7fe fc6f 	bl	80015b4 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e1b4      	b.n	800304e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce4:	4b2b      	ldr	r3, [pc, #172]	@ (8002d94 <HAL_RCC_OscConfig+0x274>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0f0      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf0:	4b28      	ldr	r3, [pc, #160]	@ (8002d94 <HAL_RCC_OscConfig+0x274>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	4925      	ldr	r1, [pc, #148]	@ (8002d94 <HAL_RCC_OscConfig+0x274>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	600b      	str	r3, [r1, #0]
 8002d04:	e015      	b.n	8002d32 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d06:	4b24      	ldr	r3, [pc, #144]	@ (8002d98 <HAL_RCC_OscConfig+0x278>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0c:	f7fe fc52 	bl	80015b4 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d14:	f7fe fc4e 	bl	80015b4 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e193      	b.n	800304e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d26:	4b1b      	ldr	r3, [pc, #108]	@ (8002d94 <HAL_RCC_OscConfig+0x274>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1f0      	bne.n	8002d14 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d036      	beq.n	8002dac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d016      	beq.n	8002d74 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d46:	4b15      	ldr	r3, [pc, #84]	@ (8002d9c <HAL_RCC_OscConfig+0x27c>)
 8002d48:	2201      	movs	r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4c:	f7fe fc32 	bl	80015b4 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d54:	f7fe fc2e 	bl	80015b4 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e173      	b.n	800304e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d66:	4b0b      	ldr	r3, [pc, #44]	@ (8002d94 <HAL_RCC_OscConfig+0x274>)
 8002d68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0f0      	beq.n	8002d54 <HAL_RCC_OscConfig+0x234>
 8002d72:	e01b      	b.n	8002dac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d74:	4b09      	ldr	r3, [pc, #36]	@ (8002d9c <HAL_RCC_OscConfig+0x27c>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7a:	f7fe fc1b 	bl	80015b4 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d80:	e00e      	b.n	8002da0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d82:	f7fe fc17 	bl	80015b4 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d907      	bls.n	8002da0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e15c      	b.n	800304e <HAL_RCC_OscConfig+0x52e>
 8002d94:	40023800 	.word	0x40023800
 8002d98:	42470000 	.word	0x42470000
 8002d9c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da0:	4b8a      	ldr	r3, [pc, #552]	@ (8002fcc <HAL_RCC_OscConfig+0x4ac>)
 8002da2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1ea      	bne.n	8002d82 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 8097 	beq.w	8002ee8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dbe:	4b83      	ldr	r3, [pc, #524]	@ (8002fcc <HAL_RCC_OscConfig+0x4ac>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10f      	bne.n	8002dea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60bb      	str	r3, [r7, #8]
 8002dce:	4b7f      	ldr	r3, [pc, #508]	@ (8002fcc <HAL_RCC_OscConfig+0x4ac>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd2:	4a7e      	ldr	r2, [pc, #504]	@ (8002fcc <HAL_RCC_OscConfig+0x4ac>)
 8002dd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dda:	4b7c      	ldr	r3, [pc, #496]	@ (8002fcc <HAL_RCC_OscConfig+0x4ac>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002de2:	60bb      	str	r3, [r7, #8]
 8002de4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002de6:	2301      	movs	r3, #1
 8002de8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dea:	4b79      	ldr	r3, [pc, #484]	@ (8002fd0 <HAL_RCC_OscConfig+0x4b0>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d118      	bne.n	8002e28 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002df6:	4b76      	ldr	r3, [pc, #472]	@ (8002fd0 <HAL_RCC_OscConfig+0x4b0>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a75      	ldr	r2, [pc, #468]	@ (8002fd0 <HAL_RCC_OscConfig+0x4b0>)
 8002dfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e02:	f7fe fbd7 	bl	80015b4 <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e0a:	f7fe fbd3 	bl	80015b4 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e118      	b.n	800304e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1c:	4b6c      	ldr	r3, [pc, #432]	@ (8002fd0 <HAL_RCC_OscConfig+0x4b0>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0f0      	beq.n	8002e0a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d106      	bne.n	8002e3e <HAL_RCC_OscConfig+0x31e>
 8002e30:	4b66      	ldr	r3, [pc, #408]	@ (8002fcc <HAL_RCC_OscConfig+0x4ac>)
 8002e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e34:	4a65      	ldr	r2, [pc, #404]	@ (8002fcc <HAL_RCC_OscConfig+0x4ac>)
 8002e36:	f043 0301 	orr.w	r3, r3, #1
 8002e3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e3c:	e01c      	b.n	8002e78 <HAL_RCC_OscConfig+0x358>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	2b05      	cmp	r3, #5
 8002e44:	d10c      	bne.n	8002e60 <HAL_RCC_OscConfig+0x340>
 8002e46:	4b61      	ldr	r3, [pc, #388]	@ (8002fcc <HAL_RCC_OscConfig+0x4ac>)
 8002e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e4a:	4a60      	ldr	r2, [pc, #384]	@ (8002fcc <HAL_RCC_OscConfig+0x4ac>)
 8002e4c:	f043 0304 	orr.w	r3, r3, #4
 8002e50:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e52:	4b5e      	ldr	r3, [pc, #376]	@ (8002fcc <HAL_RCC_OscConfig+0x4ac>)
 8002e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e56:	4a5d      	ldr	r2, [pc, #372]	@ (8002fcc <HAL_RCC_OscConfig+0x4ac>)
 8002e58:	f043 0301 	orr.w	r3, r3, #1
 8002e5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e5e:	e00b      	b.n	8002e78 <HAL_RCC_OscConfig+0x358>
 8002e60:	4b5a      	ldr	r3, [pc, #360]	@ (8002fcc <HAL_RCC_OscConfig+0x4ac>)
 8002e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e64:	4a59      	ldr	r2, [pc, #356]	@ (8002fcc <HAL_RCC_OscConfig+0x4ac>)
 8002e66:	f023 0301 	bic.w	r3, r3, #1
 8002e6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e6c:	4b57      	ldr	r3, [pc, #348]	@ (8002fcc <HAL_RCC_OscConfig+0x4ac>)
 8002e6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e70:	4a56      	ldr	r2, [pc, #344]	@ (8002fcc <HAL_RCC_OscConfig+0x4ac>)
 8002e72:	f023 0304 	bic.w	r3, r3, #4
 8002e76:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d015      	beq.n	8002eac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e80:	f7fe fb98 	bl	80015b4 <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e86:	e00a      	b.n	8002e9e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e88:	f7fe fb94 	bl	80015b4 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e0d7      	b.n	800304e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e9e:	4b4b      	ldr	r3, [pc, #300]	@ (8002fcc <HAL_RCC_OscConfig+0x4ac>)
 8002ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0ee      	beq.n	8002e88 <HAL_RCC_OscConfig+0x368>
 8002eaa:	e014      	b.n	8002ed6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eac:	f7fe fb82 	bl	80015b4 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb2:	e00a      	b.n	8002eca <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb4:	f7fe fb7e 	bl	80015b4 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e0c1      	b.n	800304e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eca:	4b40      	ldr	r3, [pc, #256]	@ (8002fcc <HAL_RCC_OscConfig+0x4ac>)
 8002ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1ee      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ed6:	7dfb      	ldrb	r3, [r7, #23]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d105      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002edc:	4b3b      	ldr	r3, [pc, #236]	@ (8002fcc <HAL_RCC_OscConfig+0x4ac>)
 8002ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee0:	4a3a      	ldr	r2, [pc, #232]	@ (8002fcc <HAL_RCC_OscConfig+0x4ac>)
 8002ee2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ee6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 80ad 	beq.w	800304c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ef2:	4b36      	ldr	r3, [pc, #216]	@ (8002fcc <HAL_RCC_OscConfig+0x4ac>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 030c 	and.w	r3, r3, #12
 8002efa:	2b08      	cmp	r3, #8
 8002efc:	d060      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d145      	bne.n	8002f92 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f06:	4b33      	ldr	r3, [pc, #204]	@ (8002fd4 <HAL_RCC_OscConfig+0x4b4>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0c:	f7fe fb52 	bl	80015b4 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f14:	f7fe fb4e 	bl	80015b4 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e093      	b.n	800304e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f26:	4b29      	ldr	r3, [pc, #164]	@ (8002fcc <HAL_RCC_OscConfig+0x4ac>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1f0      	bne.n	8002f14 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69da      	ldr	r2, [r3, #28]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f40:	019b      	lsls	r3, r3, #6
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f48:	085b      	lsrs	r3, r3, #1
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	041b      	lsls	r3, r3, #16
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f54:	061b      	lsls	r3, r3, #24
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5c:	071b      	lsls	r3, r3, #28
 8002f5e:	491b      	ldr	r1, [pc, #108]	@ (8002fcc <HAL_RCC_OscConfig+0x4ac>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f64:	4b1b      	ldr	r3, [pc, #108]	@ (8002fd4 <HAL_RCC_OscConfig+0x4b4>)
 8002f66:	2201      	movs	r2, #1
 8002f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6a:	f7fe fb23 	bl	80015b4 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f72:	f7fe fb1f 	bl	80015b4 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e064      	b.n	800304e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f84:	4b11      	ldr	r3, [pc, #68]	@ (8002fcc <HAL_RCC_OscConfig+0x4ac>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0f0      	beq.n	8002f72 <HAL_RCC_OscConfig+0x452>
 8002f90:	e05c      	b.n	800304c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f92:	4b10      	ldr	r3, [pc, #64]	@ (8002fd4 <HAL_RCC_OscConfig+0x4b4>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f98:	f7fe fb0c 	bl	80015b4 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa0:	f7fe fb08 	bl	80015b4 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e04d      	b.n	800304e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb2:	4b06      	ldr	r3, [pc, #24]	@ (8002fcc <HAL_RCC_OscConfig+0x4ac>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x480>
 8002fbe:	e045      	b.n	800304c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d107      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e040      	b.n	800304e <HAL_RCC_OscConfig+0x52e>
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40007000 	.word	0x40007000
 8002fd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8003058 <HAL_RCC_OscConfig+0x538>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d030      	beq.n	8003048 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d129      	bne.n	8003048 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d122      	bne.n	8003048 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003008:	4013      	ands	r3, r2
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800300e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003010:	4293      	cmp	r3, r2
 8003012:	d119      	bne.n	8003048 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301e:	085b      	lsrs	r3, r3, #1
 8003020:	3b01      	subs	r3, #1
 8003022:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003024:	429a      	cmp	r2, r3
 8003026:	d10f      	bne.n	8003048 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003032:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003034:	429a      	cmp	r2, r3
 8003036:	d107      	bne.n	8003048 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003042:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003044:	429a      	cmp	r2, r3
 8003046:	d001      	beq.n	800304c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e000      	b.n	800304e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40023800 	.word	0x40023800

0800305c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e097      	b.n	80031a0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	d106      	bne.n	800308a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7fe f8a5 	bl	80011d4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2202      	movs	r2, #2
 800308e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6812      	ldr	r2, [r2, #0]
 800309c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80030a0:	f023 0307 	bic.w	r3, r3, #7
 80030a4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3304      	adds	r3, #4
 80030ae:	4619      	mov	r1, r3
 80030b0:	4610      	mov	r0, r2
 80030b2:	f000 fa29 	bl	8003508 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030de:	f023 0303 	bic.w	r3, r3, #3
 80030e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	021b      	lsls	r3, r3, #8
 80030ee:	4313      	orrs	r3, r2
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80030fc:	f023 030c 	bic.w	r3, r3, #12
 8003100:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003108:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800310c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	021b      	lsls	r3, r3, #8
 8003118:	4313      	orrs	r3, r2
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4313      	orrs	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	011a      	lsls	r2, r3, #4
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	031b      	lsls	r3, r3, #12
 800312c:	4313      	orrs	r3, r2
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4313      	orrs	r3, r2
 8003132:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800313a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003142:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	4313      	orrs	r3, r2
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4313      	orrs	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031b8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80031c0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031c8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80031d0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d110      	bne.n	80031fa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d102      	bne.n	80031e4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80031de:	7b7b      	ldrb	r3, [r7, #13]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d001      	beq.n	80031e8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e069      	b.n	80032bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2202      	movs	r2, #2
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2202      	movs	r2, #2
 80031f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031f8:	e031      	b.n	800325e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b04      	cmp	r3, #4
 80031fe:	d110      	bne.n	8003222 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003200:	7bbb      	ldrb	r3, [r7, #14]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d102      	bne.n	800320c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003206:	7b3b      	ldrb	r3, [r7, #12]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d001      	beq.n	8003210 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e055      	b.n	80032bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003220:	e01d      	b.n	800325e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003222:	7bfb      	ldrb	r3, [r7, #15]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d108      	bne.n	800323a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003228:	7bbb      	ldrb	r3, [r7, #14]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d105      	bne.n	800323a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800322e:	7b7b      	ldrb	r3, [r7, #13]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d102      	bne.n	800323a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003234:	7b3b      	ldrb	r3, [r7, #12]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d001      	beq.n	800323e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e03e      	b.n	80032bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2202      	movs	r2, #2
 8003242:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2202      	movs	r2, #2
 800324a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2202      	movs	r2, #2
 8003252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2202      	movs	r2, #2
 800325a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d003      	beq.n	800326c <HAL_TIM_Encoder_Start+0xc4>
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	2b04      	cmp	r3, #4
 8003268:	d008      	beq.n	800327c <HAL_TIM_Encoder_Start+0xd4>
 800326a:	e00f      	b.n	800328c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2201      	movs	r2, #1
 8003272:	2100      	movs	r1, #0
 8003274:	4618      	mov	r0, r3
 8003276:	f000 f9ed 	bl	8003654 <TIM_CCxChannelCmd>
      break;
 800327a:	e016      	b.n	80032aa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2201      	movs	r2, #1
 8003282:	2104      	movs	r1, #4
 8003284:	4618      	mov	r0, r3
 8003286:	f000 f9e5 	bl	8003654 <TIM_CCxChannelCmd>
      break;
 800328a:	e00e      	b.n	80032aa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2201      	movs	r2, #1
 8003292:	2100      	movs	r1, #0
 8003294:	4618      	mov	r0, r3
 8003296:	f000 f9dd 	bl	8003654 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2201      	movs	r2, #1
 80032a0:	2104      	movs	r1, #4
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 f9d6 	bl	8003654 <TIM_CCxChannelCmd>
      break;
 80032a8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f042 0201 	orr.w	r2, r2, #1
 80032b8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d020      	beq.n	8003328 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d01b      	beq.n	8003328 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f06f 0202 	mvn.w	r2, #2
 80032f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f8dc 	bl	80034cc <HAL_TIM_IC_CaptureCallback>
 8003314:	e005      	b.n	8003322 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f8ce 	bl	80034b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f8df 	bl	80034e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f003 0304 	and.w	r3, r3, #4
 800332e:	2b00      	cmp	r3, #0
 8003330:	d020      	beq.n	8003374 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b00      	cmp	r3, #0
 800333a:	d01b      	beq.n	8003374 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f06f 0204 	mvn.w	r2, #4
 8003344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2202      	movs	r2, #2
 800334a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f8b6 	bl	80034cc <HAL_TIM_IC_CaptureCallback>
 8003360:	e005      	b.n	800336e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f8a8 	bl	80034b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f8b9 	bl	80034e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d020      	beq.n	80033c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f003 0308 	and.w	r3, r3, #8
 8003384:	2b00      	cmp	r3, #0
 8003386:	d01b      	beq.n	80033c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f06f 0208 	mvn.w	r2, #8
 8003390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2204      	movs	r2, #4
 8003396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f890 	bl	80034cc <HAL_TIM_IC_CaptureCallback>
 80033ac:	e005      	b.n	80033ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 f882 	bl	80034b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f893 	bl	80034e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	f003 0310 	and.w	r3, r3, #16
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d020      	beq.n	800340c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f003 0310 	and.w	r3, r3, #16
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d01b      	beq.n	800340c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f06f 0210 	mvn.w	r2, #16
 80033dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2208      	movs	r2, #8
 80033e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f86a 	bl	80034cc <HAL_TIM_IC_CaptureCallback>
 80033f8:	e005      	b.n	8003406 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f85c 	bl	80034b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 f86d 	bl	80034e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00c      	beq.n	8003430 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b00      	cmp	r3, #0
 800341e:	d007      	beq.n	8003430 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f06f 0201 	mvn.w	r2, #1
 8003428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f83a 	bl	80034a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00c      	beq.n	8003454 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003440:	2b00      	cmp	r3, #0
 8003442:	d007      	beq.n	8003454 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800344c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f9ac 	bl	80037ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00c      	beq.n	8003478 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003464:	2b00      	cmp	r3, #0
 8003466:	d007      	beq.n	8003478 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f83e 	bl	80034f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f003 0320 	and.w	r3, r3, #32
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00c      	beq.n	800349c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f003 0320 	and.w	r3, r3, #32
 8003488:	2b00      	cmp	r3, #0
 800348a:	d007      	beq.n	800349c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f06f 0220 	mvn.w	r2, #32
 8003494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f97e 	bl	8003798 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800349c:	bf00      	nop
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a43      	ldr	r2, [pc, #268]	@ (8003628 <TIM_Base_SetConfig+0x120>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d013      	beq.n	8003548 <TIM_Base_SetConfig+0x40>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003526:	d00f      	beq.n	8003548 <TIM_Base_SetConfig+0x40>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a40      	ldr	r2, [pc, #256]	@ (800362c <TIM_Base_SetConfig+0x124>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d00b      	beq.n	8003548 <TIM_Base_SetConfig+0x40>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a3f      	ldr	r2, [pc, #252]	@ (8003630 <TIM_Base_SetConfig+0x128>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d007      	beq.n	8003548 <TIM_Base_SetConfig+0x40>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a3e      	ldr	r2, [pc, #248]	@ (8003634 <TIM_Base_SetConfig+0x12c>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d003      	beq.n	8003548 <TIM_Base_SetConfig+0x40>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a3d      	ldr	r2, [pc, #244]	@ (8003638 <TIM_Base_SetConfig+0x130>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d108      	bne.n	800355a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800354e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	4313      	orrs	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a32      	ldr	r2, [pc, #200]	@ (8003628 <TIM_Base_SetConfig+0x120>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d02b      	beq.n	80035ba <TIM_Base_SetConfig+0xb2>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003568:	d027      	beq.n	80035ba <TIM_Base_SetConfig+0xb2>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a2f      	ldr	r2, [pc, #188]	@ (800362c <TIM_Base_SetConfig+0x124>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d023      	beq.n	80035ba <TIM_Base_SetConfig+0xb2>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a2e      	ldr	r2, [pc, #184]	@ (8003630 <TIM_Base_SetConfig+0x128>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d01f      	beq.n	80035ba <TIM_Base_SetConfig+0xb2>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a2d      	ldr	r2, [pc, #180]	@ (8003634 <TIM_Base_SetConfig+0x12c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d01b      	beq.n	80035ba <TIM_Base_SetConfig+0xb2>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a2c      	ldr	r2, [pc, #176]	@ (8003638 <TIM_Base_SetConfig+0x130>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d017      	beq.n	80035ba <TIM_Base_SetConfig+0xb2>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a2b      	ldr	r2, [pc, #172]	@ (800363c <TIM_Base_SetConfig+0x134>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d013      	beq.n	80035ba <TIM_Base_SetConfig+0xb2>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a2a      	ldr	r2, [pc, #168]	@ (8003640 <TIM_Base_SetConfig+0x138>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d00f      	beq.n	80035ba <TIM_Base_SetConfig+0xb2>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a29      	ldr	r2, [pc, #164]	@ (8003644 <TIM_Base_SetConfig+0x13c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d00b      	beq.n	80035ba <TIM_Base_SetConfig+0xb2>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a28      	ldr	r2, [pc, #160]	@ (8003648 <TIM_Base_SetConfig+0x140>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d007      	beq.n	80035ba <TIM_Base_SetConfig+0xb2>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a27      	ldr	r2, [pc, #156]	@ (800364c <TIM_Base_SetConfig+0x144>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d003      	beq.n	80035ba <TIM_Base_SetConfig+0xb2>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a26      	ldr	r2, [pc, #152]	@ (8003650 <TIM_Base_SetConfig+0x148>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d108      	bne.n	80035cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a0e      	ldr	r2, [pc, #56]	@ (8003628 <TIM_Base_SetConfig+0x120>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d003      	beq.n	80035fa <TIM_Base_SetConfig+0xf2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a10      	ldr	r2, [pc, #64]	@ (8003638 <TIM_Base_SetConfig+0x130>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d103      	bne.n	8003602 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	691a      	ldr	r2, [r3, #16]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f043 0204 	orr.w	r2, r3, #4
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	601a      	str	r2, [r3, #0]
}
 800361a:	bf00      	nop
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	40010000 	.word	0x40010000
 800362c:	40000400 	.word	0x40000400
 8003630:	40000800 	.word	0x40000800
 8003634:	40000c00 	.word	0x40000c00
 8003638:	40010400 	.word	0x40010400
 800363c:	40014000 	.word	0x40014000
 8003640:	40014400 	.word	0x40014400
 8003644:	40014800 	.word	0x40014800
 8003648:	40001800 	.word	0x40001800
 800364c:	40001c00 	.word	0x40001c00
 8003650:	40002000 	.word	0x40002000

08003654 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f003 031f 	and.w	r3, r3, #31
 8003666:	2201      	movs	r2, #1
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6a1a      	ldr	r2, [r3, #32]
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	43db      	mvns	r3, r3
 8003676:	401a      	ands	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6a1a      	ldr	r2, [r3, #32]
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	f003 031f 	and.w	r3, r3, #31
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	fa01 f303 	lsl.w	r3, r1, r3
 800368c:	431a      	orrs	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	621a      	str	r2, [r3, #32]
}
 8003692:	bf00      	nop
 8003694:	371c      	adds	r7, #28
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
	...

080036a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d101      	bne.n	80036b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036b4:	2302      	movs	r3, #2
 80036b6:	e05a      	b.n	800376e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2202      	movs	r2, #2
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a21      	ldr	r2, [pc, #132]	@ (800377c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d022      	beq.n	8003742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003704:	d01d      	beq.n	8003742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a1d      	ldr	r2, [pc, #116]	@ (8003780 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d018      	beq.n	8003742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a1b      	ldr	r2, [pc, #108]	@ (8003784 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d013      	beq.n	8003742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a1a      	ldr	r2, [pc, #104]	@ (8003788 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d00e      	beq.n	8003742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a18      	ldr	r2, [pc, #96]	@ (800378c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d009      	beq.n	8003742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a17      	ldr	r2, [pc, #92]	@ (8003790 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d004      	beq.n	8003742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a15      	ldr	r2, [pc, #84]	@ (8003794 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d10c      	bne.n	800375c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003748:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	4313      	orrs	r3, r2
 8003752:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	40010000 	.word	0x40010000
 8003780:	40000400 	.word	0x40000400
 8003784:	40000800 	.word	0x40000800
 8003788:	40000c00 	.word	0x40000c00
 800378c:	40010400 	.word	0x40010400
 8003790:	40014000 	.word	0x40014000
 8003794:	40001800 	.word	0x40001800

08003798 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e042      	b.n	8003858 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d106      	bne.n	80037ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7fd fd6e 	bl	80012c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2224      	movs	r2, #36	@ 0x24
 80037f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003802:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f82b 	bl	8003860 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	691a      	ldr	r2, [r3, #16]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003818:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695a      	ldr	r2, [r3, #20]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003828:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68da      	ldr	r2, [r3, #12]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003838:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2220      	movs	r2, #32
 8003844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2220      	movs	r2, #32
 800384c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003864:	b0c0      	sub	sp, #256	@ 0x100
 8003866:	af00      	add	r7, sp, #0
 8003868:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800386c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800387c:	68d9      	ldr	r1, [r3, #12]
 800387e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	ea40 0301 	orr.w	r3, r0, r1
 8003888:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800388a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	431a      	orrs	r2, r3
 8003898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	431a      	orrs	r2, r3
 80038a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80038ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80038b8:	f021 010c 	bic.w	r1, r1, #12
 80038bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80038c6:	430b      	orrs	r3, r1
 80038c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80038d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038da:	6999      	ldr	r1, [r3, #24]
 80038dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	ea40 0301 	orr.w	r3, r0, r1
 80038e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	4b8f      	ldr	r3, [pc, #572]	@ (8003b2c <UART_SetConfig+0x2cc>)
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d005      	beq.n	8003900 <UART_SetConfig+0xa0>
 80038f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	4b8d      	ldr	r3, [pc, #564]	@ (8003b30 <UART_SetConfig+0x2d0>)
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d104      	bne.n	800390a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003900:	f7fe fba0 	bl	8002044 <HAL_RCC_GetPCLK2Freq>
 8003904:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003908:	e003      	b.n	8003912 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800390a:	f7fe fb87 	bl	800201c <HAL_RCC_GetPCLK1Freq>
 800390e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003916:	69db      	ldr	r3, [r3, #28]
 8003918:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800391c:	f040 810c 	bne.w	8003b38 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003920:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003924:	2200      	movs	r2, #0
 8003926:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800392a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800392e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003932:	4622      	mov	r2, r4
 8003934:	462b      	mov	r3, r5
 8003936:	1891      	adds	r1, r2, r2
 8003938:	65b9      	str	r1, [r7, #88]	@ 0x58
 800393a:	415b      	adcs	r3, r3
 800393c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800393e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003942:	4621      	mov	r1, r4
 8003944:	eb12 0801 	adds.w	r8, r2, r1
 8003948:	4629      	mov	r1, r5
 800394a:	eb43 0901 	adc.w	r9, r3, r1
 800394e:	f04f 0200 	mov.w	r2, #0
 8003952:	f04f 0300 	mov.w	r3, #0
 8003956:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800395a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800395e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003962:	4690      	mov	r8, r2
 8003964:	4699      	mov	r9, r3
 8003966:	4623      	mov	r3, r4
 8003968:	eb18 0303 	adds.w	r3, r8, r3
 800396c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003970:	462b      	mov	r3, r5
 8003972:	eb49 0303 	adc.w	r3, r9, r3
 8003976:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800397a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003986:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800398a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800398e:	460b      	mov	r3, r1
 8003990:	18db      	adds	r3, r3, r3
 8003992:	653b      	str	r3, [r7, #80]	@ 0x50
 8003994:	4613      	mov	r3, r2
 8003996:	eb42 0303 	adc.w	r3, r2, r3
 800399a:	657b      	str	r3, [r7, #84]	@ 0x54
 800399c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80039a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80039a4:	f7fc fc34 	bl	8000210 <__aeabi_uldivmod>
 80039a8:	4602      	mov	r2, r0
 80039aa:	460b      	mov	r3, r1
 80039ac:	4b61      	ldr	r3, [pc, #388]	@ (8003b34 <UART_SetConfig+0x2d4>)
 80039ae:	fba3 2302 	umull	r2, r3, r3, r2
 80039b2:	095b      	lsrs	r3, r3, #5
 80039b4:	011c      	lsls	r4, r3, #4
 80039b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039ba:	2200      	movs	r2, #0
 80039bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80039c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80039c8:	4642      	mov	r2, r8
 80039ca:	464b      	mov	r3, r9
 80039cc:	1891      	adds	r1, r2, r2
 80039ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80039d0:	415b      	adcs	r3, r3
 80039d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80039d8:	4641      	mov	r1, r8
 80039da:	eb12 0a01 	adds.w	sl, r2, r1
 80039de:	4649      	mov	r1, r9
 80039e0:	eb43 0b01 	adc.w	fp, r3, r1
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	f04f 0300 	mov.w	r3, #0
 80039ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039f8:	4692      	mov	sl, r2
 80039fa:	469b      	mov	fp, r3
 80039fc:	4643      	mov	r3, r8
 80039fe:	eb1a 0303 	adds.w	r3, sl, r3
 8003a02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a06:	464b      	mov	r3, r9
 8003a08:	eb4b 0303 	adc.w	r3, fp, r3
 8003a0c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a1c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003a20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003a24:	460b      	mov	r3, r1
 8003a26:	18db      	adds	r3, r3, r3
 8003a28:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	eb42 0303 	adc.w	r3, r2, r3
 8003a30:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003a36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003a3a:	f7fc fbe9 	bl	8000210 <__aeabi_uldivmod>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	460b      	mov	r3, r1
 8003a42:	4611      	mov	r1, r2
 8003a44:	4b3b      	ldr	r3, [pc, #236]	@ (8003b34 <UART_SetConfig+0x2d4>)
 8003a46:	fba3 2301 	umull	r2, r3, r3, r1
 8003a4a:	095b      	lsrs	r3, r3, #5
 8003a4c:	2264      	movs	r2, #100	@ 0x64
 8003a4e:	fb02 f303 	mul.w	r3, r2, r3
 8003a52:	1acb      	subs	r3, r1, r3
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003a5a:	4b36      	ldr	r3, [pc, #216]	@ (8003b34 <UART_SetConfig+0x2d4>)
 8003a5c:	fba3 2302 	umull	r2, r3, r3, r2
 8003a60:	095b      	lsrs	r3, r3, #5
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003a68:	441c      	add	r4, r3
 8003a6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a74:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003a78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003a7c:	4642      	mov	r2, r8
 8003a7e:	464b      	mov	r3, r9
 8003a80:	1891      	adds	r1, r2, r2
 8003a82:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003a84:	415b      	adcs	r3, r3
 8003a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003a8c:	4641      	mov	r1, r8
 8003a8e:	1851      	adds	r1, r2, r1
 8003a90:	6339      	str	r1, [r7, #48]	@ 0x30
 8003a92:	4649      	mov	r1, r9
 8003a94:	414b      	adcs	r3, r1
 8003a96:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a98:	f04f 0200 	mov.w	r2, #0
 8003a9c:	f04f 0300 	mov.w	r3, #0
 8003aa0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003aa4:	4659      	mov	r1, fp
 8003aa6:	00cb      	lsls	r3, r1, #3
 8003aa8:	4651      	mov	r1, sl
 8003aaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003aae:	4651      	mov	r1, sl
 8003ab0:	00ca      	lsls	r2, r1, #3
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	4642      	mov	r2, r8
 8003aba:	189b      	adds	r3, r3, r2
 8003abc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ac0:	464b      	mov	r3, r9
 8003ac2:	460a      	mov	r2, r1
 8003ac4:	eb42 0303 	adc.w	r3, r2, r3
 8003ac8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ad8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003adc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	18db      	adds	r3, r3, r3
 8003ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	eb42 0303 	adc.w	r3, r2, r3
 8003aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003aee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003af2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003af6:	f7fc fb8b 	bl	8000210 <__aeabi_uldivmod>
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	4b0d      	ldr	r3, [pc, #52]	@ (8003b34 <UART_SetConfig+0x2d4>)
 8003b00:	fba3 1302 	umull	r1, r3, r3, r2
 8003b04:	095b      	lsrs	r3, r3, #5
 8003b06:	2164      	movs	r1, #100	@ 0x64
 8003b08:	fb01 f303 	mul.w	r3, r1, r3
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	3332      	adds	r3, #50	@ 0x32
 8003b12:	4a08      	ldr	r2, [pc, #32]	@ (8003b34 <UART_SetConfig+0x2d4>)
 8003b14:	fba2 2303 	umull	r2, r3, r2, r3
 8003b18:	095b      	lsrs	r3, r3, #5
 8003b1a:	f003 0207 	and.w	r2, r3, #7
 8003b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4422      	add	r2, r4
 8003b26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b28:	e106      	b.n	8003d38 <UART_SetConfig+0x4d8>
 8003b2a:	bf00      	nop
 8003b2c:	40011000 	.word	0x40011000
 8003b30:	40011400 	.word	0x40011400
 8003b34:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003b42:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003b46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003b4a:	4642      	mov	r2, r8
 8003b4c:	464b      	mov	r3, r9
 8003b4e:	1891      	adds	r1, r2, r2
 8003b50:	6239      	str	r1, [r7, #32]
 8003b52:	415b      	adcs	r3, r3
 8003b54:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b5a:	4641      	mov	r1, r8
 8003b5c:	1854      	adds	r4, r2, r1
 8003b5e:	4649      	mov	r1, r9
 8003b60:	eb43 0501 	adc.w	r5, r3, r1
 8003b64:	f04f 0200 	mov.w	r2, #0
 8003b68:	f04f 0300 	mov.w	r3, #0
 8003b6c:	00eb      	lsls	r3, r5, #3
 8003b6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b72:	00e2      	lsls	r2, r4, #3
 8003b74:	4614      	mov	r4, r2
 8003b76:	461d      	mov	r5, r3
 8003b78:	4643      	mov	r3, r8
 8003b7a:	18e3      	adds	r3, r4, r3
 8003b7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b80:	464b      	mov	r3, r9
 8003b82:	eb45 0303 	adc.w	r3, r5, r3
 8003b86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b96:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b9a:	f04f 0200 	mov.w	r2, #0
 8003b9e:	f04f 0300 	mov.w	r3, #0
 8003ba2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003ba6:	4629      	mov	r1, r5
 8003ba8:	008b      	lsls	r3, r1, #2
 8003baa:	4621      	mov	r1, r4
 8003bac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bb0:	4621      	mov	r1, r4
 8003bb2:	008a      	lsls	r2, r1, #2
 8003bb4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003bb8:	f7fc fb2a 	bl	8000210 <__aeabi_uldivmod>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4b60      	ldr	r3, [pc, #384]	@ (8003d44 <UART_SetConfig+0x4e4>)
 8003bc2:	fba3 2302 	umull	r2, r3, r3, r2
 8003bc6:	095b      	lsrs	r3, r3, #5
 8003bc8:	011c      	lsls	r4, r3, #4
 8003bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003bd4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003bd8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003bdc:	4642      	mov	r2, r8
 8003bde:	464b      	mov	r3, r9
 8003be0:	1891      	adds	r1, r2, r2
 8003be2:	61b9      	str	r1, [r7, #24]
 8003be4:	415b      	adcs	r3, r3
 8003be6:	61fb      	str	r3, [r7, #28]
 8003be8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bec:	4641      	mov	r1, r8
 8003bee:	1851      	adds	r1, r2, r1
 8003bf0:	6139      	str	r1, [r7, #16]
 8003bf2:	4649      	mov	r1, r9
 8003bf4:	414b      	adcs	r3, r1
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	f04f 0200 	mov.w	r2, #0
 8003bfc:	f04f 0300 	mov.w	r3, #0
 8003c00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c04:	4659      	mov	r1, fp
 8003c06:	00cb      	lsls	r3, r1, #3
 8003c08:	4651      	mov	r1, sl
 8003c0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c0e:	4651      	mov	r1, sl
 8003c10:	00ca      	lsls	r2, r1, #3
 8003c12:	4610      	mov	r0, r2
 8003c14:	4619      	mov	r1, r3
 8003c16:	4603      	mov	r3, r0
 8003c18:	4642      	mov	r2, r8
 8003c1a:	189b      	adds	r3, r3, r2
 8003c1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c20:	464b      	mov	r3, r9
 8003c22:	460a      	mov	r2, r1
 8003c24:	eb42 0303 	adc.w	r3, r2, r3
 8003c28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003c36:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	f04f 0300 	mov.w	r3, #0
 8003c40:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003c44:	4649      	mov	r1, r9
 8003c46:	008b      	lsls	r3, r1, #2
 8003c48:	4641      	mov	r1, r8
 8003c4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c4e:	4641      	mov	r1, r8
 8003c50:	008a      	lsls	r2, r1, #2
 8003c52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003c56:	f7fc fadb 	bl	8000210 <__aeabi_uldivmod>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	4611      	mov	r1, r2
 8003c60:	4b38      	ldr	r3, [pc, #224]	@ (8003d44 <UART_SetConfig+0x4e4>)
 8003c62:	fba3 2301 	umull	r2, r3, r3, r1
 8003c66:	095b      	lsrs	r3, r3, #5
 8003c68:	2264      	movs	r2, #100	@ 0x64
 8003c6a:	fb02 f303 	mul.w	r3, r2, r3
 8003c6e:	1acb      	subs	r3, r1, r3
 8003c70:	011b      	lsls	r3, r3, #4
 8003c72:	3332      	adds	r3, #50	@ 0x32
 8003c74:	4a33      	ldr	r2, [pc, #204]	@ (8003d44 <UART_SetConfig+0x4e4>)
 8003c76:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7a:	095b      	lsrs	r3, r3, #5
 8003c7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c80:	441c      	add	r4, r3
 8003c82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c86:	2200      	movs	r2, #0
 8003c88:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c8a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c8c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003c90:	4642      	mov	r2, r8
 8003c92:	464b      	mov	r3, r9
 8003c94:	1891      	adds	r1, r2, r2
 8003c96:	60b9      	str	r1, [r7, #8]
 8003c98:	415b      	adcs	r3, r3
 8003c9a:	60fb      	str	r3, [r7, #12]
 8003c9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ca0:	4641      	mov	r1, r8
 8003ca2:	1851      	adds	r1, r2, r1
 8003ca4:	6039      	str	r1, [r7, #0]
 8003ca6:	4649      	mov	r1, r9
 8003ca8:	414b      	adcs	r3, r1
 8003caa:	607b      	str	r3, [r7, #4]
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003cb8:	4659      	mov	r1, fp
 8003cba:	00cb      	lsls	r3, r1, #3
 8003cbc:	4651      	mov	r1, sl
 8003cbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cc2:	4651      	mov	r1, sl
 8003cc4:	00ca      	lsls	r2, r1, #3
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	4619      	mov	r1, r3
 8003cca:	4603      	mov	r3, r0
 8003ccc:	4642      	mov	r2, r8
 8003cce:	189b      	adds	r3, r3, r2
 8003cd0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003cd2:	464b      	mov	r3, r9
 8003cd4:	460a      	mov	r2, r1
 8003cd6:	eb42 0303 	adc.w	r3, r2, r3
 8003cda:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ce6:	667a      	str	r2, [r7, #100]	@ 0x64
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	f04f 0300 	mov.w	r3, #0
 8003cf0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003cf4:	4649      	mov	r1, r9
 8003cf6:	008b      	lsls	r3, r1, #2
 8003cf8:	4641      	mov	r1, r8
 8003cfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cfe:	4641      	mov	r1, r8
 8003d00:	008a      	lsls	r2, r1, #2
 8003d02:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003d06:	f7fc fa83 	bl	8000210 <__aeabi_uldivmod>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d44 <UART_SetConfig+0x4e4>)
 8003d10:	fba3 1302 	umull	r1, r3, r3, r2
 8003d14:	095b      	lsrs	r3, r3, #5
 8003d16:	2164      	movs	r1, #100	@ 0x64
 8003d18:	fb01 f303 	mul.w	r3, r1, r3
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	011b      	lsls	r3, r3, #4
 8003d20:	3332      	adds	r3, #50	@ 0x32
 8003d22:	4a08      	ldr	r2, [pc, #32]	@ (8003d44 <UART_SetConfig+0x4e4>)
 8003d24:	fba2 2303 	umull	r2, r3, r2, r3
 8003d28:	095b      	lsrs	r3, r3, #5
 8003d2a:	f003 020f 	and.w	r2, r3, #15
 8003d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4422      	add	r2, r4
 8003d36:	609a      	str	r2, [r3, #8]
}
 8003d38:	bf00      	nop
 8003d3a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d44:	51eb851f 	.word	0x51eb851f

08003d48 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d48:	b084      	sub	sp, #16
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b084      	sub	sp, #16
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
 8003d52:	f107 001c 	add.w	r0, r7, #28
 8003d56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d5a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d123      	bne.n	8003daa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d66:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003d76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003d8a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d105      	bne.n	8003d9e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fa9a 	bl	80042d8 <USB_CoreReset>
 8003da4:	4603      	mov	r3, r0
 8003da6:	73fb      	strb	r3, [r7, #15]
 8003da8:	e01b      	b.n	8003de2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 fa8e 	bl	80042d8 <USB_CoreReset>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003dc0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d106      	bne.n	8003dd6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dcc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	639a      	str	r2, [r3, #56]	@ 0x38
 8003dd4:	e005      	b.n	8003de2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dda:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003de2:	7fbb      	ldrb	r3, [r7, #30]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d10b      	bne.n	8003e00 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f043 0206 	orr.w	r2, r3, #6
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f043 0220 	orr.w	r2, r3, #32
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e0c:	b004      	add	sp, #16
 8003e0e:	4770      	bx	lr

08003e10 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f023 0201 	bic.w	r2, r3, #1
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b084      	sub	sp, #16
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e4e:	78fb      	ldrb	r3, [r7, #3]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d115      	bne.n	8003e80 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003e60:	200a      	movs	r0, #10
 8003e62:	f7fd fbb3 	bl	80015cc <HAL_Delay>
      ms += 10U;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	330a      	adds	r3, #10
 8003e6a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 fa25 	bl	80042bc <USB_GetMode>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d01e      	beq.n	8003eb6 <USB_SetCurrentMode+0x84>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2bc7      	cmp	r3, #199	@ 0xc7
 8003e7c:	d9f0      	bls.n	8003e60 <USB_SetCurrentMode+0x2e>
 8003e7e:	e01a      	b.n	8003eb6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003e80:	78fb      	ldrb	r3, [r7, #3]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d115      	bne.n	8003eb2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003e92:	200a      	movs	r0, #10
 8003e94:	f7fd fb9a 	bl	80015cc <HAL_Delay>
      ms += 10U;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	330a      	adds	r3, #10
 8003e9c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 fa0c 	bl	80042bc <USB_GetMode>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d005      	beq.n	8003eb6 <USB_SetCurrentMode+0x84>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2bc7      	cmp	r3, #199	@ 0xc7
 8003eae:	d9f0      	bls.n	8003e92 <USB_SetCurrentMode+0x60>
 8003eb0:	e001      	b.n	8003eb6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e005      	b.n	8003ec2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2bc8      	cmp	r3, #200	@ 0xc8
 8003eba:	d101      	bne.n	8003ec0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e000      	b.n	8003ec2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
	...

08003ecc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ecc:	b084      	sub	sp, #16
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b086      	sub	sp, #24
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003eda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	613b      	str	r3, [r7, #16]
 8003eea:	e009      	b.n	8003f00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	3340      	adds	r3, #64	@ 0x40
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4413      	add	r3, r2
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	3301      	adds	r3, #1
 8003efe:	613b      	str	r3, [r7, #16]
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	2b0e      	cmp	r3, #14
 8003f04:	d9f2      	bls.n	8003eec <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003f06:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d11c      	bne.n	8003f48 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f1c:	f043 0302 	orr.w	r3, r3, #2
 8003f20:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f26:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	e005      	b.n	8003f54 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f4c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f60:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d10d      	bne.n	8003f84 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003f68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d104      	bne.n	8003f7a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003f70:	2100      	movs	r1, #0
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f968 	bl	8004248 <USB_SetDevSpeed>
 8003f78:	e008      	b.n	8003f8c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f963 	bl	8004248 <USB_SetDevSpeed>
 8003f82:	e003      	b.n	8003f8c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003f84:	2103      	movs	r1, #3
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f95e 	bl	8004248 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003f8c:	2110      	movs	r1, #16
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f8fa 	bl	8004188 <USB_FlushTxFifo>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f924 	bl	80041ec <USB_FlushRxFifo>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fcc:	461a      	mov	r2, r3
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	613b      	str	r3, [r7, #16]
 8003fd6:	e043      	b.n	8004060 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003fea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003fee:	d118      	bne.n	8004022 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10a      	bne.n	800400c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	015a      	lsls	r2, r3, #5
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004002:	461a      	mov	r2, r3
 8004004:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004008:	6013      	str	r3, [r2, #0]
 800400a:	e013      	b.n	8004034 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	015a      	lsls	r2, r3, #5
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	4413      	add	r3, r2
 8004014:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004018:	461a      	mov	r2, r3
 800401a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	e008      	b.n	8004034 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	015a      	lsls	r2, r3, #5
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	4413      	add	r3, r2
 800402a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800402e:	461a      	mov	r2, r3
 8004030:	2300      	movs	r3, #0
 8004032:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	015a      	lsls	r2, r3, #5
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4413      	add	r3, r2
 800403c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004040:	461a      	mov	r2, r3
 8004042:	2300      	movs	r3, #0
 8004044:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	015a      	lsls	r2, r3, #5
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	4413      	add	r3, r2
 800404e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004052:	461a      	mov	r2, r3
 8004054:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004058:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	3301      	adds	r3, #1
 800405e:	613b      	str	r3, [r7, #16]
 8004060:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004064:	461a      	mov	r2, r3
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	4293      	cmp	r3, r2
 800406a:	d3b5      	bcc.n	8003fd8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800406c:	2300      	movs	r3, #0
 800406e:	613b      	str	r3, [r7, #16]
 8004070:	e043      	b.n	80040fa <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4413      	add	r3, r2
 800407a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004084:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004088:	d118      	bne.n	80040bc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10a      	bne.n	80040a6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4413      	add	r3, r2
 8004098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800409c:	461a      	mov	r2, r3
 800409e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80040a2:	6013      	str	r3, [r2, #0]
 80040a4:	e013      	b.n	80040ce <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040b2:	461a      	mov	r2, r3
 80040b4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80040b8:	6013      	str	r3, [r2, #0]
 80040ba:	e008      	b.n	80040ce <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	015a      	lsls	r2, r3, #5
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4413      	add	r3, r2
 80040c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040c8:	461a      	mov	r2, r3
 80040ca:	2300      	movs	r3, #0
 80040cc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	015a      	lsls	r2, r3, #5
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	4413      	add	r3, r2
 80040d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040da:	461a      	mov	r2, r3
 80040dc:	2300      	movs	r3, #0
 80040de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040ec:	461a      	mov	r2, r3
 80040ee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80040f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	3301      	adds	r3, #1
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80040fe:	461a      	mov	r2, r3
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	4293      	cmp	r3, r2
 8004104:	d3b5      	bcc.n	8004072 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004114:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004118:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004126:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004128:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800412c:	2b00      	cmp	r3, #0
 800412e:	d105      	bne.n	800413c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	f043 0210 	orr.w	r2, r3, #16
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	699a      	ldr	r2, [r3, #24]
 8004140:	4b10      	ldr	r3, [pc, #64]	@ (8004184 <USB_DevInit+0x2b8>)
 8004142:	4313      	orrs	r3, r2
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004148:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	f043 0208 	orr.w	r2, r3, #8
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800415c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004160:	2b01      	cmp	r3, #1
 8004162:	d107      	bne.n	8004174 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800416c:	f043 0304 	orr.w	r3, r3, #4
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004174:	7dfb      	ldrb	r3, [r7, #23]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004180:	b004      	add	sp, #16
 8004182:	4770      	bx	lr
 8004184:	803c3800 	.word	0x803c3800

08004188 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004192:	2300      	movs	r3, #0
 8004194:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	3301      	adds	r3, #1
 800419a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80041a2:	d901      	bls.n	80041a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e01b      	b.n	80041e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	daf2      	bge.n	8004196 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80041b0:	2300      	movs	r3, #0
 80041b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	019b      	lsls	r3, r3, #6
 80041b8:	f043 0220 	orr.w	r2, r3, #32
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	3301      	adds	r3, #1
 80041c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80041cc:	d901      	bls.n	80041d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e006      	b.n	80041e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	f003 0320 	and.w	r3, r3, #32
 80041da:	2b20      	cmp	r3, #32
 80041dc:	d0f0      	beq.n	80041c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	3301      	adds	r3, #1
 80041fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004204:	d901      	bls.n	800420a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e018      	b.n	800423c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	2b00      	cmp	r3, #0
 8004210:	daf2      	bge.n	80041f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2210      	movs	r2, #16
 800421a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	3301      	adds	r3, #1
 8004220:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004228:	d901      	bls.n	800422e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e006      	b.n	800423c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f003 0310 	and.w	r3, r3, #16
 8004236:	2b10      	cmp	r3, #16
 8004238:	d0f0      	beq.n	800421c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	460b      	mov	r3, r1
 8004252:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	78fb      	ldrb	r3, [r7, #3]
 8004262:	68f9      	ldr	r1, [r7, #12]
 8004264:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004268:	4313      	orrs	r3, r2
 800426a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800427a:	b480      	push	{r7}
 800427c:	b085      	sub	sp, #20
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004294:	f023 0303 	bic.w	r3, r3, #3
 8004298:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042a8:	f043 0302 	orr.w	r3, r3, #2
 80042ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3714      	adds	r7, #20
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	f003 0301 	and.w	r3, r3, #1
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	3301      	adds	r3, #1
 80042e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80042f0:	d901      	bls.n	80042f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e022      	b.n	800433c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	daf2      	bge.n	80042e4 <USB_CoreReset+0xc>

  count = 10U;
 80042fe:	230a      	movs	r3, #10
 8004300:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8004302:	e002      	b.n	800430a <USB_CoreReset+0x32>
  {
    count--;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	3b01      	subs	r3, #1
 8004308:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1f9      	bne.n	8004304 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	f043 0201 	orr.w	r2, r3, #1
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	3301      	adds	r3, #1
 8004320:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004328:	d901      	bls.n	800432e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e006      	b.n	800433c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b01      	cmp	r3, #1
 8004338:	d0f0      	beq.n	800431c <USB_CoreReset+0x44>

  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3714      	adds	r7, #20
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <__NVIC_SetPriority>:
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	4603      	mov	r3, r0
 8004350:	6039      	str	r1, [r7, #0]
 8004352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004358:	2b00      	cmp	r3, #0
 800435a:	db0a      	blt.n	8004372 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	b2da      	uxtb	r2, r3
 8004360:	490c      	ldr	r1, [pc, #48]	@ (8004394 <__NVIC_SetPriority+0x4c>)
 8004362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004366:	0112      	lsls	r2, r2, #4
 8004368:	b2d2      	uxtb	r2, r2
 800436a:	440b      	add	r3, r1
 800436c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004370:	e00a      	b.n	8004388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	b2da      	uxtb	r2, r3
 8004376:	4908      	ldr	r1, [pc, #32]	@ (8004398 <__NVIC_SetPriority+0x50>)
 8004378:	79fb      	ldrb	r3, [r7, #7]
 800437a:	f003 030f 	and.w	r3, r3, #15
 800437e:	3b04      	subs	r3, #4
 8004380:	0112      	lsls	r2, r2, #4
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	440b      	add	r3, r1
 8004386:	761a      	strb	r2, [r3, #24]
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	e000e100 	.word	0xe000e100
 8004398:	e000ed00 	.word	0xe000ed00

0800439c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80043a0:	2100      	movs	r1, #0
 80043a2:	f06f 0004 	mvn.w	r0, #4
 80043a6:	f7ff ffcf 	bl	8004348 <__NVIC_SetPriority>
#endif
}
 80043aa:	bf00      	nop
 80043ac:	bd80      	pop	{r7, pc}
	...

080043b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043b6:	f3ef 8305 	mrs	r3, IPSR
 80043ba:	603b      	str	r3, [r7, #0]
  return(result);
 80043bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80043c2:	f06f 0305 	mvn.w	r3, #5
 80043c6:	607b      	str	r3, [r7, #4]
 80043c8:	e00c      	b.n	80043e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80043ca:	4b0a      	ldr	r3, [pc, #40]	@ (80043f4 <osKernelInitialize+0x44>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d105      	bne.n	80043de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80043d2:	4b08      	ldr	r3, [pc, #32]	@ (80043f4 <osKernelInitialize+0x44>)
 80043d4:	2201      	movs	r2, #1
 80043d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80043d8:	2300      	movs	r3, #0
 80043da:	607b      	str	r3, [r7, #4]
 80043dc:	e002      	b.n	80043e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80043de:	f04f 33ff 	mov.w	r3, #4294967295
 80043e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80043e4:	687b      	ldr	r3, [r7, #4]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	200005d8 	.word	0x200005d8

080043f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043fe:	f3ef 8305 	mrs	r3, IPSR
 8004402:	603b      	str	r3, [r7, #0]
  return(result);
 8004404:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <osKernelStart+0x1a>
    stat = osErrorISR;
 800440a:	f06f 0305 	mvn.w	r3, #5
 800440e:	607b      	str	r3, [r7, #4]
 8004410:	e010      	b.n	8004434 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004412:	4b0b      	ldr	r3, [pc, #44]	@ (8004440 <osKernelStart+0x48>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d109      	bne.n	800442e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800441a:	f7ff ffbf 	bl	800439c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800441e:	4b08      	ldr	r3, [pc, #32]	@ (8004440 <osKernelStart+0x48>)
 8004420:	2202      	movs	r2, #2
 8004422:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004424:	f001 fc26 	bl	8005c74 <vTaskStartScheduler>
      stat = osOK;
 8004428:	2300      	movs	r3, #0
 800442a:	607b      	str	r3, [r7, #4]
 800442c:	e002      	b.n	8004434 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800442e:	f04f 33ff 	mov.w	r3, #4294967295
 8004432:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004434:	687b      	ldr	r3, [r7, #4]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	200005d8 	.word	0x200005d8

08004444 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004444:	b580      	push	{r7, lr}
 8004446:	b08e      	sub	sp, #56	@ 0x38
 8004448:	af04      	add	r7, sp, #16
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004450:	2300      	movs	r3, #0
 8004452:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004454:	f3ef 8305 	mrs	r3, IPSR
 8004458:	617b      	str	r3, [r7, #20]
  return(result);
 800445a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800445c:	2b00      	cmp	r3, #0
 800445e:	d17e      	bne.n	800455e <osThreadNew+0x11a>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d07b      	beq.n	800455e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004466:	2380      	movs	r3, #128	@ 0x80
 8004468:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800446a:	2318      	movs	r3, #24
 800446c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800446e:	2300      	movs	r3, #0
 8004470:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004472:	f04f 33ff 	mov.w	r3, #4294967295
 8004476:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d045      	beq.n	800450a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <osThreadNew+0x48>
        name = attr->name;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d002      	beq.n	800449a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d008      	beq.n	80044b2 <osThreadNew+0x6e>
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	2b38      	cmp	r3, #56	@ 0x38
 80044a4:	d805      	bhi.n	80044b2 <osThreadNew+0x6e>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <osThreadNew+0x72>
        return (NULL);
 80044b2:	2300      	movs	r3, #0
 80044b4:	e054      	b.n	8004560 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	089b      	lsrs	r3, r3, #2
 80044c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00e      	beq.n	80044ec <osThreadNew+0xa8>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	2b5b      	cmp	r3, #91	@ 0x5b
 80044d4:	d90a      	bls.n	80044ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d006      	beq.n	80044ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d002      	beq.n	80044ec <osThreadNew+0xa8>
        mem = 1;
 80044e6:	2301      	movs	r3, #1
 80044e8:	61bb      	str	r3, [r7, #24]
 80044ea:	e010      	b.n	800450e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10c      	bne.n	800450e <osThreadNew+0xca>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d108      	bne.n	800450e <osThreadNew+0xca>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d104      	bne.n	800450e <osThreadNew+0xca>
          mem = 0;
 8004504:	2300      	movs	r3, #0
 8004506:	61bb      	str	r3, [r7, #24]
 8004508:	e001      	b.n	800450e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800450a:	2300      	movs	r3, #0
 800450c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d110      	bne.n	8004536 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800451c:	9202      	str	r2, [sp, #8]
 800451e:	9301      	str	r3, [sp, #4]
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	6a3a      	ldr	r2, [r7, #32]
 8004528:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f001 f9c6 	bl	80058bc <xTaskCreateStatic>
 8004530:	4603      	mov	r3, r0
 8004532:	613b      	str	r3, [r7, #16]
 8004534:	e013      	b.n	800455e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d110      	bne.n	800455e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	b29a      	uxth	r2, r3
 8004540:	f107 0310 	add.w	r3, r7, #16
 8004544:	9301      	str	r3, [sp, #4]
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f001 fa14 	bl	800597c <xTaskCreate>
 8004554:	4603      	mov	r3, r0
 8004556:	2b01      	cmp	r3, #1
 8004558:	d001      	beq.n	800455e <osThreadNew+0x11a>
            hTask = NULL;
 800455a:	2300      	movs	r3, #0
 800455c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800455e:	693b      	ldr	r3, [r7, #16]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3728      	adds	r7, #40	@ 0x28
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004570:	f3ef 8305 	mrs	r3, IPSR
 8004574:	60bb      	str	r3, [r7, #8]
  return(result);
 8004576:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <osDelay+0x1c>
    stat = osErrorISR;
 800457c:	f06f 0305 	mvn.w	r3, #5
 8004580:	60fb      	str	r3, [r7, #12]
 8004582:	e007      	b.n	8004594 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004584:	2300      	movs	r3, #0
 8004586:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d002      	beq.n	8004594 <osDelay+0x2c>
      vTaskDelay(ticks);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f001 fb3a 	bl	8005c08 <vTaskDelay>
    }
  }

  return (stat);
 8004594:	68fb      	ldr	r3, [r7, #12]
}
 8004596:	4618      	mov	r0, r3
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800459e:	b580      	push	{r7, lr}
 80045a0:	b086      	sub	sp, #24
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80045a6:	2300      	movs	r3, #0
 80045a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045aa:	f3ef 8305 	mrs	r3, IPSR
 80045ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80045b0:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d12d      	bne.n	8004612 <osEventFlagsNew+0x74>
    mem = -1;
 80045b6:	f04f 33ff 	mov.w	r3, #4294967295
 80045ba:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d015      	beq.n	80045ee <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d006      	beq.n	80045d8 <osEventFlagsNew+0x3a>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	2b1f      	cmp	r3, #31
 80045d0:	d902      	bls.n	80045d8 <osEventFlagsNew+0x3a>
        mem = 1;
 80045d2:	2301      	movs	r3, #1
 80045d4:	613b      	str	r3, [r7, #16]
 80045d6:	e00c      	b.n	80045f2 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d108      	bne.n	80045f2 <osEventFlagsNew+0x54>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d104      	bne.n	80045f2 <osEventFlagsNew+0x54>
          mem = 0;
 80045e8:	2300      	movs	r3, #0
 80045ea:	613b      	str	r3, [r7, #16]
 80045ec:	e001      	b.n	80045f2 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80045ee:	2300      	movs	r3, #0
 80045f0:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d106      	bne.n	8004606 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 f93b 	bl	8004878 <xEventGroupCreateStatic>
 8004602:	6178      	str	r0, [r7, #20]
 8004604:	e005      	b.n	8004612 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d102      	bne.n	8004612 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800460c:	f000 f96d 	bl	80048ea <xEventGroupCreate>
 8004610:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8004612:	697b      	ldr	r3, [r7, #20]
}
 8004614:	4618      	mov	r0, r3
 8004616:	3718      	adds	r7, #24
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d003      	beq.n	8004638 <osEventFlagsSet+0x1c>
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004636:	d303      	bcc.n	8004640 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8004638:	f06f 0303 	mvn.w	r3, #3
 800463c:	617b      	str	r3, [r7, #20]
 800463e:	e028      	b.n	8004692 <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004640:	f3ef 8305 	mrs	r3, IPSR
 8004644:	60fb      	str	r3, [r7, #12]
  return(result);
 8004646:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004648:	2b00      	cmp	r3, #0
 800464a:	d01d      	beq.n	8004688 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800464c:	2300      	movs	r3, #0
 800464e:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8004650:	f107 0308 	add.w	r3, r7, #8
 8004654:	461a      	mov	r2, r3
 8004656:	6839      	ldr	r1, [r7, #0]
 8004658:	6938      	ldr	r0, [r7, #16]
 800465a:	f000 fb6d 	bl	8004d38 <xEventGroupSetBitsFromISR>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d103      	bne.n	800466c <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 8004664:	f06f 0302 	mvn.w	r3, #2
 8004668:	617b      	str	r3, [r7, #20]
 800466a:	e012      	b.n	8004692 <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00d      	beq.n	8004692 <osEventFlagsSet+0x76>
 8004676:	4b09      	ldr	r3, [pc, #36]	@ (800469c <osEventFlagsSet+0x80>)
 8004678:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	f3bf 8f4f 	dsb	sy
 8004682:	f3bf 8f6f 	isb	sy
 8004686:	e004      	b.n	8004692 <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8004688:	6839      	ldr	r1, [r7, #0]
 800468a:	6938      	ldr	r0, [r7, #16]
 800468c:	f000 fa8c 	bl	8004ba8 <xEventGroupSetBits>
 8004690:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8004692:	697b      	ldr	r3, [r7, #20]
}
 8004694:	4618      	mov	r0, r3
 8004696:	3718      	adds	r7, #24
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	e000ed04 	.word	0xe000ed04

080046a0 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <osEventFlagsClear+0x1c>
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046ba:	d303      	bcc.n	80046c4 <osEventFlagsClear+0x24>
    rflags = (uint32_t)osErrorParameter;
 80046bc:	f06f 0303 	mvn.w	r3, #3
 80046c0:	617b      	str	r3, [r7, #20]
 80046c2:	e019      	b.n	80046f8 <osEventFlagsClear+0x58>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046c4:	f3ef 8305 	mrs	r3, IPSR
 80046c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80046ca:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00e      	beq.n	80046ee <osEventFlagsClear+0x4e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80046d0:	6938      	ldr	r0, [r7, #16]
 80046d2:	f000 fa45 	bl	8004b60 <xEventGroupGetBitsFromISR>
 80046d6:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80046d8:	6839      	ldr	r1, [r7, #0]
 80046da:	6938      	ldr	r0, [r7, #16]
 80046dc:	f000 fa2c 	bl	8004b38 <xEventGroupClearBitsFromISR>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d108      	bne.n	80046f8 <osEventFlagsClear+0x58>
      rflags = (uint32_t)osErrorResource;
 80046e6:	f06f 0302 	mvn.w	r3, #2
 80046ea:	617b      	str	r3, [r7, #20]
 80046ec:	e004      	b.n	80046f8 <osEventFlagsClear+0x58>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 80046ee:	6839      	ldr	r1, [r7, #0]
 80046f0:	6938      	ldr	r0, [r7, #16]
 80046f2:	f000 f9e7 	bl	8004ac4 <xEventGroupClearBits>
 80046f6:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80046f8:	697b      	ldr	r3, [r7, #20]
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3718      	adds	r7, #24
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 8004702:	b580      	push	{r7, lr}
 8004704:	b086      	sub	sp, #24
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if (ef_id == NULL) {
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d102      	bne.n	800471a <osEventFlagsGet+0x18>
    rflags = 0U;
 8004714:	2300      	movs	r3, #0
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	e00f      	b.n	800473a <osEventFlagsGet+0x38>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800471a:	f3ef 8305 	mrs	r3, IPSR
 800471e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004720:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004722:	2b00      	cmp	r3, #0
 8004724:	d004      	beq.n	8004730 <osEventFlagsGet+0x2e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8004726:	6938      	ldr	r0, [r7, #16]
 8004728:	f000 fa1a 	bl	8004b60 <xEventGroupGetBitsFromISR>
 800472c:	6178      	str	r0, [r7, #20]
 800472e:	e004      	b.n	800473a <osEventFlagsGet+0x38>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 8004730:	2100      	movs	r1, #0
 8004732:	6938      	ldr	r0, [r7, #16]
 8004734:	f000 f9c6 	bl	8004ac4 <xEventGroupClearBits>
 8004738:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800473a:	697b      	ldr	r3, [r7, #20]
}
 800473c:	4618      	mov	r0, r3
 800473e:	3718      	adds	r7, #24
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <osEventFlagsWait>:

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8004744:	b580      	push	{r7, lr}
 8004746:	b08c      	sub	sp, #48	@ 0x30
 8004748:	af02      	add	r7, sp, #8
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
 8004750:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <osEventFlagsWait+0x20>
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004762:	d303      	bcc.n	800476c <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8004764:	f06f 0303 	mvn.w	r3, #3
 8004768:	61fb      	str	r3, [r7, #28]
 800476a:	e04b      	b.n	8004804 <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800476c:	f3ef 8305 	mrs	r3, IPSR
 8004770:	617b      	str	r3, [r7, #20]
  return(result);
 8004772:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004774:	2b00      	cmp	r3, #0
 8004776:	d003      	beq.n	8004780 <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 8004778:	f06f 0305 	mvn.w	r3, #5
 800477c:	61fb      	str	r3, [r7, #28]
 800477e:	e041      	b.n	8004804 <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d002      	beq.n	8004790 <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 800478a:	2301      	movs	r3, #1
 800478c:	627b      	str	r3, [r7, #36]	@ 0x24
 800478e:	e001      	b.n	8004794 <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 8004790:	2300      	movs	r3, #0
 8004792:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d002      	beq.n	80047a4 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 800479e:	2300      	movs	r3, #0
 80047a0:	623b      	str	r3, [r7, #32]
 80047a2:	e001      	b.n	80047a8 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 80047a4:	2301      	movs	r3, #1
 80047a6:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ae:	6a3a      	ldr	r2, [r7, #32]
 80047b0:	68b9      	ldr	r1, [r7, #8]
 80047b2:	69b8      	ldr	r0, [r7, #24]
 80047b4:	f000 f8b4 	bl	8004920 <xEventGroupWaitBits>
 80047b8:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d010      	beq.n	80047e6 <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	4013      	ands	r3, r2
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d019      	beq.n	8004804 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 80047d6:	f06f 0301 	mvn.w	r3, #1
 80047da:	61fb      	str	r3, [r7, #28]
 80047dc:	e012      	b.n	8004804 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 80047de:	f06f 0302 	mvn.w	r3, #2
 80047e2:	61fb      	str	r3, [r7, #28]
 80047e4:	e00e      	b.n	8004804 <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	4013      	ands	r3, r2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d109      	bne.n	8004804 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d003      	beq.n	80047fe <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 80047f6:	f06f 0301 	mvn.w	r3, #1
 80047fa:	61fb      	str	r3, [r7, #28]
 80047fc:	e002      	b.n	8004804 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 80047fe:	f06f 0302 	mvn.w	r3, #2
 8004802:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8004804:	69fb      	ldr	r3, [r7, #28]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3728      	adds	r7, #40	@ 0x28
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
	...

08004810 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4a07      	ldr	r2, [pc, #28]	@ (800483c <vApplicationGetIdleTaskMemory+0x2c>)
 8004820:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	4a06      	ldr	r2, [pc, #24]	@ (8004840 <vApplicationGetIdleTaskMemory+0x30>)
 8004826:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2280      	movs	r2, #128	@ 0x80
 800482c:	601a      	str	r2, [r3, #0]
}
 800482e:	bf00      	nop
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	200005dc 	.word	0x200005dc
 8004840:	20000638 	.word	0x20000638

08004844 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4a07      	ldr	r2, [pc, #28]	@ (8004870 <vApplicationGetTimerTaskMemory+0x2c>)
 8004854:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	4a06      	ldr	r2, [pc, #24]	@ (8004874 <vApplicationGetTimerTaskMemory+0x30>)
 800485a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004862:	601a      	str	r2, [r3, #0]
}
 8004864:	bf00      	nop
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	20000838 	.word	0x20000838
 8004874:	20000894 	.word	0x20000894

08004878 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10b      	bne.n	800489e <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800488a:	f383 8811 	msr	BASEPRI, r3
 800488e:	f3bf 8f6f 	isb	sy
 8004892:	f3bf 8f4f 	dsb	sy
 8004896:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004898:	bf00      	nop
 800489a:	bf00      	nop
 800489c:	e7fd      	b.n	800489a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800489e:	2320      	movs	r3, #32
 80048a0:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	2b20      	cmp	r3, #32
 80048a6:	d00b      	beq.n	80048c0 <xEventGroupCreateStatic+0x48>
	__asm volatile
 80048a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ac:	f383 8811 	msr	BASEPRI, r3
 80048b0:	f3bf 8f6f 	isb	sy
 80048b4:	f3bf 8f4f 	dsb	sy
 80048b8:	60fb      	str	r3, [r7, #12]
}
 80048ba:	bf00      	nop
 80048bc:	bf00      	nop
 80048be:	e7fd      	b.n	80048bc <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	3304      	adds	r3, #4
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 fa43 	bl	8004d60 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	2201      	movs	r2, #1
 80048de:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80048e0:	697b      	ldr	r3, [r7, #20]
	}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3718      	adds	r7, #24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b082      	sub	sp, #8
 80048ee:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80048f0:	2020      	movs	r0, #32
 80048f2:	f002 fd73 	bl	80073dc <pvPortMalloc>
 80048f6:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00a      	beq.n	8004914 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3304      	adds	r3, #4
 8004908:	4618      	mov	r0, r3
 800490a:	f000 fa29 	bl	8004d60 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8004914:	687b      	ldr	r3, [r7, #4]
	}
 8004916:	4618      	mov	r0, r3
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
	...

08004920 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b090      	sub	sp, #64	@ 0x40
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
 800492c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8004932:	2300      	movs	r3, #0
 8004934:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8004936:	2300      	movs	r3, #0
 8004938:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10b      	bne.n	8004958 <xEventGroupWaitBits+0x38>
	__asm volatile
 8004940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004944:	f383 8811 	msr	BASEPRI, r3
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	623b      	str	r3, [r7, #32]
}
 8004952:	bf00      	nop
 8004954:	bf00      	nop
 8004956:	e7fd      	b.n	8004954 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800495e:	d30b      	bcc.n	8004978 <xEventGroupWaitBits+0x58>
	__asm volatile
 8004960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	61fb      	str	r3, [r7, #28]
}
 8004972:	bf00      	nop
 8004974:	bf00      	nop
 8004976:	e7fd      	b.n	8004974 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10b      	bne.n	8004996 <xEventGroupWaitBits+0x76>
	__asm volatile
 800497e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004982:	f383 8811 	msr	BASEPRI, r3
 8004986:	f3bf 8f6f 	isb	sy
 800498a:	f3bf 8f4f 	dsb	sy
 800498e:	61bb      	str	r3, [r7, #24]
}
 8004990:	bf00      	nop
 8004992:	bf00      	nop
 8004994:	e7fd      	b.n	8004992 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004996:	f001 fe5d 	bl	8006654 <xTaskGetSchedulerState>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d102      	bne.n	80049a6 <xEventGroupWaitBits+0x86>
 80049a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <xEventGroupWaitBits+0x8a>
 80049a6:	2301      	movs	r3, #1
 80049a8:	e000      	b.n	80049ac <xEventGroupWaitBits+0x8c>
 80049aa:	2300      	movs	r3, #0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10b      	bne.n	80049c8 <xEventGroupWaitBits+0xa8>
	__asm volatile
 80049b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	617b      	str	r3, [r7, #20]
}
 80049c2:	bf00      	nop
 80049c4:	bf00      	nop
 80049c6:	e7fd      	b.n	80049c4 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 80049c8:	f001 f9bc 	bl	8005d44 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80049cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	68b9      	ldr	r1, [r7, #8]
 80049d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80049d8:	f000 f98c 	bl	8004cf4 <prvTestWaitCondition>
 80049dc:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 80049de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00e      	beq.n	8004a02 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80049e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80049e8:	2300      	movs	r3, #0
 80049ea:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d028      	beq.n	8004a44 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80049f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	43db      	mvns	r3, r3
 80049fa:	401a      	ands	r2, r3
 80049fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	e020      	b.n	8004a44 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8004a02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d104      	bne.n	8004a12 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8004a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a10:	e018      	b.n	8004a44 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d003      	beq.n	8004a20 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8004a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a1e:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8004a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a28:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8004a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a30:	1d18      	adds	r0, r3, #4
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a36:	4313      	orrs	r3, r2
 8004a38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	f001 fb7c 	bl	8006138 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8004a40:	2300      	movs	r3, #0
 8004a42:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8004a44:	f001 f98c 	bl	8005d60 <xTaskResumeAll>
 8004a48:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8004a4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d031      	beq.n	8004ab4 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8004a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d107      	bne.n	8004a66 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 8004a56:	4b1a      	ldr	r3, [pc, #104]	@ (8004ac0 <xEventGroupWaitBits+0x1a0>)
 8004a58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8004a66:	f001 fe83 	bl	8006770 <uxTaskResetEventItemValue>
 8004a6a:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8004a6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d11a      	bne.n	8004aac <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 8004a76:	f002 fb8f 	bl	8007198 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8004a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	68b9      	ldr	r1, [r7, #8]
 8004a84:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004a86:	f000 f935 	bl	8004cf4 <prvTestWaitCondition>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d009      	beq.n	8004aa4 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d006      	beq.n	8004aa4 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	43db      	mvns	r3, r3
 8004a9e:	401a      	ands	r2, r3
 8004aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aa2:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8004aa8:	f002 fba8 	bl	80071fc <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004aac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aae:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8004ab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3740      	adds	r7, #64	@ 0x40
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	e000ed04 	.word	0xe000ed04

08004ac4 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10b      	bne.n	8004af0 <xEventGroupClearBits+0x2c>
	__asm volatile
 8004ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004adc:	f383 8811 	msr	BASEPRI, r3
 8004ae0:	f3bf 8f6f 	isb	sy
 8004ae4:	f3bf 8f4f 	dsb	sy
 8004ae8:	60fb      	str	r3, [r7, #12]
}
 8004aea:	bf00      	nop
 8004aec:	bf00      	nop
 8004aee:	e7fd      	b.n	8004aec <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004af6:	d30b      	bcc.n	8004b10 <xEventGroupClearBits+0x4c>
	__asm volatile
 8004af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004afc:	f383 8811 	msr	BASEPRI, r3
 8004b00:	f3bf 8f6f 	isb	sy
 8004b04:	f3bf 8f4f 	dsb	sy
 8004b08:	60bb      	str	r3, [r7, #8]
}
 8004b0a:	bf00      	nop
 8004b0c:	bf00      	nop
 8004b0e:	e7fd      	b.n	8004b0c <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8004b10:	f002 fb42 	bl	8007198 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	43db      	mvns	r3, r3
 8004b22:	401a      	ands	r2, r3
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8004b28:	f002 fb68 	bl	80071fc <vPortExitCritical>

	return uxReturn;
 8004b2c:	693b      	ldr	r3, [r7, #16]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3718      	adds	r7, #24
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
	...

08004b38 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8004b42:	2300      	movs	r3, #0
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	6879      	ldr	r1, [r7, #4]
 8004b48:	4804      	ldr	r0, [pc, #16]	@ (8004b5c <xEventGroupClearBitsFromISR+0x24>)
 8004b4a:	f002 f9d7 	bl	8006efc <xTimerPendFunctionCallFromISR>
 8004b4e:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8004b50:	68fb      	ldr	r3, [r7, #12]
	}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	08004cdb 	.word	0x08004cdb

08004b60 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8004b60:	b480      	push	{r7}
 8004b62:	b089      	sub	sp, #36	@ 0x24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004b6c:	f3ef 8211 	mrs	r2, BASEPRI
 8004b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	60fa      	str	r2, [r7, #12]
 8004b82:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004b84:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b86:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	617b      	str	r3, [r7, #20]
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b98:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8004b9a:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3724      	adds	r7, #36	@ 0x24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b08e      	sub	sp, #56	@ 0x38
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10b      	bne.n	8004bdc <xEventGroupSetBits+0x34>
	__asm volatile
 8004bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	613b      	str	r3, [r7, #16]
}
 8004bd6:	bf00      	nop
 8004bd8:	bf00      	nop
 8004bda:	e7fd      	b.n	8004bd8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004be2:	d30b      	bcc.n	8004bfc <xEventGroupSetBits+0x54>
	__asm volatile
 8004be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be8:	f383 8811 	msr	BASEPRI, r3
 8004bec:	f3bf 8f6f 	isb	sy
 8004bf0:	f3bf 8f4f 	dsb	sy
 8004bf4:	60fb      	str	r3, [r7, #12]
}
 8004bf6:	bf00      	nop
 8004bf8:	bf00      	nop
 8004bfa:	e7fd      	b.n	8004bf8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8004bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bfe:	3304      	adds	r3, #4
 8004c00:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c04:	3308      	adds	r3, #8
 8004c06:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8004c08:	f001 f89c 	bl	8005d44 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8004c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	431a      	orrs	r2, r3
 8004c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c1c:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8004c1e:	e03c      	b.n	8004c9a <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8004c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004c36:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004c3e:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d108      	bne.n	8004c5c <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	4013      	ands	r3, r2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00b      	beq.n	8004c6e <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8004c56:	2301      	movs	r3, #1
 8004c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c5a:	e008      	b.n	8004c6e <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8004c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	4013      	ands	r3, r2
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d101      	bne.n	8004c6e <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8004c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d010      	beq.n	8004c96 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8004c7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8004c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004c8e:	4619      	mov	r1, r3
 8004c90:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004c92:	f001 fb1f 	bl	80062d4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8004c9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d1be      	bne.n	8004c20 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca8:	43db      	mvns	r3, r3
 8004caa:	401a      	ands	r2, r3
 8004cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cae:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8004cb0:	f001 f856 	bl	8005d60 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8004cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb6:	681b      	ldr	r3, [r3, #0]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3738      	adds	r7, #56	@ 0x38
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8004cca:	6839      	ldr	r1, [r7, #0]
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7ff ff6b 	bl	8004ba8 <xEventGroupSetBits>
}
 8004cd2:	bf00      	nop
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b082      	sub	sp, #8
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
 8004ce2:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8004ce4:	6839      	ldr	r1, [r7, #0]
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7ff feec 	bl	8004ac4 <xEventGroupClearBits>
}
 8004cec:	bf00      	nop
 8004cee:	3708      	adds	r7, #8
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b087      	sub	sp, #28
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8004d00:	2300      	movs	r3, #0
 8004d02:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d107      	bne.n	8004d1a <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00a      	beq.n	8004d2a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004d14:	2301      	movs	r3, #1
 8004d16:	617b      	str	r3, [r7, #20]
 8004d18:	e007      	b.n	8004d2a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d101      	bne.n	8004d2a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004d26:	2301      	movs	r3, #1
 8004d28:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8004d2a:	697b      	ldr	r3, [r7, #20]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	371c      	adds	r7, #28
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	68f9      	ldr	r1, [r7, #12]
 8004d4a:	4804      	ldr	r0, [pc, #16]	@ (8004d5c <xEventGroupSetBitsFromISR+0x24>)
 8004d4c:	f002 f8d6 	bl	8006efc <xTimerPendFunctionCallFromISR>
 8004d50:	6178      	str	r0, [r7, #20]

		return xReturn;
 8004d52:	697b      	ldr	r3, [r7, #20]
	}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3718      	adds	r7, #24
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	08004cc1 	.word	0x08004cc1

08004d60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f103 0208 	add.w	r2, r3, #8
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f04f 32ff 	mov.w	r2, #4294967295
 8004d78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f103 0208 	add.w	r2, r3, #8
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f103 0208 	add.w	r2, r3, #8
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004dae:	bf00      	nop
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b085      	sub	sp, #20
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
 8004dc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	689a      	ldr	r2, [r3, #8]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	1c5a      	adds	r2, r3, #1
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	601a      	str	r2, [r3, #0]
}
 8004df6:	bf00      	nop
 8004df8:	3714      	adds	r7, #20
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e02:	b480      	push	{r7}
 8004e04:	b085      	sub	sp, #20
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
 8004e0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e18:	d103      	bne.n	8004e22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	e00c      	b.n	8004e3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	3308      	adds	r3, #8
 8004e26:	60fb      	str	r3, [r7, #12]
 8004e28:	e002      	b.n	8004e30 <vListInsert+0x2e>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d2f6      	bcs.n	8004e2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	685a      	ldr	r2, [r3, #4]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	1c5a      	adds	r2, r3, #1
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	601a      	str	r2, [r3, #0]
}
 8004e68:	bf00      	nop
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	6892      	ldr	r2, [r2, #8]
 8004e8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	6852      	ldr	r2, [r2, #4]
 8004e94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d103      	bne.n	8004ea8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	1e5a      	subs	r2, r3, #1
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10b      	bne.n	8004ef4 <xQueueGenericReset+0x2c>
	__asm volatile
 8004edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	60bb      	str	r3, [r7, #8]
}
 8004eee:	bf00      	nop
 8004ef0:	bf00      	nop
 8004ef2:	e7fd      	b.n	8004ef0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004ef4:	f002 f950 	bl	8007198 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f00:	68f9      	ldr	r1, [r7, #12]
 8004f02:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004f04:	fb01 f303 	mul.w	r3, r1, r3
 8004f08:	441a      	add	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f24:	3b01      	subs	r3, #1
 8004f26:	68f9      	ldr	r1, [r7, #12]
 8004f28:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004f2a:	fb01 f303 	mul.w	r3, r1, r3
 8004f2e:	441a      	add	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	22ff      	movs	r2, #255	@ 0xff
 8004f38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	22ff      	movs	r2, #255	@ 0xff
 8004f40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d114      	bne.n	8004f74 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d01a      	beq.n	8004f88 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	3310      	adds	r3, #16
 8004f56:	4618      	mov	r0, r3
 8004f58:	f001 f958 	bl	800620c <xTaskRemoveFromEventList>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d012      	beq.n	8004f88 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004f62:	4b0d      	ldr	r3, [pc, #52]	@ (8004f98 <xQueueGenericReset+0xd0>)
 8004f64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	f3bf 8f4f 	dsb	sy
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	e009      	b.n	8004f88 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	3310      	adds	r3, #16
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f7ff fef1 	bl	8004d60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	3324      	adds	r3, #36	@ 0x24
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7ff feec 	bl	8004d60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004f88:	f002 f938 	bl	80071fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004f8c:	2301      	movs	r3, #1
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	e000ed04 	.word	0xe000ed04

08004f9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b08e      	sub	sp, #56	@ 0x38
 8004fa0:	af02      	add	r7, sp, #8
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
 8004fa8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10b      	bne.n	8004fc8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb4:	f383 8811 	msr	BASEPRI, r3
 8004fb8:	f3bf 8f6f 	isb	sy
 8004fbc:	f3bf 8f4f 	dsb	sy
 8004fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004fc2:	bf00      	nop
 8004fc4:	bf00      	nop
 8004fc6:	e7fd      	b.n	8004fc4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10b      	bne.n	8004fe6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004fe0:	bf00      	nop
 8004fe2:	bf00      	nop
 8004fe4:	e7fd      	b.n	8004fe2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d002      	beq.n	8004ff2 <xQueueGenericCreateStatic+0x56>
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <xQueueGenericCreateStatic+0x5a>
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e000      	b.n	8004ff8 <xQueueGenericCreateStatic+0x5c>
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10b      	bne.n	8005014 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005000:	f383 8811 	msr	BASEPRI, r3
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	f3bf 8f4f 	dsb	sy
 800500c:	623b      	str	r3, [r7, #32]
}
 800500e:	bf00      	nop
 8005010:	bf00      	nop
 8005012:	e7fd      	b.n	8005010 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d102      	bne.n	8005020 <xQueueGenericCreateStatic+0x84>
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d101      	bne.n	8005024 <xQueueGenericCreateStatic+0x88>
 8005020:	2301      	movs	r3, #1
 8005022:	e000      	b.n	8005026 <xQueueGenericCreateStatic+0x8a>
 8005024:	2300      	movs	r3, #0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10b      	bne.n	8005042 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800502a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800502e:	f383 8811 	msr	BASEPRI, r3
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	61fb      	str	r3, [r7, #28]
}
 800503c:	bf00      	nop
 800503e:	bf00      	nop
 8005040:	e7fd      	b.n	800503e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005042:	2350      	movs	r3, #80	@ 0x50
 8005044:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	2b50      	cmp	r3, #80	@ 0x50
 800504a:	d00b      	beq.n	8005064 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800504c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005050:	f383 8811 	msr	BASEPRI, r3
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	61bb      	str	r3, [r7, #24]
}
 800505e:	bf00      	nop
 8005060:	bf00      	nop
 8005062:	e7fd      	b.n	8005060 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005064:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800506a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00d      	beq.n	800508c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005078:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800507c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	4613      	mov	r3, r2
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	68b9      	ldr	r1, [r7, #8]
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 f805 	bl	8005096 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800508c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800508e:	4618      	mov	r0, r3
 8005090:	3730      	adds	r7, #48	@ 0x30
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b084      	sub	sp, #16
 800509a:	af00      	add	r7, sp, #0
 800509c:	60f8      	str	r0, [r7, #12]
 800509e:	60b9      	str	r1, [r7, #8]
 80050a0:	607a      	str	r2, [r7, #4]
 80050a2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d103      	bne.n	80050b2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	e002      	b.n	80050b8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80050c4:	2101      	movs	r1, #1
 80050c6:	69b8      	ldr	r0, [r7, #24]
 80050c8:	f7ff fefe 	bl	8004ec8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	78fa      	ldrb	r2, [r7, #3]
 80050d0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80050d4:	bf00      	nop
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b08e      	sub	sp, #56	@ 0x38
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
 80050e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80050ea:	2300      	movs	r3, #0
 80050ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80050f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10b      	bne.n	8005110 <xQueueGenericSend+0x34>
	__asm volatile
 80050f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050fc:	f383 8811 	msr	BASEPRI, r3
 8005100:	f3bf 8f6f 	isb	sy
 8005104:	f3bf 8f4f 	dsb	sy
 8005108:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800510a:	bf00      	nop
 800510c:	bf00      	nop
 800510e:	e7fd      	b.n	800510c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d103      	bne.n	800511e <xQueueGenericSend+0x42>
 8005116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <xQueueGenericSend+0x46>
 800511e:	2301      	movs	r3, #1
 8005120:	e000      	b.n	8005124 <xQueueGenericSend+0x48>
 8005122:	2300      	movs	r3, #0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10b      	bne.n	8005140 <xQueueGenericSend+0x64>
	__asm volatile
 8005128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800512c:	f383 8811 	msr	BASEPRI, r3
 8005130:	f3bf 8f6f 	isb	sy
 8005134:	f3bf 8f4f 	dsb	sy
 8005138:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800513a:	bf00      	nop
 800513c:	bf00      	nop
 800513e:	e7fd      	b.n	800513c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	2b02      	cmp	r3, #2
 8005144:	d103      	bne.n	800514e <xQueueGenericSend+0x72>
 8005146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800514a:	2b01      	cmp	r3, #1
 800514c:	d101      	bne.n	8005152 <xQueueGenericSend+0x76>
 800514e:	2301      	movs	r3, #1
 8005150:	e000      	b.n	8005154 <xQueueGenericSend+0x78>
 8005152:	2300      	movs	r3, #0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10b      	bne.n	8005170 <xQueueGenericSend+0x94>
	__asm volatile
 8005158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800515c:	f383 8811 	msr	BASEPRI, r3
 8005160:	f3bf 8f6f 	isb	sy
 8005164:	f3bf 8f4f 	dsb	sy
 8005168:	623b      	str	r3, [r7, #32]
}
 800516a:	bf00      	nop
 800516c:	bf00      	nop
 800516e:	e7fd      	b.n	800516c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005170:	f001 fa70 	bl	8006654 <xTaskGetSchedulerState>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d102      	bne.n	8005180 <xQueueGenericSend+0xa4>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <xQueueGenericSend+0xa8>
 8005180:	2301      	movs	r3, #1
 8005182:	e000      	b.n	8005186 <xQueueGenericSend+0xaa>
 8005184:	2300      	movs	r3, #0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10b      	bne.n	80051a2 <xQueueGenericSend+0xc6>
	__asm volatile
 800518a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800518e:	f383 8811 	msr	BASEPRI, r3
 8005192:	f3bf 8f6f 	isb	sy
 8005196:	f3bf 8f4f 	dsb	sy
 800519a:	61fb      	str	r3, [r7, #28]
}
 800519c:	bf00      	nop
 800519e:	bf00      	nop
 80051a0:	e7fd      	b.n	800519e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80051a2:	f001 fff9 	bl	8007198 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80051a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d302      	bcc.n	80051b8 <xQueueGenericSend+0xdc>
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d129      	bne.n	800520c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	68b9      	ldr	r1, [r7, #8]
 80051bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051be:	f000 fa0f 	bl	80055e0 <prvCopyDataToQueue>
 80051c2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d010      	beq.n	80051ee <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ce:	3324      	adds	r3, #36	@ 0x24
 80051d0:	4618      	mov	r0, r3
 80051d2:	f001 f81b 	bl	800620c <xTaskRemoveFromEventList>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d013      	beq.n	8005204 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80051dc:	4b3f      	ldr	r3, [pc, #252]	@ (80052dc <xQueueGenericSend+0x200>)
 80051de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	f3bf 8f4f 	dsb	sy
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	e00a      	b.n	8005204 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80051ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d007      	beq.n	8005204 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80051f4:	4b39      	ldr	r3, [pc, #228]	@ (80052dc <xQueueGenericSend+0x200>)
 80051f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051fa:	601a      	str	r2, [r3, #0]
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005204:	f001 fffa 	bl	80071fc <vPortExitCritical>
				return pdPASS;
 8005208:	2301      	movs	r3, #1
 800520a:	e063      	b.n	80052d4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d103      	bne.n	800521a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005212:	f001 fff3 	bl	80071fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005216:	2300      	movs	r3, #0
 8005218:	e05c      	b.n	80052d4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800521a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800521c:	2b00      	cmp	r3, #0
 800521e:	d106      	bne.n	800522e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005220:	f107 0314 	add.w	r3, r7, #20
 8005224:	4618      	mov	r0, r3
 8005226:	f001 f8b9 	bl	800639c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800522a:	2301      	movs	r3, #1
 800522c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800522e:	f001 ffe5 	bl	80071fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005232:	f000 fd87 	bl	8005d44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005236:	f001 ffaf 	bl	8007198 <vPortEnterCritical>
 800523a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005240:	b25b      	sxtb	r3, r3
 8005242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005246:	d103      	bne.n	8005250 <xQueueGenericSend+0x174>
 8005248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524a:	2200      	movs	r2, #0
 800524c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005252:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005256:	b25b      	sxtb	r3, r3
 8005258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525c:	d103      	bne.n	8005266 <xQueueGenericSend+0x18a>
 800525e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005266:	f001 ffc9 	bl	80071fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800526a:	1d3a      	adds	r2, r7, #4
 800526c:	f107 0314 	add.w	r3, r7, #20
 8005270:	4611      	mov	r1, r2
 8005272:	4618      	mov	r0, r3
 8005274:	f001 f8a8 	bl	80063c8 <xTaskCheckForTimeOut>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d124      	bne.n	80052c8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800527e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005280:	f000 faa6 	bl	80057d0 <prvIsQueueFull>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d018      	beq.n	80052bc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800528a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800528c:	3310      	adds	r3, #16
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	4611      	mov	r1, r2
 8005292:	4618      	mov	r0, r3
 8005294:	f000 ff2a 	bl	80060ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005298:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800529a:	f000 fa31 	bl	8005700 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800529e:	f000 fd5f 	bl	8005d60 <xTaskResumeAll>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f47f af7c 	bne.w	80051a2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80052aa:	4b0c      	ldr	r3, [pc, #48]	@ (80052dc <xQueueGenericSend+0x200>)
 80052ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	f3bf 8f4f 	dsb	sy
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	e772      	b.n	80051a2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80052bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80052be:	f000 fa1f 	bl	8005700 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80052c2:	f000 fd4d 	bl	8005d60 <xTaskResumeAll>
 80052c6:	e76c      	b.n	80051a2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80052c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80052ca:	f000 fa19 	bl	8005700 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80052ce:	f000 fd47 	bl	8005d60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80052d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3738      	adds	r7, #56	@ 0x38
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	e000ed04 	.word	0xe000ed04

080052e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b090      	sub	sp, #64	@ 0x40
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
 80052ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80052f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d10b      	bne.n	8005310 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80052f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052fc:	f383 8811 	msr	BASEPRI, r3
 8005300:	f3bf 8f6f 	isb	sy
 8005304:	f3bf 8f4f 	dsb	sy
 8005308:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800530a:	bf00      	nop
 800530c:	bf00      	nop
 800530e:	e7fd      	b.n	800530c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d103      	bne.n	800531e <xQueueGenericSendFromISR+0x3e>
 8005316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <xQueueGenericSendFromISR+0x42>
 800531e:	2301      	movs	r3, #1
 8005320:	e000      	b.n	8005324 <xQueueGenericSendFromISR+0x44>
 8005322:	2300      	movs	r3, #0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10b      	bne.n	8005340 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800532c:	f383 8811 	msr	BASEPRI, r3
 8005330:	f3bf 8f6f 	isb	sy
 8005334:	f3bf 8f4f 	dsb	sy
 8005338:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800533a:	bf00      	nop
 800533c:	bf00      	nop
 800533e:	e7fd      	b.n	800533c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	2b02      	cmp	r3, #2
 8005344:	d103      	bne.n	800534e <xQueueGenericSendFromISR+0x6e>
 8005346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800534a:	2b01      	cmp	r3, #1
 800534c:	d101      	bne.n	8005352 <xQueueGenericSendFromISR+0x72>
 800534e:	2301      	movs	r3, #1
 8005350:	e000      	b.n	8005354 <xQueueGenericSendFromISR+0x74>
 8005352:	2300      	movs	r3, #0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10b      	bne.n	8005370 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800535c:	f383 8811 	msr	BASEPRI, r3
 8005360:	f3bf 8f6f 	isb	sy
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	623b      	str	r3, [r7, #32]
}
 800536a:	bf00      	nop
 800536c:	bf00      	nop
 800536e:	e7fd      	b.n	800536c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005370:	f001 fff2 	bl	8007358 <vPortValidateInterruptPriority>
	__asm volatile
 8005374:	f3ef 8211 	mrs	r2, BASEPRI
 8005378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800537c:	f383 8811 	msr	BASEPRI, r3
 8005380:	f3bf 8f6f 	isb	sy
 8005384:	f3bf 8f4f 	dsb	sy
 8005388:	61fa      	str	r2, [r7, #28]
 800538a:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800538c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800538e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005392:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005398:	429a      	cmp	r2, r3
 800539a:	d302      	bcc.n	80053a2 <xQueueGenericSendFromISR+0xc2>
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d12f      	bne.n	8005402 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80053a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	68b9      	ldr	r1, [r7, #8]
 80053b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80053b8:	f000 f912 	bl	80055e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80053bc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80053c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c4:	d112      	bne.n	80053ec <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d016      	beq.n	80053fc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053d0:	3324      	adds	r3, #36	@ 0x24
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 ff1a 	bl	800620c <xTaskRemoveFromEventList>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00e      	beq.n	80053fc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00b      	beq.n	80053fc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	e007      	b.n	80053fc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80053ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80053f0:	3301      	adds	r3, #1
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	b25a      	sxtb	r2, r3
 80053f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80053fc:	2301      	movs	r3, #1
 80053fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005400:	e001      	b.n	8005406 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005402:	2300      	movs	r3, #0
 8005404:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005408:	617b      	str	r3, [r7, #20]
	__asm volatile
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f383 8811 	msr	BASEPRI, r3
}
 8005410:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005414:	4618      	mov	r0, r3
 8005416:	3740      	adds	r7, #64	@ 0x40
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b08c      	sub	sp, #48	@ 0x30
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005428:	2300      	movs	r3, #0
 800542a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10b      	bne.n	800544e <xQueueReceive+0x32>
	__asm volatile
 8005436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800543a:	f383 8811 	msr	BASEPRI, r3
 800543e:	f3bf 8f6f 	isb	sy
 8005442:	f3bf 8f4f 	dsb	sy
 8005446:	623b      	str	r3, [r7, #32]
}
 8005448:	bf00      	nop
 800544a:	bf00      	nop
 800544c:	e7fd      	b.n	800544a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d103      	bne.n	800545c <xQueueReceive+0x40>
 8005454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <xQueueReceive+0x44>
 800545c:	2301      	movs	r3, #1
 800545e:	e000      	b.n	8005462 <xQueueReceive+0x46>
 8005460:	2300      	movs	r3, #0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10b      	bne.n	800547e <xQueueReceive+0x62>
	__asm volatile
 8005466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800546a:	f383 8811 	msr	BASEPRI, r3
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	f3bf 8f4f 	dsb	sy
 8005476:	61fb      	str	r3, [r7, #28]
}
 8005478:	bf00      	nop
 800547a:	bf00      	nop
 800547c:	e7fd      	b.n	800547a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800547e:	f001 f8e9 	bl	8006654 <xTaskGetSchedulerState>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d102      	bne.n	800548e <xQueueReceive+0x72>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <xQueueReceive+0x76>
 800548e:	2301      	movs	r3, #1
 8005490:	e000      	b.n	8005494 <xQueueReceive+0x78>
 8005492:	2300      	movs	r3, #0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d10b      	bne.n	80054b0 <xQueueReceive+0x94>
	__asm volatile
 8005498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800549c:	f383 8811 	msr	BASEPRI, r3
 80054a0:	f3bf 8f6f 	isb	sy
 80054a4:	f3bf 8f4f 	dsb	sy
 80054a8:	61bb      	str	r3, [r7, #24]
}
 80054aa:	bf00      	nop
 80054ac:	bf00      	nop
 80054ae:	e7fd      	b.n	80054ac <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80054b0:	f001 fe72 	bl	8007198 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d01f      	beq.n	8005500 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80054c0:	68b9      	ldr	r1, [r7, #8]
 80054c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054c4:	f000 f8f6 	bl	80056b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80054c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ca:	1e5a      	subs	r2, r3, #1
 80054cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ce:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00f      	beq.n	80054f8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054da:	3310      	adds	r3, #16
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 fe95 	bl	800620c <xTaskRemoveFromEventList>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d007      	beq.n	80054f8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80054e8:	4b3c      	ldr	r3, [pc, #240]	@ (80055dc <xQueueReceive+0x1c0>)
 80054ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	f3bf 8f4f 	dsb	sy
 80054f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80054f8:	f001 fe80 	bl	80071fc <vPortExitCritical>
				return pdPASS;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e069      	b.n	80055d4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d103      	bne.n	800550e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005506:	f001 fe79 	bl	80071fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800550a:	2300      	movs	r3, #0
 800550c:	e062      	b.n	80055d4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800550e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005510:	2b00      	cmp	r3, #0
 8005512:	d106      	bne.n	8005522 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005514:	f107 0310 	add.w	r3, r7, #16
 8005518:	4618      	mov	r0, r3
 800551a:	f000 ff3f 	bl	800639c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800551e:	2301      	movs	r3, #1
 8005520:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005522:	f001 fe6b 	bl	80071fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005526:	f000 fc0d 	bl	8005d44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800552a:	f001 fe35 	bl	8007198 <vPortEnterCritical>
 800552e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005530:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005534:	b25b      	sxtb	r3, r3
 8005536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553a:	d103      	bne.n	8005544 <xQueueReceive+0x128>
 800553c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800553e:	2200      	movs	r2, #0
 8005540:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005546:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800554a:	b25b      	sxtb	r3, r3
 800554c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005550:	d103      	bne.n	800555a <xQueueReceive+0x13e>
 8005552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005554:	2200      	movs	r2, #0
 8005556:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800555a:	f001 fe4f 	bl	80071fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800555e:	1d3a      	adds	r2, r7, #4
 8005560:	f107 0310 	add.w	r3, r7, #16
 8005564:	4611      	mov	r1, r2
 8005566:	4618      	mov	r0, r3
 8005568:	f000 ff2e 	bl	80063c8 <xTaskCheckForTimeOut>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d123      	bne.n	80055ba <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005572:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005574:	f000 f916 	bl	80057a4 <prvIsQueueEmpty>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d017      	beq.n	80055ae <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800557e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005580:	3324      	adds	r3, #36	@ 0x24
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	4611      	mov	r1, r2
 8005586:	4618      	mov	r0, r3
 8005588:	f000 fdb0 	bl	80060ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800558c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800558e:	f000 f8b7 	bl	8005700 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005592:	f000 fbe5 	bl	8005d60 <xTaskResumeAll>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d189      	bne.n	80054b0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800559c:	4b0f      	ldr	r3, [pc, #60]	@ (80055dc <xQueueReceive+0x1c0>)
 800559e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	f3bf 8f4f 	dsb	sy
 80055a8:	f3bf 8f6f 	isb	sy
 80055ac:	e780      	b.n	80054b0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80055ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055b0:	f000 f8a6 	bl	8005700 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055b4:	f000 fbd4 	bl	8005d60 <xTaskResumeAll>
 80055b8:	e77a      	b.n	80054b0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80055ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055bc:	f000 f8a0 	bl	8005700 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055c0:	f000 fbce 	bl	8005d60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055c6:	f000 f8ed 	bl	80057a4 <prvIsQueueEmpty>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f43f af6f 	beq.w	80054b0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80055d2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3730      	adds	r7, #48	@ 0x30
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	e000ed04 	.word	0xe000ed04

080055e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80055ec:	2300      	movs	r3, #0
 80055ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10d      	bne.n	800561a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d14d      	bne.n	80056a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	4618      	mov	r0, r3
 800560c:	f001 f840 	bl	8006690 <xTaskPriorityDisinherit>
 8005610:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	609a      	str	r2, [r3, #8]
 8005618:	e043      	b.n	80056a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d119      	bne.n	8005654 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6858      	ldr	r0, [r3, #4]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005628:	461a      	mov	r2, r3
 800562a:	68b9      	ldr	r1, [r7, #8]
 800562c:	f002 f8f0 	bl	8007810 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005638:	441a      	add	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	685a      	ldr	r2, [r3, #4]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	429a      	cmp	r2, r3
 8005648:	d32b      	bcc.n	80056a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	605a      	str	r2, [r3, #4]
 8005652:	e026      	b.n	80056a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	68d8      	ldr	r0, [r3, #12]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565c:	461a      	mov	r2, r3
 800565e:	68b9      	ldr	r1, [r7, #8]
 8005660:	f002 f8d6 	bl	8007810 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	68da      	ldr	r2, [r3, #12]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800566c:	425b      	negs	r3, r3
 800566e:	441a      	add	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	68da      	ldr	r2, [r3, #12]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	429a      	cmp	r2, r3
 800567e:	d207      	bcs.n	8005690 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	689a      	ldr	r2, [r3, #8]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005688:	425b      	negs	r3, r3
 800568a:	441a      	add	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b02      	cmp	r3, #2
 8005694:	d105      	bne.n	80056a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d002      	beq.n	80056a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	3b01      	subs	r3, #1
 80056a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	1c5a      	adds	r2, r3, #1
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80056aa:	697b      	ldr	r3, [r7, #20]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3718      	adds	r7, #24
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d018      	beq.n	80056f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68da      	ldr	r2, [r3, #12]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ce:	441a      	add	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	68da      	ldr	r2, [r3, #12]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d303      	bcc.n	80056e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68d9      	ldr	r1, [r3, #12]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f0:	461a      	mov	r2, r3
 80056f2:	6838      	ldr	r0, [r7, #0]
 80056f4:	f002 f88c 	bl	8007810 <memcpy>
	}
}
 80056f8:	bf00      	nop
 80056fa:	3708      	adds	r7, #8
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005708:	f001 fd46 	bl	8007198 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005712:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005714:	e011      	b.n	800573a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800571a:	2b00      	cmp	r3, #0
 800571c:	d012      	beq.n	8005744 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	3324      	adds	r3, #36	@ 0x24
 8005722:	4618      	mov	r0, r3
 8005724:	f000 fd72 	bl	800620c <xTaskRemoveFromEventList>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800572e:	f000 feaf 	bl	8006490 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005732:	7bfb      	ldrb	r3, [r7, #15]
 8005734:	3b01      	subs	r3, #1
 8005736:	b2db      	uxtb	r3, r3
 8005738:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800573a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800573e:	2b00      	cmp	r3, #0
 8005740:	dce9      	bgt.n	8005716 <prvUnlockQueue+0x16>
 8005742:	e000      	b.n	8005746 <prvUnlockQueue+0x46>
					break;
 8005744:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	22ff      	movs	r2, #255	@ 0xff
 800574a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800574e:	f001 fd55 	bl	80071fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005752:	f001 fd21 	bl	8007198 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800575c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800575e:	e011      	b.n	8005784 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d012      	beq.n	800578e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	3310      	adds	r3, #16
 800576c:	4618      	mov	r0, r3
 800576e:	f000 fd4d 	bl	800620c <xTaskRemoveFromEventList>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d001      	beq.n	800577c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005778:	f000 fe8a 	bl	8006490 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800577c:	7bbb      	ldrb	r3, [r7, #14]
 800577e:	3b01      	subs	r3, #1
 8005780:	b2db      	uxtb	r3, r3
 8005782:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005784:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005788:	2b00      	cmp	r3, #0
 800578a:	dce9      	bgt.n	8005760 <prvUnlockQueue+0x60>
 800578c:	e000      	b.n	8005790 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800578e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	22ff      	movs	r2, #255	@ 0xff
 8005794:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005798:	f001 fd30 	bl	80071fc <vPortExitCritical>
}
 800579c:	bf00      	nop
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80057ac:	f001 fcf4 	bl	8007198 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d102      	bne.n	80057be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80057b8:	2301      	movs	r3, #1
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	e001      	b.n	80057c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80057be:	2300      	movs	r3, #0
 80057c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80057c2:	f001 fd1b 	bl	80071fc <vPortExitCritical>

	return xReturn;
 80057c6:	68fb      	ldr	r3, [r7, #12]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80057d8:	f001 fcde 	bl	8007198 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d102      	bne.n	80057ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80057e8:	2301      	movs	r3, #1
 80057ea:	60fb      	str	r3, [r7, #12]
 80057ec:	e001      	b.n	80057f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80057ee:	2300      	movs	r3, #0
 80057f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80057f2:	f001 fd03 	bl	80071fc <vPortExitCritical>

	return xReturn;
 80057f6:	68fb      	ldr	r3, [r7, #12]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800580a:	2300      	movs	r3, #0
 800580c:	60fb      	str	r3, [r7, #12]
 800580e:	e014      	b.n	800583a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005810:	4a0f      	ldr	r2, [pc, #60]	@ (8005850 <vQueueAddToRegistry+0x50>)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10b      	bne.n	8005834 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800581c:	490c      	ldr	r1, [pc, #48]	@ (8005850 <vQueueAddToRegistry+0x50>)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	683a      	ldr	r2, [r7, #0]
 8005822:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005826:	4a0a      	ldr	r2, [pc, #40]	@ (8005850 <vQueueAddToRegistry+0x50>)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	4413      	add	r3, r2
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005832:	e006      	b.n	8005842 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	3301      	adds	r3, #1
 8005838:	60fb      	str	r3, [r7, #12]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2b07      	cmp	r3, #7
 800583e:	d9e7      	bls.n	8005810 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005840:	bf00      	nop
 8005842:	bf00      	nop
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	20000c94 	.word	0x20000c94

08005854 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005864:	f001 fc98 	bl	8007198 <vPortEnterCritical>
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800586e:	b25b      	sxtb	r3, r3
 8005870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005874:	d103      	bne.n	800587e <vQueueWaitForMessageRestricted+0x2a>
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005884:	b25b      	sxtb	r3, r3
 8005886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800588a:	d103      	bne.n	8005894 <vQueueWaitForMessageRestricted+0x40>
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005894:	f001 fcb2 	bl	80071fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800589c:	2b00      	cmp	r3, #0
 800589e:	d106      	bne.n	80058ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	3324      	adds	r3, #36	@ 0x24
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	68b9      	ldr	r1, [r7, #8]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 fc83 	bl	80061b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80058ae:	6978      	ldr	r0, [r7, #20]
 80058b0:	f7ff ff26 	bl	8005700 <prvUnlockQueue>
	}
 80058b4:	bf00      	nop
 80058b6:	3718      	adds	r7, #24
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b08e      	sub	sp, #56	@ 0x38
 80058c0:	af04      	add	r7, sp, #16
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
 80058c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80058ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10b      	bne.n	80058e8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80058d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d4:	f383 8811 	msr	BASEPRI, r3
 80058d8:	f3bf 8f6f 	isb	sy
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	623b      	str	r3, [r7, #32]
}
 80058e2:	bf00      	nop
 80058e4:	bf00      	nop
 80058e6:	e7fd      	b.n	80058e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80058e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10b      	bne.n	8005906 <xTaskCreateStatic+0x4a>
	__asm volatile
 80058ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f2:	f383 8811 	msr	BASEPRI, r3
 80058f6:	f3bf 8f6f 	isb	sy
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	61fb      	str	r3, [r7, #28]
}
 8005900:	bf00      	nop
 8005902:	bf00      	nop
 8005904:	e7fd      	b.n	8005902 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005906:	235c      	movs	r3, #92	@ 0x5c
 8005908:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	2b5c      	cmp	r3, #92	@ 0x5c
 800590e:	d00b      	beq.n	8005928 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	61bb      	str	r3, [r7, #24]
}
 8005922:	bf00      	nop
 8005924:	bf00      	nop
 8005926:	e7fd      	b.n	8005924 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005928:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800592a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800592c:	2b00      	cmp	r3, #0
 800592e:	d01e      	beq.n	800596e <xTaskCreateStatic+0xb2>
 8005930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005932:	2b00      	cmp	r3, #0
 8005934:	d01b      	beq.n	800596e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005938:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800593a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800593e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005942:	2202      	movs	r2, #2
 8005944:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005948:	2300      	movs	r3, #0
 800594a:	9303      	str	r3, [sp, #12]
 800594c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800594e:	9302      	str	r3, [sp, #8]
 8005950:	f107 0314 	add.w	r3, r7, #20
 8005954:	9301      	str	r3, [sp, #4]
 8005956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005958:	9300      	str	r3, [sp, #0]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	68b9      	ldr	r1, [r7, #8]
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f000 f850 	bl	8005a06 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005966:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005968:	f000 f8de 	bl	8005b28 <prvAddNewTaskToReadyList>
 800596c:	e001      	b.n	8005972 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800596e:	2300      	movs	r3, #0
 8005970:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005972:	697b      	ldr	r3, [r7, #20]
	}
 8005974:	4618      	mov	r0, r3
 8005976:	3728      	adds	r7, #40	@ 0x28
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800597c:	b580      	push	{r7, lr}
 800597e:	b08c      	sub	sp, #48	@ 0x30
 8005980:	af04      	add	r7, sp, #16
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	603b      	str	r3, [r7, #0]
 8005988:	4613      	mov	r3, r2
 800598a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800598c:	88fb      	ldrh	r3, [r7, #6]
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4618      	mov	r0, r3
 8005992:	f001 fd23 	bl	80073dc <pvPortMalloc>
 8005996:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00e      	beq.n	80059bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800599e:	205c      	movs	r0, #92	@ 0x5c
 80059a0:	f001 fd1c 	bl	80073dc <pvPortMalloc>
 80059a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80059b2:	e005      	b.n	80059c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80059b4:	6978      	ldr	r0, [r7, #20]
 80059b6:	f001 fddf 	bl	8007578 <vPortFree>
 80059ba:	e001      	b.n	80059c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80059bc:	2300      	movs	r3, #0
 80059be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d017      	beq.n	80059f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80059ce:	88fa      	ldrh	r2, [r7, #6]
 80059d0:	2300      	movs	r3, #0
 80059d2:	9303      	str	r3, [sp, #12]
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	9302      	str	r3, [sp, #8]
 80059d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059da:	9301      	str	r3, [sp, #4]
 80059dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	68b9      	ldr	r1, [r7, #8]
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f000 f80e 	bl	8005a06 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80059ea:	69f8      	ldr	r0, [r7, #28]
 80059ec:	f000 f89c 	bl	8005b28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80059f0:	2301      	movs	r3, #1
 80059f2:	61bb      	str	r3, [r7, #24]
 80059f4:	e002      	b.n	80059fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80059f6:	f04f 33ff 	mov.w	r3, #4294967295
 80059fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80059fc:	69bb      	ldr	r3, [r7, #24]
	}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3720      	adds	r7, #32
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b088      	sub	sp, #32
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	60f8      	str	r0, [r7, #12]
 8005a0e:	60b9      	str	r1, [r7, #8]
 8005a10:	607a      	str	r2, [r7, #4]
 8005a12:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a16:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	21a5      	movs	r1, #165	@ 0xa5
 8005a20:	f001 feca 	bl	80077b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	f023 0307 	bic.w	r3, r3, #7
 8005a3c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	f003 0307 	and.w	r3, r3, #7
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00b      	beq.n	8005a60 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a4c:	f383 8811 	msr	BASEPRI, r3
 8005a50:	f3bf 8f6f 	isb	sy
 8005a54:	f3bf 8f4f 	dsb	sy
 8005a58:	617b      	str	r3, [r7, #20]
}
 8005a5a:	bf00      	nop
 8005a5c:	bf00      	nop
 8005a5e:	e7fd      	b.n	8005a5c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d01f      	beq.n	8005aa6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a66:	2300      	movs	r3, #0
 8005a68:	61fb      	str	r3, [r7, #28]
 8005a6a:	e012      	b.n	8005a92 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	4413      	add	r3, r2
 8005a72:	7819      	ldrb	r1, [r3, #0]
 8005a74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	4413      	add	r3, r2
 8005a7a:	3334      	adds	r3, #52	@ 0x34
 8005a7c:	460a      	mov	r2, r1
 8005a7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	4413      	add	r3, r2
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d006      	beq.n	8005a9a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	3301      	adds	r3, #1
 8005a90:	61fb      	str	r3, [r7, #28]
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	2b0f      	cmp	r3, #15
 8005a96:	d9e9      	bls.n	8005a6c <prvInitialiseNewTask+0x66>
 8005a98:	e000      	b.n	8005a9c <prvInitialiseNewTask+0x96>
			{
				break;
 8005a9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005aa4:	e003      	b.n	8005aae <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab0:	2b37      	cmp	r3, #55	@ 0x37
 8005ab2:	d901      	bls.n	8005ab8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ab4:	2337      	movs	r3, #55	@ 0x37
 8005ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005abc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ac2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005acc:	3304      	adds	r3, #4
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7ff f966 	bl	8004da0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad6:	3318      	adds	r3, #24
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7ff f961 	bl	8004da0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ae2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005af2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af6:	2200      	movs	r2, #0
 8005af8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	68f9      	ldr	r1, [r7, #12]
 8005b06:	69b8      	ldr	r0, [r7, #24]
 8005b08:	f001 fa18 	bl	8006f3c <pxPortInitialiseStack>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b10:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d002      	beq.n	8005b1e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b1e:	bf00      	nop
 8005b20:	3720      	adds	r7, #32
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
	...

08005b28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005b30:	f001 fb32 	bl	8007198 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005b34:	4b2d      	ldr	r3, [pc, #180]	@ (8005bec <prvAddNewTaskToReadyList+0xc4>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	4a2c      	ldr	r2, [pc, #176]	@ (8005bec <prvAddNewTaskToReadyList+0xc4>)
 8005b3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005b3e:	4b2c      	ldr	r3, [pc, #176]	@ (8005bf0 <prvAddNewTaskToReadyList+0xc8>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d109      	bne.n	8005b5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005b46:	4a2a      	ldr	r2, [pc, #168]	@ (8005bf0 <prvAddNewTaskToReadyList+0xc8>)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b4c:	4b27      	ldr	r3, [pc, #156]	@ (8005bec <prvAddNewTaskToReadyList+0xc4>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d110      	bne.n	8005b76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005b54:	f000 fcc0 	bl	80064d8 <prvInitialiseTaskLists>
 8005b58:	e00d      	b.n	8005b76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b5a:	4b26      	ldr	r3, [pc, #152]	@ (8005bf4 <prvAddNewTaskToReadyList+0xcc>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d109      	bne.n	8005b76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b62:	4b23      	ldr	r3, [pc, #140]	@ (8005bf0 <prvAddNewTaskToReadyList+0xc8>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d802      	bhi.n	8005b76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b70:	4a1f      	ldr	r2, [pc, #124]	@ (8005bf0 <prvAddNewTaskToReadyList+0xc8>)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b76:	4b20      	ldr	r3, [pc, #128]	@ (8005bf8 <prvAddNewTaskToReadyList+0xd0>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	4a1e      	ldr	r2, [pc, #120]	@ (8005bf8 <prvAddNewTaskToReadyList+0xd0>)
 8005b7e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005b80:	4b1d      	ldr	r3, [pc, #116]	@ (8005bf8 <prvAddNewTaskToReadyList+0xd0>)
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8005bfc <prvAddNewTaskToReadyList+0xd4>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d903      	bls.n	8005b9c <prvAddNewTaskToReadyList+0x74>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b98:	4a18      	ldr	r2, [pc, #96]	@ (8005bfc <prvAddNewTaskToReadyList+0xd4>)
 8005b9a:	6013      	str	r3, [r2, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4413      	add	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4a15      	ldr	r2, [pc, #84]	@ (8005c00 <prvAddNewTaskToReadyList+0xd8>)
 8005baa:	441a      	add	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	3304      	adds	r3, #4
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	4610      	mov	r0, r2
 8005bb4:	f7ff f901 	bl	8004dba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005bb8:	f001 fb20 	bl	80071fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8005bf4 <prvAddNewTaskToReadyList+0xcc>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00e      	beq.n	8005be2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8005bf0 <prvAddNewTaskToReadyList+0xc8>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d207      	bcs.n	8005be2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8005c04 <prvAddNewTaskToReadyList+0xdc>)
 8005bd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bd8:	601a      	str	r2, [r3, #0]
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005be2:	bf00      	nop
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	200011a8 	.word	0x200011a8
 8005bf0:	20000cd4 	.word	0x20000cd4
 8005bf4:	200011b4 	.word	0x200011b4
 8005bf8:	200011c4 	.word	0x200011c4
 8005bfc:	200011b0 	.word	0x200011b0
 8005c00:	20000cd8 	.word	0x20000cd8
 8005c04:	e000ed04 	.word	0xe000ed04

08005c08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005c10:	2300      	movs	r3, #0
 8005c12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d018      	beq.n	8005c4c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005c1a:	4b14      	ldr	r3, [pc, #80]	@ (8005c6c <vTaskDelay+0x64>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00b      	beq.n	8005c3a <vTaskDelay+0x32>
	__asm volatile
 8005c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c26:	f383 8811 	msr	BASEPRI, r3
 8005c2a:	f3bf 8f6f 	isb	sy
 8005c2e:	f3bf 8f4f 	dsb	sy
 8005c32:	60bb      	str	r3, [r7, #8]
}
 8005c34:	bf00      	nop
 8005c36:	bf00      	nop
 8005c38:	e7fd      	b.n	8005c36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005c3a:	f000 f883 	bl	8005d44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005c3e:	2100      	movs	r1, #0
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 fdad 	bl	80067a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005c46:	f000 f88b 	bl	8005d60 <xTaskResumeAll>
 8005c4a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d107      	bne.n	8005c62 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005c52:	4b07      	ldr	r3, [pc, #28]	@ (8005c70 <vTaskDelay+0x68>)
 8005c54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c58:	601a      	str	r2, [r3, #0]
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c62:	bf00      	nop
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	200011d0 	.word	0x200011d0
 8005c70:	e000ed04 	.word	0xe000ed04

08005c74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b08a      	sub	sp, #40	@ 0x28
 8005c78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c82:	463a      	mov	r2, r7
 8005c84:	1d39      	adds	r1, r7, #4
 8005c86:	f107 0308 	add.w	r3, r7, #8
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7fe fdc0 	bl	8004810 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c90:	6839      	ldr	r1, [r7, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68ba      	ldr	r2, [r7, #8]
 8005c96:	9202      	str	r2, [sp, #8]
 8005c98:	9301      	str	r3, [sp, #4]
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	9300      	str	r3, [sp, #0]
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	460a      	mov	r2, r1
 8005ca2:	4922      	ldr	r1, [pc, #136]	@ (8005d2c <vTaskStartScheduler+0xb8>)
 8005ca4:	4822      	ldr	r0, [pc, #136]	@ (8005d30 <vTaskStartScheduler+0xbc>)
 8005ca6:	f7ff fe09 	bl	80058bc <xTaskCreateStatic>
 8005caa:	4603      	mov	r3, r0
 8005cac:	4a21      	ldr	r2, [pc, #132]	@ (8005d34 <vTaskStartScheduler+0xc0>)
 8005cae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005cb0:	4b20      	ldr	r3, [pc, #128]	@ (8005d34 <vTaskStartScheduler+0xc0>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d002      	beq.n	8005cbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	617b      	str	r3, [r7, #20]
 8005cbc:	e001      	b.n	8005cc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d102      	bne.n	8005cce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005cc8:	f000 fdbe 	bl	8006848 <xTimerCreateTimerTask>
 8005ccc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d116      	bne.n	8005d02 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd8:	f383 8811 	msr	BASEPRI, r3
 8005cdc:	f3bf 8f6f 	isb	sy
 8005ce0:	f3bf 8f4f 	dsb	sy
 8005ce4:	613b      	str	r3, [r7, #16]
}
 8005ce6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ce8:	4b13      	ldr	r3, [pc, #76]	@ (8005d38 <vTaskStartScheduler+0xc4>)
 8005cea:	f04f 32ff 	mov.w	r2, #4294967295
 8005cee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005cf0:	4b12      	ldr	r3, [pc, #72]	@ (8005d3c <vTaskStartScheduler+0xc8>)
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005cf6:	4b12      	ldr	r3, [pc, #72]	@ (8005d40 <vTaskStartScheduler+0xcc>)
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005cfc:	f001 f9a8 	bl	8007050 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005d00:	e00f      	b.n	8005d22 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d08:	d10b      	bne.n	8005d22 <vTaskStartScheduler+0xae>
	__asm volatile
 8005d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d0e:	f383 8811 	msr	BASEPRI, r3
 8005d12:	f3bf 8f6f 	isb	sy
 8005d16:	f3bf 8f4f 	dsb	sy
 8005d1a:	60fb      	str	r3, [r7, #12]
}
 8005d1c:	bf00      	nop
 8005d1e:	bf00      	nop
 8005d20:	e7fd      	b.n	8005d1e <vTaskStartScheduler+0xaa>
}
 8005d22:	bf00      	nop
 8005d24:	3718      	adds	r7, #24
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	080078ec 	.word	0x080078ec
 8005d30:	080064a9 	.word	0x080064a9
 8005d34:	200011cc 	.word	0x200011cc
 8005d38:	200011c8 	.word	0x200011c8
 8005d3c:	200011b4 	.word	0x200011b4
 8005d40:	200011ac 	.word	0x200011ac

08005d44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d44:	b480      	push	{r7}
 8005d46:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005d48:	4b04      	ldr	r3, [pc, #16]	@ (8005d5c <vTaskSuspendAll+0x18>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	4a03      	ldr	r2, [pc, #12]	@ (8005d5c <vTaskSuspendAll+0x18>)
 8005d50:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005d52:	bf00      	nop
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr
 8005d5c:	200011d0 	.word	0x200011d0

08005d60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d66:	2300      	movs	r3, #0
 8005d68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d6e:	4b42      	ldr	r3, [pc, #264]	@ (8005e78 <xTaskResumeAll+0x118>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10b      	bne.n	8005d8e <xTaskResumeAll+0x2e>
	__asm volatile
 8005d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d7a:	f383 8811 	msr	BASEPRI, r3
 8005d7e:	f3bf 8f6f 	isb	sy
 8005d82:	f3bf 8f4f 	dsb	sy
 8005d86:	603b      	str	r3, [r7, #0]
}
 8005d88:	bf00      	nop
 8005d8a:	bf00      	nop
 8005d8c:	e7fd      	b.n	8005d8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d8e:	f001 fa03 	bl	8007198 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d92:	4b39      	ldr	r3, [pc, #228]	@ (8005e78 <xTaskResumeAll+0x118>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	3b01      	subs	r3, #1
 8005d98:	4a37      	ldr	r2, [pc, #220]	@ (8005e78 <xTaskResumeAll+0x118>)
 8005d9a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d9c:	4b36      	ldr	r3, [pc, #216]	@ (8005e78 <xTaskResumeAll+0x118>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d162      	bne.n	8005e6a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005da4:	4b35      	ldr	r3, [pc, #212]	@ (8005e7c <xTaskResumeAll+0x11c>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d05e      	beq.n	8005e6a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005dac:	e02f      	b.n	8005e0e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dae:	4b34      	ldr	r3, [pc, #208]	@ (8005e80 <xTaskResumeAll+0x120>)
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	3318      	adds	r3, #24
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7ff f85a 	bl	8004e74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	3304      	adds	r3, #4
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7ff f855 	bl	8004e74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dce:	4b2d      	ldr	r3, [pc, #180]	@ (8005e84 <xTaskResumeAll+0x124>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d903      	bls.n	8005dde <xTaskResumeAll+0x7e>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dda:	4a2a      	ldr	r2, [pc, #168]	@ (8005e84 <xTaskResumeAll+0x124>)
 8005ddc:	6013      	str	r3, [r2, #0]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005de2:	4613      	mov	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4a27      	ldr	r2, [pc, #156]	@ (8005e88 <xTaskResumeAll+0x128>)
 8005dec:	441a      	add	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	3304      	adds	r3, #4
 8005df2:	4619      	mov	r1, r3
 8005df4:	4610      	mov	r0, r2
 8005df6:	f7fe ffe0 	bl	8004dba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dfe:	4b23      	ldr	r3, [pc, #140]	@ (8005e8c <xTaskResumeAll+0x12c>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d302      	bcc.n	8005e0e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005e08:	4b21      	ldr	r3, [pc, #132]	@ (8005e90 <xTaskResumeAll+0x130>)
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8005e80 <xTaskResumeAll+0x120>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1cb      	bne.n	8005dae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d001      	beq.n	8005e20 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005e1c:	f000 fbfa 	bl	8006614 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005e20:	4b1c      	ldr	r3, [pc, #112]	@ (8005e94 <xTaskResumeAll+0x134>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d010      	beq.n	8005e4e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005e2c:	f000 f846 	bl	8005ebc <xTaskIncrementTick>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d002      	beq.n	8005e3c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005e36:	4b16      	ldr	r3, [pc, #88]	@ (8005e90 <xTaskResumeAll+0x130>)
 8005e38:	2201      	movs	r2, #1
 8005e3a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1f1      	bne.n	8005e2c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005e48:	4b12      	ldr	r3, [pc, #72]	@ (8005e94 <xTaskResumeAll+0x134>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005e4e:	4b10      	ldr	r3, [pc, #64]	@ (8005e90 <xTaskResumeAll+0x130>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d009      	beq.n	8005e6a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e56:	2301      	movs	r3, #1
 8005e58:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8005e98 <xTaskResumeAll+0x138>)
 8005e5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e60:	601a      	str	r2, [r3, #0]
 8005e62:	f3bf 8f4f 	dsb	sy
 8005e66:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e6a:	f001 f9c7 	bl	80071fc <vPortExitCritical>

	return xAlreadyYielded;
 8005e6e:	68bb      	ldr	r3, [r7, #8]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	200011d0 	.word	0x200011d0
 8005e7c:	200011a8 	.word	0x200011a8
 8005e80:	20001168 	.word	0x20001168
 8005e84:	200011b0 	.word	0x200011b0
 8005e88:	20000cd8 	.word	0x20000cd8
 8005e8c:	20000cd4 	.word	0x20000cd4
 8005e90:	200011bc 	.word	0x200011bc
 8005e94:	200011b8 	.word	0x200011b8
 8005e98:	e000ed04 	.word	0xe000ed04

08005e9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005ea2:	4b05      	ldr	r3, [pc, #20]	@ (8005eb8 <xTaskGetTickCount+0x1c>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005ea8:	687b      	ldr	r3, [r7, #4]
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	370c      	adds	r7, #12
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	200011ac 	.word	0x200011ac

08005ebc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ec6:	4b4f      	ldr	r3, [pc, #316]	@ (8006004 <xTaskIncrementTick+0x148>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f040 8090 	bne.w	8005ff0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ed0:	4b4d      	ldr	r3, [pc, #308]	@ (8006008 <xTaskIncrementTick+0x14c>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ed8:	4a4b      	ldr	r2, [pc, #300]	@ (8006008 <xTaskIncrementTick+0x14c>)
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d121      	bne.n	8005f28 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ee4:	4b49      	ldr	r3, [pc, #292]	@ (800600c <xTaskIncrementTick+0x150>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00b      	beq.n	8005f06 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef2:	f383 8811 	msr	BASEPRI, r3
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	f3bf 8f4f 	dsb	sy
 8005efe:	603b      	str	r3, [r7, #0]
}
 8005f00:	bf00      	nop
 8005f02:	bf00      	nop
 8005f04:	e7fd      	b.n	8005f02 <xTaskIncrementTick+0x46>
 8005f06:	4b41      	ldr	r3, [pc, #260]	@ (800600c <xTaskIncrementTick+0x150>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	60fb      	str	r3, [r7, #12]
 8005f0c:	4b40      	ldr	r3, [pc, #256]	@ (8006010 <xTaskIncrementTick+0x154>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a3e      	ldr	r2, [pc, #248]	@ (800600c <xTaskIncrementTick+0x150>)
 8005f12:	6013      	str	r3, [r2, #0]
 8005f14:	4a3e      	ldr	r2, [pc, #248]	@ (8006010 <xTaskIncrementTick+0x154>)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6013      	str	r3, [r2, #0]
 8005f1a:	4b3e      	ldr	r3, [pc, #248]	@ (8006014 <xTaskIncrementTick+0x158>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	4a3c      	ldr	r2, [pc, #240]	@ (8006014 <xTaskIncrementTick+0x158>)
 8005f22:	6013      	str	r3, [r2, #0]
 8005f24:	f000 fb76 	bl	8006614 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005f28:	4b3b      	ldr	r3, [pc, #236]	@ (8006018 <xTaskIncrementTick+0x15c>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d349      	bcc.n	8005fc6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f32:	4b36      	ldr	r3, [pc, #216]	@ (800600c <xTaskIncrementTick+0x150>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d104      	bne.n	8005f46 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f3c:	4b36      	ldr	r3, [pc, #216]	@ (8006018 <xTaskIncrementTick+0x15c>)
 8005f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f42:	601a      	str	r2, [r3, #0]
					break;
 8005f44:	e03f      	b.n	8005fc6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f46:	4b31      	ldr	r3, [pc, #196]	@ (800600c <xTaskIncrementTick+0x150>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d203      	bcs.n	8005f66 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005f5e:	4a2e      	ldr	r2, [pc, #184]	@ (8006018 <xTaskIncrementTick+0x15c>)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005f64:	e02f      	b.n	8005fc6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	3304      	adds	r3, #4
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7fe ff82 	bl	8004e74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d004      	beq.n	8005f82 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	3318      	adds	r3, #24
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7fe ff79 	bl	8004e74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f86:	4b25      	ldr	r3, [pc, #148]	@ (800601c <xTaskIncrementTick+0x160>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d903      	bls.n	8005f96 <xTaskIncrementTick+0xda>
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f92:	4a22      	ldr	r2, [pc, #136]	@ (800601c <xTaskIncrementTick+0x160>)
 8005f94:	6013      	str	r3, [r2, #0]
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4413      	add	r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4a1f      	ldr	r2, [pc, #124]	@ (8006020 <xTaskIncrementTick+0x164>)
 8005fa4:	441a      	add	r2, r3
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	3304      	adds	r3, #4
 8005faa:	4619      	mov	r1, r3
 8005fac:	4610      	mov	r0, r2
 8005fae:	f7fe ff04 	bl	8004dba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8006024 <xTaskIncrementTick+0x168>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d3b8      	bcc.n	8005f32 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fc4:	e7b5      	b.n	8005f32 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005fc6:	4b17      	ldr	r3, [pc, #92]	@ (8006024 <xTaskIncrementTick+0x168>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fcc:	4914      	ldr	r1, [pc, #80]	@ (8006020 <xTaskIncrementTick+0x164>)
 8005fce:	4613      	mov	r3, r2
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	4413      	add	r3, r2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	440b      	add	r3, r1
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d901      	bls.n	8005fe2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005fe2:	4b11      	ldr	r3, [pc, #68]	@ (8006028 <xTaskIncrementTick+0x16c>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d007      	beq.n	8005ffa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005fea:	2301      	movs	r3, #1
 8005fec:	617b      	str	r3, [r7, #20]
 8005fee:	e004      	b.n	8005ffa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800602c <xTaskIncrementTick+0x170>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	4a0d      	ldr	r2, [pc, #52]	@ (800602c <xTaskIncrementTick+0x170>)
 8005ff8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005ffa:	697b      	ldr	r3, [r7, #20]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3718      	adds	r7, #24
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	200011d0 	.word	0x200011d0
 8006008:	200011ac 	.word	0x200011ac
 800600c:	20001160 	.word	0x20001160
 8006010:	20001164 	.word	0x20001164
 8006014:	200011c0 	.word	0x200011c0
 8006018:	200011c8 	.word	0x200011c8
 800601c:	200011b0 	.word	0x200011b0
 8006020:	20000cd8 	.word	0x20000cd8
 8006024:	20000cd4 	.word	0x20000cd4
 8006028:	200011bc 	.word	0x200011bc
 800602c:	200011b8 	.word	0x200011b8

08006030 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006036:	4b28      	ldr	r3, [pc, #160]	@ (80060d8 <vTaskSwitchContext+0xa8>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800603e:	4b27      	ldr	r3, [pc, #156]	@ (80060dc <vTaskSwitchContext+0xac>)
 8006040:	2201      	movs	r2, #1
 8006042:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006044:	e042      	b.n	80060cc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006046:	4b25      	ldr	r3, [pc, #148]	@ (80060dc <vTaskSwitchContext+0xac>)
 8006048:	2200      	movs	r2, #0
 800604a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800604c:	4b24      	ldr	r3, [pc, #144]	@ (80060e0 <vTaskSwitchContext+0xb0>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	60fb      	str	r3, [r7, #12]
 8006052:	e011      	b.n	8006078 <vTaskSwitchContext+0x48>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10b      	bne.n	8006072 <vTaskSwitchContext+0x42>
	__asm volatile
 800605a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800605e:	f383 8811 	msr	BASEPRI, r3
 8006062:	f3bf 8f6f 	isb	sy
 8006066:	f3bf 8f4f 	dsb	sy
 800606a:	607b      	str	r3, [r7, #4]
}
 800606c:	bf00      	nop
 800606e:	bf00      	nop
 8006070:	e7fd      	b.n	800606e <vTaskSwitchContext+0x3e>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	3b01      	subs	r3, #1
 8006076:	60fb      	str	r3, [r7, #12]
 8006078:	491a      	ldr	r1, [pc, #104]	@ (80060e4 <vTaskSwitchContext+0xb4>)
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	4613      	mov	r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4413      	add	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	440b      	add	r3, r1
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d0e3      	beq.n	8006054 <vTaskSwitchContext+0x24>
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	4613      	mov	r3, r2
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	4413      	add	r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4a13      	ldr	r2, [pc, #76]	@ (80060e4 <vTaskSwitchContext+0xb4>)
 8006098:	4413      	add	r3, r2
 800609a:	60bb      	str	r3, [r7, #8]
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	685a      	ldr	r2, [r3, #4]
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	605a      	str	r2, [r3, #4]
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	685a      	ldr	r2, [r3, #4]
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	3308      	adds	r3, #8
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d104      	bne.n	80060bc <vTaskSwitchContext+0x8c>
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	605a      	str	r2, [r3, #4]
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	4a09      	ldr	r2, [pc, #36]	@ (80060e8 <vTaskSwitchContext+0xb8>)
 80060c4:	6013      	str	r3, [r2, #0]
 80060c6:	4a06      	ldr	r2, [pc, #24]	@ (80060e0 <vTaskSwitchContext+0xb0>)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6013      	str	r3, [r2, #0]
}
 80060cc:	bf00      	nop
 80060ce:	3714      	adds	r7, #20
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr
 80060d8:	200011d0 	.word	0x200011d0
 80060dc:	200011bc 	.word	0x200011bc
 80060e0:	200011b0 	.word	0x200011b0
 80060e4:	20000cd8 	.word	0x20000cd8
 80060e8:	20000cd4 	.word	0x20000cd4

080060ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d10b      	bne.n	8006114 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80060fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006100:	f383 8811 	msr	BASEPRI, r3
 8006104:	f3bf 8f6f 	isb	sy
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	60fb      	str	r3, [r7, #12]
}
 800610e:	bf00      	nop
 8006110:	bf00      	nop
 8006112:	e7fd      	b.n	8006110 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006114:	4b07      	ldr	r3, [pc, #28]	@ (8006134 <vTaskPlaceOnEventList+0x48>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	3318      	adds	r3, #24
 800611a:	4619      	mov	r1, r3
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f7fe fe70 	bl	8004e02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006122:	2101      	movs	r1, #1
 8006124:	6838      	ldr	r0, [r7, #0]
 8006126:	f000 fb3b 	bl	80067a0 <prvAddCurrentTaskToDelayedList>
}
 800612a:	bf00      	nop
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	20000cd4 	.word	0x20000cd4

08006138 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b086      	sub	sp, #24
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10b      	bne.n	8006162 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800614a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800614e:	f383 8811 	msr	BASEPRI, r3
 8006152:	f3bf 8f6f 	isb	sy
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	617b      	str	r3, [r7, #20]
}
 800615c:	bf00      	nop
 800615e:	bf00      	nop
 8006160:	e7fd      	b.n	800615e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8006162:	4b12      	ldr	r3, [pc, #72]	@ (80061ac <vTaskPlaceOnUnorderedEventList+0x74>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10b      	bne.n	8006182 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800616a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800616e:	f383 8811 	msr	BASEPRI, r3
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	f3bf 8f4f 	dsb	sy
 800617a:	613b      	str	r3, [r7, #16]
}
 800617c:	bf00      	nop
 800617e:	bf00      	nop
 8006180:	e7fd      	b.n	800617e <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006182:	4b0b      	ldr	r3, [pc, #44]	@ (80061b0 <vTaskPlaceOnUnorderedEventList+0x78>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800618c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800618e:	4b08      	ldr	r3, [pc, #32]	@ (80061b0 <vTaskPlaceOnUnorderedEventList+0x78>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	3318      	adds	r3, #24
 8006194:	4619      	mov	r1, r3
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f7fe fe0f 	bl	8004dba <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800619c:	2101      	movs	r1, #1
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fafe 	bl	80067a0 <prvAddCurrentTaskToDelayedList>
}
 80061a4:	bf00      	nop
 80061a6:	3718      	adds	r7, #24
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	200011d0 	.word	0x200011d0
 80061b0:	20000cd4 	.word	0x20000cd4

080061b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b086      	sub	sp, #24
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10b      	bne.n	80061de <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80061c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ca:	f383 8811 	msr	BASEPRI, r3
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f3bf 8f4f 	dsb	sy
 80061d6:	617b      	str	r3, [r7, #20]
}
 80061d8:	bf00      	nop
 80061da:	bf00      	nop
 80061dc:	e7fd      	b.n	80061da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80061de:	4b0a      	ldr	r3, [pc, #40]	@ (8006208 <vTaskPlaceOnEventListRestricted+0x54>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	3318      	adds	r3, #24
 80061e4:	4619      	mov	r1, r3
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f7fe fde7 	bl	8004dba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d002      	beq.n	80061f8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80061f2:	f04f 33ff 	mov.w	r3, #4294967295
 80061f6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80061f8:	6879      	ldr	r1, [r7, #4]
 80061fa:	68b8      	ldr	r0, [r7, #8]
 80061fc:	f000 fad0 	bl	80067a0 <prvAddCurrentTaskToDelayedList>
	}
 8006200:	bf00      	nop
 8006202:	3718      	adds	r7, #24
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	20000cd4 	.word	0x20000cd4

0800620c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b086      	sub	sp, #24
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10b      	bne.n	800623a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006226:	f383 8811 	msr	BASEPRI, r3
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	60fb      	str	r3, [r7, #12]
}
 8006234:	bf00      	nop
 8006236:	bf00      	nop
 8006238:	e7fd      	b.n	8006236 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	3318      	adds	r3, #24
 800623e:	4618      	mov	r0, r3
 8006240:	f7fe fe18 	bl	8004e74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006244:	4b1d      	ldr	r3, [pc, #116]	@ (80062bc <xTaskRemoveFromEventList+0xb0>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d11d      	bne.n	8006288 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	3304      	adds	r3, #4
 8006250:	4618      	mov	r0, r3
 8006252:	f7fe fe0f 	bl	8004e74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800625a:	4b19      	ldr	r3, [pc, #100]	@ (80062c0 <xTaskRemoveFromEventList+0xb4>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	429a      	cmp	r2, r3
 8006260:	d903      	bls.n	800626a <xTaskRemoveFromEventList+0x5e>
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006266:	4a16      	ldr	r2, [pc, #88]	@ (80062c0 <xTaskRemoveFromEventList+0xb4>)
 8006268:	6013      	str	r3, [r2, #0]
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800626e:	4613      	mov	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4413      	add	r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	4a13      	ldr	r2, [pc, #76]	@ (80062c4 <xTaskRemoveFromEventList+0xb8>)
 8006278:	441a      	add	r2, r3
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	3304      	adds	r3, #4
 800627e:	4619      	mov	r1, r3
 8006280:	4610      	mov	r0, r2
 8006282:	f7fe fd9a 	bl	8004dba <vListInsertEnd>
 8006286:	e005      	b.n	8006294 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	3318      	adds	r3, #24
 800628c:	4619      	mov	r1, r3
 800628e:	480e      	ldr	r0, [pc, #56]	@ (80062c8 <xTaskRemoveFromEventList+0xbc>)
 8006290:	f7fe fd93 	bl	8004dba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006298:	4b0c      	ldr	r3, [pc, #48]	@ (80062cc <xTaskRemoveFromEventList+0xc0>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800629e:	429a      	cmp	r2, r3
 80062a0:	d905      	bls.n	80062ae <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80062a2:	2301      	movs	r3, #1
 80062a4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80062a6:	4b0a      	ldr	r3, [pc, #40]	@ (80062d0 <xTaskRemoveFromEventList+0xc4>)
 80062a8:	2201      	movs	r2, #1
 80062aa:	601a      	str	r2, [r3, #0]
 80062ac:	e001      	b.n	80062b2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80062ae:	2300      	movs	r3, #0
 80062b0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80062b2:	697b      	ldr	r3, [r7, #20]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3718      	adds	r7, #24
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	200011d0 	.word	0x200011d0
 80062c0:	200011b0 	.word	0x200011b0
 80062c4:	20000cd8 	.word	0x20000cd8
 80062c8:	20001168 	.word	0x20001168
 80062cc:	20000cd4 	.word	0x20000cd4
 80062d0:	200011bc 	.word	0x200011bc

080062d4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b086      	sub	sp, #24
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80062de:	4b2a      	ldr	r3, [pc, #168]	@ (8006388 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10b      	bne.n	80062fe <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 80062e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ea:	f383 8811 	msr	BASEPRI, r3
 80062ee:	f3bf 8f6f 	isb	sy
 80062f2:	f3bf 8f4f 	dsb	sy
 80062f6:	613b      	str	r3, [r7, #16]
}
 80062f8:	bf00      	nop
 80062fa:	bf00      	nop
 80062fc:	e7fd      	b.n	80062fa <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d10b      	bne.n	800632c <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 8006314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006318:	f383 8811 	msr	BASEPRI, r3
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	60fb      	str	r3, [r7, #12]
}
 8006326:	bf00      	nop
 8006328:	bf00      	nop
 800632a:	e7fd      	b.n	8006328 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f7fe fda1 	bl	8004e74 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	3304      	adds	r3, #4
 8006336:	4618      	mov	r0, r3
 8006338:	f7fe fd9c 	bl	8004e74 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006340:	4b12      	ldr	r3, [pc, #72]	@ (800638c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	429a      	cmp	r2, r3
 8006346:	d903      	bls.n	8006350 <vTaskRemoveFromUnorderedEventList+0x7c>
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800634c:	4a0f      	ldr	r2, [pc, #60]	@ (800638c <vTaskRemoveFromUnorderedEventList+0xb8>)
 800634e:	6013      	str	r3, [r2, #0]
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006354:	4613      	mov	r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	4a0c      	ldr	r2, [pc, #48]	@ (8006390 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800635e:	441a      	add	r2, r3
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	3304      	adds	r3, #4
 8006364:	4619      	mov	r1, r3
 8006366:	4610      	mov	r0, r2
 8006368:	f7fe fd27 	bl	8004dba <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006370:	4b08      	ldr	r3, [pc, #32]	@ (8006394 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006376:	429a      	cmp	r2, r3
 8006378:	d902      	bls.n	8006380 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800637a:	4b07      	ldr	r3, [pc, #28]	@ (8006398 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800637c:	2201      	movs	r2, #1
 800637e:	601a      	str	r2, [r3, #0]
	}
}
 8006380:	bf00      	nop
 8006382:	3718      	adds	r7, #24
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	200011d0 	.word	0x200011d0
 800638c:	200011b0 	.word	0x200011b0
 8006390:	20000cd8 	.word	0x20000cd8
 8006394:	20000cd4 	.word	0x20000cd4
 8006398:	200011bc 	.word	0x200011bc

0800639c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80063a4:	4b06      	ldr	r3, [pc, #24]	@ (80063c0 <vTaskInternalSetTimeOutState+0x24>)
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80063ac:	4b05      	ldr	r3, [pc, #20]	@ (80063c4 <vTaskInternalSetTimeOutState+0x28>)
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	605a      	str	r2, [r3, #4]
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr
 80063c0:	200011c0 	.word	0x200011c0
 80063c4:	200011ac 	.word	0x200011ac

080063c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b088      	sub	sp, #32
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10b      	bne.n	80063f0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80063d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063dc:	f383 8811 	msr	BASEPRI, r3
 80063e0:	f3bf 8f6f 	isb	sy
 80063e4:	f3bf 8f4f 	dsb	sy
 80063e8:	613b      	str	r3, [r7, #16]
}
 80063ea:	bf00      	nop
 80063ec:	bf00      	nop
 80063ee:	e7fd      	b.n	80063ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10b      	bne.n	800640e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80063f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063fa:	f383 8811 	msr	BASEPRI, r3
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	60fb      	str	r3, [r7, #12]
}
 8006408:	bf00      	nop
 800640a:	bf00      	nop
 800640c:	e7fd      	b.n	800640a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800640e:	f000 fec3 	bl	8007198 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006412:	4b1d      	ldr	r3, [pc, #116]	@ (8006488 <xTaskCheckForTimeOut+0xc0>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	69ba      	ldr	r2, [r7, #24]
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800642a:	d102      	bne.n	8006432 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800642c:	2300      	movs	r3, #0
 800642e:	61fb      	str	r3, [r7, #28]
 8006430:	e023      	b.n	800647a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	4b15      	ldr	r3, [pc, #84]	@ (800648c <xTaskCheckForTimeOut+0xc4>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	429a      	cmp	r2, r3
 800643c:	d007      	beq.n	800644e <xTaskCheckForTimeOut+0x86>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	69ba      	ldr	r2, [r7, #24]
 8006444:	429a      	cmp	r2, r3
 8006446:	d302      	bcc.n	800644e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006448:	2301      	movs	r3, #1
 800644a:	61fb      	str	r3, [r7, #28]
 800644c:	e015      	b.n	800647a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	429a      	cmp	r2, r3
 8006456:	d20b      	bcs.n	8006470 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	1ad2      	subs	r2, r2, r3
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f7ff ff99 	bl	800639c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800646a:	2300      	movs	r3, #0
 800646c:	61fb      	str	r3, [r7, #28]
 800646e:	e004      	b.n	800647a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	2200      	movs	r2, #0
 8006474:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006476:	2301      	movs	r3, #1
 8006478:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800647a:	f000 febf 	bl	80071fc <vPortExitCritical>

	return xReturn;
 800647e:	69fb      	ldr	r3, [r7, #28]
}
 8006480:	4618      	mov	r0, r3
 8006482:	3720      	adds	r7, #32
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	200011ac 	.word	0x200011ac
 800648c:	200011c0 	.word	0x200011c0

08006490 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006490:	b480      	push	{r7}
 8006492:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006494:	4b03      	ldr	r3, [pc, #12]	@ (80064a4 <vTaskMissedYield+0x14>)
 8006496:	2201      	movs	r2, #1
 8006498:	601a      	str	r2, [r3, #0]
}
 800649a:	bf00      	nop
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	200011bc 	.word	0x200011bc

080064a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80064b0:	f000 f852 	bl	8006558 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80064b4:	4b06      	ldr	r3, [pc, #24]	@ (80064d0 <prvIdleTask+0x28>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d9f9      	bls.n	80064b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80064bc:	4b05      	ldr	r3, [pc, #20]	@ (80064d4 <prvIdleTask+0x2c>)
 80064be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064c2:	601a      	str	r2, [r3, #0]
 80064c4:	f3bf 8f4f 	dsb	sy
 80064c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80064cc:	e7f0      	b.n	80064b0 <prvIdleTask+0x8>
 80064ce:	bf00      	nop
 80064d0:	20000cd8 	.word	0x20000cd8
 80064d4:	e000ed04 	.word	0xe000ed04

080064d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064de:	2300      	movs	r3, #0
 80064e0:	607b      	str	r3, [r7, #4]
 80064e2:	e00c      	b.n	80064fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	4613      	mov	r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	4413      	add	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4a12      	ldr	r2, [pc, #72]	@ (8006538 <prvInitialiseTaskLists+0x60>)
 80064f0:	4413      	add	r3, r2
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7fe fc34 	bl	8004d60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	3301      	adds	r3, #1
 80064fc:	607b      	str	r3, [r7, #4]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2b37      	cmp	r3, #55	@ 0x37
 8006502:	d9ef      	bls.n	80064e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006504:	480d      	ldr	r0, [pc, #52]	@ (800653c <prvInitialiseTaskLists+0x64>)
 8006506:	f7fe fc2b 	bl	8004d60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800650a:	480d      	ldr	r0, [pc, #52]	@ (8006540 <prvInitialiseTaskLists+0x68>)
 800650c:	f7fe fc28 	bl	8004d60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006510:	480c      	ldr	r0, [pc, #48]	@ (8006544 <prvInitialiseTaskLists+0x6c>)
 8006512:	f7fe fc25 	bl	8004d60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006516:	480c      	ldr	r0, [pc, #48]	@ (8006548 <prvInitialiseTaskLists+0x70>)
 8006518:	f7fe fc22 	bl	8004d60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800651c:	480b      	ldr	r0, [pc, #44]	@ (800654c <prvInitialiseTaskLists+0x74>)
 800651e:	f7fe fc1f 	bl	8004d60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006522:	4b0b      	ldr	r3, [pc, #44]	@ (8006550 <prvInitialiseTaskLists+0x78>)
 8006524:	4a05      	ldr	r2, [pc, #20]	@ (800653c <prvInitialiseTaskLists+0x64>)
 8006526:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006528:	4b0a      	ldr	r3, [pc, #40]	@ (8006554 <prvInitialiseTaskLists+0x7c>)
 800652a:	4a05      	ldr	r2, [pc, #20]	@ (8006540 <prvInitialiseTaskLists+0x68>)
 800652c:	601a      	str	r2, [r3, #0]
}
 800652e:	bf00      	nop
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	20000cd8 	.word	0x20000cd8
 800653c:	20001138 	.word	0x20001138
 8006540:	2000114c 	.word	0x2000114c
 8006544:	20001168 	.word	0x20001168
 8006548:	2000117c 	.word	0x2000117c
 800654c:	20001194 	.word	0x20001194
 8006550:	20001160 	.word	0x20001160
 8006554:	20001164 	.word	0x20001164

08006558 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800655e:	e019      	b.n	8006594 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006560:	f000 fe1a 	bl	8007198 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006564:	4b10      	ldr	r3, [pc, #64]	@ (80065a8 <prvCheckTasksWaitingTermination+0x50>)
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	3304      	adds	r3, #4
 8006570:	4618      	mov	r0, r3
 8006572:	f7fe fc7f 	bl	8004e74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006576:	4b0d      	ldr	r3, [pc, #52]	@ (80065ac <prvCheckTasksWaitingTermination+0x54>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	3b01      	subs	r3, #1
 800657c:	4a0b      	ldr	r2, [pc, #44]	@ (80065ac <prvCheckTasksWaitingTermination+0x54>)
 800657e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006580:	4b0b      	ldr	r3, [pc, #44]	@ (80065b0 <prvCheckTasksWaitingTermination+0x58>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	3b01      	subs	r3, #1
 8006586:	4a0a      	ldr	r2, [pc, #40]	@ (80065b0 <prvCheckTasksWaitingTermination+0x58>)
 8006588:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800658a:	f000 fe37 	bl	80071fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f810 	bl	80065b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006594:	4b06      	ldr	r3, [pc, #24]	@ (80065b0 <prvCheckTasksWaitingTermination+0x58>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1e1      	bne.n	8006560 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800659c:	bf00      	nop
 800659e:	bf00      	nop
 80065a0:	3708      	adds	r7, #8
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	2000117c 	.word	0x2000117c
 80065ac:	200011a8 	.word	0x200011a8
 80065b0:	20001190 	.word	0x20001190

080065b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d108      	bne.n	80065d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ca:	4618      	mov	r0, r3
 80065cc:	f000 ffd4 	bl	8007578 <vPortFree>
				vPortFree( pxTCB );
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 ffd1 	bl	8007578 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80065d6:	e019      	b.n	800660c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d103      	bne.n	80065ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 ffc8 	bl	8007578 <vPortFree>
	}
 80065e8:	e010      	b.n	800660c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d00b      	beq.n	800660c <prvDeleteTCB+0x58>
	__asm volatile
 80065f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f8:	f383 8811 	msr	BASEPRI, r3
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	60fb      	str	r3, [r7, #12]
}
 8006606:	bf00      	nop
 8006608:	bf00      	nop
 800660a:	e7fd      	b.n	8006608 <prvDeleteTCB+0x54>
	}
 800660c:	bf00      	nop
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800661a:	4b0c      	ldr	r3, [pc, #48]	@ (800664c <prvResetNextTaskUnblockTime+0x38>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d104      	bne.n	800662e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006624:	4b0a      	ldr	r3, [pc, #40]	@ (8006650 <prvResetNextTaskUnblockTime+0x3c>)
 8006626:	f04f 32ff 	mov.w	r2, #4294967295
 800662a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800662c:	e008      	b.n	8006640 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800662e:	4b07      	ldr	r3, [pc, #28]	@ (800664c <prvResetNextTaskUnblockTime+0x38>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	4a04      	ldr	r2, [pc, #16]	@ (8006650 <prvResetNextTaskUnblockTime+0x3c>)
 800663e:	6013      	str	r3, [r2, #0]
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr
 800664c:	20001160 	.word	0x20001160
 8006650:	200011c8 	.word	0x200011c8

08006654 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800665a:	4b0b      	ldr	r3, [pc, #44]	@ (8006688 <xTaskGetSchedulerState+0x34>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d102      	bne.n	8006668 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006662:	2301      	movs	r3, #1
 8006664:	607b      	str	r3, [r7, #4]
 8006666:	e008      	b.n	800667a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006668:	4b08      	ldr	r3, [pc, #32]	@ (800668c <xTaskGetSchedulerState+0x38>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d102      	bne.n	8006676 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006670:	2302      	movs	r3, #2
 8006672:	607b      	str	r3, [r7, #4]
 8006674:	e001      	b.n	800667a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006676:	2300      	movs	r3, #0
 8006678:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800667a:	687b      	ldr	r3, [r7, #4]
	}
 800667c:	4618      	mov	r0, r3
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr
 8006688:	200011b4 	.word	0x200011b4
 800668c:	200011d0 	.word	0x200011d0

08006690 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800669c:	2300      	movs	r3, #0
 800669e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d058      	beq.n	8006758 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80066a6:	4b2f      	ldr	r3, [pc, #188]	@ (8006764 <xTaskPriorityDisinherit+0xd4>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d00b      	beq.n	80066c8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80066b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b4:	f383 8811 	msr	BASEPRI, r3
 80066b8:	f3bf 8f6f 	isb	sy
 80066bc:	f3bf 8f4f 	dsb	sy
 80066c0:	60fb      	str	r3, [r7, #12]
}
 80066c2:	bf00      	nop
 80066c4:	bf00      	nop
 80066c6:	e7fd      	b.n	80066c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10b      	bne.n	80066e8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80066d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	60bb      	str	r3, [r7, #8]
}
 80066e2:	bf00      	nop
 80066e4:	bf00      	nop
 80066e6:	e7fd      	b.n	80066e4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066ec:	1e5a      	subs	r2, r3, #1
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d02c      	beq.n	8006758 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006702:	2b00      	cmp	r3, #0
 8006704:	d128      	bne.n	8006758 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	3304      	adds	r3, #4
 800670a:	4618      	mov	r0, r3
 800670c:	f7fe fbb2 	bl	8004e74 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800671c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006728:	4b0f      	ldr	r3, [pc, #60]	@ (8006768 <xTaskPriorityDisinherit+0xd8>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	429a      	cmp	r2, r3
 800672e:	d903      	bls.n	8006738 <xTaskPriorityDisinherit+0xa8>
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006734:	4a0c      	ldr	r2, [pc, #48]	@ (8006768 <xTaskPriorityDisinherit+0xd8>)
 8006736:	6013      	str	r3, [r2, #0]
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800673c:	4613      	mov	r3, r2
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4a09      	ldr	r2, [pc, #36]	@ (800676c <xTaskPriorityDisinherit+0xdc>)
 8006746:	441a      	add	r2, r3
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	3304      	adds	r3, #4
 800674c:	4619      	mov	r1, r3
 800674e:	4610      	mov	r0, r2
 8006750:	f7fe fb33 	bl	8004dba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006754:	2301      	movs	r3, #1
 8006756:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006758:	697b      	ldr	r3, [r7, #20]
	}
 800675a:	4618      	mov	r0, r3
 800675c:	3718      	adds	r7, #24
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	20000cd4 	.word	0x20000cd4
 8006768:	200011b0 	.word	0x200011b0
 800676c:	20000cd8 	.word	0x20000cd8

08006770 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8006776:	4b09      	ldr	r3, [pc, #36]	@ (800679c <uxTaskResetEventItemValue+0x2c>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	699b      	ldr	r3, [r3, #24]
 800677c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800677e:	4b07      	ldr	r3, [pc, #28]	@ (800679c <uxTaskResetEventItemValue+0x2c>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006784:	4b05      	ldr	r3, [pc, #20]	@ (800679c <uxTaskResetEventItemValue+0x2c>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800678c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800678e:	687b      	ldr	r3, [r7, #4]
}
 8006790:	4618      	mov	r0, r3
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr
 800679c:	20000cd4 	.word	0x20000cd4

080067a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80067aa:	4b21      	ldr	r3, [pc, #132]	@ (8006830 <prvAddCurrentTaskToDelayedList+0x90>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067b0:	4b20      	ldr	r3, [pc, #128]	@ (8006834 <prvAddCurrentTaskToDelayedList+0x94>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	3304      	adds	r3, #4
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7fe fb5c 	bl	8004e74 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c2:	d10a      	bne.n	80067da <prvAddCurrentTaskToDelayedList+0x3a>
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d007      	beq.n	80067da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067ca:	4b1a      	ldr	r3, [pc, #104]	@ (8006834 <prvAddCurrentTaskToDelayedList+0x94>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	3304      	adds	r3, #4
 80067d0:	4619      	mov	r1, r3
 80067d2:	4819      	ldr	r0, [pc, #100]	@ (8006838 <prvAddCurrentTaskToDelayedList+0x98>)
 80067d4:	f7fe faf1 	bl	8004dba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80067d8:	e026      	b.n	8006828 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4413      	add	r3, r2
 80067e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80067e2:	4b14      	ldr	r3, [pc, #80]	@ (8006834 <prvAddCurrentTaskToDelayedList+0x94>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68ba      	ldr	r2, [r7, #8]
 80067e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80067ea:	68ba      	ldr	r2, [r7, #8]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d209      	bcs.n	8006806 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067f2:	4b12      	ldr	r3, [pc, #72]	@ (800683c <prvAddCurrentTaskToDelayedList+0x9c>)
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	4b0f      	ldr	r3, [pc, #60]	@ (8006834 <prvAddCurrentTaskToDelayedList+0x94>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	3304      	adds	r3, #4
 80067fc:	4619      	mov	r1, r3
 80067fe:	4610      	mov	r0, r2
 8006800:	f7fe faff 	bl	8004e02 <vListInsert>
}
 8006804:	e010      	b.n	8006828 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006806:	4b0e      	ldr	r3, [pc, #56]	@ (8006840 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	4b0a      	ldr	r3, [pc, #40]	@ (8006834 <prvAddCurrentTaskToDelayedList+0x94>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	3304      	adds	r3, #4
 8006810:	4619      	mov	r1, r3
 8006812:	4610      	mov	r0, r2
 8006814:	f7fe faf5 	bl	8004e02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006818:	4b0a      	ldr	r3, [pc, #40]	@ (8006844 <prvAddCurrentTaskToDelayedList+0xa4>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	429a      	cmp	r2, r3
 8006820:	d202      	bcs.n	8006828 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006822:	4a08      	ldr	r2, [pc, #32]	@ (8006844 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	6013      	str	r3, [r2, #0]
}
 8006828:	bf00      	nop
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	200011ac 	.word	0x200011ac
 8006834:	20000cd4 	.word	0x20000cd4
 8006838:	20001194 	.word	0x20001194
 800683c:	20001164 	.word	0x20001164
 8006840:	20001160 	.word	0x20001160
 8006844:	200011c8 	.word	0x200011c8

08006848 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b08a      	sub	sp, #40	@ 0x28
 800684c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800684e:	2300      	movs	r3, #0
 8006850:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006852:	f000 fb13 	bl	8006e7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006856:	4b1d      	ldr	r3, [pc, #116]	@ (80068cc <xTimerCreateTimerTask+0x84>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d021      	beq.n	80068a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800685e:	2300      	movs	r3, #0
 8006860:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006862:	2300      	movs	r3, #0
 8006864:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006866:	1d3a      	adds	r2, r7, #4
 8006868:	f107 0108 	add.w	r1, r7, #8
 800686c:	f107 030c 	add.w	r3, r7, #12
 8006870:	4618      	mov	r0, r3
 8006872:	f7fd ffe7 	bl	8004844 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006876:	6879      	ldr	r1, [r7, #4]
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	9202      	str	r2, [sp, #8]
 800687e:	9301      	str	r3, [sp, #4]
 8006880:	2302      	movs	r3, #2
 8006882:	9300      	str	r3, [sp, #0]
 8006884:	2300      	movs	r3, #0
 8006886:	460a      	mov	r2, r1
 8006888:	4911      	ldr	r1, [pc, #68]	@ (80068d0 <xTimerCreateTimerTask+0x88>)
 800688a:	4812      	ldr	r0, [pc, #72]	@ (80068d4 <xTimerCreateTimerTask+0x8c>)
 800688c:	f7ff f816 	bl	80058bc <xTaskCreateStatic>
 8006890:	4603      	mov	r3, r0
 8006892:	4a11      	ldr	r2, [pc, #68]	@ (80068d8 <xTimerCreateTimerTask+0x90>)
 8006894:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006896:	4b10      	ldr	r3, [pc, #64]	@ (80068d8 <xTimerCreateTimerTask+0x90>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d001      	beq.n	80068a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800689e:	2301      	movs	r3, #1
 80068a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10b      	bne.n	80068c0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80068a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ac:	f383 8811 	msr	BASEPRI, r3
 80068b0:	f3bf 8f6f 	isb	sy
 80068b4:	f3bf 8f4f 	dsb	sy
 80068b8:	613b      	str	r3, [r7, #16]
}
 80068ba:	bf00      	nop
 80068bc:	bf00      	nop
 80068be:	e7fd      	b.n	80068bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80068c0:	697b      	ldr	r3, [r7, #20]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3718      	adds	r7, #24
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	20001204 	.word	0x20001204
 80068d0:	080078f4 	.word	0x080078f4
 80068d4:	08006a15 	.word	0x08006a15
 80068d8:	20001208 	.word	0x20001208

080068dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b08a      	sub	sp, #40	@ 0x28
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
 80068e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80068ea:	2300      	movs	r3, #0
 80068ec:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10b      	bne.n	800690c <xTimerGenericCommand+0x30>
	__asm volatile
 80068f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f8:	f383 8811 	msr	BASEPRI, r3
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	623b      	str	r3, [r7, #32]
}
 8006906:	bf00      	nop
 8006908:	bf00      	nop
 800690a:	e7fd      	b.n	8006908 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800690c:	4b19      	ldr	r3, [pc, #100]	@ (8006974 <xTimerGenericCommand+0x98>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d02a      	beq.n	800696a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2b05      	cmp	r3, #5
 8006924:	dc18      	bgt.n	8006958 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006926:	f7ff fe95 	bl	8006654 <xTaskGetSchedulerState>
 800692a:	4603      	mov	r3, r0
 800692c:	2b02      	cmp	r3, #2
 800692e:	d109      	bne.n	8006944 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006930:	4b10      	ldr	r3, [pc, #64]	@ (8006974 <xTimerGenericCommand+0x98>)
 8006932:	6818      	ldr	r0, [r3, #0]
 8006934:	f107 0110 	add.w	r1, r7, #16
 8006938:	2300      	movs	r3, #0
 800693a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800693c:	f7fe fbce 	bl	80050dc <xQueueGenericSend>
 8006940:	6278      	str	r0, [r7, #36]	@ 0x24
 8006942:	e012      	b.n	800696a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006944:	4b0b      	ldr	r3, [pc, #44]	@ (8006974 <xTimerGenericCommand+0x98>)
 8006946:	6818      	ldr	r0, [r3, #0]
 8006948:	f107 0110 	add.w	r1, r7, #16
 800694c:	2300      	movs	r3, #0
 800694e:	2200      	movs	r2, #0
 8006950:	f7fe fbc4 	bl	80050dc <xQueueGenericSend>
 8006954:	6278      	str	r0, [r7, #36]	@ 0x24
 8006956:	e008      	b.n	800696a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006958:	4b06      	ldr	r3, [pc, #24]	@ (8006974 <xTimerGenericCommand+0x98>)
 800695a:	6818      	ldr	r0, [r3, #0]
 800695c:	f107 0110 	add.w	r1, r7, #16
 8006960:	2300      	movs	r3, #0
 8006962:	683a      	ldr	r2, [r7, #0]
 8006964:	f7fe fcbc 	bl	80052e0 <xQueueGenericSendFromISR>
 8006968:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800696a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800696c:	4618      	mov	r0, r3
 800696e:	3728      	adds	r7, #40	@ 0x28
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	20001204 	.word	0x20001204

08006978 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b088      	sub	sp, #32
 800697c:	af02      	add	r7, sp, #8
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006982:	4b23      	ldr	r3, [pc, #140]	@ (8006a10 <prvProcessExpiredTimer+0x98>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	3304      	adds	r3, #4
 8006990:	4618      	mov	r0, r3
 8006992:	f7fe fa6f 	bl	8004e74 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800699c:	f003 0304 	and.w	r3, r3, #4
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d023      	beq.n	80069ec <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	699a      	ldr	r2, [r3, #24]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	18d1      	adds	r1, r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	683a      	ldr	r2, [r7, #0]
 80069b0:	6978      	ldr	r0, [r7, #20]
 80069b2:	f000 f8d5 	bl	8006b60 <prvInsertTimerInActiveList>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d020      	beq.n	80069fe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80069bc:	2300      	movs	r3, #0
 80069be:	9300      	str	r3, [sp, #0]
 80069c0:	2300      	movs	r3, #0
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	2100      	movs	r1, #0
 80069c6:	6978      	ldr	r0, [r7, #20]
 80069c8:	f7ff ff88 	bl	80068dc <xTimerGenericCommand>
 80069cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d114      	bne.n	80069fe <prvProcessExpiredTimer+0x86>
	__asm volatile
 80069d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d8:	f383 8811 	msr	BASEPRI, r3
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	60fb      	str	r3, [r7, #12]
}
 80069e6:	bf00      	nop
 80069e8:	bf00      	nop
 80069ea:	e7fd      	b.n	80069e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069f2:	f023 0301 	bic.w	r3, r3, #1
 80069f6:	b2da      	uxtb	r2, r3
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	6978      	ldr	r0, [r7, #20]
 8006a04:	4798      	blx	r3
}
 8006a06:	bf00      	nop
 8006a08:	3718      	adds	r7, #24
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	200011fc 	.word	0x200011fc

08006a14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a1c:	f107 0308 	add.w	r3, r7, #8
 8006a20:	4618      	mov	r0, r3
 8006a22:	f000 f859 	bl	8006ad8 <prvGetNextExpireTime>
 8006a26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f000 f805 	bl	8006a3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006a32:	f000 f8d7 	bl	8006be4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a36:	bf00      	nop
 8006a38:	e7f0      	b.n	8006a1c <prvTimerTask+0x8>
	...

08006a3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006a46:	f7ff f97d 	bl	8005d44 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a4a:	f107 0308 	add.w	r3, r7, #8
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 f866 	bl	8006b20 <prvSampleTimeNow>
 8006a54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d130      	bne.n	8006abe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10a      	bne.n	8006a78 <prvProcessTimerOrBlockTask+0x3c>
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d806      	bhi.n	8006a78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006a6a:	f7ff f979 	bl	8005d60 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a6e:	68f9      	ldr	r1, [r7, #12]
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7ff ff81 	bl	8006978 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006a76:	e024      	b.n	8006ac2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d008      	beq.n	8006a90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006a7e:	4b13      	ldr	r3, [pc, #76]	@ (8006acc <prvProcessTimerOrBlockTask+0x90>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d101      	bne.n	8006a8c <prvProcessTimerOrBlockTask+0x50>
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e000      	b.n	8006a8e <prvProcessTimerOrBlockTask+0x52>
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006a90:	4b0f      	ldr	r3, [pc, #60]	@ (8006ad0 <prvProcessTimerOrBlockTask+0x94>)
 8006a92:	6818      	ldr	r0, [r3, #0]
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	f7fe fed9 	bl	8005854 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006aa2:	f7ff f95d 	bl	8005d60 <xTaskResumeAll>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10a      	bne.n	8006ac2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006aac:	4b09      	ldr	r3, [pc, #36]	@ (8006ad4 <prvProcessTimerOrBlockTask+0x98>)
 8006aae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ab2:	601a      	str	r2, [r3, #0]
 8006ab4:	f3bf 8f4f 	dsb	sy
 8006ab8:	f3bf 8f6f 	isb	sy
}
 8006abc:	e001      	b.n	8006ac2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006abe:	f7ff f94f 	bl	8005d60 <xTaskResumeAll>
}
 8006ac2:	bf00      	nop
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	20001200 	.word	0x20001200
 8006ad0:	20001204 	.word	0x20001204
 8006ad4:	e000ed04 	.word	0xe000ed04

08006ad8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8006b1c <prvGetNextExpireTime+0x44>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d101      	bne.n	8006aee <prvGetNextExpireTime+0x16>
 8006aea:	2201      	movs	r2, #1
 8006aec:	e000      	b.n	8006af0 <prvGetNextExpireTime+0x18>
 8006aee:	2200      	movs	r2, #0
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d105      	bne.n	8006b08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006afc:	4b07      	ldr	r3, [pc, #28]	@ (8006b1c <prvGetNextExpireTime+0x44>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	60fb      	str	r3, [r7, #12]
 8006b06:	e001      	b.n	8006b0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3714      	adds	r7, #20
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	200011fc 	.word	0x200011fc

08006b20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006b28:	f7ff f9b8 	bl	8005e9c <xTaskGetTickCount>
 8006b2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8006b5c <prvSampleTimeNow+0x3c>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d205      	bcs.n	8006b44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006b38:	f000 f93a 	bl	8006db0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	601a      	str	r2, [r3, #0]
 8006b42:	e002      	b.n	8006b4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006b4a:	4a04      	ldr	r2, [pc, #16]	@ (8006b5c <prvSampleTimeNow+0x3c>)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006b50:	68fb      	ldr	r3, [r7, #12]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	2000120c 	.word	0x2000120c

08006b60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b086      	sub	sp, #24
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
 8006b6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d812      	bhi.n	8006bac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	1ad2      	subs	r2, r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d302      	bcc.n	8006b9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006b94:	2301      	movs	r3, #1
 8006b96:	617b      	str	r3, [r7, #20]
 8006b98:	e01b      	b.n	8006bd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b9a:	4b10      	ldr	r3, [pc, #64]	@ (8006bdc <prvInsertTimerInActiveList+0x7c>)
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	3304      	adds	r3, #4
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	4610      	mov	r0, r2
 8006ba6:	f7fe f92c 	bl	8004e02 <vListInsert>
 8006baa:	e012      	b.n	8006bd2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d206      	bcs.n	8006bc2 <prvInsertTimerInActiveList+0x62>
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d302      	bcc.n	8006bc2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	617b      	str	r3, [r7, #20]
 8006bc0:	e007      	b.n	8006bd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006bc2:	4b07      	ldr	r3, [pc, #28]	@ (8006be0 <prvInsertTimerInActiveList+0x80>)
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	3304      	adds	r3, #4
 8006bca:	4619      	mov	r1, r3
 8006bcc:	4610      	mov	r0, r2
 8006bce:	f7fe f918 	bl	8004e02 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006bd2:	697b      	ldr	r3, [r7, #20]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3718      	adds	r7, #24
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	20001200 	.word	0x20001200
 8006be0:	200011fc 	.word	0x200011fc

08006be4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b08e      	sub	sp, #56	@ 0x38
 8006be8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006bea:	e0ce      	b.n	8006d8a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	da19      	bge.n	8006c26 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006bf2:	1d3b      	adds	r3, r7, #4
 8006bf4:	3304      	adds	r3, #4
 8006bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10b      	bne.n	8006c16 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c02:	f383 8811 	msr	BASEPRI, r3
 8006c06:	f3bf 8f6f 	isb	sy
 8006c0a:	f3bf 8f4f 	dsb	sy
 8006c0e:	61fb      	str	r3, [r7, #28]
}
 8006c10:	bf00      	nop
 8006c12:	bf00      	nop
 8006c14:	e7fd      	b.n	8006c12 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c1c:	6850      	ldr	r0, [r2, #4]
 8006c1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c20:	6892      	ldr	r2, [r2, #8]
 8006c22:	4611      	mov	r1, r2
 8006c24:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f2c0 80ae 	blt.w	8006d8a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d004      	beq.n	8006c44 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c3c:	3304      	adds	r3, #4
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7fe f918 	bl	8004e74 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c44:	463b      	mov	r3, r7
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7ff ff6a 	bl	8006b20 <prvSampleTimeNow>
 8006c4c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2b09      	cmp	r3, #9
 8006c52:	f200 8097 	bhi.w	8006d84 <prvProcessReceivedCommands+0x1a0>
 8006c56:	a201      	add	r2, pc, #4	@ (adr r2, 8006c5c <prvProcessReceivedCommands+0x78>)
 8006c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c5c:	08006c85 	.word	0x08006c85
 8006c60:	08006c85 	.word	0x08006c85
 8006c64:	08006c85 	.word	0x08006c85
 8006c68:	08006cfb 	.word	0x08006cfb
 8006c6c:	08006d0f 	.word	0x08006d0f
 8006c70:	08006d5b 	.word	0x08006d5b
 8006c74:	08006c85 	.word	0x08006c85
 8006c78:	08006c85 	.word	0x08006c85
 8006c7c:	08006cfb 	.word	0x08006cfb
 8006c80:	08006d0f 	.word	0x08006d0f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c8a:	f043 0301 	orr.w	r3, r3, #1
 8006c8e:	b2da      	uxtb	r2, r3
 8006c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c96:	68ba      	ldr	r2, [r7, #8]
 8006c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	18d1      	adds	r1, r2, r3
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ca2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ca4:	f7ff ff5c 	bl	8006b60 <prvInsertTimerInActiveList>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d06c      	beq.n	8006d88 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cb4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cbc:	f003 0304 	and.w	r3, r3, #4
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d061      	beq.n	8006d88 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	441a      	add	r2, r3
 8006ccc:	2300      	movs	r3, #0
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cd6:	f7ff fe01 	bl	80068dc <xTimerGenericCommand>
 8006cda:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d152      	bne.n	8006d88 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	61bb      	str	r3, [r7, #24]
}
 8006cf4:	bf00      	nop
 8006cf6:	bf00      	nop
 8006cf8:	e7fd      	b.n	8006cf6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cfc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d00:	f023 0301 	bic.w	r3, r3, #1
 8006d04:	b2da      	uxtb	r2, r3
 8006d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d08:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006d0c:	e03d      	b.n	8006d8a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d14:	f043 0301 	orr.w	r3, r3, #1
 8006d18:	b2da      	uxtb	r2, r3
 8006d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d1c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d24:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10b      	bne.n	8006d46 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d32:	f383 8811 	msr	BASEPRI, r3
 8006d36:	f3bf 8f6f 	isb	sy
 8006d3a:	f3bf 8f4f 	dsb	sy
 8006d3e:	617b      	str	r3, [r7, #20]
}
 8006d40:	bf00      	nop
 8006d42:	bf00      	nop
 8006d44:	e7fd      	b.n	8006d42 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d48:	699a      	ldr	r2, [r3, #24]
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4c:	18d1      	adds	r1, r2, r3
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d54:	f7ff ff04 	bl	8006b60 <prvInsertTimerInActiveList>
					break;
 8006d58:	e017      	b.n	8006d8a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d60:	f003 0302 	and.w	r3, r3, #2
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d103      	bne.n	8006d70 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006d68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d6a:	f000 fc05 	bl	8007578 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006d6e:	e00c      	b.n	8006d8a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d72:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d76:	f023 0301 	bic.w	r3, r3, #1
 8006d7a:	b2da      	uxtb	r2, r3
 8006d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d7e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006d82:	e002      	b.n	8006d8a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006d84:	bf00      	nop
 8006d86:	e000      	b.n	8006d8a <prvProcessReceivedCommands+0x1a6>
					break;
 8006d88:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d8a:	4b08      	ldr	r3, [pc, #32]	@ (8006dac <prvProcessReceivedCommands+0x1c8>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	1d39      	adds	r1, r7, #4
 8006d90:	2200      	movs	r2, #0
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7fe fb42 	bl	800541c <xQueueReceive>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f47f af26 	bne.w	8006bec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006da0:	bf00      	nop
 8006da2:	bf00      	nop
 8006da4:	3730      	adds	r7, #48	@ 0x30
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	20001204 	.word	0x20001204

08006db0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b088      	sub	sp, #32
 8006db4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006db6:	e049      	b.n	8006e4c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006db8:	4b2e      	ldr	r3, [pc, #184]	@ (8006e74 <prvSwitchTimerLists+0xc4>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dc2:	4b2c      	ldr	r3, [pc, #176]	@ (8006e74 <prvSwitchTimerLists+0xc4>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	3304      	adds	r3, #4
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7fe f84f 	bl	8004e74 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006de4:	f003 0304 	and.w	r3, r3, #4
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d02f      	beq.n	8006e4c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	693a      	ldr	r2, [r7, #16]
 8006df2:	4413      	add	r3, r2
 8006df4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d90e      	bls.n	8006e1c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	68ba      	ldr	r2, [r7, #8]
 8006e02:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8006e74 <prvSwitchTimerLists+0xc4>)
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	3304      	adds	r3, #4
 8006e12:	4619      	mov	r1, r3
 8006e14:	4610      	mov	r0, r2
 8006e16:	f7fd fff4 	bl	8004e02 <vListInsert>
 8006e1a:	e017      	b.n	8006e4c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	9300      	str	r3, [sp, #0]
 8006e20:	2300      	movs	r3, #0
 8006e22:	693a      	ldr	r2, [r7, #16]
 8006e24:	2100      	movs	r1, #0
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	f7ff fd58 	bl	80068dc <xTimerGenericCommand>
 8006e2c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d10b      	bne.n	8006e4c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e38:	f383 8811 	msr	BASEPRI, r3
 8006e3c:	f3bf 8f6f 	isb	sy
 8006e40:	f3bf 8f4f 	dsb	sy
 8006e44:	603b      	str	r3, [r7, #0]
}
 8006e46:	bf00      	nop
 8006e48:	bf00      	nop
 8006e4a:	e7fd      	b.n	8006e48 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e4c:	4b09      	ldr	r3, [pc, #36]	@ (8006e74 <prvSwitchTimerLists+0xc4>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1b0      	bne.n	8006db8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006e56:	4b07      	ldr	r3, [pc, #28]	@ (8006e74 <prvSwitchTimerLists+0xc4>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006e5c:	4b06      	ldr	r3, [pc, #24]	@ (8006e78 <prvSwitchTimerLists+0xc8>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a04      	ldr	r2, [pc, #16]	@ (8006e74 <prvSwitchTimerLists+0xc4>)
 8006e62:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006e64:	4a04      	ldr	r2, [pc, #16]	@ (8006e78 <prvSwitchTimerLists+0xc8>)
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	6013      	str	r3, [r2, #0]
}
 8006e6a:	bf00      	nop
 8006e6c:	3718      	adds	r7, #24
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	200011fc 	.word	0x200011fc
 8006e78:	20001200 	.word	0x20001200

08006e7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e82:	f000 f989 	bl	8007198 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e86:	4b15      	ldr	r3, [pc, #84]	@ (8006edc <prvCheckForValidListAndQueue+0x60>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d120      	bne.n	8006ed0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006e8e:	4814      	ldr	r0, [pc, #80]	@ (8006ee0 <prvCheckForValidListAndQueue+0x64>)
 8006e90:	f7fd ff66 	bl	8004d60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e94:	4813      	ldr	r0, [pc, #76]	@ (8006ee4 <prvCheckForValidListAndQueue+0x68>)
 8006e96:	f7fd ff63 	bl	8004d60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006e9a:	4b13      	ldr	r3, [pc, #76]	@ (8006ee8 <prvCheckForValidListAndQueue+0x6c>)
 8006e9c:	4a10      	ldr	r2, [pc, #64]	@ (8006ee0 <prvCheckForValidListAndQueue+0x64>)
 8006e9e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006ea0:	4b12      	ldr	r3, [pc, #72]	@ (8006eec <prvCheckForValidListAndQueue+0x70>)
 8006ea2:	4a10      	ldr	r2, [pc, #64]	@ (8006ee4 <prvCheckForValidListAndQueue+0x68>)
 8006ea4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	9300      	str	r3, [sp, #0]
 8006eaa:	4b11      	ldr	r3, [pc, #68]	@ (8006ef0 <prvCheckForValidListAndQueue+0x74>)
 8006eac:	4a11      	ldr	r2, [pc, #68]	@ (8006ef4 <prvCheckForValidListAndQueue+0x78>)
 8006eae:	2110      	movs	r1, #16
 8006eb0:	200a      	movs	r0, #10
 8006eb2:	f7fe f873 	bl	8004f9c <xQueueGenericCreateStatic>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	4a08      	ldr	r2, [pc, #32]	@ (8006edc <prvCheckForValidListAndQueue+0x60>)
 8006eba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006ebc:	4b07      	ldr	r3, [pc, #28]	@ (8006edc <prvCheckForValidListAndQueue+0x60>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d005      	beq.n	8006ed0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006ec4:	4b05      	ldr	r3, [pc, #20]	@ (8006edc <prvCheckForValidListAndQueue+0x60>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	490b      	ldr	r1, [pc, #44]	@ (8006ef8 <prvCheckForValidListAndQueue+0x7c>)
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7fe fc98 	bl	8005800 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ed0:	f000 f994 	bl	80071fc <vPortExitCritical>
}
 8006ed4:	bf00      	nop
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	20001204 	.word	0x20001204
 8006ee0:	200011d4 	.word	0x200011d4
 8006ee4:	200011e8 	.word	0x200011e8
 8006ee8:	200011fc 	.word	0x200011fc
 8006eec:	20001200 	.word	0x20001200
 8006ef0:	200012b0 	.word	0x200012b0
 8006ef4:	20001210 	.word	0x20001210
 8006ef8:	080078fc 	.word	0x080078fc

08006efc <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b08a      	sub	sp, #40	@ 0x28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
 8006f08:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8006f0a:	f06f 0301 	mvn.w	r3, #1
 8006f0e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006f1c:	4b06      	ldr	r3, [pc, #24]	@ (8006f38 <xTimerPendFunctionCallFromISR+0x3c>)
 8006f1e:	6818      	ldr	r0, [r3, #0]
 8006f20:	f107 0114 	add.w	r1, r7, #20
 8006f24:	2300      	movs	r3, #0
 8006f26:	683a      	ldr	r2, [r7, #0]
 8006f28:	f7fe f9da 	bl	80052e0 <xQueueGenericSendFromISR>
 8006f2c:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3728      	adds	r7, #40	@ 0x28
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	20001204 	.word	0x20001204

08006f3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	3b04      	subs	r3, #4
 8006f4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006f54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	3b04      	subs	r3, #4
 8006f5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	f023 0201 	bic.w	r2, r3, #1
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	3b04      	subs	r3, #4
 8006f6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f6c:	4a0c      	ldr	r2, [pc, #48]	@ (8006fa0 <pxPortInitialiseStack+0x64>)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	3b14      	subs	r3, #20
 8006f76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	3b04      	subs	r3, #4
 8006f82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f06f 0202 	mvn.w	r2, #2
 8006f8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	3b20      	subs	r3, #32
 8006f90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f92:	68fb      	ldr	r3, [r7, #12]
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3714      	adds	r7, #20
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr
 8006fa0:	08006fa5 	.word	0x08006fa5

08006fa4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006faa:	2300      	movs	r3, #0
 8006fac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006fae:	4b13      	ldr	r3, [pc, #76]	@ (8006ffc <prvTaskExitError+0x58>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb6:	d00b      	beq.n	8006fd0 <prvTaskExitError+0x2c>
	__asm volatile
 8006fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fbc:	f383 8811 	msr	BASEPRI, r3
 8006fc0:	f3bf 8f6f 	isb	sy
 8006fc4:	f3bf 8f4f 	dsb	sy
 8006fc8:	60fb      	str	r3, [r7, #12]
}
 8006fca:	bf00      	nop
 8006fcc:	bf00      	nop
 8006fce:	e7fd      	b.n	8006fcc <prvTaskExitError+0x28>
	__asm volatile
 8006fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd4:	f383 8811 	msr	BASEPRI, r3
 8006fd8:	f3bf 8f6f 	isb	sy
 8006fdc:	f3bf 8f4f 	dsb	sy
 8006fe0:	60bb      	str	r3, [r7, #8]
}
 8006fe2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006fe4:	bf00      	nop
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d0fc      	beq.n	8006fe6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006fec:	bf00      	nop
 8006fee:	bf00      	nop
 8006ff0:	3714      	adds	r7, #20
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	20000010 	.word	0x20000010

08007000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007000:	4b07      	ldr	r3, [pc, #28]	@ (8007020 <pxCurrentTCBConst2>)
 8007002:	6819      	ldr	r1, [r3, #0]
 8007004:	6808      	ldr	r0, [r1, #0]
 8007006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800700a:	f380 8809 	msr	PSP, r0
 800700e:	f3bf 8f6f 	isb	sy
 8007012:	f04f 0000 	mov.w	r0, #0
 8007016:	f380 8811 	msr	BASEPRI, r0
 800701a:	4770      	bx	lr
 800701c:	f3af 8000 	nop.w

08007020 <pxCurrentTCBConst2>:
 8007020:	20000cd4 	.word	0x20000cd4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007024:	bf00      	nop
 8007026:	bf00      	nop

08007028 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007028:	4808      	ldr	r0, [pc, #32]	@ (800704c <prvPortStartFirstTask+0x24>)
 800702a:	6800      	ldr	r0, [r0, #0]
 800702c:	6800      	ldr	r0, [r0, #0]
 800702e:	f380 8808 	msr	MSP, r0
 8007032:	f04f 0000 	mov.w	r0, #0
 8007036:	f380 8814 	msr	CONTROL, r0
 800703a:	b662      	cpsie	i
 800703c:	b661      	cpsie	f
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	f3bf 8f6f 	isb	sy
 8007046:	df00      	svc	0
 8007048:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800704a:	bf00      	nop
 800704c:	e000ed08 	.word	0xe000ed08

08007050 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007056:	4b47      	ldr	r3, [pc, #284]	@ (8007174 <xPortStartScheduler+0x124>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a47      	ldr	r2, [pc, #284]	@ (8007178 <xPortStartScheduler+0x128>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d10b      	bne.n	8007078 <xPortStartScheduler+0x28>
	__asm volatile
 8007060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007064:	f383 8811 	msr	BASEPRI, r3
 8007068:	f3bf 8f6f 	isb	sy
 800706c:	f3bf 8f4f 	dsb	sy
 8007070:	60fb      	str	r3, [r7, #12]
}
 8007072:	bf00      	nop
 8007074:	bf00      	nop
 8007076:	e7fd      	b.n	8007074 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007078:	4b3e      	ldr	r3, [pc, #248]	@ (8007174 <xPortStartScheduler+0x124>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a3f      	ldr	r2, [pc, #252]	@ (800717c <xPortStartScheduler+0x12c>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d10b      	bne.n	800709a <xPortStartScheduler+0x4a>
	__asm volatile
 8007082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007086:	f383 8811 	msr	BASEPRI, r3
 800708a:	f3bf 8f6f 	isb	sy
 800708e:	f3bf 8f4f 	dsb	sy
 8007092:	613b      	str	r3, [r7, #16]
}
 8007094:	bf00      	nop
 8007096:	bf00      	nop
 8007098:	e7fd      	b.n	8007096 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800709a:	4b39      	ldr	r3, [pc, #228]	@ (8007180 <xPortStartScheduler+0x130>)
 800709c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	22ff      	movs	r2, #255	@ 0xff
 80070aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80070b4:	78fb      	ldrb	r3, [r7, #3]
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80070bc:	b2da      	uxtb	r2, r3
 80070be:	4b31      	ldr	r3, [pc, #196]	@ (8007184 <xPortStartScheduler+0x134>)
 80070c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80070c2:	4b31      	ldr	r3, [pc, #196]	@ (8007188 <xPortStartScheduler+0x138>)
 80070c4:	2207      	movs	r2, #7
 80070c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070c8:	e009      	b.n	80070de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80070ca:	4b2f      	ldr	r3, [pc, #188]	@ (8007188 <xPortStartScheduler+0x138>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	3b01      	subs	r3, #1
 80070d0:	4a2d      	ldr	r2, [pc, #180]	@ (8007188 <xPortStartScheduler+0x138>)
 80070d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80070d4:	78fb      	ldrb	r3, [r7, #3]
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	005b      	lsls	r3, r3, #1
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070de:	78fb      	ldrb	r3, [r7, #3]
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070e6:	2b80      	cmp	r3, #128	@ 0x80
 80070e8:	d0ef      	beq.n	80070ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80070ea:	4b27      	ldr	r3, [pc, #156]	@ (8007188 <xPortStartScheduler+0x138>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f1c3 0307 	rsb	r3, r3, #7
 80070f2:	2b04      	cmp	r3, #4
 80070f4:	d00b      	beq.n	800710e <xPortStartScheduler+0xbe>
	__asm volatile
 80070f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070fa:	f383 8811 	msr	BASEPRI, r3
 80070fe:	f3bf 8f6f 	isb	sy
 8007102:	f3bf 8f4f 	dsb	sy
 8007106:	60bb      	str	r3, [r7, #8]
}
 8007108:	bf00      	nop
 800710a:	bf00      	nop
 800710c:	e7fd      	b.n	800710a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800710e:	4b1e      	ldr	r3, [pc, #120]	@ (8007188 <xPortStartScheduler+0x138>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	021b      	lsls	r3, r3, #8
 8007114:	4a1c      	ldr	r2, [pc, #112]	@ (8007188 <xPortStartScheduler+0x138>)
 8007116:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007118:	4b1b      	ldr	r3, [pc, #108]	@ (8007188 <xPortStartScheduler+0x138>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007120:	4a19      	ldr	r2, [pc, #100]	@ (8007188 <xPortStartScheduler+0x138>)
 8007122:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	b2da      	uxtb	r2, r3
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800712c:	4b17      	ldr	r3, [pc, #92]	@ (800718c <xPortStartScheduler+0x13c>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a16      	ldr	r2, [pc, #88]	@ (800718c <xPortStartScheduler+0x13c>)
 8007132:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007136:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007138:	4b14      	ldr	r3, [pc, #80]	@ (800718c <xPortStartScheduler+0x13c>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a13      	ldr	r2, [pc, #76]	@ (800718c <xPortStartScheduler+0x13c>)
 800713e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007142:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007144:	f000 f8da 	bl	80072fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007148:	4b11      	ldr	r3, [pc, #68]	@ (8007190 <xPortStartScheduler+0x140>)
 800714a:	2200      	movs	r2, #0
 800714c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800714e:	f000 f8f9 	bl	8007344 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007152:	4b10      	ldr	r3, [pc, #64]	@ (8007194 <xPortStartScheduler+0x144>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a0f      	ldr	r2, [pc, #60]	@ (8007194 <xPortStartScheduler+0x144>)
 8007158:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800715c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800715e:	f7ff ff63 	bl	8007028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007162:	f7fe ff65 	bl	8006030 <vTaskSwitchContext>
	prvTaskExitError();
 8007166:	f7ff ff1d 	bl	8006fa4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3718      	adds	r7, #24
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	e000ed00 	.word	0xe000ed00
 8007178:	410fc271 	.word	0x410fc271
 800717c:	410fc270 	.word	0x410fc270
 8007180:	e000e400 	.word	0xe000e400
 8007184:	20001300 	.word	0x20001300
 8007188:	20001304 	.word	0x20001304
 800718c:	e000ed20 	.word	0xe000ed20
 8007190:	20000010 	.word	0x20000010
 8007194:	e000ef34 	.word	0xe000ef34

08007198 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
	__asm volatile
 800719e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a2:	f383 8811 	msr	BASEPRI, r3
 80071a6:	f3bf 8f6f 	isb	sy
 80071aa:	f3bf 8f4f 	dsb	sy
 80071ae:	607b      	str	r3, [r7, #4]
}
 80071b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80071b2:	4b10      	ldr	r3, [pc, #64]	@ (80071f4 <vPortEnterCritical+0x5c>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	3301      	adds	r3, #1
 80071b8:	4a0e      	ldr	r2, [pc, #56]	@ (80071f4 <vPortEnterCritical+0x5c>)
 80071ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80071bc:	4b0d      	ldr	r3, [pc, #52]	@ (80071f4 <vPortEnterCritical+0x5c>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d110      	bne.n	80071e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80071c4:	4b0c      	ldr	r3, [pc, #48]	@ (80071f8 <vPortEnterCritical+0x60>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00b      	beq.n	80071e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80071ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	603b      	str	r3, [r7, #0]
}
 80071e0:	bf00      	nop
 80071e2:	bf00      	nop
 80071e4:	e7fd      	b.n	80071e2 <vPortEnterCritical+0x4a>
	}
}
 80071e6:	bf00      	nop
 80071e8:	370c      	adds	r7, #12
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	20000010 	.word	0x20000010
 80071f8:	e000ed04 	.word	0xe000ed04

080071fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007202:	4b12      	ldr	r3, [pc, #72]	@ (800724c <vPortExitCritical+0x50>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d10b      	bne.n	8007222 <vPortExitCritical+0x26>
	__asm volatile
 800720a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800720e:	f383 8811 	msr	BASEPRI, r3
 8007212:	f3bf 8f6f 	isb	sy
 8007216:	f3bf 8f4f 	dsb	sy
 800721a:	607b      	str	r3, [r7, #4]
}
 800721c:	bf00      	nop
 800721e:	bf00      	nop
 8007220:	e7fd      	b.n	800721e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007222:	4b0a      	ldr	r3, [pc, #40]	@ (800724c <vPortExitCritical+0x50>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	3b01      	subs	r3, #1
 8007228:	4a08      	ldr	r2, [pc, #32]	@ (800724c <vPortExitCritical+0x50>)
 800722a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800722c:	4b07      	ldr	r3, [pc, #28]	@ (800724c <vPortExitCritical+0x50>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d105      	bne.n	8007240 <vPortExitCritical+0x44>
 8007234:	2300      	movs	r3, #0
 8007236:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	f383 8811 	msr	BASEPRI, r3
}
 800723e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	20000010 	.word	0x20000010

08007250 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007250:	f3ef 8009 	mrs	r0, PSP
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	4b15      	ldr	r3, [pc, #84]	@ (80072b0 <pxCurrentTCBConst>)
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	f01e 0f10 	tst.w	lr, #16
 8007260:	bf08      	it	eq
 8007262:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007266:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800726a:	6010      	str	r0, [r2, #0]
 800726c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007270:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007274:	f380 8811 	msr	BASEPRI, r0
 8007278:	f3bf 8f4f 	dsb	sy
 800727c:	f3bf 8f6f 	isb	sy
 8007280:	f7fe fed6 	bl	8006030 <vTaskSwitchContext>
 8007284:	f04f 0000 	mov.w	r0, #0
 8007288:	f380 8811 	msr	BASEPRI, r0
 800728c:	bc09      	pop	{r0, r3}
 800728e:	6819      	ldr	r1, [r3, #0]
 8007290:	6808      	ldr	r0, [r1, #0]
 8007292:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007296:	f01e 0f10 	tst.w	lr, #16
 800729a:	bf08      	it	eq
 800729c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80072a0:	f380 8809 	msr	PSP, r0
 80072a4:	f3bf 8f6f 	isb	sy
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	f3af 8000 	nop.w

080072b0 <pxCurrentTCBConst>:
 80072b0:	20000cd4 	.word	0x20000cd4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80072b4:	bf00      	nop
 80072b6:	bf00      	nop

080072b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
	__asm volatile
 80072be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c2:	f383 8811 	msr	BASEPRI, r3
 80072c6:	f3bf 8f6f 	isb	sy
 80072ca:	f3bf 8f4f 	dsb	sy
 80072ce:	607b      	str	r3, [r7, #4]
}
 80072d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80072d2:	f7fe fdf3 	bl	8005ebc <xTaskIncrementTick>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d003      	beq.n	80072e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80072dc:	4b06      	ldr	r3, [pc, #24]	@ (80072f8 <xPortSysTickHandler+0x40>)
 80072de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072e2:	601a      	str	r2, [r3, #0]
 80072e4:	2300      	movs	r3, #0
 80072e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	f383 8811 	msr	BASEPRI, r3
}
 80072ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80072f0:	bf00      	nop
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	e000ed04 	.word	0xe000ed04

080072fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80072fc:	b480      	push	{r7}
 80072fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007300:	4b0b      	ldr	r3, [pc, #44]	@ (8007330 <vPortSetupTimerInterrupt+0x34>)
 8007302:	2200      	movs	r2, #0
 8007304:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007306:	4b0b      	ldr	r3, [pc, #44]	@ (8007334 <vPortSetupTimerInterrupt+0x38>)
 8007308:	2200      	movs	r2, #0
 800730a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800730c:	4b0a      	ldr	r3, [pc, #40]	@ (8007338 <vPortSetupTimerInterrupt+0x3c>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a0a      	ldr	r2, [pc, #40]	@ (800733c <vPortSetupTimerInterrupt+0x40>)
 8007312:	fba2 2303 	umull	r2, r3, r2, r3
 8007316:	099b      	lsrs	r3, r3, #6
 8007318:	4a09      	ldr	r2, [pc, #36]	@ (8007340 <vPortSetupTimerInterrupt+0x44>)
 800731a:	3b01      	subs	r3, #1
 800731c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800731e:	4b04      	ldr	r3, [pc, #16]	@ (8007330 <vPortSetupTimerInterrupt+0x34>)
 8007320:	2207      	movs	r2, #7
 8007322:	601a      	str	r2, [r3, #0]
}
 8007324:	bf00      	nop
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	e000e010 	.word	0xe000e010
 8007334:	e000e018 	.word	0xe000e018
 8007338:	20000004 	.word	0x20000004
 800733c:	10624dd3 	.word	0x10624dd3
 8007340:	e000e014 	.word	0xe000e014

08007344 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007344:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007354 <vPortEnableVFP+0x10>
 8007348:	6801      	ldr	r1, [r0, #0]
 800734a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800734e:	6001      	str	r1, [r0, #0]
 8007350:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007352:	bf00      	nop
 8007354:	e000ed88 	.word	0xe000ed88

08007358 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800735e:	f3ef 8305 	mrs	r3, IPSR
 8007362:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2b0f      	cmp	r3, #15
 8007368:	d915      	bls.n	8007396 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800736a:	4a18      	ldr	r2, [pc, #96]	@ (80073cc <vPortValidateInterruptPriority+0x74>)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	4413      	add	r3, r2
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007374:	4b16      	ldr	r3, [pc, #88]	@ (80073d0 <vPortValidateInterruptPriority+0x78>)
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	7afa      	ldrb	r2, [r7, #11]
 800737a:	429a      	cmp	r2, r3
 800737c:	d20b      	bcs.n	8007396 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800737e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007382:	f383 8811 	msr	BASEPRI, r3
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	607b      	str	r3, [r7, #4]
}
 8007390:	bf00      	nop
 8007392:	bf00      	nop
 8007394:	e7fd      	b.n	8007392 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007396:	4b0f      	ldr	r3, [pc, #60]	@ (80073d4 <vPortValidateInterruptPriority+0x7c>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800739e:	4b0e      	ldr	r3, [pc, #56]	@ (80073d8 <vPortValidateInterruptPriority+0x80>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d90b      	bls.n	80073be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80073a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073aa:	f383 8811 	msr	BASEPRI, r3
 80073ae:	f3bf 8f6f 	isb	sy
 80073b2:	f3bf 8f4f 	dsb	sy
 80073b6:	603b      	str	r3, [r7, #0]
}
 80073b8:	bf00      	nop
 80073ba:	bf00      	nop
 80073bc:	e7fd      	b.n	80073ba <vPortValidateInterruptPriority+0x62>
	}
 80073be:	bf00      	nop
 80073c0:	3714      	adds	r7, #20
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	e000e3f0 	.word	0xe000e3f0
 80073d0:	20001300 	.word	0x20001300
 80073d4:	e000ed0c 	.word	0xe000ed0c
 80073d8:	20001304 	.word	0x20001304

080073dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b08a      	sub	sp, #40	@ 0x28
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80073e4:	2300      	movs	r3, #0
 80073e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80073e8:	f7fe fcac 	bl	8005d44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80073ec:	4b5c      	ldr	r3, [pc, #368]	@ (8007560 <pvPortMalloc+0x184>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d101      	bne.n	80073f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80073f4:	f000 f924 	bl	8007640 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80073f8:	4b5a      	ldr	r3, [pc, #360]	@ (8007564 <pvPortMalloc+0x188>)
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4013      	ands	r3, r2
 8007400:	2b00      	cmp	r3, #0
 8007402:	f040 8095 	bne.w	8007530 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d01e      	beq.n	800744a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800740c:	2208      	movs	r2, #8
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4413      	add	r3, r2
 8007412:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f003 0307 	and.w	r3, r3, #7
 800741a:	2b00      	cmp	r3, #0
 800741c:	d015      	beq.n	800744a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f023 0307 	bic.w	r3, r3, #7
 8007424:	3308      	adds	r3, #8
 8007426:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f003 0307 	and.w	r3, r3, #7
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00b      	beq.n	800744a <pvPortMalloc+0x6e>
	__asm volatile
 8007432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007436:	f383 8811 	msr	BASEPRI, r3
 800743a:	f3bf 8f6f 	isb	sy
 800743e:	f3bf 8f4f 	dsb	sy
 8007442:	617b      	str	r3, [r7, #20]
}
 8007444:	bf00      	nop
 8007446:	bf00      	nop
 8007448:	e7fd      	b.n	8007446 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d06f      	beq.n	8007530 <pvPortMalloc+0x154>
 8007450:	4b45      	ldr	r3, [pc, #276]	@ (8007568 <pvPortMalloc+0x18c>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	429a      	cmp	r2, r3
 8007458:	d86a      	bhi.n	8007530 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800745a:	4b44      	ldr	r3, [pc, #272]	@ (800756c <pvPortMalloc+0x190>)
 800745c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800745e:	4b43      	ldr	r3, [pc, #268]	@ (800756c <pvPortMalloc+0x190>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007464:	e004      	b.n	8007470 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007468:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800746a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	429a      	cmp	r2, r3
 8007478:	d903      	bls.n	8007482 <pvPortMalloc+0xa6>
 800747a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d1f1      	bne.n	8007466 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007482:	4b37      	ldr	r3, [pc, #220]	@ (8007560 <pvPortMalloc+0x184>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007488:	429a      	cmp	r2, r3
 800748a:	d051      	beq.n	8007530 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800748c:	6a3b      	ldr	r3, [r7, #32]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2208      	movs	r2, #8
 8007492:	4413      	add	r3, r2
 8007494:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	6a3b      	ldr	r3, [r7, #32]
 800749c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800749e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a0:	685a      	ldr	r2, [r3, #4]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	1ad2      	subs	r2, r2, r3
 80074a6:	2308      	movs	r3, #8
 80074a8:	005b      	lsls	r3, r3, #1
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d920      	bls.n	80074f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80074ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4413      	add	r3, r2
 80074b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	f003 0307 	and.w	r3, r3, #7
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d00b      	beq.n	80074d8 <pvPortMalloc+0xfc>
	__asm volatile
 80074c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c4:	f383 8811 	msr	BASEPRI, r3
 80074c8:	f3bf 8f6f 	isb	sy
 80074cc:	f3bf 8f4f 	dsb	sy
 80074d0:	613b      	str	r3, [r7, #16]
}
 80074d2:	bf00      	nop
 80074d4:	bf00      	nop
 80074d6:	e7fd      	b.n	80074d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80074d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074da:	685a      	ldr	r2, [r3, #4]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	1ad2      	subs	r2, r2, r3
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80074e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80074ea:	69b8      	ldr	r0, [r7, #24]
 80074ec:	f000 f90a 	bl	8007704 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80074f0:	4b1d      	ldr	r3, [pc, #116]	@ (8007568 <pvPortMalloc+0x18c>)
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	1ad3      	subs	r3, r2, r3
 80074fa:	4a1b      	ldr	r2, [pc, #108]	@ (8007568 <pvPortMalloc+0x18c>)
 80074fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80074fe:	4b1a      	ldr	r3, [pc, #104]	@ (8007568 <pvPortMalloc+0x18c>)
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	4b1b      	ldr	r3, [pc, #108]	@ (8007570 <pvPortMalloc+0x194>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	429a      	cmp	r2, r3
 8007508:	d203      	bcs.n	8007512 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800750a:	4b17      	ldr	r3, [pc, #92]	@ (8007568 <pvPortMalloc+0x18c>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a18      	ldr	r2, [pc, #96]	@ (8007570 <pvPortMalloc+0x194>)
 8007510:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007514:	685a      	ldr	r2, [r3, #4]
 8007516:	4b13      	ldr	r3, [pc, #76]	@ (8007564 <pvPortMalloc+0x188>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	431a      	orrs	r2, r3
 800751c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007522:	2200      	movs	r2, #0
 8007524:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007526:	4b13      	ldr	r3, [pc, #76]	@ (8007574 <pvPortMalloc+0x198>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	3301      	adds	r3, #1
 800752c:	4a11      	ldr	r2, [pc, #68]	@ (8007574 <pvPortMalloc+0x198>)
 800752e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007530:	f7fe fc16 	bl	8005d60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	f003 0307 	and.w	r3, r3, #7
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00b      	beq.n	8007556 <pvPortMalloc+0x17a>
	__asm volatile
 800753e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007542:	f383 8811 	msr	BASEPRI, r3
 8007546:	f3bf 8f6f 	isb	sy
 800754a:	f3bf 8f4f 	dsb	sy
 800754e:	60fb      	str	r3, [r7, #12]
}
 8007550:	bf00      	nop
 8007552:	bf00      	nop
 8007554:	e7fd      	b.n	8007552 <pvPortMalloc+0x176>
	return pvReturn;
 8007556:	69fb      	ldr	r3, [r7, #28]
}
 8007558:	4618      	mov	r0, r3
 800755a:	3728      	adds	r7, #40	@ 0x28
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	20004f10 	.word	0x20004f10
 8007564:	20004f24 	.word	0x20004f24
 8007568:	20004f14 	.word	0x20004f14
 800756c:	20004f08 	.word	0x20004f08
 8007570:	20004f18 	.word	0x20004f18
 8007574:	20004f1c 	.word	0x20004f1c

08007578 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b086      	sub	sp, #24
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d04f      	beq.n	800762a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800758a:	2308      	movs	r3, #8
 800758c:	425b      	negs	r3, r3
 800758e:	697a      	ldr	r2, [r7, #20]
 8007590:	4413      	add	r3, r2
 8007592:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	685a      	ldr	r2, [r3, #4]
 800759c:	4b25      	ldr	r3, [pc, #148]	@ (8007634 <vPortFree+0xbc>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4013      	ands	r3, r2
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10b      	bne.n	80075be <vPortFree+0x46>
	__asm volatile
 80075a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075aa:	f383 8811 	msr	BASEPRI, r3
 80075ae:	f3bf 8f6f 	isb	sy
 80075b2:	f3bf 8f4f 	dsb	sy
 80075b6:	60fb      	str	r3, [r7, #12]
}
 80075b8:	bf00      	nop
 80075ba:	bf00      	nop
 80075bc:	e7fd      	b.n	80075ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00b      	beq.n	80075de <vPortFree+0x66>
	__asm volatile
 80075c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ca:	f383 8811 	msr	BASEPRI, r3
 80075ce:	f3bf 8f6f 	isb	sy
 80075d2:	f3bf 8f4f 	dsb	sy
 80075d6:	60bb      	str	r3, [r7, #8]
}
 80075d8:	bf00      	nop
 80075da:	bf00      	nop
 80075dc:	e7fd      	b.n	80075da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	685a      	ldr	r2, [r3, #4]
 80075e2:	4b14      	ldr	r3, [pc, #80]	@ (8007634 <vPortFree+0xbc>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4013      	ands	r3, r2
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d01e      	beq.n	800762a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d11a      	bne.n	800762a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	685a      	ldr	r2, [r3, #4]
 80075f8:	4b0e      	ldr	r3, [pc, #56]	@ (8007634 <vPortFree+0xbc>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	43db      	mvns	r3, r3
 80075fe:	401a      	ands	r2, r3
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007604:	f7fe fb9e 	bl	8005d44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	685a      	ldr	r2, [r3, #4]
 800760c:	4b0a      	ldr	r3, [pc, #40]	@ (8007638 <vPortFree+0xc0>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4413      	add	r3, r2
 8007612:	4a09      	ldr	r2, [pc, #36]	@ (8007638 <vPortFree+0xc0>)
 8007614:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007616:	6938      	ldr	r0, [r7, #16]
 8007618:	f000 f874 	bl	8007704 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800761c:	4b07      	ldr	r3, [pc, #28]	@ (800763c <vPortFree+0xc4>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	3301      	adds	r3, #1
 8007622:	4a06      	ldr	r2, [pc, #24]	@ (800763c <vPortFree+0xc4>)
 8007624:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007626:	f7fe fb9b 	bl	8005d60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800762a:	bf00      	nop
 800762c:	3718      	adds	r7, #24
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	20004f24 	.word	0x20004f24
 8007638:	20004f14 	.word	0x20004f14
 800763c:	20004f20 	.word	0x20004f20

08007640 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007646:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800764a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800764c:	4b27      	ldr	r3, [pc, #156]	@ (80076ec <prvHeapInit+0xac>)
 800764e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f003 0307 	and.w	r3, r3, #7
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00c      	beq.n	8007674 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	3307      	adds	r3, #7
 800765e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f023 0307 	bic.w	r3, r3, #7
 8007666:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007668:	68ba      	ldr	r2, [r7, #8]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	4a1f      	ldr	r2, [pc, #124]	@ (80076ec <prvHeapInit+0xac>)
 8007670:	4413      	add	r3, r2
 8007672:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007678:	4a1d      	ldr	r2, [pc, #116]	@ (80076f0 <prvHeapInit+0xb0>)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800767e:	4b1c      	ldr	r3, [pc, #112]	@ (80076f0 <prvHeapInit+0xb0>)
 8007680:	2200      	movs	r2, #0
 8007682:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	68ba      	ldr	r2, [r7, #8]
 8007688:	4413      	add	r3, r2
 800768a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800768c:	2208      	movs	r2, #8
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	1a9b      	subs	r3, r3, r2
 8007692:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f023 0307 	bic.w	r3, r3, #7
 800769a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	4a15      	ldr	r2, [pc, #84]	@ (80076f4 <prvHeapInit+0xb4>)
 80076a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80076a2:	4b14      	ldr	r3, [pc, #80]	@ (80076f4 <prvHeapInit+0xb4>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2200      	movs	r2, #0
 80076a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80076aa:	4b12      	ldr	r3, [pc, #72]	@ (80076f4 <prvHeapInit+0xb4>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2200      	movs	r2, #0
 80076b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	1ad2      	subs	r2, r2, r3
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80076c0:	4b0c      	ldr	r3, [pc, #48]	@ (80076f4 <prvHeapInit+0xb4>)
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	4a0a      	ldr	r2, [pc, #40]	@ (80076f8 <prvHeapInit+0xb8>)
 80076ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	4a09      	ldr	r2, [pc, #36]	@ (80076fc <prvHeapInit+0xbc>)
 80076d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80076d8:	4b09      	ldr	r3, [pc, #36]	@ (8007700 <prvHeapInit+0xc0>)
 80076da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80076de:	601a      	str	r2, [r3, #0]
}
 80076e0:	bf00      	nop
 80076e2:	3714      	adds	r7, #20
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr
 80076ec:	20001308 	.word	0x20001308
 80076f0:	20004f08 	.word	0x20004f08
 80076f4:	20004f10 	.word	0x20004f10
 80076f8:	20004f18 	.word	0x20004f18
 80076fc:	20004f14 	.word	0x20004f14
 8007700:	20004f24 	.word	0x20004f24

08007704 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800770c:	4b28      	ldr	r3, [pc, #160]	@ (80077b0 <prvInsertBlockIntoFreeList+0xac>)
 800770e:	60fb      	str	r3, [r7, #12]
 8007710:	e002      	b.n	8007718 <prvInsertBlockIntoFreeList+0x14>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	60fb      	str	r3, [r7, #12]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	429a      	cmp	r2, r3
 8007720:	d8f7      	bhi.n	8007712 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	68ba      	ldr	r2, [r7, #8]
 800772c:	4413      	add	r3, r2
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	429a      	cmp	r2, r3
 8007732:	d108      	bne.n	8007746 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	685a      	ldr	r2, [r3, #4]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	441a      	add	r2, r3
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	441a      	add	r2, r3
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	429a      	cmp	r2, r3
 8007758:	d118      	bne.n	800778c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	4b15      	ldr	r3, [pc, #84]	@ (80077b4 <prvInsertBlockIntoFreeList+0xb0>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	429a      	cmp	r2, r3
 8007764:	d00d      	beq.n	8007782 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	685a      	ldr	r2, [r3, #4]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	441a      	add	r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	601a      	str	r2, [r3, #0]
 8007780:	e008      	b.n	8007794 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007782:	4b0c      	ldr	r3, [pc, #48]	@ (80077b4 <prvInsertBlockIntoFreeList+0xb0>)
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	601a      	str	r2, [r3, #0]
 800778a:	e003      	b.n	8007794 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	429a      	cmp	r2, r3
 800779a:	d002      	beq.n	80077a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077a2:	bf00      	nop
 80077a4:	3714      	adds	r7, #20
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	20004f08 	.word	0x20004f08
 80077b4:	20004f10 	.word	0x20004f10

080077b8 <memset>:
 80077b8:	4402      	add	r2, r0
 80077ba:	4603      	mov	r3, r0
 80077bc:	4293      	cmp	r3, r2
 80077be:	d100      	bne.n	80077c2 <memset+0xa>
 80077c0:	4770      	bx	lr
 80077c2:	f803 1b01 	strb.w	r1, [r3], #1
 80077c6:	e7f9      	b.n	80077bc <memset+0x4>

080077c8 <__libc_init_array>:
 80077c8:	b570      	push	{r4, r5, r6, lr}
 80077ca:	4d0d      	ldr	r5, [pc, #52]	@ (8007800 <__libc_init_array+0x38>)
 80077cc:	4c0d      	ldr	r4, [pc, #52]	@ (8007804 <__libc_init_array+0x3c>)
 80077ce:	1b64      	subs	r4, r4, r5
 80077d0:	10a4      	asrs	r4, r4, #2
 80077d2:	2600      	movs	r6, #0
 80077d4:	42a6      	cmp	r6, r4
 80077d6:	d109      	bne.n	80077ec <__libc_init_array+0x24>
 80077d8:	4d0b      	ldr	r5, [pc, #44]	@ (8007808 <__libc_init_array+0x40>)
 80077da:	4c0c      	ldr	r4, [pc, #48]	@ (800780c <__libc_init_array+0x44>)
 80077dc:	f000 f826 	bl	800782c <_init>
 80077e0:	1b64      	subs	r4, r4, r5
 80077e2:	10a4      	asrs	r4, r4, #2
 80077e4:	2600      	movs	r6, #0
 80077e6:	42a6      	cmp	r6, r4
 80077e8:	d105      	bne.n	80077f6 <__libc_init_array+0x2e>
 80077ea:	bd70      	pop	{r4, r5, r6, pc}
 80077ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80077f0:	4798      	blx	r3
 80077f2:	3601      	adds	r6, #1
 80077f4:	e7ee      	b.n	80077d4 <__libc_init_array+0xc>
 80077f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80077fa:	4798      	blx	r3
 80077fc:	3601      	adds	r6, #1
 80077fe:	e7f2      	b.n	80077e6 <__libc_init_array+0x1e>
 8007800:	08007a50 	.word	0x08007a50
 8007804:	08007a50 	.word	0x08007a50
 8007808:	08007a50 	.word	0x08007a50
 800780c:	08007a54 	.word	0x08007a54

08007810 <memcpy>:
 8007810:	440a      	add	r2, r1
 8007812:	4291      	cmp	r1, r2
 8007814:	f100 33ff 	add.w	r3, r0, #4294967295
 8007818:	d100      	bne.n	800781c <memcpy+0xc>
 800781a:	4770      	bx	lr
 800781c:	b510      	push	{r4, lr}
 800781e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007822:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007826:	4291      	cmp	r1, r2
 8007828:	d1f9      	bne.n	800781e <memcpy+0xe>
 800782a:	bd10      	pop	{r4, pc}

0800782c <_init>:
 800782c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782e:	bf00      	nop
 8007830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007832:	bc08      	pop	{r3}
 8007834:	469e      	mov	lr, r3
 8007836:	4770      	bx	lr

08007838 <_fini>:
 8007838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800783a:	bf00      	nop
 800783c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800783e:	bc08      	pop	{r3}
 8007840:	469e      	mov	lr, r3
 8007842:	4770      	bx	lr
