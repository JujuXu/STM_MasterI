
Master1_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ba4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08006d74  08006d74  00007d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e94  08006e94  0000802c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006e94  08006e94  00007e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e9c  08006e9c  0000802c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e9c  08006e9c  00007e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ea0  08006ea0  00007ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08006ea4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f0c  2000002c  08006ed0  0000802c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004f38  08006ed0  00008f38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000802c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d124  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004698  00000000  00000000  00025180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001950  00000000  00000000  00029818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001385  00000000  00000000  0002b168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000251d7  00000000  00000000  0002c4ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e41e  00000000  00000000  000516c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dde31  00000000  00000000  0006fae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014d913  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069f0  00000000  00000000  0014d958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00154348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000002c 	.word	0x2000002c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006d5c 	.word	0x08006d5c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000030 	.word	0x20000030
 800020c:	08006d5c 	.word	0x08006d5c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b988 	b.w	8000538 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	468e      	mov	lr, r1
 8000248:	4604      	mov	r4, r0
 800024a:	4688      	mov	r8, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d962      	bls.n	800031c <__udivmoddi4+0xdc>
 8000256:	fab2 f682 	clz	r6, r2
 800025a:	b14e      	cbz	r6, 8000270 <__udivmoddi4+0x30>
 800025c:	f1c6 0320 	rsb	r3, r6, #32
 8000260:	fa01 f806 	lsl.w	r8, r1, r6
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	40b7      	lsls	r7, r6
 800026a:	ea43 0808 	orr.w	r8, r3, r8
 800026e:	40b4      	lsls	r4, r6
 8000270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000274:	fa1f fc87 	uxth.w	ip, r7
 8000278:	fbb8 f1fe 	udiv	r1, r8, lr
 800027c:	0c23      	lsrs	r3, r4, #16
 800027e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000282:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000286:	fb01 f20c 	mul.w	r2, r1, ip
 800028a:	429a      	cmp	r2, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f101 30ff 	add.w	r0, r1, #4294967295
 8000294:	f080 80ea 	bcs.w	800046c <__udivmoddi4+0x22c>
 8000298:	429a      	cmp	r2, r3
 800029a:	f240 80e7 	bls.w	800046c <__udivmoddi4+0x22c>
 800029e:	3902      	subs	r1, #2
 80002a0:	443b      	add	r3, r7
 80002a2:	1a9a      	subs	r2, r3, r2
 80002a4:	b2a3      	uxth	r3, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b6:	459c      	cmp	ip, r3
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0x8e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c0:	f080 80d6 	bcs.w	8000470 <__udivmoddi4+0x230>
 80002c4:	459c      	cmp	ip, r3
 80002c6:	f240 80d3 	bls.w	8000470 <__udivmoddi4+0x230>
 80002ca:	443b      	add	r3, r7
 80002cc:	3802      	subs	r0, #2
 80002ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d2:	eba3 030c 	sub.w	r3, r3, ip
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11d      	cbz	r5, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40f3      	lsrs	r3, r6
 80002dc:	2200      	movs	r2, #0
 80002de:	e9c5 3200 	strd	r3, r2, [r5]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d905      	bls.n	80002f6 <__udivmoddi4+0xb6>
 80002ea:	b10d      	cbz	r5, 80002f0 <__udivmoddi4+0xb0>
 80002ec:	e9c5 0100 	strd	r0, r1, [r5]
 80002f0:	2100      	movs	r1, #0
 80002f2:	4608      	mov	r0, r1
 80002f4:	e7f5      	b.n	80002e2 <__udivmoddi4+0xa2>
 80002f6:	fab3 f183 	clz	r1, r3
 80002fa:	2900      	cmp	r1, #0
 80002fc:	d146      	bne.n	800038c <__udivmoddi4+0x14c>
 80002fe:	4573      	cmp	r3, lr
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xc8>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 8105 	bhi.w	8000512 <__udivmoddi4+0x2d2>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb6e 0203 	sbc.w	r2, lr, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4690      	mov	r8, r2
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e5      	beq.n	80002e2 <__udivmoddi4+0xa2>
 8000316:	e9c5 4800 	strd	r4, r8, [r5]
 800031a:	e7e2      	b.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	2a00      	cmp	r2, #0
 800031e:	f000 8090 	beq.w	8000442 <__udivmoddi4+0x202>
 8000322:	fab2 f682 	clz	r6, r2
 8000326:	2e00      	cmp	r6, #0
 8000328:	f040 80a4 	bne.w	8000474 <__udivmoddi4+0x234>
 800032c:	1a8a      	subs	r2, r1, r2
 800032e:	0c03      	lsrs	r3, r0, #16
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	b280      	uxth	r0, r0
 8000336:	b2bc      	uxth	r4, r7
 8000338:	2101      	movs	r1, #1
 800033a:	fbb2 fcfe 	udiv	ip, r2, lr
 800033e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000346:	fb04 f20c 	mul.w	r2, r4, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d907      	bls.n	800035e <__udivmoddi4+0x11e>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x11c>
 8000356:	429a      	cmp	r2, r3
 8000358:	f200 80e0 	bhi.w	800051c <__udivmoddi4+0x2dc>
 800035c:	46c4      	mov	ip, r8
 800035e:	1a9b      	subs	r3, r3, r2
 8000360:	fbb3 f2fe 	udiv	r2, r3, lr
 8000364:	fb0e 3312 	mls	r3, lr, r2, r3
 8000368:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800036c:	fb02 f404 	mul.w	r4, r2, r4
 8000370:	429c      	cmp	r4, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x144>
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	f102 30ff 	add.w	r0, r2, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x142>
 800037c:	429c      	cmp	r4, r3
 800037e:	f200 80ca 	bhi.w	8000516 <__udivmoddi4+0x2d6>
 8000382:	4602      	mov	r2, r0
 8000384:	1b1b      	subs	r3, r3, r4
 8000386:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0x98>
 800038c:	f1c1 0620 	rsb	r6, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 f706 	lsr.w	r7, r2, r6
 8000396:	431f      	orrs	r7, r3
 8000398:	fa0e f401 	lsl.w	r4, lr, r1
 800039c:	fa20 f306 	lsr.w	r3, r0, r6
 80003a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	fa1f fc87 	uxth.w	ip, r7
 80003b2:	fbbe f0f9 	udiv	r0, lr, r9
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x1a0>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d2:	f080 809c 	bcs.w	800050e <__udivmoddi4+0x2ce>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	f240 8099 	bls.w	800050e <__udivmoddi4+0x2ce>
 80003dc:	3802      	subs	r0, #2
 80003de:	443c      	add	r4, r7
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	fa1f fe83 	uxth.w	lr, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1ce>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000402:	f080 8082 	bcs.w	800050a <__udivmoddi4+0x2ca>
 8000406:	45a4      	cmp	ip, r4
 8000408:	d97f      	bls.n	800050a <__udivmoddi4+0x2ca>
 800040a:	3b02      	subs	r3, #2
 800040c:	443c      	add	r4, r7
 800040e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	fba0 ec02 	umull	lr, ip, r0, r2
 800041a:	4564      	cmp	r4, ip
 800041c:	4673      	mov	r3, lr
 800041e:	46e1      	mov	r9, ip
 8000420:	d362      	bcc.n	80004e8 <__udivmoddi4+0x2a8>
 8000422:	d05f      	beq.n	80004e4 <__udivmoddi4+0x2a4>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x1fe>
 8000426:	ebb8 0203 	subs.w	r2, r8, r3
 800042a:	eb64 0409 	sbc.w	r4, r4, r9
 800042e:	fa04 f606 	lsl.w	r6, r4, r6
 8000432:	fa22 f301 	lsr.w	r3, r2, r1
 8000436:	431e      	orrs	r6, r3
 8000438:	40cc      	lsrs	r4, r1
 800043a:	e9c5 6400 	strd	r6, r4, [r5]
 800043e:	2100      	movs	r1, #0
 8000440:	e74f      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000442:	fbb1 fcf2 	udiv	ip, r1, r2
 8000446:	0c01      	lsrs	r1, r0, #16
 8000448:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800044c:	b280      	uxth	r0, r0
 800044e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000452:	463b      	mov	r3, r7
 8000454:	4638      	mov	r0, r7
 8000456:	463c      	mov	r4, r7
 8000458:	46b8      	mov	r8, r7
 800045a:	46be      	mov	lr, r7
 800045c:	2620      	movs	r6, #32
 800045e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000462:	eba2 0208 	sub.w	r2, r2, r8
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	e766      	b.n	800033a <__udivmoddi4+0xfa>
 800046c:	4601      	mov	r1, r0
 800046e:	e718      	b.n	80002a2 <__udivmoddi4+0x62>
 8000470:	4610      	mov	r0, r2
 8000472:	e72c      	b.n	80002ce <__udivmoddi4+0x8e>
 8000474:	f1c6 0220 	rsb	r2, r6, #32
 8000478:	fa2e f302 	lsr.w	r3, lr, r2
 800047c:	40b7      	lsls	r7, r6
 800047e:	40b1      	lsls	r1, r6
 8000480:	fa20 f202 	lsr.w	r2, r0, r2
 8000484:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000488:	430a      	orrs	r2, r1
 800048a:	fbb3 f8fe 	udiv	r8, r3, lr
 800048e:	b2bc      	uxth	r4, r7
 8000490:	fb0e 3318 	mls	r3, lr, r8, r3
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb08 f904 	mul.w	r9, r8, r4
 800049e:	40b0      	lsls	r0, r6
 80004a0:	4589      	cmp	r9, r1
 80004a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004a6:	b280      	uxth	r0, r0
 80004a8:	d93e      	bls.n	8000528 <__udivmoddi4+0x2e8>
 80004aa:	1879      	adds	r1, r7, r1
 80004ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b0:	d201      	bcs.n	80004b6 <__udivmoddi4+0x276>
 80004b2:	4589      	cmp	r9, r1
 80004b4:	d81f      	bhi.n	80004f6 <__udivmoddi4+0x2b6>
 80004b6:	eba1 0109 	sub.w	r1, r1, r9
 80004ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80004be:	fb09 f804 	mul.w	r8, r9, r4
 80004c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004c6:	b292      	uxth	r2, r2
 80004c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d229      	bcs.n	8000524 <__udivmoddi4+0x2e4>
 80004d0:	18ba      	adds	r2, r7, r2
 80004d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004d6:	d2c4      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004d8:	4542      	cmp	r2, r8
 80004da:	d2c2      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004dc:	f1a9 0102 	sub.w	r1, r9, #2
 80004e0:	443a      	add	r2, r7
 80004e2:	e7be      	b.n	8000462 <__udivmoddi4+0x222>
 80004e4:	45f0      	cmp	r8, lr
 80004e6:	d29d      	bcs.n	8000424 <__udivmoddi4+0x1e4>
 80004e8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f0:	3801      	subs	r0, #1
 80004f2:	46e1      	mov	r9, ip
 80004f4:	e796      	b.n	8000424 <__udivmoddi4+0x1e4>
 80004f6:	eba7 0909 	sub.w	r9, r7, r9
 80004fa:	4449      	add	r1, r9
 80004fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000500:	fbb1 f9fe 	udiv	r9, r1, lr
 8000504:	fb09 f804 	mul.w	r8, r9, r4
 8000508:	e7db      	b.n	80004c2 <__udivmoddi4+0x282>
 800050a:	4673      	mov	r3, lr
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1ce>
 800050e:	4650      	mov	r0, sl
 8000510:	e766      	b.n	80003e0 <__udivmoddi4+0x1a0>
 8000512:	4608      	mov	r0, r1
 8000514:	e6fd      	b.n	8000312 <__udivmoddi4+0xd2>
 8000516:	443b      	add	r3, r7
 8000518:	3a02      	subs	r2, #2
 800051a:	e733      	b.n	8000384 <__udivmoddi4+0x144>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	443b      	add	r3, r7
 8000522:	e71c      	b.n	800035e <__udivmoddi4+0x11e>
 8000524:	4649      	mov	r1, r9
 8000526:	e79c      	b.n	8000462 <__udivmoddi4+0x222>
 8000528:	eba1 0109 	sub.w	r1, r1, r9
 800052c:	46c4      	mov	ip, r8
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	e7c4      	b.n	80004c2 <__udivmoddi4+0x282>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <encoder_update>:
void encoder_init(void) {
    ticks = 0;
    steps = 0;
}

void encoder_update(void) {
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
    static int16_t last = 0;
    int16_t current = __HAL_TIM_GET_COUNTER(&htim2); // no mutex required, not a ressource, just a register read
 8000542:	4b38      	ldr	r3, [pc, #224]	@ (8000624 <encoder_update+0xe8>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000548:	817b      	strh	r3, [r7, #10]
    int16_t delta = current - last;
 800054a:	897a      	ldrh	r2, [r7, #10]
 800054c:	4b36      	ldr	r3, [pc, #216]	@ (8000628 <encoder_update+0xec>)
 800054e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000552:	b29b      	uxth	r3, r3
 8000554:	1ad3      	subs	r3, r2, r3
 8000556:	b29b      	uxth	r3, r3
 8000558:	81fb      	strh	r3, [r7, #14]
    last = current;
 800055a:	4a33      	ldr	r2, [pc, #204]	@ (8000628 <encoder_update+0xec>)
 800055c:	897b      	ldrh	r3, [r7, #10]
 800055e:	8013      	strh	r3, [r2, #0]

    // Inversion du sens si nécessaire
    if (is_reversed)
 8000560:	4b32      	ldr	r3, [pc, #200]	@ (800062c <encoder_update+0xf0>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d003      	beq.n	8000570 <encoder_update+0x34>
        delta = -delta;
 8000568:	89fb      	ldrh	r3, [r7, #14]
 800056a:	425b      	negs	r3, r3
 800056c:	b29b      	uxth	r3, r3
 800056e:	81fb      	strh	r3, [r7, #14]

    ticks += delta;
 8000570:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000574:	4b2e      	ldr	r3, [pc, #184]	@ (8000630 <encoder_update+0xf4>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4413      	add	r3, r2
 800057a:	4a2d      	ldr	r2, [pc, #180]	@ (8000630 <encoder_update+0xf4>)
 800057c:	6013      	str	r3, [r2, #0]
    int16_t new_steps = (int16_t)(ticks / 4);
 800057e:	4b2c      	ldr	r3, [pc, #176]	@ (8000630 <encoder_update+0xf4>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2b00      	cmp	r3, #0
 8000584:	da00      	bge.n	8000588 <encoder_update+0x4c>
 8000586:	3303      	adds	r3, #3
 8000588:	109b      	asrs	r3, r3, #2
 800058a:	81bb      	strh	r3, [r7, #12]

    if (is_cyclic) {
 800058c:	4b29      	ldr	r3, [pc, #164]	@ (8000634 <encoder_update+0xf8>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d02a      	beq.n	80005ea <encoder_update+0xae>
    	 int32_t range = max - min + 1;
 8000594:	4b28      	ldr	r3, [pc, #160]	@ (8000638 <encoder_update+0xfc>)
 8000596:	f9b3 3000 	ldrsh.w	r3, [r3]
 800059a:	461a      	mov	r2, r3
 800059c:	4b27      	ldr	r3, [pc, #156]	@ (800063c <encoder_update+0x100>)
 800059e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005a2:	1ad3      	subs	r3, r2, r3
 80005a4:	3301      	adds	r3, #1
 80005a6:	607b      	str	r3, [r7, #4]
    	 steps = ((new_steps - min) % range + range) % range + min;
 80005a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80005ac:	4a23      	ldr	r2, [pc, #140]	@ (800063c <encoder_update+0x100>)
 80005ae:	f9b2 2000 	ldrsh.w	r2, [r2]
 80005b2:	1a9b      	subs	r3, r3, r2
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	fb93 f2f2 	sdiv	r2, r3, r2
 80005ba:	6879      	ldr	r1, [r7, #4]
 80005bc:	fb01 f202 	mul.w	r2, r1, r2
 80005c0:	1a9a      	subs	r2, r3, r2
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4413      	add	r3, r2
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	fb93 f2f2 	sdiv	r2, r3, r2
 80005cc:	6879      	ldr	r1, [r7, #4]
 80005ce:	fb01 f202 	mul.w	r2, r1, r2
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	4b19      	ldr	r3, [pc, #100]	@ (800063c <encoder_update+0x100>)
 80005d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005dc:	b29b      	uxth	r3, r3
 80005de:	4413      	add	r3, r2
 80005e0:	b29b      	uxth	r3, r3
 80005e2:	b21a      	sxth	r2, r3
 80005e4:	4b16      	ldr	r3, [pc, #88]	@ (8000640 <encoder_update+0x104>)
 80005e6:	801a      	strh	r2, [r3, #0]
    } else {
        if (new_steps < min) new_steps = min;
        if (new_steps > max) new_steps = max;
        steps = new_steps;
    }
}
 80005e8:	e016      	b.n	8000618 <encoder_update+0xdc>
        if (new_steps < min) new_steps = min;
 80005ea:	4b14      	ldr	r3, [pc, #80]	@ (800063c <encoder_update+0x100>)
 80005ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005f0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	da02      	bge.n	80005fe <encoder_update+0xc2>
 80005f8:	4b10      	ldr	r3, [pc, #64]	@ (800063c <encoder_update+0x100>)
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	81bb      	strh	r3, [r7, #12]
        if (new_steps > max) new_steps = max;
 80005fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000638 <encoder_update+0xfc>)
 8000600:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000604:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000608:	429a      	cmp	r2, r3
 800060a:	dd02      	ble.n	8000612 <encoder_update+0xd6>
 800060c:	4b0a      	ldr	r3, [pc, #40]	@ (8000638 <encoder_update+0xfc>)
 800060e:	881b      	ldrh	r3, [r3, #0]
 8000610:	81bb      	strh	r3, [r7, #12]
        steps = new_steps;
 8000612:	4a0b      	ldr	r2, [pc, #44]	@ (8000640 <encoder_update+0x104>)
 8000614:	89bb      	ldrh	r3, [r7, #12]
 8000616:	8013      	strh	r3, [r2, #0]
}
 8000618:	bf00      	nop
 800061a:	3714      	adds	r7, #20
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	20000070 	.word	0x20000070
 8000628:	20000050 	.word	0x20000050
 800062c:	20000003 	.word	0x20000003
 8000630:	20000048 	.word	0x20000048
 8000634:	20000002 	.word	0x20000002
 8000638:	20000000 	.word	0x20000000
 800063c:	2000004e 	.word	0x2000004e
 8000640:	2000004c 	.word	0x2000004c

08000644 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000648:	4a16      	ldr	r2, [pc, #88]	@ (80006a4 <MX_FREERTOS_Init+0x60>)
 800064a:	2100      	movs	r1, #0
 800064c:	4816      	ldr	r0, [pc, #88]	@ (80006a8 <MX_FREERTOS_Init+0x64>)
 800064e:	f003 fd05 	bl	800405c <osThreadNew>
 8000652:	4603      	mov	r3, r0
 8000654:	4a15      	ldr	r2, [pc, #84]	@ (80006ac <MX_FREERTOS_Init+0x68>)
 8000656:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(encoder, NULL, &encoderTask_attributes);
 8000658:	4a15      	ldr	r2, [pc, #84]	@ (80006b0 <MX_FREERTOS_Init+0x6c>)
 800065a:	2100      	movs	r1, #0
 800065c:	4815      	ldr	r0, [pc, #84]	@ (80006b4 <MX_FREERTOS_Init+0x70>)
 800065e:	f003 fcfd 	bl	800405c <osThreadNew>
 8000662:	4603      	mov	r3, r0
 8000664:	4a14      	ldr	r2, [pc, #80]	@ (80006b8 <MX_FREERTOS_Init+0x74>)
 8000666:	6013      	str	r3, [r2, #0]

  /* creation of lcdtestTask */
  lcdtestTaskHandle = osThreadNew(lcdTest, NULL, &lcdtestTask_attributes);
 8000668:	4a14      	ldr	r2, [pc, #80]	@ (80006bc <MX_FREERTOS_Init+0x78>)
 800066a:	2100      	movs	r1, #0
 800066c:	4814      	ldr	r0, [pc, #80]	@ (80006c0 <MX_FREERTOS_Init+0x7c>)
 800066e:	f003 fcf5 	bl	800405c <osThreadNew>
 8000672:	4603      	mov	r3, r0
 8000674:	4a13      	ldr	r2, [pc, #76]	@ (80006c4 <MX_FREERTOS_Init+0x80>)
 8000676:	6013      	str	r3, [r2, #0]

  /* creation of SM_Task */
  SM_TaskHandle = osThreadNew(StateMachine, NULL, &SM_Task_attributes);
 8000678:	4a13      	ldr	r2, [pc, #76]	@ (80006c8 <MX_FREERTOS_Init+0x84>)
 800067a:	2100      	movs	r1, #0
 800067c:	4813      	ldr	r0, [pc, #76]	@ (80006cc <MX_FREERTOS_Init+0x88>)
 800067e:	f003 fced 	bl	800405c <osThreadNew>
 8000682:	4603      	mov	r3, r0
 8000684:	4a12      	ldr	r2, [pc, #72]	@ (80006d0 <MX_FREERTOS_Init+0x8c>)
 8000686:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of smEvent */
  smEventHandle = osEventFlagsNew(&smEvent_attributes);
 8000688:	4812      	ldr	r0, [pc, #72]	@ (80006d4 <MX_FREERTOS_Init+0x90>)
 800068a:	f003 fd94 	bl	80041b6 <osEventFlagsNew>
 800068e:	4603      	mov	r3, r0
 8000690:	4a11      	ldr	r2, [pc, #68]	@ (80006d8 <MX_FREERTOS_Init+0x94>)
 8000692:	6013      	str	r3, [r2, #0]

  /* creation of funcEvent */
  funcEventHandle = osEventFlagsNew(&funcEvent_attributes);
 8000694:	4811      	ldr	r0, [pc, #68]	@ (80006dc <MX_FREERTOS_Init+0x98>)
 8000696:	f003 fd8e 	bl	80041b6 <osEventFlagsNew>
 800069a:	4603      	mov	r3, r0
 800069c:	4a10      	ldr	r2, [pc, #64]	@ (80006e0 <MX_FREERTOS_Init+0x9c>)
 800069e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	08006dcc 	.word	0x08006dcc
 80006a8:	080006e5 	.word	0x080006e5
 80006ac:	20000054 	.word	0x20000054
 80006b0:	08006df0 	.word	0x08006df0
 80006b4:	080006f5 	.word	0x080006f5
 80006b8:	20000058 	.word	0x20000058
 80006bc:	08006e14 	.word	0x08006e14
 80006c0:	0800070d 	.word	0x0800070d
 80006c4:	2000005c 	.word	0x2000005c
 80006c8:	08006e38 	.word	0x08006e38
 80006cc:	08000769 	.word	0x08000769
 80006d0:	20000060 	.word	0x20000060
 80006d4:	08006e5c 	.word	0x08006e5c
 80006d8:	20000064 	.word	0x20000064
 80006dc:	08006e6c 	.word	0x08006e6c
 80006e0:	20000068 	.word	0x20000068

080006e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006ec:	2001      	movs	r0, #1
 80006ee:	f003 fd47 	bl	8004180 <osDelay>
 80006f2:	e7fb      	b.n	80006ec <StartDefaultTask+0x8>

080006f4 <encoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder */
void encoder(void *argument)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoder */
  /* Infinite loop */
  for(;;)
  {
		encoder_update();
 80006fc:	f7ff ff1e 	bl	800053c <encoder_update>

		osDelay(10);  // 100 Hz
 8000700:	200a      	movs	r0, #10
 8000702:	f003 fd3d 	bl	8004180 <osDelay>
		encoder_update();
 8000706:	bf00      	nop
 8000708:	e7f8      	b.n	80006fc <encoder+0x8>
	...

0800070c <lcdTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_lcdTest */
void lcdTest(void *argument)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	static char s1[] = "Hello World!";
	static char s2[] = "Hihi";
  /* Infinite loop */
  for(;;)
  {
	clearLCD();
 8000714:	f000 f994 	bl	8000a40 <clearLCD>
	setCursor(0, 0);
 8000718:	2100      	movs	r1, #0
 800071a:	2000      	movs	r0, #0
 800071c:	f000 fa06 	bl	8000b2c <setCursor>
	writeLCD(s1);
 8000720:	480e      	ldr	r0, [pc, #56]	@ (800075c <lcdTest+0x50>)
 8000722:	f000 f997 	bl	8000a54 <writeLCD>
	setCursor(0, 1);
 8000726:	2101      	movs	r1, #1
 8000728:	2000      	movs	r0, #0
 800072a:	f000 f9ff 	bl	8000b2c <setCursor>
	writeLCD(s2);
 800072e:	480c      	ldr	r0, [pc, #48]	@ (8000760 <lcdTest+0x54>)
 8000730:	f000 f990 	bl	8000a54 <writeLCD>
	osDelay(1000);
 8000734:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000738:	f003 fd22 	bl	8004180 <osDelay>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800073c:	2201      	movs	r2, #1
 800073e:	2180      	movs	r1, #128	@ 0x80
 8000740:	4808      	ldr	r0, [pc, #32]	@ (8000764 <lcdTest+0x58>)
 8000742:	f001 f831 	bl	80017a8 <HAL_GPIO_WritePin>
	osDelay(1000);
 8000746:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800074a:	f003 fd19 	bl	8004180 <osDelay>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	2180      	movs	r1, #128	@ 0x80
 8000752:	4804      	ldr	r0, [pc, #16]	@ (8000764 <lcdTest+0x58>)
 8000754:	f001 f828 	bl	80017a8 <HAL_GPIO_WritePin>
	clearLCD();
 8000758:	bf00      	nop
 800075a:	e7db      	b.n	8000714 <lcdTest+0x8>
 800075c:	20000004 	.word	0x20000004
 8000760:	20000014 	.word	0x20000014
 8000764:	40020400 	.word	0x40020400

08000768 <StateMachine>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StateMachine */
void StateMachine(void *argument)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StateMachine */
  /* Infinite loop */
  for(;;)
  {
	uint32_t flags = osEventFlagsGet(smEventHandle);
 8000770:	4b0e      	ldr	r3, [pc, #56]	@ (80007ac <StateMachine+0x44>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4618      	mov	r0, r3
 8000776:	f003 fd5d 	bl	8004234 <osEventFlagsGet>
 800077a:	60f8      	str	r0, [r7, #12]

	if (!(flags & 0x0001)) {
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	2b00      	cmp	r3, #0
 8000784:	d1f4      	bne.n	8000770 <StateMachine+0x8>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000786:	2201      	movs	r2, #1
 8000788:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800078c:	4808      	ldr	r0, [pc, #32]	@ (80007b0 <StateMachine+0x48>)
 800078e:	f001 f80b 	bl	80017a8 <HAL_GPIO_WritePin>
		osDelay(50);
 8000792:	2032      	movs	r0, #50	@ 0x32
 8000794:	f003 fcf4 	bl	8004180 <osDelay>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800079e:	4804      	ldr	r0, [pc, #16]	@ (80007b0 <StateMachine+0x48>)
 80007a0:	f001 f802 	bl	80017a8 <HAL_GPIO_WritePin>
		osDelay(50);
 80007a4:	2032      	movs	r0, #50	@ 0x32
 80007a6:	f003 fceb 	bl	8004180 <osDelay>
  {
 80007aa:	e7e1      	b.n	8000770 <StateMachine+0x8>
 80007ac:	20000064 	.word	0x20000064
 80007b0:	40020400 	.word	0x40020400

080007b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08c      	sub	sp, #48	@ 0x30
 80007b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	61bb      	str	r3, [r7, #24]
 80007ce:	4b55      	ldr	r3, [pc, #340]	@ (8000924 <MX_GPIO_Init+0x170>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	4a54      	ldr	r2, [pc, #336]	@ (8000924 <MX_GPIO_Init+0x170>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007da:	4b52      	ldr	r3, [pc, #328]	@ (8000924 <MX_GPIO_Init+0x170>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	61bb      	str	r3, [r7, #24]
 80007e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	4b4e      	ldr	r3, [pc, #312]	@ (8000924 <MX_GPIO_Init+0x170>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a4d      	ldr	r2, [pc, #308]	@ (8000924 <MX_GPIO_Init+0x170>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b4b      	ldr	r3, [pc, #300]	@ (8000924 <MX_GPIO_Init+0x170>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007fe:	617b      	str	r3, [r7, #20]
 8000800:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	4b47      	ldr	r3, [pc, #284]	@ (8000924 <MX_GPIO_Init+0x170>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a46      	ldr	r2, [pc, #280]	@ (8000924 <MX_GPIO_Init+0x170>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b44      	ldr	r3, [pc, #272]	@ (8000924 <MX_GPIO_Init+0x170>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	4b40      	ldr	r3, [pc, #256]	@ (8000924 <MX_GPIO_Init+0x170>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a3f      	ldr	r2, [pc, #252]	@ (8000924 <MX_GPIO_Init+0x170>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b3d      	ldr	r3, [pc, #244]	@ (8000924 <MX_GPIO_Init+0x170>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	4b39      	ldr	r3, [pc, #228]	@ (8000924 <MX_GPIO_Init+0x170>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a38      	ldr	r2, [pc, #224]	@ (8000924 <MX_GPIO_Init+0x170>)
 8000844:	f043 0308 	orr.w	r3, r3, #8
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b36      	ldr	r3, [pc, #216]	@ (8000924 <MX_GPIO_Init+0x170>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0308 	and.w	r3, r3, #8
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b32      	ldr	r3, [pc, #200]	@ (8000924 <MX_GPIO_Init+0x170>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a31      	ldr	r2, [pc, #196]	@ (8000924 <MX_GPIO_Init+0x170>)
 8000860:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b2f      	ldr	r3, [pc, #188]	@ (8000924 <MX_GPIO_Init+0x170>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000878:	482b      	ldr	r0, [pc, #172]	@ (8000928 <MX_GPIO_Init+0x174>)
 800087a:	f000 ff95 	bl	80017a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2140      	movs	r1, #64	@ 0x40
 8000882:	482a      	ldr	r0, [pc, #168]	@ (800092c <MX_GPIO_Init+0x178>)
 8000884:	f000 ff90 	bl	80017a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_RS_Pin|LCD_E_Pin|LCD_D4_Pin|LCD_D5_Pin
 8000888:	2200      	movs	r2, #0
 800088a:	21fc      	movs	r1, #252	@ 0xfc
 800088c:	4828      	ldr	r0, [pc, #160]	@ (8000930 <MX_GPIO_Init+0x17c>)
 800088e:	f000 ff8b 	bl	80017a8 <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000892:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000898:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	4822      	ldr	r0, [pc, #136]	@ (8000934 <MX_GPIO_Init+0x180>)
 80008aa:	f000 fde9 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008ae:	f244 0381 	movw	r3, #16513	@ 0x4081
 80008b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	4818      	ldr	r0, [pc, #96]	@ (8000928 <MX_GPIO_Init+0x174>)
 80008c8:	f000 fdda 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008cc:	2340      	movs	r3, #64	@ 0x40
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	4812      	ldr	r0, [pc, #72]	@ (800092c <MX_GPIO_Init+0x178>)
 80008e4:	f000 fdcc 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008e8:	2380      	movs	r3, #128	@ 0x80
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ec:	2300      	movs	r3, #0
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	480c      	ldr	r0, [pc, #48]	@ (800092c <MX_GPIO_Init+0x178>)
 80008fc:	f000 fdc0 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_E_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_E_Pin|LCD_D4_Pin|LCD_D5_Pin
 8000900:	23fc      	movs	r3, #252	@ 0xfc
 8000902:	61fb      	str	r3, [r7, #28]
                          |LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000904:	2301      	movs	r3, #1
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000908:	2302      	movs	r3, #2
 800090a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	4806      	ldr	r0, [pc, #24]	@ (8000930 <MX_GPIO_Init+0x17c>)
 8000918:	f000 fdb2 	bl	8001480 <HAL_GPIO_Init>

}
 800091c:	bf00      	nop
 800091e:	3730      	adds	r7, #48	@ 0x30
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40023800 	.word	0x40023800
 8000928:	40020400 	.word	0x40020400
 800092c:	40021800 	.word	0x40021800
 8000930:	40020c00 	.word	0x40020c00
 8000934:	40020800 	.word	0x40020800

08000938 <fallingEdge>:
#define SET_IF(expr)  ((expr) ? GPIO_PIN_SET : GPIO_PIN_RESET)
char display_settings;

//Sending falling edge signal to EPin for waking up LCD
static void fallingEdge(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIO_PORT, E_Pin, GPIO_PIN_RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	2108      	movs	r1, #8
 8000940:	4808      	ldr	r0, [pc, #32]	@ (8000964 <fallingEdge+0x2c>)
 8000942:	f000 ff31 	bl	80017a8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PORT, E_Pin, GPIO_PIN_SET);
 8000946:	2201      	movs	r2, #1
 8000948:	2108      	movs	r1, #8
 800094a:	4806      	ldr	r0, [pc, #24]	@ (8000964 <fallingEdge+0x2c>)
 800094c:	f000 ff2c 	bl	80017a8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PORT, E_Pin, GPIO_PIN_RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	2108      	movs	r1, #8
 8000954:	4803      	ldr	r0, [pc, #12]	@ (8000964 <fallingEdge+0x2c>)
 8000956:	f000 ff27 	bl	80017a8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800095a:	2001      	movs	r0, #1
 800095c:	f000 fc5a 	bl	8001214 <HAL_Delay>
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40020c00 	.word	0x40020c00

08000968 <send4Bits>:

#ifndef LCD8Bit
	static void send4Bits(char data)
	{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(GPIO_PORT, DATA5_Pin, SET_IF(data&0x01));
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	f003 0301 	and.w	r3, r3, #1
 8000978:	b2db      	uxtb	r3, r3
 800097a:	461a      	mov	r2, r3
 800097c:	2110      	movs	r1, #16
 800097e:	4815      	ldr	r0, [pc, #84]	@ (80009d4 <send4Bits+0x6c>)
 8000980:	f000 ff12 	bl	80017a8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_PORT, DATA6_Pin, SET_IF(data&0x02));
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	105b      	asrs	r3, r3, #1
 8000988:	b2db      	uxtb	r3, r3
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	b2db      	uxtb	r3, r3
 8000990:	461a      	mov	r2, r3
 8000992:	2120      	movs	r1, #32
 8000994:	480f      	ldr	r0, [pc, #60]	@ (80009d4 <send4Bits+0x6c>)
 8000996:	f000 ff07 	bl	80017a8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_PORT, DATA7_Pin, SET_IF(data&0x04));
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	109b      	asrs	r3, r3, #2
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	f003 0301 	and.w	r3, r3, #1
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	461a      	mov	r2, r3
 80009a8:	2140      	movs	r1, #64	@ 0x40
 80009aa:	480a      	ldr	r0, [pc, #40]	@ (80009d4 <send4Bits+0x6c>)
 80009ac:	f000 fefc 	bl	80017a8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_PORT, DATA8_Pin, SET_IF(data&0x08));
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	10db      	asrs	r3, r3, #3
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	461a      	mov	r2, r3
 80009be:	2180      	movs	r1, #128	@ 0x80
 80009c0:	4804      	ldr	r0, [pc, #16]	@ (80009d4 <send4Bits+0x6c>)
 80009c2:	f000 fef1 	bl	80017a8 <HAL_GPIO_WritePin>

		fallingEdge();
 80009c6:	f7ff ffb7 	bl	8000938 <fallingEdge>
	}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40020c00 	.word	0x40020c00

080009d8 <sendCommand>:
		fallingEdge();
	}
#endif

static void sendCommand(char cmd)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
	#ifdef LCD8Bit
    	HAL_GPIO_WritePin(GPIO_PORT, RS_Pin, GPIO_PIN_RESET);
		send8Bits(cmd);
	#else
	    HAL_GPIO_WritePin(GPIO_PORT, RS_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2104      	movs	r1, #4
 80009e6:	4808      	ldr	r0, [pc, #32]	@ (8000a08 <sendCommand+0x30>)
 80009e8:	f000 fede 	bl	80017a8 <HAL_GPIO_WritePin>
		send4Bits(cmd >> 4);
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	091b      	lsrs	r3, r3, #4
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff ffb8 	bl	8000968 <send4Bits>
		send4Bits(cmd);
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff ffb4 	bl	8000968 <send4Bits>
	#endif
}
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40020c00 	.word	0x40020c00

08000a0c <sendData>:

static void sendData(char data)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
	#ifdef LCD8Bit
    	HAL_GPIO_WritePin(GPIO_PORT, RS_Pin, GPIO_PIN_SET);
		send8Bits(data);
	#else
	    HAL_GPIO_WritePin(GPIO_PORT, RS_Pin, GPIO_PIN_SET);
 8000a16:	2201      	movs	r2, #1
 8000a18:	2104      	movs	r1, #4
 8000a1a:	4808      	ldr	r0, [pc, #32]	@ (8000a3c <sendData+0x30>)
 8000a1c:	f000 fec4 	bl	80017a8 <HAL_GPIO_WritePin>
		send4Bits(data >> 4);
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	091b      	lsrs	r3, r3, #4
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff ff9e 	bl	8000968 <send4Bits>
		send4Bits(data);
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff ff9a 	bl	8000968 <send4Bits>
	#endif
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40020c00 	.word	0x40020c00

08000a40 <clearLCD>:

void clearLCD(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	sendCommand(LCD_CLEARDISPLAY);
 8000a44:	2001      	movs	r0, #1
 8000a46:	f7ff ffc7 	bl	80009d8 <sendCommand>
	HAL_Delay(5);
 8000a4a:	2005      	movs	r0, #5
 8000a4c:	f000 fbe2 	bl	8001214 <HAL_Delay>
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <writeLCD>:
{
	sendData(c);
}

void writeLCD (char *str)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	for(; *str != 0; ++str)
 8000a5c:	e007      	b.n	8000a6e <writeLCD+0x1a>
	{
		sendData(*str);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff ffd2 	bl	8000a0c <sendData>
	for(; *str != 0; ++str)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d1f3      	bne.n	8000a5e <writeLCD+0xa>
	}
}
 8000a76:	bf00      	nop
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <initLCD>:

void initLCD(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIO_PORT, E_Pin,  	 GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	2108      	movs	r1, #8
 8000a88:	4826      	ldr	r0, [pc, #152]	@ (8000b24 <initLCD+0xa4>)
 8000a8a:	f000 fe8d 	bl	80017a8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PORT, RS_Pin, 	 GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2104      	movs	r1, #4
 8000a92:	4824      	ldr	r0, [pc, #144]	@ (8000b24 <initLCD+0xa4>)
 8000a94:	f000 fe88 	bl	80017a8 <HAL_GPIO_WritePin>

	HAL_Delay(50);
 8000a98:	2032      	movs	r0, #50	@ 0x32
 8000a9a:	f000 fbbb 	bl	8001214 <HAL_Delay>
		HAL_Delay(5);
		sendCommand(LCD_FUNCTIONSET | display_settings);
		HAL_Delay(5);

	#else
		display_settings = LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS;
 8000a9e:	4b22      	ldr	r3, [pc, #136]	@ (8000b28 <initLCD+0xa8>)
 8000aa0:	2208      	movs	r2, #8
 8000aa2:	701a      	strb	r2, [r3, #0]
		send4Bits(0x03);
		HAL_Delay(2);
		send4Bits(0x02);
		HAL_Delay(2);*/

		send4Bits(0x03);
 8000aa4:	2003      	movs	r0, #3
 8000aa6:	f7ff ff5f 	bl	8000968 <send4Bits>
		HAL_Delay(10);
 8000aaa:	200a      	movs	r0, #10
 8000aac:	f000 fbb2 	bl	8001214 <HAL_Delay>
		send4Bits(0x03);
 8000ab0:	2003      	movs	r0, #3
 8000ab2:	f7ff ff59 	bl	8000968 <send4Bits>
		HAL_Delay(10);
 8000ab6:	200a      	movs	r0, #10
 8000ab8:	f000 fbac 	bl	8001214 <HAL_Delay>
		send4Bits(0x03);
 8000abc:	2003      	movs	r0, #3
 8000abe:	f7ff ff53 	bl	8000968 <send4Bits>
		HAL_Delay(10);
 8000ac2:	200a      	movs	r0, #10
 8000ac4:	f000 fba6 	bl	8001214 <HAL_Delay>
		send4Bits(0x02);
 8000ac8:	2002      	movs	r0, #2
 8000aca:	f7ff ff4d 	bl	8000968 <send4Bits>
		HAL_Delay(10);
 8000ace:	200a      	movs	r0, #10
 8000ad0:	f000 fba0 	bl	8001214 <HAL_Delay>
	#endif
		sendCommand(LCD_FUNCTIONSET | display_settings);
 8000ad4:	4b14      	ldr	r3, [pc, #80]	@ (8000b28 <initLCD+0xa8>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	f043 0320 	orr.w	r3, r3, #32
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff ff7a 	bl	80009d8 <sendCommand>
		display_settings = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000ae4:	4b10      	ldr	r3, [pc, #64]	@ (8000b28 <initLCD+0xa8>)
 8000ae6:	2204      	movs	r2, #4
 8000ae8:	701a      	strb	r2, [r3, #0]
		sendCommand(LCD_DISPLAYCONTROL | display_settings);
 8000aea:	4b0f      	ldr	r3, [pc, #60]	@ (8000b28 <initLCD+0xa8>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	f043 0308 	orr.w	r3, r3, #8
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff ff6f 	bl	80009d8 <sendCommand>
		HAL_Delay(2);
 8000afa:	2002      	movs	r0, #2
 8000afc:	f000 fb8a 	bl	8001214 <HAL_Delay>

		clearLCD();
 8000b00:	f7ff ff9e 	bl	8000a40 <clearLCD>
		display_settings =  LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000b04:	4b08      	ldr	r3, [pc, #32]	@ (8000b28 <initLCD+0xa8>)
 8000b06:	2202      	movs	r2, #2
 8000b08:	701a      	strb	r2, [r3, #0]
		sendCommand(LCD_ENTRYMODESET | display_settings);
 8000b0a:	4b07      	ldr	r3, [pc, #28]	@ (8000b28 <initLCD+0xa8>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	f043 0304 	orr.w	r3, r3, #4
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff ff5f 	bl	80009d8 <sendCommand>
		HAL_Delay(2);
 8000b1a:	2002      	movs	r0, #2
 8000b1c:	f000 fb7a 	bl	8001214 <HAL_Delay>
}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40020c00 	.word	0x40020c00
 8000b28:	2000006c 	.word	0x2000006c

08000b2c <setCursor>:


void setCursor(char x, char y)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	460a      	mov	r2, r1
 8000b36:	71fb      	strb	r3, [r7, #7]
 8000b38:	4613      	mov	r3, r2
 8000b3a:	71bb      	strb	r3, [r7, #6]
	uint8_t base = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	73fb      	strb	r3, [r7, #15]

	if(y == 1)
 8000b40:	79bb      	ldrb	r3, [r7, #6]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d102      	bne.n	8000b4c <setCursor+0x20>
	{
		base = 0x40;
 8000b46:	2340      	movs	r3, #64	@ 0x40
 8000b48:	73fb      	strb	r3, [r7, #15]
 8000b4a:	e001      	b.n	8000b50 <setCursor+0x24>
	}
	else
	{
		base = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	73fb      	strb	r3, [r7, #15]
	}

	sendCommand( 0x80 | (base + x));
 8000b50:	7bfa      	ldrb	r2, [r7, #15]
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	4413      	add	r3, r2
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	b25b      	sxtb	r3, r3
 8000b5a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b5e:	b25b      	sxtb	r3, r3
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff ff38 	bl	80009d8 <sendCommand>
}
 8000b68:	bf00      	nop
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b74:	f000 fadc 	bl	8001130 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b78:	f000 f81c 	bl	8000bb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b7c:	f7ff fe1a 	bl	80007b4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000b80:	f000 f99c 	bl	8000ebc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b84:	f000 fa0c 	bl	8000fa0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000b88:	f000 f8f6 	bl	8000d78 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000b8c:	213c      	movs	r1, #60	@ 0x3c
 8000b8e:	4808      	ldr	r0, [pc, #32]	@ (8000bb0 <main+0x40>)
 8000b90:	f002 f916 	bl	8002dc0 <HAL_TIM_Encoder_Start>

  HAL_Delay(100);
 8000b94:	2064      	movs	r0, #100	@ 0x64
 8000b96:	f000 fb3d 	bl	8001214 <HAL_Delay>
  initLCD();
 8000b9a:	f7ff ff71 	bl	8000a80 <initLCD>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b9e:	f003 fa13 	bl	8003fc8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000ba2:	f7ff fd4f 	bl	8000644 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000ba6:	f003 fa33 	bl	8004010 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000baa:	bf00      	nop
 8000bac:	e7fd      	b.n	8000baa <main+0x3a>
 8000bae:	bf00      	nop
 8000bb0:	20000070 	.word	0x20000070

08000bb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b094      	sub	sp, #80	@ 0x50
 8000bb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	2234      	movs	r2, #52	@ 0x34
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f006 f890 	bl	8006ce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc8:	f107 0308 	add.w	r3, r7, #8
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd8:	2300      	movs	r3, #0
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	4b29      	ldr	r3, [pc, #164]	@ (8000c84 <SystemClock_Config+0xd0>)
 8000bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be0:	4a28      	ldr	r2, [pc, #160]	@ (8000c84 <SystemClock_Config+0xd0>)
 8000be2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000be6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000be8:	4b26      	ldr	r3, [pc, #152]	@ (8000c84 <SystemClock_Config+0xd0>)
 8000bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	4b23      	ldr	r3, [pc, #140]	@ (8000c88 <SystemClock_Config+0xd4>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a22      	ldr	r2, [pc, #136]	@ (8000c88 <SystemClock_Config+0xd4>)
 8000bfe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c02:	6013      	str	r3, [r2, #0]
 8000c04:	4b20      	ldr	r3, [pc, #128]	@ (8000c88 <SystemClock_Config+0xd4>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c0c:	603b      	str	r3, [r7, #0]
 8000c0e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c10:	2301      	movs	r3, #1
 8000c12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c14:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000c18:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c1e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c22:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c24:	2304      	movs	r3, #4
 8000c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c28:	23a8      	movs	r3, #168	@ 0xa8
 8000c2a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c30:	2307      	movs	r3, #7
 8000c32:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c34:	2302      	movs	r3, #2
 8000c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c38:	f107 031c 	add.w	r3, r7, #28
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f001 fd7b 	bl	8002738 <HAL_RCC_OscConfig>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c48:	f000 f820 	bl	8000c8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c4c:	230f      	movs	r3, #15
 8000c4e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c50:	2302      	movs	r3, #2
 8000c52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c58:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c5c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c62:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c64:	f107 0308 	add.w	r3, r7, #8
 8000c68:	2105      	movs	r1, #5
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 fef0 	bl	8001a50 <HAL_RCC_ClockConfig>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c76:	f000 f809 	bl	8000c8c <Error_Handler>
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	3750      	adds	r7, #80	@ 0x50
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40007000 	.word	0x40007000

08000c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c90:	b672      	cpsid	i
}
 8000c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <Error_Handler+0x8>

08000c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	4b12      	ldr	r3, [pc, #72]	@ (8000cec <HAL_MspInit+0x54>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca6:	4a11      	ldr	r2, [pc, #68]	@ (8000cec <HAL_MspInit+0x54>)
 8000ca8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cae:	4b0f      	ldr	r3, [pc, #60]	@ (8000cec <HAL_MspInit+0x54>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	603b      	str	r3, [r7, #0]
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000cec <HAL_MspInit+0x54>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cec <HAL_MspInit+0x54>)
 8000cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cca:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <HAL_MspInit+0x54>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	210f      	movs	r1, #15
 8000cda:	f06f 0001 	mvn.w	r0, #1
 8000cde:	f000 fb98 	bl	8001412 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800

08000cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <NMI_Handler+0x4>

08000cf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <HardFault_Handler+0x4>

08000d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <MemManage_Handler+0x4>

08000d08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <BusFault_Handler+0x4>

08000d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <UsageFault_Handler+0x4>

08000d18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d2a:	f000 fa53 	bl	80011d4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d2e:	f004 ff5f 	bl	8005bf0 <xTaskGetSchedulerState>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d001      	beq.n	8000d3c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d38:	f005 fd56 	bl	80067e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d44:	4802      	ldr	r0, [pc, #8]	@ (8000d50 <TIM2_IRQHandler+0x10>)
 8000d46:	f002 f8c9 	bl	8002edc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000070 	.word	0x20000070

08000d54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d58:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <SystemInit+0x20>)
 8000d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d5e:	4a05      	ldr	r2, [pc, #20]	@ (8000d74 <SystemInit+0x20>)
 8000d60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08c      	sub	sp, #48	@ 0x30
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d7e:	f107 030c 	add.w	r3, r7, #12
 8000d82:	2224      	movs	r2, #36	@ 0x24
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f005 ffae 	bl	8006ce8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d94:	4b21      	ldr	r3, [pc, #132]	@ (8000e1c <MX_TIM2_Init+0xa4>)
 8000d96:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000e1c <MX_TIM2_Init+0xa4>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da2:	4b1e      	ldr	r3, [pc, #120]	@ (8000e1c <MX_TIM2_Init+0xa4>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000da8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e1c <MX_TIM2_Init+0xa4>)
 8000daa:	f04f 32ff 	mov.w	r2, #4294967295
 8000dae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e1c <MX_TIM2_Init+0xa4>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db6:	4b19      	ldr	r3, [pc, #100]	@ (8000e1c <MX_TIM2_Init+0xa4>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000de0:	f107 030c 	add.w	r3, r7, #12
 8000de4:	4619      	mov	r1, r3
 8000de6:	480d      	ldr	r0, [pc, #52]	@ (8000e1c <MX_TIM2_Init+0xa4>)
 8000de8:	f001 ff44 	bl	8002c74 <HAL_TIM_Encoder_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000df2:	f7ff ff4b 	bl	8000c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	4619      	mov	r1, r3
 8000e02:	4806      	ldr	r0, [pc, #24]	@ (8000e1c <MX_TIM2_Init+0xa4>)
 8000e04:	f002 fa58 	bl	80032b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000e0e:	f7ff ff3d 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	3730      	adds	r7, #48	@ 0x30
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000070 	.word	0x20000070

08000e20 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	@ 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e40:	d133      	bne.n	8000eaa <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb4 <HAL_TIM_Encoder_MspInit+0x94>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4a:	4a1a      	ldr	r2, [pc, #104]	@ (8000eb4 <HAL_TIM_Encoder_MspInit+0x94>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e52:	4b18      	ldr	r3, [pc, #96]	@ (8000eb4 <HAL_TIM_Encoder_MspInit+0x94>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b14      	ldr	r3, [pc, #80]	@ (8000eb4 <HAL_TIM_Encoder_MspInit+0x94>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	4a13      	ldr	r2, [pc, #76]	@ (8000eb4 <HAL_TIM_Encoder_MspInit+0x94>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6e:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <HAL_TIM_Encoder_MspInit+0x94>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4619      	mov	r1, r3
 8000e94:	4808      	ldr	r0, [pc, #32]	@ (8000eb8 <HAL_TIM_Encoder_MspInit+0x98>)
 8000e96:	f000 faf3 	bl	8001480 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2105      	movs	r1, #5
 8000e9e:	201c      	movs	r0, #28
 8000ea0:	f000 fab7 	bl	8001412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ea4:	201c      	movs	r0, #28
 8000ea6:	f000 fad0 	bl	800144a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000eaa:	bf00      	nop
 8000eac:	3728      	adds	r7, #40	@ 0x28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40020000 	.word	0x40020000

08000ebc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	@ (8000f08 <MX_USART3_UART_Init+0x4c>)
 8000ec2:	4a12      	ldr	r2, [pc, #72]	@ (8000f0c <MX_USART3_UART_Init+0x50>)
 8000ec4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ec6:	4b10      	ldr	r3, [pc, #64]	@ (8000f08 <MX_USART3_UART_Init+0x4c>)
 8000ec8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ecc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ece:	4b0e      	ldr	r3, [pc, #56]	@ (8000f08 <MX_USART3_UART_Init+0x4c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <MX_USART3_UART_Init+0x4c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000eda:	4b0b      	ldr	r3, [pc, #44]	@ (8000f08 <MX_USART3_UART_Init+0x4c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ee0:	4b09      	ldr	r3, [pc, #36]	@ (8000f08 <MX_USART3_UART_Init+0x4c>)
 8000ee2:	220c      	movs	r2, #12
 8000ee4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ee6:	4b08      	ldr	r3, [pc, #32]	@ (8000f08 <MX_USART3_UART_Init+0x4c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eec:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <MX_USART3_UART_Init+0x4c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ef2:	4805      	ldr	r0, [pc, #20]	@ (8000f08 <MX_USART3_UART_Init+0x4c>)
 8000ef4:	f002 fa70 	bl	80033d8 <HAL_UART_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000efe:	f7ff fec5 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200000b8 	.word	0x200000b8
 8000f0c:	40004800 	.word	0x40004800

08000f10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	@ 0x28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a19      	ldr	r2, [pc, #100]	@ (8000f94 <HAL_UART_MspInit+0x84>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d12c      	bne.n	8000f8c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	4b18      	ldr	r3, [pc, #96]	@ (8000f98 <HAL_UART_MspInit+0x88>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3a:	4a17      	ldr	r2, [pc, #92]	@ (8000f98 <HAL_UART_MspInit+0x88>)
 8000f3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f42:	4b15      	ldr	r3, [pc, #84]	@ (8000f98 <HAL_UART_MspInit+0x88>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	4b11      	ldr	r3, [pc, #68]	@ (8000f98 <HAL_UART_MspInit+0x88>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	4a10      	ldr	r2, [pc, #64]	@ (8000f98 <HAL_UART_MspInit+0x88>)
 8000f58:	f043 0308 	orr.w	r3, r3, #8
 8000f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f98 <HAL_UART_MspInit+0x88>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	f003 0308 	and.w	r3, r3, #8
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f6a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f7c:	2307      	movs	r3, #7
 8000f7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	4619      	mov	r1, r3
 8000f86:	4805      	ldr	r0, [pc, #20]	@ (8000f9c <HAL_UART_MspInit+0x8c>)
 8000f88:	f000 fa7a 	bl	8001480 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	3728      	adds	r7, #40	@ 0x28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40004800 	.word	0x40004800
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40020c00 	.word	0x40020c00

08000fa0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fa4:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fa6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000faa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000fac:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fae:	2206      	movs	r2, #6
 8000fb0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000fb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000fca:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000fd0:	4b09      	ldr	r3, [pc, #36]	@ (8000ff8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000fd6:	4b08      	ldr	r3, [pc, #32]	@ (8000ff8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000fe2:	4805      	ldr	r0, [pc, #20]	@ (8000ff8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fe4:	f000 fbf9 	bl	80017da <HAL_PCD_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000fee:	f7ff fe4d 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000100 	.word	0x20000100

08000ffc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b0a0      	sub	sp, #128	@ 0x80
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	225c      	movs	r2, #92	@ 0x5c
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f005 fe63 	bl	8006ce8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800102a:	d14e      	bne.n	80010ca <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800102c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001030:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001032:	2300      	movs	r3, #0
 8001034:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001036:	f107 0310 	add.w	r3, r7, #16
 800103a:	4618      	mov	r0, r3
 800103c:	f000 fe22 	bl	8001c84 <HAL_RCCEx_PeriphCLKConfig>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8001046:	f7ff fe21 	bl	8000c8c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	4b21      	ldr	r3, [pc, #132]	@ (80010d4 <HAL_PCD_MspInit+0xd8>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001052:	4a20      	ldr	r2, [pc, #128]	@ (80010d4 <HAL_PCD_MspInit+0xd8>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6313      	str	r3, [r2, #48]	@ 0x30
 800105a:	4b1e      	ldr	r3, [pc, #120]	@ (80010d4 <HAL_PCD_MspInit+0xd8>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001066:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800106a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001074:	2303      	movs	r3, #3
 8001076:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001078:	230a      	movs	r3, #10
 800107a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001080:	4619      	mov	r1, r3
 8001082:	4815      	ldr	r0, [pc, #84]	@ (80010d8 <HAL_PCD_MspInit+0xdc>)
 8001084:	f000 f9fc 	bl	8001480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001088:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800108c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800108e:	2300      	movs	r3, #0
 8001090:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001096:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800109a:	4619      	mov	r1, r3
 800109c:	480e      	ldr	r0, [pc, #56]	@ (80010d8 <HAL_PCD_MspInit+0xdc>)
 800109e:	f000 f9ef 	bl	8001480 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010a2:	4b0c      	ldr	r3, [pc, #48]	@ (80010d4 <HAL_PCD_MspInit+0xd8>)
 80010a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010a6:	4a0b      	ldr	r2, [pc, #44]	@ (80010d4 <HAL_PCD_MspInit+0xd8>)
 80010a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010ac:	6353      	str	r3, [r2, #52]	@ 0x34
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	4b08      	ldr	r3, [pc, #32]	@ (80010d4 <HAL_PCD_MspInit+0xd8>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b6:	4a07      	ldr	r2, [pc, #28]	@ (80010d4 <HAL_PCD_MspInit+0xd8>)
 80010b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80010be:	4b05      	ldr	r3, [pc, #20]	@ (80010d4 <HAL_PCD_MspInit+0xd8>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80010ca:	bf00      	nop
 80010cc:	3780      	adds	r7, #128	@ 0x80
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40020000 	.word	0x40020000

080010dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001114 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010e0:	f7ff fe38 	bl	8000d54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010e4:	480c      	ldr	r0, [pc, #48]	@ (8001118 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010e6:	490d      	ldr	r1, [pc, #52]	@ (800111c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001120 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ec:	e002      	b.n	80010f4 <LoopCopyDataInit>

080010ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010f2:	3304      	adds	r3, #4

080010f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f8:	d3f9      	bcc.n	80010ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001124 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001128 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001100:	e001      	b.n	8001106 <LoopFillZerobss>

08001102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001104:	3204      	adds	r2, #4

08001106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001108:	d3fb      	bcc.n	8001102 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800110a:	f005 fdf5 	bl	8006cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800110e:	f7ff fd2f 	bl	8000b70 <main>
  bx  lr    
 8001112:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001114:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800111c:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001120:	08006ea4 	.word	0x08006ea4
  ldr r2, =_sbss
 8001124:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001128:	20004f38 	.word	0x20004f38

0800112c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800112c:	e7fe      	b.n	800112c <ADC_IRQHandler>
	...

08001130 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001134:	4b0e      	ldr	r3, [pc, #56]	@ (8001170 <HAL_Init+0x40>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a0d      	ldr	r2, [pc, #52]	@ (8001170 <HAL_Init+0x40>)
 800113a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800113e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001140:	4b0b      	ldr	r3, [pc, #44]	@ (8001170 <HAL_Init+0x40>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a0a      	ldr	r2, [pc, #40]	@ (8001170 <HAL_Init+0x40>)
 8001146:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800114a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800114c:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <HAL_Init+0x40>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a07      	ldr	r2, [pc, #28]	@ (8001170 <HAL_Init+0x40>)
 8001152:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001156:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001158:	2003      	movs	r0, #3
 800115a:	f000 f94f 	bl	80013fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800115e:	200f      	movs	r0, #15
 8001160:	f000 f808 	bl	8001174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001164:	f7ff fd98 	bl	8000c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40023c00 	.word	0x40023c00

08001174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800117c:	4b12      	ldr	r3, [pc, #72]	@ (80011c8 <HAL_InitTick+0x54>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <HAL_InitTick+0x58>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4619      	mov	r1, r3
 8001186:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800118a:	fbb3 f3f1 	udiv	r3, r3, r1
 800118e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001192:	4618      	mov	r0, r3
 8001194:	f000 f967 	bl	8001466 <HAL_SYSTICK_Config>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e00e      	b.n	80011c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b0f      	cmp	r3, #15
 80011a6:	d80a      	bhi.n	80011be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a8:	2200      	movs	r2, #0
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295
 80011b0:	f000 f92f 	bl	8001412 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b4:	4a06      	ldr	r2, [pc, #24]	@ (80011d0 <HAL_InitTick+0x5c>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ba:	2300      	movs	r3, #0
 80011bc:	e000      	b.n	80011c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	2000001c 	.word	0x2000001c
 80011cc:	20000024 	.word	0x20000024
 80011d0:	20000020 	.word	0x20000020

080011d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d8:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <HAL_IncTick+0x20>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <HAL_IncTick+0x24>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4413      	add	r3, r2
 80011e4:	4a04      	ldr	r2, [pc, #16]	@ (80011f8 <HAL_IncTick+0x24>)
 80011e6:	6013      	str	r3, [r2, #0]
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	20000024 	.word	0x20000024
 80011f8:	200005e4 	.word	0x200005e4

080011fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001200:	4b03      	ldr	r3, [pc, #12]	@ (8001210 <HAL_GetTick+0x14>)
 8001202:	681b      	ldr	r3, [r3, #0]
}
 8001204:	4618      	mov	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	200005e4 	.word	0x200005e4

08001214 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800121c:	f7ff ffee 	bl	80011fc <HAL_GetTick>
 8001220:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800122c:	d005      	beq.n	800123a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800122e:	4b0a      	ldr	r3, [pc, #40]	@ (8001258 <HAL_Delay+0x44>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4413      	add	r3, r2
 8001238:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800123a:	bf00      	nop
 800123c:	f7ff ffde 	bl	80011fc <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	429a      	cmp	r2, r3
 800124a:	d8f7      	bhi.n	800123c <HAL_Delay+0x28>
  {
  }
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000024 	.word	0x20000024

0800125c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800126c:	4b0c      	ldr	r3, [pc, #48]	@ (80012a0 <__NVIC_SetPriorityGrouping+0x44>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001278:	4013      	ands	r3, r2
 800127a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001284:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001288:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800128c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800128e:	4a04      	ldr	r2, [pc, #16]	@ (80012a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	60d3      	str	r3, [r2, #12]
}
 8001294:	bf00      	nop
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a8:	4b04      	ldr	r3, [pc, #16]	@ (80012bc <__NVIC_GetPriorityGrouping+0x18>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	0a1b      	lsrs	r3, r3, #8
 80012ae:	f003 0307 	and.w	r3, r3, #7
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	db0b      	blt.n	80012ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	f003 021f 	and.w	r2, r3, #31
 80012d8:	4907      	ldr	r1, [pc, #28]	@ (80012f8 <__NVIC_EnableIRQ+0x38>)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	095b      	lsrs	r3, r3, #5
 80012e0:	2001      	movs	r0, #1
 80012e2:	fa00 f202 	lsl.w	r2, r0, r2
 80012e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000e100 	.word	0xe000e100

080012fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	6039      	str	r1, [r7, #0]
 8001306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	2b00      	cmp	r3, #0
 800130e:	db0a      	blt.n	8001326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	b2da      	uxtb	r2, r3
 8001314:	490c      	ldr	r1, [pc, #48]	@ (8001348 <__NVIC_SetPriority+0x4c>)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	0112      	lsls	r2, r2, #4
 800131c:	b2d2      	uxtb	r2, r2
 800131e:	440b      	add	r3, r1
 8001320:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001324:	e00a      	b.n	800133c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4908      	ldr	r1, [pc, #32]	@ (800134c <__NVIC_SetPriority+0x50>)
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	3b04      	subs	r3, #4
 8001334:	0112      	lsls	r2, r2, #4
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	440b      	add	r3, r1
 800133a:	761a      	strb	r2, [r3, #24]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000e100 	.word	0xe000e100
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001350:	b480      	push	{r7}
 8001352:	b089      	sub	sp, #36	@ 0x24
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f1c3 0307 	rsb	r3, r3, #7
 800136a:	2b04      	cmp	r3, #4
 800136c:	bf28      	it	cs
 800136e:	2304      	movcs	r3, #4
 8001370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3304      	adds	r3, #4
 8001376:	2b06      	cmp	r3, #6
 8001378:	d902      	bls.n	8001380 <NVIC_EncodePriority+0x30>
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3b03      	subs	r3, #3
 800137e:	e000      	b.n	8001382 <NVIC_EncodePriority+0x32>
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001384:	f04f 32ff 	mov.w	r2, #4294967295
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43da      	mvns	r2, r3
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	401a      	ands	r2, r3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001398:	f04f 31ff 	mov.w	r1, #4294967295
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	fa01 f303 	lsl.w	r3, r1, r3
 80013a2:	43d9      	mvns	r1, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	4313      	orrs	r3, r2
         );
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3724      	adds	r7, #36	@ 0x24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013c8:	d301      	bcc.n	80013ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ca:	2301      	movs	r3, #1
 80013cc:	e00f      	b.n	80013ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ce:	4a0a      	ldr	r2, [pc, #40]	@ (80013f8 <SysTick_Config+0x40>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013d6:	210f      	movs	r1, #15
 80013d8:	f04f 30ff 	mov.w	r0, #4294967295
 80013dc:	f7ff ff8e 	bl	80012fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e0:	4b05      	ldr	r3, [pc, #20]	@ (80013f8 <SysTick_Config+0x40>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e6:	4b04      	ldr	r3, [pc, #16]	@ (80013f8 <SysTick_Config+0x40>)
 80013e8:	2207      	movs	r2, #7
 80013ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	e000e010 	.word	0xe000e010

080013fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff ff29 	bl	800125c <__NVIC_SetPriorityGrouping>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001412:	b580      	push	{r7, lr}
 8001414:	b086      	sub	sp, #24
 8001416:	af00      	add	r7, sp, #0
 8001418:	4603      	mov	r3, r0
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001424:	f7ff ff3e 	bl	80012a4 <__NVIC_GetPriorityGrouping>
 8001428:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	68b9      	ldr	r1, [r7, #8]
 800142e:	6978      	ldr	r0, [r7, #20]
 8001430:	f7ff ff8e 	bl	8001350 <NVIC_EncodePriority>
 8001434:	4602      	mov	r2, r0
 8001436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143a:	4611      	mov	r1, r2
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ff5d 	bl	80012fc <__NVIC_SetPriority>
}
 8001442:	bf00      	nop
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff31 	bl	80012c0 <__NVIC_EnableIRQ>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff ffa2 	bl	80013b8 <SysTick_Config>
 8001474:	4603      	mov	r3, r0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
	...

08001480 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001480:	b480      	push	{r7}
 8001482:	b089      	sub	sp, #36	@ 0x24
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001492:	2300      	movs	r3, #0
 8001494:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
 800149a:	e165      	b.n	8001768 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800149c:	2201      	movs	r2, #1
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	697a      	ldr	r2, [r7, #20]
 80014ac:	4013      	ands	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	f040 8154 	bne.w	8001762 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f003 0303 	and.w	r3, r3, #3
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d005      	beq.n	80014d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d130      	bne.n	8001534 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	2203      	movs	r2, #3
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4013      	ands	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	68da      	ldr	r2, [r3, #12]
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001508:	2201      	movs	r2, #1
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4013      	ands	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	091b      	lsrs	r3, r3, #4
 800151e:	f003 0201 	and.w	r2, r3, #1
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4313      	orrs	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 0303 	and.w	r3, r3, #3
 800153c:	2b03      	cmp	r3, #3
 800153e:	d017      	beq.n	8001570 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	2203      	movs	r2, #3
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43db      	mvns	r3, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	689a      	ldr	r2, [r3, #8]
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 0303 	and.w	r3, r3, #3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d123      	bne.n	80015c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	08da      	lsrs	r2, r3, #3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3208      	adds	r2, #8
 8001584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001588:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	f003 0307 	and.w	r3, r3, #7
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	220f      	movs	r2, #15
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	691a      	ldr	r2, [r3, #16]
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	08da      	lsrs	r2, r3, #3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	3208      	adds	r2, #8
 80015be:	69b9      	ldr	r1, [r7, #24]
 80015c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	2203      	movs	r2, #3
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	43db      	mvns	r3, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4013      	ands	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 0203 	and.w	r2, r3, #3
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001600:	2b00      	cmp	r3, #0
 8001602:	f000 80ae 	beq.w	8001762 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	4b5d      	ldr	r3, [pc, #372]	@ (8001780 <HAL_GPIO_Init+0x300>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160e:	4a5c      	ldr	r2, [pc, #368]	@ (8001780 <HAL_GPIO_Init+0x300>)
 8001610:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001614:	6453      	str	r3, [r2, #68]	@ 0x44
 8001616:	4b5a      	ldr	r3, [pc, #360]	@ (8001780 <HAL_GPIO_Init+0x300>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800161a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001622:	4a58      	ldr	r2, [pc, #352]	@ (8001784 <HAL_GPIO_Init+0x304>)
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	089b      	lsrs	r3, r3, #2
 8001628:	3302      	adds	r3, #2
 800162a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f003 0303 	and.w	r3, r3, #3
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	220f      	movs	r2, #15
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43db      	mvns	r3, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4013      	ands	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a4f      	ldr	r2, [pc, #316]	@ (8001788 <HAL_GPIO_Init+0x308>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d025      	beq.n	800169a <HAL_GPIO_Init+0x21a>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a4e      	ldr	r2, [pc, #312]	@ (800178c <HAL_GPIO_Init+0x30c>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d01f      	beq.n	8001696 <HAL_GPIO_Init+0x216>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a4d      	ldr	r2, [pc, #308]	@ (8001790 <HAL_GPIO_Init+0x310>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d019      	beq.n	8001692 <HAL_GPIO_Init+0x212>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a4c      	ldr	r2, [pc, #304]	@ (8001794 <HAL_GPIO_Init+0x314>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d013      	beq.n	800168e <HAL_GPIO_Init+0x20e>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a4b      	ldr	r2, [pc, #300]	@ (8001798 <HAL_GPIO_Init+0x318>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d00d      	beq.n	800168a <HAL_GPIO_Init+0x20a>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a4a      	ldr	r2, [pc, #296]	@ (800179c <HAL_GPIO_Init+0x31c>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d007      	beq.n	8001686 <HAL_GPIO_Init+0x206>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a49      	ldr	r2, [pc, #292]	@ (80017a0 <HAL_GPIO_Init+0x320>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d101      	bne.n	8001682 <HAL_GPIO_Init+0x202>
 800167e:	2306      	movs	r3, #6
 8001680:	e00c      	b.n	800169c <HAL_GPIO_Init+0x21c>
 8001682:	2307      	movs	r3, #7
 8001684:	e00a      	b.n	800169c <HAL_GPIO_Init+0x21c>
 8001686:	2305      	movs	r3, #5
 8001688:	e008      	b.n	800169c <HAL_GPIO_Init+0x21c>
 800168a:	2304      	movs	r3, #4
 800168c:	e006      	b.n	800169c <HAL_GPIO_Init+0x21c>
 800168e:	2303      	movs	r3, #3
 8001690:	e004      	b.n	800169c <HAL_GPIO_Init+0x21c>
 8001692:	2302      	movs	r3, #2
 8001694:	e002      	b.n	800169c <HAL_GPIO_Init+0x21c>
 8001696:	2301      	movs	r3, #1
 8001698:	e000      	b.n	800169c <HAL_GPIO_Init+0x21c>
 800169a:	2300      	movs	r3, #0
 800169c:	69fa      	ldr	r2, [r7, #28]
 800169e:	f002 0203 	and.w	r2, r2, #3
 80016a2:	0092      	lsls	r2, r2, #2
 80016a4:	4093      	lsls	r3, r2
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016ac:	4935      	ldr	r1, [pc, #212]	@ (8001784 <HAL_GPIO_Init+0x304>)
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	089b      	lsrs	r3, r3, #2
 80016b2:	3302      	adds	r3, #2
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ba:	4b3a      	ldr	r3, [pc, #232]	@ (80017a4 <HAL_GPIO_Init+0x324>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	43db      	mvns	r3, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4013      	ands	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016de:	4a31      	ldr	r2, [pc, #196]	@ (80017a4 <HAL_GPIO_Init+0x324>)
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016e4:	4b2f      	ldr	r3, [pc, #188]	@ (80017a4 <HAL_GPIO_Init+0x324>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001708:	4a26      	ldr	r2, [pc, #152]	@ (80017a4 <HAL_GPIO_Init+0x324>)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800170e:	4b25      	ldr	r3, [pc, #148]	@ (80017a4 <HAL_GPIO_Init+0x324>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	43db      	mvns	r3, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4013      	ands	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001732:	4a1c      	ldr	r2, [pc, #112]	@ (80017a4 <HAL_GPIO_Init+0x324>)
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001738:	4b1a      	ldr	r3, [pc, #104]	@ (80017a4 <HAL_GPIO_Init+0x324>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800175c:	4a11      	ldr	r2, [pc, #68]	@ (80017a4 <HAL_GPIO_Init+0x324>)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	3301      	adds	r3, #1
 8001766:	61fb      	str	r3, [r7, #28]
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	2b0f      	cmp	r3, #15
 800176c:	f67f ae96 	bls.w	800149c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001770:	bf00      	nop
 8001772:	bf00      	nop
 8001774:	3724      	adds	r7, #36	@ 0x24
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800
 8001784:	40013800 	.word	0x40013800
 8001788:	40020000 	.word	0x40020000
 800178c:	40020400 	.word	0x40020400
 8001790:	40020800 	.word	0x40020800
 8001794:	40020c00 	.word	0x40020c00
 8001798:	40021000 	.word	0x40021000
 800179c:	40021400 	.word	0x40021400
 80017a0:	40021800 	.word	0x40021800
 80017a4:	40013c00 	.word	0x40013c00

080017a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	460b      	mov	r3, r1
 80017b2:	807b      	strh	r3, [r7, #2]
 80017b4:	4613      	mov	r3, r2
 80017b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017b8:	787b      	ldrb	r3, [r7, #1]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017be:	887a      	ldrh	r2, [r7, #2]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017c4:	e003      	b.n	80017ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017c6:	887b      	ldrh	r3, [r7, #2]
 80017c8:	041a      	lsls	r2, r3, #16
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	619a      	str	r2, [r3, #24]
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b086      	sub	sp, #24
 80017de:	af02      	add	r7, sp, #8
 80017e0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e108      	b.n	80019fe <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d106      	bne.n	800180c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff fbf8 	bl	8000ffc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2203      	movs	r2, #3
 8001810:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800181a:	d102      	bne.n	8001822 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f002 f8fe 	bl	8003a28 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6818      	ldr	r0, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	7c1a      	ldrb	r2, [r3, #16]
 8001834:	f88d 2000 	strb.w	r2, [sp]
 8001838:	3304      	adds	r3, #4
 800183a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800183c:	f002 f890 	bl	8003960 <USB_CoreInit>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d005      	beq.n	8001852 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2202      	movs	r2, #2
 800184a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e0d5      	b.n	80019fe <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2100      	movs	r1, #0
 8001858:	4618      	mov	r0, r3
 800185a:	f002 f8f6 	bl	8003a4a <USB_SetCurrentMode>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d005      	beq.n	8001870 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2202      	movs	r2, #2
 8001868:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e0c6      	b.n	80019fe <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001870:	2300      	movs	r3, #0
 8001872:	73fb      	strb	r3, [r7, #15]
 8001874:	e04a      	b.n	800190c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001876:	7bfa      	ldrb	r2, [r7, #15]
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	4613      	mov	r3, r2
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	4413      	add	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	440b      	add	r3, r1
 8001884:	3315      	adds	r3, #21
 8001886:	2201      	movs	r2, #1
 8001888:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800188a:	7bfa      	ldrb	r2, [r7, #15]
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	4613      	mov	r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	4413      	add	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	440b      	add	r3, r1
 8001898:	3314      	adds	r3, #20
 800189a:	7bfa      	ldrb	r2, [r7, #15]
 800189c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800189e:	7bfa      	ldrb	r2, [r7, #15]
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
 80018a2:	b298      	uxth	r0, r3
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	4613      	mov	r3, r2
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	4413      	add	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	440b      	add	r3, r1
 80018b0:	332e      	adds	r3, #46	@ 0x2e
 80018b2:	4602      	mov	r2, r0
 80018b4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018b6:	7bfa      	ldrb	r2, [r7, #15]
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	4413      	add	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	440b      	add	r3, r1
 80018c4:	3318      	adds	r3, #24
 80018c6:	2200      	movs	r2, #0
 80018c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018ca:	7bfa      	ldrb	r2, [r7, #15]
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	4413      	add	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	440b      	add	r3, r1
 80018d8:	331c      	adds	r3, #28
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018de:	7bfa      	ldrb	r2, [r7, #15]
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	4413      	add	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	440b      	add	r3, r1
 80018ec:	3320      	adds	r3, #32
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018f2:	7bfa      	ldrb	r2, [r7, #15]
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	4413      	add	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	440b      	add	r3, r1
 8001900:	3324      	adds	r3, #36	@ 0x24
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	3301      	adds	r3, #1
 800190a:	73fb      	strb	r3, [r7, #15]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	791b      	ldrb	r3, [r3, #4]
 8001910:	7bfa      	ldrb	r2, [r7, #15]
 8001912:	429a      	cmp	r2, r3
 8001914:	d3af      	bcc.n	8001876 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001916:	2300      	movs	r3, #0
 8001918:	73fb      	strb	r3, [r7, #15]
 800191a:	e044      	b.n	80019a6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800191c:	7bfa      	ldrb	r2, [r7, #15]
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	4613      	mov	r3, r2
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	4413      	add	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	440b      	add	r3, r1
 800192a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001932:	7bfa      	ldrb	r2, [r7, #15]
 8001934:	6879      	ldr	r1, [r7, #4]
 8001936:	4613      	mov	r3, r2
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	4413      	add	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	440b      	add	r3, r1
 8001940:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001944:	7bfa      	ldrb	r2, [r7, #15]
 8001946:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001948:	7bfa      	ldrb	r2, [r7, #15]
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	4413      	add	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800195e:	7bfa      	ldrb	r2, [r7, #15]
 8001960:	6879      	ldr	r1, [r7, #4]
 8001962:	4613      	mov	r3, r2
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	4413      	add	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	440b      	add	r3, r1
 800196c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001974:	7bfa      	ldrb	r2, [r7, #15]
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	4613      	mov	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	4413      	add	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800198a:	7bfa      	ldrb	r2, [r7, #15]
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	4413      	add	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	440b      	add	r3, r1
 8001998:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
 80019a2:	3301      	adds	r3, #1
 80019a4:	73fb      	strb	r3, [r7, #15]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	791b      	ldrb	r3, [r3, #4]
 80019aa:	7bfa      	ldrb	r2, [r7, #15]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d3b5      	bcc.n	800191c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6818      	ldr	r0, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	7c1a      	ldrb	r2, [r3, #16]
 80019b8:	f88d 2000 	strb.w	r2, [sp]
 80019bc:	3304      	adds	r3, #4
 80019be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019c0:	f002 f890 	bl	8003ae4 <USB_DevInit>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d005      	beq.n	80019d6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2202      	movs	r2, #2
 80019ce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e013      	b.n	80019fe <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	7b1b      	ldrb	r3, [r3, #12]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d102      	bne.n	80019f2 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 f80a 	bl	8001a06 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f002 fa4b 	bl	8003e92 <USB_DevDisconnect>

  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b085      	sub	sp, #20
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a38:	f043 0303 	orr.w	r3, r3, #3
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
	...

08001a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e0cc      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a64:	4b68      	ldr	r3, [pc, #416]	@ (8001c08 <HAL_RCC_ClockConfig+0x1b8>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 030f 	and.w	r3, r3, #15
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d90c      	bls.n	8001a8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a72:	4b65      	ldr	r3, [pc, #404]	@ (8001c08 <HAL_RCC_ClockConfig+0x1b8>)
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7a:	4b63      	ldr	r3, [pc, #396]	@ (8001c08 <HAL_RCC_ClockConfig+0x1b8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d001      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e0b8      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d020      	beq.n	8001ada <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d005      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aa4:	4b59      	ldr	r3, [pc, #356]	@ (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	4a58      	ldr	r2, [pc, #352]	@ (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001aaa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001aae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0308 	and.w	r3, r3, #8
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001abc:	4b53      	ldr	r3, [pc, #332]	@ (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	4a52      	ldr	r2, [pc, #328]	@ (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001ac6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac8:	4b50      	ldr	r3, [pc, #320]	@ (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	494d      	ldr	r1, [pc, #308]	@ (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d044      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d107      	bne.n	8001afe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aee:	4b47      	ldr	r3, [pc, #284]	@ (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d119      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e07f      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d003      	beq.n	8001b0e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	d107      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b0e:	4b3f      	ldr	r3, [pc, #252]	@ (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d109      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e06f      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e067      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b2e:	4b37      	ldr	r3, [pc, #220]	@ (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f023 0203 	bic.w	r2, r3, #3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	4934      	ldr	r1, [pc, #208]	@ (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b40:	f7ff fb5c 	bl	80011fc <HAL_GetTick>
 8001b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b46:	e00a      	b.n	8001b5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b48:	f7ff fb58 	bl	80011fc <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e04f      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5e:	4b2b      	ldr	r3, [pc, #172]	@ (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 020c 	and.w	r2, r3, #12
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d1eb      	bne.n	8001b48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b70:	4b25      	ldr	r3, [pc, #148]	@ (8001c08 <HAL_RCC_ClockConfig+0x1b8>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 030f 	and.w	r3, r3, #15
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d20c      	bcs.n	8001b98 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7e:	4b22      	ldr	r3, [pc, #136]	@ (8001c08 <HAL_RCC_ClockConfig+0x1b8>)
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b86:	4b20      	ldr	r3, [pc, #128]	@ (8001c08 <HAL_RCC_ClockConfig+0x1b8>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d001      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e032      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d008      	beq.n	8001bb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ba4:	4b19      	ldr	r3, [pc, #100]	@ (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	4916      	ldr	r1, [pc, #88]	@ (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0308 	and.w	r3, r3, #8
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d009      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bc2:	4b12      	ldr	r3, [pc, #72]	@ (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	490e      	ldr	r1, [pc, #56]	@ (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bd6:	f000 fb7f 	bl	80022d8 <HAL_RCC_GetSysClockFreq>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	091b      	lsrs	r3, r3, #4
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	490a      	ldr	r1, [pc, #40]	@ (8001c10 <HAL_RCC_ClockConfig+0x1c0>)
 8001be8:	5ccb      	ldrb	r3, [r1, r3]
 8001bea:	fa22 f303 	lsr.w	r3, r2, r3
 8001bee:	4a09      	ldr	r2, [pc, #36]	@ (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001bf2:	4b09      	ldr	r3, [pc, #36]	@ (8001c18 <HAL_RCC_ClockConfig+0x1c8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff fabc 	bl	8001174 <HAL_InitTick>

  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40023c00 	.word	0x40023c00
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	08006e7c 	.word	0x08006e7c
 8001c14:	2000001c 	.word	0x2000001c
 8001c18:	20000020 	.word	0x20000020

08001c1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c20:	4b03      	ldr	r3, [pc, #12]	@ (8001c30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c22:	681b      	ldr	r3, [r3, #0]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	2000001c 	.word	0x2000001c

08001c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c38:	f7ff fff0 	bl	8001c1c <HAL_RCC_GetHCLKFreq>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	4b05      	ldr	r3, [pc, #20]	@ (8001c54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	0a9b      	lsrs	r3, r3, #10
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	4903      	ldr	r1, [pc, #12]	@ (8001c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c4a:	5ccb      	ldrb	r3, [r1, r3]
 8001c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40023800 	.word	0x40023800
 8001c58:	08006e8c 	.word	0x08006e8c

08001c5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c60:	f7ff ffdc 	bl	8001c1c <HAL_RCC_GetHCLKFreq>
 8001c64:	4602      	mov	r2, r0
 8001c66:	4b05      	ldr	r3, [pc, #20]	@ (8001c7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	0b5b      	lsrs	r3, r3, #13
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	4903      	ldr	r1, [pc, #12]	@ (8001c80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c72:	5ccb      	ldrb	r3, [r1, r3]
 8001c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	08006e8c 	.word	0x08006e8c

08001c84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08c      	sub	sp, #48	@ 0x30
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d010      	beq.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001cbc:	4b6f      	ldr	r3, [pc, #444]	@ (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cc2:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cca:	496c      	ldr	r1, [pc, #432]	@ (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d010      	beq.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001cea:	4b64      	ldr	r3, [pc, #400]	@ (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cf0:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cf8:	4960      	ldr	r1, [pc, #384]	@ (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d017      	beq.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d18:	4b58      	ldr	r3, [pc, #352]	@ (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d1e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d26:	4955      	ldr	r1, [pc, #340]	@ (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001d36:	d101      	bne.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001d44:	2301      	movs	r3, #1
 8001d46:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0308 	and.w	r3, r3, #8
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d017      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d54:	4b49      	ldr	r3, [pc, #292]	@ (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d5a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d62:	4946      	ldr	r1, [pc, #280]	@ (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d72:	d101      	bne.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001d74:	2301      	movs	r3, #1
 8001d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001d80:	2301      	movs	r3, #1
 8001d82:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0320 	and.w	r3, r3, #32
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 808a 	beq.w	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	4b39      	ldr	r3, [pc, #228]	@ (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	4a38      	ldr	r2, [pc, #224]	@ (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001da0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001da2:	4b36      	ldr	r3, [pc, #216]	@ (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001dae:	4b34      	ldr	r3, [pc, #208]	@ (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a33      	ldr	r2, [pc, #204]	@ (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001db4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001db8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001dba:	f7ff fa1f 	bl	80011fc <HAL_GetTick>
 8001dbe:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc2:	f7ff fa1b 	bl	80011fc <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e278      	b.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001dd4:	4b2a      	ldr	r3, [pc, #168]	@ (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0f0      	beq.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001de0:	4b26      	ldr	r3, [pc, #152]	@ (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001de8:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001dea:	6a3b      	ldr	r3, [r7, #32]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d02f      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001df8:	6a3a      	ldr	r2, [r7, #32]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d028      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001dfe:	4b1f      	ldr	r3, [pc, #124]	@ (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e06:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e08:	4b1e      	ldr	r3, [pc, #120]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001e14:	4a19      	ldr	r2, [pc, #100]	@ (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e16:	6a3b      	ldr	r3, [r7, #32]
 8001e18:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e1a:	4b18      	ldr	r3, [pc, #96]	@ (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d114      	bne.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001e26:	f7ff f9e9 	bl	80011fc <HAL_GetTick>
 8001e2a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e2c:	e00a      	b.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2e:	f7ff f9e5 	bl	80011fc <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e240      	b.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e44:	4b0d      	ldr	r3, [pc, #52]	@ (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0ee      	beq.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001e5c:	d114      	bne.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001e5e:	4b07      	ldr	r3, [pc, #28]	@ (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001e6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e72:	4902      	ldr	r1, [pc, #8]	@ (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	608b      	str	r3, [r1, #8]
 8001e78:	e00c      	b.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40007000 	.word	0x40007000
 8001e84:	42470e40 	.word	0x42470e40
 8001e88:	4b4a      	ldr	r3, [pc, #296]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	4a49      	ldr	r2, [pc, #292]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e8e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001e92:	6093      	str	r3, [r2, #8]
 8001e94:	4b47      	ldr	r3, [pc, #284]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e96:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea0:	4944      	ldr	r1, [pc, #272]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0310 	and.w	r3, r3, #16
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d004      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8001eb8:	4b3f      	ldr	r3, [pc, #252]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001eba:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00a      	beq.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001ec8:	4b3a      	ldr	r3, [pc, #232]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ece:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed6:	4937      	ldr	r1, [pc, #220]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00a      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001eea:	4b32      	ldr	r3, [pc, #200]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001eec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ef0:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ef8:	492e      	ldr	r1, [pc, #184]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d011      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001f0c:	4b29      	ldr	r3, [pc, #164]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f12:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f1a:	4926      	ldr	r1, [pc, #152]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001f2a:	d101      	bne.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00a      	beq.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001f3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f42:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4a:	491a      	ldr	r1, [pc, #104]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d011      	beq.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001f5e:	4b15      	ldr	r3, [pc, #84]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f64:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f6c:	4911      	ldr	r1, [pc, #68]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f7c:	d101      	bne.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d005      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f90:	f040 80ff 	bne.w	8002192 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001f94:	4b09      	ldr	r3, [pc, #36]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f9a:	f7ff f92f 	bl	80011fc <HAL_GetTick>
 8001f9e:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001fa0:	e00e      	b.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001fa2:	f7ff f92b 	bl	80011fc <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d907      	bls.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e188      	b.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	424711e0 	.word	0x424711e0
 8001fbc:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001fc0:	4b7e      	ldr	r3, [pc, #504]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1ea      	bne.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d009      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d028      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d124      	bne.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001ff4:	4b71      	ldr	r3, [pc, #452]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ffa:	0c1b      	lsrs	r3, r3, #16
 8001ffc:	f003 0303 	and.w	r3, r3, #3
 8002000:	3301      	adds	r3, #1
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002006:	4b6d      	ldr	r3, [pc, #436]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002008:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800200c:	0e1b      	lsrs	r3, r3, #24
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	019b      	lsls	r3, r3, #6
 800201e:	431a      	orrs	r2, r3
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	085b      	lsrs	r3, r3, #1
 8002024:	3b01      	subs	r3, #1
 8002026:	041b      	lsls	r3, r3, #16
 8002028:	431a      	orrs	r2, r3
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	061b      	lsls	r3, r3, #24
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	695b      	ldr	r3, [r3, #20]
 8002034:	071b      	lsls	r3, r3, #28
 8002036:	4961      	ldr	r1, [pc, #388]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002038:	4313      	orrs	r3, r2
 800203a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0304 	and.w	r3, r3, #4
 8002046:	2b00      	cmp	r3, #0
 8002048:	d004      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002052:	d00a      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800205c:	2b00      	cmp	r3, #0
 800205e:	d035      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002064:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002068:	d130      	bne.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800206a:	4b54      	ldr	r3, [pc, #336]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800206c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002070:	0c1b      	lsrs	r3, r3, #16
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	3301      	adds	r3, #1
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800207c:	4b4f      	ldr	r3, [pc, #316]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800207e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002082:	0f1b      	lsrs	r3, r3, #28
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	019b      	lsls	r3, r3, #6
 8002094:	431a      	orrs	r2, r3
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	085b      	lsrs	r3, r3, #1
 800209a:	3b01      	subs	r3, #1
 800209c:	041b      	lsls	r3, r3, #16
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	061b      	lsls	r3, r3, #24
 80020a6:	431a      	orrs	r2, r3
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	071b      	lsls	r3, r3, #28
 80020ac:	4943      	ldr	r1, [pc, #268]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80020b4:	4b41      	ldr	r3, [pc, #260]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020ba:	f023 021f 	bic.w	r2, r3, #31
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c2:	3b01      	subs	r3, #1
 80020c4:	493d      	ldr	r1, [pc, #244]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d029      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80020e0:	d124      	bne.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80020e2:	4b36      	ldr	r3, [pc, #216]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020e8:	0c1b      	lsrs	r3, r3, #16
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	3301      	adds	r3, #1
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80020f4:	4b31      	ldr	r3, [pc, #196]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020fa:	0f1b      	lsrs	r3, r3, #28
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	019b      	lsls	r3, r3, #6
 800210c:	431a      	orrs	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	085b      	lsrs	r3, r3, #1
 8002114:	3b01      	subs	r3, #1
 8002116:	041b      	lsls	r3, r3, #16
 8002118:	431a      	orrs	r2, r3
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	061b      	lsls	r3, r3, #24
 800211e:	431a      	orrs	r2, r3
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	071b      	lsls	r3, r3, #28
 8002124:	4925      	ldr	r1, [pc, #148]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002126:	4313      	orrs	r3, r2
 8002128:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002134:	2b00      	cmp	r3, #0
 8002136:	d016      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	019b      	lsls	r3, r3, #6
 8002142:	431a      	orrs	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	085b      	lsrs	r3, r3, #1
 800214a:	3b01      	subs	r3, #1
 800214c:	041b      	lsls	r3, r3, #16
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	061b      	lsls	r3, r3, #24
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	071b      	lsls	r3, r3, #28
 800215e:	4917      	ldr	r1, [pc, #92]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002160:	4313      	orrs	r3, r2
 8002162:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002166:	4b16      	ldr	r3, [pc, #88]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002168:	2201      	movs	r2, #1
 800216a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800216c:	f7ff f846 	bl	80011fc <HAL_GetTick>
 8002170:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002174:	f7ff f842 	bl	80011fc <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e09f      	b.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002186:	4b0d      	ldr	r3, [pc, #52]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f0      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8002192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002194:	2b01      	cmp	r3, #1
 8002196:	f040 8095 	bne.w	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800219a:	4b0a      	ldr	r3, [pc, #40]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80021a0:	f7ff f82c 	bl	80011fc <HAL_GetTick>
 80021a4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80021a6:	e00f      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80021a8:	f7ff f828 	bl	80011fc <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d908      	bls.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e085      	b.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80021ba:	bf00      	nop
 80021bc:	40023800 	.word	0x40023800
 80021c0:	42470068 	.word	0x42470068
 80021c4:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80021c8:	4b41      	ldr	r3, [pc, #260]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80021d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80021d4:	d0e8      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d009      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d02b      	beq.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d127      	bne.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80021fe:	4b34      	ldr	r3, [pc, #208]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002204:	0c1b      	lsrs	r3, r3, #16
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	3301      	adds	r3, #1
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	699a      	ldr	r2, [r3, #24]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	019b      	lsls	r3, r3, #6
 800221a:	431a      	orrs	r2, r3
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	085b      	lsrs	r3, r3, #1
 8002220:	3b01      	subs	r3, #1
 8002222:	041b      	lsls	r3, r3, #16
 8002224:	431a      	orrs	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222a:	061b      	lsls	r3, r3, #24
 800222c:	4928      	ldr	r1, [pc, #160]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800222e:	4313      	orrs	r3, r2
 8002230:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002234:	4b26      	ldr	r3, [pc, #152]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002236:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800223a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002242:	3b01      	subs	r3, #1
 8002244:	021b      	lsls	r3, r3, #8
 8002246:	4922      	ldr	r1, [pc, #136]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002248:	4313      	orrs	r3, r2
 800224a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002256:	2b00      	cmp	r3, #0
 8002258:	d01d      	beq.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800225e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002262:	d118      	bne.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002264:	4b1a      	ldr	r3, [pc, #104]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800226a:	0e1b      	lsrs	r3, r3, #24
 800226c:	f003 030f 	and.w	r3, r3, #15
 8002270:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	699a      	ldr	r2, [r3, #24]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	019b      	lsls	r3, r3, #6
 800227c:	431a      	orrs	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	085b      	lsrs	r3, r3, #1
 8002284:	3b01      	subs	r3, #1
 8002286:	041b      	lsls	r3, r3, #16
 8002288:	431a      	orrs	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	061b      	lsls	r3, r3, #24
 800228e:	4910      	ldr	r1, [pc, #64]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002290:	4313      	orrs	r3, r2
 8002292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002296:	4b0f      	ldr	r3, [pc, #60]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002298:	2201      	movs	r2, #1
 800229a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800229c:	f7fe ffae 	bl	80011fc <HAL_GetTick>
 80022a0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80022a4:	f7fe ffaa 	bl	80011fc <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e007      	b.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80022b6:	4b06      	ldr	r3, [pc, #24]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80022be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022c2:	d1ef      	bne.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3730      	adds	r7, #48	@ 0x30
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40023800 	.word	0x40023800
 80022d4:	42470070 	.word	0x42470070

080022d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022dc:	b0ae      	sub	sp, #184	@ 0xb8
 80022de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022fe:	4bcb      	ldr	r3, [pc, #812]	@ (800262c <HAL_RCC_GetSysClockFreq+0x354>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b0c      	cmp	r3, #12
 8002308:	f200 8206 	bhi.w	8002718 <HAL_RCC_GetSysClockFreq+0x440>
 800230c:	a201      	add	r2, pc, #4	@ (adr r2, 8002314 <HAL_RCC_GetSysClockFreq+0x3c>)
 800230e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002312:	bf00      	nop
 8002314:	08002349 	.word	0x08002349
 8002318:	08002719 	.word	0x08002719
 800231c:	08002719 	.word	0x08002719
 8002320:	08002719 	.word	0x08002719
 8002324:	08002351 	.word	0x08002351
 8002328:	08002719 	.word	0x08002719
 800232c:	08002719 	.word	0x08002719
 8002330:	08002719 	.word	0x08002719
 8002334:	08002359 	.word	0x08002359
 8002338:	08002719 	.word	0x08002719
 800233c:	08002719 	.word	0x08002719
 8002340:	08002719 	.word	0x08002719
 8002344:	08002549 	.word	0x08002549
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002348:	4bb9      	ldr	r3, [pc, #740]	@ (8002630 <HAL_RCC_GetSysClockFreq+0x358>)
 800234a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800234e:	e1e7      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002350:	4bb8      	ldr	r3, [pc, #736]	@ (8002634 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002352:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002356:	e1e3      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002358:	4bb4      	ldr	r3, [pc, #720]	@ (800262c <HAL_RCC_GetSysClockFreq+0x354>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002360:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002364:	4bb1      	ldr	r3, [pc, #708]	@ (800262c <HAL_RCC_GetSysClockFreq+0x354>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d071      	beq.n	8002454 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002370:	4bae      	ldr	r3, [pc, #696]	@ (800262c <HAL_RCC_GetSysClockFreq+0x354>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	099b      	lsrs	r3, r3, #6
 8002376:	2200      	movs	r2, #0
 8002378:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800237c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002380:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002388:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800238c:	2300      	movs	r3, #0
 800238e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002392:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002396:	4622      	mov	r2, r4
 8002398:	462b      	mov	r3, r5
 800239a:	f04f 0000 	mov.w	r0, #0
 800239e:	f04f 0100 	mov.w	r1, #0
 80023a2:	0159      	lsls	r1, r3, #5
 80023a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023a8:	0150      	lsls	r0, r2, #5
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4621      	mov	r1, r4
 80023b0:	1a51      	subs	r1, r2, r1
 80023b2:	6439      	str	r1, [r7, #64]	@ 0x40
 80023b4:	4629      	mov	r1, r5
 80023b6:	eb63 0301 	sbc.w	r3, r3, r1
 80023ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80023c8:	4649      	mov	r1, r9
 80023ca:	018b      	lsls	r3, r1, #6
 80023cc:	4641      	mov	r1, r8
 80023ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023d2:	4641      	mov	r1, r8
 80023d4:	018a      	lsls	r2, r1, #6
 80023d6:	4641      	mov	r1, r8
 80023d8:	1a51      	subs	r1, r2, r1
 80023da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80023dc:	4649      	mov	r1, r9
 80023de:	eb63 0301 	sbc.w	r3, r3, r1
 80023e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	f04f 0300 	mov.w	r3, #0
 80023ec:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80023f0:	4649      	mov	r1, r9
 80023f2:	00cb      	lsls	r3, r1, #3
 80023f4:	4641      	mov	r1, r8
 80023f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023fa:	4641      	mov	r1, r8
 80023fc:	00ca      	lsls	r2, r1, #3
 80023fe:	4610      	mov	r0, r2
 8002400:	4619      	mov	r1, r3
 8002402:	4603      	mov	r3, r0
 8002404:	4622      	mov	r2, r4
 8002406:	189b      	adds	r3, r3, r2
 8002408:	633b      	str	r3, [r7, #48]	@ 0x30
 800240a:	462b      	mov	r3, r5
 800240c:	460a      	mov	r2, r1
 800240e:	eb42 0303 	adc.w	r3, r2, r3
 8002412:	637b      	str	r3, [r7, #52]	@ 0x34
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	f04f 0300 	mov.w	r3, #0
 800241c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002420:	4629      	mov	r1, r5
 8002422:	024b      	lsls	r3, r1, #9
 8002424:	4621      	mov	r1, r4
 8002426:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800242a:	4621      	mov	r1, r4
 800242c:	024a      	lsls	r2, r1, #9
 800242e:	4610      	mov	r0, r2
 8002430:	4619      	mov	r1, r3
 8002432:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002436:	2200      	movs	r2, #0
 8002438:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800243c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002440:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002444:	f7fd fee4 	bl	8000210 <__aeabi_uldivmod>
 8002448:	4602      	mov	r2, r0
 800244a:	460b      	mov	r3, r1
 800244c:	4613      	mov	r3, r2
 800244e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002452:	e067      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002454:	4b75      	ldr	r3, [pc, #468]	@ (800262c <HAL_RCC_GetSysClockFreq+0x354>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	099b      	lsrs	r3, r3, #6
 800245a:	2200      	movs	r2, #0
 800245c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002460:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002464:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800246c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800246e:	2300      	movs	r3, #0
 8002470:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002472:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002476:	4622      	mov	r2, r4
 8002478:	462b      	mov	r3, r5
 800247a:	f04f 0000 	mov.w	r0, #0
 800247e:	f04f 0100 	mov.w	r1, #0
 8002482:	0159      	lsls	r1, r3, #5
 8002484:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002488:	0150      	lsls	r0, r2, #5
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	4621      	mov	r1, r4
 8002490:	1a51      	subs	r1, r2, r1
 8002492:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002494:	4629      	mov	r1, r5
 8002496:	eb63 0301 	sbc.w	r3, r3, r1
 800249a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	f04f 0300 	mov.w	r3, #0
 80024a4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80024a8:	4649      	mov	r1, r9
 80024aa:	018b      	lsls	r3, r1, #6
 80024ac:	4641      	mov	r1, r8
 80024ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024b2:	4641      	mov	r1, r8
 80024b4:	018a      	lsls	r2, r1, #6
 80024b6:	4641      	mov	r1, r8
 80024b8:	ebb2 0a01 	subs.w	sl, r2, r1
 80024bc:	4649      	mov	r1, r9
 80024be:	eb63 0b01 	sbc.w	fp, r3, r1
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	f04f 0300 	mov.w	r3, #0
 80024ca:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024ce:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024d6:	4692      	mov	sl, r2
 80024d8:	469b      	mov	fp, r3
 80024da:	4623      	mov	r3, r4
 80024dc:	eb1a 0303 	adds.w	r3, sl, r3
 80024e0:	623b      	str	r3, [r7, #32]
 80024e2:	462b      	mov	r3, r5
 80024e4:	eb4b 0303 	adc.w	r3, fp, r3
 80024e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80024f6:	4629      	mov	r1, r5
 80024f8:	028b      	lsls	r3, r1, #10
 80024fa:	4621      	mov	r1, r4
 80024fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002500:	4621      	mov	r1, r4
 8002502:	028a      	lsls	r2, r1, #10
 8002504:	4610      	mov	r0, r2
 8002506:	4619      	mov	r1, r3
 8002508:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800250c:	2200      	movs	r2, #0
 800250e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002510:	677a      	str	r2, [r7, #116]	@ 0x74
 8002512:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002516:	f7fd fe7b 	bl	8000210 <__aeabi_uldivmod>
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	4613      	mov	r3, r2
 8002520:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002524:	4b41      	ldr	r3, [pc, #260]	@ (800262c <HAL_RCC_GetSysClockFreq+0x354>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	0c1b      	lsrs	r3, r3, #16
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	3301      	adds	r3, #1
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002536:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800253a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800253e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002542:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002546:	e0eb      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002548:	4b38      	ldr	r3, [pc, #224]	@ (800262c <HAL_RCC_GetSysClockFreq+0x354>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002550:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002554:	4b35      	ldr	r3, [pc, #212]	@ (800262c <HAL_RCC_GetSysClockFreq+0x354>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d06b      	beq.n	8002638 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002560:	4b32      	ldr	r3, [pc, #200]	@ (800262c <HAL_RCC_GetSysClockFreq+0x354>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	099b      	lsrs	r3, r3, #6
 8002566:	2200      	movs	r2, #0
 8002568:	66bb      	str	r3, [r7, #104]	@ 0x68
 800256a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800256c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800256e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002572:	663b      	str	r3, [r7, #96]	@ 0x60
 8002574:	2300      	movs	r3, #0
 8002576:	667b      	str	r3, [r7, #100]	@ 0x64
 8002578:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800257c:	4622      	mov	r2, r4
 800257e:	462b      	mov	r3, r5
 8002580:	f04f 0000 	mov.w	r0, #0
 8002584:	f04f 0100 	mov.w	r1, #0
 8002588:	0159      	lsls	r1, r3, #5
 800258a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800258e:	0150      	lsls	r0, r2, #5
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	4621      	mov	r1, r4
 8002596:	1a51      	subs	r1, r2, r1
 8002598:	61b9      	str	r1, [r7, #24]
 800259a:	4629      	mov	r1, r5
 800259c:	eb63 0301 	sbc.w	r3, r3, r1
 80025a0:	61fb      	str	r3, [r7, #28]
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	f04f 0300 	mov.w	r3, #0
 80025aa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80025ae:	4659      	mov	r1, fp
 80025b0:	018b      	lsls	r3, r1, #6
 80025b2:	4651      	mov	r1, sl
 80025b4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025b8:	4651      	mov	r1, sl
 80025ba:	018a      	lsls	r2, r1, #6
 80025bc:	4651      	mov	r1, sl
 80025be:	ebb2 0801 	subs.w	r8, r2, r1
 80025c2:	4659      	mov	r1, fp
 80025c4:	eb63 0901 	sbc.w	r9, r3, r1
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	f04f 0300 	mov.w	r3, #0
 80025d0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025d4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025d8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025dc:	4690      	mov	r8, r2
 80025de:	4699      	mov	r9, r3
 80025e0:	4623      	mov	r3, r4
 80025e2:	eb18 0303 	adds.w	r3, r8, r3
 80025e6:	613b      	str	r3, [r7, #16]
 80025e8:	462b      	mov	r3, r5
 80025ea:	eb49 0303 	adc.w	r3, r9, r3
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80025fc:	4629      	mov	r1, r5
 80025fe:	024b      	lsls	r3, r1, #9
 8002600:	4621      	mov	r1, r4
 8002602:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002606:	4621      	mov	r1, r4
 8002608:	024a      	lsls	r2, r1, #9
 800260a:	4610      	mov	r0, r2
 800260c:	4619      	mov	r1, r3
 800260e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002612:	2200      	movs	r2, #0
 8002614:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002616:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002618:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800261c:	f7fd fdf8 	bl	8000210 <__aeabi_uldivmod>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4613      	mov	r3, r2
 8002626:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800262a:	e065      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x420>
 800262c:	40023800 	.word	0x40023800
 8002630:	00f42400 	.word	0x00f42400
 8002634:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002638:	4b3d      	ldr	r3, [pc, #244]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x458>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	099b      	lsrs	r3, r3, #6
 800263e:	2200      	movs	r2, #0
 8002640:	4618      	mov	r0, r3
 8002642:	4611      	mov	r1, r2
 8002644:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002648:	653b      	str	r3, [r7, #80]	@ 0x50
 800264a:	2300      	movs	r3, #0
 800264c:	657b      	str	r3, [r7, #84]	@ 0x54
 800264e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002652:	4642      	mov	r2, r8
 8002654:	464b      	mov	r3, r9
 8002656:	f04f 0000 	mov.w	r0, #0
 800265a:	f04f 0100 	mov.w	r1, #0
 800265e:	0159      	lsls	r1, r3, #5
 8002660:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002664:	0150      	lsls	r0, r2, #5
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	4641      	mov	r1, r8
 800266c:	1a51      	subs	r1, r2, r1
 800266e:	60b9      	str	r1, [r7, #8]
 8002670:	4649      	mov	r1, r9
 8002672:	eb63 0301 	sbc.w	r3, r3, r1
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	f04f 0300 	mov.w	r3, #0
 8002680:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002684:	4659      	mov	r1, fp
 8002686:	018b      	lsls	r3, r1, #6
 8002688:	4651      	mov	r1, sl
 800268a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800268e:	4651      	mov	r1, sl
 8002690:	018a      	lsls	r2, r1, #6
 8002692:	4651      	mov	r1, sl
 8002694:	1a54      	subs	r4, r2, r1
 8002696:	4659      	mov	r1, fp
 8002698:	eb63 0501 	sbc.w	r5, r3, r1
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	f04f 0300 	mov.w	r3, #0
 80026a4:	00eb      	lsls	r3, r5, #3
 80026a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026aa:	00e2      	lsls	r2, r4, #3
 80026ac:	4614      	mov	r4, r2
 80026ae:	461d      	mov	r5, r3
 80026b0:	4643      	mov	r3, r8
 80026b2:	18e3      	adds	r3, r4, r3
 80026b4:	603b      	str	r3, [r7, #0]
 80026b6:	464b      	mov	r3, r9
 80026b8:	eb45 0303 	adc.w	r3, r5, r3
 80026bc:	607b      	str	r3, [r7, #4]
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	f04f 0300 	mov.w	r3, #0
 80026c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026ca:	4629      	mov	r1, r5
 80026cc:	028b      	lsls	r3, r1, #10
 80026ce:	4621      	mov	r1, r4
 80026d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026d4:	4621      	mov	r1, r4
 80026d6:	028a      	lsls	r2, r1, #10
 80026d8:	4610      	mov	r0, r2
 80026da:	4619      	mov	r1, r3
 80026dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026e0:	2200      	movs	r2, #0
 80026e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026e4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80026e6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80026ea:	f7fd fd91 	bl	8000210 <__aeabi_uldivmod>
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	4613      	mov	r3, r2
 80026f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80026f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x458>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	0f1b      	lsrs	r3, r3, #28
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002706:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800270a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800270e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002712:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002716:	e003      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002718:	4b06      	ldr	r3, [pc, #24]	@ (8002734 <HAL_RCC_GetSysClockFreq+0x45c>)
 800271a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800271e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002720:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002724:	4618      	mov	r0, r3
 8002726:	37b8      	adds	r7, #184	@ 0xb8
 8002728:	46bd      	mov	sp, r7
 800272a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800272e:	bf00      	nop
 8002730:	40023800 	.word	0x40023800
 8002734:	00f42400 	.word	0x00f42400

08002738 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e28d      	b.n	8002c66 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 8083 	beq.w	800285e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002758:	4b94      	ldr	r3, [pc, #592]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 030c 	and.w	r3, r3, #12
 8002760:	2b04      	cmp	r3, #4
 8002762:	d019      	beq.n	8002798 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002764:	4b91      	ldr	r3, [pc, #580]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 030c 	and.w	r3, r3, #12
        || \
 800276c:	2b08      	cmp	r3, #8
 800276e:	d106      	bne.n	800277e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002770:	4b8e      	ldr	r3, [pc, #568]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002778:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800277c:	d00c      	beq.n	8002798 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800277e:	4b8b      	ldr	r3, [pc, #556]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002786:	2b0c      	cmp	r3, #12
 8002788:	d112      	bne.n	80027b0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800278a:	4b88      	ldr	r3, [pc, #544]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002792:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002796:	d10b      	bne.n	80027b0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002798:	4b84      	ldr	r3, [pc, #528]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d05b      	beq.n	800285c <HAL_RCC_OscConfig+0x124>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d157      	bne.n	800285c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e25a      	b.n	8002c66 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027b8:	d106      	bne.n	80027c8 <HAL_RCC_OscConfig+0x90>
 80027ba:	4b7c      	ldr	r3, [pc, #496]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a7b      	ldr	r2, [pc, #492]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 80027c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027c4:	6013      	str	r3, [r2, #0]
 80027c6:	e01d      	b.n	8002804 <HAL_RCC_OscConfig+0xcc>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027d0:	d10c      	bne.n	80027ec <HAL_RCC_OscConfig+0xb4>
 80027d2:	4b76      	ldr	r3, [pc, #472]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a75      	ldr	r2, [pc, #468]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 80027d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	4b73      	ldr	r3, [pc, #460]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a72      	ldr	r2, [pc, #456]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 80027e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027e8:	6013      	str	r3, [r2, #0]
 80027ea:	e00b      	b.n	8002804 <HAL_RCC_OscConfig+0xcc>
 80027ec:	4b6f      	ldr	r3, [pc, #444]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a6e      	ldr	r2, [pc, #440]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 80027f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027f6:	6013      	str	r3, [r2, #0]
 80027f8:	4b6c      	ldr	r3, [pc, #432]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a6b      	ldr	r2, [pc, #428]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 80027fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002802:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d013      	beq.n	8002834 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280c:	f7fe fcf6 	bl	80011fc <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002814:	f7fe fcf2 	bl	80011fc <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b64      	cmp	r3, #100	@ 0x64
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e21f      	b.n	8002c66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002826:	4b61      	ldr	r3, [pc, #388]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0f0      	beq.n	8002814 <HAL_RCC_OscConfig+0xdc>
 8002832:	e014      	b.n	800285e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002834:	f7fe fce2 	bl	80011fc <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800283c:	f7fe fcde 	bl	80011fc <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b64      	cmp	r3, #100	@ 0x64
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e20b      	b.n	8002c66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800284e:	4b57      	ldr	r3, [pc, #348]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0x104>
 800285a:	e000      	b.n	800285e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800285c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d06f      	beq.n	800294a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800286a:	4b50      	ldr	r3, [pc, #320]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 030c 	and.w	r3, r3, #12
 8002872:	2b00      	cmp	r3, #0
 8002874:	d017      	beq.n	80028a6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002876:	4b4d      	ldr	r3, [pc, #308]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 030c 	and.w	r3, r3, #12
        || \
 800287e:	2b08      	cmp	r3, #8
 8002880:	d105      	bne.n	800288e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002882:	4b4a      	ldr	r3, [pc, #296]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00b      	beq.n	80028a6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800288e:	4b47      	ldr	r3, [pc, #284]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002896:	2b0c      	cmp	r3, #12
 8002898:	d11c      	bne.n	80028d4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800289a:	4b44      	ldr	r3, [pc, #272]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d116      	bne.n	80028d4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a6:	4b41      	ldr	r3, [pc, #260]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d005      	beq.n	80028be <HAL_RCC_OscConfig+0x186>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d001      	beq.n	80028be <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e1d3      	b.n	8002c66 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028be:	4b3b      	ldr	r3, [pc, #236]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	4937      	ldr	r1, [pc, #220]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028d2:	e03a      	b.n	800294a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d020      	beq.n	800291e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028dc:	4b34      	ldr	r3, [pc, #208]	@ (80029b0 <HAL_RCC_OscConfig+0x278>)
 80028de:	2201      	movs	r2, #1
 80028e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e2:	f7fe fc8b 	bl	80011fc <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ea:	f7fe fc87 	bl	80011fc <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e1b4      	b.n	8002c66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028fc:	4b2b      	ldr	r3, [pc, #172]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0f0      	beq.n	80028ea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002908:	4b28      	ldr	r3, [pc, #160]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	4925      	ldr	r1, [pc, #148]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 8002918:	4313      	orrs	r3, r2
 800291a:	600b      	str	r3, [r1, #0]
 800291c:	e015      	b.n	800294a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800291e:	4b24      	ldr	r3, [pc, #144]	@ (80029b0 <HAL_RCC_OscConfig+0x278>)
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002924:	f7fe fc6a 	bl	80011fc <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800292c:	f7fe fc66 	bl	80011fc <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e193      	b.n	8002c66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800293e:	4b1b      	ldr	r3, [pc, #108]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f0      	bne.n	800292c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d036      	beq.n	80029c4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d016      	beq.n	800298c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800295e:	4b15      	ldr	r3, [pc, #84]	@ (80029b4 <HAL_RCC_OscConfig+0x27c>)
 8002960:	2201      	movs	r2, #1
 8002962:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002964:	f7fe fc4a 	bl	80011fc <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800296c:	f7fe fc46 	bl	80011fc <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e173      	b.n	8002c66 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800297e:	4b0b      	ldr	r3, [pc, #44]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 8002980:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0f0      	beq.n	800296c <HAL_RCC_OscConfig+0x234>
 800298a:	e01b      	b.n	80029c4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800298c:	4b09      	ldr	r3, [pc, #36]	@ (80029b4 <HAL_RCC_OscConfig+0x27c>)
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002992:	f7fe fc33 	bl	80011fc <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002998:	e00e      	b.n	80029b8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800299a:	f7fe fc2f 	bl	80011fc <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d907      	bls.n	80029b8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e15c      	b.n	8002c66 <HAL_RCC_OscConfig+0x52e>
 80029ac:	40023800 	.word	0x40023800
 80029b0:	42470000 	.word	0x42470000
 80029b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b8:	4b8a      	ldr	r3, [pc, #552]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 80029ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1ea      	bne.n	800299a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 8097 	beq.w	8002b00 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029d2:	2300      	movs	r3, #0
 80029d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029d6:	4b83      	ldr	r3, [pc, #524]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10f      	bne.n	8002a02 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	4b7f      	ldr	r3, [pc, #508]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ea:	4a7e      	ldr	r2, [pc, #504]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 80029ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80029f2:	4b7c      	ldr	r3, [pc, #496]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 80029f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029fa:	60bb      	str	r3, [r7, #8]
 80029fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029fe:	2301      	movs	r3, #1
 8002a00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a02:	4b79      	ldr	r3, [pc, #484]	@ (8002be8 <HAL_RCC_OscConfig+0x4b0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d118      	bne.n	8002a40 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a0e:	4b76      	ldr	r3, [pc, #472]	@ (8002be8 <HAL_RCC_OscConfig+0x4b0>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a75      	ldr	r2, [pc, #468]	@ (8002be8 <HAL_RCC_OscConfig+0x4b0>)
 8002a14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a1a:	f7fe fbef 	bl	80011fc <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a22:	f7fe fbeb 	bl	80011fc <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e118      	b.n	8002c66 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a34:	4b6c      	ldr	r3, [pc, #432]	@ (8002be8 <HAL_RCC_OscConfig+0x4b0>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0f0      	beq.n	8002a22 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d106      	bne.n	8002a56 <HAL_RCC_OscConfig+0x31e>
 8002a48:	4b66      	ldr	r3, [pc, #408]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 8002a4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a4c:	4a65      	ldr	r2, [pc, #404]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 8002a4e:	f043 0301 	orr.w	r3, r3, #1
 8002a52:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a54:	e01c      	b.n	8002a90 <HAL_RCC_OscConfig+0x358>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	2b05      	cmp	r3, #5
 8002a5c:	d10c      	bne.n	8002a78 <HAL_RCC_OscConfig+0x340>
 8002a5e:	4b61      	ldr	r3, [pc, #388]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 8002a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a62:	4a60      	ldr	r2, [pc, #384]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 8002a64:	f043 0304 	orr.w	r3, r3, #4
 8002a68:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a6a:	4b5e      	ldr	r3, [pc, #376]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 8002a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a6e:	4a5d      	ldr	r2, [pc, #372]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a76:	e00b      	b.n	8002a90 <HAL_RCC_OscConfig+0x358>
 8002a78:	4b5a      	ldr	r3, [pc, #360]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 8002a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a7c:	4a59      	ldr	r2, [pc, #356]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 8002a7e:	f023 0301 	bic.w	r3, r3, #1
 8002a82:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a84:	4b57      	ldr	r3, [pc, #348]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 8002a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a88:	4a56      	ldr	r2, [pc, #344]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 8002a8a:	f023 0304 	bic.w	r3, r3, #4
 8002a8e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d015      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a98:	f7fe fbb0 	bl	80011fc <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a9e:	e00a      	b.n	8002ab6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa0:	f7fe fbac 	bl	80011fc <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e0d7      	b.n	8002c66 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab6:	4b4b      	ldr	r3, [pc, #300]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 8002ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0ee      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x368>
 8002ac2:	e014      	b.n	8002aee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac4:	f7fe fb9a 	bl	80011fc <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aca:	e00a      	b.n	8002ae2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002acc:	f7fe fb96 	bl	80011fc <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e0c1      	b.n	8002c66 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae2:	4b40      	ldr	r3, [pc, #256]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 8002ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1ee      	bne.n	8002acc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002aee:	7dfb      	ldrb	r3, [r7, #23]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d105      	bne.n	8002b00 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af4:	4b3b      	ldr	r3, [pc, #236]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 8002af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af8:	4a3a      	ldr	r2, [pc, #232]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 8002afa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002afe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 80ad 	beq.w	8002c64 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b0a:	4b36      	ldr	r3, [pc, #216]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d060      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d145      	bne.n	8002baa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b1e:	4b33      	ldr	r3, [pc, #204]	@ (8002bec <HAL_RCC_OscConfig+0x4b4>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b24:	f7fe fb6a 	bl	80011fc <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b2c:	f7fe fb66 	bl	80011fc <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e093      	b.n	8002c66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b3e:	4b29      	ldr	r3, [pc, #164]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69da      	ldr	r2, [r3, #28]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b58:	019b      	lsls	r3, r3, #6
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b60:	085b      	lsrs	r3, r3, #1
 8002b62:	3b01      	subs	r3, #1
 8002b64:	041b      	lsls	r3, r3, #16
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6c:	061b      	lsls	r3, r3, #24
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b74:	071b      	lsls	r3, r3, #28
 8002b76:	491b      	ldr	r1, [pc, #108]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bec <HAL_RCC_OscConfig+0x4b4>)
 8002b7e:	2201      	movs	r2, #1
 8002b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b82:	f7fe fb3b 	bl	80011fc <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b88:	e008      	b.n	8002b9c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b8a:	f7fe fb37 	bl	80011fc <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e064      	b.n	8002c66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b9c:	4b11      	ldr	r3, [pc, #68]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0f0      	beq.n	8002b8a <HAL_RCC_OscConfig+0x452>
 8002ba8:	e05c      	b.n	8002c64 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002baa:	4b10      	ldr	r3, [pc, #64]	@ (8002bec <HAL_RCC_OscConfig+0x4b4>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb0:	f7fe fb24 	bl	80011fc <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb8:	f7fe fb20 	bl	80011fc <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e04d      	b.n	8002c66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bca:	4b06      	ldr	r3, [pc, #24]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f0      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x480>
 8002bd6:	e045      	b.n	8002c64 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d107      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e040      	b.n	8002c66 <HAL_RCC_OscConfig+0x52e>
 8002be4:	40023800 	.word	0x40023800
 8002be8:	40007000 	.word	0x40007000
 8002bec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bf0:	4b1f      	ldr	r3, [pc, #124]	@ (8002c70 <HAL_RCC_OscConfig+0x538>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d030      	beq.n	8002c60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d129      	bne.n	8002c60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d122      	bne.n	8002c60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c20:	4013      	ands	r3, r2
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d119      	bne.n	8002c60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c36:	085b      	lsrs	r3, r3, #1
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d10f      	bne.n	8002c60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d107      	bne.n	8002c60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e000      	b.n	8002c66 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40023800 	.word	0x40023800

08002c74 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e097      	b.n	8002db8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d106      	bne.n	8002ca2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f7fe f8bf 	bl	8000e20 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6812      	ldr	r2, [r2, #0]
 8002cb4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002cb8:	f023 0307 	bic.w	r3, r3, #7
 8002cbc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4610      	mov	r0, r2
 8002cca:	f000 fa29 	bl	8003120 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cf6:	f023 0303 	bic.w	r3, r3, #3
 8002cfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	021b      	lsls	r3, r3, #8
 8002d06:	4313      	orrs	r3, r2
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002d14:	f023 030c 	bic.w	r3, r3, #12
 8002d18:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d20:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	021b      	lsls	r3, r3, #8
 8002d30:	4313      	orrs	r3, r2
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	011a      	lsls	r2, r3, #4
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	031b      	lsls	r3, r3, #12
 8002d44:	4313      	orrs	r3, r2
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002d52:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8002d5a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	011b      	lsls	r3, r3, #4
 8002d66:	4313      	orrs	r3, r2
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002dd0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002dd8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002de0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002de8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d110      	bne.n	8002e12 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d102      	bne.n	8002dfc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002df6:	7b7b      	ldrb	r3, [r7, #13]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d001      	beq.n	8002e00 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e069      	b.n	8002ed4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e10:	e031      	b.n	8002e76 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d110      	bne.n	8002e3a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e18:	7bbb      	ldrb	r3, [r7, #14]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d102      	bne.n	8002e24 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e1e:	7b3b      	ldrb	r3, [r7, #12]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d001      	beq.n	8002e28 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e055      	b.n	8002ed4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2202      	movs	r2, #2
 8002e34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e38:	e01d      	b.n	8002e76 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d108      	bne.n	8002e52 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e40:	7bbb      	ldrb	r3, [r7, #14]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d105      	bne.n	8002e52 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e46:	7b7b      	ldrb	r3, [r7, #13]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d102      	bne.n	8002e52 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e4c:	7b3b      	ldrb	r3, [r7, #12]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d001      	beq.n	8002e56 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e03e      	b.n	8002ed4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2202      	movs	r2, #2
 8002e5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2202      	movs	r2, #2
 8002e62:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2202      	movs	r2, #2
 8002e6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2202      	movs	r2, #2
 8002e72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <HAL_TIM_Encoder_Start+0xc4>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d008      	beq.n	8002e94 <HAL_TIM_Encoder_Start+0xd4>
 8002e82:	e00f      	b.n	8002ea4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 f9ed 	bl	800326c <TIM_CCxChannelCmd>
      break;
 8002e92:	e016      	b.n	8002ec2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	2104      	movs	r1, #4
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f000 f9e5 	bl	800326c <TIM_CCxChannelCmd>
      break;
 8002ea2:	e00e      	b.n	8002ec2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	2100      	movs	r1, #0
 8002eac:	4618      	mov	r0, r3
 8002eae:	f000 f9dd 	bl	800326c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	2104      	movs	r1, #4
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 f9d6 	bl	800326c <TIM_CCxChannelCmd>
      break;
 8002ec0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f042 0201 	orr.w	r2, r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d020      	beq.n	8002f40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d01b      	beq.n	8002f40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f06f 0202 	mvn.w	r2, #2
 8002f10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f8dc 	bl	80030e4 <HAL_TIM_IC_CaptureCallback>
 8002f2c:	e005      	b.n	8002f3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f8ce 	bl	80030d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 f8df 	bl	80030f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d020      	beq.n	8002f8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d01b      	beq.n	8002f8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f06f 0204 	mvn.w	r2, #4
 8002f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2202      	movs	r2, #2
 8002f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f8b6 	bl	80030e4 <HAL_TIM_IC_CaptureCallback>
 8002f78:	e005      	b.n	8002f86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f8a8 	bl	80030d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 f8b9 	bl	80030f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d020      	beq.n	8002fd8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f003 0308 	and.w	r3, r3, #8
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d01b      	beq.n	8002fd8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f06f 0208 	mvn.w	r2, #8
 8002fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2204      	movs	r2, #4
 8002fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f890 	bl	80030e4 <HAL_TIM_IC_CaptureCallback>
 8002fc4:	e005      	b.n	8002fd2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f882 	bl	80030d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 f893 	bl	80030f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f003 0310 	and.w	r3, r3, #16
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d020      	beq.n	8003024 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f003 0310 	and.w	r3, r3, #16
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d01b      	beq.n	8003024 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f06f 0210 	mvn.w	r2, #16
 8002ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2208      	movs	r2, #8
 8002ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f86a 	bl	80030e4 <HAL_TIM_IC_CaptureCallback>
 8003010:	e005      	b.n	800301e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f85c 	bl	80030d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f86d 	bl	80030f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00c      	beq.n	8003048 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b00      	cmp	r3, #0
 8003036:	d007      	beq.n	8003048 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0201 	mvn.w	r2, #1
 8003040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f83a 	bl	80030bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00c      	beq.n	800306c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003058:	2b00      	cmp	r3, #0
 800305a:	d007      	beq.n	800306c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f9ac 	bl	80033c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00c      	beq.n	8003090 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800307c:	2b00      	cmp	r3, #0
 800307e:	d007      	beq.n	8003090 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f83e 	bl	800310c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	f003 0320 	and.w	r3, r3, #32
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00c      	beq.n	80030b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f003 0320 	and.w	r3, r3, #32
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d007      	beq.n	80030b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f06f 0220 	mvn.w	r2, #32
 80030ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f97e 	bl	80033b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030b4:	bf00      	nop
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a43      	ldr	r2, [pc, #268]	@ (8003240 <TIM_Base_SetConfig+0x120>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d013      	beq.n	8003160 <TIM_Base_SetConfig+0x40>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800313e:	d00f      	beq.n	8003160 <TIM_Base_SetConfig+0x40>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a40      	ldr	r2, [pc, #256]	@ (8003244 <TIM_Base_SetConfig+0x124>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d00b      	beq.n	8003160 <TIM_Base_SetConfig+0x40>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a3f      	ldr	r2, [pc, #252]	@ (8003248 <TIM_Base_SetConfig+0x128>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d007      	beq.n	8003160 <TIM_Base_SetConfig+0x40>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a3e      	ldr	r2, [pc, #248]	@ (800324c <TIM_Base_SetConfig+0x12c>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d003      	beq.n	8003160 <TIM_Base_SetConfig+0x40>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a3d      	ldr	r2, [pc, #244]	@ (8003250 <TIM_Base_SetConfig+0x130>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d108      	bne.n	8003172 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003166:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	4313      	orrs	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a32      	ldr	r2, [pc, #200]	@ (8003240 <TIM_Base_SetConfig+0x120>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d02b      	beq.n	80031d2 <TIM_Base_SetConfig+0xb2>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003180:	d027      	beq.n	80031d2 <TIM_Base_SetConfig+0xb2>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a2f      	ldr	r2, [pc, #188]	@ (8003244 <TIM_Base_SetConfig+0x124>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d023      	beq.n	80031d2 <TIM_Base_SetConfig+0xb2>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a2e      	ldr	r2, [pc, #184]	@ (8003248 <TIM_Base_SetConfig+0x128>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d01f      	beq.n	80031d2 <TIM_Base_SetConfig+0xb2>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a2d      	ldr	r2, [pc, #180]	@ (800324c <TIM_Base_SetConfig+0x12c>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d01b      	beq.n	80031d2 <TIM_Base_SetConfig+0xb2>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a2c      	ldr	r2, [pc, #176]	@ (8003250 <TIM_Base_SetConfig+0x130>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d017      	beq.n	80031d2 <TIM_Base_SetConfig+0xb2>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a2b      	ldr	r2, [pc, #172]	@ (8003254 <TIM_Base_SetConfig+0x134>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d013      	beq.n	80031d2 <TIM_Base_SetConfig+0xb2>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a2a      	ldr	r2, [pc, #168]	@ (8003258 <TIM_Base_SetConfig+0x138>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d00f      	beq.n	80031d2 <TIM_Base_SetConfig+0xb2>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a29      	ldr	r2, [pc, #164]	@ (800325c <TIM_Base_SetConfig+0x13c>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d00b      	beq.n	80031d2 <TIM_Base_SetConfig+0xb2>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a28      	ldr	r2, [pc, #160]	@ (8003260 <TIM_Base_SetConfig+0x140>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d007      	beq.n	80031d2 <TIM_Base_SetConfig+0xb2>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a27      	ldr	r2, [pc, #156]	@ (8003264 <TIM_Base_SetConfig+0x144>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d003      	beq.n	80031d2 <TIM_Base_SetConfig+0xb2>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a26      	ldr	r2, [pc, #152]	@ (8003268 <TIM_Base_SetConfig+0x148>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d108      	bne.n	80031e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	689a      	ldr	r2, [r3, #8]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a0e      	ldr	r2, [pc, #56]	@ (8003240 <TIM_Base_SetConfig+0x120>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d003      	beq.n	8003212 <TIM_Base_SetConfig+0xf2>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a10      	ldr	r2, [pc, #64]	@ (8003250 <TIM_Base_SetConfig+0x130>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d103      	bne.n	800321a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	691a      	ldr	r2, [r3, #16]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f043 0204 	orr.w	r2, r3, #4
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	601a      	str	r2, [r3, #0]
}
 8003232:	bf00      	nop
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	40010000 	.word	0x40010000
 8003244:	40000400 	.word	0x40000400
 8003248:	40000800 	.word	0x40000800
 800324c:	40000c00 	.word	0x40000c00
 8003250:	40010400 	.word	0x40010400
 8003254:	40014000 	.word	0x40014000
 8003258:	40014400 	.word	0x40014400
 800325c:	40014800 	.word	0x40014800
 8003260:	40001800 	.word	0x40001800
 8003264:	40001c00 	.word	0x40001c00
 8003268:	40002000 	.word	0x40002000

0800326c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800326c:	b480      	push	{r7}
 800326e:	b087      	sub	sp, #28
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f003 031f 	and.w	r3, r3, #31
 800327e:	2201      	movs	r2, #1
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6a1a      	ldr	r2, [r3, #32]
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	43db      	mvns	r3, r3
 800328e:	401a      	ands	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6a1a      	ldr	r2, [r3, #32]
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	f003 031f 	and.w	r3, r3, #31
 800329e:	6879      	ldr	r1, [r7, #4]
 80032a0:	fa01 f303 	lsl.w	r3, r1, r3
 80032a4:	431a      	orrs	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	621a      	str	r2, [r3, #32]
}
 80032aa:	bf00      	nop
 80032ac:	371c      	adds	r7, #28
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
	...

080032b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d101      	bne.n	80032d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032cc:	2302      	movs	r3, #2
 80032ce:	e05a      	b.n	8003386 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2202      	movs	r2, #2
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	4313      	orrs	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a21      	ldr	r2, [pc, #132]	@ (8003394 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d022      	beq.n	800335a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800331c:	d01d      	beq.n	800335a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a1d      	ldr	r2, [pc, #116]	@ (8003398 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d018      	beq.n	800335a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a1b      	ldr	r2, [pc, #108]	@ (800339c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d013      	beq.n	800335a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a1a      	ldr	r2, [pc, #104]	@ (80033a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d00e      	beq.n	800335a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a18      	ldr	r2, [pc, #96]	@ (80033a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d009      	beq.n	800335a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a17      	ldr	r2, [pc, #92]	@ (80033a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d004      	beq.n	800335a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a15      	ldr	r2, [pc, #84]	@ (80033ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d10c      	bne.n	8003374 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003360:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	4313      	orrs	r3, r2
 800336a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	40010000 	.word	0x40010000
 8003398:	40000400 	.word	0x40000400
 800339c:	40000800 	.word	0x40000800
 80033a0:	40000c00 	.word	0x40000c00
 80033a4:	40010400 	.word	0x40010400
 80033a8:	40014000 	.word	0x40014000
 80033ac:	40001800 	.word	0x40001800

080033b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e042      	b.n	8003470 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d106      	bne.n	8003404 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7fd fd86 	bl	8000f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2224      	movs	r2, #36	@ 0x24
 8003408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800341a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 f82b 	bl	8003478 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003430:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695a      	ldr	r2, [r3, #20]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003440:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003450:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2220      	movs	r2, #32
 8003464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800347c:	b0c0      	sub	sp, #256	@ 0x100
 800347e:	af00      	add	r7, sp, #0
 8003480:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003494:	68d9      	ldr	r1, [r3, #12]
 8003496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	ea40 0301 	orr.w	r3, r0, r1
 80034a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	431a      	orrs	r2, r3
 80034b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	431a      	orrs	r2, r3
 80034b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	4313      	orrs	r3, r2
 80034c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80034c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80034d0:	f021 010c 	bic.w	r1, r1, #12
 80034d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80034de:	430b      	orrs	r3, r1
 80034e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80034ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034f2:	6999      	ldr	r1, [r3, #24]
 80034f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	ea40 0301 	orr.w	r3, r0, r1
 80034fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	4b8f      	ldr	r3, [pc, #572]	@ (8003744 <UART_SetConfig+0x2cc>)
 8003508:	429a      	cmp	r2, r3
 800350a:	d005      	beq.n	8003518 <UART_SetConfig+0xa0>
 800350c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	4b8d      	ldr	r3, [pc, #564]	@ (8003748 <UART_SetConfig+0x2d0>)
 8003514:	429a      	cmp	r2, r3
 8003516:	d104      	bne.n	8003522 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003518:	f7fe fba0 	bl	8001c5c <HAL_RCC_GetPCLK2Freq>
 800351c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003520:	e003      	b.n	800352a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003522:	f7fe fb87 	bl	8001c34 <HAL_RCC_GetPCLK1Freq>
 8003526:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800352a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800352e:	69db      	ldr	r3, [r3, #28]
 8003530:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003534:	f040 810c 	bne.w	8003750 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003538:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800353c:	2200      	movs	r2, #0
 800353e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003542:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003546:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800354a:	4622      	mov	r2, r4
 800354c:	462b      	mov	r3, r5
 800354e:	1891      	adds	r1, r2, r2
 8003550:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003552:	415b      	adcs	r3, r3
 8003554:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003556:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800355a:	4621      	mov	r1, r4
 800355c:	eb12 0801 	adds.w	r8, r2, r1
 8003560:	4629      	mov	r1, r5
 8003562:	eb43 0901 	adc.w	r9, r3, r1
 8003566:	f04f 0200 	mov.w	r2, #0
 800356a:	f04f 0300 	mov.w	r3, #0
 800356e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003572:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003576:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800357a:	4690      	mov	r8, r2
 800357c:	4699      	mov	r9, r3
 800357e:	4623      	mov	r3, r4
 8003580:	eb18 0303 	adds.w	r3, r8, r3
 8003584:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003588:	462b      	mov	r3, r5
 800358a:	eb49 0303 	adc.w	r3, r9, r3
 800358e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800359e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80035a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80035a6:	460b      	mov	r3, r1
 80035a8:	18db      	adds	r3, r3, r3
 80035aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80035ac:	4613      	mov	r3, r2
 80035ae:	eb42 0303 	adc.w	r3, r2, r3
 80035b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80035b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80035b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80035bc:	f7fc fe28 	bl	8000210 <__aeabi_uldivmod>
 80035c0:	4602      	mov	r2, r0
 80035c2:	460b      	mov	r3, r1
 80035c4:	4b61      	ldr	r3, [pc, #388]	@ (800374c <UART_SetConfig+0x2d4>)
 80035c6:	fba3 2302 	umull	r2, r3, r3, r2
 80035ca:	095b      	lsrs	r3, r3, #5
 80035cc:	011c      	lsls	r4, r3, #4
 80035ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035d2:	2200      	movs	r2, #0
 80035d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035d8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80035dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80035e0:	4642      	mov	r2, r8
 80035e2:	464b      	mov	r3, r9
 80035e4:	1891      	adds	r1, r2, r2
 80035e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80035e8:	415b      	adcs	r3, r3
 80035ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80035f0:	4641      	mov	r1, r8
 80035f2:	eb12 0a01 	adds.w	sl, r2, r1
 80035f6:	4649      	mov	r1, r9
 80035f8:	eb43 0b01 	adc.w	fp, r3, r1
 80035fc:	f04f 0200 	mov.w	r2, #0
 8003600:	f04f 0300 	mov.w	r3, #0
 8003604:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003608:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800360c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003610:	4692      	mov	sl, r2
 8003612:	469b      	mov	fp, r3
 8003614:	4643      	mov	r3, r8
 8003616:	eb1a 0303 	adds.w	r3, sl, r3
 800361a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800361e:	464b      	mov	r3, r9
 8003620:	eb4b 0303 	adc.w	r3, fp, r3
 8003624:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003634:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003638:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800363c:	460b      	mov	r3, r1
 800363e:	18db      	adds	r3, r3, r3
 8003640:	643b      	str	r3, [r7, #64]	@ 0x40
 8003642:	4613      	mov	r3, r2
 8003644:	eb42 0303 	adc.w	r3, r2, r3
 8003648:	647b      	str	r3, [r7, #68]	@ 0x44
 800364a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800364e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003652:	f7fc fddd 	bl	8000210 <__aeabi_uldivmod>
 8003656:	4602      	mov	r2, r0
 8003658:	460b      	mov	r3, r1
 800365a:	4611      	mov	r1, r2
 800365c:	4b3b      	ldr	r3, [pc, #236]	@ (800374c <UART_SetConfig+0x2d4>)
 800365e:	fba3 2301 	umull	r2, r3, r3, r1
 8003662:	095b      	lsrs	r3, r3, #5
 8003664:	2264      	movs	r2, #100	@ 0x64
 8003666:	fb02 f303 	mul.w	r3, r2, r3
 800366a:	1acb      	subs	r3, r1, r3
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003672:	4b36      	ldr	r3, [pc, #216]	@ (800374c <UART_SetConfig+0x2d4>)
 8003674:	fba3 2302 	umull	r2, r3, r3, r2
 8003678:	095b      	lsrs	r3, r3, #5
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003680:	441c      	add	r4, r3
 8003682:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003686:	2200      	movs	r2, #0
 8003688:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800368c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003690:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003694:	4642      	mov	r2, r8
 8003696:	464b      	mov	r3, r9
 8003698:	1891      	adds	r1, r2, r2
 800369a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800369c:	415b      	adcs	r3, r3
 800369e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80036a4:	4641      	mov	r1, r8
 80036a6:	1851      	adds	r1, r2, r1
 80036a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80036aa:	4649      	mov	r1, r9
 80036ac:	414b      	adcs	r3, r1
 80036ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	f04f 0300 	mov.w	r3, #0
 80036b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80036bc:	4659      	mov	r1, fp
 80036be:	00cb      	lsls	r3, r1, #3
 80036c0:	4651      	mov	r1, sl
 80036c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036c6:	4651      	mov	r1, sl
 80036c8:	00ca      	lsls	r2, r1, #3
 80036ca:	4610      	mov	r0, r2
 80036cc:	4619      	mov	r1, r3
 80036ce:	4603      	mov	r3, r0
 80036d0:	4642      	mov	r2, r8
 80036d2:	189b      	adds	r3, r3, r2
 80036d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80036d8:	464b      	mov	r3, r9
 80036da:	460a      	mov	r2, r1
 80036dc:	eb42 0303 	adc.w	r3, r2, r3
 80036e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80036f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80036f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80036f8:	460b      	mov	r3, r1
 80036fa:	18db      	adds	r3, r3, r3
 80036fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036fe:	4613      	mov	r3, r2
 8003700:	eb42 0303 	adc.w	r3, r2, r3
 8003704:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003706:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800370a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800370e:	f7fc fd7f 	bl	8000210 <__aeabi_uldivmod>
 8003712:	4602      	mov	r2, r0
 8003714:	460b      	mov	r3, r1
 8003716:	4b0d      	ldr	r3, [pc, #52]	@ (800374c <UART_SetConfig+0x2d4>)
 8003718:	fba3 1302 	umull	r1, r3, r3, r2
 800371c:	095b      	lsrs	r3, r3, #5
 800371e:	2164      	movs	r1, #100	@ 0x64
 8003720:	fb01 f303 	mul.w	r3, r1, r3
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	3332      	adds	r3, #50	@ 0x32
 800372a:	4a08      	ldr	r2, [pc, #32]	@ (800374c <UART_SetConfig+0x2d4>)
 800372c:	fba2 2303 	umull	r2, r3, r2, r3
 8003730:	095b      	lsrs	r3, r3, #5
 8003732:	f003 0207 	and.w	r2, r3, #7
 8003736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4422      	add	r2, r4
 800373e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003740:	e106      	b.n	8003950 <UART_SetConfig+0x4d8>
 8003742:	bf00      	nop
 8003744:	40011000 	.word	0x40011000
 8003748:	40011400 	.word	0x40011400
 800374c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003750:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003754:	2200      	movs	r2, #0
 8003756:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800375a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800375e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003762:	4642      	mov	r2, r8
 8003764:	464b      	mov	r3, r9
 8003766:	1891      	adds	r1, r2, r2
 8003768:	6239      	str	r1, [r7, #32]
 800376a:	415b      	adcs	r3, r3
 800376c:	627b      	str	r3, [r7, #36]	@ 0x24
 800376e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003772:	4641      	mov	r1, r8
 8003774:	1854      	adds	r4, r2, r1
 8003776:	4649      	mov	r1, r9
 8003778:	eb43 0501 	adc.w	r5, r3, r1
 800377c:	f04f 0200 	mov.w	r2, #0
 8003780:	f04f 0300 	mov.w	r3, #0
 8003784:	00eb      	lsls	r3, r5, #3
 8003786:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800378a:	00e2      	lsls	r2, r4, #3
 800378c:	4614      	mov	r4, r2
 800378e:	461d      	mov	r5, r3
 8003790:	4643      	mov	r3, r8
 8003792:	18e3      	adds	r3, r4, r3
 8003794:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003798:	464b      	mov	r3, r9
 800379a:	eb45 0303 	adc.w	r3, r5, r3
 800379e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80037a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80037ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80037b2:	f04f 0200 	mov.w	r2, #0
 80037b6:	f04f 0300 	mov.w	r3, #0
 80037ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80037be:	4629      	mov	r1, r5
 80037c0:	008b      	lsls	r3, r1, #2
 80037c2:	4621      	mov	r1, r4
 80037c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037c8:	4621      	mov	r1, r4
 80037ca:	008a      	lsls	r2, r1, #2
 80037cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80037d0:	f7fc fd1e 	bl	8000210 <__aeabi_uldivmod>
 80037d4:	4602      	mov	r2, r0
 80037d6:	460b      	mov	r3, r1
 80037d8:	4b60      	ldr	r3, [pc, #384]	@ (800395c <UART_SetConfig+0x4e4>)
 80037da:	fba3 2302 	umull	r2, r3, r3, r2
 80037de:	095b      	lsrs	r3, r3, #5
 80037e0:	011c      	lsls	r4, r3, #4
 80037e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037e6:	2200      	movs	r2, #0
 80037e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80037ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80037f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80037f4:	4642      	mov	r2, r8
 80037f6:	464b      	mov	r3, r9
 80037f8:	1891      	adds	r1, r2, r2
 80037fa:	61b9      	str	r1, [r7, #24]
 80037fc:	415b      	adcs	r3, r3
 80037fe:	61fb      	str	r3, [r7, #28]
 8003800:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003804:	4641      	mov	r1, r8
 8003806:	1851      	adds	r1, r2, r1
 8003808:	6139      	str	r1, [r7, #16]
 800380a:	4649      	mov	r1, r9
 800380c:	414b      	adcs	r3, r1
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	f04f 0200 	mov.w	r2, #0
 8003814:	f04f 0300 	mov.w	r3, #0
 8003818:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800381c:	4659      	mov	r1, fp
 800381e:	00cb      	lsls	r3, r1, #3
 8003820:	4651      	mov	r1, sl
 8003822:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003826:	4651      	mov	r1, sl
 8003828:	00ca      	lsls	r2, r1, #3
 800382a:	4610      	mov	r0, r2
 800382c:	4619      	mov	r1, r3
 800382e:	4603      	mov	r3, r0
 8003830:	4642      	mov	r2, r8
 8003832:	189b      	adds	r3, r3, r2
 8003834:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003838:	464b      	mov	r3, r9
 800383a:	460a      	mov	r2, r1
 800383c:	eb42 0303 	adc.w	r3, r2, r3
 8003840:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800384e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	f04f 0300 	mov.w	r3, #0
 8003858:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800385c:	4649      	mov	r1, r9
 800385e:	008b      	lsls	r3, r1, #2
 8003860:	4641      	mov	r1, r8
 8003862:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003866:	4641      	mov	r1, r8
 8003868:	008a      	lsls	r2, r1, #2
 800386a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800386e:	f7fc fccf 	bl	8000210 <__aeabi_uldivmod>
 8003872:	4602      	mov	r2, r0
 8003874:	460b      	mov	r3, r1
 8003876:	4611      	mov	r1, r2
 8003878:	4b38      	ldr	r3, [pc, #224]	@ (800395c <UART_SetConfig+0x4e4>)
 800387a:	fba3 2301 	umull	r2, r3, r3, r1
 800387e:	095b      	lsrs	r3, r3, #5
 8003880:	2264      	movs	r2, #100	@ 0x64
 8003882:	fb02 f303 	mul.w	r3, r2, r3
 8003886:	1acb      	subs	r3, r1, r3
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	3332      	adds	r3, #50	@ 0x32
 800388c:	4a33      	ldr	r2, [pc, #204]	@ (800395c <UART_SetConfig+0x4e4>)
 800388e:	fba2 2303 	umull	r2, r3, r2, r3
 8003892:	095b      	lsrs	r3, r3, #5
 8003894:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003898:	441c      	add	r4, r3
 800389a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800389e:	2200      	movs	r2, #0
 80038a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80038a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80038a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80038a8:	4642      	mov	r2, r8
 80038aa:	464b      	mov	r3, r9
 80038ac:	1891      	adds	r1, r2, r2
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	415b      	adcs	r3, r3
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038b8:	4641      	mov	r1, r8
 80038ba:	1851      	adds	r1, r2, r1
 80038bc:	6039      	str	r1, [r7, #0]
 80038be:	4649      	mov	r1, r9
 80038c0:	414b      	adcs	r3, r1
 80038c2:	607b      	str	r3, [r7, #4]
 80038c4:	f04f 0200 	mov.w	r2, #0
 80038c8:	f04f 0300 	mov.w	r3, #0
 80038cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80038d0:	4659      	mov	r1, fp
 80038d2:	00cb      	lsls	r3, r1, #3
 80038d4:	4651      	mov	r1, sl
 80038d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038da:	4651      	mov	r1, sl
 80038dc:	00ca      	lsls	r2, r1, #3
 80038de:	4610      	mov	r0, r2
 80038e0:	4619      	mov	r1, r3
 80038e2:	4603      	mov	r3, r0
 80038e4:	4642      	mov	r2, r8
 80038e6:	189b      	adds	r3, r3, r2
 80038e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038ea:	464b      	mov	r3, r9
 80038ec:	460a      	mov	r2, r1
 80038ee:	eb42 0303 	adc.w	r3, r2, r3
 80038f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80038f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80038fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8003900:	f04f 0200 	mov.w	r2, #0
 8003904:	f04f 0300 	mov.w	r3, #0
 8003908:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800390c:	4649      	mov	r1, r9
 800390e:	008b      	lsls	r3, r1, #2
 8003910:	4641      	mov	r1, r8
 8003912:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003916:	4641      	mov	r1, r8
 8003918:	008a      	lsls	r2, r1, #2
 800391a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800391e:	f7fc fc77 	bl	8000210 <__aeabi_uldivmod>
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	4b0d      	ldr	r3, [pc, #52]	@ (800395c <UART_SetConfig+0x4e4>)
 8003928:	fba3 1302 	umull	r1, r3, r3, r2
 800392c:	095b      	lsrs	r3, r3, #5
 800392e:	2164      	movs	r1, #100	@ 0x64
 8003930:	fb01 f303 	mul.w	r3, r1, r3
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	3332      	adds	r3, #50	@ 0x32
 800393a:	4a08      	ldr	r2, [pc, #32]	@ (800395c <UART_SetConfig+0x4e4>)
 800393c:	fba2 2303 	umull	r2, r3, r2, r3
 8003940:	095b      	lsrs	r3, r3, #5
 8003942:	f003 020f 	and.w	r2, r3, #15
 8003946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4422      	add	r2, r4
 800394e:	609a      	str	r2, [r3, #8]
}
 8003950:	bf00      	nop
 8003952:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003956:	46bd      	mov	sp, r7
 8003958:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800395c:	51eb851f 	.word	0x51eb851f

08003960 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003960:	b084      	sub	sp, #16
 8003962:	b580      	push	{r7, lr}
 8003964:	b084      	sub	sp, #16
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
 800396a:	f107 001c 	add.w	r0, r7, #28
 800396e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003972:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003976:	2b01      	cmp	r3, #1
 8003978:	d123      	bne.n	80039c2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800397e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800398e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80039a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d105      	bne.n	80039b6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 fa9a 	bl	8003ef0 <USB_CoreReset>
 80039bc:	4603      	mov	r3, r0
 80039be:	73fb      	strb	r3, [r7, #15]
 80039c0:	e01b      	b.n	80039fa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 fa8e 	bl	8003ef0 <USB_CoreReset>
 80039d4:	4603      	mov	r3, r0
 80039d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80039d8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d106      	bne.n	80039ee <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80039ec:	e005      	b.n	80039fa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80039fa:	7fbb      	ldrb	r3, [r7, #30]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d10b      	bne.n	8003a18 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f043 0206 	orr.w	r2, r3, #6
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f043 0220 	orr.w	r2, r3, #32
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a24:	b004      	add	sp, #16
 8003a26:	4770      	bx	lr

08003a28 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f023 0201 	bic.w	r2, r3, #1
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b084      	sub	sp, #16
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
 8003a52:	460b      	mov	r3, r1
 8003a54:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003a66:	78fb      	ldrb	r3, [r7, #3]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d115      	bne.n	8003a98 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003a78:	200a      	movs	r0, #10
 8003a7a:	f7fd fbcb 	bl	8001214 <HAL_Delay>
      ms += 10U;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	330a      	adds	r3, #10
 8003a82:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 fa25 	bl	8003ed4 <USB_GetMode>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d01e      	beq.n	8003ace <USB_SetCurrentMode+0x84>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2bc7      	cmp	r3, #199	@ 0xc7
 8003a94:	d9f0      	bls.n	8003a78 <USB_SetCurrentMode+0x2e>
 8003a96:	e01a      	b.n	8003ace <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003a98:	78fb      	ldrb	r3, [r7, #3]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d115      	bne.n	8003aca <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003aaa:	200a      	movs	r0, #10
 8003aac:	f7fd fbb2 	bl	8001214 <HAL_Delay>
      ms += 10U;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	330a      	adds	r3, #10
 8003ab4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 fa0c 	bl	8003ed4 <USB_GetMode>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d005      	beq.n	8003ace <USB_SetCurrentMode+0x84>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2bc7      	cmp	r3, #199	@ 0xc7
 8003ac6:	d9f0      	bls.n	8003aaa <USB_SetCurrentMode+0x60>
 8003ac8:	e001      	b.n	8003ace <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e005      	b.n	8003ada <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2bc8      	cmp	r3, #200	@ 0xc8
 8003ad2:	d101      	bne.n	8003ad8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e000      	b.n	8003ada <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
	...

08003ae4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ae4:	b084      	sub	sp, #16
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b086      	sub	sp, #24
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
 8003aee:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003af2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003afe:	2300      	movs	r3, #0
 8003b00:	613b      	str	r3, [r7, #16]
 8003b02:	e009      	b.n	8003b18 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	3340      	adds	r3, #64	@ 0x40
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	2200      	movs	r2, #0
 8003b10:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	3301      	adds	r3, #1
 8003b16:	613b      	str	r3, [r7, #16]
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	2b0e      	cmp	r3, #14
 8003b1c:	d9f2      	bls.n	8003b04 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003b1e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d11c      	bne.n	8003b60 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b34:	f043 0302 	orr.w	r3, r3, #2
 8003b38:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b3e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	e005      	b.n	8003b6c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b64:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003b72:	461a      	mov	r2, r3
 8003b74:	2300      	movs	r3, #0
 8003b76:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b78:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d10d      	bne.n	8003b9c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003b80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d104      	bne.n	8003b92 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003b88:	2100      	movs	r1, #0
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f968 	bl	8003e60 <USB_SetDevSpeed>
 8003b90:	e008      	b.n	8003ba4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003b92:	2101      	movs	r1, #1
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f963 	bl	8003e60 <USB_SetDevSpeed>
 8003b9a:	e003      	b.n	8003ba4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003b9c:	2103      	movs	r1, #3
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f95e 	bl	8003e60 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003ba4:	2110      	movs	r1, #16
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f8fa 	bl	8003da0 <USB_FlushTxFifo>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f924 	bl	8003e04 <USB_FlushRxFifo>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bcc:	461a      	mov	r2, r3
 8003bce:	2300      	movs	r3, #0
 8003bd0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bd8:	461a      	mov	r2, r3
 8003bda:	2300      	movs	r3, #0
 8003bdc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003be4:	461a      	mov	r2, r3
 8003be6:	2300      	movs	r3, #0
 8003be8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bea:	2300      	movs	r3, #0
 8003bec:	613b      	str	r3, [r7, #16]
 8003bee:	e043      	b.n	8003c78 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	015a      	lsls	r2, r3, #5
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c06:	d118      	bne.n	8003c3a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10a      	bne.n	8003c24 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	e013      	b.n	8003c4c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	015a      	lsls	r2, r3, #5
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c30:	461a      	mov	r2, r3
 8003c32:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003c36:	6013      	str	r3, [r2, #0]
 8003c38:	e008      	b.n	8003c4c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	015a      	lsls	r2, r3, #5
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	4413      	add	r3, r2
 8003c42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c46:	461a      	mov	r2, r3
 8003c48:	2300      	movs	r3, #0
 8003c4a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	015a      	lsls	r2, r3, #5
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c58:	461a      	mov	r2, r3
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003c70:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	3301      	adds	r3, #1
 8003c76:	613b      	str	r3, [r7, #16]
 8003c78:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d3b5      	bcc.n	8003bf0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c84:	2300      	movs	r3, #0
 8003c86:	613b      	str	r3, [r7, #16]
 8003c88:	e043      	b.n	8003d12 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	015a      	lsls	r2, r3, #5
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ca0:	d118      	bne.n	8003cd4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10a      	bne.n	8003cbe <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	015a      	lsls	r2, r3, #5
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4413      	add	r3, r2
 8003cb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003cba:	6013      	str	r3, [r2, #0]
 8003cbc:	e013      	b.n	8003ce6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	015a      	lsls	r2, r3, #5
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cca:	461a      	mov	r2, r3
 8003ccc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003cd0:	6013      	str	r3, [r2, #0]
 8003cd2:	e008      	b.n	8003ce6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	015a      	lsls	r2, r3, #5
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	4413      	add	r3, r2
 8003cdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	015a      	lsls	r2, r3, #5
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	4413      	add	r3, r2
 8003cee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	015a      	lsls	r2, r3, #5
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d04:	461a      	mov	r2, r3
 8003d06:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003d0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	613b      	str	r3, [r7, #16]
 8003d12:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003d16:	461a      	mov	r2, r3
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d3b5      	bcc.n	8003c8a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d30:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003d3e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003d40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d105      	bne.n	8003d54 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	f043 0210 	orr.w	r2, r3, #16
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	699a      	ldr	r2, [r3, #24]
 8003d58:	4b10      	ldr	r3, [pc, #64]	@ (8003d9c <USB_DevInit+0x2b8>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003d60:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d005      	beq.n	8003d74 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	f043 0208 	orr.w	r2, r3, #8
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003d74:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d107      	bne.n	8003d8c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003d84:	f043 0304 	orr.w	r3, r3, #4
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3718      	adds	r7, #24
 8003d92:	46bd      	mov	sp, r7
 8003d94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d98:	b004      	add	sp, #16
 8003d9a:	4770      	bx	lr
 8003d9c:	803c3800 	.word	0x803c3800

08003da0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	3301      	adds	r3, #1
 8003db2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003dba:	d901      	bls.n	8003dc0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e01b      	b.n	8003df8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	daf2      	bge.n	8003dae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	019b      	lsls	r3, r3, #6
 8003dd0:	f043 0220 	orr.w	r2, r3, #32
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003de4:	d901      	bls.n	8003dea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e006      	b.n	8003df8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	f003 0320 	and.w	r3, r3, #32
 8003df2:	2b20      	cmp	r3, #32
 8003df4:	d0f0      	beq.n	8003dd8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	3301      	adds	r3, #1
 8003e14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003e1c:	d901      	bls.n	8003e22 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e018      	b.n	8003e54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	daf2      	bge.n	8003e10 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2210      	movs	r2, #16
 8003e32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	3301      	adds	r3, #1
 8003e38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003e40:	d901      	bls.n	8003e46 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e006      	b.n	8003e54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	f003 0310 	and.w	r3, r3, #16
 8003e4e:	2b10      	cmp	r3, #16
 8003e50:	d0f0      	beq.n	8003e34 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	460b      	mov	r3, r1
 8003e6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	78fb      	ldrb	r3, [r7, #3]
 8003e7a:	68f9      	ldr	r1, [r7, #12]
 8003e7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e80:	4313      	orrs	r3, r2
 8003e82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b085      	sub	sp, #20
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003eac:	f023 0303 	bic.w	r3, r3, #3
 8003eb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ec0:	f043 0302 	orr.w	r3, r3, #2
 8003ec4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	f003 0301 	and.w	r3, r3, #1
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	3301      	adds	r3, #1
 8003f00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003f08:	d901      	bls.n	8003f0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e022      	b.n	8003f54 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	daf2      	bge.n	8003efc <USB_CoreReset+0xc>

  count = 10U;
 8003f16:	230a      	movs	r3, #10
 8003f18:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8003f1a:	e002      	b.n	8003f22 <USB_CoreReset+0x32>
  {
    count--;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1f9      	bne.n	8003f1c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	f043 0201 	orr.w	r2, r3, #1
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	3301      	adds	r3, #1
 8003f38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003f40:	d901      	bls.n	8003f46 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e006      	b.n	8003f54 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d0f0      	beq.n	8003f34 <USB_CoreReset+0x44>

  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3714      	adds	r7, #20
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <__NVIC_SetPriority>:
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	4603      	mov	r3, r0
 8003f68:	6039      	str	r1, [r7, #0]
 8003f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	db0a      	blt.n	8003f8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	490c      	ldr	r1, [pc, #48]	@ (8003fac <__NVIC_SetPriority+0x4c>)
 8003f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f7e:	0112      	lsls	r2, r2, #4
 8003f80:	b2d2      	uxtb	r2, r2
 8003f82:	440b      	add	r3, r1
 8003f84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003f88:	e00a      	b.n	8003fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	4908      	ldr	r1, [pc, #32]	@ (8003fb0 <__NVIC_SetPriority+0x50>)
 8003f90:	79fb      	ldrb	r3, [r7, #7]
 8003f92:	f003 030f 	and.w	r3, r3, #15
 8003f96:	3b04      	subs	r3, #4
 8003f98:	0112      	lsls	r2, r2, #4
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	761a      	strb	r2, [r3, #24]
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	e000e100 	.word	0xe000e100
 8003fb0:	e000ed00 	.word	0xe000ed00

08003fb4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003fb8:	2100      	movs	r1, #0
 8003fba:	f06f 0004 	mvn.w	r0, #4
 8003fbe:	f7ff ffcf 	bl	8003f60 <__NVIC_SetPriority>
#endif
}
 8003fc2:	bf00      	nop
 8003fc4:	bd80      	pop	{r7, pc}
	...

08003fc8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fce:	f3ef 8305 	mrs	r3, IPSR
 8003fd2:	603b      	str	r3, [r7, #0]
  return(result);
 8003fd4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003fda:	f06f 0305 	mvn.w	r3, #5
 8003fde:	607b      	str	r3, [r7, #4]
 8003fe0:	e00c      	b.n	8003ffc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800400c <osKernelInitialize+0x44>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d105      	bne.n	8003ff6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003fea:	4b08      	ldr	r3, [pc, #32]	@ (800400c <osKernelInitialize+0x44>)
 8003fec:	2201      	movs	r2, #1
 8003fee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	607b      	str	r3, [r7, #4]
 8003ff4:	e002      	b.n	8003ffc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8003ffa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ffc:	687b      	ldr	r3, [r7, #4]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	200005e8 	.word	0x200005e8

08004010 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004016:	f3ef 8305 	mrs	r3, IPSR
 800401a:	603b      	str	r3, [r7, #0]
  return(result);
 800401c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004022:	f06f 0305 	mvn.w	r3, #5
 8004026:	607b      	str	r3, [r7, #4]
 8004028:	e010      	b.n	800404c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800402a:	4b0b      	ldr	r3, [pc, #44]	@ (8004058 <osKernelStart+0x48>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d109      	bne.n	8004046 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004032:	f7ff ffbf 	bl	8003fb4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004036:	4b08      	ldr	r3, [pc, #32]	@ (8004058 <osKernelStart+0x48>)
 8004038:	2202      	movs	r2, #2
 800403a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800403c:	f001 f98a 	bl	8005354 <vTaskStartScheduler>
      stat = osOK;
 8004040:	2300      	movs	r3, #0
 8004042:	607b      	str	r3, [r7, #4]
 8004044:	e002      	b.n	800404c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004046:	f04f 33ff 	mov.w	r3, #4294967295
 800404a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800404c:	687b      	ldr	r3, [r7, #4]
}
 800404e:	4618      	mov	r0, r3
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	200005e8 	.word	0x200005e8

0800405c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800405c:	b580      	push	{r7, lr}
 800405e:	b08e      	sub	sp, #56	@ 0x38
 8004060:	af04      	add	r7, sp, #16
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004068:	2300      	movs	r3, #0
 800406a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800406c:	f3ef 8305 	mrs	r3, IPSR
 8004070:	617b      	str	r3, [r7, #20]
  return(result);
 8004072:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004074:	2b00      	cmp	r3, #0
 8004076:	d17e      	bne.n	8004176 <osThreadNew+0x11a>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d07b      	beq.n	8004176 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800407e:	2380      	movs	r3, #128	@ 0x80
 8004080:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004082:	2318      	movs	r3, #24
 8004084:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004086:	2300      	movs	r3, #0
 8004088:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800408a:	f04f 33ff 	mov.w	r3, #4294967295
 800408e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d045      	beq.n	8004122 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d002      	beq.n	80040a4 <osThreadNew+0x48>
        name = attr->name;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d002      	beq.n	80040b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d008      	beq.n	80040ca <osThreadNew+0x6e>
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	2b38      	cmp	r3, #56	@ 0x38
 80040bc:	d805      	bhi.n	80040ca <osThreadNew+0x6e>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <osThreadNew+0x72>
        return (NULL);
 80040ca:	2300      	movs	r3, #0
 80040cc:	e054      	b.n	8004178 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	089b      	lsrs	r3, r3, #2
 80040dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00e      	beq.n	8004104 <osThreadNew+0xa8>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	2b5b      	cmp	r3, #91	@ 0x5b
 80040ec:	d90a      	bls.n	8004104 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d006      	beq.n	8004104 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <osThreadNew+0xa8>
        mem = 1;
 80040fe:	2301      	movs	r3, #1
 8004100:	61bb      	str	r3, [r7, #24]
 8004102:	e010      	b.n	8004126 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10c      	bne.n	8004126 <osThreadNew+0xca>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d108      	bne.n	8004126 <osThreadNew+0xca>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d104      	bne.n	8004126 <osThreadNew+0xca>
          mem = 0;
 800411c:	2300      	movs	r3, #0
 800411e:	61bb      	str	r3, [r7, #24]
 8004120:	e001      	b.n	8004126 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004122:	2300      	movs	r3, #0
 8004124:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d110      	bne.n	800414e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004134:	9202      	str	r2, [sp, #8]
 8004136:	9301      	str	r3, [sp, #4]
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	6a3a      	ldr	r2, [r7, #32]
 8004140:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 ff2a 	bl	8004f9c <xTaskCreateStatic>
 8004148:	4603      	mov	r3, r0
 800414a:	613b      	str	r3, [r7, #16]
 800414c:	e013      	b.n	8004176 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d110      	bne.n	8004176 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004154:	6a3b      	ldr	r3, [r7, #32]
 8004156:	b29a      	uxth	r2, r3
 8004158:	f107 0310 	add.w	r3, r7, #16
 800415c:	9301      	str	r3, [sp, #4]
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f000 ff78 	bl	800505c <xTaskCreate>
 800416c:	4603      	mov	r3, r0
 800416e:	2b01      	cmp	r3, #1
 8004170:	d001      	beq.n	8004176 <osThreadNew+0x11a>
            hTask = NULL;
 8004172:	2300      	movs	r3, #0
 8004174:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004176:	693b      	ldr	r3, [r7, #16]
}
 8004178:	4618      	mov	r0, r3
 800417a:	3728      	adds	r7, #40	@ 0x28
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004188:	f3ef 8305 	mrs	r3, IPSR
 800418c:	60bb      	str	r3, [r7, #8]
  return(result);
 800418e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004190:	2b00      	cmp	r3, #0
 8004192:	d003      	beq.n	800419c <osDelay+0x1c>
    stat = osErrorISR;
 8004194:	f06f 0305 	mvn.w	r3, #5
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	e007      	b.n	80041ac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800419c:	2300      	movs	r3, #0
 800419e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <osDelay+0x2c>
      vTaskDelay(ticks);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f001 f89e 	bl	80052e8 <vTaskDelay>
    }
  }

  return (stat);
 80041ac:	68fb      	ldr	r3, [r7, #12]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b086      	sub	sp, #24
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80041be:	2300      	movs	r3, #0
 80041c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041c2:	f3ef 8305 	mrs	r3, IPSR
 80041c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80041c8:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d12d      	bne.n	800422a <osEventFlagsNew+0x74>
    mem = -1;
 80041ce:	f04f 33ff 	mov.w	r3, #4294967295
 80041d2:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d015      	beq.n	8004206 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d006      	beq.n	80041f0 <osEventFlagsNew+0x3a>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	2b1f      	cmp	r3, #31
 80041e8:	d902      	bls.n	80041f0 <osEventFlagsNew+0x3a>
        mem = 1;
 80041ea:	2301      	movs	r3, #1
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	e00c      	b.n	800420a <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d108      	bne.n	800420a <osEventFlagsNew+0x54>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d104      	bne.n	800420a <osEventFlagsNew+0x54>
          mem = 0;
 8004200:	2300      	movs	r3, #0
 8004202:	613b      	str	r3, [r7, #16]
 8004204:	e001      	b.n	800420a <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8004206:	2300      	movs	r3, #0
 8004208:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d106      	bne.n	800421e <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	4618      	mov	r0, r3
 8004216:	f000 f863 	bl	80042e0 <xEventGroupCreateStatic>
 800421a:	6178      	str	r0, [r7, #20]
 800421c:	e005      	b.n	800422a <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d102      	bne.n	800422a <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8004224:	f000 f895 	bl	8004352 <xEventGroupCreate>
 8004228:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800422a:	697b      	ldr	r3, [r7, #20]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3718      	adds	r7, #24
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <osEventFlagsGet>:
  }

  return (rflags);
}

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if (ef_id == NULL) {
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d102      	bne.n	800424c <osEventFlagsGet+0x18>
    rflags = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	617b      	str	r3, [r7, #20]
 800424a:	e00f      	b.n	800426c <osEventFlagsGet+0x38>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800424c:	f3ef 8305 	mrs	r3, IPSR
 8004250:	60fb      	str	r3, [r7, #12]
  return(result);
 8004252:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004254:	2b00      	cmp	r3, #0
 8004256:	d004      	beq.n	8004262 <osEventFlagsGet+0x2e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8004258:	6938      	ldr	r0, [r7, #16]
 800425a:	f000 f8cd 	bl	80043f8 <xEventGroupGetBitsFromISR>
 800425e:	6178      	str	r0, [r7, #20]
 8004260:	e004      	b.n	800426c <osEventFlagsGet+0x38>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 8004262:	2100      	movs	r1, #0
 8004264:	6938      	ldr	r0, [r7, #16]
 8004266:	f000 f88e 	bl	8004386 <xEventGroupClearBits>
 800426a:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800426c:	697b      	ldr	r3, [r7, #20]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
	...

08004278 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4a07      	ldr	r2, [pc, #28]	@ (80042a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004288:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	4a06      	ldr	r2, [pc, #24]	@ (80042a8 <vApplicationGetIdleTaskMemory+0x30>)
 800428e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2280      	movs	r2, #128	@ 0x80
 8004294:	601a      	str	r2, [r3, #0]
}
 8004296:	bf00      	nop
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	200005ec 	.word	0x200005ec
 80042a8:	20000648 	.word	0x20000648

080042ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4a07      	ldr	r2, [pc, #28]	@ (80042d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80042bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	4a06      	ldr	r2, [pc, #24]	@ (80042dc <vApplicationGetTimerTaskMemory+0x30>)
 80042c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80042ca:	601a      	str	r2, [r3, #0]
}
 80042cc:	bf00      	nop
 80042ce:	3714      	adds	r7, #20
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	20000848 	.word	0x20000848
 80042dc:	200008a4 	.word	0x200008a4

080042e0 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10b      	bne.n	8004306 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80042ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042f2:	f383 8811 	msr	BASEPRI, r3
 80042f6:	f3bf 8f6f 	isb	sy
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004300:	bf00      	nop
 8004302:	bf00      	nop
 8004304:	e7fd      	b.n	8004302 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8004306:	2320      	movs	r3, #32
 8004308:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	2b20      	cmp	r3, #32
 800430e:	d00b      	beq.n	8004328 <xEventGroupCreateStatic+0x48>
	__asm volatile
 8004310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004314:	f383 8811 	msr	BASEPRI, r3
 8004318:	f3bf 8f6f 	isb	sy
 800431c:	f3bf 8f4f 	dsb	sy
 8004320:	60fb      	str	r3, [r7, #12]
}
 8004322:	bf00      	nop
 8004324:	bf00      	nop
 8004326:	e7fd      	b.n	8004324 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	3304      	adds	r3, #4
 800433c:	4618      	mov	r0, r3
 800433e:	f000 f87f 	bl	8004440 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	2201      	movs	r2, #1
 8004346:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8004348:	697b      	ldr	r3, [r7, #20]
	}
 800434a:	4618      	mov	r0, r3
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8004352:	b580      	push	{r7, lr}
 8004354:	b082      	sub	sp, #8
 8004356:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8004358:	2020      	movs	r0, #32
 800435a:	f002 fad7 	bl	800690c <pvPortMalloc>
 800435e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3304      	adds	r3, #4
 8004370:	4618      	mov	r0, r3
 8004372:	f000 f865 	bl	8004440 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800437c:	687b      	ldr	r3, [r7, #4]
	}
 800437e:	4618      	mov	r0, r3
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <xEventGroupClearBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b086      	sub	sp, #24
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
 800438e:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10b      	bne.n	80043b2 <xEventGroupClearBits+0x2c>
	__asm volatile
 800439a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800439e:	f383 8811 	msr	BASEPRI, r3
 80043a2:	f3bf 8f6f 	isb	sy
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	60fb      	str	r3, [r7, #12]
}
 80043ac:	bf00      	nop
 80043ae:	bf00      	nop
 80043b0:	e7fd      	b.n	80043ae <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043b8:	d30b      	bcc.n	80043d2 <xEventGroupClearBits+0x4c>
	__asm volatile
 80043ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	60bb      	str	r3, [r7, #8]
}
 80043cc:	bf00      	nop
 80043ce:	bf00      	nop
 80043d0:	e7fd      	b.n	80043ce <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80043d2:	f002 f979 	bl	80066c8 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	43db      	mvns	r3, r3
 80043e4:	401a      	ands	r2, r3
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80043ea:	f002 f99f 	bl	800672c <vPortExitCritical>

	return uxReturn;
 80043ee:	693b      	ldr	r3, [r7, #16]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3718      	adds	r7, #24
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 80043f8:	b480      	push	{r7}
 80043fa:	b089      	sub	sp, #36	@ 0x24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004404:	f3ef 8211 	mrs	r2, BASEPRI
 8004408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800440c:	f383 8811 	msr	BASEPRI, r3
 8004410:	f3bf 8f6f 	isb	sy
 8004414:	f3bf 8f4f 	dsb	sy
 8004418:	60fa      	str	r2, [r7, #12]
 800441a:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800441c:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800441e:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	617b      	str	r3, [r7, #20]
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004430:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8004432:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8004434:	4618      	mov	r0, r3
 8004436:	3724      	adds	r7, #36	@ 0x24
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f103 0208 	add.w	r2, r3, #8
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f04f 32ff 	mov.w	r2, #4294967295
 8004458:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f103 0208 	add.w	r2, r3, #8
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f103 0208 	add.w	r2, r3, #8
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800448e:	bf00      	nop
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800449a:	b480      	push	{r7}
 800449c:	b085      	sub	sp, #20
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	689a      	ldr	r2, [r3, #8]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	1c5a      	adds	r2, r3, #1
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	601a      	str	r2, [r3, #0]
}
 80044d6:	bf00      	nop
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044e2:	b480      	push	{r7}
 80044e4:	b085      	sub	sp, #20
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f8:	d103      	bne.n	8004502 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	60fb      	str	r3, [r7, #12]
 8004500:	e00c      	b.n	800451c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	3308      	adds	r3, #8
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	e002      	b.n	8004510 <vListInsert+0x2e>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	60fb      	str	r3, [r7, #12]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	429a      	cmp	r2, r3
 800451a:	d2f6      	bcs.n	800450a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	1c5a      	adds	r2, r3, #1
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	601a      	str	r2, [r3, #0]
}
 8004548:	bf00      	nop
 800454a:	3714      	adds	r7, #20
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6892      	ldr	r2, [r2, #8]
 800456a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6852      	ldr	r2, [r2, #4]
 8004574:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	429a      	cmp	r2, r3
 800457e:	d103      	bne.n	8004588 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	1e5a      	subs	r2, r3, #1
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
}
 800459c:	4618      	mov	r0, r3
 800459e:	3714      	adds	r7, #20
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10b      	bne.n	80045d4 <xQueueGenericReset+0x2c>
	__asm volatile
 80045bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c0:	f383 8811 	msr	BASEPRI, r3
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	60bb      	str	r3, [r7, #8]
}
 80045ce:	bf00      	nop
 80045d0:	bf00      	nop
 80045d2:	e7fd      	b.n	80045d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80045d4:	f002 f878 	bl	80066c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045e0:	68f9      	ldr	r1, [r7, #12]
 80045e2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80045e4:	fb01 f303 	mul.w	r3, r1, r3
 80045e8:	441a      	add	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004604:	3b01      	subs	r3, #1
 8004606:	68f9      	ldr	r1, [r7, #12]
 8004608:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800460a:	fb01 f303 	mul.w	r3, r1, r3
 800460e:	441a      	add	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	22ff      	movs	r2, #255	@ 0xff
 8004618:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	22ff      	movs	r2, #255	@ 0xff
 8004620:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d114      	bne.n	8004654 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d01a      	beq.n	8004668 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	3310      	adds	r3, #16
 8004636:	4618      	mov	r0, r3
 8004638:	f001 f91a 	bl	8005870 <xTaskRemoveFromEventList>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d012      	beq.n	8004668 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004642:	4b0d      	ldr	r3, [pc, #52]	@ (8004678 <xQueueGenericReset+0xd0>)
 8004644:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004648:	601a      	str	r2, [r3, #0]
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	f3bf 8f6f 	isb	sy
 8004652:	e009      	b.n	8004668 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	3310      	adds	r3, #16
 8004658:	4618      	mov	r0, r3
 800465a:	f7ff fef1 	bl	8004440 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	3324      	adds	r3, #36	@ 0x24
 8004662:	4618      	mov	r0, r3
 8004664:	f7ff feec 	bl	8004440 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004668:	f002 f860 	bl	800672c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800466c:	2301      	movs	r3, #1
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	e000ed04 	.word	0xe000ed04

0800467c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800467c:	b580      	push	{r7, lr}
 800467e:	b08e      	sub	sp, #56	@ 0x38
 8004680:	af02      	add	r7, sp, #8
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
 8004688:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10b      	bne.n	80046a8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80046a2:	bf00      	nop
 80046a4:	bf00      	nop
 80046a6:	e7fd      	b.n	80046a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10b      	bne.n	80046c6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80046ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b2:	f383 8811 	msr	BASEPRI, r3
 80046b6:	f3bf 8f6f 	isb	sy
 80046ba:	f3bf 8f4f 	dsb	sy
 80046be:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80046c0:	bf00      	nop
 80046c2:	bf00      	nop
 80046c4:	e7fd      	b.n	80046c2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d002      	beq.n	80046d2 <xQueueGenericCreateStatic+0x56>
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <xQueueGenericCreateStatic+0x5a>
 80046d2:	2301      	movs	r3, #1
 80046d4:	e000      	b.n	80046d8 <xQueueGenericCreateStatic+0x5c>
 80046d6:	2300      	movs	r3, #0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10b      	bne.n	80046f4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80046dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e0:	f383 8811 	msr	BASEPRI, r3
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	623b      	str	r3, [r7, #32]
}
 80046ee:	bf00      	nop
 80046f0:	bf00      	nop
 80046f2:	e7fd      	b.n	80046f0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d102      	bne.n	8004700 <xQueueGenericCreateStatic+0x84>
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d101      	bne.n	8004704 <xQueueGenericCreateStatic+0x88>
 8004700:	2301      	movs	r3, #1
 8004702:	e000      	b.n	8004706 <xQueueGenericCreateStatic+0x8a>
 8004704:	2300      	movs	r3, #0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10b      	bne.n	8004722 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800470a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800470e:	f383 8811 	msr	BASEPRI, r3
 8004712:	f3bf 8f6f 	isb	sy
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	61fb      	str	r3, [r7, #28]
}
 800471c:	bf00      	nop
 800471e:	bf00      	nop
 8004720:	e7fd      	b.n	800471e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004722:	2350      	movs	r3, #80	@ 0x50
 8004724:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	2b50      	cmp	r3, #80	@ 0x50
 800472a:	d00b      	beq.n	8004744 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800472c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004730:	f383 8811 	msr	BASEPRI, r3
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	61bb      	str	r3, [r7, #24]
}
 800473e:	bf00      	nop
 8004740:	bf00      	nop
 8004742:	e7fd      	b.n	8004740 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004744:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800474a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00d      	beq.n	800476c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004758:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800475c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	4613      	mov	r3, r2
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	68b9      	ldr	r1, [r7, #8]
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 f805 	bl	8004776 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800476c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800476e:	4618      	mov	r0, r3
 8004770:	3730      	adds	r7, #48	@ 0x30
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b084      	sub	sp, #16
 800477a:	af00      	add	r7, sp, #0
 800477c:	60f8      	str	r0, [r7, #12]
 800477e:	60b9      	str	r1, [r7, #8]
 8004780:	607a      	str	r2, [r7, #4]
 8004782:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d103      	bne.n	8004792 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	e002      	b.n	8004798 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80047a4:	2101      	movs	r1, #1
 80047a6:	69b8      	ldr	r0, [r7, #24]
 80047a8:	f7ff fefe 	bl	80045a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	78fa      	ldrb	r2, [r7, #3]
 80047b0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80047b4:	bf00      	nop
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b08e      	sub	sp, #56	@ 0x38
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
 80047c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80047ca:	2300      	movs	r3, #0
 80047cc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80047d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10b      	bne.n	80047f0 <xQueueGenericSend+0x34>
	__asm volatile
 80047d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047dc:	f383 8811 	msr	BASEPRI, r3
 80047e0:	f3bf 8f6f 	isb	sy
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80047ea:	bf00      	nop
 80047ec:	bf00      	nop
 80047ee:	e7fd      	b.n	80047ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d103      	bne.n	80047fe <xQueueGenericSend+0x42>
 80047f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <xQueueGenericSend+0x46>
 80047fe:	2301      	movs	r3, #1
 8004800:	e000      	b.n	8004804 <xQueueGenericSend+0x48>
 8004802:	2300      	movs	r3, #0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10b      	bne.n	8004820 <xQueueGenericSend+0x64>
	__asm volatile
 8004808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800480c:	f383 8811 	msr	BASEPRI, r3
 8004810:	f3bf 8f6f 	isb	sy
 8004814:	f3bf 8f4f 	dsb	sy
 8004818:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800481a:	bf00      	nop
 800481c:	bf00      	nop
 800481e:	e7fd      	b.n	800481c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d103      	bne.n	800482e <xQueueGenericSend+0x72>
 8004826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800482a:	2b01      	cmp	r3, #1
 800482c:	d101      	bne.n	8004832 <xQueueGenericSend+0x76>
 800482e:	2301      	movs	r3, #1
 8004830:	e000      	b.n	8004834 <xQueueGenericSend+0x78>
 8004832:	2300      	movs	r3, #0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10b      	bne.n	8004850 <xQueueGenericSend+0x94>
	__asm volatile
 8004838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800483c:	f383 8811 	msr	BASEPRI, r3
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	623b      	str	r3, [r7, #32]
}
 800484a:	bf00      	nop
 800484c:	bf00      	nop
 800484e:	e7fd      	b.n	800484c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004850:	f001 f9ce 	bl	8005bf0 <xTaskGetSchedulerState>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d102      	bne.n	8004860 <xQueueGenericSend+0xa4>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d101      	bne.n	8004864 <xQueueGenericSend+0xa8>
 8004860:	2301      	movs	r3, #1
 8004862:	e000      	b.n	8004866 <xQueueGenericSend+0xaa>
 8004864:	2300      	movs	r3, #0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10b      	bne.n	8004882 <xQueueGenericSend+0xc6>
	__asm volatile
 800486a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800486e:	f383 8811 	msr	BASEPRI, r3
 8004872:	f3bf 8f6f 	isb	sy
 8004876:	f3bf 8f4f 	dsb	sy
 800487a:	61fb      	str	r3, [r7, #28]
}
 800487c:	bf00      	nop
 800487e:	bf00      	nop
 8004880:	e7fd      	b.n	800487e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004882:	f001 ff21 	bl	80066c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004888:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800488a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800488c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800488e:	429a      	cmp	r2, r3
 8004890:	d302      	bcc.n	8004898 <xQueueGenericSend+0xdc>
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b02      	cmp	r3, #2
 8004896:	d129      	bne.n	80048ec <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	68b9      	ldr	r1, [r7, #8]
 800489c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800489e:	f000 fa0f 	bl	8004cc0 <prvCopyDataToQueue>
 80048a2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d010      	beq.n	80048ce <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ae:	3324      	adds	r3, #36	@ 0x24
 80048b0:	4618      	mov	r0, r3
 80048b2:	f000 ffdd 	bl	8005870 <xTaskRemoveFromEventList>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d013      	beq.n	80048e4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80048bc:	4b3f      	ldr	r3, [pc, #252]	@ (80049bc <xQueueGenericSend+0x200>)
 80048be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	f3bf 8f4f 	dsb	sy
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	e00a      	b.n	80048e4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80048ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d007      	beq.n	80048e4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80048d4:	4b39      	ldr	r3, [pc, #228]	@ (80049bc <xQueueGenericSend+0x200>)
 80048d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048da:	601a      	str	r2, [r3, #0]
 80048dc:	f3bf 8f4f 	dsb	sy
 80048e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80048e4:	f001 ff22 	bl	800672c <vPortExitCritical>
				return pdPASS;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e063      	b.n	80049b4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d103      	bne.n	80048fa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80048f2:	f001 ff1b 	bl	800672c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80048f6:	2300      	movs	r3, #0
 80048f8:	e05c      	b.n	80049b4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d106      	bne.n	800490e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004900:	f107 0314 	add.w	r3, r7, #20
 8004904:	4618      	mov	r0, r3
 8004906:	f001 f817 	bl	8005938 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800490a:	2301      	movs	r3, #1
 800490c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800490e:	f001 ff0d 	bl	800672c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004912:	f000 fd87 	bl	8005424 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004916:	f001 fed7 	bl	80066c8 <vPortEnterCritical>
 800491a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800491c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004920:	b25b      	sxtb	r3, r3
 8004922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004926:	d103      	bne.n	8004930 <xQueueGenericSend+0x174>
 8004928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800492a:	2200      	movs	r2, #0
 800492c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004932:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004936:	b25b      	sxtb	r3, r3
 8004938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493c:	d103      	bne.n	8004946 <xQueueGenericSend+0x18a>
 800493e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004946:	f001 fef1 	bl	800672c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800494a:	1d3a      	adds	r2, r7, #4
 800494c:	f107 0314 	add.w	r3, r7, #20
 8004950:	4611      	mov	r1, r2
 8004952:	4618      	mov	r0, r3
 8004954:	f001 f806 	bl	8005964 <xTaskCheckForTimeOut>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d124      	bne.n	80049a8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800495e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004960:	f000 faa6 	bl	8004eb0 <prvIsQueueFull>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d018      	beq.n	800499c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800496a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800496c:	3310      	adds	r3, #16
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	4611      	mov	r1, r2
 8004972:	4618      	mov	r0, r3
 8004974:	f000 ff2a 	bl	80057cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004978:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800497a:	f000 fa31 	bl	8004de0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800497e:	f000 fd5f 	bl	8005440 <xTaskResumeAll>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	f47f af7c 	bne.w	8004882 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800498a:	4b0c      	ldr	r3, [pc, #48]	@ (80049bc <xQueueGenericSend+0x200>)
 800498c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	f3bf 8f4f 	dsb	sy
 8004996:	f3bf 8f6f 	isb	sy
 800499a:	e772      	b.n	8004882 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800499c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800499e:	f000 fa1f 	bl	8004de0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049a2:	f000 fd4d 	bl	8005440 <xTaskResumeAll>
 80049a6:	e76c      	b.n	8004882 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80049a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049aa:	f000 fa19 	bl	8004de0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049ae:	f000 fd47 	bl	8005440 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80049b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3738      	adds	r7, #56	@ 0x38
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	e000ed04 	.word	0xe000ed04

080049c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b090      	sub	sp, #64	@ 0x40
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
 80049cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80049d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d10b      	bne.n	80049f0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80049d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049dc:	f383 8811 	msr	BASEPRI, r3
 80049e0:	f3bf 8f6f 	isb	sy
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80049ea:	bf00      	nop
 80049ec:	bf00      	nop
 80049ee:	e7fd      	b.n	80049ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d103      	bne.n	80049fe <xQueueGenericSendFromISR+0x3e>
 80049f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <xQueueGenericSendFromISR+0x42>
 80049fe:	2301      	movs	r3, #1
 8004a00:	e000      	b.n	8004a04 <xQueueGenericSendFromISR+0x44>
 8004a02:	2300      	movs	r3, #0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10b      	bne.n	8004a20 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a0c:	f383 8811 	msr	BASEPRI, r3
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004a1a:	bf00      	nop
 8004a1c:	bf00      	nop
 8004a1e:	e7fd      	b.n	8004a1c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d103      	bne.n	8004a2e <xQueueGenericSendFromISR+0x6e>
 8004a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d101      	bne.n	8004a32 <xQueueGenericSendFromISR+0x72>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e000      	b.n	8004a34 <xQueueGenericSendFromISR+0x74>
 8004a32:	2300      	movs	r3, #0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10b      	bne.n	8004a50 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a3c:	f383 8811 	msr	BASEPRI, r3
 8004a40:	f3bf 8f6f 	isb	sy
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	623b      	str	r3, [r7, #32]
}
 8004a4a:	bf00      	nop
 8004a4c:	bf00      	nop
 8004a4e:	e7fd      	b.n	8004a4c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a50:	f001 ff1a 	bl	8006888 <vPortValidateInterruptPriority>
	__asm volatile
 8004a54:	f3ef 8211 	mrs	r2, BASEPRI
 8004a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a5c:	f383 8811 	msr	BASEPRI, r3
 8004a60:	f3bf 8f6f 	isb	sy
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	61fa      	str	r2, [r7, #28]
 8004a6a:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8004a6c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a6e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d302      	bcc.n	8004a82 <xQueueGenericSendFromISR+0xc2>
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d12f      	bne.n	8004ae2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a88:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	68b9      	ldr	r1, [r7, #8]
 8004a96:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004a98:	f000 f912 	bl	8004cc0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004a9c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa4:	d112      	bne.n	8004acc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d016      	beq.n	8004adc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ab0:	3324      	adds	r3, #36	@ 0x24
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 fedc 	bl	8005870 <xTaskRemoveFromEventList>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00e      	beq.n	8004adc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00b      	beq.n	8004adc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	601a      	str	r2, [r3, #0]
 8004aca:	e007      	b.n	8004adc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004acc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	b25a      	sxtb	r2, r3
 8004ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ad8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004adc:	2301      	movs	r3, #1
 8004ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004ae0:	e001      	b.n	8004ae6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ae8:	617b      	str	r3, [r7, #20]
	__asm volatile
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f383 8811 	msr	BASEPRI, r3
}
 8004af0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004af2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3740      	adds	r7, #64	@ 0x40
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b08c      	sub	sp, #48	@ 0x30
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10b      	bne.n	8004b2e <xQueueReceive+0x32>
	__asm volatile
 8004b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b1a:	f383 8811 	msr	BASEPRI, r3
 8004b1e:	f3bf 8f6f 	isb	sy
 8004b22:	f3bf 8f4f 	dsb	sy
 8004b26:	623b      	str	r3, [r7, #32]
}
 8004b28:	bf00      	nop
 8004b2a:	bf00      	nop
 8004b2c:	e7fd      	b.n	8004b2a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d103      	bne.n	8004b3c <xQueueReceive+0x40>
 8004b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <xQueueReceive+0x44>
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e000      	b.n	8004b42 <xQueueReceive+0x46>
 8004b40:	2300      	movs	r3, #0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10b      	bne.n	8004b5e <xQueueReceive+0x62>
	__asm volatile
 8004b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	61fb      	str	r3, [r7, #28]
}
 8004b58:	bf00      	nop
 8004b5a:	bf00      	nop
 8004b5c:	e7fd      	b.n	8004b5a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b5e:	f001 f847 	bl	8005bf0 <xTaskGetSchedulerState>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d102      	bne.n	8004b6e <xQueueReceive+0x72>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <xQueueReceive+0x76>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <xQueueReceive+0x78>
 8004b72:	2300      	movs	r3, #0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10b      	bne.n	8004b90 <xQueueReceive+0x94>
	__asm volatile
 8004b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b7c:	f383 8811 	msr	BASEPRI, r3
 8004b80:	f3bf 8f6f 	isb	sy
 8004b84:	f3bf 8f4f 	dsb	sy
 8004b88:	61bb      	str	r3, [r7, #24]
}
 8004b8a:	bf00      	nop
 8004b8c:	bf00      	nop
 8004b8e:	e7fd      	b.n	8004b8c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b90:	f001 fd9a 	bl	80066c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b98:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d01f      	beq.n	8004be0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ba0:	68b9      	ldr	r1, [r7, #8]
 8004ba2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ba4:	f000 f8f6 	bl	8004d94 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004baa:	1e5a      	subs	r2, r3, #1
 8004bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bae:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00f      	beq.n	8004bd8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bba:	3310      	adds	r3, #16
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f000 fe57 	bl	8005870 <xTaskRemoveFromEventList>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d007      	beq.n	8004bd8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004bc8:	4b3c      	ldr	r3, [pc, #240]	@ (8004cbc <xQueueReceive+0x1c0>)
 8004bca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004bd8:	f001 fda8 	bl	800672c <vPortExitCritical>
				return pdPASS;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e069      	b.n	8004cb4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d103      	bne.n	8004bee <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004be6:	f001 fda1 	bl	800672c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004bea:	2300      	movs	r3, #0
 8004bec:	e062      	b.n	8004cb4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d106      	bne.n	8004c02 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bf4:	f107 0310 	add.w	r3, r7, #16
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f000 fe9d 	bl	8005938 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c02:	f001 fd93 	bl	800672c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c06:	f000 fc0d 	bl	8005424 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c0a:	f001 fd5d 	bl	80066c8 <vPortEnterCritical>
 8004c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c14:	b25b      	sxtb	r3, r3
 8004c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1a:	d103      	bne.n	8004c24 <xQueueReceive+0x128>
 8004c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c2a:	b25b      	sxtb	r3, r3
 8004c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c30:	d103      	bne.n	8004c3a <xQueueReceive+0x13e>
 8004c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c3a:	f001 fd77 	bl	800672c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c3e:	1d3a      	adds	r2, r7, #4
 8004c40:	f107 0310 	add.w	r3, r7, #16
 8004c44:	4611      	mov	r1, r2
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 fe8c 	bl	8005964 <xTaskCheckForTimeOut>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d123      	bne.n	8004c9a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c54:	f000 f916 	bl	8004e84 <prvIsQueueEmpty>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d017      	beq.n	8004c8e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c60:	3324      	adds	r3, #36	@ 0x24
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	4611      	mov	r1, r2
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 fdb0 	bl	80057cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c6e:	f000 f8b7 	bl	8004de0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c72:	f000 fbe5 	bl	8005440 <xTaskResumeAll>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d189      	bne.n	8004b90 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8004cbc <xQueueReceive+0x1c0>)
 8004c7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	f3bf 8f4f 	dsb	sy
 8004c88:	f3bf 8f6f 	isb	sy
 8004c8c:	e780      	b.n	8004b90 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004c8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c90:	f000 f8a6 	bl	8004de0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c94:	f000 fbd4 	bl	8005440 <xTaskResumeAll>
 8004c98:	e77a      	b.n	8004b90 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004c9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c9c:	f000 f8a0 	bl	8004de0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ca0:	f000 fbce 	bl	8005440 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ca4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ca6:	f000 f8ed 	bl	8004e84 <prvIsQueueEmpty>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f43f af6f 	beq.w	8004b90 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004cb2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3730      	adds	r7, #48	@ 0x30
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	e000ed04 	.word	0xe000ed04

08004cc0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cd4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10d      	bne.n	8004cfa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d14d      	bne.n	8004d82 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 ff9e 	bl	8005c2c <xTaskPriorityDisinherit>
 8004cf0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	609a      	str	r2, [r3, #8]
 8004cf8:	e043      	b.n	8004d82 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d119      	bne.n	8004d34 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6858      	ldr	r0, [r3, #4]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d08:	461a      	mov	r2, r3
 8004d0a:	68b9      	ldr	r1, [r7, #8]
 8004d0c:	f002 f818 	bl	8006d40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d18:	441a      	add	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d32b      	bcc.n	8004d82 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	605a      	str	r2, [r3, #4]
 8004d32:	e026      	b.n	8004d82 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	68d8      	ldr	r0, [r3, #12]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	68b9      	ldr	r1, [r7, #8]
 8004d40:	f001 fffe 	bl	8006d40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	68da      	ldr	r2, [r3, #12]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4c:	425b      	negs	r3, r3
 8004d4e:	441a      	add	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	68da      	ldr	r2, [r3, #12]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d207      	bcs.n	8004d70 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	689a      	ldr	r2, [r3, #8]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d68:	425b      	negs	r3, r3
 8004d6a:	441a      	add	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d105      	bne.n	8004d82 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004d8a:	697b      	ldr	r3, [r7, #20]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3718      	adds	r7, #24
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d018      	beq.n	8004dd8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68da      	ldr	r2, [r3, #12]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dae:	441a      	add	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68da      	ldr	r2, [r3, #12]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d303      	bcc.n	8004dc8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	68d9      	ldr	r1, [r3, #12]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	6838      	ldr	r0, [r7, #0]
 8004dd4:	f001 ffb4 	bl	8006d40 <memcpy>
	}
}
 8004dd8:	bf00      	nop
 8004dda:	3708      	adds	r7, #8
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004de8:	f001 fc6e 	bl	80066c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004df2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004df4:	e011      	b.n	8004e1a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d012      	beq.n	8004e24 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	3324      	adds	r3, #36	@ 0x24
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 fd34 	bl	8005870 <xTaskRemoveFromEventList>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d001      	beq.n	8004e12 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004e0e:	f000 fe0d 	bl	8005a2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004e12:	7bfb      	ldrb	r3, [r7, #15]
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	dce9      	bgt.n	8004df6 <prvUnlockQueue+0x16>
 8004e22:	e000      	b.n	8004e26 <prvUnlockQueue+0x46>
					break;
 8004e24:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	22ff      	movs	r2, #255	@ 0xff
 8004e2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004e2e:	f001 fc7d 	bl	800672c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004e32:	f001 fc49 	bl	80066c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e3c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e3e:	e011      	b.n	8004e64 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d012      	beq.n	8004e6e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	3310      	adds	r3, #16
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 fd0f 	bl	8005870 <xTaskRemoveFromEventList>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d001      	beq.n	8004e5c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004e58:	f000 fde8 	bl	8005a2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004e5c:	7bbb      	ldrb	r3, [r7, #14]
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	dce9      	bgt.n	8004e40 <prvUnlockQueue+0x60>
 8004e6c:	e000      	b.n	8004e70 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004e6e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	22ff      	movs	r2, #255	@ 0xff
 8004e74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004e78:	f001 fc58 	bl	800672c <vPortExitCritical>
}
 8004e7c:	bf00      	nop
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e8c:	f001 fc1c 	bl	80066c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d102      	bne.n	8004e9e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	e001      	b.n	8004ea2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ea2:	f001 fc43 	bl	800672c <vPortExitCritical>

	return xReturn;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004eb8:	f001 fc06 	bl	80066c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d102      	bne.n	8004ece <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	60fb      	str	r3, [r7, #12]
 8004ecc:	e001      	b.n	8004ed2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ed2:	f001 fc2b 	bl	800672c <vPortExitCritical>

	return xReturn;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004eea:	2300      	movs	r3, #0
 8004eec:	60fb      	str	r3, [r7, #12]
 8004eee:	e014      	b.n	8004f1a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004ef0:	4a0f      	ldr	r2, [pc, #60]	@ (8004f30 <vQueueAddToRegistry+0x50>)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10b      	bne.n	8004f14 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004efc:	490c      	ldr	r1, [pc, #48]	@ (8004f30 <vQueueAddToRegistry+0x50>)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004f06:	4a0a      	ldr	r2, [pc, #40]	@ (8004f30 <vQueueAddToRegistry+0x50>)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	4413      	add	r3, r2
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004f12:	e006      	b.n	8004f22 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	3301      	adds	r3, #1
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2b07      	cmp	r3, #7
 8004f1e:	d9e7      	bls.n	8004ef0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004f20:	bf00      	nop
 8004f22:	bf00      	nop
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	20000ca4 	.word	0x20000ca4

08004f34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004f44:	f001 fbc0 	bl	80066c8 <vPortEnterCritical>
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f4e:	b25b      	sxtb	r3, r3
 8004f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f54:	d103      	bne.n	8004f5e <vQueueWaitForMessageRestricted+0x2a>
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f64:	b25b      	sxtb	r3, r3
 8004f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6a:	d103      	bne.n	8004f74 <vQueueWaitForMessageRestricted+0x40>
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f74:	f001 fbda 	bl	800672c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d106      	bne.n	8004f8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	3324      	adds	r3, #36	@ 0x24
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	68b9      	ldr	r1, [r7, #8]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f000 fc45 	bl	8005818 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004f8e:	6978      	ldr	r0, [r7, #20]
 8004f90:	f7ff ff26 	bl	8004de0 <prvUnlockQueue>
	}
 8004f94:	bf00      	nop
 8004f96:	3718      	adds	r7, #24
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b08e      	sub	sp, #56	@ 0x38
 8004fa0:	af04      	add	r7, sp, #16
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
 8004fa8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004faa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10b      	bne.n	8004fc8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb4:	f383 8811 	msr	BASEPRI, r3
 8004fb8:	f3bf 8f6f 	isb	sy
 8004fbc:	f3bf 8f4f 	dsb	sy
 8004fc0:	623b      	str	r3, [r7, #32]
}
 8004fc2:	bf00      	nop
 8004fc4:	bf00      	nop
 8004fc6:	e7fd      	b.n	8004fc4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10b      	bne.n	8004fe6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	61fb      	str	r3, [r7, #28]
}
 8004fe0:	bf00      	nop
 8004fe2:	bf00      	nop
 8004fe4:	e7fd      	b.n	8004fe2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004fe6:	235c      	movs	r3, #92	@ 0x5c
 8004fe8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	2b5c      	cmp	r3, #92	@ 0x5c
 8004fee:	d00b      	beq.n	8005008 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff4:	f383 8811 	msr	BASEPRI, r3
 8004ff8:	f3bf 8f6f 	isb	sy
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	61bb      	str	r3, [r7, #24]
}
 8005002:	bf00      	nop
 8005004:	bf00      	nop
 8005006:	e7fd      	b.n	8005004 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005008:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800500a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800500c:	2b00      	cmp	r3, #0
 800500e:	d01e      	beq.n	800504e <xTaskCreateStatic+0xb2>
 8005010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005012:	2b00      	cmp	r3, #0
 8005014:	d01b      	beq.n	800504e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005018:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800501a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800501e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005022:	2202      	movs	r2, #2
 8005024:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005028:	2300      	movs	r3, #0
 800502a:	9303      	str	r3, [sp, #12]
 800502c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502e:	9302      	str	r3, [sp, #8]
 8005030:	f107 0314 	add.w	r3, r7, #20
 8005034:	9301      	str	r3, [sp, #4]
 8005036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	68b9      	ldr	r1, [r7, #8]
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f000 f850 	bl	80050e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005046:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005048:	f000 f8de 	bl	8005208 <prvAddNewTaskToReadyList>
 800504c:	e001      	b.n	8005052 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800504e:	2300      	movs	r3, #0
 8005050:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005052:	697b      	ldr	r3, [r7, #20]
	}
 8005054:	4618      	mov	r0, r3
 8005056:	3728      	adds	r7, #40	@ 0x28
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800505c:	b580      	push	{r7, lr}
 800505e:	b08c      	sub	sp, #48	@ 0x30
 8005060:	af04      	add	r7, sp, #16
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	603b      	str	r3, [r7, #0]
 8005068:	4613      	mov	r3, r2
 800506a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800506c:	88fb      	ldrh	r3, [r7, #6]
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4618      	mov	r0, r3
 8005072:	f001 fc4b 	bl	800690c <pvPortMalloc>
 8005076:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00e      	beq.n	800509c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800507e:	205c      	movs	r0, #92	@ 0x5c
 8005080:	f001 fc44 	bl	800690c <pvPortMalloc>
 8005084:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d003      	beq.n	8005094 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	631a      	str	r2, [r3, #48]	@ 0x30
 8005092:	e005      	b.n	80050a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005094:	6978      	ldr	r0, [r7, #20]
 8005096:	f001 fd07 	bl	8006aa8 <vPortFree>
 800509a:	e001      	b.n	80050a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800509c:	2300      	movs	r3, #0
 800509e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d017      	beq.n	80050d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80050ae:	88fa      	ldrh	r2, [r7, #6]
 80050b0:	2300      	movs	r3, #0
 80050b2:	9303      	str	r3, [sp, #12]
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	9302      	str	r3, [sp, #8]
 80050b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ba:	9301      	str	r3, [sp, #4]
 80050bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	68b9      	ldr	r1, [r7, #8]
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f000 f80e 	bl	80050e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050ca:	69f8      	ldr	r0, [r7, #28]
 80050cc:	f000 f89c 	bl	8005208 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80050d0:	2301      	movs	r3, #1
 80050d2:	61bb      	str	r3, [r7, #24]
 80050d4:	e002      	b.n	80050dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80050d6:	f04f 33ff 	mov.w	r3, #4294967295
 80050da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80050dc:	69bb      	ldr	r3, [r7, #24]
	}
 80050de:	4618      	mov	r0, r3
 80050e0:	3720      	adds	r7, #32
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b088      	sub	sp, #32
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	60f8      	str	r0, [r7, #12]
 80050ee:	60b9      	str	r1, [r7, #8]
 80050f0:	607a      	str	r2, [r7, #4]
 80050f2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80050f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	461a      	mov	r2, r3
 80050fe:	21a5      	movs	r1, #165	@ 0xa5
 8005100:	f001 fdf2 	bl	8006ce8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005106:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800510e:	3b01      	subs	r3, #1
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	f023 0307 	bic.w	r3, r3, #7
 800511c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00b      	beq.n	8005140 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800512c:	f383 8811 	msr	BASEPRI, r3
 8005130:	f3bf 8f6f 	isb	sy
 8005134:	f3bf 8f4f 	dsb	sy
 8005138:	617b      	str	r3, [r7, #20]
}
 800513a:	bf00      	nop
 800513c:	bf00      	nop
 800513e:	e7fd      	b.n	800513c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d01f      	beq.n	8005186 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005146:	2300      	movs	r3, #0
 8005148:	61fb      	str	r3, [r7, #28]
 800514a:	e012      	b.n	8005172 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	4413      	add	r3, r2
 8005152:	7819      	ldrb	r1, [r3, #0]
 8005154:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	4413      	add	r3, r2
 800515a:	3334      	adds	r3, #52	@ 0x34
 800515c:	460a      	mov	r2, r1
 800515e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005160:	68ba      	ldr	r2, [r7, #8]
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	4413      	add	r3, r2
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d006      	beq.n	800517a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	3301      	adds	r3, #1
 8005170:	61fb      	str	r3, [r7, #28]
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	2b0f      	cmp	r3, #15
 8005176:	d9e9      	bls.n	800514c <prvInitialiseNewTask+0x66>
 8005178:	e000      	b.n	800517c <prvInitialiseNewTask+0x96>
			{
				break;
 800517a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800517c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800517e:	2200      	movs	r2, #0
 8005180:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005184:	e003      	b.n	800518e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005188:	2200      	movs	r2, #0
 800518a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800518e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005190:	2b37      	cmp	r3, #55	@ 0x37
 8005192:	d901      	bls.n	8005198 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005194:	2337      	movs	r3, #55	@ 0x37
 8005196:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800519a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800519c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800519e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051a2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80051a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a6:	2200      	movs	r2, #0
 80051a8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80051aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ac:	3304      	adds	r3, #4
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7ff f966 	bl	8004480 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80051b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b6:	3318      	adds	r3, #24
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7ff f961 	bl	8004480 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80051be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80051ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80051ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051d2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80051d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d6:	2200      	movs	r2, #0
 80051d8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80051da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	68f9      	ldr	r1, [r7, #12]
 80051e6:	69b8      	ldr	r0, [r7, #24]
 80051e8:	f001 f93e 	bl	8006468 <pxPortInitialiseStack>
 80051ec:	4602      	mov	r2, r0
 80051ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80051f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d002      	beq.n	80051fe <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80051f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051fe:	bf00      	nop
 8005200:	3720      	adds	r7, #32
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
	...

08005208 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005210:	f001 fa5a 	bl	80066c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005214:	4b2d      	ldr	r3, [pc, #180]	@ (80052cc <prvAddNewTaskToReadyList+0xc4>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	3301      	adds	r3, #1
 800521a:	4a2c      	ldr	r2, [pc, #176]	@ (80052cc <prvAddNewTaskToReadyList+0xc4>)
 800521c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800521e:	4b2c      	ldr	r3, [pc, #176]	@ (80052d0 <prvAddNewTaskToReadyList+0xc8>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d109      	bne.n	800523a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005226:	4a2a      	ldr	r2, [pc, #168]	@ (80052d0 <prvAddNewTaskToReadyList+0xc8>)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800522c:	4b27      	ldr	r3, [pc, #156]	@ (80052cc <prvAddNewTaskToReadyList+0xc4>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d110      	bne.n	8005256 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005234:	f000 fc1e 	bl	8005a74 <prvInitialiseTaskLists>
 8005238:	e00d      	b.n	8005256 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800523a:	4b26      	ldr	r3, [pc, #152]	@ (80052d4 <prvAddNewTaskToReadyList+0xcc>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d109      	bne.n	8005256 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005242:	4b23      	ldr	r3, [pc, #140]	@ (80052d0 <prvAddNewTaskToReadyList+0xc8>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800524c:	429a      	cmp	r2, r3
 800524e:	d802      	bhi.n	8005256 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005250:	4a1f      	ldr	r2, [pc, #124]	@ (80052d0 <prvAddNewTaskToReadyList+0xc8>)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005256:	4b20      	ldr	r3, [pc, #128]	@ (80052d8 <prvAddNewTaskToReadyList+0xd0>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	3301      	adds	r3, #1
 800525c:	4a1e      	ldr	r2, [pc, #120]	@ (80052d8 <prvAddNewTaskToReadyList+0xd0>)
 800525e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005260:	4b1d      	ldr	r3, [pc, #116]	@ (80052d8 <prvAddNewTaskToReadyList+0xd0>)
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800526c:	4b1b      	ldr	r3, [pc, #108]	@ (80052dc <prvAddNewTaskToReadyList+0xd4>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	429a      	cmp	r2, r3
 8005272:	d903      	bls.n	800527c <prvAddNewTaskToReadyList+0x74>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005278:	4a18      	ldr	r2, [pc, #96]	@ (80052dc <prvAddNewTaskToReadyList+0xd4>)
 800527a:	6013      	str	r3, [r2, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005280:	4613      	mov	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4413      	add	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4a15      	ldr	r2, [pc, #84]	@ (80052e0 <prvAddNewTaskToReadyList+0xd8>)
 800528a:	441a      	add	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	3304      	adds	r3, #4
 8005290:	4619      	mov	r1, r3
 8005292:	4610      	mov	r0, r2
 8005294:	f7ff f901 	bl	800449a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005298:	f001 fa48 	bl	800672c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800529c:	4b0d      	ldr	r3, [pc, #52]	@ (80052d4 <prvAddNewTaskToReadyList+0xcc>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00e      	beq.n	80052c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80052a4:	4b0a      	ldr	r3, [pc, #40]	@ (80052d0 <prvAddNewTaskToReadyList+0xc8>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d207      	bcs.n	80052c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80052b2:	4b0c      	ldr	r3, [pc, #48]	@ (80052e4 <prvAddNewTaskToReadyList+0xdc>)
 80052b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052b8:	601a      	str	r2, [r3, #0]
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052c2:	bf00      	nop
 80052c4:	3708      	adds	r7, #8
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	200011b8 	.word	0x200011b8
 80052d0:	20000ce4 	.word	0x20000ce4
 80052d4:	200011c4 	.word	0x200011c4
 80052d8:	200011d4 	.word	0x200011d4
 80052dc:	200011c0 	.word	0x200011c0
 80052e0:	20000ce8 	.word	0x20000ce8
 80052e4:	e000ed04 	.word	0xe000ed04

080052e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80052f0:	2300      	movs	r3, #0
 80052f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d018      	beq.n	800532c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80052fa:	4b14      	ldr	r3, [pc, #80]	@ (800534c <vTaskDelay+0x64>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00b      	beq.n	800531a <vTaskDelay+0x32>
	__asm volatile
 8005302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005306:	f383 8811 	msr	BASEPRI, r3
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	60bb      	str	r3, [r7, #8]
}
 8005314:	bf00      	nop
 8005316:	bf00      	nop
 8005318:	e7fd      	b.n	8005316 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800531a:	f000 f883 	bl	8005424 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800531e:	2100      	movs	r1, #0
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 fcf3 	bl	8005d0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005326:	f000 f88b 	bl	8005440 <xTaskResumeAll>
 800532a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d107      	bne.n	8005342 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005332:	4b07      	ldr	r3, [pc, #28]	@ (8005350 <vTaskDelay+0x68>)
 8005334:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005338:	601a      	str	r2, [r3, #0]
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005342:	bf00      	nop
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	200011e0 	.word	0x200011e0
 8005350:	e000ed04 	.word	0xe000ed04

08005354 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b08a      	sub	sp, #40	@ 0x28
 8005358:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800535a:	2300      	movs	r3, #0
 800535c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800535e:	2300      	movs	r3, #0
 8005360:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005362:	463a      	mov	r2, r7
 8005364:	1d39      	adds	r1, r7, #4
 8005366:	f107 0308 	add.w	r3, r7, #8
 800536a:	4618      	mov	r0, r3
 800536c:	f7fe ff84 	bl	8004278 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005370:	6839      	ldr	r1, [r7, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	9202      	str	r2, [sp, #8]
 8005378:	9301      	str	r3, [sp, #4]
 800537a:	2300      	movs	r3, #0
 800537c:	9300      	str	r3, [sp, #0]
 800537e:	2300      	movs	r3, #0
 8005380:	460a      	mov	r2, r1
 8005382:	4922      	ldr	r1, [pc, #136]	@ (800540c <vTaskStartScheduler+0xb8>)
 8005384:	4822      	ldr	r0, [pc, #136]	@ (8005410 <vTaskStartScheduler+0xbc>)
 8005386:	f7ff fe09 	bl	8004f9c <xTaskCreateStatic>
 800538a:	4603      	mov	r3, r0
 800538c:	4a21      	ldr	r2, [pc, #132]	@ (8005414 <vTaskStartScheduler+0xc0>)
 800538e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005390:	4b20      	ldr	r3, [pc, #128]	@ (8005414 <vTaskStartScheduler+0xc0>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d002      	beq.n	800539e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005398:	2301      	movs	r3, #1
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	e001      	b.n	80053a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800539e:	2300      	movs	r3, #0
 80053a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d102      	bne.n	80053ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80053a8:	f000 fd04 	bl	8005db4 <xTimerCreateTimerTask>
 80053ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d116      	bne.n	80053e2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80053b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b8:	f383 8811 	msr	BASEPRI, r3
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	613b      	str	r3, [r7, #16]
}
 80053c6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80053c8:	4b13      	ldr	r3, [pc, #76]	@ (8005418 <vTaskStartScheduler+0xc4>)
 80053ca:	f04f 32ff 	mov.w	r2, #4294967295
 80053ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80053d0:	4b12      	ldr	r3, [pc, #72]	@ (800541c <vTaskStartScheduler+0xc8>)
 80053d2:	2201      	movs	r2, #1
 80053d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80053d6:	4b12      	ldr	r3, [pc, #72]	@ (8005420 <vTaskStartScheduler+0xcc>)
 80053d8:	2200      	movs	r2, #0
 80053da:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80053dc:	f001 f8d0 	bl	8006580 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80053e0:	e00f      	b.n	8005402 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e8:	d10b      	bne.n	8005402 <vTaskStartScheduler+0xae>
	__asm volatile
 80053ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ee:	f383 8811 	msr	BASEPRI, r3
 80053f2:	f3bf 8f6f 	isb	sy
 80053f6:	f3bf 8f4f 	dsb	sy
 80053fa:	60fb      	str	r3, [r7, #12]
}
 80053fc:	bf00      	nop
 80053fe:	bf00      	nop
 8005400:	e7fd      	b.n	80053fe <vTaskStartScheduler+0xaa>
}
 8005402:	bf00      	nop
 8005404:	3718      	adds	r7, #24
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	08006db4 	.word	0x08006db4
 8005410:	08005a45 	.word	0x08005a45
 8005414:	200011dc 	.word	0x200011dc
 8005418:	200011d8 	.word	0x200011d8
 800541c:	200011c4 	.word	0x200011c4
 8005420:	200011bc 	.word	0x200011bc

08005424 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005424:	b480      	push	{r7}
 8005426:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005428:	4b04      	ldr	r3, [pc, #16]	@ (800543c <vTaskSuspendAll+0x18>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	3301      	adds	r3, #1
 800542e:	4a03      	ldr	r2, [pc, #12]	@ (800543c <vTaskSuspendAll+0x18>)
 8005430:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005432:	bf00      	nop
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	200011e0 	.word	0x200011e0

08005440 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005446:	2300      	movs	r3, #0
 8005448:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800544a:	2300      	movs	r3, #0
 800544c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800544e:	4b42      	ldr	r3, [pc, #264]	@ (8005558 <xTaskResumeAll+0x118>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10b      	bne.n	800546e <xTaskResumeAll+0x2e>
	__asm volatile
 8005456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800545a:	f383 8811 	msr	BASEPRI, r3
 800545e:	f3bf 8f6f 	isb	sy
 8005462:	f3bf 8f4f 	dsb	sy
 8005466:	603b      	str	r3, [r7, #0]
}
 8005468:	bf00      	nop
 800546a:	bf00      	nop
 800546c:	e7fd      	b.n	800546a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800546e:	f001 f92b 	bl	80066c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005472:	4b39      	ldr	r3, [pc, #228]	@ (8005558 <xTaskResumeAll+0x118>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3b01      	subs	r3, #1
 8005478:	4a37      	ldr	r2, [pc, #220]	@ (8005558 <xTaskResumeAll+0x118>)
 800547a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800547c:	4b36      	ldr	r3, [pc, #216]	@ (8005558 <xTaskResumeAll+0x118>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d162      	bne.n	800554a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005484:	4b35      	ldr	r3, [pc, #212]	@ (800555c <xTaskResumeAll+0x11c>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d05e      	beq.n	800554a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800548c:	e02f      	b.n	80054ee <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800548e:	4b34      	ldr	r3, [pc, #208]	@ (8005560 <xTaskResumeAll+0x120>)
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	3318      	adds	r3, #24
 800549a:	4618      	mov	r0, r3
 800549c:	f7ff f85a 	bl	8004554 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	3304      	adds	r3, #4
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7ff f855 	bl	8004554 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054ae:	4b2d      	ldr	r3, [pc, #180]	@ (8005564 <xTaskResumeAll+0x124>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d903      	bls.n	80054be <xTaskResumeAll+0x7e>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ba:	4a2a      	ldr	r2, [pc, #168]	@ (8005564 <xTaskResumeAll+0x124>)
 80054bc:	6013      	str	r3, [r2, #0]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054c2:	4613      	mov	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4413      	add	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4a27      	ldr	r2, [pc, #156]	@ (8005568 <xTaskResumeAll+0x128>)
 80054cc:	441a      	add	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	3304      	adds	r3, #4
 80054d2:	4619      	mov	r1, r3
 80054d4:	4610      	mov	r0, r2
 80054d6:	f7fe ffe0 	bl	800449a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054de:	4b23      	ldr	r3, [pc, #140]	@ (800556c <xTaskResumeAll+0x12c>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d302      	bcc.n	80054ee <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80054e8:	4b21      	ldr	r3, [pc, #132]	@ (8005570 <xTaskResumeAll+0x130>)
 80054ea:	2201      	movs	r2, #1
 80054ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054ee:	4b1c      	ldr	r3, [pc, #112]	@ (8005560 <xTaskResumeAll+0x120>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1cb      	bne.n	800548e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d001      	beq.n	8005500 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80054fc:	f000 fb58 	bl	8005bb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005500:	4b1c      	ldr	r3, [pc, #112]	@ (8005574 <xTaskResumeAll+0x134>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d010      	beq.n	800552e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800550c:	f000 f846 	bl	800559c <xTaskIncrementTick>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d002      	beq.n	800551c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005516:	4b16      	ldr	r3, [pc, #88]	@ (8005570 <xTaskResumeAll+0x130>)
 8005518:	2201      	movs	r2, #1
 800551a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	3b01      	subs	r3, #1
 8005520:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d1f1      	bne.n	800550c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005528:	4b12      	ldr	r3, [pc, #72]	@ (8005574 <xTaskResumeAll+0x134>)
 800552a:	2200      	movs	r2, #0
 800552c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800552e:	4b10      	ldr	r3, [pc, #64]	@ (8005570 <xTaskResumeAll+0x130>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d009      	beq.n	800554a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005536:	2301      	movs	r3, #1
 8005538:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800553a:	4b0f      	ldr	r3, [pc, #60]	@ (8005578 <xTaskResumeAll+0x138>)
 800553c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	f3bf 8f4f 	dsb	sy
 8005546:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800554a:	f001 f8ef 	bl	800672c <vPortExitCritical>

	return xAlreadyYielded;
 800554e:	68bb      	ldr	r3, [r7, #8]
}
 8005550:	4618      	mov	r0, r3
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	200011e0 	.word	0x200011e0
 800555c:	200011b8 	.word	0x200011b8
 8005560:	20001178 	.word	0x20001178
 8005564:	200011c0 	.word	0x200011c0
 8005568:	20000ce8 	.word	0x20000ce8
 800556c:	20000ce4 	.word	0x20000ce4
 8005570:	200011cc 	.word	0x200011cc
 8005574:	200011c8 	.word	0x200011c8
 8005578:	e000ed04 	.word	0xe000ed04

0800557c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005582:	4b05      	ldr	r3, [pc, #20]	@ (8005598 <xTaskGetTickCount+0x1c>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005588:	687b      	ldr	r3, [r7, #4]
}
 800558a:	4618      	mov	r0, r3
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	200011bc 	.word	0x200011bc

0800559c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80055a2:	2300      	movs	r3, #0
 80055a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055a6:	4b4f      	ldr	r3, [pc, #316]	@ (80056e4 <xTaskIncrementTick+0x148>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f040 8090 	bne.w	80056d0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80055b0:	4b4d      	ldr	r3, [pc, #308]	@ (80056e8 <xTaskIncrementTick+0x14c>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	3301      	adds	r3, #1
 80055b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80055b8:	4a4b      	ldr	r2, [pc, #300]	@ (80056e8 <xTaskIncrementTick+0x14c>)
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d121      	bne.n	8005608 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80055c4:	4b49      	ldr	r3, [pc, #292]	@ (80056ec <xTaskIncrementTick+0x150>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00b      	beq.n	80055e6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80055ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d2:	f383 8811 	msr	BASEPRI, r3
 80055d6:	f3bf 8f6f 	isb	sy
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	603b      	str	r3, [r7, #0]
}
 80055e0:	bf00      	nop
 80055e2:	bf00      	nop
 80055e4:	e7fd      	b.n	80055e2 <xTaskIncrementTick+0x46>
 80055e6:	4b41      	ldr	r3, [pc, #260]	@ (80056ec <xTaskIncrementTick+0x150>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	4b40      	ldr	r3, [pc, #256]	@ (80056f0 <xTaskIncrementTick+0x154>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a3e      	ldr	r2, [pc, #248]	@ (80056ec <xTaskIncrementTick+0x150>)
 80055f2:	6013      	str	r3, [r2, #0]
 80055f4:	4a3e      	ldr	r2, [pc, #248]	@ (80056f0 <xTaskIncrementTick+0x154>)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6013      	str	r3, [r2, #0]
 80055fa:	4b3e      	ldr	r3, [pc, #248]	@ (80056f4 <xTaskIncrementTick+0x158>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3301      	adds	r3, #1
 8005600:	4a3c      	ldr	r2, [pc, #240]	@ (80056f4 <xTaskIncrementTick+0x158>)
 8005602:	6013      	str	r3, [r2, #0]
 8005604:	f000 fad4 	bl	8005bb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005608:	4b3b      	ldr	r3, [pc, #236]	@ (80056f8 <xTaskIncrementTick+0x15c>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	429a      	cmp	r2, r3
 8005610:	d349      	bcc.n	80056a6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005612:	4b36      	ldr	r3, [pc, #216]	@ (80056ec <xTaskIncrementTick+0x150>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d104      	bne.n	8005626 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800561c:	4b36      	ldr	r3, [pc, #216]	@ (80056f8 <xTaskIncrementTick+0x15c>)
 800561e:	f04f 32ff 	mov.w	r2, #4294967295
 8005622:	601a      	str	r2, [r3, #0]
					break;
 8005624:	e03f      	b.n	80056a6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005626:	4b31      	ldr	r3, [pc, #196]	@ (80056ec <xTaskIncrementTick+0x150>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	429a      	cmp	r2, r3
 800563c:	d203      	bcs.n	8005646 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800563e:	4a2e      	ldr	r2, [pc, #184]	@ (80056f8 <xTaskIncrementTick+0x15c>)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005644:	e02f      	b.n	80056a6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	3304      	adds	r3, #4
 800564a:	4618      	mov	r0, r3
 800564c:	f7fe ff82 	bl	8004554 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005654:	2b00      	cmp	r3, #0
 8005656:	d004      	beq.n	8005662 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	3318      	adds	r3, #24
 800565c:	4618      	mov	r0, r3
 800565e:	f7fe ff79 	bl	8004554 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005666:	4b25      	ldr	r3, [pc, #148]	@ (80056fc <xTaskIncrementTick+0x160>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	429a      	cmp	r2, r3
 800566c:	d903      	bls.n	8005676 <xTaskIncrementTick+0xda>
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005672:	4a22      	ldr	r2, [pc, #136]	@ (80056fc <xTaskIncrementTick+0x160>)
 8005674:	6013      	str	r3, [r2, #0]
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800567a:	4613      	mov	r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	4413      	add	r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	4a1f      	ldr	r2, [pc, #124]	@ (8005700 <xTaskIncrementTick+0x164>)
 8005684:	441a      	add	r2, r3
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	3304      	adds	r3, #4
 800568a:	4619      	mov	r1, r3
 800568c:	4610      	mov	r0, r2
 800568e:	f7fe ff04 	bl	800449a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005696:	4b1b      	ldr	r3, [pc, #108]	@ (8005704 <xTaskIncrementTick+0x168>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800569c:	429a      	cmp	r2, r3
 800569e:	d3b8      	bcc.n	8005612 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80056a0:	2301      	movs	r3, #1
 80056a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056a4:	e7b5      	b.n	8005612 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80056a6:	4b17      	ldr	r3, [pc, #92]	@ (8005704 <xTaskIncrementTick+0x168>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056ac:	4914      	ldr	r1, [pc, #80]	@ (8005700 <xTaskIncrementTick+0x164>)
 80056ae:	4613      	mov	r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4413      	add	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	440b      	add	r3, r1
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d901      	bls.n	80056c2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80056be:	2301      	movs	r3, #1
 80056c0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80056c2:	4b11      	ldr	r3, [pc, #68]	@ (8005708 <xTaskIncrementTick+0x16c>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d007      	beq.n	80056da <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80056ca:	2301      	movs	r3, #1
 80056cc:	617b      	str	r3, [r7, #20]
 80056ce:	e004      	b.n	80056da <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80056d0:	4b0e      	ldr	r3, [pc, #56]	@ (800570c <xTaskIncrementTick+0x170>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3301      	adds	r3, #1
 80056d6:	4a0d      	ldr	r2, [pc, #52]	@ (800570c <xTaskIncrementTick+0x170>)
 80056d8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80056da:	697b      	ldr	r3, [r7, #20]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3718      	adds	r7, #24
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	200011e0 	.word	0x200011e0
 80056e8:	200011bc 	.word	0x200011bc
 80056ec:	20001170 	.word	0x20001170
 80056f0:	20001174 	.word	0x20001174
 80056f4:	200011d0 	.word	0x200011d0
 80056f8:	200011d8 	.word	0x200011d8
 80056fc:	200011c0 	.word	0x200011c0
 8005700:	20000ce8 	.word	0x20000ce8
 8005704:	20000ce4 	.word	0x20000ce4
 8005708:	200011cc 	.word	0x200011cc
 800570c:	200011c8 	.word	0x200011c8

08005710 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005716:	4b28      	ldr	r3, [pc, #160]	@ (80057b8 <vTaskSwitchContext+0xa8>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d003      	beq.n	8005726 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800571e:	4b27      	ldr	r3, [pc, #156]	@ (80057bc <vTaskSwitchContext+0xac>)
 8005720:	2201      	movs	r2, #1
 8005722:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005724:	e042      	b.n	80057ac <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005726:	4b25      	ldr	r3, [pc, #148]	@ (80057bc <vTaskSwitchContext+0xac>)
 8005728:	2200      	movs	r2, #0
 800572a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800572c:	4b24      	ldr	r3, [pc, #144]	@ (80057c0 <vTaskSwitchContext+0xb0>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	60fb      	str	r3, [r7, #12]
 8005732:	e011      	b.n	8005758 <vTaskSwitchContext+0x48>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10b      	bne.n	8005752 <vTaskSwitchContext+0x42>
	__asm volatile
 800573a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800573e:	f383 8811 	msr	BASEPRI, r3
 8005742:	f3bf 8f6f 	isb	sy
 8005746:	f3bf 8f4f 	dsb	sy
 800574a:	607b      	str	r3, [r7, #4]
}
 800574c:	bf00      	nop
 800574e:	bf00      	nop
 8005750:	e7fd      	b.n	800574e <vTaskSwitchContext+0x3e>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	3b01      	subs	r3, #1
 8005756:	60fb      	str	r3, [r7, #12]
 8005758:	491a      	ldr	r1, [pc, #104]	@ (80057c4 <vTaskSwitchContext+0xb4>)
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	4613      	mov	r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	440b      	add	r3, r1
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d0e3      	beq.n	8005734 <vTaskSwitchContext+0x24>
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	4613      	mov	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	4413      	add	r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4a13      	ldr	r2, [pc, #76]	@ (80057c4 <vTaskSwitchContext+0xb4>)
 8005778:	4413      	add	r3, r2
 800577a:	60bb      	str	r3, [r7, #8]
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	605a      	str	r2, [r3, #4]
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	3308      	adds	r3, #8
 800578e:	429a      	cmp	r2, r3
 8005790:	d104      	bne.n	800579c <vTaskSwitchContext+0x8c>
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	605a      	str	r2, [r3, #4]
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	4a09      	ldr	r2, [pc, #36]	@ (80057c8 <vTaskSwitchContext+0xb8>)
 80057a4:	6013      	str	r3, [r2, #0]
 80057a6:	4a06      	ldr	r2, [pc, #24]	@ (80057c0 <vTaskSwitchContext+0xb0>)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6013      	str	r3, [r2, #0]
}
 80057ac:	bf00      	nop
 80057ae:	3714      	adds	r7, #20
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	200011e0 	.word	0x200011e0
 80057bc:	200011cc 	.word	0x200011cc
 80057c0:	200011c0 	.word	0x200011c0
 80057c4:	20000ce8 	.word	0x20000ce8
 80057c8:	20000ce4 	.word	0x20000ce4

080057cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10b      	bne.n	80057f4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80057dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e0:	f383 8811 	msr	BASEPRI, r3
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	f3bf 8f4f 	dsb	sy
 80057ec:	60fb      	str	r3, [r7, #12]
}
 80057ee:	bf00      	nop
 80057f0:	bf00      	nop
 80057f2:	e7fd      	b.n	80057f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80057f4:	4b07      	ldr	r3, [pc, #28]	@ (8005814 <vTaskPlaceOnEventList+0x48>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	3318      	adds	r3, #24
 80057fa:	4619      	mov	r1, r3
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f7fe fe70 	bl	80044e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005802:	2101      	movs	r1, #1
 8005804:	6838      	ldr	r0, [r7, #0]
 8005806:	f000 fa81 	bl	8005d0c <prvAddCurrentTaskToDelayedList>
}
 800580a:	bf00      	nop
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	20000ce4 	.word	0x20000ce4

08005818 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10b      	bne.n	8005842 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800582a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	617b      	str	r3, [r7, #20]
}
 800583c:	bf00      	nop
 800583e:	bf00      	nop
 8005840:	e7fd      	b.n	800583e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005842:	4b0a      	ldr	r3, [pc, #40]	@ (800586c <vTaskPlaceOnEventListRestricted+0x54>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	3318      	adds	r3, #24
 8005848:	4619      	mov	r1, r3
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f7fe fe25 	bl	800449a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d002      	beq.n	800585c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005856:	f04f 33ff 	mov.w	r3, #4294967295
 800585a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800585c:	6879      	ldr	r1, [r7, #4]
 800585e:	68b8      	ldr	r0, [r7, #8]
 8005860:	f000 fa54 	bl	8005d0c <prvAddCurrentTaskToDelayedList>
	}
 8005864:	bf00      	nop
 8005866:	3718      	adds	r7, #24
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	20000ce4 	.word	0x20000ce4

08005870 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b086      	sub	sp, #24
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10b      	bne.n	800589e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800588a:	f383 8811 	msr	BASEPRI, r3
 800588e:	f3bf 8f6f 	isb	sy
 8005892:	f3bf 8f4f 	dsb	sy
 8005896:	60fb      	str	r3, [r7, #12]
}
 8005898:	bf00      	nop
 800589a:	bf00      	nop
 800589c:	e7fd      	b.n	800589a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	3318      	adds	r3, #24
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7fe fe56 	bl	8004554 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058a8:	4b1d      	ldr	r3, [pc, #116]	@ (8005920 <xTaskRemoveFromEventList+0xb0>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d11d      	bne.n	80058ec <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	3304      	adds	r3, #4
 80058b4:	4618      	mov	r0, r3
 80058b6:	f7fe fe4d 	bl	8004554 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058be:	4b19      	ldr	r3, [pc, #100]	@ (8005924 <xTaskRemoveFromEventList+0xb4>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d903      	bls.n	80058ce <xTaskRemoveFromEventList+0x5e>
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ca:	4a16      	ldr	r2, [pc, #88]	@ (8005924 <xTaskRemoveFromEventList+0xb4>)
 80058cc:	6013      	str	r3, [r2, #0]
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058d2:	4613      	mov	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4a13      	ldr	r2, [pc, #76]	@ (8005928 <xTaskRemoveFromEventList+0xb8>)
 80058dc:	441a      	add	r2, r3
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	3304      	adds	r3, #4
 80058e2:	4619      	mov	r1, r3
 80058e4:	4610      	mov	r0, r2
 80058e6:	f7fe fdd8 	bl	800449a <vListInsertEnd>
 80058ea:	e005      	b.n	80058f8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	3318      	adds	r3, #24
 80058f0:	4619      	mov	r1, r3
 80058f2:	480e      	ldr	r0, [pc, #56]	@ (800592c <xTaskRemoveFromEventList+0xbc>)
 80058f4:	f7fe fdd1 	bl	800449a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005930 <xTaskRemoveFromEventList+0xc0>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005902:	429a      	cmp	r2, r3
 8005904:	d905      	bls.n	8005912 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005906:	2301      	movs	r3, #1
 8005908:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800590a:	4b0a      	ldr	r3, [pc, #40]	@ (8005934 <xTaskRemoveFromEventList+0xc4>)
 800590c:	2201      	movs	r2, #1
 800590e:	601a      	str	r2, [r3, #0]
 8005910:	e001      	b.n	8005916 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005912:	2300      	movs	r3, #0
 8005914:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005916:	697b      	ldr	r3, [r7, #20]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3718      	adds	r7, #24
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	200011e0 	.word	0x200011e0
 8005924:	200011c0 	.word	0x200011c0
 8005928:	20000ce8 	.word	0x20000ce8
 800592c:	20001178 	.word	0x20001178
 8005930:	20000ce4 	.word	0x20000ce4
 8005934:	200011cc 	.word	0x200011cc

08005938 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005940:	4b06      	ldr	r3, [pc, #24]	@ (800595c <vTaskInternalSetTimeOutState+0x24>)
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005948:	4b05      	ldr	r3, [pc, #20]	@ (8005960 <vTaskInternalSetTimeOutState+0x28>)
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	605a      	str	r2, [r3, #4]
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr
 800595c:	200011d0 	.word	0x200011d0
 8005960:	200011bc 	.word	0x200011bc

08005964 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b088      	sub	sp, #32
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10b      	bne.n	800598c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005978:	f383 8811 	msr	BASEPRI, r3
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	613b      	str	r3, [r7, #16]
}
 8005986:	bf00      	nop
 8005988:	bf00      	nop
 800598a:	e7fd      	b.n	8005988 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10b      	bne.n	80059aa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005996:	f383 8811 	msr	BASEPRI, r3
 800599a:	f3bf 8f6f 	isb	sy
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	60fb      	str	r3, [r7, #12]
}
 80059a4:	bf00      	nop
 80059a6:	bf00      	nop
 80059a8:	e7fd      	b.n	80059a6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80059aa:	f000 fe8d 	bl	80066c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80059ae:	4b1d      	ldr	r3, [pc, #116]	@ (8005a24 <xTaskCheckForTimeOut+0xc0>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c6:	d102      	bne.n	80059ce <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80059c8:	2300      	movs	r3, #0
 80059ca:	61fb      	str	r3, [r7, #28]
 80059cc:	e023      	b.n	8005a16 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	4b15      	ldr	r3, [pc, #84]	@ (8005a28 <xTaskCheckForTimeOut+0xc4>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d007      	beq.n	80059ea <xTaskCheckForTimeOut+0x86>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	69ba      	ldr	r2, [r7, #24]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d302      	bcc.n	80059ea <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80059e4:	2301      	movs	r3, #1
 80059e6:	61fb      	str	r3, [r7, #28]
 80059e8:	e015      	b.n	8005a16 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d20b      	bcs.n	8005a0c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	1ad2      	subs	r2, r2, r3
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f7ff ff99 	bl	8005938 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a06:	2300      	movs	r3, #0
 8005a08:	61fb      	str	r3, [r7, #28]
 8005a0a:	e004      	b.n	8005a16 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005a12:	2301      	movs	r3, #1
 8005a14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005a16:	f000 fe89 	bl	800672c <vPortExitCritical>

	return xReturn;
 8005a1a:	69fb      	ldr	r3, [r7, #28]
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3720      	adds	r7, #32
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	200011bc 	.word	0x200011bc
 8005a28:	200011d0 	.word	0x200011d0

08005a2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005a30:	4b03      	ldr	r3, [pc, #12]	@ (8005a40 <vTaskMissedYield+0x14>)
 8005a32:	2201      	movs	r2, #1
 8005a34:	601a      	str	r2, [r3, #0]
}
 8005a36:	bf00      	nop
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	200011cc 	.word	0x200011cc

08005a44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005a4c:	f000 f852 	bl	8005af4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a50:	4b06      	ldr	r3, [pc, #24]	@ (8005a6c <prvIdleTask+0x28>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d9f9      	bls.n	8005a4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005a58:	4b05      	ldr	r3, [pc, #20]	@ (8005a70 <prvIdleTask+0x2c>)
 8005a5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a5e:	601a      	str	r2, [r3, #0]
 8005a60:	f3bf 8f4f 	dsb	sy
 8005a64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005a68:	e7f0      	b.n	8005a4c <prvIdleTask+0x8>
 8005a6a:	bf00      	nop
 8005a6c:	20000ce8 	.word	0x20000ce8
 8005a70:	e000ed04 	.word	0xe000ed04

08005a74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	607b      	str	r3, [r7, #4]
 8005a7e:	e00c      	b.n	8005a9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	4613      	mov	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4a12      	ldr	r2, [pc, #72]	@ (8005ad4 <prvInitialiseTaskLists+0x60>)
 8005a8c:	4413      	add	r3, r2
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7fe fcd6 	bl	8004440 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	3301      	adds	r3, #1
 8005a98:	607b      	str	r3, [r7, #4]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2b37      	cmp	r3, #55	@ 0x37
 8005a9e:	d9ef      	bls.n	8005a80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005aa0:	480d      	ldr	r0, [pc, #52]	@ (8005ad8 <prvInitialiseTaskLists+0x64>)
 8005aa2:	f7fe fccd 	bl	8004440 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005aa6:	480d      	ldr	r0, [pc, #52]	@ (8005adc <prvInitialiseTaskLists+0x68>)
 8005aa8:	f7fe fcca 	bl	8004440 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005aac:	480c      	ldr	r0, [pc, #48]	@ (8005ae0 <prvInitialiseTaskLists+0x6c>)
 8005aae:	f7fe fcc7 	bl	8004440 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005ab2:	480c      	ldr	r0, [pc, #48]	@ (8005ae4 <prvInitialiseTaskLists+0x70>)
 8005ab4:	f7fe fcc4 	bl	8004440 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ab8:	480b      	ldr	r0, [pc, #44]	@ (8005ae8 <prvInitialiseTaskLists+0x74>)
 8005aba:	f7fe fcc1 	bl	8004440 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005abe:	4b0b      	ldr	r3, [pc, #44]	@ (8005aec <prvInitialiseTaskLists+0x78>)
 8005ac0:	4a05      	ldr	r2, [pc, #20]	@ (8005ad8 <prvInitialiseTaskLists+0x64>)
 8005ac2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8005af0 <prvInitialiseTaskLists+0x7c>)
 8005ac6:	4a05      	ldr	r2, [pc, #20]	@ (8005adc <prvInitialiseTaskLists+0x68>)
 8005ac8:	601a      	str	r2, [r3, #0]
}
 8005aca:	bf00      	nop
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	20000ce8 	.word	0x20000ce8
 8005ad8:	20001148 	.word	0x20001148
 8005adc:	2000115c 	.word	0x2000115c
 8005ae0:	20001178 	.word	0x20001178
 8005ae4:	2000118c 	.word	0x2000118c
 8005ae8:	200011a4 	.word	0x200011a4
 8005aec:	20001170 	.word	0x20001170
 8005af0:	20001174 	.word	0x20001174

08005af4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005afa:	e019      	b.n	8005b30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005afc:	f000 fde4 	bl	80066c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b00:	4b10      	ldr	r3, [pc, #64]	@ (8005b44 <prvCheckTasksWaitingTermination+0x50>)
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	3304      	adds	r3, #4
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7fe fd21 	bl	8004554 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b12:	4b0d      	ldr	r3, [pc, #52]	@ (8005b48 <prvCheckTasksWaitingTermination+0x54>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	3b01      	subs	r3, #1
 8005b18:	4a0b      	ldr	r2, [pc, #44]	@ (8005b48 <prvCheckTasksWaitingTermination+0x54>)
 8005b1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b4c <prvCheckTasksWaitingTermination+0x58>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	3b01      	subs	r3, #1
 8005b22:	4a0a      	ldr	r2, [pc, #40]	@ (8005b4c <prvCheckTasksWaitingTermination+0x58>)
 8005b24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005b26:	f000 fe01 	bl	800672c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 f810 	bl	8005b50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b30:	4b06      	ldr	r3, [pc, #24]	@ (8005b4c <prvCheckTasksWaitingTermination+0x58>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1e1      	bne.n	8005afc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005b38:	bf00      	nop
 8005b3a:	bf00      	nop
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	2000118c 	.word	0x2000118c
 8005b48:	200011b8 	.word	0x200011b8
 8005b4c:	200011a0 	.word	0x200011a0

08005b50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d108      	bne.n	8005b74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 ff9e 	bl	8006aa8 <vPortFree>
				vPortFree( pxTCB );
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 ff9b 	bl	8006aa8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b72:	e019      	b.n	8005ba8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d103      	bne.n	8005b86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 ff92 	bl	8006aa8 <vPortFree>
	}
 8005b84:	e010      	b.n	8005ba8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d00b      	beq.n	8005ba8 <prvDeleteTCB+0x58>
	__asm volatile
 8005b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b94:	f383 8811 	msr	BASEPRI, r3
 8005b98:	f3bf 8f6f 	isb	sy
 8005b9c:	f3bf 8f4f 	dsb	sy
 8005ba0:	60fb      	str	r3, [r7, #12]
}
 8005ba2:	bf00      	nop
 8005ba4:	bf00      	nop
 8005ba6:	e7fd      	b.n	8005ba4 <prvDeleteTCB+0x54>
	}
 8005ba8:	bf00      	nop
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8005be8 <prvResetNextTaskUnblockTime+0x38>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d104      	bne.n	8005bca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8005bec <prvResetNextTaskUnblockTime+0x3c>)
 8005bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8005bc6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005bc8:	e008      	b.n	8005bdc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bca:	4b07      	ldr	r3, [pc, #28]	@ (8005be8 <prvResetNextTaskUnblockTime+0x38>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	4a04      	ldr	r2, [pc, #16]	@ (8005bec <prvResetNextTaskUnblockTime+0x3c>)
 8005bda:	6013      	str	r3, [r2, #0]
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	20001170 	.word	0x20001170
 8005bec:	200011d8 	.word	0x200011d8

08005bf0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8005c24 <xTaskGetSchedulerState+0x34>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d102      	bne.n	8005c04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	607b      	str	r3, [r7, #4]
 8005c02:	e008      	b.n	8005c16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c04:	4b08      	ldr	r3, [pc, #32]	@ (8005c28 <xTaskGetSchedulerState+0x38>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d102      	bne.n	8005c12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	607b      	str	r3, [r7, #4]
 8005c10:	e001      	b.n	8005c16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c12:	2300      	movs	r3, #0
 8005c14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005c16:	687b      	ldr	r3, [r7, #4]
	}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr
 8005c24:	200011c4 	.word	0x200011c4
 8005c28:	200011e0 	.word	0x200011e0

08005c2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d058      	beq.n	8005cf4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005c42:	4b2f      	ldr	r3, [pc, #188]	@ (8005d00 <xTaskPriorityDisinherit+0xd4>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d00b      	beq.n	8005c64 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c50:	f383 8811 	msr	BASEPRI, r3
 8005c54:	f3bf 8f6f 	isb	sy
 8005c58:	f3bf 8f4f 	dsb	sy
 8005c5c:	60fb      	str	r3, [r7, #12]
}
 8005c5e:	bf00      	nop
 8005c60:	bf00      	nop
 8005c62:	e7fd      	b.n	8005c60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10b      	bne.n	8005c84 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c70:	f383 8811 	msr	BASEPRI, r3
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	60bb      	str	r3, [r7, #8]
}
 8005c7e:	bf00      	nop
 8005c80:	bf00      	nop
 8005c82:	e7fd      	b.n	8005c80 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c88:	1e5a      	subs	r2, r3, #1
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d02c      	beq.n	8005cf4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d128      	bne.n	8005cf4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	3304      	adds	r3, #4
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7fe fc54 	bl	8004554 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8005d04 <xTaskPriorityDisinherit+0xd8>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d903      	bls.n	8005cd4 <xTaskPriorityDisinherit+0xa8>
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd0:	4a0c      	ldr	r2, [pc, #48]	@ (8005d04 <xTaskPriorityDisinherit+0xd8>)
 8005cd2:	6013      	str	r3, [r2, #0]
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cd8:	4613      	mov	r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4413      	add	r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4a09      	ldr	r2, [pc, #36]	@ (8005d08 <xTaskPriorityDisinherit+0xdc>)
 8005ce2:	441a      	add	r2, r3
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	4619      	mov	r1, r3
 8005cea:	4610      	mov	r0, r2
 8005cec:	f7fe fbd5 	bl	800449a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005cf4:	697b      	ldr	r3, [r7, #20]
	}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3718      	adds	r7, #24
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	20000ce4 	.word	0x20000ce4
 8005d04:	200011c0 	.word	0x200011c0
 8005d08:	20000ce8 	.word	0x20000ce8

08005d0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d16:	4b21      	ldr	r3, [pc, #132]	@ (8005d9c <prvAddCurrentTaskToDelayedList+0x90>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d1c:	4b20      	ldr	r3, [pc, #128]	@ (8005da0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3304      	adds	r3, #4
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7fe fc16 	bl	8004554 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d2e:	d10a      	bne.n	8005d46 <prvAddCurrentTaskToDelayedList+0x3a>
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d007      	beq.n	8005d46 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d36:	4b1a      	ldr	r3, [pc, #104]	@ (8005da0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	4819      	ldr	r0, [pc, #100]	@ (8005da4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005d40:	f7fe fbab 	bl	800449a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d44:	e026      	b.n	8005d94 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d4e:	4b14      	ldr	r3, [pc, #80]	@ (8005da0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d209      	bcs.n	8005d72 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d5e:	4b12      	ldr	r3, [pc, #72]	@ (8005da8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	4b0f      	ldr	r3, [pc, #60]	@ (8005da0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	3304      	adds	r3, #4
 8005d68:	4619      	mov	r1, r3
 8005d6a:	4610      	mov	r0, r2
 8005d6c:	f7fe fbb9 	bl	80044e2 <vListInsert>
}
 8005d70:	e010      	b.n	8005d94 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d72:	4b0e      	ldr	r3, [pc, #56]	@ (8005dac <prvAddCurrentTaskToDelayedList+0xa0>)
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	4b0a      	ldr	r3, [pc, #40]	@ (8005da0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	3304      	adds	r3, #4
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	4610      	mov	r0, r2
 8005d80:	f7fe fbaf 	bl	80044e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d84:	4b0a      	ldr	r3, [pc, #40]	@ (8005db0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d202      	bcs.n	8005d94 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005d8e:	4a08      	ldr	r2, [pc, #32]	@ (8005db0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	6013      	str	r3, [r2, #0]
}
 8005d94:	bf00      	nop
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	200011bc 	.word	0x200011bc
 8005da0:	20000ce4 	.word	0x20000ce4
 8005da4:	200011a4 	.word	0x200011a4
 8005da8:	20001174 	.word	0x20001174
 8005dac:	20001170 	.word	0x20001170
 8005db0:	200011d8 	.word	0x200011d8

08005db4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b08a      	sub	sp, #40	@ 0x28
 8005db8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005dbe:	f000 fb13 	bl	80063e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8005e38 <xTimerCreateTimerTask+0x84>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d021      	beq.n	8005e0e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005dd2:	1d3a      	adds	r2, r7, #4
 8005dd4:	f107 0108 	add.w	r1, r7, #8
 8005dd8:	f107 030c 	add.w	r3, r7, #12
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7fe fa65 	bl	80042ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005de2:	6879      	ldr	r1, [r7, #4]
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	9202      	str	r2, [sp, #8]
 8005dea:	9301      	str	r3, [sp, #4]
 8005dec:	2302      	movs	r3, #2
 8005dee:	9300      	str	r3, [sp, #0]
 8005df0:	2300      	movs	r3, #0
 8005df2:	460a      	mov	r2, r1
 8005df4:	4911      	ldr	r1, [pc, #68]	@ (8005e3c <xTimerCreateTimerTask+0x88>)
 8005df6:	4812      	ldr	r0, [pc, #72]	@ (8005e40 <xTimerCreateTimerTask+0x8c>)
 8005df8:	f7ff f8d0 	bl	8004f9c <xTaskCreateStatic>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	4a11      	ldr	r2, [pc, #68]	@ (8005e44 <xTimerCreateTimerTask+0x90>)
 8005e00:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005e02:	4b10      	ldr	r3, [pc, #64]	@ (8005e44 <xTimerCreateTimerTask+0x90>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10b      	bne.n	8005e2c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e18:	f383 8811 	msr	BASEPRI, r3
 8005e1c:	f3bf 8f6f 	isb	sy
 8005e20:	f3bf 8f4f 	dsb	sy
 8005e24:	613b      	str	r3, [r7, #16]
}
 8005e26:	bf00      	nop
 8005e28:	bf00      	nop
 8005e2a:	e7fd      	b.n	8005e28 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005e2c:	697b      	ldr	r3, [r7, #20]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3718      	adds	r7, #24
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	20001214 	.word	0x20001214
 8005e3c:	08006dbc 	.word	0x08006dbc
 8005e40:	08005f81 	.word	0x08005f81
 8005e44:	20001218 	.word	0x20001218

08005e48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b08a      	sub	sp, #40	@ 0x28
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
 8005e54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005e56:	2300      	movs	r3, #0
 8005e58:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10b      	bne.n	8005e78 <xTimerGenericCommand+0x30>
	__asm volatile
 8005e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e64:	f383 8811 	msr	BASEPRI, r3
 8005e68:	f3bf 8f6f 	isb	sy
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	623b      	str	r3, [r7, #32]
}
 8005e72:	bf00      	nop
 8005e74:	bf00      	nop
 8005e76:	e7fd      	b.n	8005e74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005e78:	4b19      	ldr	r3, [pc, #100]	@ (8005ee0 <xTimerGenericCommand+0x98>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d02a      	beq.n	8005ed6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	2b05      	cmp	r3, #5
 8005e90:	dc18      	bgt.n	8005ec4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005e92:	f7ff fead 	bl	8005bf0 <xTaskGetSchedulerState>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d109      	bne.n	8005eb0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005e9c:	4b10      	ldr	r3, [pc, #64]	@ (8005ee0 <xTimerGenericCommand+0x98>)
 8005e9e:	6818      	ldr	r0, [r3, #0]
 8005ea0:	f107 0110 	add.w	r1, r7, #16
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ea8:	f7fe fc88 	bl	80047bc <xQueueGenericSend>
 8005eac:	6278      	str	r0, [r7, #36]	@ 0x24
 8005eae:	e012      	b.n	8005ed6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8005ee0 <xTimerGenericCommand+0x98>)
 8005eb2:	6818      	ldr	r0, [r3, #0]
 8005eb4:	f107 0110 	add.w	r1, r7, #16
 8005eb8:	2300      	movs	r3, #0
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f7fe fc7e 	bl	80047bc <xQueueGenericSend>
 8005ec0:	6278      	str	r0, [r7, #36]	@ 0x24
 8005ec2:	e008      	b.n	8005ed6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005ec4:	4b06      	ldr	r3, [pc, #24]	@ (8005ee0 <xTimerGenericCommand+0x98>)
 8005ec6:	6818      	ldr	r0, [r3, #0]
 8005ec8:	f107 0110 	add.w	r1, r7, #16
 8005ecc:	2300      	movs	r3, #0
 8005ece:	683a      	ldr	r2, [r7, #0]
 8005ed0:	f7fe fd76 	bl	80049c0 <xQueueGenericSendFromISR>
 8005ed4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3728      	adds	r7, #40	@ 0x28
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	20001214 	.word	0x20001214

08005ee4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b088      	sub	sp, #32
 8005ee8:	af02      	add	r7, sp, #8
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eee:	4b23      	ldr	r3, [pc, #140]	@ (8005f7c <prvProcessExpiredTimer+0x98>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	3304      	adds	r3, #4
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7fe fb29 	bl	8004554 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f08:	f003 0304 	and.w	r3, r3, #4
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d023      	beq.n	8005f58 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	699a      	ldr	r2, [r3, #24]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	18d1      	adds	r1, r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	683a      	ldr	r2, [r7, #0]
 8005f1c:	6978      	ldr	r0, [r7, #20]
 8005f1e:	f000 f8d5 	bl	80060cc <prvInsertTimerInActiveList>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d020      	beq.n	8005f6a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f28:	2300      	movs	r3, #0
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	2100      	movs	r1, #0
 8005f32:	6978      	ldr	r0, [r7, #20]
 8005f34:	f7ff ff88 	bl	8005e48 <xTimerGenericCommand>
 8005f38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d114      	bne.n	8005f6a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f44:	f383 8811 	msr	BASEPRI, r3
 8005f48:	f3bf 8f6f 	isb	sy
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	60fb      	str	r3, [r7, #12]
}
 8005f52:	bf00      	nop
 8005f54:	bf00      	nop
 8005f56:	e7fd      	b.n	8005f54 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f5e:	f023 0301 	bic.w	r3, r3, #1
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	6978      	ldr	r0, [r7, #20]
 8005f70:	4798      	blx	r3
}
 8005f72:	bf00      	nop
 8005f74:	3718      	adds	r7, #24
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	2000120c 	.word	0x2000120c

08005f80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f88:	f107 0308 	add.w	r3, r7, #8
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f000 f859 	bl	8006044 <prvGetNextExpireTime>
 8005f92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	4619      	mov	r1, r3
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f000 f805 	bl	8005fa8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005f9e:	f000 f8d7 	bl	8006150 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005fa2:	bf00      	nop
 8005fa4:	e7f0      	b.n	8005f88 <prvTimerTask+0x8>
	...

08005fa8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005fb2:	f7ff fa37 	bl	8005424 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005fb6:	f107 0308 	add.w	r3, r7, #8
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 f866 	bl	800608c <prvSampleTimeNow>
 8005fc0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d130      	bne.n	800602a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10a      	bne.n	8005fe4 <prvProcessTimerOrBlockTask+0x3c>
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d806      	bhi.n	8005fe4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005fd6:	f7ff fa33 	bl	8005440 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005fda:	68f9      	ldr	r1, [r7, #12]
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7ff ff81 	bl	8005ee4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005fe2:	e024      	b.n	800602e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d008      	beq.n	8005ffc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005fea:	4b13      	ldr	r3, [pc, #76]	@ (8006038 <prvProcessTimerOrBlockTask+0x90>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d101      	bne.n	8005ff8 <prvProcessTimerOrBlockTask+0x50>
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e000      	b.n	8005ffa <prvProcessTimerOrBlockTask+0x52>
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800603c <prvProcessTimerOrBlockTask+0x94>)
 8005ffe:	6818      	ldr	r0, [r3, #0]
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	4619      	mov	r1, r3
 800600a:	f7fe ff93 	bl	8004f34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800600e:	f7ff fa17 	bl	8005440 <xTaskResumeAll>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10a      	bne.n	800602e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006018:	4b09      	ldr	r3, [pc, #36]	@ (8006040 <prvProcessTimerOrBlockTask+0x98>)
 800601a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800601e:	601a      	str	r2, [r3, #0]
 8006020:	f3bf 8f4f 	dsb	sy
 8006024:	f3bf 8f6f 	isb	sy
}
 8006028:	e001      	b.n	800602e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800602a:	f7ff fa09 	bl	8005440 <xTaskResumeAll>
}
 800602e:	bf00      	nop
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	20001210 	.word	0x20001210
 800603c:	20001214 	.word	0x20001214
 8006040:	e000ed04 	.word	0xe000ed04

08006044 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800604c:	4b0e      	ldr	r3, [pc, #56]	@ (8006088 <prvGetNextExpireTime+0x44>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d101      	bne.n	800605a <prvGetNextExpireTime+0x16>
 8006056:	2201      	movs	r2, #1
 8006058:	e000      	b.n	800605c <prvGetNextExpireTime+0x18>
 800605a:	2200      	movs	r2, #0
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d105      	bne.n	8006074 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006068:	4b07      	ldr	r3, [pc, #28]	@ (8006088 <prvGetNextExpireTime+0x44>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	60fb      	str	r3, [r7, #12]
 8006072:	e001      	b.n	8006078 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006074:	2300      	movs	r3, #0
 8006076:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006078:	68fb      	ldr	r3, [r7, #12]
}
 800607a:	4618      	mov	r0, r3
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	2000120c 	.word	0x2000120c

0800608c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006094:	f7ff fa72 	bl	800557c <xTaskGetTickCount>
 8006098:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800609a:	4b0b      	ldr	r3, [pc, #44]	@ (80060c8 <prvSampleTimeNow+0x3c>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d205      	bcs.n	80060b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80060a4:	f000 f93a 	bl	800631c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	601a      	str	r2, [r3, #0]
 80060ae:	e002      	b.n	80060b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80060b6:	4a04      	ldr	r2, [pc, #16]	@ (80060c8 <prvSampleTimeNow+0x3c>)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80060bc:	68fb      	ldr	r3, [r7, #12]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	2000121c 	.word	0x2000121c

080060cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
 80060d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80060da:	2300      	movs	r3, #0
 80060dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80060ea:	68ba      	ldr	r2, [r7, #8]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d812      	bhi.n	8006118 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	1ad2      	subs	r2, r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d302      	bcc.n	8006106 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006100:	2301      	movs	r3, #1
 8006102:	617b      	str	r3, [r7, #20]
 8006104:	e01b      	b.n	800613e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006106:	4b10      	ldr	r3, [pc, #64]	@ (8006148 <prvInsertTimerInActiveList+0x7c>)
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	3304      	adds	r3, #4
 800610e:	4619      	mov	r1, r3
 8006110:	4610      	mov	r0, r2
 8006112:	f7fe f9e6 	bl	80044e2 <vListInsert>
 8006116:	e012      	b.n	800613e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	429a      	cmp	r2, r3
 800611e:	d206      	bcs.n	800612e <prvInsertTimerInActiveList+0x62>
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	429a      	cmp	r2, r3
 8006126:	d302      	bcc.n	800612e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006128:	2301      	movs	r3, #1
 800612a:	617b      	str	r3, [r7, #20]
 800612c:	e007      	b.n	800613e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800612e:	4b07      	ldr	r3, [pc, #28]	@ (800614c <prvInsertTimerInActiveList+0x80>)
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	3304      	adds	r3, #4
 8006136:	4619      	mov	r1, r3
 8006138:	4610      	mov	r0, r2
 800613a:	f7fe f9d2 	bl	80044e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800613e:	697b      	ldr	r3, [r7, #20]
}
 8006140:	4618      	mov	r0, r3
 8006142:	3718      	adds	r7, #24
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	20001210 	.word	0x20001210
 800614c:	2000120c 	.word	0x2000120c

08006150 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b08e      	sub	sp, #56	@ 0x38
 8006154:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006156:	e0ce      	b.n	80062f6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	da19      	bge.n	8006192 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800615e:	1d3b      	adds	r3, r7, #4
 8006160:	3304      	adds	r3, #4
 8006162:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10b      	bne.n	8006182 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800616a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800616e:	f383 8811 	msr	BASEPRI, r3
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	f3bf 8f4f 	dsb	sy
 800617a:	61fb      	str	r3, [r7, #28]
}
 800617c:	bf00      	nop
 800617e:	bf00      	nop
 8006180:	e7fd      	b.n	800617e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006188:	6850      	ldr	r0, [r2, #4]
 800618a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800618c:	6892      	ldr	r2, [r2, #8]
 800618e:	4611      	mov	r1, r2
 8006190:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b00      	cmp	r3, #0
 8006196:	f2c0 80ae 	blt.w	80062f6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800619e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d004      	beq.n	80061b0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a8:	3304      	adds	r3, #4
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7fe f9d2 	bl	8004554 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80061b0:	463b      	mov	r3, r7
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7ff ff6a 	bl	800608c <prvSampleTimeNow>
 80061b8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b09      	cmp	r3, #9
 80061be:	f200 8097 	bhi.w	80062f0 <prvProcessReceivedCommands+0x1a0>
 80061c2:	a201      	add	r2, pc, #4	@ (adr r2, 80061c8 <prvProcessReceivedCommands+0x78>)
 80061c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c8:	080061f1 	.word	0x080061f1
 80061cc:	080061f1 	.word	0x080061f1
 80061d0:	080061f1 	.word	0x080061f1
 80061d4:	08006267 	.word	0x08006267
 80061d8:	0800627b 	.word	0x0800627b
 80061dc:	080062c7 	.word	0x080062c7
 80061e0:	080061f1 	.word	0x080061f1
 80061e4:	080061f1 	.word	0x080061f1
 80061e8:	08006267 	.word	0x08006267
 80061ec:	0800627b 	.word	0x0800627b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80061f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80061f6:	f043 0301 	orr.w	r3, r3, #1
 80061fa:	b2da      	uxtb	r2, r3
 80061fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	18d1      	adds	r1, r2, r3
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800620e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006210:	f7ff ff5c 	bl	80060cc <prvInsertTimerInActiveList>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d06c      	beq.n	80062f4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800621a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006220:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006224:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006228:	f003 0304 	and.w	r3, r3, #4
 800622c:	2b00      	cmp	r3, #0
 800622e:	d061      	beq.n	80062f4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	441a      	add	r2, r3
 8006238:	2300      	movs	r3, #0
 800623a:	9300      	str	r3, [sp, #0]
 800623c:	2300      	movs	r3, #0
 800623e:	2100      	movs	r1, #0
 8006240:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006242:	f7ff fe01 	bl	8005e48 <xTimerGenericCommand>
 8006246:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006248:	6a3b      	ldr	r3, [r7, #32]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d152      	bne.n	80062f4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800624e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006252:	f383 8811 	msr	BASEPRI, r3
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	61bb      	str	r3, [r7, #24]
}
 8006260:	bf00      	nop
 8006262:	bf00      	nop
 8006264:	e7fd      	b.n	8006262 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006268:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800626c:	f023 0301 	bic.w	r3, r3, #1
 8006270:	b2da      	uxtb	r2, r3
 8006272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006274:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006278:	e03d      	b.n	80062f6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800627a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800627c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006280:	f043 0301 	orr.w	r3, r3, #1
 8006284:	b2da      	uxtb	r2, r3
 8006286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006288:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006290:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10b      	bne.n	80062b2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800629a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800629e:	f383 8811 	msr	BASEPRI, r3
 80062a2:	f3bf 8f6f 	isb	sy
 80062a6:	f3bf 8f4f 	dsb	sy
 80062aa:	617b      	str	r3, [r7, #20]
}
 80062ac:	bf00      	nop
 80062ae:	bf00      	nop
 80062b0:	e7fd      	b.n	80062ae <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80062b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b4:	699a      	ldr	r2, [r3, #24]
 80062b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b8:	18d1      	adds	r1, r2, r3
 80062ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062c0:	f7ff ff04 	bl	80060cc <prvInsertTimerInActiveList>
					break;
 80062c4:	e017      	b.n	80062f6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80062c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062cc:	f003 0302 	and.w	r3, r3, #2
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d103      	bne.n	80062dc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80062d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062d6:	f000 fbe7 	bl	8006aa8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80062da:	e00c      	b.n	80062f6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062e2:	f023 0301 	bic.w	r3, r3, #1
 80062e6:	b2da      	uxtb	r2, r3
 80062e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80062ee:	e002      	b.n	80062f6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80062f0:	bf00      	nop
 80062f2:	e000      	b.n	80062f6 <prvProcessReceivedCommands+0x1a6>
					break;
 80062f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062f6:	4b08      	ldr	r3, [pc, #32]	@ (8006318 <prvProcessReceivedCommands+0x1c8>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	1d39      	adds	r1, r7, #4
 80062fc:	2200      	movs	r2, #0
 80062fe:	4618      	mov	r0, r3
 8006300:	f7fe fbfc 	bl	8004afc <xQueueReceive>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	f47f af26 	bne.w	8006158 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800630c:	bf00      	nop
 800630e:	bf00      	nop
 8006310:	3730      	adds	r7, #48	@ 0x30
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	20001214 	.word	0x20001214

0800631c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b088      	sub	sp, #32
 8006320:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006322:	e049      	b.n	80063b8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006324:	4b2e      	ldr	r3, [pc, #184]	@ (80063e0 <prvSwitchTimerLists+0xc4>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800632e:	4b2c      	ldr	r3, [pc, #176]	@ (80063e0 <prvSwitchTimerLists+0xc4>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	3304      	adds	r3, #4
 800633c:	4618      	mov	r0, r3
 800633e:	f7fe f909 	bl	8004554 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006350:	f003 0304 	and.w	r3, r3, #4
 8006354:	2b00      	cmp	r3, #0
 8006356:	d02f      	beq.n	80063b8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	4413      	add	r3, r2
 8006360:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	429a      	cmp	r2, r3
 8006368:	d90e      	bls.n	8006388 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006376:	4b1a      	ldr	r3, [pc, #104]	@ (80063e0 <prvSwitchTimerLists+0xc4>)
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	3304      	adds	r3, #4
 800637e:	4619      	mov	r1, r3
 8006380:	4610      	mov	r0, r2
 8006382:	f7fe f8ae 	bl	80044e2 <vListInsert>
 8006386:	e017      	b.n	80063b8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006388:	2300      	movs	r3, #0
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	2300      	movs	r3, #0
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	2100      	movs	r1, #0
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f7ff fd58 	bl	8005e48 <xTimerGenericCommand>
 8006398:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10b      	bne.n	80063b8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80063a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a4:	f383 8811 	msr	BASEPRI, r3
 80063a8:	f3bf 8f6f 	isb	sy
 80063ac:	f3bf 8f4f 	dsb	sy
 80063b0:	603b      	str	r3, [r7, #0]
}
 80063b2:	bf00      	nop
 80063b4:	bf00      	nop
 80063b6:	e7fd      	b.n	80063b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063b8:	4b09      	ldr	r3, [pc, #36]	@ (80063e0 <prvSwitchTimerLists+0xc4>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1b0      	bne.n	8006324 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80063c2:	4b07      	ldr	r3, [pc, #28]	@ (80063e0 <prvSwitchTimerLists+0xc4>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80063c8:	4b06      	ldr	r3, [pc, #24]	@ (80063e4 <prvSwitchTimerLists+0xc8>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a04      	ldr	r2, [pc, #16]	@ (80063e0 <prvSwitchTimerLists+0xc4>)
 80063ce:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80063d0:	4a04      	ldr	r2, [pc, #16]	@ (80063e4 <prvSwitchTimerLists+0xc8>)
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	6013      	str	r3, [r2, #0]
}
 80063d6:	bf00      	nop
 80063d8:	3718      	adds	r7, #24
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	2000120c 	.word	0x2000120c
 80063e4:	20001210 	.word	0x20001210

080063e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80063ee:	f000 f96b 	bl	80066c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80063f2:	4b15      	ldr	r3, [pc, #84]	@ (8006448 <prvCheckForValidListAndQueue+0x60>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d120      	bne.n	800643c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80063fa:	4814      	ldr	r0, [pc, #80]	@ (800644c <prvCheckForValidListAndQueue+0x64>)
 80063fc:	f7fe f820 	bl	8004440 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006400:	4813      	ldr	r0, [pc, #76]	@ (8006450 <prvCheckForValidListAndQueue+0x68>)
 8006402:	f7fe f81d 	bl	8004440 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006406:	4b13      	ldr	r3, [pc, #76]	@ (8006454 <prvCheckForValidListAndQueue+0x6c>)
 8006408:	4a10      	ldr	r2, [pc, #64]	@ (800644c <prvCheckForValidListAndQueue+0x64>)
 800640a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800640c:	4b12      	ldr	r3, [pc, #72]	@ (8006458 <prvCheckForValidListAndQueue+0x70>)
 800640e:	4a10      	ldr	r2, [pc, #64]	@ (8006450 <prvCheckForValidListAndQueue+0x68>)
 8006410:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006412:	2300      	movs	r3, #0
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	4b11      	ldr	r3, [pc, #68]	@ (800645c <prvCheckForValidListAndQueue+0x74>)
 8006418:	4a11      	ldr	r2, [pc, #68]	@ (8006460 <prvCheckForValidListAndQueue+0x78>)
 800641a:	2110      	movs	r1, #16
 800641c:	200a      	movs	r0, #10
 800641e:	f7fe f92d 	bl	800467c <xQueueGenericCreateStatic>
 8006422:	4603      	mov	r3, r0
 8006424:	4a08      	ldr	r2, [pc, #32]	@ (8006448 <prvCheckForValidListAndQueue+0x60>)
 8006426:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006428:	4b07      	ldr	r3, [pc, #28]	@ (8006448 <prvCheckForValidListAndQueue+0x60>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d005      	beq.n	800643c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006430:	4b05      	ldr	r3, [pc, #20]	@ (8006448 <prvCheckForValidListAndQueue+0x60>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	490b      	ldr	r1, [pc, #44]	@ (8006464 <prvCheckForValidListAndQueue+0x7c>)
 8006436:	4618      	mov	r0, r3
 8006438:	f7fe fd52 	bl	8004ee0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800643c:	f000 f976 	bl	800672c <vPortExitCritical>
}
 8006440:	bf00      	nop
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	20001214 	.word	0x20001214
 800644c:	200011e4 	.word	0x200011e4
 8006450:	200011f8 	.word	0x200011f8
 8006454:	2000120c 	.word	0x2000120c
 8006458:	20001210 	.word	0x20001210
 800645c:	200012c0 	.word	0x200012c0
 8006460:	20001220 	.word	0x20001220
 8006464:	08006dc4 	.word	0x08006dc4

08006468 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	3b04      	subs	r3, #4
 8006478:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006480:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	3b04      	subs	r3, #4
 8006486:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	f023 0201 	bic.w	r2, r3, #1
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	3b04      	subs	r3, #4
 8006496:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006498:	4a0c      	ldr	r2, [pc, #48]	@ (80064cc <pxPortInitialiseStack+0x64>)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	3b14      	subs	r3, #20
 80064a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	3b04      	subs	r3, #4
 80064ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f06f 0202 	mvn.w	r2, #2
 80064b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	3b20      	subs	r3, #32
 80064bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80064be:	68fb      	ldr	r3, [r7, #12]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3714      	adds	r7, #20
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr
 80064cc:	080064d1 	.word	0x080064d1

080064d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80064d0:	b480      	push	{r7}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80064d6:	2300      	movs	r3, #0
 80064d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80064da:	4b13      	ldr	r3, [pc, #76]	@ (8006528 <prvTaskExitError+0x58>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e2:	d00b      	beq.n	80064fc <prvTaskExitError+0x2c>
	__asm volatile
 80064e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e8:	f383 8811 	msr	BASEPRI, r3
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	60fb      	str	r3, [r7, #12]
}
 80064f6:	bf00      	nop
 80064f8:	bf00      	nop
 80064fa:	e7fd      	b.n	80064f8 <prvTaskExitError+0x28>
	__asm volatile
 80064fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006500:	f383 8811 	msr	BASEPRI, r3
 8006504:	f3bf 8f6f 	isb	sy
 8006508:	f3bf 8f4f 	dsb	sy
 800650c:	60bb      	str	r3, [r7, #8]
}
 800650e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006510:	bf00      	nop
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d0fc      	beq.n	8006512 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006518:	bf00      	nop
 800651a:	bf00      	nop
 800651c:	3714      	adds	r7, #20
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	20000028 	.word	0x20000028
 800652c:	00000000 	.word	0x00000000

08006530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006530:	4b07      	ldr	r3, [pc, #28]	@ (8006550 <pxCurrentTCBConst2>)
 8006532:	6819      	ldr	r1, [r3, #0]
 8006534:	6808      	ldr	r0, [r1, #0]
 8006536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800653a:	f380 8809 	msr	PSP, r0
 800653e:	f3bf 8f6f 	isb	sy
 8006542:	f04f 0000 	mov.w	r0, #0
 8006546:	f380 8811 	msr	BASEPRI, r0
 800654a:	4770      	bx	lr
 800654c:	f3af 8000 	nop.w

08006550 <pxCurrentTCBConst2>:
 8006550:	20000ce4 	.word	0x20000ce4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006554:	bf00      	nop
 8006556:	bf00      	nop

08006558 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006558:	4808      	ldr	r0, [pc, #32]	@ (800657c <prvPortStartFirstTask+0x24>)
 800655a:	6800      	ldr	r0, [r0, #0]
 800655c:	6800      	ldr	r0, [r0, #0]
 800655e:	f380 8808 	msr	MSP, r0
 8006562:	f04f 0000 	mov.w	r0, #0
 8006566:	f380 8814 	msr	CONTROL, r0
 800656a:	b662      	cpsie	i
 800656c:	b661      	cpsie	f
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	df00      	svc	0
 8006578:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800657a:	bf00      	nop
 800657c:	e000ed08 	.word	0xe000ed08

08006580 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006586:	4b47      	ldr	r3, [pc, #284]	@ (80066a4 <xPortStartScheduler+0x124>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a47      	ldr	r2, [pc, #284]	@ (80066a8 <xPortStartScheduler+0x128>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d10b      	bne.n	80065a8 <xPortStartScheduler+0x28>
	__asm volatile
 8006590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	60fb      	str	r3, [r7, #12]
}
 80065a2:	bf00      	nop
 80065a4:	bf00      	nop
 80065a6:	e7fd      	b.n	80065a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80065a8:	4b3e      	ldr	r3, [pc, #248]	@ (80066a4 <xPortStartScheduler+0x124>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a3f      	ldr	r2, [pc, #252]	@ (80066ac <xPortStartScheduler+0x12c>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d10b      	bne.n	80065ca <xPortStartScheduler+0x4a>
	__asm volatile
 80065b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b6:	f383 8811 	msr	BASEPRI, r3
 80065ba:	f3bf 8f6f 	isb	sy
 80065be:	f3bf 8f4f 	dsb	sy
 80065c2:	613b      	str	r3, [r7, #16]
}
 80065c4:	bf00      	nop
 80065c6:	bf00      	nop
 80065c8:	e7fd      	b.n	80065c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80065ca:	4b39      	ldr	r3, [pc, #228]	@ (80066b0 <xPortStartScheduler+0x130>)
 80065cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	22ff      	movs	r2, #255	@ 0xff
 80065da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80065e4:	78fb      	ldrb	r3, [r7, #3]
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80065ec:	b2da      	uxtb	r2, r3
 80065ee:	4b31      	ldr	r3, [pc, #196]	@ (80066b4 <xPortStartScheduler+0x134>)
 80065f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80065f2:	4b31      	ldr	r3, [pc, #196]	@ (80066b8 <xPortStartScheduler+0x138>)
 80065f4:	2207      	movs	r2, #7
 80065f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065f8:	e009      	b.n	800660e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80065fa:	4b2f      	ldr	r3, [pc, #188]	@ (80066b8 <xPortStartScheduler+0x138>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	3b01      	subs	r3, #1
 8006600:	4a2d      	ldr	r2, [pc, #180]	@ (80066b8 <xPortStartScheduler+0x138>)
 8006602:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006604:	78fb      	ldrb	r3, [r7, #3]
 8006606:	b2db      	uxtb	r3, r3
 8006608:	005b      	lsls	r3, r3, #1
 800660a:	b2db      	uxtb	r3, r3
 800660c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800660e:	78fb      	ldrb	r3, [r7, #3]
 8006610:	b2db      	uxtb	r3, r3
 8006612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006616:	2b80      	cmp	r3, #128	@ 0x80
 8006618:	d0ef      	beq.n	80065fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800661a:	4b27      	ldr	r3, [pc, #156]	@ (80066b8 <xPortStartScheduler+0x138>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f1c3 0307 	rsb	r3, r3, #7
 8006622:	2b04      	cmp	r3, #4
 8006624:	d00b      	beq.n	800663e <xPortStartScheduler+0xbe>
	__asm volatile
 8006626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800662a:	f383 8811 	msr	BASEPRI, r3
 800662e:	f3bf 8f6f 	isb	sy
 8006632:	f3bf 8f4f 	dsb	sy
 8006636:	60bb      	str	r3, [r7, #8]
}
 8006638:	bf00      	nop
 800663a:	bf00      	nop
 800663c:	e7fd      	b.n	800663a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800663e:	4b1e      	ldr	r3, [pc, #120]	@ (80066b8 <xPortStartScheduler+0x138>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	021b      	lsls	r3, r3, #8
 8006644:	4a1c      	ldr	r2, [pc, #112]	@ (80066b8 <xPortStartScheduler+0x138>)
 8006646:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006648:	4b1b      	ldr	r3, [pc, #108]	@ (80066b8 <xPortStartScheduler+0x138>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006650:	4a19      	ldr	r2, [pc, #100]	@ (80066b8 <xPortStartScheduler+0x138>)
 8006652:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	b2da      	uxtb	r2, r3
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800665c:	4b17      	ldr	r3, [pc, #92]	@ (80066bc <xPortStartScheduler+0x13c>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a16      	ldr	r2, [pc, #88]	@ (80066bc <xPortStartScheduler+0x13c>)
 8006662:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006666:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006668:	4b14      	ldr	r3, [pc, #80]	@ (80066bc <xPortStartScheduler+0x13c>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a13      	ldr	r2, [pc, #76]	@ (80066bc <xPortStartScheduler+0x13c>)
 800666e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006672:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006674:	f000 f8da 	bl	800682c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006678:	4b11      	ldr	r3, [pc, #68]	@ (80066c0 <xPortStartScheduler+0x140>)
 800667a:	2200      	movs	r2, #0
 800667c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800667e:	f000 f8f9 	bl	8006874 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006682:	4b10      	ldr	r3, [pc, #64]	@ (80066c4 <xPortStartScheduler+0x144>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a0f      	ldr	r2, [pc, #60]	@ (80066c4 <xPortStartScheduler+0x144>)
 8006688:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800668c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800668e:	f7ff ff63 	bl	8006558 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006692:	f7ff f83d 	bl	8005710 <vTaskSwitchContext>
	prvTaskExitError();
 8006696:	f7ff ff1b 	bl	80064d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3718      	adds	r7, #24
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	e000ed00 	.word	0xe000ed00
 80066a8:	410fc271 	.word	0x410fc271
 80066ac:	410fc270 	.word	0x410fc270
 80066b0:	e000e400 	.word	0xe000e400
 80066b4:	20001310 	.word	0x20001310
 80066b8:	20001314 	.word	0x20001314
 80066bc:	e000ed20 	.word	0xe000ed20
 80066c0:	20000028 	.word	0x20000028
 80066c4:	e000ef34 	.word	0xe000ef34

080066c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
	__asm volatile
 80066ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	607b      	str	r3, [r7, #4]
}
 80066e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80066e2:	4b10      	ldr	r3, [pc, #64]	@ (8006724 <vPortEnterCritical+0x5c>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	3301      	adds	r3, #1
 80066e8:	4a0e      	ldr	r2, [pc, #56]	@ (8006724 <vPortEnterCritical+0x5c>)
 80066ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80066ec:	4b0d      	ldr	r3, [pc, #52]	@ (8006724 <vPortEnterCritical+0x5c>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d110      	bne.n	8006716 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80066f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006728 <vPortEnterCritical+0x60>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00b      	beq.n	8006716 <vPortEnterCritical+0x4e>
	__asm volatile
 80066fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	603b      	str	r3, [r7, #0]
}
 8006710:	bf00      	nop
 8006712:	bf00      	nop
 8006714:	e7fd      	b.n	8006712 <vPortEnterCritical+0x4a>
	}
}
 8006716:	bf00      	nop
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	20000028 	.word	0x20000028
 8006728:	e000ed04 	.word	0xe000ed04

0800672c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006732:	4b12      	ldr	r3, [pc, #72]	@ (800677c <vPortExitCritical+0x50>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d10b      	bne.n	8006752 <vPortExitCritical+0x26>
	__asm volatile
 800673a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800673e:	f383 8811 	msr	BASEPRI, r3
 8006742:	f3bf 8f6f 	isb	sy
 8006746:	f3bf 8f4f 	dsb	sy
 800674a:	607b      	str	r3, [r7, #4]
}
 800674c:	bf00      	nop
 800674e:	bf00      	nop
 8006750:	e7fd      	b.n	800674e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006752:	4b0a      	ldr	r3, [pc, #40]	@ (800677c <vPortExitCritical+0x50>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3b01      	subs	r3, #1
 8006758:	4a08      	ldr	r2, [pc, #32]	@ (800677c <vPortExitCritical+0x50>)
 800675a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800675c:	4b07      	ldr	r3, [pc, #28]	@ (800677c <vPortExitCritical+0x50>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d105      	bne.n	8006770 <vPortExitCritical+0x44>
 8006764:	2300      	movs	r3, #0
 8006766:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	f383 8811 	msr	BASEPRI, r3
}
 800676e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr
 800677c:	20000028 	.word	0x20000028

08006780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006780:	f3ef 8009 	mrs	r0, PSP
 8006784:	f3bf 8f6f 	isb	sy
 8006788:	4b15      	ldr	r3, [pc, #84]	@ (80067e0 <pxCurrentTCBConst>)
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	f01e 0f10 	tst.w	lr, #16
 8006790:	bf08      	it	eq
 8006792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800679a:	6010      	str	r0, [r2, #0]
 800679c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80067a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80067a4:	f380 8811 	msr	BASEPRI, r0
 80067a8:	f3bf 8f4f 	dsb	sy
 80067ac:	f3bf 8f6f 	isb	sy
 80067b0:	f7fe ffae 	bl	8005710 <vTaskSwitchContext>
 80067b4:	f04f 0000 	mov.w	r0, #0
 80067b8:	f380 8811 	msr	BASEPRI, r0
 80067bc:	bc09      	pop	{r0, r3}
 80067be:	6819      	ldr	r1, [r3, #0]
 80067c0:	6808      	ldr	r0, [r1, #0]
 80067c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067c6:	f01e 0f10 	tst.w	lr, #16
 80067ca:	bf08      	it	eq
 80067cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80067d0:	f380 8809 	msr	PSP, r0
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	f3af 8000 	nop.w

080067e0 <pxCurrentTCBConst>:
 80067e0:	20000ce4 	.word	0x20000ce4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80067e4:	bf00      	nop
 80067e6:	bf00      	nop

080067e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
	__asm volatile
 80067ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f2:	f383 8811 	msr	BASEPRI, r3
 80067f6:	f3bf 8f6f 	isb	sy
 80067fa:	f3bf 8f4f 	dsb	sy
 80067fe:	607b      	str	r3, [r7, #4]
}
 8006800:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006802:	f7fe fecb 	bl	800559c <xTaskIncrementTick>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d003      	beq.n	8006814 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800680c:	4b06      	ldr	r3, [pc, #24]	@ (8006828 <xPortSysTickHandler+0x40>)
 800680e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006812:	601a      	str	r2, [r3, #0]
 8006814:	2300      	movs	r3, #0
 8006816:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	f383 8811 	msr	BASEPRI, r3
}
 800681e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006820:	bf00      	nop
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	e000ed04 	.word	0xe000ed04

0800682c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800682c:	b480      	push	{r7}
 800682e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006830:	4b0b      	ldr	r3, [pc, #44]	@ (8006860 <vPortSetupTimerInterrupt+0x34>)
 8006832:	2200      	movs	r2, #0
 8006834:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006836:	4b0b      	ldr	r3, [pc, #44]	@ (8006864 <vPortSetupTimerInterrupt+0x38>)
 8006838:	2200      	movs	r2, #0
 800683a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800683c:	4b0a      	ldr	r3, [pc, #40]	@ (8006868 <vPortSetupTimerInterrupt+0x3c>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a0a      	ldr	r2, [pc, #40]	@ (800686c <vPortSetupTimerInterrupt+0x40>)
 8006842:	fba2 2303 	umull	r2, r3, r2, r3
 8006846:	099b      	lsrs	r3, r3, #6
 8006848:	4a09      	ldr	r2, [pc, #36]	@ (8006870 <vPortSetupTimerInterrupt+0x44>)
 800684a:	3b01      	subs	r3, #1
 800684c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800684e:	4b04      	ldr	r3, [pc, #16]	@ (8006860 <vPortSetupTimerInterrupt+0x34>)
 8006850:	2207      	movs	r2, #7
 8006852:	601a      	str	r2, [r3, #0]
}
 8006854:	bf00      	nop
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	e000e010 	.word	0xe000e010
 8006864:	e000e018 	.word	0xe000e018
 8006868:	2000001c 	.word	0x2000001c
 800686c:	10624dd3 	.word	0x10624dd3
 8006870:	e000e014 	.word	0xe000e014

08006874 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006874:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006884 <vPortEnableVFP+0x10>
 8006878:	6801      	ldr	r1, [r0, #0]
 800687a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800687e:	6001      	str	r1, [r0, #0]
 8006880:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006882:	bf00      	nop
 8006884:	e000ed88 	.word	0xe000ed88

08006888 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800688e:	f3ef 8305 	mrs	r3, IPSR
 8006892:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2b0f      	cmp	r3, #15
 8006898:	d915      	bls.n	80068c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800689a:	4a18      	ldr	r2, [pc, #96]	@ (80068fc <vPortValidateInterruptPriority+0x74>)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	4413      	add	r3, r2
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80068a4:	4b16      	ldr	r3, [pc, #88]	@ (8006900 <vPortValidateInterruptPriority+0x78>)
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	7afa      	ldrb	r2, [r7, #11]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d20b      	bcs.n	80068c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80068ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b2:	f383 8811 	msr	BASEPRI, r3
 80068b6:	f3bf 8f6f 	isb	sy
 80068ba:	f3bf 8f4f 	dsb	sy
 80068be:	607b      	str	r3, [r7, #4]
}
 80068c0:	bf00      	nop
 80068c2:	bf00      	nop
 80068c4:	e7fd      	b.n	80068c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80068c6:	4b0f      	ldr	r3, [pc, #60]	@ (8006904 <vPortValidateInterruptPriority+0x7c>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80068ce:	4b0e      	ldr	r3, [pc, #56]	@ (8006908 <vPortValidateInterruptPriority+0x80>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d90b      	bls.n	80068ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80068d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068da:	f383 8811 	msr	BASEPRI, r3
 80068de:	f3bf 8f6f 	isb	sy
 80068e2:	f3bf 8f4f 	dsb	sy
 80068e6:	603b      	str	r3, [r7, #0]
}
 80068e8:	bf00      	nop
 80068ea:	bf00      	nop
 80068ec:	e7fd      	b.n	80068ea <vPortValidateInterruptPriority+0x62>
	}
 80068ee:	bf00      	nop
 80068f0:	3714      	adds	r7, #20
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	e000e3f0 	.word	0xe000e3f0
 8006900:	20001310 	.word	0x20001310
 8006904:	e000ed0c 	.word	0xe000ed0c
 8006908:	20001314 	.word	0x20001314

0800690c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b08a      	sub	sp, #40	@ 0x28
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006914:	2300      	movs	r3, #0
 8006916:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006918:	f7fe fd84 	bl	8005424 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800691c:	4b5c      	ldr	r3, [pc, #368]	@ (8006a90 <pvPortMalloc+0x184>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d101      	bne.n	8006928 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006924:	f000 f924 	bl	8006b70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006928:	4b5a      	ldr	r3, [pc, #360]	@ (8006a94 <pvPortMalloc+0x188>)
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4013      	ands	r3, r2
 8006930:	2b00      	cmp	r3, #0
 8006932:	f040 8095 	bne.w	8006a60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d01e      	beq.n	800697a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800693c:	2208      	movs	r2, #8
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4413      	add	r3, r2
 8006942:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f003 0307 	and.w	r3, r3, #7
 800694a:	2b00      	cmp	r3, #0
 800694c:	d015      	beq.n	800697a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f023 0307 	bic.w	r3, r3, #7
 8006954:	3308      	adds	r3, #8
 8006956:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f003 0307 	and.w	r3, r3, #7
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00b      	beq.n	800697a <pvPortMalloc+0x6e>
	__asm volatile
 8006962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006966:	f383 8811 	msr	BASEPRI, r3
 800696a:	f3bf 8f6f 	isb	sy
 800696e:	f3bf 8f4f 	dsb	sy
 8006972:	617b      	str	r3, [r7, #20]
}
 8006974:	bf00      	nop
 8006976:	bf00      	nop
 8006978:	e7fd      	b.n	8006976 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d06f      	beq.n	8006a60 <pvPortMalloc+0x154>
 8006980:	4b45      	ldr	r3, [pc, #276]	@ (8006a98 <pvPortMalloc+0x18c>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	429a      	cmp	r2, r3
 8006988:	d86a      	bhi.n	8006a60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800698a:	4b44      	ldr	r3, [pc, #272]	@ (8006a9c <pvPortMalloc+0x190>)
 800698c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800698e:	4b43      	ldr	r3, [pc, #268]	@ (8006a9c <pvPortMalloc+0x190>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006994:	e004      	b.n	80069a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006998:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800699a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d903      	bls.n	80069b2 <pvPortMalloc+0xa6>
 80069aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1f1      	bne.n	8006996 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80069b2:	4b37      	ldr	r3, [pc, #220]	@ (8006a90 <pvPortMalloc+0x184>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d051      	beq.n	8006a60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80069bc:	6a3b      	ldr	r3, [r7, #32]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2208      	movs	r2, #8
 80069c2:	4413      	add	r3, r2
 80069c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80069c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	6a3b      	ldr	r3, [r7, #32]
 80069cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80069ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	1ad2      	subs	r2, r2, r3
 80069d6:	2308      	movs	r3, #8
 80069d8:	005b      	lsls	r3, r3, #1
 80069da:	429a      	cmp	r2, r3
 80069dc:	d920      	bls.n	8006a20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80069de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4413      	add	r3, r2
 80069e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	f003 0307 	and.w	r3, r3, #7
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00b      	beq.n	8006a08 <pvPortMalloc+0xfc>
	__asm volatile
 80069f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f4:	f383 8811 	msr	BASEPRI, r3
 80069f8:	f3bf 8f6f 	isb	sy
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	613b      	str	r3, [r7, #16]
}
 8006a02:	bf00      	nop
 8006a04:	bf00      	nop
 8006a06:	e7fd      	b.n	8006a04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	1ad2      	subs	r2, r2, r3
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a1a:	69b8      	ldr	r0, [r7, #24]
 8006a1c:	f000 f90a 	bl	8006c34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a20:	4b1d      	ldr	r3, [pc, #116]	@ (8006a98 <pvPortMalloc+0x18c>)
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	4a1b      	ldr	r2, [pc, #108]	@ (8006a98 <pvPortMalloc+0x18c>)
 8006a2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8006a98 <pvPortMalloc+0x18c>)
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	4b1b      	ldr	r3, [pc, #108]	@ (8006aa0 <pvPortMalloc+0x194>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d203      	bcs.n	8006a42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a3a:	4b17      	ldr	r3, [pc, #92]	@ (8006a98 <pvPortMalloc+0x18c>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a18      	ldr	r2, [pc, #96]	@ (8006aa0 <pvPortMalloc+0x194>)
 8006a40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a44:	685a      	ldr	r2, [r3, #4]
 8006a46:	4b13      	ldr	r3, [pc, #76]	@ (8006a94 <pvPortMalloc+0x188>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	431a      	orrs	r2, r3
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a52:	2200      	movs	r2, #0
 8006a54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006a56:	4b13      	ldr	r3, [pc, #76]	@ (8006aa4 <pvPortMalloc+0x198>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	4a11      	ldr	r2, [pc, #68]	@ (8006aa4 <pvPortMalloc+0x198>)
 8006a5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006a60:	f7fe fcee 	bl	8005440 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	f003 0307 	and.w	r3, r3, #7
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00b      	beq.n	8006a86 <pvPortMalloc+0x17a>
	__asm volatile
 8006a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a72:	f383 8811 	msr	BASEPRI, r3
 8006a76:	f3bf 8f6f 	isb	sy
 8006a7a:	f3bf 8f4f 	dsb	sy
 8006a7e:	60fb      	str	r3, [r7, #12]
}
 8006a80:	bf00      	nop
 8006a82:	bf00      	nop
 8006a84:	e7fd      	b.n	8006a82 <pvPortMalloc+0x176>
	return pvReturn;
 8006a86:	69fb      	ldr	r3, [r7, #28]
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3728      	adds	r7, #40	@ 0x28
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	20004f20 	.word	0x20004f20
 8006a94:	20004f34 	.word	0x20004f34
 8006a98:	20004f24 	.word	0x20004f24
 8006a9c:	20004f18 	.word	0x20004f18
 8006aa0:	20004f28 	.word	0x20004f28
 8006aa4:	20004f2c 	.word	0x20004f2c

08006aa8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b086      	sub	sp, #24
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d04f      	beq.n	8006b5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006aba:	2308      	movs	r3, #8
 8006abc:	425b      	negs	r3, r3
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	685a      	ldr	r2, [r3, #4]
 8006acc:	4b25      	ldr	r3, [pc, #148]	@ (8006b64 <vPortFree+0xbc>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10b      	bne.n	8006aee <vPortFree+0x46>
	__asm volatile
 8006ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ada:	f383 8811 	msr	BASEPRI, r3
 8006ade:	f3bf 8f6f 	isb	sy
 8006ae2:	f3bf 8f4f 	dsb	sy
 8006ae6:	60fb      	str	r3, [r7, #12]
}
 8006ae8:	bf00      	nop
 8006aea:	bf00      	nop
 8006aec:	e7fd      	b.n	8006aea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00b      	beq.n	8006b0e <vPortFree+0x66>
	__asm volatile
 8006af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006afa:	f383 8811 	msr	BASEPRI, r3
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	60bb      	str	r3, [r7, #8]
}
 8006b08:	bf00      	nop
 8006b0a:	bf00      	nop
 8006b0c:	e7fd      	b.n	8006b0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	685a      	ldr	r2, [r3, #4]
 8006b12:	4b14      	ldr	r3, [pc, #80]	@ (8006b64 <vPortFree+0xbc>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4013      	ands	r3, r2
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d01e      	beq.n	8006b5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d11a      	bne.n	8006b5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	685a      	ldr	r2, [r3, #4]
 8006b28:	4b0e      	ldr	r3, [pc, #56]	@ (8006b64 <vPortFree+0xbc>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	43db      	mvns	r3, r3
 8006b2e:	401a      	ands	r2, r3
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b34:	f7fe fc76 	bl	8005424 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	685a      	ldr	r2, [r3, #4]
 8006b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b68 <vPortFree+0xc0>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4413      	add	r3, r2
 8006b42:	4a09      	ldr	r2, [pc, #36]	@ (8006b68 <vPortFree+0xc0>)
 8006b44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b46:	6938      	ldr	r0, [r7, #16]
 8006b48:	f000 f874 	bl	8006c34 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006b4c:	4b07      	ldr	r3, [pc, #28]	@ (8006b6c <vPortFree+0xc4>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	3301      	adds	r3, #1
 8006b52:	4a06      	ldr	r2, [pc, #24]	@ (8006b6c <vPortFree+0xc4>)
 8006b54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006b56:	f7fe fc73 	bl	8005440 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006b5a:	bf00      	nop
 8006b5c:	3718      	adds	r7, #24
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	20004f34 	.word	0x20004f34
 8006b68:	20004f24 	.word	0x20004f24
 8006b6c:	20004f30 	.word	0x20004f30

08006b70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006b76:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006b7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006b7c:	4b27      	ldr	r3, [pc, #156]	@ (8006c1c <prvHeapInit+0xac>)
 8006b7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f003 0307 	and.w	r3, r3, #7
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00c      	beq.n	8006ba4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	3307      	adds	r3, #7
 8006b8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f023 0307 	bic.w	r3, r3, #7
 8006b96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006b98:	68ba      	ldr	r2, [r7, #8]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	4a1f      	ldr	r2, [pc, #124]	@ (8006c1c <prvHeapInit+0xac>)
 8006ba0:	4413      	add	r3, r2
 8006ba2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8006c20 <prvHeapInit+0xb0>)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006bae:	4b1c      	ldr	r3, [pc, #112]	@ (8006c20 <prvHeapInit+0xb0>)
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	4413      	add	r3, r2
 8006bba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006bbc:	2208      	movs	r2, #8
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	1a9b      	subs	r3, r3, r2
 8006bc2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f023 0307 	bic.w	r3, r3, #7
 8006bca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	4a15      	ldr	r2, [pc, #84]	@ (8006c24 <prvHeapInit+0xb4>)
 8006bd0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006bd2:	4b14      	ldr	r3, [pc, #80]	@ (8006c24 <prvHeapInit+0xb4>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006bda:	4b12      	ldr	r3, [pc, #72]	@ (8006c24 <prvHeapInit+0xb4>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2200      	movs	r2, #0
 8006be0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	1ad2      	subs	r2, r2, r3
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8006c24 <prvHeapInit+0xb4>)
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	4a0a      	ldr	r2, [pc, #40]	@ (8006c28 <prvHeapInit+0xb8>)
 8006bfe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	4a09      	ldr	r2, [pc, #36]	@ (8006c2c <prvHeapInit+0xbc>)
 8006c06:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c08:	4b09      	ldr	r3, [pc, #36]	@ (8006c30 <prvHeapInit+0xc0>)
 8006c0a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006c0e:	601a      	str	r2, [r3, #0]
}
 8006c10:	bf00      	nop
 8006c12:	3714      	adds	r7, #20
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr
 8006c1c:	20001318 	.word	0x20001318
 8006c20:	20004f18 	.word	0x20004f18
 8006c24:	20004f20 	.word	0x20004f20
 8006c28:	20004f28 	.word	0x20004f28
 8006c2c:	20004f24 	.word	0x20004f24
 8006c30:	20004f34 	.word	0x20004f34

08006c34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c3c:	4b28      	ldr	r3, [pc, #160]	@ (8006ce0 <prvInsertBlockIntoFreeList+0xac>)
 8006c3e:	60fb      	str	r3, [r7, #12]
 8006c40:	e002      	b.n	8006c48 <prvInsertBlockIntoFreeList+0x14>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	60fb      	str	r3, [r7, #12]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d8f7      	bhi.n	8006c42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d108      	bne.n	8006c76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	685a      	ldr	r2, [r3, #4]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	441a      	add	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	441a      	add	r2, r3
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d118      	bne.n	8006cbc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	4b15      	ldr	r3, [pc, #84]	@ (8006ce4 <prvInsertBlockIntoFreeList+0xb0>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d00d      	beq.n	8006cb2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	685a      	ldr	r2, [r3, #4]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	441a      	add	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	601a      	str	r2, [r3, #0]
 8006cb0:	e008      	b.n	8006cc4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8006ce4 <prvInsertBlockIntoFreeList+0xb0>)
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	601a      	str	r2, [r3, #0]
 8006cba:	e003      	b.n	8006cc4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d002      	beq.n	8006cd2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cd2:	bf00      	nop
 8006cd4:	3714      	adds	r7, #20
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	20004f18 	.word	0x20004f18
 8006ce4:	20004f20 	.word	0x20004f20

08006ce8 <memset>:
 8006ce8:	4402      	add	r2, r0
 8006cea:	4603      	mov	r3, r0
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d100      	bne.n	8006cf2 <memset+0xa>
 8006cf0:	4770      	bx	lr
 8006cf2:	f803 1b01 	strb.w	r1, [r3], #1
 8006cf6:	e7f9      	b.n	8006cec <memset+0x4>

08006cf8 <__libc_init_array>:
 8006cf8:	b570      	push	{r4, r5, r6, lr}
 8006cfa:	4d0d      	ldr	r5, [pc, #52]	@ (8006d30 <__libc_init_array+0x38>)
 8006cfc:	4c0d      	ldr	r4, [pc, #52]	@ (8006d34 <__libc_init_array+0x3c>)
 8006cfe:	1b64      	subs	r4, r4, r5
 8006d00:	10a4      	asrs	r4, r4, #2
 8006d02:	2600      	movs	r6, #0
 8006d04:	42a6      	cmp	r6, r4
 8006d06:	d109      	bne.n	8006d1c <__libc_init_array+0x24>
 8006d08:	4d0b      	ldr	r5, [pc, #44]	@ (8006d38 <__libc_init_array+0x40>)
 8006d0a:	4c0c      	ldr	r4, [pc, #48]	@ (8006d3c <__libc_init_array+0x44>)
 8006d0c:	f000 f826 	bl	8006d5c <_init>
 8006d10:	1b64      	subs	r4, r4, r5
 8006d12:	10a4      	asrs	r4, r4, #2
 8006d14:	2600      	movs	r6, #0
 8006d16:	42a6      	cmp	r6, r4
 8006d18:	d105      	bne.n	8006d26 <__libc_init_array+0x2e>
 8006d1a:	bd70      	pop	{r4, r5, r6, pc}
 8006d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d20:	4798      	blx	r3
 8006d22:	3601      	adds	r6, #1
 8006d24:	e7ee      	b.n	8006d04 <__libc_init_array+0xc>
 8006d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d2a:	4798      	blx	r3
 8006d2c:	3601      	adds	r6, #1
 8006d2e:	e7f2      	b.n	8006d16 <__libc_init_array+0x1e>
 8006d30:	08006e9c 	.word	0x08006e9c
 8006d34:	08006e9c 	.word	0x08006e9c
 8006d38:	08006e9c 	.word	0x08006e9c
 8006d3c:	08006ea0 	.word	0x08006ea0

08006d40 <memcpy>:
 8006d40:	440a      	add	r2, r1
 8006d42:	4291      	cmp	r1, r2
 8006d44:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d48:	d100      	bne.n	8006d4c <memcpy+0xc>
 8006d4a:	4770      	bx	lr
 8006d4c:	b510      	push	{r4, lr}
 8006d4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d56:	4291      	cmp	r1, r2
 8006d58:	d1f9      	bne.n	8006d4e <memcpy+0xe>
 8006d5a:	bd10      	pop	{r4, pc}

08006d5c <_init>:
 8006d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d5e:	bf00      	nop
 8006d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d62:	bc08      	pop	{r3}
 8006d64:	469e      	mov	lr, r3
 8006d66:	4770      	bx	lr

08006d68 <_fini>:
 8006d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6a:	bf00      	nop
 8006d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d6e:	bc08      	pop	{r3}
 8006d70:	469e      	mov	lr, r3
 8006d72:	4770      	bx	lr
