
Master1_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065f4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080067c4  080067c4  000077c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006854  08006854  00008018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006854  08006854  00007854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800685c  0800685c  00008018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800685c  0800685c  0000785c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006860  08006860  00007860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08006864  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004efc  20000018  0800687c  00008018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004f14  0800687c  00008f14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001beda  00000000  00000000  00008048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004134  00000000  00000000  00023f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001830  00000000  00000000  00028058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012b2  00000000  00000000  00029888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a7a  00000000  00000000  0002ab3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cee5  00000000  00000000  0004f5b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd63c  00000000  00000000  0006c499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00149ad5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065c0  00000000  00000000  00149b18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001500d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000018 	.word	0x20000018
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080067ac 	.word	0x080067ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000001c 	.word	0x2000001c
 800020c:	080067ac 	.word	0x080067ac

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b988 	b.w	8000538 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	468e      	mov	lr, r1
 8000248:	4604      	mov	r4, r0
 800024a:	4688      	mov	r8, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d962      	bls.n	800031c <__udivmoddi4+0xdc>
 8000256:	fab2 f682 	clz	r6, r2
 800025a:	b14e      	cbz	r6, 8000270 <__udivmoddi4+0x30>
 800025c:	f1c6 0320 	rsb	r3, r6, #32
 8000260:	fa01 f806 	lsl.w	r8, r1, r6
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	40b7      	lsls	r7, r6
 800026a:	ea43 0808 	orr.w	r8, r3, r8
 800026e:	40b4      	lsls	r4, r6
 8000270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000274:	fa1f fc87 	uxth.w	ip, r7
 8000278:	fbb8 f1fe 	udiv	r1, r8, lr
 800027c:	0c23      	lsrs	r3, r4, #16
 800027e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000282:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000286:	fb01 f20c 	mul.w	r2, r1, ip
 800028a:	429a      	cmp	r2, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f101 30ff 	add.w	r0, r1, #4294967295
 8000294:	f080 80ea 	bcs.w	800046c <__udivmoddi4+0x22c>
 8000298:	429a      	cmp	r2, r3
 800029a:	f240 80e7 	bls.w	800046c <__udivmoddi4+0x22c>
 800029e:	3902      	subs	r1, #2
 80002a0:	443b      	add	r3, r7
 80002a2:	1a9a      	subs	r2, r3, r2
 80002a4:	b2a3      	uxth	r3, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b6:	459c      	cmp	ip, r3
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0x8e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c0:	f080 80d6 	bcs.w	8000470 <__udivmoddi4+0x230>
 80002c4:	459c      	cmp	ip, r3
 80002c6:	f240 80d3 	bls.w	8000470 <__udivmoddi4+0x230>
 80002ca:	443b      	add	r3, r7
 80002cc:	3802      	subs	r0, #2
 80002ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d2:	eba3 030c 	sub.w	r3, r3, ip
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11d      	cbz	r5, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40f3      	lsrs	r3, r6
 80002dc:	2200      	movs	r2, #0
 80002de:	e9c5 3200 	strd	r3, r2, [r5]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d905      	bls.n	80002f6 <__udivmoddi4+0xb6>
 80002ea:	b10d      	cbz	r5, 80002f0 <__udivmoddi4+0xb0>
 80002ec:	e9c5 0100 	strd	r0, r1, [r5]
 80002f0:	2100      	movs	r1, #0
 80002f2:	4608      	mov	r0, r1
 80002f4:	e7f5      	b.n	80002e2 <__udivmoddi4+0xa2>
 80002f6:	fab3 f183 	clz	r1, r3
 80002fa:	2900      	cmp	r1, #0
 80002fc:	d146      	bne.n	800038c <__udivmoddi4+0x14c>
 80002fe:	4573      	cmp	r3, lr
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xc8>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 8105 	bhi.w	8000512 <__udivmoddi4+0x2d2>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb6e 0203 	sbc.w	r2, lr, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4690      	mov	r8, r2
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e5      	beq.n	80002e2 <__udivmoddi4+0xa2>
 8000316:	e9c5 4800 	strd	r4, r8, [r5]
 800031a:	e7e2      	b.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	2a00      	cmp	r2, #0
 800031e:	f000 8090 	beq.w	8000442 <__udivmoddi4+0x202>
 8000322:	fab2 f682 	clz	r6, r2
 8000326:	2e00      	cmp	r6, #0
 8000328:	f040 80a4 	bne.w	8000474 <__udivmoddi4+0x234>
 800032c:	1a8a      	subs	r2, r1, r2
 800032e:	0c03      	lsrs	r3, r0, #16
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	b280      	uxth	r0, r0
 8000336:	b2bc      	uxth	r4, r7
 8000338:	2101      	movs	r1, #1
 800033a:	fbb2 fcfe 	udiv	ip, r2, lr
 800033e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000346:	fb04 f20c 	mul.w	r2, r4, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d907      	bls.n	800035e <__udivmoddi4+0x11e>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x11c>
 8000356:	429a      	cmp	r2, r3
 8000358:	f200 80e0 	bhi.w	800051c <__udivmoddi4+0x2dc>
 800035c:	46c4      	mov	ip, r8
 800035e:	1a9b      	subs	r3, r3, r2
 8000360:	fbb3 f2fe 	udiv	r2, r3, lr
 8000364:	fb0e 3312 	mls	r3, lr, r2, r3
 8000368:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800036c:	fb02 f404 	mul.w	r4, r2, r4
 8000370:	429c      	cmp	r4, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x144>
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	f102 30ff 	add.w	r0, r2, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x142>
 800037c:	429c      	cmp	r4, r3
 800037e:	f200 80ca 	bhi.w	8000516 <__udivmoddi4+0x2d6>
 8000382:	4602      	mov	r2, r0
 8000384:	1b1b      	subs	r3, r3, r4
 8000386:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0x98>
 800038c:	f1c1 0620 	rsb	r6, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 f706 	lsr.w	r7, r2, r6
 8000396:	431f      	orrs	r7, r3
 8000398:	fa0e f401 	lsl.w	r4, lr, r1
 800039c:	fa20 f306 	lsr.w	r3, r0, r6
 80003a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	fa1f fc87 	uxth.w	ip, r7
 80003b2:	fbbe f0f9 	udiv	r0, lr, r9
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x1a0>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d2:	f080 809c 	bcs.w	800050e <__udivmoddi4+0x2ce>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	f240 8099 	bls.w	800050e <__udivmoddi4+0x2ce>
 80003dc:	3802      	subs	r0, #2
 80003de:	443c      	add	r4, r7
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	fa1f fe83 	uxth.w	lr, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1ce>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000402:	f080 8082 	bcs.w	800050a <__udivmoddi4+0x2ca>
 8000406:	45a4      	cmp	ip, r4
 8000408:	d97f      	bls.n	800050a <__udivmoddi4+0x2ca>
 800040a:	3b02      	subs	r3, #2
 800040c:	443c      	add	r4, r7
 800040e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	fba0 ec02 	umull	lr, ip, r0, r2
 800041a:	4564      	cmp	r4, ip
 800041c:	4673      	mov	r3, lr
 800041e:	46e1      	mov	r9, ip
 8000420:	d362      	bcc.n	80004e8 <__udivmoddi4+0x2a8>
 8000422:	d05f      	beq.n	80004e4 <__udivmoddi4+0x2a4>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x1fe>
 8000426:	ebb8 0203 	subs.w	r2, r8, r3
 800042a:	eb64 0409 	sbc.w	r4, r4, r9
 800042e:	fa04 f606 	lsl.w	r6, r4, r6
 8000432:	fa22 f301 	lsr.w	r3, r2, r1
 8000436:	431e      	orrs	r6, r3
 8000438:	40cc      	lsrs	r4, r1
 800043a:	e9c5 6400 	strd	r6, r4, [r5]
 800043e:	2100      	movs	r1, #0
 8000440:	e74f      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000442:	fbb1 fcf2 	udiv	ip, r1, r2
 8000446:	0c01      	lsrs	r1, r0, #16
 8000448:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800044c:	b280      	uxth	r0, r0
 800044e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000452:	463b      	mov	r3, r7
 8000454:	4638      	mov	r0, r7
 8000456:	463c      	mov	r4, r7
 8000458:	46b8      	mov	r8, r7
 800045a:	46be      	mov	lr, r7
 800045c:	2620      	movs	r6, #32
 800045e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000462:	eba2 0208 	sub.w	r2, r2, r8
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	e766      	b.n	800033a <__udivmoddi4+0xfa>
 800046c:	4601      	mov	r1, r0
 800046e:	e718      	b.n	80002a2 <__udivmoddi4+0x62>
 8000470:	4610      	mov	r0, r2
 8000472:	e72c      	b.n	80002ce <__udivmoddi4+0x8e>
 8000474:	f1c6 0220 	rsb	r2, r6, #32
 8000478:	fa2e f302 	lsr.w	r3, lr, r2
 800047c:	40b7      	lsls	r7, r6
 800047e:	40b1      	lsls	r1, r6
 8000480:	fa20 f202 	lsr.w	r2, r0, r2
 8000484:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000488:	430a      	orrs	r2, r1
 800048a:	fbb3 f8fe 	udiv	r8, r3, lr
 800048e:	b2bc      	uxth	r4, r7
 8000490:	fb0e 3318 	mls	r3, lr, r8, r3
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb08 f904 	mul.w	r9, r8, r4
 800049e:	40b0      	lsls	r0, r6
 80004a0:	4589      	cmp	r9, r1
 80004a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004a6:	b280      	uxth	r0, r0
 80004a8:	d93e      	bls.n	8000528 <__udivmoddi4+0x2e8>
 80004aa:	1879      	adds	r1, r7, r1
 80004ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b0:	d201      	bcs.n	80004b6 <__udivmoddi4+0x276>
 80004b2:	4589      	cmp	r9, r1
 80004b4:	d81f      	bhi.n	80004f6 <__udivmoddi4+0x2b6>
 80004b6:	eba1 0109 	sub.w	r1, r1, r9
 80004ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80004be:	fb09 f804 	mul.w	r8, r9, r4
 80004c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004c6:	b292      	uxth	r2, r2
 80004c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d229      	bcs.n	8000524 <__udivmoddi4+0x2e4>
 80004d0:	18ba      	adds	r2, r7, r2
 80004d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004d6:	d2c4      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004d8:	4542      	cmp	r2, r8
 80004da:	d2c2      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004dc:	f1a9 0102 	sub.w	r1, r9, #2
 80004e0:	443a      	add	r2, r7
 80004e2:	e7be      	b.n	8000462 <__udivmoddi4+0x222>
 80004e4:	45f0      	cmp	r8, lr
 80004e6:	d29d      	bcs.n	8000424 <__udivmoddi4+0x1e4>
 80004e8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f0:	3801      	subs	r0, #1
 80004f2:	46e1      	mov	r9, ip
 80004f4:	e796      	b.n	8000424 <__udivmoddi4+0x1e4>
 80004f6:	eba7 0909 	sub.w	r9, r7, r9
 80004fa:	4449      	add	r1, r9
 80004fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000500:	fbb1 f9fe 	udiv	r9, r1, lr
 8000504:	fb09 f804 	mul.w	r8, r9, r4
 8000508:	e7db      	b.n	80004c2 <__udivmoddi4+0x282>
 800050a:	4673      	mov	r3, lr
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1ce>
 800050e:	4650      	mov	r0, sl
 8000510:	e766      	b.n	80003e0 <__udivmoddi4+0x1a0>
 8000512:	4608      	mov	r0, r1
 8000514:	e6fd      	b.n	8000312 <__udivmoddi4+0xd2>
 8000516:	443b      	add	r3, r7
 8000518:	3a02      	subs	r2, #2
 800051a:	e733      	b.n	8000384 <__udivmoddi4+0x144>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	443b      	add	r3, r7
 8000522:	e71c      	b.n	800035e <__udivmoddi4+0x11e>
 8000524:	4649      	mov	r1, r9
 8000526:	e79c      	b.n	8000462 <__udivmoddi4+0x222>
 8000528:	eba1 0109 	sub.w	r1, r1, r9
 800052c:	46c4      	mov	ip, r8
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	e7c4      	b.n	80004c2 <__udivmoddi4+0x282>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <encoder_update>:
void encoder_init(void) {
    ticks = 0;
    crans = 0;
}

void encoder_update(void) {
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
    static int16_t last = 0;
    int16_t current = __HAL_TIM_GET_COUNTER(&htim2);
 8000542:	4b31      	ldr	r3, [pc, #196]	@ (8000608 <encoder_update+0xcc>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000548:	80fb      	strh	r3, [r7, #6]
    int16_t delta = current - last;
 800054a:	88fa      	ldrh	r2, [r7, #6]
 800054c:	4b2f      	ldr	r3, [pc, #188]	@ (800060c <encoder_update+0xd0>)
 800054e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000552:	b29b      	uxth	r3, r3
 8000554:	1ad3      	subs	r3, r2, r3
 8000556:	b29b      	uxth	r3, r3
 8000558:	81fb      	strh	r3, [r7, #14]
    last = current;
 800055a:	4a2c      	ldr	r2, [pc, #176]	@ (800060c <encoder_update+0xd0>)
 800055c:	88fb      	ldrh	r3, [r7, #6]
 800055e:	8013      	strh	r3, [r2, #0]

    // Inversion du sens si nécessaire
    if (is_reversed)
 8000560:	4b2b      	ldr	r3, [pc, #172]	@ (8000610 <encoder_update+0xd4>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d003      	beq.n	8000570 <encoder_update+0x34>
        delta = -delta;
 8000568:	89fb      	ldrh	r3, [r7, #14]
 800056a:	425b      	negs	r3, r3
 800056c:	b29b      	uxth	r3, r3
 800056e:	81fb      	strh	r3, [r7, #14]

    ticks += delta;
 8000570:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000574:	4b27      	ldr	r3, [pc, #156]	@ (8000614 <encoder_update+0xd8>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4413      	add	r3, r2
 800057a:	4a26      	ldr	r2, [pc, #152]	@ (8000614 <encoder_update+0xd8>)
 800057c:	6013      	str	r3, [r2, #0]
    int32_t new_crans = ticks / 4;
 800057e:	4b25      	ldr	r3, [pc, #148]	@ (8000614 <encoder_update+0xd8>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2b00      	cmp	r3, #0
 8000584:	da00      	bge.n	8000588 <encoder_update+0x4c>
 8000586:	3303      	adds	r3, #3
 8000588:	109b      	asrs	r3, r3, #2
 800058a:	60bb      	str	r3, [r7, #8]

    if (is_cyclic) {
 800058c:	4b22      	ldr	r3, [pc, #136]	@ (8000618 <encoder_update+0xdc>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d020      	beq.n	80005d6 <encoder_update+0x9a>
    	 int32_t range = max - min + 1;
 8000594:	4b21      	ldr	r3, [pc, #132]	@ (800061c <encoder_update+0xe0>)
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	4b21      	ldr	r3, [pc, #132]	@ (8000620 <encoder_update+0xe4>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	1ad3      	subs	r3, r2, r3
 800059e:	3301      	adds	r3, #1
 80005a0:	603b      	str	r3, [r7, #0]
    	 crans = ((new_crans - min) % range + range) % range + min;
 80005a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000620 <encoder_update+0xe4>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	68ba      	ldr	r2, [r7, #8]
 80005a8:	1ad3      	subs	r3, r2, r3
 80005aa:	683a      	ldr	r2, [r7, #0]
 80005ac:	fb93 f2f2 	sdiv	r2, r3, r2
 80005b0:	6839      	ldr	r1, [r7, #0]
 80005b2:	fb01 f202 	mul.w	r2, r1, r2
 80005b6:	1a9a      	subs	r2, r3, r2
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	4413      	add	r3, r2
 80005bc:	683a      	ldr	r2, [r7, #0]
 80005be:	fb93 f2f2 	sdiv	r2, r3, r2
 80005c2:	6839      	ldr	r1, [r7, #0]
 80005c4:	fb01 f202 	mul.w	r2, r1, r2
 80005c8:	1a9a      	subs	r2, r3, r2
 80005ca:	4b15      	ldr	r3, [pc, #84]	@ (8000620 <encoder_update+0xe4>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4413      	add	r3, r2
 80005d0:	4a14      	ldr	r2, [pc, #80]	@ (8000624 <encoder_update+0xe8>)
 80005d2:	6013      	str	r3, [r2, #0]
    } else {
        if (new_crans < min) new_crans = min;
        if (new_crans > max) new_crans = max;
        crans = new_crans;
    }
}
 80005d4:	e012      	b.n	80005fc <encoder_update+0xc0>
        if (new_crans < min) new_crans = min;
 80005d6:	4b12      	ldr	r3, [pc, #72]	@ (8000620 <encoder_update+0xe4>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	68ba      	ldr	r2, [r7, #8]
 80005dc:	429a      	cmp	r2, r3
 80005de:	da02      	bge.n	80005e6 <encoder_update+0xaa>
 80005e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000620 <encoder_update+0xe4>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	60bb      	str	r3, [r7, #8]
        if (new_crans > max) new_crans = max;
 80005e6:	4b0d      	ldr	r3, [pc, #52]	@ (800061c <encoder_update+0xe0>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	68ba      	ldr	r2, [r7, #8]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	dd02      	ble.n	80005f6 <encoder_update+0xba>
 80005f0:	4b0a      	ldr	r3, [pc, #40]	@ (800061c <encoder_update+0xe0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	60bb      	str	r3, [r7, #8]
        crans = new_crans;
 80005f6:	4a0b      	ldr	r2, [pc, #44]	@ (8000624 <encoder_update+0xe8>)
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	6013      	str	r3, [r2, #0]
}
 80005fc:	bf00      	nop
 80005fe:	3714      	adds	r7, #20
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	2000004c 	.word	0x2000004c
 800060c:	20000040 	.word	0x20000040
 8000610:	20000005 	.word	0x20000005
 8000614:	20000034 	.word	0x20000034
 8000618:	20000004 	.word	0x20000004
 800061c:	20000000 	.word	0x20000000
 8000620:	2000003c 	.word	0x2000003c
 8000624:	20000038 	.word	0x20000038

08000628 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800062c:	4a08      	ldr	r2, [pc, #32]	@ (8000650 <MX_FREERTOS_Init+0x28>)
 800062e:	2100      	movs	r1, #0
 8000630:	4808      	ldr	r0, [pc, #32]	@ (8000654 <MX_FREERTOS_Init+0x2c>)
 8000632:	f003 fb4b 	bl	8003ccc <osThreadNew>
 8000636:	4603      	mov	r3, r0
 8000638:	4a07      	ldr	r2, [pc, #28]	@ (8000658 <MX_FREERTOS_Init+0x30>)
 800063a:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(encoder, NULL, &encoderTask_attributes);
 800063c:	4a07      	ldr	r2, [pc, #28]	@ (800065c <MX_FREERTOS_Init+0x34>)
 800063e:	2100      	movs	r1, #0
 8000640:	4807      	ldr	r0, [pc, #28]	@ (8000660 <MX_FREERTOS_Init+0x38>)
 8000642:	f003 fb43 	bl	8003ccc <osThreadNew>
 8000646:	4603      	mov	r3, r0
 8000648:	4a06      	ldr	r2, [pc, #24]	@ (8000664 <MX_FREERTOS_Init+0x3c>)
 800064a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	080067f4 	.word	0x080067f4
 8000654:	08000669 	.word	0x08000669
 8000658:	20000044 	.word	0x20000044
 800065c:	08006818 	.word	0x08006818
 8000660:	08000679 	.word	0x08000679
 8000664:	20000048 	.word	0x20000048

08000668 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000670:	2001      	movs	r0, #1
 8000672:	f003 fbbd 	bl	8003df0 <osDelay>
 8000676:	e7fb      	b.n	8000670 <StartDefaultTask+0x8>

08000678 <encoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder */
void encoder(void *argument)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoder */
  /* Infinite loop */
  for(;;)
  {
		encoder_update();
 8000680:	f7ff ff5c 	bl	800053c <encoder_update>

		osDelay(10);  // 100 Hz
 8000684:	200a      	movs	r0, #10
 8000686:	f003 fbb3 	bl	8003df0 <osDelay>
		encoder_update();
 800068a:	bf00      	nop
 800068c:	e7f8      	b.n	8000680 <encoder+0x8>
	...

08000690 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08c      	sub	sp, #48	@ 0x30
 8000694:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	61bb      	str	r3, [r7, #24]
 80006aa:	4b4c      	ldr	r3, [pc, #304]	@ (80007dc <MX_GPIO_Init+0x14c>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	4a4b      	ldr	r2, [pc, #300]	@ (80007dc <MX_GPIO_Init+0x14c>)
 80006b0:	f043 0304 	orr.w	r3, r3, #4
 80006b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b6:	4b49      	ldr	r3, [pc, #292]	@ (80007dc <MX_GPIO_Init+0x14c>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	f003 0304 	and.w	r3, r3, #4
 80006be:	61bb      	str	r3, [r7, #24]
 80006c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
 80006c6:	4b45      	ldr	r3, [pc, #276]	@ (80007dc <MX_GPIO_Init+0x14c>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	4a44      	ldr	r2, [pc, #272]	@ (80007dc <MX_GPIO_Init+0x14c>)
 80006cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d2:	4b42      	ldr	r3, [pc, #264]	@ (80007dc <MX_GPIO_Init+0x14c>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006da:	617b      	str	r3, [r7, #20]
 80006dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	4b3e      	ldr	r3, [pc, #248]	@ (80007dc <MX_GPIO_Init+0x14c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	4a3d      	ldr	r2, [pc, #244]	@ (80007dc <MX_GPIO_Init+0x14c>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ee:	4b3b      	ldr	r3, [pc, #236]	@ (80007dc <MX_GPIO_Init+0x14c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	4b37      	ldr	r3, [pc, #220]	@ (80007dc <MX_GPIO_Init+0x14c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	4a36      	ldr	r2, [pc, #216]	@ (80007dc <MX_GPIO_Init+0x14c>)
 8000704:	f043 0302 	orr.w	r3, r3, #2
 8000708:	6313      	str	r3, [r2, #48]	@ 0x30
 800070a:	4b34      	ldr	r3, [pc, #208]	@ (80007dc <MX_GPIO_Init+0x14c>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	f003 0302 	and.w	r3, r3, #2
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	4b30      	ldr	r3, [pc, #192]	@ (80007dc <MX_GPIO_Init+0x14c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	4a2f      	ldr	r2, [pc, #188]	@ (80007dc <MX_GPIO_Init+0x14c>)
 8000720:	f043 0308 	orr.w	r3, r3, #8
 8000724:	6313      	str	r3, [r2, #48]	@ 0x30
 8000726:	4b2d      	ldr	r3, [pc, #180]	@ (80007dc <MX_GPIO_Init+0x14c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	f003 0308 	and.w	r3, r3, #8
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4b29      	ldr	r3, [pc, #164]	@ (80007dc <MX_GPIO_Init+0x14c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a28      	ldr	r2, [pc, #160]	@ (80007dc <MX_GPIO_Init+0x14c>)
 800073c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b26      	ldr	r3, [pc, #152]	@ (80007dc <MX_GPIO_Init+0x14c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000754:	4822      	ldr	r0, [pc, #136]	@ (80007e0 <MX_GPIO_Init+0x150>)
 8000756:	f000 fe5f 	bl	8001418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	2140      	movs	r1, #64	@ 0x40
 800075e:	4821      	ldr	r0, [pc, #132]	@ (80007e4 <MX_GPIO_Init+0x154>)
 8000760:	f000 fe5a 	bl	8001418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000764:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000768:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800076a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800076e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4619      	mov	r1, r3
 800077a:	481b      	ldr	r0, [pc, #108]	@ (80007e8 <MX_GPIO_Init+0x158>)
 800077c:	f000 fcb8 	bl	80010f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000780:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	4619      	mov	r1, r3
 8000798:	4811      	ldr	r0, [pc, #68]	@ (80007e0 <MX_GPIO_Init+0x150>)
 800079a:	f000 fca9 	bl	80010f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800079e:	2340      	movs	r3, #64	@ 0x40
 80007a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a2:	2301      	movs	r3, #1
 80007a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007aa:	2300      	movs	r3, #0
 80007ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	4619      	mov	r1, r3
 80007b4:	480b      	ldr	r0, [pc, #44]	@ (80007e4 <MX_GPIO_Init+0x154>)
 80007b6:	f000 fc9b 	bl	80010f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007ba:	2380      	movs	r3, #128	@ 0x80
 80007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007be:	2300      	movs	r3, #0
 80007c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	4619      	mov	r1, r3
 80007cc:	4805      	ldr	r0, [pc, #20]	@ (80007e4 <MX_GPIO_Init+0x154>)
 80007ce:	f000 fc8f 	bl	80010f0 <HAL_GPIO_Init>

}
 80007d2:	bf00      	nop
 80007d4:	3730      	adds	r7, #48	@ 0x30
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40020400 	.word	0x40020400
 80007e4:	40021800 	.word	0x40021800
 80007e8:	40020800 	.word	0x40020800

080007ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f0:	f000 fad6 	bl	8000da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f4:	f000 f816 	bl	8000824 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f8:	f7ff ff4a 	bl	8000690 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007fc:	f000 f996 	bl	8000b2c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000800:	f000 fa06 	bl	8000c10 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000804:	f000 f8f0 	bl	80009e8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000808:	213c      	movs	r1, #60	@ 0x3c
 800080a:	4805      	ldr	r0, [pc, #20]	@ (8000820 <main+0x34>)
 800080c:	f002 f910 	bl	8002a30 <HAL_TIM_Encoder_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000810:	f003 fa12 	bl	8003c38 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000814:	f7ff ff08 	bl	8000628 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000818:	f003 fa32 	bl	8003c80 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <main+0x30>
 8000820:	2000004c 	.word	0x2000004c

08000824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b094      	sub	sp, #80	@ 0x50
 8000828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	2234      	movs	r2, #52	@ 0x34
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f005 ff80 	bl	8006738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000838:	f107 0308 	add.w	r3, r7, #8
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000848:	2300      	movs	r3, #0
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	4b29      	ldr	r3, [pc, #164]	@ (80008f4 <SystemClock_Config+0xd0>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000850:	4a28      	ldr	r2, [pc, #160]	@ (80008f4 <SystemClock_Config+0xd0>)
 8000852:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000856:	6413      	str	r3, [r2, #64]	@ 0x40
 8000858:	4b26      	ldr	r3, [pc, #152]	@ (80008f4 <SystemClock_Config+0xd0>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000864:	2300      	movs	r3, #0
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	4b23      	ldr	r3, [pc, #140]	@ (80008f8 <SystemClock_Config+0xd4>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a22      	ldr	r2, [pc, #136]	@ (80008f8 <SystemClock_Config+0xd4>)
 800086e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000872:	6013      	str	r3, [r2, #0]
 8000874:	4b20      	ldr	r3, [pc, #128]	@ (80008f8 <SystemClock_Config+0xd4>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800087c:	603b      	str	r3, [r7, #0]
 800087e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000880:	2301      	movs	r3, #1
 8000882:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000884:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000888:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088a:	2302      	movs	r3, #2
 800088c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800088e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000892:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000894:	2304      	movs	r3, #4
 8000896:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000898:	23a8      	movs	r3, #168	@ 0xa8
 800089a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800089c:	2302      	movs	r3, #2
 800089e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008a0:	2307      	movs	r3, #7
 80008a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008a4:	2302      	movs	r3, #2
 80008a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4618      	mov	r0, r3
 80008ae:	f001 fd7b 	bl	80023a8 <HAL_RCC_OscConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008b8:	f000 f820 	bl	80008fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008bc:	230f      	movs	r3, #15
 80008be:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c0:	2302      	movs	r3, #2
 80008c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008c8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008d2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008d4:	f107 0308 	add.w	r3, r7, #8
 80008d8:	2105      	movs	r1, #5
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 fef0 	bl	80016c0 <HAL_RCC_ClockConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008e6:	f000 f809 	bl	80008fc <Error_Handler>
  }
}
 80008ea:	bf00      	nop
 80008ec:	3750      	adds	r7, #80	@ 0x50
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40007000 	.word	0x40007000

080008fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000900:	b672      	cpsid	i
}
 8000902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <Error_Handler+0x8>

08000908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	4b12      	ldr	r3, [pc, #72]	@ (800095c <HAL_MspInit+0x54>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000916:	4a11      	ldr	r2, [pc, #68]	@ (800095c <HAL_MspInit+0x54>)
 8000918:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800091c:	6453      	str	r3, [r2, #68]	@ 0x44
 800091e:	4b0f      	ldr	r3, [pc, #60]	@ (800095c <HAL_MspInit+0x54>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000922:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	4b0b      	ldr	r3, [pc, #44]	@ (800095c <HAL_MspInit+0x54>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000932:	4a0a      	ldr	r2, [pc, #40]	@ (800095c <HAL_MspInit+0x54>)
 8000934:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000938:	6413      	str	r3, [r2, #64]	@ 0x40
 800093a:	4b08      	ldr	r3, [pc, #32]	@ (800095c <HAL_MspInit+0x54>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	210f      	movs	r1, #15
 800094a:	f06f 0001 	mvn.w	r0, #1
 800094e:	f000 fb98 	bl	8001082 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800

08000960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <NMI_Handler+0x4>

08000968 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <HardFault_Handler+0x4>

08000970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <MemManage_Handler+0x4>

08000978 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <BusFault_Handler+0x4>

08000980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <UsageFault_Handler+0x4>

08000988 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800099a:	f000 fa53 	bl	8000e44 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800099e:	f004 fe4f 	bl	8005640 <xTaskGetSchedulerState>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d001      	beq.n	80009ac <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80009a8:	f005 fc46 	bl	8006238 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009b4:	4802      	ldr	r0, [pc, #8]	@ (80009c0 <TIM2_IRQHandler+0x10>)
 80009b6:	f002 f8c9 	bl	8002b4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	2000004c 	.word	0x2000004c

080009c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c8:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <SystemInit+0x20>)
 80009ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009ce:	4a05      	ldr	r2, [pc, #20]	@ (80009e4 <SystemInit+0x20>)
 80009d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08c      	sub	sp, #48	@ 0x30
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009ee:	f107 030c 	add.w	r3, r7, #12
 80009f2:	2224      	movs	r2, #36	@ 0x24
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f005 fe9e 	bl	8006738 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a04:	4b21      	ldr	r3, [pc, #132]	@ (8000a8c <MX_TIM2_Init+0xa4>)
 8000a06:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a8c <MX_TIM2_Init+0xa4>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a12:	4b1e      	ldr	r3, [pc, #120]	@ (8000a8c <MX_TIM2_Init+0xa4>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a18:	4b1c      	ldr	r3, [pc, #112]	@ (8000a8c <MX_TIM2_Init+0xa4>)
 8000a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a20:	4b1a      	ldr	r3, [pc, #104]	@ (8000a8c <MX_TIM2_Init+0xa4>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a26:	4b19      	ldr	r3, [pc, #100]	@ (8000a8c <MX_TIM2_Init+0xa4>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000a30:	2302      	movs	r3, #2
 8000a32:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a34:	2301      	movs	r3, #1
 8000a36:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000a40:	2302      	movs	r3, #2
 8000a42:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a44:	2301      	movs	r3, #1
 8000a46:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000a50:	f107 030c 	add.w	r3, r7, #12
 8000a54:	4619      	mov	r1, r3
 8000a56:	480d      	ldr	r0, [pc, #52]	@ (8000a8c <MX_TIM2_Init+0xa4>)
 8000a58:	f001 ff44 	bl	80028e4 <HAL_TIM_Encoder_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000a62:	f7ff ff4b 	bl	80008fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	4619      	mov	r1, r3
 8000a72:	4806      	ldr	r0, [pc, #24]	@ (8000a8c <MX_TIM2_Init+0xa4>)
 8000a74:	f002 fa58 	bl	8002f28 <HAL_TIMEx_MasterConfigSynchronization>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000a7e:	f7ff ff3d 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	3730      	adds	r7, #48	@ 0x30
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	2000004c 	.word	0x2000004c

08000a90 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	@ 0x28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ab0:	d133      	bne.n	8000b1a <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b24 <HAL_TIM_Encoder_MspInit+0x94>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aba:	4a1a      	ldr	r2, [pc, #104]	@ (8000b24 <HAL_TIM_Encoder_MspInit+0x94>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ac2:	4b18      	ldr	r3, [pc, #96]	@ (8000b24 <HAL_TIM_Encoder_MspInit+0x94>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	4b14      	ldr	r3, [pc, #80]	@ (8000b24 <HAL_TIM_Encoder_MspInit+0x94>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a13      	ldr	r2, [pc, #76]	@ (8000b24 <HAL_TIM_Encoder_MspInit+0x94>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b11      	ldr	r3, [pc, #68]	@ (8000b24 <HAL_TIM_Encoder_MspInit+0x94>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000aea:	2303      	movs	r3, #3
 8000aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000afa:	2301      	movs	r3, #1
 8000afc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	4808      	ldr	r0, [pc, #32]	@ (8000b28 <HAL_TIM_Encoder_MspInit+0x98>)
 8000b06:	f000 faf3 	bl	80010f0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2105      	movs	r1, #5
 8000b0e:	201c      	movs	r0, #28
 8000b10:	f000 fab7 	bl	8001082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b14:	201c      	movs	r0, #28
 8000b16:	f000 fad0 	bl	80010ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000b1a:	bf00      	nop
 8000b1c:	3728      	adds	r7, #40	@ 0x28
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40020000 	.word	0x40020000

08000b2c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b30:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <MX_USART3_UART_Init+0x4c>)
 8000b32:	4a12      	ldr	r2, [pc, #72]	@ (8000b7c <MX_USART3_UART_Init+0x50>)
 8000b34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b36:	4b10      	ldr	r3, [pc, #64]	@ (8000b78 <MX_USART3_UART_Init+0x4c>)
 8000b38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <MX_USART3_UART_Init+0x4c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	@ (8000b78 <MX_USART3_UART_Init+0x4c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b78 <MX_USART3_UART_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b50:	4b09      	ldr	r3, [pc, #36]	@ (8000b78 <MX_USART3_UART_Init+0x4c>)
 8000b52:	220c      	movs	r2, #12
 8000b54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b56:	4b08      	ldr	r3, [pc, #32]	@ (8000b78 <MX_USART3_UART_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <MX_USART3_UART_Init+0x4c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b62:	4805      	ldr	r0, [pc, #20]	@ (8000b78 <MX_USART3_UART_Init+0x4c>)
 8000b64:	f002 fa70 	bl	8003048 <HAL_UART_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b6e:	f7ff fec5 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000094 	.word	0x20000094
 8000b7c:	40004800 	.word	0x40004800

08000b80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	@ 0x28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a19      	ldr	r2, [pc, #100]	@ (8000c04 <HAL_UART_MspInit+0x84>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d12c      	bne.n	8000bfc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	4b18      	ldr	r3, [pc, #96]	@ (8000c08 <HAL_UART_MspInit+0x88>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000baa:	4a17      	ldr	r2, [pc, #92]	@ (8000c08 <HAL_UART_MspInit+0x88>)
 8000bac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bb2:	4b15      	ldr	r3, [pc, #84]	@ (8000c08 <HAL_UART_MspInit+0x88>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	4b11      	ldr	r3, [pc, #68]	@ (8000c08 <HAL_UART_MspInit+0x88>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	4a10      	ldr	r2, [pc, #64]	@ (8000c08 <HAL_UART_MspInit+0x88>)
 8000bc8:	f043 0308 	orr.w	r3, r3, #8
 8000bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bce:	4b0e      	ldr	r3, [pc, #56]	@ (8000c08 <HAL_UART_MspInit+0x88>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	f003 0308 	and.w	r3, r3, #8
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bda:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be0:	2302      	movs	r3, #2
 8000be2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be8:	2303      	movs	r3, #3
 8000bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bec:	2307      	movs	r3, #7
 8000bee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4805      	ldr	r0, [pc, #20]	@ (8000c0c <HAL_UART_MspInit+0x8c>)
 8000bf8:	f000 fa7a 	bl	80010f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000bfc:	bf00      	nop
 8000bfe:	3728      	adds	r7, #40	@ 0x28
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40004800 	.word	0x40004800
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40020c00 	.word	0x40020c00

08000c10 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c14:	4b14      	ldr	r3, [pc, #80]	@ (8000c68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c16:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000c1a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c1c:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c1e:	2206      	movs	r2, #6
 8000c20:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c22:	4b11      	ldr	r3, [pc, #68]	@ (8000c68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c24:	2202      	movs	r2, #2
 8000c26:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	@ (8000c68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c30:	2202      	movs	r2, #2
 8000c32:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c34:	4b0c      	ldr	r3, [pc, #48]	@ (8000c68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c40:	4b09      	ldr	r3, [pc, #36]	@ (8000c68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c46:	4b08      	ldr	r3, [pc, #32]	@ (8000c68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c52:	4805      	ldr	r0, [pc, #20]	@ (8000c68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c54:	f000 fbf9 	bl	800144a <HAL_PCD_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c5e:	f7ff fe4d 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200000dc 	.word	0x200000dc

08000c6c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b0a0      	sub	sp, #128	@ 0x80
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c84:	f107 0310 	add.w	r3, r7, #16
 8000c88:	225c      	movs	r2, #92	@ 0x5c
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f005 fd53 	bl	8006738 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000c9a:	d14e      	bne.n	8000d3a <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000c9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ca0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ca6:	f107 0310 	add.w	r3, r7, #16
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 fe22 	bl	80018f4 <HAL_RCCEx_PeriphCLKConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000cb6:	f7ff fe21 	bl	80008fc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	4b21      	ldr	r3, [pc, #132]	@ (8000d44 <HAL_PCD_MspInit+0xd8>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	4a20      	ldr	r2, [pc, #128]	@ (8000d44 <HAL_PCD_MspInit+0xd8>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cca:	4b1e      	ldr	r3, [pc, #120]	@ (8000d44 <HAL_PCD_MspInit+0xd8>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000cd6:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000cda:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ce8:	230a      	movs	r3, #10
 8000cea:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cec:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4815      	ldr	r0, [pc, #84]	@ (8000d48 <HAL_PCD_MspInit+0xdc>)
 8000cf4:	f000 f9fc 	bl	80010f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000cf8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cfc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d06:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	480e      	ldr	r0, [pc, #56]	@ (8000d48 <HAL_PCD_MspInit+0xdc>)
 8000d0e:	f000 f9ef 	bl	80010f0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d12:	4b0c      	ldr	r3, [pc, #48]	@ (8000d44 <HAL_PCD_MspInit+0xd8>)
 8000d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d16:	4a0b      	ldr	r2, [pc, #44]	@ (8000d44 <HAL_PCD_MspInit+0xd8>)
 8000d18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d1c:	6353      	str	r3, [r2, #52]	@ 0x34
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <HAL_PCD_MspInit+0xd8>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d26:	4a07      	ldr	r2, [pc, #28]	@ (8000d44 <HAL_PCD_MspInit+0xd8>)
 8000d28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d2e:	4b05      	ldr	r3, [pc, #20]	@ (8000d44 <HAL_PCD_MspInit+0xd8>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000d3a:	bf00      	nop
 8000d3c:	3780      	adds	r7, #128	@ 0x80
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020000 	.word	0x40020000

08000d4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d84 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d50:	f7ff fe38 	bl	80009c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d54:	480c      	ldr	r0, [pc, #48]	@ (8000d88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d56:	490d      	ldr	r1, [pc, #52]	@ (8000d8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d58:	4a0d      	ldr	r2, [pc, #52]	@ (8000d90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d5c:	e002      	b.n	8000d64 <LoopCopyDataInit>

08000d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d62:	3304      	adds	r3, #4

08000d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d68:	d3f9      	bcc.n	8000d5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d70:	e001      	b.n	8000d76 <LoopFillZerobss>

08000d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d74:	3204      	adds	r2, #4

08000d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d78:	d3fb      	bcc.n	8000d72 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d7a:	f005 fce5 	bl	8006748 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d7e:	f7ff fd35 	bl	80007ec <main>
  bx  lr    
 8000d82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d8c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000d90:	08006864 	.word	0x08006864
  ldr r2, =_sbss
 8000d94:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000d98:	20004f14 	.word	0x20004f14

08000d9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d9c:	e7fe      	b.n	8000d9c <ADC_IRQHandler>
	...

08000da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000da4:	4b0e      	ldr	r3, [pc, #56]	@ (8000de0 <HAL_Init+0x40>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a0d      	ldr	r2, [pc, #52]	@ (8000de0 <HAL_Init+0x40>)
 8000daa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000db0:	4b0b      	ldr	r3, [pc, #44]	@ (8000de0 <HAL_Init+0x40>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0a      	ldr	r2, [pc, #40]	@ (8000de0 <HAL_Init+0x40>)
 8000db6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dbc:	4b08      	ldr	r3, [pc, #32]	@ (8000de0 <HAL_Init+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a07      	ldr	r2, [pc, #28]	@ (8000de0 <HAL_Init+0x40>)
 8000dc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc8:	2003      	movs	r0, #3
 8000dca:	f000 f94f 	bl	800106c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dce:	200f      	movs	r0, #15
 8000dd0:	f000 f808 	bl	8000de4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dd4:	f7ff fd98 	bl	8000908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40023c00 	.word	0x40023c00

08000de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dec:	4b12      	ldr	r3, [pc, #72]	@ (8000e38 <HAL_InitTick+0x54>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4b12      	ldr	r3, [pc, #72]	@ (8000e3c <HAL_InitTick+0x58>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	4619      	mov	r1, r3
 8000df6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 f967 	bl	80010d6 <HAL_SYSTICK_Config>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e00e      	b.n	8000e30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2b0f      	cmp	r3, #15
 8000e16:	d80a      	bhi.n	8000e2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	6879      	ldr	r1, [r7, #4]
 8000e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e20:	f000 f92f 	bl	8001082 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e24:	4a06      	ldr	r2, [pc, #24]	@ (8000e40 <HAL_InitTick+0x5c>)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	e000      	b.n	8000e30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000008 	.word	0x20000008
 8000e3c:	20000010 	.word	0x20000010
 8000e40:	2000000c 	.word	0x2000000c

08000e44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e48:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <HAL_IncTick+0x20>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	4b06      	ldr	r3, [pc, #24]	@ (8000e68 <HAL_IncTick+0x24>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4413      	add	r3, r2
 8000e54:	4a04      	ldr	r2, [pc, #16]	@ (8000e68 <HAL_IncTick+0x24>)
 8000e56:	6013      	str	r3, [r2, #0]
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	20000010 	.word	0x20000010
 8000e68:	200005c0 	.word	0x200005c0

08000e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e70:	4b03      	ldr	r3, [pc, #12]	@ (8000e80 <HAL_GetTick+0x14>)
 8000e72:	681b      	ldr	r3, [r3, #0]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	200005c0 	.word	0x200005c0

08000e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e8c:	f7ff ffee 	bl	8000e6c <HAL_GetTick>
 8000e90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e9c:	d005      	beq.n	8000eaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec8 <HAL_Delay+0x44>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eaa:	bf00      	nop
 8000eac:	f7ff ffde 	bl	8000e6c <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d8f7      	bhi.n	8000eac <HAL_Delay+0x28>
  {
  }
}
 8000ebc:	bf00      	nop
 8000ebe:	bf00      	nop
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000010 	.word	0x20000010

08000ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000edc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f10 <__NVIC_SetPriorityGrouping+0x44>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ee8:	4013      	ands	r3, r2
 8000eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ef8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efe:	4a04      	ldr	r2, [pc, #16]	@ (8000f10 <__NVIC_SetPriorityGrouping+0x44>)
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	60d3      	str	r3, [r2, #12]
}
 8000f04:	bf00      	nop
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f18:	4b04      	ldr	r3, [pc, #16]	@ (8000f2c <__NVIC_GetPriorityGrouping+0x18>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	0a1b      	lsrs	r3, r3, #8
 8000f1e:	f003 0307 	and.w	r3, r3, #7
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	db0b      	blt.n	8000f5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	f003 021f 	and.w	r2, r3, #31
 8000f48:	4907      	ldr	r1, [pc, #28]	@ (8000f68 <__NVIC_EnableIRQ+0x38>)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	095b      	lsrs	r3, r3, #5
 8000f50:	2001      	movs	r0, #1
 8000f52:	fa00 f202 	lsl.w	r2, r0, r2
 8000f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000e100 	.word	0xe000e100

08000f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	6039      	str	r1, [r7, #0]
 8000f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	db0a      	blt.n	8000f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	490c      	ldr	r1, [pc, #48]	@ (8000fb8 <__NVIC_SetPriority+0x4c>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	0112      	lsls	r2, r2, #4
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	440b      	add	r3, r1
 8000f90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f94:	e00a      	b.n	8000fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	4908      	ldr	r1, [pc, #32]	@ (8000fbc <__NVIC_SetPriority+0x50>)
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	f003 030f 	and.w	r3, r3, #15
 8000fa2:	3b04      	subs	r3, #4
 8000fa4:	0112      	lsls	r2, r2, #4
 8000fa6:	b2d2      	uxtb	r2, r2
 8000fa8:	440b      	add	r3, r1
 8000faa:	761a      	strb	r2, [r3, #24]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000e100 	.word	0xe000e100
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b089      	sub	sp, #36	@ 0x24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f1c3 0307 	rsb	r3, r3, #7
 8000fda:	2b04      	cmp	r3, #4
 8000fdc:	bf28      	it	cs
 8000fde:	2304      	movcs	r3, #4
 8000fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	2b06      	cmp	r3, #6
 8000fe8:	d902      	bls.n	8000ff0 <NVIC_EncodePriority+0x30>
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3b03      	subs	r3, #3
 8000fee:	e000      	b.n	8000ff2 <NVIC_EncodePriority+0x32>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43da      	mvns	r2, r3
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	401a      	ands	r2, r3
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001008:	f04f 31ff 	mov.w	r1, #4294967295
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	fa01 f303 	lsl.w	r3, r1, r3
 8001012:	43d9      	mvns	r1, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	4313      	orrs	r3, r2
         );
}
 800101a:	4618      	mov	r0, r3
 800101c:	3724      	adds	r7, #36	@ 0x24
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
	...

08001028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3b01      	subs	r3, #1
 8001034:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001038:	d301      	bcc.n	800103e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800103a:	2301      	movs	r3, #1
 800103c:	e00f      	b.n	800105e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103e:	4a0a      	ldr	r2, [pc, #40]	@ (8001068 <SysTick_Config+0x40>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001046:	210f      	movs	r1, #15
 8001048:	f04f 30ff 	mov.w	r0, #4294967295
 800104c:	f7ff ff8e 	bl	8000f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001050:	4b05      	ldr	r3, [pc, #20]	@ (8001068 <SysTick_Config+0x40>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001056:	4b04      	ldr	r3, [pc, #16]	@ (8001068 <SysTick_Config+0x40>)
 8001058:	2207      	movs	r2, #7
 800105a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	e000e010 	.word	0xe000e010

0800106c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ff29 	bl	8000ecc <__NVIC_SetPriorityGrouping>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001082:	b580      	push	{r7, lr}
 8001084:	b086      	sub	sp, #24
 8001086:	af00      	add	r7, sp, #0
 8001088:	4603      	mov	r3, r0
 800108a:	60b9      	str	r1, [r7, #8]
 800108c:	607a      	str	r2, [r7, #4]
 800108e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001094:	f7ff ff3e 	bl	8000f14 <__NVIC_GetPriorityGrouping>
 8001098:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	68b9      	ldr	r1, [r7, #8]
 800109e:	6978      	ldr	r0, [r7, #20]
 80010a0:	f7ff ff8e 	bl	8000fc0 <NVIC_EncodePriority>
 80010a4:	4602      	mov	r2, r0
 80010a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010aa:	4611      	mov	r1, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff5d 	bl	8000f6c <__NVIC_SetPriority>
}
 80010b2:	bf00      	nop
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff31 	bl	8000f30 <__NVIC_EnableIRQ>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ffa2 	bl	8001028 <SysTick_Config>
 80010e4:	4603      	mov	r3, r0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b089      	sub	sp, #36	@ 0x24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001102:	2300      	movs	r3, #0
 8001104:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
 800110a:	e165      	b.n	80013d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800110c:	2201      	movs	r2, #1
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	429a      	cmp	r2, r3
 8001126:	f040 8154 	bne.w	80013d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 0303 	and.w	r3, r3, #3
 8001132:	2b01      	cmp	r3, #1
 8001134:	d005      	beq.n	8001142 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800113e:	2b02      	cmp	r3, #2
 8001140:	d130      	bne.n	80011a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	2203      	movs	r2, #3
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	68da      	ldr	r2, [r3, #12]
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4313      	orrs	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001178:	2201      	movs	r2, #1
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	091b      	lsrs	r3, r3, #4
 800118e:	f003 0201 	and.w	r2, r3, #1
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 0303 	and.w	r3, r3, #3
 80011ac:	2b03      	cmp	r3, #3
 80011ae:	d017      	beq.n	80011e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	2203      	movs	r2, #3
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	689a      	ldr	r2, [r3, #8]
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0303 	and.w	r3, r3, #3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d123      	bne.n	8001234 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	08da      	lsrs	r2, r3, #3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3208      	adds	r2, #8
 80011f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	f003 0307 	and.w	r3, r3, #7
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	220f      	movs	r2, #15
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	691a      	ldr	r2, [r3, #16]
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	08da      	lsrs	r2, r3, #3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	3208      	adds	r2, #8
 800122e:	69b9      	ldr	r1, [r7, #24]
 8001230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	2203      	movs	r2, #3
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 0203 	and.w	r2, r3, #3
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001270:	2b00      	cmp	r3, #0
 8001272:	f000 80ae 	beq.w	80013d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	4b5d      	ldr	r3, [pc, #372]	@ (80013f0 <HAL_GPIO_Init+0x300>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127e:	4a5c      	ldr	r2, [pc, #368]	@ (80013f0 <HAL_GPIO_Init+0x300>)
 8001280:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001284:	6453      	str	r3, [r2, #68]	@ 0x44
 8001286:	4b5a      	ldr	r3, [pc, #360]	@ (80013f0 <HAL_GPIO_Init+0x300>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800128a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001292:	4a58      	ldr	r2, [pc, #352]	@ (80013f4 <HAL_GPIO_Init+0x304>)
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	089b      	lsrs	r3, r3, #2
 8001298:	3302      	adds	r3, #2
 800129a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	f003 0303 	and.w	r3, r3, #3
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	220f      	movs	r2, #15
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a4f      	ldr	r2, [pc, #316]	@ (80013f8 <HAL_GPIO_Init+0x308>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d025      	beq.n	800130a <HAL_GPIO_Init+0x21a>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a4e      	ldr	r2, [pc, #312]	@ (80013fc <HAL_GPIO_Init+0x30c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d01f      	beq.n	8001306 <HAL_GPIO_Init+0x216>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a4d      	ldr	r2, [pc, #308]	@ (8001400 <HAL_GPIO_Init+0x310>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d019      	beq.n	8001302 <HAL_GPIO_Init+0x212>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a4c      	ldr	r2, [pc, #304]	@ (8001404 <HAL_GPIO_Init+0x314>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d013      	beq.n	80012fe <HAL_GPIO_Init+0x20e>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a4b      	ldr	r2, [pc, #300]	@ (8001408 <HAL_GPIO_Init+0x318>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d00d      	beq.n	80012fa <HAL_GPIO_Init+0x20a>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4a      	ldr	r2, [pc, #296]	@ (800140c <HAL_GPIO_Init+0x31c>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d007      	beq.n	80012f6 <HAL_GPIO_Init+0x206>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a49      	ldr	r2, [pc, #292]	@ (8001410 <HAL_GPIO_Init+0x320>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d101      	bne.n	80012f2 <HAL_GPIO_Init+0x202>
 80012ee:	2306      	movs	r3, #6
 80012f0:	e00c      	b.n	800130c <HAL_GPIO_Init+0x21c>
 80012f2:	2307      	movs	r3, #7
 80012f4:	e00a      	b.n	800130c <HAL_GPIO_Init+0x21c>
 80012f6:	2305      	movs	r3, #5
 80012f8:	e008      	b.n	800130c <HAL_GPIO_Init+0x21c>
 80012fa:	2304      	movs	r3, #4
 80012fc:	e006      	b.n	800130c <HAL_GPIO_Init+0x21c>
 80012fe:	2303      	movs	r3, #3
 8001300:	e004      	b.n	800130c <HAL_GPIO_Init+0x21c>
 8001302:	2302      	movs	r3, #2
 8001304:	e002      	b.n	800130c <HAL_GPIO_Init+0x21c>
 8001306:	2301      	movs	r3, #1
 8001308:	e000      	b.n	800130c <HAL_GPIO_Init+0x21c>
 800130a:	2300      	movs	r3, #0
 800130c:	69fa      	ldr	r2, [r7, #28]
 800130e:	f002 0203 	and.w	r2, r2, #3
 8001312:	0092      	lsls	r2, r2, #2
 8001314:	4093      	lsls	r3, r2
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800131c:	4935      	ldr	r1, [pc, #212]	@ (80013f4 <HAL_GPIO_Init+0x304>)
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	089b      	lsrs	r3, r3, #2
 8001322:	3302      	adds	r3, #2
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800132a:	4b3a      	ldr	r3, [pc, #232]	@ (8001414 <HAL_GPIO_Init+0x324>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	43db      	mvns	r3, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4013      	ands	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800134e:	4a31      	ldr	r2, [pc, #196]	@ (8001414 <HAL_GPIO_Init+0x324>)
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001354:	4b2f      	ldr	r3, [pc, #188]	@ (8001414 <HAL_GPIO_Init+0x324>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001378:	4a26      	ldr	r2, [pc, #152]	@ (8001414 <HAL_GPIO_Init+0x324>)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800137e:	4b25      	ldr	r3, [pc, #148]	@ (8001414 <HAL_GPIO_Init+0x324>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	43db      	mvns	r3, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001414 <HAL_GPIO_Init+0x324>)
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001414 <HAL_GPIO_Init+0x324>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013cc:	4a11      	ldr	r2, [pc, #68]	@ (8001414 <HAL_GPIO_Init+0x324>)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3301      	adds	r3, #1
 80013d6:	61fb      	str	r3, [r7, #28]
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	2b0f      	cmp	r3, #15
 80013dc:	f67f ae96 	bls.w	800110c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	3724      	adds	r7, #36	@ 0x24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40013800 	.word	0x40013800
 80013f8:	40020000 	.word	0x40020000
 80013fc:	40020400 	.word	0x40020400
 8001400:	40020800 	.word	0x40020800
 8001404:	40020c00 	.word	0x40020c00
 8001408:	40021000 	.word	0x40021000
 800140c:	40021400 	.word	0x40021400
 8001410:	40021800 	.word	0x40021800
 8001414:	40013c00 	.word	0x40013c00

08001418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	807b      	strh	r3, [r7, #2]
 8001424:	4613      	mov	r3, r2
 8001426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001428:	787b      	ldrb	r3, [r7, #1]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800142e:	887a      	ldrh	r2, [r7, #2]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001434:	e003      	b.n	800143e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001436:	887b      	ldrh	r3, [r7, #2]
 8001438:	041a      	lsls	r2, r3, #16
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	619a      	str	r2, [r3, #24]
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af02      	add	r7, sp, #8
 8001450:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e108      	b.n	800166e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d106      	bne.n	800147c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff fbf8 	bl	8000c6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2203      	movs	r2, #3
 8001480:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800148a:	d102      	bne.n	8001492 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f002 f8fe 	bl	8003698 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6818      	ldr	r0, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	7c1a      	ldrb	r2, [r3, #16]
 80014a4:	f88d 2000 	strb.w	r2, [sp]
 80014a8:	3304      	adds	r3, #4
 80014aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014ac:	f002 f890 	bl	80035d0 <USB_CoreInit>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d005      	beq.n	80014c2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2202      	movs	r2, #2
 80014ba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e0d5      	b.n	800166e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2100      	movs	r1, #0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f002 f8f6 	bl	80036ba <USB_SetCurrentMode>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d005      	beq.n	80014e0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2202      	movs	r2, #2
 80014d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e0c6      	b.n	800166e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014e0:	2300      	movs	r3, #0
 80014e2:	73fb      	strb	r3, [r7, #15]
 80014e4:	e04a      	b.n	800157c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014e6:	7bfa      	ldrb	r2, [r7, #15]
 80014e8:	6879      	ldr	r1, [r7, #4]
 80014ea:	4613      	mov	r3, r2
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	4413      	add	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	440b      	add	r3, r1
 80014f4:	3315      	adds	r3, #21
 80014f6:	2201      	movs	r2, #1
 80014f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014fa:	7bfa      	ldrb	r2, [r7, #15]
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	4613      	mov	r3, r2
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	4413      	add	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	440b      	add	r3, r1
 8001508:	3314      	adds	r3, #20
 800150a:	7bfa      	ldrb	r2, [r7, #15]
 800150c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800150e:	7bfa      	ldrb	r2, [r7, #15]
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	b298      	uxth	r0, r3
 8001514:	6879      	ldr	r1, [r7, #4]
 8001516:	4613      	mov	r3, r2
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	4413      	add	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	440b      	add	r3, r1
 8001520:	332e      	adds	r3, #46	@ 0x2e
 8001522:	4602      	mov	r2, r0
 8001524:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001526:	7bfa      	ldrb	r2, [r7, #15]
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	4613      	mov	r3, r2
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	4413      	add	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	440b      	add	r3, r1
 8001534:	3318      	adds	r3, #24
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800153a:	7bfa      	ldrb	r2, [r7, #15]
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	4613      	mov	r3, r2
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	4413      	add	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	440b      	add	r3, r1
 8001548:	331c      	adds	r3, #28
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800154e:	7bfa      	ldrb	r2, [r7, #15]
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	4613      	mov	r3, r2
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	4413      	add	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	440b      	add	r3, r1
 800155c:	3320      	adds	r3, #32
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001562:	7bfa      	ldrb	r2, [r7, #15]
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	4613      	mov	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	4413      	add	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	440b      	add	r3, r1
 8001570:	3324      	adds	r3, #36	@ 0x24
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	3301      	adds	r3, #1
 800157a:	73fb      	strb	r3, [r7, #15]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	791b      	ldrb	r3, [r3, #4]
 8001580:	7bfa      	ldrb	r2, [r7, #15]
 8001582:	429a      	cmp	r2, r3
 8001584:	d3af      	bcc.n	80014e6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001586:	2300      	movs	r3, #0
 8001588:	73fb      	strb	r3, [r7, #15]
 800158a:	e044      	b.n	8001616 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800158c:	7bfa      	ldrb	r2, [r7, #15]
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	4613      	mov	r3, r2
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	4413      	add	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015a2:	7bfa      	ldrb	r2, [r7, #15]
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	4613      	mov	r3, r2
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	4413      	add	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	440b      	add	r3, r1
 80015b0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80015b4:	7bfa      	ldrb	r2, [r7, #15]
 80015b6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015b8:	7bfa      	ldrb	r2, [r7, #15]
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	4613      	mov	r3, r2
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	4413      	add	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	440b      	add	r3, r1
 80015c6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015ce:	7bfa      	ldrb	r2, [r7, #15]
 80015d0:	6879      	ldr	r1, [r7, #4]
 80015d2:	4613      	mov	r3, r2
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	4413      	add	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	440b      	add	r3, r1
 80015dc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015e4:	7bfa      	ldrb	r2, [r7, #15]
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	4613      	mov	r3, r2
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	4413      	add	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015fa:	7bfa      	ldrb	r2, [r7, #15]
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	4613      	mov	r3, r2
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	4413      	add	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	440b      	add	r3, r1
 8001608:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	3301      	adds	r3, #1
 8001614:	73fb      	strb	r3, [r7, #15]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	791b      	ldrb	r3, [r3, #4]
 800161a:	7bfa      	ldrb	r2, [r7, #15]
 800161c:	429a      	cmp	r2, r3
 800161e:	d3b5      	bcc.n	800158c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6818      	ldr	r0, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	7c1a      	ldrb	r2, [r3, #16]
 8001628:	f88d 2000 	strb.w	r2, [sp]
 800162c:	3304      	adds	r3, #4
 800162e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001630:	f002 f890 	bl	8003754 <USB_DevInit>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d005      	beq.n	8001646 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2202      	movs	r2, #2
 800163e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e013      	b.n	800166e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2201      	movs	r2, #1
 8001650:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	7b1b      	ldrb	r3, [r3, #12]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d102      	bne.n	8001662 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f000 f80a 	bl	8001676 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f002 fa4b 	bl	8003b02 <USB_DevDisconnect>

  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001676:	b480      	push	{r7}
 8001678:	b085      	sub	sp, #20
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016a8:	f043 0303 	orr.w	r3, r3, #3
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0cc      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016d4:	4b68      	ldr	r3, [pc, #416]	@ (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 030f 	and.w	r3, r3, #15
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d90c      	bls.n	80016fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e2:	4b65      	ldr	r3, [pc, #404]	@ (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	b2d2      	uxtb	r2, r2
 80016e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ea:	4b63      	ldr	r3, [pc, #396]	@ (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 030f 	and.w	r3, r3, #15
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0b8      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d020      	beq.n	800174a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001714:	4b59      	ldr	r3, [pc, #356]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	4a58      	ldr	r2, [pc, #352]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800171e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800172c:	4b53      	ldr	r3, [pc, #332]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	4a52      	ldr	r2, [pc, #328]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001736:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001738:	4b50      	ldr	r3, [pc, #320]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	494d      	ldr	r1, [pc, #308]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	4313      	orrs	r3, r2
 8001748:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b00      	cmp	r3, #0
 8001754:	d044      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d107      	bne.n	800176e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175e:	4b47      	ldr	r3, [pc, #284]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d119      	bne.n	800179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e07f      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d003      	beq.n	800177e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800177a:	2b03      	cmp	r3, #3
 800177c:	d107      	bne.n	800178e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800177e:	4b3f      	ldr	r3, [pc, #252]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d109      	bne.n	800179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e06f      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178e:	4b3b      	ldr	r3, [pc, #236]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e067      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800179e:	4b37      	ldr	r3, [pc, #220]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f023 0203 	bic.w	r2, r3, #3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	4934      	ldr	r1, [pc, #208]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017b0:	f7ff fb5c 	bl	8000e6c <HAL_GetTick>
 80017b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b6:	e00a      	b.n	80017ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b8:	f7ff fb58 	bl	8000e6c <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e04f      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ce:	4b2b      	ldr	r3, [pc, #172]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 020c 	and.w	r2, r3, #12
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	429a      	cmp	r2, r3
 80017de:	d1eb      	bne.n	80017b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017e0:	4b25      	ldr	r3, [pc, #148]	@ (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 030f 	and.w	r3, r3, #15
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d20c      	bcs.n	8001808 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ee:	4b22      	ldr	r3, [pc, #136]	@ (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f6:	4b20      	ldr	r3, [pc, #128]	@ (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 030f 	and.w	r3, r3, #15
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	d001      	beq.n	8001808 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e032      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	d008      	beq.n	8001826 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001814:	4b19      	ldr	r3, [pc, #100]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4916      	ldr	r1, [pc, #88]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	4313      	orrs	r3, r2
 8001824:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	2b00      	cmp	r3, #0
 8001830:	d009      	beq.n	8001846 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001832:	4b12      	ldr	r3, [pc, #72]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	490e      	ldr	r1, [pc, #56]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	4313      	orrs	r3, r2
 8001844:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001846:	f000 fb7f 	bl	8001f48 <HAL_RCC_GetSysClockFreq>
 800184a:	4602      	mov	r2, r0
 800184c:	4b0b      	ldr	r3, [pc, #44]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	091b      	lsrs	r3, r3, #4
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	490a      	ldr	r1, [pc, #40]	@ (8001880 <HAL_RCC_ClockConfig+0x1c0>)
 8001858:	5ccb      	ldrb	r3, [r1, r3]
 800185a:	fa22 f303 	lsr.w	r3, r2, r3
 800185e:	4a09      	ldr	r2, [pc, #36]	@ (8001884 <HAL_RCC_ClockConfig+0x1c4>)
 8001860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001862:	4b09      	ldr	r3, [pc, #36]	@ (8001888 <HAL_RCC_ClockConfig+0x1c8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fabc 	bl	8000de4 <HAL_InitTick>

  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023c00 	.word	0x40023c00
 800187c:	40023800 	.word	0x40023800
 8001880:	0800683c 	.word	0x0800683c
 8001884:	20000008 	.word	0x20000008
 8001888:	2000000c 	.word	0x2000000c

0800188c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001890:	4b03      	ldr	r3, [pc, #12]	@ (80018a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001892:	681b      	ldr	r3, [r3, #0]
}
 8001894:	4618      	mov	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	20000008 	.word	0x20000008

080018a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018a8:	f7ff fff0 	bl	800188c <HAL_RCC_GetHCLKFreq>
 80018ac:	4602      	mov	r2, r0
 80018ae:	4b05      	ldr	r3, [pc, #20]	@ (80018c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	0a9b      	lsrs	r3, r3, #10
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	4903      	ldr	r1, [pc, #12]	@ (80018c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018ba:	5ccb      	ldrb	r3, [r1, r3]
 80018bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40023800 	.word	0x40023800
 80018c8:	0800684c 	.word	0x0800684c

080018cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018d0:	f7ff ffdc 	bl	800188c <HAL_RCC_GetHCLKFreq>
 80018d4:	4602      	mov	r2, r0
 80018d6:	4b05      	ldr	r3, [pc, #20]	@ (80018ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	0b5b      	lsrs	r3, r3, #13
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	4903      	ldr	r1, [pc, #12]	@ (80018f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018e2:	5ccb      	ldrb	r3, [r1, r3]
 80018e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40023800 	.word	0x40023800
 80018f0:	0800684c 	.word	0x0800684c

080018f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08c      	sub	sp, #48	@ 0x30
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 800191c:	2300      	movs	r3, #0
 800191e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b00      	cmp	r3, #0
 800192a:	d010      	beq.n	800194e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800192c:	4b6f      	ldr	r3, [pc, #444]	@ (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800192e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001932:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800193a:	496c      	ldr	r1, [pc, #432]	@ (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800193c:	4313      	orrs	r3, r2
 800193e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800194a:	2301      	movs	r3, #1
 800194c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d010      	beq.n	800197c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800195a:	4b64      	ldr	r3, [pc, #400]	@ (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800195c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001960:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001968:	4960      	ldr	r1, [pc, #384]	@ (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800196a:	4313      	orrs	r3, r2
 800196c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001974:	2b00      	cmp	r3, #0
 8001976:	d101      	bne.n	800197c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001978:	2301      	movs	r3, #1
 800197a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b00      	cmp	r3, #0
 8001986:	d017      	beq.n	80019b8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001988:	4b58      	ldr	r3, [pc, #352]	@ (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800198a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800198e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	4955      	ldr	r1, [pc, #340]	@ (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001998:	4313      	orrs	r3, r2
 800199a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80019a6:	d101      	bne.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80019a8:	2301      	movs	r3, #1
 80019aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80019b4:	2301      	movs	r3, #1
 80019b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0308 	and.w	r3, r3, #8
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d017      	beq.n	80019f4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80019c4:	4b49      	ldr	r3, [pc, #292]	@ (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019ca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019d2:	4946      	ldr	r1, [pc, #280]	@ (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019e2:	d101      	bne.n	80019e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80019e4:	2301      	movs	r3, #1
 80019e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d101      	bne.n	80019f4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80019f0:	2301      	movs	r3, #1
 80019f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0320 	and.w	r3, r3, #32
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	f000 808a 	beq.w	8001b16 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	4b39      	ldr	r3, [pc, #228]	@ (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0a:	4a38      	ldr	r2, [pc, #224]	@ (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a12:	4b36      	ldr	r3, [pc, #216]	@ (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001a1e:	4b34      	ldr	r3, [pc, #208]	@ (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a33      	ldr	r2, [pc, #204]	@ (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001a24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a28:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a2a:	f7ff fa1f 	bl	8000e6c <HAL_GetTick>
 8001a2e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001a30:	e008      	b.n	8001a44 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a32:	f7ff fa1b 	bl	8000e6c <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e278      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001a44:	4b2a      	ldr	r3, [pc, #168]	@ (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0f0      	beq.n	8001a32 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a50:	4b26      	ldr	r3, [pc, #152]	@ (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a58:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a5a:	6a3b      	ldr	r3, [r7, #32]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d02f      	beq.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a68:	6a3a      	ldr	r2, [r7, #32]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d028      	beq.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a76:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a78:	4b1e      	ldr	r3, [pc, #120]	@ (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001a84:	4a19      	ldr	r2, [pc, #100]	@ (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a86:	6a3b      	ldr	r3, [r7, #32]
 8001a88:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001a8a:	4b18      	ldr	r3, [pc, #96]	@ (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d114      	bne.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001a96:	f7ff f9e9 	bl	8000e6c <HAL_GetTick>
 8001a9a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a9c:	e00a      	b.n	8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a9e:	f7ff f9e5 	bl	8000e6c <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e240      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ab6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0ee      	beq.n	8001a9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ac8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001acc:	d114      	bne.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001ace:	4b07      	ldr	r3, [pc, #28]	@ (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ada:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001ade:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ae2:	4902      	ldr	r1, [pc, #8]	@ (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	608b      	str	r3, [r1, #8]
 8001ae8:	e00c      	b.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40007000 	.word	0x40007000
 8001af4:	42470e40 	.word	0x42470e40
 8001af8:	4b4a      	ldr	r3, [pc, #296]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	4a49      	ldr	r2, [pc, #292]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001afe:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001b02:	6093      	str	r3, [r2, #8]
 8001b04:	4b47      	ldr	r3, [pc, #284]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b06:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b10:	4944      	ldr	r1, [pc, #272]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0310 	and.w	r3, r3, #16
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d004      	beq.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8001b28:	4b3f      	ldr	r3, [pc, #252]	@ (8001c28 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001b2a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00a      	beq.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001b38:	4b3a      	ldr	r3, [pc, #232]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b3e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b46:	4937      	ldr	r1, [pc, #220]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00a      	beq.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001b5a:	4b32      	ldr	r3, [pc, #200]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b60:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b68:	492e      	ldr	r1, [pc, #184]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d011      	beq.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001b7c:	4b29      	ldr	r3, [pc, #164]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b82:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b8a:	4926      	ldr	r1, [pc, #152]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001b9a:	d101      	bne.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d00a      	beq.n	8001bc2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001bac:	4b1d      	ldr	r3, [pc, #116]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bb2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bba:	491a      	ldr	r1, [pc, #104]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d011      	beq.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001bce:	4b15      	ldr	r3, [pc, #84]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bd4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bdc:	4911      	ldr	r1, [pc, #68]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001be8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001bec:	d101      	bne.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d005      	beq.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001c00:	f040 80ff 	bne.w	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001c04:	4b09      	ldr	r3, [pc, #36]	@ (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c0a:	f7ff f92f 	bl	8000e6c <HAL_GetTick>
 8001c0e:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c10:	e00e      	b.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001c12:	f7ff f92b 	bl	8000e6c <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d907      	bls.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e188      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001c24:	40023800 	.word	0x40023800
 8001c28:	424711e0 	.word	0x424711e0
 8001c2c:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c30:	4b7e      	ldr	r3, [pc, #504]	@ (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1ea      	bne.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d009      	beq.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d028      	beq.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d124      	bne.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001c64:	4b71      	ldr	r3, [pc, #452]	@ (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c6a:	0c1b      	lsrs	r3, r3, #16
 8001c6c:	f003 0303 	and.w	r3, r3, #3
 8001c70:	3301      	adds	r3, #1
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001c76:	4b6d      	ldr	r3, [pc, #436]	@ (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c7c:	0e1b      	lsrs	r3, r3, #24
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	019b      	lsls	r3, r3, #6
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	085b      	lsrs	r3, r3, #1
 8001c94:	3b01      	subs	r3, #1
 8001c96:	041b      	lsls	r3, r3, #16
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	061b      	lsls	r3, r3, #24
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	071b      	lsls	r3, r3, #28
 8001ca6:	4961      	ldr	r1, [pc, #388]	@ (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0304 	and.w	r3, r3, #4
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d004      	beq.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001cc2:	d00a      	beq.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d035      	beq.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001cd8:	d130      	bne.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001cda:	4b54      	ldr	r3, [pc, #336]	@ (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ce0:	0c1b      	lsrs	r3, r3, #16
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001cec:	4b4f      	ldr	r3, [pc, #316]	@ (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001cf2:	0f1b      	lsrs	r3, r3, #28
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	019b      	lsls	r3, r3, #6
 8001d04:	431a      	orrs	r2, r3
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	085b      	lsrs	r3, r3, #1
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	041b      	lsls	r3, r3, #16
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	061b      	lsls	r3, r3, #24
 8001d16:	431a      	orrs	r2, r3
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	071b      	lsls	r3, r3, #28
 8001d1c:	4943      	ldr	r1, [pc, #268]	@ (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001d24:	4b41      	ldr	r3, [pc, #260]	@ (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d2a:	f023 021f 	bic.w	r2, r3, #31
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d32:	3b01      	subs	r3, #1
 8001d34:	493d      	ldr	r1, [pc, #244]	@ (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d029      	beq.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d50:	d124      	bne.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001d52:	4b36      	ldr	r3, [pc, #216]	@ (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d58:	0c1b      	lsrs	r3, r3, #16
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	3301      	adds	r3, #1
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001d64:	4b31      	ldr	r3, [pc, #196]	@ (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d6a:	0f1b      	lsrs	r3, r3, #28
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	019b      	lsls	r3, r3, #6
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	085b      	lsrs	r3, r3, #1
 8001d84:	3b01      	subs	r3, #1
 8001d86:	041b      	lsls	r3, r3, #16
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	061b      	lsls	r3, r3, #24
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	071b      	lsls	r3, r3, #28
 8001d94:	4925      	ldr	r1, [pc, #148]	@ (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d016      	beq.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	019b      	lsls	r3, r3, #6
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	085b      	lsrs	r3, r3, #1
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	041b      	lsls	r3, r3, #16
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	061b      	lsls	r3, r3, #24
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	071b      	lsls	r3, r3, #28
 8001dce:	4917      	ldr	r1, [pc, #92]	@ (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001dd6:	4b16      	ldr	r3, [pc, #88]	@ (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ddc:	f7ff f846 	bl	8000e6c <HAL_GetTick>
 8001de0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001de2:	e008      	b.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001de4:	f7ff f842 	bl	8000e6c <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e09f      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001df6:	4b0d      	ldr	r3, [pc, #52]	@ (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0f0      	beq.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8001e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	f040 8095 	bne.w	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e10:	f7ff f82c 	bl	8000e6c <HAL_GetTick>
 8001e14:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001e16:	e00f      	b.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001e18:	f7ff f828 	bl	8000e6c <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d908      	bls.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e085      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001e2a:	bf00      	nop
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	42470068 	.word	0x42470068
 8001e34:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001e38:	4b41      	ldr	r3, [pc, #260]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e44:	d0e8      	beq.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d009      	beq.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d02b      	beq.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d127      	bne.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001e6e:	4b34      	ldr	r3, [pc, #208]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e74:	0c1b      	lsrs	r3, r3, #16
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	699a      	ldr	r2, [r3, #24]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69db      	ldr	r3, [r3, #28]
 8001e88:	019b      	lsls	r3, r3, #6
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	085b      	lsrs	r3, r3, #1
 8001e90:	3b01      	subs	r3, #1
 8001e92:	041b      	lsls	r3, r3, #16
 8001e94:	431a      	orrs	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9a:	061b      	lsls	r3, r3, #24
 8001e9c:	4928      	ldr	r1, [pc, #160]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001ea4:	4b26      	ldr	r3, [pc, #152]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ea6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001eaa:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	021b      	lsls	r3, r3, #8
 8001eb6:	4922      	ldr	r1, [pc, #136]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d01d      	beq.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ece:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001ed2:	d118      	bne.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eda:	0e1b      	lsrs	r3, r3, #24
 8001edc:	f003 030f 	and.w	r3, r3, #15
 8001ee0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	699a      	ldr	r2, [r3, #24]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	019b      	lsls	r3, r3, #6
 8001eec:	431a      	orrs	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	085b      	lsrs	r3, r3, #1
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	041b      	lsls	r3, r3, #16
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	061b      	lsls	r3, r3, #24
 8001efe:	4910      	ldr	r1, [pc, #64]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001f06:	4b0f      	ldr	r3, [pc, #60]	@ (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f0c:	f7fe ffae 	bl	8000e6c <HAL_GetTick>
 8001f10:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001f14:	f7fe ffaa 	bl	8000e6c <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e007      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001f26:	4b06      	ldr	r3, [pc, #24]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f32:	d1ef      	bne.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3730      	adds	r7, #48	@ 0x30
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40023800 	.word	0x40023800
 8001f44:	42470070 	.word	0x42470070

08001f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f4c:	b0ae      	sub	sp, #184	@ 0xb8
 8001f4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f6e:	4bcb      	ldr	r3, [pc, #812]	@ (800229c <HAL_RCC_GetSysClockFreq+0x354>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 030c 	and.w	r3, r3, #12
 8001f76:	2b0c      	cmp	r3, #12
 8001f78:	f200 8206 	bhi.w	8002388 <HAL_RCC_GetSysClockFreq+0x440>
 8001f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8001f84 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f82:	bf00      	nop
 8001f84:	08001fb9 	.word	0x08001fb9
 8001f88:	08002389 	.word	0x08002389
 8001f8c:	08002389 	.word	0x08002389
 8001f90:	08002389 	.word	0x08002389
 8001f94:	08001fc1 	.word	0x08001fc1
 8001f98:	08002389 	.word	0x08002389
 8001f9c:	08002389 	.word	0x08002389
 8001fa0:	08002389 	.word	0x08002389
 8001fa4:	08001fc9 	.word	0x08001fc9
 8001fa8:	08002389 	.word	0x08002389
 8001fac:	08002389 	.word	0x08002389
 8001fb0:	08002389 	.word	0x08002389
 8001fb4:	080021b9 	.word	0x080021b9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fb8:	4bb9      	ldr	r3, [pc, #740]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001fba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001fbe:	e1e7      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fc0:	4bb8      	ldr	r3, [pc, #736]	@ (80022a4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001fc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001fc6:	e1e3      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fc8:	4bb4      	ldr	r3, [pc, #720]	@ (800229c <HAL_RCC_GetSysClockFreq+0x354>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fd4:	4bb1      	ldr	r3, [pc, #708]	@ (800229c <HAL_RCC_GetSysClockFreq+0x354>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d071      	beq.n	80020c4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fe0:	4bae      	ldr	r3, [pc, #696]	@ (800229c <HAL_RCC_GetSysClockFreq+0x354>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	099b      	lsrs	r3, r3, #6
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001fec:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001ff0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ff8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002002:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002006:	4622      	mov	r2, r4
 8002008:	462b      	mov	r3, r5
 800200a:	f04f 0000 	mov.w	r0, #0
 800200e:	f04f 0100 	mov.w	r1, #0
 8002012:	0159      	lsls	r1, r3, #5
 8002014:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002018:	0150      	lsls	r0, r2, #5
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	4621      	mov	r1, r4
 8002020:	1a51      	subs	r1, r2, r1
 8002022:	6439      	str	r1, [r7, #64]	@ 0x40
 8002024:	4629      	mov	r1, r5
 8002026:	eb63 0301 	sbc.w	r3, r3, r1
 800202a:	647b      	str	r3, [r7, #68]	@ 0x44
 800202c:	f04f 0200 	mov.w	r2, #0
 8002030:	f04f 0300 	mov.w	r3, #0
 8002034:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002038:	4649      	mov	r1, r9
 800203a:	018b      	lsls	r3, r1, #6
 800203c:	4641      	mov	r1, r8
 800203e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002042:	4641      	mov	r1, r8
 8002044:	018a      	lsls	r2, r1, #6
 8002046:	4641      	mov	r1, r8
 8002048:	1a51      	subs	r1, r2, r1
 800204a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800204c:	4649      	mov	r1, r9
 800204e:	eb63 0301 	sbc.w	r3, r3, r1
 8002052:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002054:	f04f 0200 	mov.w	r2, #0
 8002058:	f04f 0300 	mov.w	r3, #0
 800205c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002060:	4649      	mov	r1, r9
 8002062:	00cb      	lsls	r3, r1, #3
 8002064:	4641      	mov	r1, r8
 8002066:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800206a:	4641      	mov	r1, r8
 800206c:	00ca      	lsls	r2, r1, #3
 800206e:	4610      	mov	r0, r2
 8002070:	4619      	mov	r1, r3
 8002072:	4603      	mov	r3, r0
 8002074:	4622      	mov	r2, r4
 8002076:	189b      	adds	r3, r3, r2
 8002078:	633b      	str	r3, [r7, #48]	@ 0x30
 800207a:	462b      	mov	r3, r5
 800207c:	460a      	mov	r2, r1
 800207e:	eb42 0303 	adc.w	r3, r2, r3
 8002082:	637b      	str	r3, [r7, #52]	@ 0x34
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	f04f 0300 	mov.w	r3, #0
 800208c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002090:	4629      	mov	r1, r5
 8002092:	024b      	lsls	r3, r1, #9
 8002094:	4621      	mov	r1, r4
 8002096:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800209a:	4621      	mov	r1, r4
 800209c:	024a      	lsls	r2, r1, #9
 800209e:	4610      	mov	r0, r2
 80020a0:	4619      	mov	r1, r3
 80020a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020a6:	2200      	movs	r2, #0
 80020a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80020ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80020b0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80020b4:	f7fe f8ac 	bl	8000210 <__aeabi_uldivmod>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	4613      	mov	r3, r2
 80020be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80020c2:	e067      	b.n	8002194 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020c4:	4b75      	ldr	r3, [pc, #468]	@ (800229c <HAL_RCC_GetSysClockFreq+0x354>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	099b      	lsrs	r3, r3, #6
 80020ca:	2200      	movs	r2, #0
 80020cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80020d0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80020d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80020d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80020de:	2300      	movs	r3, #0
 80020e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80020e2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80020e6:	4622      	mov	r2, r4
 80020e8:	462b      	mov	r3, r5
 80020ea:	f04f 0000 	mov.w	r0, #0
 80020ee:	f04f 0100 	mov.w	r1, #0
 80020f2:	0159      	lsls	r1, r3, #5
 80020f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020f8:	0150      	lsls	r0, r2, #5
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	4621      	mov	r1, r4
 8002100:	1a51      	subs	r1, r2, r1
 8002102:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002104:	4629      	mov	r1, r5
 8002106:	eb63 0301 	sbc.w	r3, r3, r1
 800210a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800210c:	f04f 0200 	mov.w	r2, #0
 8002110:	f04f 0300 	mov.w	r3, #0
 8002114:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002118:	4649      	mov	r1, r9
 800211a:	018b      	lsls	r3, r1, #6
 800211c:	4641      	mov	r1, r8
 800211e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002122:	4641      	mov	r1, r8
 8002124:	018a      	lsls	r2, r1, #6
 8002126:	4641      	mov	r1, r8
 8002128:	ebb2 0a01 	subs.w	sl, r2, r1
 800212c:	4649      	mov	r1, r9
 800212e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002132:	f04f 0200 	mov.w	r2, #0
 8002136:	f04f 0300 	mov.w	r3, #0
 800213a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800213e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002142:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002146:	4692      	mov	sl, r2
 8002148:	469b      	mov	fp, r3
 800214a:	4623      	mov	r3, r4
 800214c:	eb1a 0303 	adds.w	r3, sl, r3
 8002150:	623b      	str	r3, [r7, #32]
 8002152:	462b      	mov	r3, r5
 8002154:	eb4b 0303 	adc.w	r3, fp, r3
 8002158:	627b      	str	r3, [r7, #36]	@ 0x24
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	f04f 0300 	mov.w	r3, #0
 8002162:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002166:	4629      	mov	r1, r5
 8002168:	028b      	lsls	r3, r1, #10
 800216a:	4621      	mov	r1, r4
 800216c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002170:	4621      	mov	r1, r4
 8002172:	028a      	lsls	r2, r1, #10
 8002174:	4610      	mov	r0, r2
 8002176:	4619      	mov	r1, r3
 8002178:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800217c:	2200      	movs	r2, #0
 800217e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002180:	677a      	str	r2, [r7, #116]	@ 0x74
 8002182:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002186:	f7fe f843 	bl	8000210 <__aeabi_uldivmod>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	4613      	mov	r3, r2
 8002190:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002194:	4b41      	ldr	r3, [pc, #260]	@ (800229c <HAL_RCC_GetSysClockFreq+0x354>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	0c1b      	lsrs	r3, r3, #16
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	3301      	adds	r3, #1
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80021a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80021aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80021ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80021b6:	e0eb      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021b8:	4b38      	ldr	r3, [pc, #224]	@ (800229c <HAL_RCC_GetSysClockFreq+0x354>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021c4:	4b35      	ldr	r3, [pc, #212]	@ (800229c <HAL_RCC_GetSysClockFreq+0x354>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d06b      	beq.n	80022a8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021d0:	4b32      	ldr	r3, [pc, #200]	@ (800229c <HAL_RCC_GetSysClockFreq+0x354>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	099b      	lsrs	r3, r3, #6
 80021d6:	2200      	movs	r2, #0
 80021d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80021da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80021dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021e2:	663b      	str	r3, [r7, #96]	@ 0x60
 80021e4:	2300      	movs	r3, #0
 80021e6:	667b      	str	r3, [r7, #100]	@ 0x64
 80021e8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80021ec:	4622      	mov	r2, r4
 80021ee:	462b      	mov	r3, r5
 80021f0:	f04f 0000 	mov.w	r0, #0
 80021f4:	f04f 0100 	mov.w	r1, #0
 80021f8:	0159      	lsls	r1, r3, #5
 80021fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021fe:	0150      	lsls	r0, r2, #5
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4621      	mov	r1, r4
 8002206:	1a51      	subs	r1, r2, r1
 8002208:	61b9      	str	r1, [r7, #24]
 800220a:	4629      	mov	r1, r5
 800220c:	eb63 0301 	sbc.w	r3, r3, r1
 8002210:	61fb      	str	r3, [r7, #28]
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	f04f 0300 	mov.w	r3, #0
 800221a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800221e:	4659      	mov	r1, fp
 8002220:	018b      	lsls	r3, r1, #6
 8002222:	4651      	mov	r1, sl
 8002224:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002228:	4651      	mov	r1, sl
 800222a:	018a      	lsls	r2, r1, #6
 800222c:	4651      	mov	r1, sl
 800222e:	ebb2 0801 	subs.w	r8, r2, r1
 8002232:	4659      	mov	r1, fp
 8002234:	eb63 0901 	sbc.w	r9, r3, r1
 8002238:	f04f 0200 	mov.w	r2, #0
 800223c:	f04f 0300 	mov.w	r3, #0
 8002240:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002244:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002248:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800224c:	4690      	mov	r8, r2
 800224e:	4699      	mov	r9, r3
 8002250:	4623      	mov	r3, r4
 8002252:	eb18 0303 	adds.w	r3, r8, r3
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	462b      	mov	r3, r5
 800225a:	eb49 0303 	adc.w	r3, r9, r3
 800225e:	617b      	str	r3, [r7, #20]
 8002260:	f04f 0200 	mov.w	r2, #0
 8002264:	f04f 0300 	mov.w	r3, #0
 8002268:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800226c:	4629      	mov	r1, r5
 800226e:	024b      	lsls	r3, r1, #9
 8002270:	4621      	mov	r1, r4
 8002272:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002276:	4621      	mov	r1, r4
 8002278:	024a      	lsls	r2, r1, #9
 800227a:	4610      	mov	r0, r2
 800227c:	4619      	mov	r1, r3
 800227e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002282:	2200      	movs	r2, #0
 8002284:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002286:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002288:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800228c:	f7fd ffc0 	bl	8000210 <__aeabi_uldivmod>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4613      	mov	r3, r2
 8002296:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800229a:	e065      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0x420>
 800229c:	40023800 	.word	0x40023800
 80022a0:	00f42400 	.word	0x00f42400
 80022a4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022a8:	4b3d      	ldr	r3, [pc, #244]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x458>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	099b      	lsrs	r3, r3, #6
 80022ae:	2200      	movs	r2, #0
 80022b0:	4618      	mov	r0, r3
 80022b2:	4611      	mov	r1, r2
 80022b4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80022ba:	2300      	movs	r3, #0
 80022bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80022be:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80022c2:	4642      	mov	r2, r8
 80022c4:	464b      	mov	r3, r9
 80022c6:	f04f 0000 	mov.w	r0, #0
 80022ca:	f04f 0100 	mov.w	r1, #0
 80022ce:	0159      	lsls	r1, r3, #5
 80022d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022d4:	0150      	lsls	r0, r2, #5
 80022d6:	4602      	mov	r2, r0
 80022d8:	460b      	mov	r3, r1
 80022da:	4641      	mov	r1, r8
 80022dc:	1a51      	subs	r1, r2, r1
 80022de:	60b9      	str	r1, [r7, #8]
 80022e0:	4649      	mov	r1, r9
 80022e2:	eb63 0301 	sbc.w	r3, r3, r1
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	f04f 0300 	mov.w	r3, #0
 80022f0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80022f4:	4659      	mov	r1, fp
 80022f6:	018b      	lsls	r3, r1, #6
 80022f8:	4651      	mov	r1, sl
 80022fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022fe:	4651      	mov	r1, sl
 8002300:	018a      	lsls	r2, r1, #6
 8002302:	4651      	mov	r1, sl
 8002304:	1a54      	subs	r4, r2, r1
 8002306:	4659      	mov	r1, fp
 8002308:	eb63 0501 	sbc.w	r5, r3, r1
 800230c:	f04f 0200 	mov.w	r2, #0
 8002310:	f04f 0300 	mov.w	r3, #0
 8002314:	00eb      	lsls	r3, r5, #3
 8002316:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800231a:	00e2      	lsls	r2, r4, #3
 800231c:	4614      	mov	r4, r2
 800231e:	461d      	mov	r5, r3
 8002320:	4643      	mov	r3, r8
 8002322:	18e3      	adds	r3, r4, r3
 8002324:	603b      	str	r3, [r7, #0]
 8002326:	464b      	mov	r3, r9
 8002328:	eb45 0303 	adc.w	r3, r5, r3
 800232c:	607b      	str	r3, [r7, #4]
 800232e:	f04f 0200 	mov.w	r2, #0
 8002332:	f04f 0300 	mov.w	r3, #0
 8002336:	e9d7 4500 	ldrd	r4, r5, [r7]
 800233a:	4629      	mov	r1, r5
 800233c:	028b      	lsls	r3, r1, #10
 800233e:	4621      	mov	r1, r4
 8002340:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002344:	4621      	mov	r1, r4
 8002346:	028a      	lsls	r2, r1, #10
 8002348:	4610      	mov	r0, r2
 800234a:	4619      	mov	r1, r3
 800234c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002350:	2200      	movs	r2, #0
 8002352:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002354:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002356:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800235a:	f7fd ff59 	bl	8000210 <__aeabi_uldivmod>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4613      	mov	r3, r2
 8002364:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002368:	4b0d      	ldr	r3, [pc, #52]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x458>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	0f1b      	lsrs	r3, r3, #28
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002376:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800237a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800237e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002382:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002386:	e003      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002388:	4b06      	ldr	r3, [pc, #24]	@ (80023a4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800238a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800238e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002390:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002394:	4618      	mov	r0, r3
 8002396:	37b8      	adds	r7, #184	@ 0xb8
 8002398:	46bd      	mov	sp, r7
 800239a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800239e:	bf00      	nop
 80023a0:	40023800 	.word	0x40023800
 80023a4:	00f42400 	.word	0x00f42400

080023a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e28d      	b.n	80028d6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 8083 	beq.w	80024ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80023c8:	4b94      	ldr	r3, [pc, #592]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 030c 	and.w	r3, r3, #12
 80023d0:	2b04      	cmp	r3, #4
 80023d2:	d019      	beq.n	8002408 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80023d4:	4b91      	ldr	r3, [pc, #580]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 030c 	and.w	r3, r3, #12
        || \
 80023dc:	2b08      	cmp	r3, #8
 80023de:	d106      	bne.n	80023ee <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80023e0:	4b8e      	ldr	r3, [pc, #568]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023ec:	d00c      	beq.n	8002408 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ee:	4b8b      	ldr	r3, [pc, #556]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80023f6:	2b0c      	cmp	r3, #12
 80023f8:	d112      	bne.n	8002420 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023fa:	4b88      	ldr	r3, [pc, #544]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002402:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002406:	d10b      	bne.n	8002420 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002408:	4b84      	ldr	r3, [pc, #528]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d05b      	beq.n	80024cc <HAL_RCC_OscConfig+0x124>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d157      	bne.n	80024cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e25a      	b.n	80028d6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002428:	d106      	bne.n	8002438 <HAL_RCC_OscConfig+0x90>
 800242a:	4b7c      	ldr	r3, [pc, #496]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a7b      	ldr	r2, [pc, #492]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 8002430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	e01d      	b.n	8002474 <HAL_RCC_OscConfig+0xcc>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002440:	d10c      	bne.n	800245c <HAL_RCC_OscConfig+0xb4>
 8002442:	4b76      	ldr	r3, [pc, #472]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a75      	ldr	r2, [pc, #468]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 8002448:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	4b73      	ldr	r3, [pc, #460]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a72      	ldr	r2, [pc, #456]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 8002454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	e00b      	b.n	8002474 <HAL_RCC_OscConfig+0xcc>
 800245c:	4b6f      	ldr	r3, [pc, #444]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a6e      	ldr	r2, [pc, #440]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 8002462:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	4b6c      	ldr	r3, [pc, #432]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a6b      	ldr	r2, [pc, #428]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 800246e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002472:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d013      	beq.n	80024a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247c:	f7fe fcf6 	bl	8000e6c <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002484:	f7fe fcf2 	bl	8000e6c <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b64      	cmp	r3, #100	@ 0x64
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e21f      	b.n	80028d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002496:	4b61      	ldr	r3, [pc, #388]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0f0      	beq.n	8002484 <HAL_RCC_OscConfig+0xdc>
 80024a2:	e014      	b.n	80024ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7fe fce2 	bl	8000e6c <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ac:	f7fe fcde 	bl	8000e6c <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b64      	cmp	r3, #100	@ 0x64
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e20b      	b.n	80028d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024be:	4b57      	ldr	r3, [pc, #348]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0x104>
 80024ca:	e000      	b.n	80024ce <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d06f      	beq.n	80025ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80024da:	4b50      	ldr	r3, [pc, #320]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 030c 	and.w	r3, r3, #12
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d017      	beq.n	8002516 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80024e6:	4b4d      	ldr	r3, [pc, #308]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 030c 	and.w	r3, r3, #12
        || \
 80024ee:	2b08      	cmp	r3, #8
 80024f0:	d105      	bne.n	80024fe <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80024f2:	4b4a      	ldr	r3, [pc, #296]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00b      	beq.n	8002516 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024fe:	4b47      	ldr	r3, [pc, #284]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002506:	2b0c      	cmp	r3, #12
 8002508:	d11c      	bne.n	8002544 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800250a:	4b44      	ldr	r3, [pc, #272]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d116      	bne.n	8002544 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002516:	4b41      	ldr	r3, [pc, #260]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d005      	beq.n	800252e <HAL_RCC_OscConfig+0x186>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d001      	beq.n	800252e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e1d3      	b.n	80028d6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800252e:	4b3b      	ldr	r3, [pc, #236]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	4937      	ldr	r1, [pc, #220]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 800253e:	4313      	orrs	r3, r2
 8002540:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002542:	e03a      	b.n	80025ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d020      	beq.n	800258e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800254c:	4b34      	ldr	r3, [pc, #208]	@ (8002620 <HAL_RCC_OscConfig+0x278>)
 800254e:	2201      	movs	r2, #1
 8002550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002552:	f7fe fc8b 	bl	8000e6c <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800255a:	f7fe fc87 	bl	8000e6c <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e1b4      	b.n	80028d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800256c:	4b2b      	ldr	r3, [pc, #172]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0f0      	beq.n	800255a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002578:	4b28      	ldr	r3, [pc, #160]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	4925      	ldr	r1, [pc, #148]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 8002588:	4313      	orrs	r3, r2
 800258a:	600b      	str	r3, [r1, #0]
 800258c:	e015      	b.n	80025ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800258e:	4b24      	ldr	r3, [pc, #144]	@ (8002620 <HAL_RCC_OscConfig+0x278>)
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002594:	f7fe fc6a 	bl	8000e6c <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800259c:	f7fe fc66 	bl	8000e6c <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e193      	b.n	80028d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ae:	4b1b      	ldr	r3, [pc, #108]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f0      	bne.n	800259c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d036      	beq.n	8002634 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d016      	beq.n	80025fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ce:	4b15      	ldr	r3, [pc, #84]	@ (8002624 <HAL_RCC_OscConfig+0x27c>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d4:	f7fe fc4a 	bl	8000e6c <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025dc:	f7fe fc46 	bl	8000e6c <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e173      	b.n	80028d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ee:	4b0b      	ldr	r3, [pc, #44]	@ (800261c <HAL_RCC_OscConfig+0x274>)
 80025f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0f0      	beq.n	80025dc <HAL_RCC_OscConfig+0x234>
 80025fa:	e01b      	b.n	8002634 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025fc:	4b09      	ldr	r3, [pc, #36]	@ (8002624 <HAL_RCC_OscConfig+0x27c>)
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002602:	f7fe fc33 	bl	8000e6c <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002608:	e00e      	b.n	8002628 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800260a:	f7fe fc2f 	bl	8000e6c <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d907      	bls.n	8002628 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e15c      	b.n	80028d6 <HAL_RCC_OscConfig+0x52e>
 800261c:	40023800 	.word	0x40023800
 8002620:	42470000 	.word	0x42470000
 8002624:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002628:	4b8a      	ldr	r3, [pc, #552]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 800262a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1ea      	bne.n	800260a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 8097 	beq.w	8002770 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002642:	2300      	movs	r3, #0
 8002644:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002646:	4b83      	ldr	r3, [pc, #524]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10f      	bne.n	8002672 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	4b7f      	ldr	r3, [pc, #508]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265a:	4a7e      	ldr	r2, [pc, #504]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 800265c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002660:	6413      	str	r3, [r2, #64]	@ 0x40
 8002662:	4b7c      	ldr	r3, [pc, #496]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800266a:	60bb      	str	r3, [r7, #8]
 800266c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800266e:	2301      	movs	r3, #1
 8002670:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002672:	4b79      	ldr	r3, [pc, #484]	@ (8002858 <HAL_RCC_OscConfig+0x4b0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800267a:	2b00      	cmp	r3, #0
 800267c:	d118      	bne.n	80026b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800267e:	4b76      	ldr	r3, [pc, #472]	@ (8002858 <HAL_RCC_OscConfig+0x4b0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a75      	ldr	r2, [pc, #468]	@ (8002858 <HAL_RCC_OscConfig+0x4b0>)
 8002684:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002688:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800268a:	f7fe fbef 	bl	8000e6c <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002690:	e008      	b.n	80026a4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002692:	f7fe fbeb 	bl	8000e6c <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e118      	b.n	80028d6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a4:	4b6c      	ldr	r3, [pc, #432]	@ (8002858 <HAL_RCC_OscConfig+0x4b0>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0f0      	beq.n	8002692 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d106      	bne.n	80026c6 <HAL_RCC_OscConfig+0x31e>
 80026b8:	4b66      	ldr	r3, [pc, #408]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 80026ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026bc:	4a65      	ldr	r2, [pc, #404]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 80026be:	f043 0301 	orr.w	r3, r3, #1
 80026c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80026c4:	e01c      	b.n	8002700 <HAL_RCC_OscConfig+0x358>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	2b05      	cmp	r3, #5
 80026cc:	d10c      	bne.n	80026e8 <HAL_RCC_OscConfig+0x340>
 80026ce:	4b61      	ldr	r3, [pc, #388]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 80026d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d2:	4a60      	ldr	r2, [pc, #384]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 80026d4:	f043 0304 	orr.w	r3, r3, #4
 80026d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80026da:	4b5e      	ldr	r3, [pc, #376]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 80026dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026de:	4a5d      	ldr	r2, [pc, #372]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80026e6:	e00b      	b.n	8002700 <HAL_RCC_OscConfig+0x358>
 80026e8:	4b5a      	ldr	r3, [pc, #360]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 80026ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ec:	4a59      	ldr	r2, [pc, #356]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 80026ee:	f023 0301 	bic.w	r3, r3, #1
 80026f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80026f4:	4b57      	ldr	r3, [pc, #348]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 80026f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f8:	4a56      	ldr	r2, [pc, #344]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 80026fa:	f023 0304 	bic.w	r3, r3, #4
 80026fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d015      	beq.n	8002734 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002708:	f7fe fbb0 	bl	8000e6c <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800270e:	e00a      	b.n	8002726 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002710:	f7fe fbac 	bl	8000e6c <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800271e:	4293      	cmp	r3, r2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e0d7      	b.n	80028d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002726:	4b4b      	ldr	r3, [pc, #300]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 8002728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0ee      	beq.n	8002710 <HAL_RCC_OscConfig+0x368>
 8002732:	e014      	b.n	800275e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002734:	f7fe fb9a 	bl	8000e6c <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800273a:	e00a      	b.n	8002752 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273c:	f7fe fb96 	bl	8000e6c <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	f241 3288 	movw	r2, #5000	@ 0x1388
 800274a:	4293      	cmp	r3, r2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e0c1      	b.n	80028d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002752:	4b40      	ldr	r3, [pc, #256]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 8002754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1ee      	bne.n	800273c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800275e:	7dfb      	ldrb	r3, [r7, #23]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d105      	bne.n	8002770 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002764:	4b3b      	ldr	r3, [pc, #236]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 8002766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002768:	4a3a      	ldr	r2, [pc, #232]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 800276a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800276e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 80ad 	beq.w	80028d4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800277a:	4b36      	ldr	r3, [pc, #216]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 030c 	and.w	r3, r3, #12
 8002782:	2b08      	cmp	r3, #8
 8002784:	d060      	beq.n	8002848 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	2b02      	cmp	r3, #2
 800278c:	d145      	bne.n	800281a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800278e:	4b33      	ldr	r3, [pc, #204]	@ (800285c <HAL_RCC_OscConfig+0x4b4>)
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002794:	f7fe fb6a 	bl	8000e6c <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800279c:	f7fe fb66 	bl	8000e6c <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e093      	b.n	80028d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ae:	4b29      	ldr	r3, [pc, #164]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69da      	ldr	r2, [r3, #28]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c8:	019b      	lsls	r3, r3, #6
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d0:	085b      	lsrs	r3, r3, #1
 80027d2:	3b01      	subs	r3, #1
 80027d4:	041b      	lsls	r3, r3, #16
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027dc:	061b      	lsls	r3, r3, #24
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e4:	071b      	lsls	r3, r3, #28
 80027e6:	491b      	ldr	r1, [pc, #108]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ec:	4b1b      	ldr	r3, [pc, #108]	@ (800285c <HAL_RCC_OscConfig+0x4b4>)
 80027ee:	2201      	movs	r2, #1
 80027f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f2:	f7fe fb3b 	bl	8000e6c <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fa:	f7fe fb37 	bl	8000e6c <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e064      	b.n	80028d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280c:	4b11      	ldr	r3, [pc, #68]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0f0      	beq.n	80027fa <HAL_RCC_OscConfig+0x452>
 8002818:	e05c      	b.n	80028d4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800281a:	4b10      	ldr	r3, [pc, #64]	@ (800285c <HAL_RCC_OscConfig+0x4b4>)
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002820:	f7fe fb24 	bl	8000e6c <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002828:	f7fe fb20 	bl	8000e6c <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e04d      	b.n	80028d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283a:	4b06      	ldr	r3, [pc, #24]	@ (8002854 <HAL_RCC_OscConfig+0x4ac>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0x480>
 8002846:	e045      	b.n	80028d4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d107      	bne.n	8002860 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e040      	b.n	80028d6 <HAL_RCC_OscConfig+0x52e>
 8002854:	40023800 	.word	0x40023800
 8002858:	40007000 	.word	0x40007000
 800285c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002860:	4b1f      	ldr	r3, [pc, #124]	@ (80028e0 <HAL_RCC_OscConfig+0x538>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d030      	beq.n	80028d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002878:	429a      	cmp	r2, r3
 800287a:	d129      	bne.n	80028d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002886:	429a      	cmp	r2, r3
 8002888:	d122      	bne.n	80028d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002890:	4013      	ands	r3, r2
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002896:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002898:	4293      	cmp	r3, r2
 800289a:	d119      	bne.n	80028d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a6:	085b      	lsrs	r3, r3, #1
 80028a8:	3b01      	subs	r3, #1
 80028aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d10f      	bne.n	80028d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028bc:	429a      	cmp	r2, r3
 80028be:	d107      	bne.n	80028d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d001      	beq.n	80028d4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e000      	b.n	80028d6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40023800 	.word	0x40023800

080028e4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e097      	b.n	8002a28 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d106      	bne.n	8002912 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7fe f8bf 	bl	8000a90 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2202      	movs	r2, #2
 8002916:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002928:	f023 0307 	bic.w	r3, r3, #7
 800292c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	3304      	adds	r3, #4
 8002936:	4619      	mov	r1, r3
 8002938:	4610      	mov	r0, r2
 800293a:	f000 fa29 	bl	8002d90 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	4313      	orrs	r3, r2
 800295e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002966:	f023 0303 	bic.w	r3, r3, #3
 800296a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	021b      	lsls	r3, r3, #8
 8002976:	4313      	orrs	r3, r2
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	4313      	orrs	r3, r2
 800297c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002984:	f023 030c 	bic.w	r3, r3, #12
 8002988:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002990:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002994:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	021b      	lsls	r3, r3, #8
 80029a0:	4313      	orrs	r3, r2
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	011a      	lsls	r2, r3, #4
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	031b      	lsls	r3, r3, #12
 80029b4:	4313      	orrs	r3, r2
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80029c2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80029ca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	011b      	lsls	r3, r3, #4
 80029d6:	4313      	orrs	r3, r2
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	4313      	orrs	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a40:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002a48:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a50:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002a58:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d110      	bne.n	8002a82 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d102      	bne.n	8002a6c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002a66:	7b7b      	ldrb	r3, [r7, #13]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d001      	beq.n	8002a70 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e069      	b.n	8002b44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2202      	movs	r2, #2
 8002a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a80:	e031      	b.n	8002ae6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	2b04      	cmp	r3, #4
 8002a86:	d110      	bne.n	8002aaa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a88:	7bbb      	ldrb	r3, [r7, #14]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d102      	bne.n	8002a94 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002a8e:	7b3b      	ldrb	r3, [r7, #12]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d001      	beq.n	8002a98 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e055      	b.n	8002b44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002aa8:	e01d      	b.n	8002ae6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002aaa:	7bfb      	ldrb	r3, [r7, #15]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d108      	bne.n	8002ac2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ab0:	7bbb      	ldrb	r3, [r7, #14]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d105      	bne.n	8002ac2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ab6:	7b7b      	ldrb	r3, [r7, #13]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d102      	bne.n	8002ac2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002abc:	7b3b      	ldrb	r3, [r7, #12]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d001      	beq.n	8002ac6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e03e      	b.n	8002b44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2202      	movs	r2, #2
 8002aca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2202      	movs	r2, #2
 8002ada:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_TIM_Encoder_Start+0xc4>
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d008      	beq.n	8002b04 <HAL_TIM_Encoder_Start+0xd4>
 8002af2:	e00f      	b.n	8002b14 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2201      	movs	r2, #1
 8002afa:	2100      	movs	r1, #0
 8002afc:	4618      	mov	r0, r3
 8002afe:	f000 f9ed 	bl	8002edc <TIM_CCxChannelCmd>
      break;
 8002b02:	e016      	b.n	8002b32 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	2104      	movs	r1, #4
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f000 f9e5 	bl	8002edc <TIM_CCxChannelCmd>
      break;
 8002b12:	e00e      	b.n	8002b32 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 f9dd 	bl	8002edc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2201      	movs	r2, #1
 8002b28:	2104      	movs	r1, #4
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 f9d6 	bl	8002edc <TIM_CCxChannelCmd>
      break;
 8002b30:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f042 0201 	orr.w	r2, r2, #1
 8002b40:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d020      	beq.n	8002bb0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d01b      	beq.n	8002bb0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f06f 0202 	mvn.w	r2, #2
 8002b80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f8dc 	bl	8002d54 <HAL_TIM_IC_CaptureCallback>
 8002b9c:	e005      	b.n	8002baa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f8ce 	bl	8002d40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f8df 	bl	8002d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d020      	beq.n	8002bfc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d01b      	beq.n	8002bfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f06f 0204 	mvn.w	r2, #4
 8002bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f8b6 	bl	8002d54 <HAL_TIM_IC_CaptureCallback>
 8002be8:	e005      	b.n	8002bf6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f8a8 	bl	8002d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 f8b9 	bl	8002d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d020      	beq.n	8002c48 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d01b      	beq.n	8002c48 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f06f 0208 	mvn.w	r2, #8
 8002c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f890 	bl	8002d54 <HAL_TIM_IC_CaptureCallback>
 8002c34:	e005      	b.n	8002c42 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f882 	bl	8002d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f893 	bl	8002d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f003 0310 	and.w	r3, r3, #16
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d020      	beq.n	8002c94 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d01b      	beq.n	8002c94 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f06f 0210 	mvn.w	r2, #16
 8002c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2208      	movs	r2, #8
 8002c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f86a 	bl	8002d54 <HAL_TIM_IC_CaptureCallback>
 8002c80:	e005      	b.n	8002c8e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f85c 	bl	8002d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f86d 	bl	8002d68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00c      	beq.n	8002cb8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d007      	beq.n	8002cb8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f06f 0201 	mvn.w	r2, #1
 8002cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f83a 	bl	8002d2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00c      	beq.n	8002cdc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d007      	beq.n	8002cdc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f9ac 	bl	8003034 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00c      	beq.n	8002d00 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d007      	beq.n	8002d00 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f83e 	bl	8002d7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	f003 0320 	and.w	r3, r3, #32
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00c      	beq.n	8002d24 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f003 0320 	and.w	r3, r3, #32
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d007      	beq.n	8002d24 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f06f 0220 	mvn.w	r2, #32
 8002d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f97e 	bl	8003020 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d24:	bf00      	nop
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a43      	ldr	r2, [pc, #268]	@ (8002eb0 <TIM_Base_SetConfig+0x120>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d013      	beq.n	8002dd0 <TIM_Base_SetConfig+0x40>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dae:	d00f      	beq.n	8002dd0 <TIM_Base_SetConfig+0x40>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a40      	ldr	r2, [pc, #256]	@ (8002eb4 <TIM_Base_SetConfig+0x124>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d00b      	beq.n	8002dd0 <TIM_Base_SetConfig+0x40>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a3f      	ldr	r2, [pc, #252]	@ (8002eb8 <TIM_Base_SetConfig+0x128>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d007      	beq.n	8002dd0 <TIM_Base_SetConfig+0x40>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a3e      	ldr	r2, [pc, #248]	@ (8002ebc <TIM_Base_SetConfig+0x12c>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d003      	beq.n	8002dd0 <TIM_Base_SetConfig+0x40>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a3d      	ldr	r2, [pc, #244]	@ (8002ec0 <TIM_Base_SetConfig+0x130>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d108      	bne.n	8002de2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a32      	ldr	r2, [pc, #200]	@ (8002eb0 <TIM_Base_SetConfig+0x120>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d02b      	beq.n	8002e42 <TIM_Base_SetConfig+0xb2>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002df0:	d027      	beq.n	8002e42 <TIM_Base_SetConfig+0xb2>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a2f      	ldr	r2, [pc, #188]	@ (8002eb4 <TIM_Base_SetConfig+0x124>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d023      	beq.n	8002e42 <TIM_Base_SetConfig+0xb2>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a2e      	ldr	r2, [pc, #184]	@ (8002eb8 <TIM_Base_SetConfig+0x128>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d01f      	beq.n	8002e42 <TIM_Base_SetConfig+0xb2>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a2d      	ldr	r2, [pc, #180]	@ (8002ebc <TIM_Base_SetConfig+0x12c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d01b      	beq.n	8002e42 <TIM_Base_SetConfig+0xb2>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a2c      	ldr	r2, [pc, #176]	@ (8002ec0 <TIM_Base_SetConfig+0x130>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d017      	beq.n	8002e42 <TIM_Base_SetConfig+0xb2>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a2b      	ldr	r2, [pc, #172]	@ (8002ec4 <TIM_Base_SetConfig+0x134>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d013      	beq.n	8002e42 <TIM_Base_SetConfig+0xb2>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a2a      	ldr	r2, [pc, #168]	@ (8002ec8 <TIM_Base_SetConfig+0x138>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d00f      	beq.n	8002e42 <TIM_Base_SetConfig+0xb2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a29      	ldr	r2, [pc, #164]	@ (8002ecc <TIM_Base_SetConfig+0x13c>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d00b      	beq.n	8002e42 <TIM_Base_SetConfig+0xb2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a28      	ldr	r2, [pc, #160]	@ (8002ed0 <TIM_Base_SetConfig+0x140>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d007      	beq.n	8002e42 <TIM_Base_SetConfig+0xb2>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a27      	ldr	r2, [pc, #156]	@ (8002ed4 <TIM_Base_SetConfig+0x144>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d003      	beq.n	8002e42 <TIM_Base_SetConfig+0xb2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a26      	ldr	r2, [pc, #152]	@ (8002ed8 <TIM_Base_SetConfig+0x148>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d108      	bne.n	8002e54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a0e      	ldr	r2, [pc, #56]	@ (8002eb0 <TIM_Base_SetConfig+0x120>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d003      	beq.n	8002e82 <TIM_Base_SetConfig+0xf2>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a10      	ldr	r2, [pc, #64]	@ (8002ec0 <TIM_Base_SetConfig+0x130>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d103      	bne.n	8002e8a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	691a      	ldr	r2, [r3, #16]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f043 0204 	orr.w	r2, r3, #4
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	601a      	str	r2, [r3, #0]
}
 8002ea2:	bf00      	nop
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	40010000 	.word	0x40010000
 8002eb4:	40000400 	.word	0x40000400
 8002eb8:	40000800 	.word	0x40000800
 8002ebc:	40000c00 	.word	0x40000c00
 8002ec0:	40010400 	.word	0x40010400
 8002ec4:	40014000 	.word	0x40014000
 8002ec8:	40014400 	.word	0x40014400
 8002ecc:	40014800 	.word	0x40014800
 8002ed0:	40001800 	.word	0x40001800
 8002ed4:	40001c00 	.word	0x40001c00
 8002ed8:	40002000 	.word	0x40002000

08002edc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b087      	sub	sp, #28
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	f003 031f 	and.w	r3, r3, #31
 8002eee:	2201      	movs	r2, #1
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6a1a      	ldr	r2, [r3, #32]
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	43db      	mvns	r3, r3
 8002efe:	401a      	ands	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a1a      	ldr	r2, [r3, #32]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	f003 031f 	and.w	r3, r3, #31
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	fa01 f303 	lsl.w	r3, r1, r3
 8002f14:	431a      	orrs	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	621a      	str	r2, [r3, #32]
}
 8002f1a:	bf00      	nop
 8002f1c:	371c      	adds	r7, #28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
	...

08002f28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d101      	bne.n	8002f40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	e05a      	b.n	8002ff6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a21      	ldr	r2, [pc, #132]	@ (8003004 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d022      	beq.n	8002fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f8c:	d01d      	beq.n	8002fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a1d      	ldr	r2, [pc, #116]	@ (8003008 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d018      	beq.n	8002fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a1b      	ldr	r2, [pc, #108]	@ (800300c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d013      	beq.n	8002fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a1a      	ldr	r2, [pc, #104]	@ (8003010 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d00e      	beq.n	8002fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a18      	ldr	r2, [pc, #96]	@ (8003014 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d009      	beq.n	8002fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a17      	ldr	r2, [pc, #92]	@ (8003018 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d004      	beq.n	8002fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a15      	ldr	r2, [pc, #84]	@ (800301c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d10c      	bne.n	8002fe4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	40010000 	.word	0x40010000
 8003008:	40000400 	.word	0x40000400
 800300c:	40000800 	.word	0x40000800
 8003010:	40000c00 	.word	0x40000c00
 8003014:	40010400 	.word	0x40010400
 8003018:	40014000 	.word	0x40014000
 800301c:	40001800 	.word	0x40001800

08003020 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e042      	b.n	80030e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d106      	bne.n	8003074 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7fd fd86 	bl	8000b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2224      	movs	r2, #36	@ 0x24
 8003078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800308a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f82b 	bl	80030e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	691a      	ldr	r2, [r3, #16]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695a      	ldr	r2, [r3, #20]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80030b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030ec:	b0c0      	sub	sp, #256	@ 0x100
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003104:	68d9      	ldr	r1, [r3, #12]
 8003106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	ea40 0301 	orr.w	r3, r0, r1
 8003110:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	431a      	orrs	r2, r3
 8003120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	431a      	orrs	r2, r3
 8003128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	4313      	orrs	r3, r2
 8003130:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003140:	f021 010c 	bic.w	r1, r1, #12
 8003144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800314e:	430b      	orrs	r3, r1
 8003150:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800315e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003162:	6999      	ldr	r1, [r3, #24]
 8003164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	ea40 0301 	orr.w	r3, r0, r1
 800316e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	4b8f      	ldr	r3, [pc, #572]	@ (80033b4 <UART_SetConfig+0x2cc>)
 8003178:	429a      	cmp	r2, r3
 800317a:	d005      	beq.n	8003188 <UART_SetConfig+0xa0>
 800317c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	4b8d      	ldr	r3, [pc, #564]	@ (80033b8 <UART_SetConfig+0x2d0>)
 8003184:	429a      	cmp	r2, r3
 8003186:	d104      	bne.n	8003192 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003188:	f7fe fba0 	bl	80018cc <HAL_RCC_GetPCLK2Freq>
 800318c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003190:	e003      	b.n	800319a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003192:	f7fe fb87 	bl	80018a4 <HAL_RCC_GetPCLK1Freq>
 8003196:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800319a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800319e:	69db      	ldr	r3, [r3, #28]
 80031a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031a4:	f040 810c 	bne.w	80033c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031ac:	2200      	movs	r2, #0
 80031ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80031b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80031b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80031ba:	4622      	mov	r2, r4
 80031bc:	462b      	mov	r3, r5
 80031be:	1891      	adds	r1, r2, r2
 80031c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80031c2:	415b      	adcs	r3, r3
 80031c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80031c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80031ca:	4621      	mov	r1, r4
 80031cc:	eb12 0801 	adds.w	r8, r2, r1
 80031d0:	4629      	mov	r1, r5
 80031d2:	eb43 0901 	adc.w	r9, r3, r1
 80031d6:	f04f 0200 	mov.w	r2, #0
 80031da:	f04f 0300 	mov.w	r3, #0
 80031de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031ea:	4690      	mov	r8, r2
 80031ec:	4699      	mov	r9, r3
 80031ee:	4623      	mov	r3, r4
 80031f0:	eb18 0303 	adds.w	r3, r8, r3
 80031f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80031f8:	462b      	mov	r3, r5
 80031fa:	eb49 0303 	adc.w	r3, r9, r3
 80031fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800320e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003212:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003216:	460b      	mov	r3, r1
 8003218:	18db      	adds	r3, r3, r3
 800321a:	653b      	str	r3, [r7, #80]	@ 0x50
 800321c:	4613      	mov	r3, r2
 800321e:	eb42 0303 	adc.w	r3, r2, r3
 8003222:	657b      	str	r3, [r7, #84]	@ 0x54
 8003224:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003228:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800322c:	f7fc fff0 	bl	8000210 <__aeabi_uldivmod>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4b61      	ldr	r3, [pc, #388]	@ (80033bc <UART_SetConfig+0x2d4>)
 8003236:	fba3 2302 	umull	r2, r3, r3, r2
 800323a:	095b      	lsrs	r3, r3, #5
 800323c:	011c      	lsls	r4, r3, #4
 800323e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003242:	2200      	movs	r2, #0
 8003244:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003248:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800324c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003250:	4642      	mov	r2, r8
 8003252:	464b      	mov	r3, r9
 8003254:	1891      	adds	r1, r2, r2
 8003256:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003258:	415b      	adcs	r3, r3
 800325a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800325c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003260:	4641      	mov	r1, r8
 8003262:	eb12 0a01 	adds.w	sl, r2, r1
 8003266:	4649      	mov	r1, r9
 8003268:	eb43 0b01 	adc.w	fp, r3, r1
 800326c:	f04f 0200 	mov.w	r2, #0
 8003270:	f04f 0300 	mov.w	r3, #0
 8003274:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003278:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800327c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003280:	4692      	mov	sl, r2
 8003282:	469b      	mov	fp, r3
 8003284:	4643      	mov	r3, r8
 8003286:	eb1a 0303 	adds.w	r3, sl, r3
 800328a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800328e:	464b      	mov	r3, r9
 8003290:	eb4b 0303 	adc.w	r3, fp, r3
 8003294:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80032a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80032ac:	460b      	mov	r3, r1
 80032ae:	18db      	adds	r3, r3, r3
 80032b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80032b2:	4613      	mov	r3, r2
 80032b4:	eb42 0303 	adc.w	r3, r2, r3
 80032b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80032ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80032be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80032c2:	f7fc ffa5 	bl	8000210 <__aeabi_uldivmod>
 80032c6:	4602      	mov	r2, r0
 80032c8:	460b      	mov	r3, r1
 80032ca:	4611      	mov	r1, r2
 80032cc:	4b3b      	ldr	r3, [pc, #236]	@ (80033bc <UART_SetConfig+0x2d4>)
 80032ce:	fba3 2301 	umull	r2, r3, r3, r1
 80032d2:	095b      	lsrs	r3, r3, #5
 80032d4:	2264      	movs	r2, #100	@ 0x64
 80032d6:	fb02 f303 	mul.w	r3, r2, r3
 80032da:	1acb      	subs	r3, r1, r3
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80032e2:	4b36      	ldr	r3, [pc, #216]	@ (80033bc <UART_SetConfig+0x2d4>)
 80032e4:	fba3 2302 	umull	r2, r3, r3, r2
 80032e8:	095b      	lsrs	r3, r3, #5
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80032f0:	441c      	add	r4, r3
 80032f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032f6:	2200      	movs	r2, #0
 80032f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80032fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003300:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003304:	4642      	mov	r2, r8
 8003306:	464b      	mov	r3, r9
 8003308:	1891      	adds	r1, r2, r2
 800330a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800330c:	415b      	adcs	r3, r3
 800330e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003310:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003314:	4641      	mov	r1, r8
 8003316:	1851      	adds	r1, r2, r1
 8003318:	6339      	str	r1, [r7, #48]	@ 0x30
 800331a:	4649      	mov	r1, r9
 800331c:	414b      	adcs	r3, r1
 800331e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003320:	f04f 0200 	mov.w	r2, #0
 8003324:	f04f 0300 	mov.w	r3, #0
 8003328:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800332c:	4659      	mov	r1, fp
 800332e:	00cb      	lsls	r3, r1, #3
 8003330:	4651      	mov	r1, sl
 8003332:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003336:	4651      	mov	r1, sl
 8003338:	00ca      	lsls	r2, r1, #3
 800333a:	4610      	mov	r0, r2
 800333c:	4619      	mov	r1, r3
 800333e:	4603      	mov	r3, r0
 8003340:	4642      	mov	r2, r8
 8003342:	189b      	adds	r3, r3, r2
 8003344:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003348:	464b      	mov	r3, r9
 800334a:	460a      	mov	r2, r1
 800334c:	eb42 0303 	adc.w	r3, r2, r3
 8003350:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003360:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003364:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003368:	460b      	mov	r3, r1
 800336a:	18db      	adds	r3, r3, r3
 800336c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800336e:	4613      	mov	r3, r2
 8003370:	eb42 0303 	adc.w	r3, r2, r3
 8003374:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003376:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800337a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800337e:	f7fc ff47 	bl	8000210 <__aeabi_uldivmod>
 8003382:	4602      	mov	r2, r0
 8003384:	460b      	mov	r3, r1
 8003386:	4b0d      	ldr	r3, [pc, #52]	@ (80033bc <UART_SetConfig+0x2d4>)
 8003388:	fba3 1302 	umull	r1, r3, r3, r2
 800338c:	095b      	lsrs	r3, r3, #5
 800338e:	2164      	movs	r1, #100	@ 0x64
 8003390:	fb01 f303 	mul.w	r3, r1, r3
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	3332      	adds	r3, #50	@ 0x32
 800339a:	4a08      	ldr	r2, [pc, #32]	@ (80033bc <UART_SetConfig+0x2d4>)
 800339c:	fba2 2303 	umull	r2, r3, r2, r3
 80033a0:	095b      	lsrs	r3, r3, #5
 80033a2:	f003 0207 	and.w	r2, r3, #7
 80033a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4422      	add	r2, r4
 80033ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033b0:	e106      	b.n	80035c0 <UART_SetConfig+0x4d8>
 80033b2:	bf00      	nop
 80033b4:	40011000 	.word	0x40011000
 80033b8:	40011400 	.word	0x40011400
 80033bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033c4:	2200      	movs	r2, #0
 80033c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80033ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80033ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80033d2:	4642      	mov	r2, r8
 80033d4:	464b      	mov	r3, r9
 80033d6:	1891      	adds	r1, r2, r2
 80033d8:	6239      	str	r1, [r7, #32]
 80033da:	415b      	adcs	r3, r3
 80033dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80033de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033e2:	4641      	mov	r1, r8
 80033e4:	1854      	adds	r4, r2, r1
 80033e6:	4649      	mov	r1, r9
 80033e8:	eb43 0501 	adc.w	r5, r3, r1
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	f04f 0300 	mov.w	r3, #0
 80033f4:	00eb      	lsls	r3, r5, #3
 80033f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033fa:	00e2      	lsls	r2, r4, #3
 80033fc:	4614      	mov	r4, r2
 80033fe:	461d      	mov	r5, r3
 8003400:	4643      	mov	r3, r8
 8003402:	18e3      	adds	r3, r4, r3
 8003404:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003408:	464b      	mov	r3, r9
 800340a:	eb45 0303 	adc.w	r3, r5, r3
 800340e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800341e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003422:	f04f 0200 	mov.w	r2, #0
 8003426:	f04f 0300 	mov.w	r3, #0
 800342a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800342e:	4629      	mov	r1, r5
 8003430:	008b      	lsls	r3, r1, #2
 8003432:	4621      	mov	r1, r4
 8003434:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003438:	4621      	mov	r1, r4
 800343a:	008a      	lsls	r2, r1, #2
 800343c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003440:	f7fc fee6 	bl	8000210 <__aeabi_uldivmod>
 8003444:	4602      	mov	r2, r0
 8003446:	460b      	mov	r3, r1
 8003448:	4b60      	ldr	r3, [pc, #384]	@ (80035cc <UART_SetConfig+0x4e4>)
 800344a:	fba3 2302 	umull	r2, r3, r3, r2
 800344e:	095b      	lsrs	r3, r3, #5
 8003450:	011c      	lsls	r4, r3, #4
 8003452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003456:	2200      	movs	r2, #0
 8003458:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800345c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003460:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003464:	4642      	mov	r2, r8
 8003466:	464b      	mov	r3, r9
 8003468:	1891      	adds	r1, r2, r2
 800346a:	61b9      	str	r1, [r7, #24]
 800346c:	415b      	adcs	r3, r3
 800346e:	61fb      	str	r3, [r7, #28]
 8003470:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003474:	4641      	mov	r1, r8
 8003476:	1851      	adds	r1, r2, r1
 8003478:	6139      	str	r1, [r7, #16]
 800347a:	4649      	mov	r1, r9
 800347c:	414b      	adcs	r3, r1
 800347e:	617b      	str	r3, [r7, #20]
 8003480:	f04f 0200 	mov.w	r2, #0
 8003484:	f04f 0300 	mov.w	r3, #0
 8003488:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800348c:	4659      	mov	r1, fp
 800348e:	00cb      	lsls	r3, r1, #3
 8003490:	4651      	mov	r1, sl
 8003492:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003496:	4651      	mov	r1, sl
 8003498:	00ca      	lsls	r2, r1, #3
 800349a:	4610      	mov	r0, r2
 800349c:	4619      	mov	r1, r3
 800349e:	4603      	mov	r3, r0
 80034a0:	4642      	mov	r2, r8
 80034a2:	189b      	adds	r3, r3, r2
 80034a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034a8:	464b      	mov	r3, r9
 80034aa:	460a      	mov	r2, r1
 80034ac:	eb42 0303 	adc.w	r3, r2, r3
 80034b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80034b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80034be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80034c0:	f04f 0200 	mov.w	r2, #0
 80034c4:	f04f 0300 	mov.w	r3, #0
 80034c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80034cc:	4649      	mov	r1, r9
 80034ce:	008b      	lsls	r3, r1, #2
 80034d0:	4641      	mov	r1, r8
 80034d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034d6:	4641      	mov	r1, r8
 80034d8:	008a      	lsls	r2, r1, #2
 80034da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80034de:	f7fc fe97 	bl	8000210 <__aeabi_uldivmod>
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	4611      	mov	r1, r2
 80034e8:	4b38      	ldr	r3, [pc, #224]	@ (80035cc <UART_SetConfig+0x4e4>)
 80034ea:	fba3 2301 	umull	r2, r3, r3, r1
 80034ee:	095b      	lsrs	r3, r3, #5
 80034f0:	2264      	movs	r2, #100	@ 0x64
 80034f2:	fb02 f303 	mul.w	r3, r2, r3
 80034f6:	1acb      	subs	r3, r1, r3
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	3332      	adds	r3, #50	@ 0x32
 80034fc:	4a33      	ldr	r2, [pc, #204]	@ (80035cc <UART_SetConfig+0x4e4>)
 80034fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003502:	095b      	lsrs	r3, r3, #5
 8003504:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003508:	441c      	add	r4, r3
 800350a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800350e:	2200      	movs	r2, #0
 8003510:	673b      	str	r3, [r7, #112]	@ 0x70
 8003512:	677a      	str	r2, [r7, #116]	@ 0x74
 8003514:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003518:	4642      	mov	r2, r8
 800351a:	464b      	mov	r3, r9
 800351c:	1891      	adds	r1, r2, r2
 800351e:	60b9      	str	r1, [r7, #8]
 8003520:	415b      	adcs	r3, r3
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003528:	4641      	mov	r1, r8
 800352a:	1851      	adds	r1, r2, r1
 800352c:	6039      	str	r1, [r7, #0]
 800352e:	4649      	mov	r1, r9
 8003530:	414b      	adcs	r3, r1
 8003532:	607b      	str	r3, [r7, #4]
 8003534:	f04f 0200 	mov.w	r2, #0
 8003538:	f04f 0300 	mov.w	r3, #0
 800353c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003540:	4659      	mov	r1, fp
 8003542:	00cb      	lsls	r3, r1, #3
 8003544:	4651      	mov	r1, sl
 8003546:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800354a:	4651      	mov	r1, sl
 800354c:	00ca      	lsls	r2, r1, #3
 800354e:	4610      	mov	r0, r2
 8003550:	4619      	mov	r1, r3
 8003552:	4603      	mov	r3, r0
 8003554:	4642      	mov	r2, r8
 8003556:	189b      	adds	r3, r3, r2
 8003558:	66bb      	str	r3, [r7, #104]	@ 0x68
 800355a:	464b      	mov	r3, r9
 800355c:	460a      	mov	r2, r1
 800355e:	eb42 0303 	adc.w	r3, r2, r3
 8003562:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	663b      	str	r3, [r7, #96]	@ 0x60
 800356e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800357c:	4649      	mov	r1, r9
 800357e:	008b      	lsls	r3, r1, #2
 8003580:	4641      	mov	r1, r8
 8003582:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003586:	4641      	mov	r1, r8
 8003588:	008a      	lsls	r2, r1, #2
 800358a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800358e:	f7fc fe3f 	bl	8000210 <__aeabi_uldivmod>
 8003592:	4602      	mov	r2, r0
 8003594:	460b      	mov	r3, r1
 8003596:	4b0d      	ldr	r3, [pc, #52]	@ (80035cc <UART_SetConfig+0x4e4>)
 8003598:	fba3 1302 	umull	r1, r3, r3, r2
 800359c:	095b      	lsrs	r3, r3, #5
 800359e:	2164      	movs	r1, #100	@ 0x64
 80035a0:	fb01 f303 	mul.w	r3, r1, r3
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	011b      	lsls	r3, r3, #4
 80035a8:	3332      	adds	r3, #50	@ 0x32
 80035aa:	4a08      	ldr	r2, [pc, #32]	@ (80035cc <UART_SetConfig+0x4e4>)
 80035ac:	fba2 2303 	umull	r2, r3, r2, r3
 80035b0:	095b      	lsrs	r3, r3, #5
 80035b2:	f003 020f 	and.w	r2, r3, #15
 80035b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4422      	add	r2, r4
 80035be:	609a      	str	r2, [r3, #8]
}
 80035c0:	bf00      	nop
 80035c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80035c6:	46bd      	mov	sp, r7
 80035c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035cc:	51eb851f 	.word	0x51eb851f

080035d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035d0:	b084      	sub	sp, #16
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b084      	sub	sp, #16
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
 80035da:	f107 001c 	add.w	r0, r7, #28
 80035de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80035e2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d123      	bne.n	8003632 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80035fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003612:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003616:	2b01      	cmp	r3, #1
 8003618:	d105      	bne.n	8003626 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fa9a 	bl	8003b60 <USB_CoreReset>
 800362c:	4603      	mov	r3, r0
 800362e:	73fb      	strb	r3, [r7, #15]
 8003630:	e01b      	b.n	800366a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 fa8e 	bl	8003b60 <USB_CoreReset>
 8003644:	4603      	mov	r3, r0
 8003646:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003648:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800364c:	2b00      	cmp	r3, #0
 800364e:	d106      	bne.n	800365e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003654:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	639a      	str	r2, [r3, #56]	@ 0x38
 800365c:	e005      	b.n	800366a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003662:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800366a:	7fbb      	ldrb	r3, [r7, #30]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d10b      	bne.n	8003688 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f043 0206 	orr.w	r2, r3, #6
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f043 0220 	orr.w	r2, r3, #32
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003688:	7bfb      	ldrb	r3, [r7, #15]
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003694:	b004      	add	sp, #16
 8003696:	4770      	bx	lr

08003698 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f023 0201 	bic.w	r2, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b084      	sub	sp, #16
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	460b      	mov	r3, r1
 80036c4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80036d6:	78fb      	ldrb	r3, [r7, #3]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d115      	bne.n	8003708 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80036e8:	200a      	movs	r0, #10
 80036ea:	f7fd fbcb 	bl	8000e84 <HAL_Delay>
      ms += 10U;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	330a      	adds	r3, #10
 80036f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 fa25 	bl	8003b44 <USB_GetMode>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d01e      	beq.n	800373e <USB_SetCurrentMode+0x84>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2bc7      	cmp	r3, #199	@ 0xc7
 8003704:	d9f0      	bls.n	80036e8 <USB_SetCurrentMode+0x2e>
 8003706:	e01a      	b.n	800373e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003708:	78fb      	ldrb	r3, [r7, #3]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d115      	bne.n	800373a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800371a:	200a      	movs	r0, #10
 800371c:	f7fd fbb2 	bl	8000e84 <HAL_Delay>
      ms += 10U;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	330a      	adds	r3, #10
 8003724:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fa0c 	bl	8003b44 <USB_GetMode>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d005      	beq.n	800373e <USB_SetCurrentMode+0x84>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2bc7      	cmp	r3, #199	@ 0xc7
 8003736:	d9f0      	bls.n	800371a <USB_SetCurrentMode+0x60>
 8003738:	e001      	b.n	800373e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e005      	b.n	800374a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2bc8      	cmp	r3, #200	@ 0xc8
 8003742:	d101      	bne.n	8003748 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e000      	b.n	800374a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
	...

08003754 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003754:	b084      	sub	sp, #16
 8003756:	b580      	push	{r7, lr}
 8003758:	b086      	sub	sp, #24
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003762:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800376e:	2300      	movs	r3, #0
 8003770:	613b      	str	r3, [r7, #16]
 8003772:	e009      	b.n	8003788 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	3340      	adds	r3, #64	@ 0x40
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	2200      	movs	r2, #0
 8003780:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	3301      	adds	r3, #1
 8003786:	613b      	str	r3, [r7, #16]
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	2b0e      	cmp	r3, #14
 800378c:	d9f2      	bls.n	8003774 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800378e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003792:	2b00      	cmp	r3, #0
 8003794:	d11c      	bne.n	80037d0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037a4:	f043 0302 	orr.w	r3, r3, #2
 80037a8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ae:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	e005      	b.n	80037dc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80037e2:	461a      	mov	r2, r3
 80037e4:	2300      	movs	r3, #0
 80037e6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80037e8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d10d      	bne.n	800380c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80037f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d104      	bne.n	8003802 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80037f8:	2100      	movs	r1, #0
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f968 	bl	8003ad0 <USB_SetDevSpeed>
 8003800:	e008      	b.n	8003814 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003802:	2101      	movs	r1, #1
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f963 	bl	8003ad0 <USB_SetDevSpeed>
 800380a:	e003      	b.n	8003814 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800380c:	2103      	movs	r1, #3
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f95e 	bl	8003ad0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003814:	2110      	movs	r1, #16
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f8fa 	bl	8003a10 <USB_FlushTxFifo>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f924 	bl	8003a74 <USB_FlushRxFifo>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800383c:	461a      	mov	r2, r3
 800383e:	2300      	movs	r3, #0
 8003840:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003848:	461a      	mov	r2, r3
 800384a:	2300      	movs	r3, #0
 800384c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003854:	461a      	mov	r2, r3
 8003856:	2300      	movs	r3, #0
 8003858:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800385a:	2300      	movs	r3, #0
 800385c:	613b      	str	r3, [r7, #16]
 800385e:	e043      	b.n	80038e8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	015a      	lsls	r2, r3, #5
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4413      	add	r3, r2
 8003868:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003872:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003876:	d118      	bne.n	80038aa <USB_DevInit+0x156>
    {
      if (i == 0U)
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10a      	bne.n	8003894 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	015a      	lsls	r2, r3, #5
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	4413      	add	r3, r2
 8003886:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800388a:	461a      	mov	r2, r3
 800388c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	e013      	b.n	80038bc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	015a      	lsls	r2, r3, #5
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4413      	add	r3, r2
 800389c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038a0:	461a      	mov	r2, r3
 80038a2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	e008      	b.n	80038bc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	015a      	lsls	r2, r3, #5
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038b6:	461a      	mov	r2, r3
 80038b8:	2300      	movs	r3, #0
 80038ba:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	015a      	lsls	r2, r3, #5
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4413      	add	r3, r2
 80038c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038c8:	461a      	mov	r2, r3
 80038ca:	2300      	movs	r3, #0
 80038cc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	015a      	lsls	r2, r3, #5
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038da:	461a      	mov	r2, r3
 80038dc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80038e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	3301      	adds	r3, #1
 80038e6:	613b      	str	r3, [r7, #16]
 80038e8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80038ec:	461a      	mov	r2, r3
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d3b5      	bcc.n	8003860 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038f4:	2300      	movs	r3, #0
 80038f6:	613b      	str	r3, [r7, #16]
 80038f8:	e043      	b.n	8003982 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	015a      	lsls	r2, r3, #5
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4413      	add	r3, r2
 8003902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800390c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003910:	d118      	bne.n	8003944 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10a      	bne.n	800392e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4413      	add	r3, r2
 8003920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003924:	461a      	mov	r2, r3
 8003926:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800392a:	6013      	str	r3, [r2, #0]
 800392c:	e013      	b.n	8003956 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	015a      	lsls	r2, r3, #5
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	4413      	add	r3, r2
 8003936:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800393a:	461a      	mov	r2, r3
 800393c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	e008      	b.n	8003956 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	015a      	lsls	r2, r3, #5
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4413      	add	r3, r2
 800394c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003950:	461a      	mov	r2, r3
 8003952:	2300      	movs	r3, #0
 8003954:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	015a      	lsls	r2, r3, #5
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4413      	add	r3, r2
 800395e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003962:	461a      	mov	r2, r3
 8003964:	2300      	movs	r3, #0
 8003966:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	015a      	lsls	r2, r3, #5
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4413      	add	r3, r2
 8003970:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003974:	461a      	mov	r2, r3
 8003976:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800397a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	3301      	adds	r3, #1
 8003980:	613b      	str	r3, [r7, #16]
 8003982:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003986:	461a      	mov	r2, r3
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	4293      	cmp	r3, r2
 800398c:	d3b5      	bcc.n	80038fa <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800399c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039a0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80039ae:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80039b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d105      	bne.n	80039c4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	f043 0210 	orr.w	r2, r3, #16
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	699a      	ldr	r2, [r3, #24]
 80039c8:	4b10      	ldr	r3, [pc, #64]	@ (8003a0c <USB_DevInit+0x2b8>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80039d0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d005      	beq.n	80039e4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	f043 0208 	orr.w	r2, r3, #8
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80039e4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d107      	bne.n	80039fc <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80039f4:	f043 0304 	orr.w	r3, r3, #4
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80039fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a08:	b004      	add	sp, #16
 8003a0a:	4770      	bx	lr
 8003a0c:	803c3800 	.word	0x803c3800

08003a10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	3301      	adds	r3, #1
 8003a22:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003a2a:	d901      	bls.n	8003a30 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e01b      	b.n	8003a68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	daf2      	bge.n	8003a1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	019b      	lsls	r3, r3, #6
 8003a40:	f043 0220 	orr.w	r2, r3, #32
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003a54:	d901      	bls.n	8003a5a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e006      	b.n	8003a68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f003 0320 	and.w	r3, r3, #32
 8003a62:	2b20      	cmp	r3, #32
 8003a64:	d0f0      	beq.n	8003a48 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3714      	adds	r7, #20
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	3301      	adds	r3, #1
 8003a84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003a8c:	d901      	bls.n	8003a92 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e018      	b.n	8003ac4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	daf2      	bge.n	8003a80 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2210      	movs	r2, #16
 8003aa2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003ab0:	d901      	bls.n	8003ab6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e006      	b.n	8003ac4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	f003 0310 	and.w	r3, r3, #16
 8003abe:	2b10      	cmp	r3, #16
 8003ac0:	d0f0      	beq.n	8003aa4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3714      	adds	r7, #20
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	460b      	mov	r3, r1
 8003ada:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	78fb      	ldrb	r3, [r7, #3]
 8003aea:	68f9      	ldr	r1, [r7, #12]
 8003aec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003af0:	4313      	orrs	r3, r2
 8003af2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3714      	adds	r7, #20
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b085      	sub	sp, #20
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003b1c:	f023 0303 	bic.w	r3, r3, #3
 8003b20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b30:	f043 0302 	orr.w	r3, r3, #2
 8003b34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3714      	adds	r7, #20
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	f003 0301 	and.w	r3, r3, #1
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b78:	d901      	bls.n	8003b7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e022      	b.n	8003bc4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	daf2      	bge.n	8003b6c <USB_CoreReset+0xc>

  count = 10U;
 8003b86:	230a      	movs	r3, #10
 8003b88:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8003b8a:	e002      	b.n	8003b92 <USB_CoreReset+0x32>
  {
    count--;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1f9      	bne.n	8003b8c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	f043 0201 	orr.w	r2, r3, #1
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003bb0:	d901      	bls.n	8003bb6 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e006      	b.n	8003bc4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d0f0      	beq.n	8003ba4 <USB_CoreReset+0x44>

  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <__NVIC_SetPriority>:
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	6039      	str	r1, [r7, #0]
 8003bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	db0a      	blt.n	8003bfa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	490c      	ldr	r1, [pc, #48]	@ (8003c1c <__NVIC_SetPriority+0x4c>)
 8003bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bee:	0112      	lsls	r2, r2, #4
 8003bf0:	b2d2      	uxtb	r2, r2
 8003bf2:	440b      	add	r3, r1
 8003bf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003bf8:	e00a      	b.n	8003c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	4908      	ldr	r1, [pc, #32]	@ (8003c20 <__NVIC_SetPriority+0x50>)
 8003c00:	79fb      	ldrb	r3, [r7, #7]
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	3b04      	subs	r3, #4
 8003c08:	0112      	lsls	r2, r2, #4
 8003c0a:	b2d2      	uxtb	r2, r2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	761a      	strb	r2, [r3, #24]
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	e000e100 	.word	0xe000e100
 8003c20:	e000ed00 	.word	0xe000ed00

08003c24 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003c28:	2100      	movs	r1, #0
 8003c2a:	f06f 0004 	mvn.w	r0, #4
 8003c2e:	f7ff ffcf 	bl	8003bd0 <__NVIC_SetPriority>
#endif
}
 8003c32:	bf00      	nop
 8003c34:	bd80      	pop	{r7, pc}
	...

08003c38 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c3e:	f3ef 8305 	mrs	r3, IPSR
 8003c42:	603b      	str	r3, [r7, #0]
  return(result);
 8003c44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003c4a:	f06f 0305 	mvn.w	r3, #5
 8003c4e:	607b      	str	r3, [r7, #4]
 8003c50:	e00c      	b.n	8003c6c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003c52:	4b0a      	ldr	r3, [pc, #40]	@ (8003c7c <osKernelInitialize+0x44>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d105      	bne.n	8003c66 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003c5a:	4b08      	ldr	r3, [pc, #32]	@ (8003c7c <osKernelInitialize+0x44>)
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003c60:	2300      	movs	r3, #0
 8003c62:	607b      	str	r3, [r7, #4]
 8003c64:	e002      	b.n	8003c6c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003c66:	f04f 33ff 	mov.w	r3, #4294967295
 8003c6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003c6c:	687b      	ldr	r3, [r7, #4]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	200005c4 	.word	0x200005c4

08003c80 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c86:	f3ef 8305 	mrs	r3, IPSR
 8003c8a:	603b      	str	r3, [r7, #0]
  return(result);
 8003c8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003c92:	f06f 0305 	mvn.w	r3, #5
 8003c96:	607b      	str	r3, [r7, #4]
 8003c98:	e010      	b.n	8003cbc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc8 <osKernelStart+0x48>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d109      	bne.n	8003cb6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003ca2:	f7ff ffbf 	bl	8003c24 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003ca6:	4b08      	ldr	r3, [pc, #32]	@ (8003cc8 <osKernelStart+0x48>)
 8003ca8:	2202      	movs	r2, #2
 8003caa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003cac:	f001 f87a 	bl	8004da4 <vTaskStartScheduler>
      stat = osOK;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	607b      	str	r3, [r7, #4]
 8003cb4:	e002      	b.n	8003cbc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003cbc:	687b      	ldr	r3, [r7, #4]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	200005c4 	.word	0x200005c4

08003ccc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b08e      	sub	sp, #56	@ 0x38
 8003cd0:	af04      	add	r7, sp, #16
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cdc:	f3ef 8305 	mrs	r3, IPSR
 8003ce0:	617b      	str	r3, [r7, #20]
  return(result);
 8003ce2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d17e      	bne.n	8003de6 <osThreadNew+0x11a>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d07b      	beq.n	8003de6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003cee:	2380      	movs	r3, #128	@ 0x80
 8003cf0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003cf2:	2318      	movs	r3, #24
 8003cf4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003cfe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d045      	beq.n	8003d92 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d002      	beq.n	8003d14 <osThreadNew+0x48>
        name = attr->name;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d008      	beq.n	8003d3a <osThreadNew+0x6e>
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	2b38      	cmp	r3, #56	@ 0x38
 8003d2c:	d805      	bhi.n	8003d3a <osThreadNew+0x6e>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <osThreadNew+0x72>
        return (NULL);
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	e054      	b.n	8003de8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	089b      	lsrs	r3, r3, #2
 8003d4c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00e      	beq.n	8003d74 <osThreadNew+0xa8>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	2b5b      	cmp	r3, #91	@ 0x5b
 8003d5c:	d90a      	bls.n	8003d74 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d006      	beq.n	8003d74 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d002      	beq.n	8003d74 <osThreadNew+0xa8>
        mem = 1;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	61bb      	str	r3, [r7, #24]
 8003d72:	e010      	b.n	8003d96 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10c      	bne.n	8003d96 <osThreadNew+0xca>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d108      	bne.n	8003d96 <osThreadNew+0xca>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d104      	bne.n	8003d96 <osThreadNew+0xca>
          mem = 0;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	61bb      	str	r3, [r7, #24]
 8003d90:	e001      	b.n	8003d96 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003d92:	2300      	movs	r3, #0
 8003d94:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d110      	bne.n	8003dbe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003da4:	9202      	str	r2, [sp, #8]
 8003da6:	9301      	str	r3, [sp, #4]
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	6a3a      	ldr	r2, [r7, #32]
 8003db0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f000 fe1a 	bl	80049ec <xTaskCreateStatic>
 8003db8:	4603      	mov	r3, r0
 8003dba:	613b      	str	r3, [r7, #16]
 8003dbc:	e013      	b.n	8003de6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d110      	bne.n	8003de6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003dc4:	6a3b      	ldr	r3, [r7, #32]
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	f107 0310 	add.w	r3, r7, #16
 8003dcc:	9301      	str	r3, [sp, #4]
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 fe68 	bl	8004aac <xTaskCreate>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d001      	beq.n	8003de6 <osThreadNew+0x11a>
            hTask = NULL;
 8003de2:	2300      	movs	r3, #0
 8003de4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003de6:	693b      	ldr	r3, [r7, #16]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3728      	adds	r7, #40	@ 0x28
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003df8:	f3ef 8305 	mrs	r3, IPSR
 8003dfc:	60bb      	str	r3, [r7, #8]
  return(result);
 8003dfe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <osDelay+0x1c>
    stat = osErrorISR;
 8003e04:	f06f 0305 	mvn.w	r3, #5
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	e007      	b.n	8003e1c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d002      	beq.n	8003e1c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 ff8e 	bl	8004d38 <vTaskDelay>
    }
  }

  return (stat);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
	...

08003e28 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	4a07      	ldr	r2, [pc, #28]	@ (8003e54 <vApplicationGetIdleTaskMemory+0x2c>)
 8003e38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	4a06      	ldr	r2, [pc, #24]	@ (8003e58 <vApplicationGetIdleTaskMemory+0x30>)
 8003e3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2280      	movs	r2, #128	@ 0x80
 8003e44:	601a      	str	r2, [r3, #0]
}
 8003e46:	bf00      	nop
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	200005c8 	.word	0x200005c8
 8003e58:	20000624 	.word	0x20000624

08003e5c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4a07      	ldr	r2, [pc, #28]	@ (8003e88 <vApplicationGetTimerTaskMemory+0x2c>)
 8003e6c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	4a06      	ldr	r2, [pc, #24]	@ (8003e8c <vApplicationGetTimerTaskMemory+0x30>)
 8003e72:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e7a:	601a      	str	r2, [r3, #0]
}
 8003e7c:	bf00      	nop
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr
 8003e88:	20000824 	.word	0x20000824
 8003e8c:	20000880 	.word	0x20000880

08003e90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f103 0208 	add.w	r2, r3, #8
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ea8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f103 0208 	add.w	r2, r3, #8
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f103 0208 	add.w	r2, r3, #8
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003eea:	b480      	push	{r7}
 8003eec:	b085      	sub	sp, #20
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
 8003ef2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	1c5a      	adds	r2, r3, #1
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	601a      	str	r2, [r3, #0]
}
 8003f26:	bf00      	nop
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f32:	b480      	push	{r7}
 8003f34:	b085      	sub	sp, #20
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
 8003f3a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f48:	d103      	bne.n	8003f52 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	60fb      	str	r3, [r7, #12]
 8003f50:	e00c      	b.n	8003f6c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3308      	adds	r3, #8
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	e002      	b.n	8003f60 <vListInsert+0x2e>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d2f6      	bcs.n	8003f5a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	1c5a      	adds	r2, r3, #1
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	601a      	str	r2, [r3, #0]
}
 8003f98:	bf00      	nop
 8003f9a:	3714      	adds	r7, #20
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6892      	ldr	r2, [r2, #8]
 8003fba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6852      	ldr	r2, [r2, #4]
 8003fc4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d103      	bne.n	8003fd8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	1e5a      	subs	r2, r3, #1
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10b      	bne.n	8004024 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800400c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004010:	f383 8811 	msr	BASEPRI, r3
 8004014:	f3bf 8f6f 	isb	sy
 8004018:	f3bf 8f4f 	dsb	sy
 800401c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800401e:	bf00      	nop
 8004020:	bf00      	nop
 8004022:	e7fd      	b.n	8004020 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004024:	f002 f878 	bl	8006118 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004030:	68f9      	ldr	r1, [r7, #12]
 8004032:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004034:	fb01 f303 	mul.w	r3, r1, r3
 8004038:	441a      	add	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004054:	3b01      	subs	r3, #1
 8004056:	68f9      	ldr	r1, [r7, #12]
 8004058:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800405a:	fb01 f303 	mul.w	r3, r1, r3
 800405e:	441a      	add	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	22ff      	movs	r2, #255	@ 0xff
 8004068:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	22ff      	movs	r2, #255	@ 0xff
 8004070:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d114      	bne.n	80040a4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d01a      	beq.n	80040b8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	3310      	adds	r3, #16
 8004086:	4618      	mov	r0, r3
 8004088:	f001 f91a 	bl	80052c0 <xTaskRemoveFromEventList>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d012      	beq.n	80040b8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004092:	4b0d      	ldr	r3, [pc, #52]	@ (80040c8 <xQueueGenericReset+0xd0>)
 8004094:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	f3bf 8f4f 	dsb	sy
 800409e:	f3bf 8f6f 	isb	sy
 80040a2:	e009      	b.n	80040b8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	3310      	adds	r3, #16
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7ff fef1 	bl	8003e90 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	3324      	adds	r3, #36	@ 0x24
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7ff feec 	bl	8003e90 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80040b8:	f002 f860 	bl	800617c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80040bc:	2301      	movs	r3, #1
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	e000ed04 	.word	0xe000ed04

080040cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b08e      	sub	sp, #56	@ 0x38
 80040d0:	af02      	add	r7, sp, #8
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
 80040d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10b      	bne.n	80040f8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80040e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040e4:	f383 8811 	msr	BASEPRI, r3
 80040e8:	f3bf 8f6f 	isb	sy
 80040ec:	f3bf 8f4f 	dsb	sy
 80040f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80040f2:	bf00      	nop
 80040f4:	bf00      	nop
 80040f6:	e7fd      	b.n	80040f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10b      	bne.n	8004116 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80040fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004102:	f383 8811 	msr	BASEPRI, r3
 8004106:	f3bf 8f6f 	isb	sy
 800410a:	f3bf 8f4f 	dsb	sy
 800410e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004110:	bf00      	nop
 8004112:	bf00      	nop
 8004114:	e7fd      	b.n	8004112 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d002      	beq.n	8004122 <xQueueGenericCreateStatic+0x56>
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <xQueueGenericCreateStatic+0x5a>
 8004122:	2301      	movs	r3, #1
 8004124:	e000      	b.n	8004128 <xQueueGenericCreateStatic+0x5c>
 8004126:	2300      	movs	r3, #0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10b      	bne.n	8004144 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800412c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004130:	f383 8811 	msr	BASEPRI, r3
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	623b      	str	r3, [r7, #32]
}
 800413e:	bf00      	nop
 8004140:	bf00      	nop
 8004142:	e7fd      	b.n	8004140 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d102      	bne.n	8004150 <xQueueGenericCreateStatic+0x84>
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <xQueueGenericCreateStatic+0x88>
 8004150:	2301      	movs	r3, #1
 8004152:	e000      	b.n	8004156 <xQueueGenericCreateStatic+0x8a>
 8004154:	2300      	movs	r3, #0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10b      	bne.n	8004172 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800415a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800415e:	f383 8811 	msr	BASEPRI, r3
 8004162:	f3bf 8f6f 	isb	sy
 8004166:	f3bf 8f4f 	dsb	sy
 800416a:	61fb      	str	r3, [r7, #28]
}
 800416c:	bf00      	nop
 800416e:	bf00      	nop
 8004170:	e7fd      	b.n	800416e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004172:	2350      	movs	r3, #80	@ 0x50
 8004174:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	2b50      	cmp	r3, #80	@ 0x50
 800417a:	d00b      	beq.n	8004194 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800417c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004180:	f383 8811 	msr	BASEPRI, r3
 8004184:	f3bf 8f6f 	isb	sy
 8004188:	f3bf 8f4f 	dsb	sy
 800418c:	61bb      	str	r3, [r7, #24]
}
 800418e:	bf00      	nop
 8004190:	bf00      	nop
 8004192:	e7fd      	b.n	8004190 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004194:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800419a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00d      	beq.n	80041bc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80041a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80041a8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80041ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	4613      	mov	r3, r2
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	68b9      	ldr	r1, [r7, #8]
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 f805 	bl	80041c6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80041bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80041be:	4618      	mov	r0, r3
 80041c0:	3730      	adds	r7, #48	@ 0x30
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b084      	sub	sp, #16
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	60f8      	str	r0, [r7, #12]
 80041ce:	60b9      	str	r1, [r7, #8]
 80041d0:	607a      	str	r2, [r7, #4]
 80041d2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d103      	bne.n	80041e2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	e002      	b.n	80041e8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80041f4:	2101      	movs	r1, #1
 80041f6:	69b8      	ldr	r0, [r7, #24]
 80041f8:	f7ff fefe 	bl	8003ff8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	78fa      	ldrb	r2, [r7, #3]
 8004200:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004204:	bf00      	nop
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b08e      	sub	sp, #56	@ 0x38
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
 8004218:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800421a:	2300      	movs	r3, #0
 800421c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10b      	bne.n	8004240 <xQueueGenericSend+0x34>
	__asm volatile
 8004228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800422c:	f383 8811 	msr	BASEPRI, r3
 8004230:	f3bf 8f6f 	isb	sy
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800423a:	bf00      	nop
 800423c:	bf00      	nop
 800423e:	e7fd      	b.n	800423c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d103      	bne.n	800424e <xQueueGenericSend+0x42>
 8004246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <xQueueGenericSend+0x46>
 800424e:	2301      	movs	r3, #1
 8004250:	e000      	b.n	8004254 <xQueueGenericSend+0x48>
 8004252:	2300      	movs	r3, #0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10b      	bne.n	8004270 <xQueueGenericSend+0x64>
	__asm volatile
 8004258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800425c:	f383 8811 	msr	BASEPRI, r3
 8004260:	f3bf 8f6f 	isb	sy
 8004264:	f3bf 8f4f 	dsb	sy
 8004268:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800426a:	bf00      	nop
 800426c:	bf00      	nop
 800426e:	e7fd      	b.n	800426c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	2b02      	cmp	r3, #2
 8004274:	d103      	bne.n	800427e <xQueueGenericSend+0x72>
 8004276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800427a:	2b01      	cmp	r3, #1
 800427c:	d101      	bne.n	8004282 <xQueueGenericSend+0x76>
 800427e:	2301      	movs	r3, #1
 8004280:	e000      	b.n	8004284 <xQueueGenericSend+0x78>
 8004282:	2300      	movs	r3, #0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10b      	bne.n	80042a0 <xQueueGenericSend+0x94>
	__asm volatile
 8004288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800428c:	f383 8811 	msr	BASEPRI, r3
 8004290:	f3bf 8f6f 	isb	sy
 8004294:	f3bf 8f4f 	dsb	sy
 8004298:	623b      	str	r3, [r7, #32]
}
 800429a:	bf00      	nop
 800429c:	bf00      	nop
 800429e:	e7fd      	b.n	800429c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042a0:	f001 f9ce 	bl	8005640 <xTaskGetSchedulerState>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d102      	bne.n	80042b0 <xQueueGenericSend+0xa4>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <xQueueGenericSend+0xa8>
 80042b0:	2301      	movs	r3, #1
 80042b2:	e000      	b.n	80042b6 <xQueueGenericSend+0xaa>
 80042b4:	2300      	movs	r3, #0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10b      	bne.n	80042d2 <xQueueGenericSend+0xc6>
	__asm volatile
 80042ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042be:	f383 8811 	msr	BASEPRI, r3
 80042c2:	f3bf 8f6f 	isb	sy
 80042c6:	f3bf 8f4f 	dsb	sy
 80042ca:	61fb      	str	r3, [r7, #28]
}
 80042cc:	bf00      	nop
 80042ce:	bf00      	nop
 80042d0:	e7fd      	b.n	80042ce <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80042d2:	f001 ff21 	bl	8006118 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042de:	429a      	cmp	r2, r3
 80042e0:	d302      	bcc.n	80042e8 <xQueueGenericSend+0xdc>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d129      	bne.n	800433c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	68b9      	ldr	r1, [r7, #8]
 80042ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80042ee:	f000 fa0f 	bl	8004710 <prvCopyDataToQueue>
 80042f2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d010      	beq.n	800431e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042fe:	3324      	adds	r3, #36	@ 0x24
 8004300:	4618      	mov	r0, r3
 8004302:	f000 ffdd 	bl	80052c0 <xTaskRemoveFromEventList>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d013      	beq.n	8004334 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800430c:	4b3f      	ldr	r3, [pc, #252]	@ (800440c <xQueueGenericSend+0x200>)
 800430e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004312:	601a      	str	r2, [r3, #0]
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	f3bf 8f6f 	isb	sy
 800431c:	e00a      	b.n	8004334 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800431e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004320:	2b00      	cmp	r3, #0
 8004322:	d007      	beq.n	8004334 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004324:	4b39      	ldr	r3, [pc, #228]	@ (800440c <xQueueGenericSend+0x200>)
 8004326:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004334:	f001 ff22 	bl	800617c <vPortExitCritical>
				return pdPASS;
 8004338:	2301      	movs	r3, #1
 800433a:	e063      	b.n	8004404 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d103      	bne.n	800434a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004342:	f001 ff1b 	bl	800617c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004346:	2300      	movs	r3, #0
 8004348:	e05c      	b.n	8004404 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800434a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800434c:	2b00      	cmp	r3, #0
 800434e:	d106      	bne.n	800435e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004350:	f107 0314 	add.w	r3, r7, #20
 8004354:	4618      	mov	r0, r3
 8004356:	f001 f817 	bl	8005388 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800435a:	2301      	movs	r3, #1
 800435c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800435e:	f001 ff0d 	bl	800617c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004362:	f000 fd87 	bl	8004e74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004366:	f001 fed7 	bl	8006118 <vPortEnterCritical>
 800436a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800436c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004370:	b25b      	sxtb	r3, r3
 8004372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004376:	d103      	bne.n	8004380 <xQueueGenericSend+0x174>
 8004378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004382:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004386:	b25b      	sxtb	r3, r3
 8004388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438c:	d103      	bne.n	8004396 <xQueueGenericSend+0x18a>
 800438e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004396:	f001 fef1 	bl	800617c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800439a:	1d3a      	adds	r2, r7, #4
 800439c:	f107 0314 	add.w	r3, r7, #20
 80043a0:	4611      	mov	r1, r2
 80043a2:	4618      	mov	r0, r3
 80043a4:	f001 f806 	bl	80053b4 <xTaskCheckForTimeOut>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d124      	bne.n	80043f8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80043ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80043b0:	f000 faa6 	bl	8004900 <prvIsQueueFull>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d018      	beq.n	80043ec <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80043ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043bc:	3310      	adds	r3, #16
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	4611      	mov	r1, r2
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 ff2a 	bl	800521c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80043c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80043ca:	f000 fa31 	bl	8004830 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80043ce:	f000 fd5f 	bl	8004e90 <xTaskResumeAll>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f47f af7c 	bne.w	80042d2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80043da:	4b0c      	ldr	r3, [pc, #48]	@ (800440c <xQueueGenericSend+0x200>)
 80043dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	f3bf 8f4f 	dsb	sy
 80043e6:	f3bf 8f6f 	isb	sy
 80043ea:	e772      	b.n	80042d2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80043ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80043ee:	f000 fa1f 	bl	8004830 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043f2:	f000 fd4d 	bl	8004e90 <xTaskResumeAll>
 80043f6:	e76c      	b.n	80042d2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80043f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80043fa:	f000 fa19 	bl	8004830 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043fe:	f000 fd47 	bl	8004e90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004402:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004404:	4618      	mov	r0, r3
 8004406:	3738      	adds	r7, #56	@ 0x38
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	e000ed04 	.word	0xe000ed04

08004410 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b090      	sub	sp, #64	@ 0x40
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
 800441c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10b      	bne.n	8004440 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800442c:	f383 8811 	msr	BASEPRI, r3
 8004430:	f3bf 8f6f 	isb	sy
 8004434:	f3bf 8f4f 	dsb	sy
 8004438:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800443a:	bf00      	nop
 800443c:	bf00      	nop
 800443e:	e7fd      	b.n	800443c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d103      	bne.n	800444e <xQueueGenericSendFromISR+0x3e>
 8004446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <xQueueGenericSendFromISR+0x42>
 800444e:	2301      	movs	r3, #1
 8004450:	e000      	b.n	8004454 <xQueueGenericSendFromISR+0x44>
 8004452:	2300      	movs	r3, #0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10b      	bne.n	8004470 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800445c:	f383 8811 	msr	BASEPRI, r3
 8004460:	f3bf 8f6f 	isb	sy
 8004464:	f3bf 8f4f 	dsb	sy
 8004468:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800446a:	bf00      	nop
 800446c:	bf00      	nop
 800446e:	e7fd      	b.n	800446c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	2b02      	cmp	r3, #2
 8004474:	d103      	bne.n	800447e <xQueueGenericSendFromISR+0x6e>
 8004476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800447a:	2b01      	cmp	r3, #1
 800447c:	d101      	bne.n	8004482 <xQueueGenericSendFromISR+0x72>
 800447e:	2301      	movs	r3, #1
 8004480:	e000      	b.n	8004484 <xQueueGenericSendFromISR+0x74>
 8004482:	2300      	movs	r3, #0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10b      	bne.n	80044a0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800448c:	f383 8811 	msr	BASEPRI, r3
 8004490:	f3bf 8f6f 	isb	sy
 8004494:	f3bf 8f4f 	dsb	sy
 8004498:	623b      	str	r3, [r7, #32]
}
 800449a:	bf00      	nop
 800449c:	bf00      	nop
 800449e:	e7fd      	b.n	800449c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80044a0:	f001 ff1a 	bl	80062d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80044a4:	f3ef 8211 	mrs	r2, BASEPRI
 80044a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ac:	f383 8811 	msr	BASEPRI, r3
 80044b0:	f3bf 8f6f 	isb	sy
 80044b4:	f3bf 8f4f 	dsb	sy
 80044b8:	61fa      	str	r2, [r7, #28]
 80044ba:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80044bc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80044be:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d302      	bcc.n	80044d2 <xQueueGenericSendFromISR+0xc2>
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d12f      	bne.n	8004532 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80044d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80044d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	68b9      	ldr	r1, [r7, #8]
 80044e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80044e8:	f000 f912 	bl	8004710 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80044ec:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80044f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f4:	d112      	bne.n	800451c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d016      	beq.n	800452c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004500:	3324      	adds	r3, #36	@ 0x24
 8004502:	4618      	mov	r0, r3
 8004504:	f000 fedc 	bl	80052c0 <xTaskRemoveFromEventList>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00e      	beq.n	800452c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00b      	beq.n	800452c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	e007      	b.n	800452c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800451c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004520:	3301      	adds	r3, #1
 8004522:	b2db      	uxtb	r3, r3
 8004524:	b25a      	sxtb	r2, r3
 8004526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004528:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800452c:	2301      	movs	r3, #1
 800452e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004530:	e001      	b.n	8004536 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004532:	2300      	movs	r3, #0
 8004534:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004538:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004540:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004544:	4618      	mov	r0, r3
 8004546:	3740      	adds	r7, #64	@ 0x40
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b08c      	sub	sp, #48	@ 0x30
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004558:	2300      	movs	r3, #0
 800455a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10b      	bne.n	800457e <xQueueReceive+0x32>
	__asm volatile
 8004566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800456a:	f383 8811 	msr	BASEPRI, r3
 800456e:	f3bf 8f6f 	isb	sy
 8004572:	f3bf 8f4f 	dsb	sy
 8004576:	623b      	str	r3, [r7, #32]
}
 8004578:	bf00      	nop
 800457a:	bf00      	nop
 800457c:	e7fd      	b.n	800457a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d103      	bne.n	800458c <xQueueReceive+0x40>
 8004584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <xQueueReceive+0x44>
 800458c:	2301      	movs	r3, #1
 800458e:	e000      	b.n	8004592 <xQueueReceive+0x46>
 8004590:	2300      	movs	r3, #0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10b      	bne.n	80045ae <xQueueReceive+0x62>
	__asm volatile
 8004596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800459a:	f383 8811 	msr	BASEPRI, r3
 800459e:	f3bf 8f6f 	isb	sy
 80045a2:	f3bf 8f4f 	dsb	sy
 80045a6:	61fb      	str	r3, [r7, #28]
}
 80045a8:	bf00      	nop
 80045aa:	bf00      	nop
 80045ac:	e7fd      	b.n	80045aa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045ae:	f001 f847 	bl	8005640 <xTaskGetSchedulerState>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d102      	bne.n	80045be <xQueueReceive+0x72>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <xQueueReceive+0x76>
 80045be:	2301      	movs	r3, #1
 80045c0:	e000      	b.n	80045c4 <xQueueReceive+0x78>
 80045c2:	2300      	movs	r3, #0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10b      	bne.n	80045e0 <xQueueReceive+0x94>
	__asm volatile
 80045c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045cc:	f383 8811 	msr	BASEPRI, r3
 80045d0:	f3bf 8f6f 	isb	sy
 80045d4:	f3bf 8f4f 	dsb	sy
 80045d8:	61bb      	str	r3, [r7, #24]
}
 80045da:	bf00      	nop
 80045dc:	bf00      	nop
 80045de:	e7fd      	b.n	80045dc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045e0:	f001 fd9a 	bl	8006118 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d01f      	beq.n	8004630 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80045f0:	68b9      	ldr	r1, [r7, #8]
 80045f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045f4:	f000 f8f6 	bl	80047e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80045f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fa:	1e5a      	subs	r2, r3, #1
 80045fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045fe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00f      	beq.n	8004628 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800460a:	3310      	adds	r3, #16
 800460c:	4618      	mov	r0, r3
 800460e:	f000 fe57 	bl	80052c0 <xTaskRemoveFromEventList>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d007      	beq.n	8004628 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004618:	4b3c      	ldr	r3, [pc, #240]	@ (800470c <xQueueReceive+0x1c0>)
 800461a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	f3bf 8f4f 	dsb	sy
 8004624:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004628:	f001 fda8 	bl	800617c <vPortExitCritical>
				return pdPASS;
 800462c:	2301      	movs	r3, #1
 800462e:	e069      	b.n	8004704 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d103      	bne.n	800463e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004636:	f001 fda1 	bl	800617c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800463a:	2300      	movs	r3, #0
 800463c:	e062      	b.n	8004704 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800463e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004640:	2b00      	cmp	r3, #0
 8004642:	d106      	bne.n	8004652 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004644:	f107 0310 	add.w	r3, r7, #16
 8004648:	4618      	mov	r0, r3
 800464a:	f000 fe9d 	bl	8005388 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800464e:	2301      	movs	r3, #1
 8004650:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004652:	f001 fd93 	bl	800617c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004656:	f000 fc0d 	bl	8004e74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800465a:	f001 fd5d 	bl	8006118 <vPortEnterCritical>
 800465e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004660:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004664:	b25b      	sxtb	r3, r3
 8004666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800466a:	d103      	bne.n	8004674 <xQueueReceive+0x128>
 800466c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800466e:	2200      	movs	r2, #0
 8004670:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004676:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800467a:	b25b      	sxtb	r3, r3
 800467c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004680:	d103      	bne.n	800468a <xQueueReceive+0x13e>
 8004682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004684:	2200      	movs	r2, #0
 8004686:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800468a:	f001 fd77 	bl	800617c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800468e:	1d3a      	adds	r2, r7, #4
 8004690:	f107 0310 	add.w	r3, r7, #16
 8004694:	4611      	mov	r1, r2
 8004696:	4618      	mov	r0, r3
 8004698:	f000 fe8c 	bl	80053b4 <xTaskCheckForTimeOut>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d123      	bne.n	80046ea <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046a4:	f000 f916 	bl	80048d4 <prvIsQueueEmpty>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d017      	beq.n	80046de <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80046ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b0:	3324      	adds	r3, #36	@ 0x24
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	4611      	mov	r1, r2
 80046b6:	4618      	mov	r0, r3
 80046b8:	f000 fdb0 	bl	800521c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80046bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046be:	f000 f8b7 	bl	8004830 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80046c2:	f000 fbe5 	bl	8004e90 <xTaskResumeAll>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d189      	bne.n	80045e0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80046cc:	4b0f      	ldr	r3, [pc, #60]	@ (800470c <xQueueReceive+0x1c0>)
 80046ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	f3bf 8f4f 	dsb	sy
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	e780      	b.n	80045e0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80046de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046e0:	f000 f8a6 	bl	8004830 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046e4:	f000 fbd4 	bl	8004e90 <xTaskResumeAll>
 80046e8:	e77a      	b.n	80045e0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80046ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046ec:	f000 f8a0 	bl	8004830 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046f0:	f000 fbce 	bl	8004e90 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046f6:	f000 f8ed 	bl	80048d4 <prvIsQueueEmpty>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f43f af6f 	beq.w	80045e0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004702:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004704:	4618      	mov	r0, r3
 8004706:	3730      	adds	r7, #48	@ 0x30
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	e000ed04 	.word	0xe000ed04

08004710 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800471c:	2300      	movs	r3, #0
 800471e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004724:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10d      	bne.n	800474a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d14d      	bne.n	80047d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	4618      	mov	r0, r3
 800473c:	f000 ff9e 	bl	800567c <xTaskPriorityDisinherit>
 8004740:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	609a      	str	r2, [r3, #8]
 8004748:	e043      	b.n	80047d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d119      	bne.n	8004784 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6858      	ldr	r0, [r3, #4]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004758:	461a      	mov	r2, r3
 800475a:	68b9      	ldr	r1, [r7, #8]
 800475c:	f002 f818 	bl	8006790 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004768:	441a      	add	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	429a      	cmp	r2, r3
 8004778:	d32b      	bcc.n	80047d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	605a      	str	r2, [r3, #4]
 8004782:	e026      	b.n	80047d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	68d8      	ldr	r0, [r3, #12]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478c:	461a      	mov	r2, r3
 800478e:	68b9      	ldr	r1, [r7, #8]
 8004790:	f001 fffe 	bl	8006790 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	68da      	ldr	r2, [r3, #12]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800479c:	425b      	negs	r3, r3
 800479e:	441a      	add	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d207      	bcs.n	80047c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b8:	425b      	negs	r3, r3
 80047ba:	441a      	add	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d105      	bne.n	80047d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	3b01      	subs	r3, #1
 80047d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1c5a      	adds	r2, r3, #1
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80047da:	697b      	ldr	r3, [r7, #20]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3718      	adds	r7, #24
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d018      	beq.n	8004828 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68da      	ldr	r2, [r3, #12]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fe:	441a      	add	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68da      	ldr	r2, [r3, #12]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	429a      	cmp	r2, r3
 800480e:	d303      	bcc.n	8004818 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68d9      	ldr	r1, [r3, #12]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004820:	461a      	mov	r2, r3
 8004822:	6838      	ldr	r0, [r7, #0]
 8004824:	f001 ffb4 	bl	8006790 <memcpy>
	}
}
 8004828:	bf00      	nop
 800482a:	3708      	adds	r7, #8
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004838:	f001 fc6e 	bl	8006118 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004842:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004844:	e011      	b.n	800486a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484a:	2b00      	cmp	r3, #0
 800484c:	d012      	beq.n	8004874 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	3324      	adds	r3, #36	@ 0x24
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fd34 	bl	80052c0 <xTaskRemoveFromEventList>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800485e:	f000 fe0d 	bl	800547c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004862:	7bfb      	ldrb	r3, [r7, #15]
 8004864:	3b01      	subs	r3, #1
 8004866:	b2db      	uxtb	r3, r3
 8004868:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800486a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800486e:	2b00      	cmp	r3, #0
 8004870:	dce9      	bgt.n	8004846 <prvUnlockQueue+0x16>
 8004872:	e000      	b.n	8004876 <prvUnlockQueue+0x46>
					break;
 8004874:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	22ff      	movs	r2, #255	@ 0xff
 800487a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800487e:	f001 fc7d 	bl	800617c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004882:	f001 fc49 	bl	8006118 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800488c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800488e:	e011      	b.n	80048b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d012      	beq.n	80048be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3310      	adds	r3, #16
 800489c:	4618      	mov	r0, r3
 800489e:	f000 fd0f 	bl	80052c0 <xTaskRemoveFromEventList>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80048a8:	f000 fde8 	bl	800547c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80048ac:	7bbb      	ldrb	r3, [r7, #14]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	dce9      	bgt.n	8004890 <prvUnlockQueue+0x60>
 80048bc:	e000      	b.n	80048c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80048be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	22ff      	movs	r2, #255	@ 0xff
 80048c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80048c8:	f001 fc58 	bl	800617c <vPortExitCritical>
}
 80048cc:	bf00      	nop
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80048dc:	f001 fc1c 	bl	8006118 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d102      	bne.n	80048ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80048e8:	2301      	movs	r3, #1
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	e001      	b.n	80048f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80048ee:	2300      	movs	r3, #0
 80048f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80048f2:	f001 fc43 	bl	800617c <vPortExitCritical>

	return xReturn;
 80048f6:	68fb      	ldr	r3, [r7, #12]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004908:	f001 fc06 	bl	8006118 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004914:	429a      	cmp	r2, r3
 8004916:	d102      	bne.n	800491e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004918:	2301      	movs	r3, #1
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	e001      	b.n	8004922 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800491e:	2300      	movs	r3, #0
 8004920:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004922:	f001 fc2b 	bl	800617c <vPortExitCritical>

	return xReturn;
 8004926:	68fb      	ldr	r3, [r7, #12]
}
 8004928:	4618      	mov	r0, r3
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800493a:	2300      	movs	r3, #0
 800493c:	60fb      	str	r3, [r7, #12]
 800493e:	e014      	b.n	800496a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004940:	4a0f      	ldr	r2, [pc, #60]	@ (8004980 <vQueueAddToRegistry+0x50>)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10b      	bne.n	8004964 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800494c:	490c      	ldr	r1, [pc, #48]	@ (8004980 <vQueueAddToRegistry+0x50>)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004956:	4a0a      	ldr	r2, [pc, #40]	@ (8004980 <vQueueAddToRegistry+0x50>)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	4413      	add	r3, r2
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004962:	e006      	b.n	8004972 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	3301      	adds	r3, #1
 8004968:	60fb      	str	r3, [r7, #12]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2b07      	cmp	r3, #7
 800496e:	d9e7      	bls.n	8004940 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004970:	bf00      	nop
 8004972:	bf00      	nop
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	20000c80 	.word	0x20000c80

08004984 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004994:	f001 fbc0 	bl	8006118 <vPortEnterCritical>
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800499e:	b25b      	sxtb	r3, r3
 80049a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a4:	d103      	bne.n	80049ae <vQueueWaitForMessageRestricted+0x2a>
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80049b4:	b25b      	sxtb	r3, r3
 80049b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ba:	d103      	bne.n	80049c4 <vQueueWaitForMessageRestricted+0x40>
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80049c4:	f001 fbda 	bl	800617c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d106      	bne.n	80049de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	3324      	adds	r3, #36	@ 0x24
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	68b9      	ldr	r1, [r7, #8]
 80049d8:	4618      	mov	r0, r3
 80049da:	f000 fc45 	bl	8005268 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80049de:	6978      	ldr	r0, [r7, #20]
 80049e0:	f7ff ff26 	bl	8004830 <prvUnlockQueue>
	}
 80049e4:	bf00      	nop
 80049e6:	3718      	adds	r7, #24
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b08e      	sub	sp, #56	@ 0x38
 80049f0:	af04      	add	r7, sp, #16
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
 80049f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80049fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10b      	bne.n	8004a18 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a04:	f383 8811 	msr	BASEPRI, r3
 8004a08:	f3bf 8f6f 	isb	sy
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	623b      	str	r3, [r7, #32]
}
 8004a12:	bf00      	nop
 8004a14:	bf00      	nop
 8004a16:	e7fd      	b.n	8004a14 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10b      	bne.n	8004a36 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	61fb      	str	r3, [r7, #28]
}
 8004a30:	bf00      	nop
 8004a32:	bf00      	nop
 8004a34:	e7fd      	b.n	8004a32 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a36:	235c      	movs	r3, #92	@ 0x5c
 8004a38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	2b5c      	cmp	r3, #92	@ 0x5c
 8004a3e:	d00b      	beq.n	8004a58 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a44:	f383 8811 	msr	BASEPRI, r3
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	61bb      	str	r3, [r7, #24]
}
 8004a52:	bf00      	nop
 8004a54:	bf00      	nop
 8004a56:	e7fd      	b.n	8004a54 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004a58:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d01e      	beq.n	8004a9e <xTaskCreateStatic+0xb2>
 8004a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d01b      	beq.n	8004a9e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a68:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a6e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a72:	2202      	movs	r2, #2
 8004a74:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a78:	2300      	movs	r3, #0
 8004a7a:	9303      	str	r3, [sp, #12]
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7e:	9302      	str	r3, [sp, #8]
 8004a80:	f107 0314 	add.w	r3, r7, #20
 8004a84:	9301      	str	r3, [sp, #4]
 8004a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	68b9      	ldr	r1, [r7, #8]
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 f850 	bl	8004b36 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a96:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004a98:	f000 f8de 	bl	8004c58 <prvAddNewTaskToReadyList>
 8004a9c:	e001      	b.n	8004aa2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004aa2:	697b      	ldr	r3, [r7, #20]
	}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3728      	adds	r7, #40	@ 0x28
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b08c      	sub	sp, #48	@ 0x30
 8004ab0:	af04      	add	r7, sp, #16
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	603b      	str	r3, [r7, #0]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004abc:	88fb      	ldrh	r3, [r7, #6]
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f001 fc4b 	bl	800635c <pvPortMalloc>
 8004ac6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00e      	beq.n	8004aec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004ace:	205c      	movs	r0, #92	@ 0x5c
 8004ad0:	f001 fc44 	bl	800635c <pvPortMalloc>
 8004ad4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ae2:	e005      	b.n	8004af0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ae4:	6978      	ldr	r0, [r7, #20]
 8004ae6:	f001 fd07 	bl	80064f8 <vPortFree>
 8004aea:	e001      	b.n	8004af0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004aec:	2300      	movs	r3, #0
 8004aee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d017      	beq.n	8004b26 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004afe:	88fa      	ldrh	r2, [r7, #6]
 8004b00:	2300      	movs	r3, #0
 8004b02:	9303      	str	r3, [sp, #12]
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	9302      	str	r3, [sp, #8]
 8004b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b0a:	9301      	str	r3, [sp, #4]
 8004b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	68b9      	ldr	r1, [r7, #8]
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 f80e 	bl	8004b36 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b1a:	69f8      	ldr	r0, [r7, #28]
 8004b1c:	f000 f89c 	bl	8004c58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b20:	2301      	movs	r3, #1
 8004b22:	61bb      	str	r3, [r7, #24]
 8004b24:	e002      	b.n	8004b2c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b26:	f04f 33ff 	mov.w	r3, #4294967295
 8004b2a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b2c:	69bb      	ldr	r3, [r7, #24]
	}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3720      	adds	r7, #32
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b088      	sub	sp, #32
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	60f8      	str	r0, [r7, #12]
 8004b3e:	60b9      	str	r1, [r7, #8]
 8004b40:	607a      	str	r2, [r7, #4]
 8004b42:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b46:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	21a5      	movs	r1, #165	@ 0xa5
 8004b50:	f001 fdf2 	bl	8006738 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4413      	add	r3, r2
 8004b64:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	f023 0307 	bic.w	r3, r3, #7
 8004b6c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	f003 0307 	and.w	r3, r3, #7
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00b      	beq.n	8004b90 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b7c:	f383 8811 	msr	BASEPRI, r3
 8004b80:	f3bf 8f6f 	isb	sy
 8004b84:	f3bf 8f4f 	dsb	sy
 8004b88:	617b      	str	r3, [r7, #20]
}
 8004b8a:	bf00      	nop
 8004b8c:	bf00      	nop
 8004b8e:	e7fd      	b.n	8004b8c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d01f      	beq.n	8004bd6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b96:	2300      	movs	r3, #0
 8004b98:	61fb      	str	r3, [r7, #28]
 8004b9a:	e012      	b.n	8004bc2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	7819      	ldrb	r1, [r3, #0]
 8004ba4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	4413      	add	r3, r2
 8004baa:	3334      	adds	r3, #52	@ 0x34
 8004bac:	460a      	mov	r2, r1
 8004bae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d006      	beq.n	8004bca <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	61fb      	str	r3, [r7, #28]
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	2b0f      	cmp	r3, #15
 8004bc6:	d9e9      	bls.n	8004b9c <prvInitialiseNewTask+0x66>
 8004bc8:	e000      	b.n	8004bcc <prvInitialiseNewTask+0x96>
			{
				break;
 8004bca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004bd4:	e003      	b.n	8004bde <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be0:	2b37      	cmp	r3, #55	@ 0x37
 8004be2:	d901      	bls.n	8004be8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004be4:	2337      	movs	r3, #55	@ 0x37
 8004be6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004bec:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004bf2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7ff f966 	bl	8003ed0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c06:	3318      	adds	r3, #24
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7ff f961 	bl	8003ed0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c16:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c22:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c26:	2200      	movs	r2, #0
 8004c28:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c32:	683a      	ldr	r2, [r7, #0]
 8004c34:	68f9      	ldr	r1, [r7, #12]
 8004c36:	69b8      	ldr	r0, [r7, #24]
 8004c38:	f001 f93e 	bl	8005eb8 <pxPortInitialiseStack>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c40:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d002      	beq.n	8004c4e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c4e:	bf00      	nop
 8004c50:	3720      	adds	r7, #32
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
	...

08004c58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c60:	f001 fa5a 	bl	8006118 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c64:	4b2d      	ldr	r3, [pc, #180]	@ (8004d1c <prvAddNewTaskToReadyList+0xc4>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	4a2c      	ldr	r2, [pc, #176]	@ (8004d1c <prvAddNewTaskToReadyList+0xc4>)
 8004c6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c6e:	4b2c      	ldr	r3, [pc, #176]	@ (8004d20 <prvAddNewTaskToReadyList+0xc8>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d109      	bne.n	8004c8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004c76:	4a2a      	ldr	r2, [pc, #168]	@ (8004d20 <prvAddNewTaskToReadyList+0xc8>)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c7c:	4b27      	ldr	r3, [pc, #156]	@ (8004d1c <prvAddNewTaskToReadyList+0xc4>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d110      	bne.n	8004ca6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004c84:	f000 fc1e 	bl	80054c4 <prvInitialiseTaskLists>
 8004c88:	e00d      	b.n	8004ca6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004c8a:	4b26      	ldr	r3, [pc, #152]	@ (8004d24 <prvAddNewTaskToReadyList+0xcc>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d109      	bne.n	8004ca6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c92:	4b23      	ldr	r3, [pc, #140]	@ (8004d20 <prvAddNewTaskToReadyList+0xc8>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d802      	bhi.n	8004ca6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004ca0:	4a1f      	ldr	r2, [pc, #124]	@ (8004d20 <prvAddNewTaskToReadyList+0xc8>)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004ca6:	4b20      	ldr	r3, [pc, #128]	@ (8004d28 <prvAddNewTaskToReadyList+0xd0>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	3301      	adds	r3, #1
 8004cac:	4a1e      	ldr	r2, [pc, #120]	@ (8004d28 <prvAddNewTaskToReadyList+0xd0>)
 8004cae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8004d28 <prvAddNewTaskToReadyList+0xd0>)
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8004d2c <prvAddNewTaskToReadyList+0xd4>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d903      	bls.n	8004ccc <prvAddNewTaskToReadyList+0x74>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc8:	4a18      	ldr	r2, [pc, #96]	@ (8004d2c <prvAddNewTaskToReadyList+0xd4>)
 8004cca:	6013      	str	r3, [r2, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4a15      	ldr	r2, [pc, #84]	@ (8004d30 <prvAddNewTaskToReadyList+0xd8>)
 8004cda:	441a      	add	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	3304      	adds	r3, #4
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	4610      	mov	r0, r2
 8004ce4:	f7ff f901 	bl	8003eea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ce8:	f001 fa48 	bl	800617c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004cec:	4b0d      	ldr	r3, [pc, #52]	@ (8004d24 <prvAddNewTaskToReadyList+0xcc>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00e      	beq.n	8004d12 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8004d20 <prvAddNewTaskToReadyList+0xc8>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d207      	bcs.n	8004d12 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d02:	4b0c      	ldr	r3, [pc, #48]	@ (8004d34 <prvAddNewTaskToReadyList+0xdc>)
 8004d04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d12:	bf00      	nop
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	20001194 	.word	0x20001194
 8004d20:	20000cc0 	.word	0x20000cc0
 8004d24:	200011a0 	.word	0x200011a0
 8004d28:	200011b0 	.word	0x200011b0
 8004d2c:	2000119c 	.word	0x2000119c
 8004d30:	20000cc4 	.word	0x20000cc4
 8004d34:	e000ed04 	.word	0xe000ed04

08004d38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d40:	2300      	movs	r3, #0
 8004d42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d018      	beq.n	8004d7c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d4a:	4b14      	ldr	r3, [pc, #80]	@ (8004d9c <vTaskDelay+0x64>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00b      	beq.n	8004d6a <vTaskDelay+0x32>
	__asm volatile
 8004d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d56:	f383 8811 	msr	BASEPRI, r3
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	60bb      	str	r3, [r7, #8]
}
 8004d64:	bf00      	nop
 8004d66:	bf00      	nop
 8004d68:	e7fd      	b.n	8004d66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004d6a:	f000 f883 	bl	8004e74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d6e:	2100      	movs	r1, #0
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 fcf3 	bl	800575c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004d76:	f000 f88b 	bl	8004e90 <xTaskResumeAll>
 8004d7a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d107      	bne.n	8004d92 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004d82:	4b07      	ldr	r3, [pc, #28]	@ (8004da0 <vTaskDelay+0x68>)
 8004d84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d92:	bf00      	nop
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	200011bc 	.word	0x200011bc
 8004da0:	e000ed04 	.word	0xe000ed04

08004da4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b08a      	sub	sp, #40	@ 0x28
 8004da8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004daa:	2300      	movs	r3, #0
 8004dac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004dae:	2300      	movs	r3, #0
 8004db0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004db2:	463a      	mov	r2, r7
 8004db4:	1d39      	adds	r1, r7, #4
 8004db6:	f107 0308 	add.w	r3, r7, #8
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7ff f834 	bl	8003e28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004dc0:	6839      	ldr	r1, [r7, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	9202      	str	r2, [sp, #8]
 8004dc8:	9301      	str	r3, [sp, #4]
 8004dca:	2300      	movs	r3, #0
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	2300      	movs	r3, #0
 8004dd0:	460a      	mov	r2, r1
 8004dd2:	4922      	ldr	r1, [pc, #136]	@ (8004e5c <vTaskStartScheduler+0xb8>)
 8004dd4:	4822      	ldr	r0, [pc, #136]	@ (8004e60 <vTaskStartScheduler+0xbc>)
 8004dd6:	f7ff fe09 	bl	80049ec <xTaskCreateStatic>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	4a21      	ldr	r2, [pc, #132]	@ (8004e64 <vTaskStartScheduler+0xc0>)
 8004dde:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004de0:	4b20      	ldr	r3, [pc, #128]	@ (8004e64 <vTaskStartScheduler+0xc0>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d002      	beq.n	8004dee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004de8:	2301      	movs	r3, #1
 8004dea:	617b      	str	r3, [r7, #20]
 8004dec:	e001      	b.n	8004df2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004dee:	2300      	movs	r3, #0
 8004df0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d102      	bne.n	8004dfe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004df8:	f000 fd04 	bl	8005804 <xTimerCreateTimerTask>
 8004dfc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d116      	bne.n	8004e32 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e08:	f383 8811 	msr	BASEPRI, r3
 8004e0c:	f3bf 8f6f 	isb	sy
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	613b      	str	r3, [r7, #16]
}
 8004e16:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e18:	4b13      	ldr	r3, [pc, #76]	@ (8004e68 <vTaskStartScheduler+0xc4>)
 8004e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e1e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e20:	4b12      	ldr	r3, [pc, #72]	@ (8004e6c <vTaskStartScheduler+0xc8>)
 8004e22:	2201      	movs	r2, #1
 8004e24:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e26:	4b12      	ldr	r3, [pc, #72]	@ (8004e70 <vTaskStartScheduler+0xcc>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e2c:	f001 f8d0 	bl	8005fd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e30:	e00f      	b.n	8004e52 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e38:	d10b      	bne.n	8004e52 <vTaskStartScheduler+0xae>
	__asm volatile
 8004e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e3e:	f383 8811 	msr	BASEPRI, r3
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	60fb      	str	r3, [r7, #12]
}
 8004e4c:	bf00      	nop
 8004e4e:	bf00      	nop
 8004e50:	e7fd      	b.n	8004e4e <vTaskStartScheduler+0xaa>
}
 8004e52:	bf00      	nop
 8004e54:	3718      	adds	r7, #24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	080067dc 	.word	0x080067dc
 8004e60:	08005495 	.word	0x08005495
 8004e64:	200011b8 	.word	0x200011b8
 8004e68:	200011b4 	.word	0x200011b4
 8004e6c:	200011a0 	.word	0x200011a0
 8004e70:	20001198 	.word	0x20001198

08004e74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e74:	b480      	push	{r7}
 8004e76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004e78:	4b04      	ldr	r3, [pc, #16]	@ (8004e8c <vTaskSuspendAll+0x18>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	4a03      	ldr	r2, [pc, #12]	@ (8004e8c <vTaskSuspendAll+0x18>)
 8004e80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004e82:	bf00      	nop
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	200011bc 	.word	0x200011bc

08004e90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004e96:	2300      	movs	r3, #0
 8004e98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004e9e:	4b42      	ldr	r3, [pc, #264]	@ (8004fa8 <xTaskResumeAll+0x118>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10b      	bne.n	8004ebe <xTaskResumeAll+0x2e>
	__asm volatile
 8004ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eaa:	f383 8811 	msr	BASEPRI, r3
 8004eae:	f3bf 8f6f 	isb	sy
 8004eb2:	f3bf 8f4f 	dsb	sy
 8004eb6:	603b      	str	r3, [r7, #0]
}
 8004eb8:	bf00      	nop
 8004eba:	bf00      	nop
 8004ebc:	e7fd      	b.n	8004eba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ebe:	f001 f92b 	bl	8006118 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ec2:	4b39      	ldr	r3, [pc, #228]	@ (8004fa8 <xTaskResumeAll+0x118>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	4a37      	ldr	r2, [pc, #220]	@ (8004fa8 <xTaskResumeAll+0x118>)
 8004eca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ecc:	4b36      	ldr	r3, [pc, #216]	@ (8004fa8 <xTaskResumeAll+0x118>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d162      	bne.n	8004f9a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ed4:	4b35      	ldr	r3, [pc, #212]	@ (8004fac <xTaskResumeAll+0x11c>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d05e      	beq.n	8004f9a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004edc:	e02f      	b.n	8004f3e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ede:	4b34      	ldr	r3, [pc, #208]	@ (8004fb0 <xTaskResumeAll+0x120>)
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	3318      	adds	r3, #24
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7ff f85a 	bl	8003fa4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	3304      	adds	r3, #4
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7ff f855 	bl	8003fa4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004efe:	4b2d      	ldr	r3, [pc, #180]	@ (8004fb4 <xTaskResumeAll+0x124>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d903      	bls.n	8004f0e <xTaskResumeAll+0x7e>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0a:	4a2a      	ldr	r2, [pc, #168]	@ (8004fb4 <xTaskResumeAll+0x124>)
 8004f0c:	6013      	str	r3, [r2, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f12:	4613      	mov	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4413      	add	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4a27      	ldr	r2, [pc, #156]	@ (8004fb8 <xTaskResumeAll+0x128>)
 8004f1c:	441a      	add	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	3304      	adds	r3, #4
 8004f22:	4619      	mov	r1, r3
 8004f24:	4610      	mov	r0, r2
 8004f26:	f7fe ffe0 	bl	8003eea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f2e:	4b23      	ldr	r3, [pc, #140]	@ (8004fbc <xTaskResumeAll+0x12c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d302      	bcc.n	8004f3e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004f38:	4b21      	ldr	r3, [pc, #132]	@ (8004fc0 <xTaskResumeAll+0x130>)
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f3e:	4b1c      	ldr	r3, [pc, #112]	@ (8004fb0 <xTaskResumeAll+0x120>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1cb      	bne.n	8004ede <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d001      	beq.n	8004f50 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f4c:	f000 fb58 	bl	8005600 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004f50:	4b1c      	ldr	r3, [pc, #112]	@ (8004fc4 <xTaskResumeAll+0x134>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d010      	beq.n	8004f7e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f5c:	f000 f846 	bl	8004fec <xTaskIncrementTick>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d002      	beq.n	8004f6c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004f66:	4b16      	ldr	r3, [pc, #88]	@ (8004fc0 <xTaskResumeAll+0x130>)
 8004f68:	2201      	movs	r2, #1
 8004f6a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1f1      	bne.n	8004f5c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004f78:	4b12      	ldr	r3, [pc, #72]	@ (8004fc4 <xTaskResumeAll+0x134>)
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f7e:	4b10      	ldr	r3, [pc, #64]	@ (8004fc0 <xTaskResumeAll+0x130>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d009      	beq.n	8004f9a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f86:	2301      	movs	r3, #1
 8004f88:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8004fc8 <xTaskResumeAll+0x138>)
 8004f8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	f3bf 8f4f 	dsb	sy
 8004f96:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f9a:	f001 f8ef 	bl	800617c <vPortExitCritical>

	return xAlreadyYielded;
 8004f9e:	68bb      	ldr	r3, [r7, #8]
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	200011bc 	.word	0x200011bc
 8004fac:	20001194 	.word	0x20001194
 8004fb0:	20001154 	.word	0x20001154
 8004fb4:	2000119c 	.word	0x2000119c
 8004fb8:	20000cc4 	.word	0x20000cc4
 8004fbc:	20000cc0 	.word	0x20000cc0
 8004fc0:	200011a8 	.word	0x200011a8
 8004fc4:	200011a4 	.word	0x200011a4
 8004fc8:	e000ed04 	.word	0xe000ed04

08004fcc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004fd2:	4b05      	ldr	r3, [pc, #20]	@ (8004fe8 <xTaskGetTickCount+0x1c>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004fd8:	687b      	ldr	r3, [r7, #4]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	20001198 	.word	0x20001198

08004fec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ff6:	4b4f      	ldr	r3, [pc, #316]	@ (8005134 <xTaskIncrementTick+0x148>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f040 8090 	bne.w	8005120 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005000:	4b4d      	ldr	r3, [pc, #308]	@ (8005138 <xTaskIncrementTick+0x14c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	3301      	adds	r3, #1
 8005006:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005008:	4a4b      	ldr	r2, [pc, #300]	@ (8005138 <xTaskIncrementTick+0x14c>)
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d121      	bne.n	8005058 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005014:	4b49      	ldr	r3, [pc, #292]	@ (800513c <xTaskIncrementTick+0x150>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00b      	beq.n	8005036 <xTaskIncrementTick+0x4a>
	__asm volatile
 800501e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005022:	f383 8811 	msr	BASEPRI, r3
 8005026:	f3bf 8f6f 	isb	sy
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	603b      	str	r3, [r7, #0]
}
 8005030:	bf00      	nop
 8005032:	bf00      	nop
 8005034:	e7fd      	b.n	8005032 <xTaskIncrementTick+0x46>
 8005036:	4b41      	ldr	r3, [pc, #260]	@ (800513c <xTaskIncrementTick+0x150>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	60fb      	str	r3, [r7, #12]
 800503c:	4b40      	ldr	r3, [pc, #256]	@ (8005140 <xTaskIncrementTick+0x154>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a3e      	ldr	r2, [pc, #248]	@ (800513c <xTaskIncrementTick+0x150>)
 8005042:	6013      	str	r3, [r2, #0]
 8005044:	4a3e      	ldr	r2, [pc, #248]	@ (8005140 <xTaskIncrementTick+0x154>)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6013      	str	r3, [r2, #0]
 800504a:	4b3e      	ldr	r3, [pc, #248]	@ (8005144 <xTaskIncrementTick+0x158>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	3301      	adds	r3, #1
 8005050:	4a3c      	ldr	r2, [pc, #240]	@ (8005144 <xTaskIncrementTick+0x158>)
 8005052:	6013      	str	r3, [r2, #0]
 8005054:	f000 fad4 	bl	8005600 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005058:	4b3b      	ldr	r3, [pc, #236]	@ (8005148 <xTaskIncrementTick+0x15c>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	429a      	cmp	r2, r3
 8005060:	d349      	bcc.n	80050f6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005062:	4b36      	ldr	r3, [pc, #216]	@ (800513c <xTaskIncrementTick+0x150>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d104      	bne.n	8005076 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800506c:	4b36      	ldr	r3, [pc, #216]	@ (8005148 <xTaskIncrementTick+0x15c>)
 800506e:	f04f 32ff 	mov.w	r2, #4294967295
 8005072:	601a      	str	r2, [r3, #0]
					break;
 8005074:	e03f      	b.n	80050f6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005076:	4b31      	ldr	r3, [pc, #196]	@ (800513c <xTaskIncrementTick+0x150>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	429a      	cmp	r2, r3
 800508c:	d203      	bcs.n	8005096 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800508e:	4a2e      	ldr	r2, [pc, #184]	@ (8005148 <xTaskIncrementTick+0x15c>)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005094:	e02f      	b.n	80050f6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	3304      	adds	r3, #4
 800509a:	4618      	mov	r0, r3
 800509c:	f7fe ff82 	bl	8003fa4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d004      	beq.n	80050b2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	3318      	adds	r3, #24
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7fe ff79 	bl	8003fa4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050b6:	4b25      	ldr	r3, [pc, #148]	@ (800514c <xTaskIncrementTick+0x160>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d903      	bls.n	80050c6 <xTaskIncrementTick+0xda>
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c2:	4a22      	ldr	r2, [pc, #136]	@ (800514c <xTaskIncrementTick+0x160>)
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050ca:	4613      	mov	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4413      	add	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4a1f      	ldr	r2, [pc, #124]	@ (8005150 <xTaskIncrementTick+0x164>)
 80050d4:	441a      	add	r2, r3
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	3304      	adds	r3, #4
 80050da:	4619      	mov	r1, r3
 80050dc:	4610      	mov	r0, r2
 80050de:	f7fe ff04 	bl	8003eea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050e6:	4b1b      	ldr	r3, [pc, #108]	@ (8005154 <xTaskIncrementTick+0x168>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d3b8      	bcc.n	8005062 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80050f0:	2301      	movs	r3, #1
 80050f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050f4:	e7b5      	b.n	8005062 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80050f6:	4b17      	ldr	r3, [pc, #92]	@ (8005154 <xTaskIncrementTick+0x168>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050fc:	4914      	ldr	r1, [pc, #80]	@ (8005150 <xTaskIncrementTick+0x164>)
 80050fe:	4613      	mov	r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	4413      	add	r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	440b      	add	r3, r1
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d901      	bls.n	8005112 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800510e:	2301      	movs	r3, #1
 8005110:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005112:	4b11      	ldr	r3, [pc, #68]	@ (8005158 <xTaskIncrementTick+0x16c>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d007      	beq.n	800512a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800511a:	2301      	movs	r3, #1
 800511c:	617b      	str	r3, [r7, #20]
 800511e:	e004      	b.n	800512a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005120:	4b0e      	ldr	r3, [pc, #56]	@ (800515c <xTaskIncrementTick+0x170>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	3301      	adds	r3, #1
 8005126:	4a0d      	ldr	r2, [pc, #52]	@ (800515c <xTaskIncrementTick+0x170>)
 8005128:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800512a:	697b      	ldr	r3, [r7, #20]
}
 800512c:	4618      	mov	r0, r3
 800512e:	3718      	adds	r7, #24
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	200011bc 	.word	0x200011bc
 8005138:	20001198 	.word	0x20001198
 800513c:	2000114c 	.word	0x2000114c
 8005140:	20001150 	.word	0x20001150
 8005144:	200011ac 	.word	0x200011ac
 8005148:	200011b4 	.word	0x200011b4
 800514c:	2000119c 	.word	0x2000119c
 8005150:	20000cc4 	.word	0x20000cc4
 8005154:	20000cc0 	.word	0x20000cc0
 8005158:	200011a8 	.word	0x200011a8
 800515c:	200011a4 	.word	0x200011a4

08005160 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005166:	4b28      	ldr	r3, [pc, #160]	@ (8005208 <vTaskSwitchContext+0xa8>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d003      	beq.n	8005176 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800516e:	4b27      	ldr	r3, [pc, #156]	@ (800520c <vTaskSwitchContext+0xac>)
 8005170:	2201      	movs	r2, #1
 8005172:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005174:	e042      	b.n	80051fc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005176:	4b25      	ldr	r3, [pc, #148]	@ (800520c <vTaskSwitchContext+0xac>)
 8005178:	2200      	movs	r2, #0
 800517a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800517c:	4b24      	ldr	r3, [pc, #144]	@ (8005210 <vTaskSwitchContext+0xb0>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	60fb      	str	r3, [r7, #12]
 8005182:	e011      	b.n	80051a8 <vTaskSwitchContext+0x48>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10b      	bne.n	80051a2 <vTaskSwitchContext+0x42>
	__asm volatile
 800518a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800518e:	f383 8811 	msr	BASEPRI, r3
 8005192:	f3bf 8f6f 	isb	sy
 8005196:	f3bf 8f4f 	dsb	sy
 800519a:	607b      	str	r3, [r7, #4]
}
 800519c:	bf00      	nop
 800519e:	bf00      	nop
 80051a0:	e7fd      	b.n	800519e <vTaskSwitchContext+0x3e>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	3b01      	subs	r3, #1
 80051a6:	60fb      	str	r3, [r7, #12]
 80051a8:	491a      	ldr	r1, [pc, #104]	@ (8005214 <vTaskSwitchContext+0xb4>)
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	4613      	mov	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	440b      	add	r3, r1
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d0e3      	beq.n	8005184 <vTaskSwitchContext+0x24>
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	4613      	mov	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4413      	add	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4a13      	ldr	r2, [pc, #76]	@ (8005214 <vTaskSwitchContext+0xb4>)
 80051c8:	4413      	add	r3, r2
 80051ca:	60bb      	str	r3, [r7, #8]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	605a      	str	r2, [r3, #4]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	3308      	adds	r3, #8
 80051de:	429a      	cmp	r2, r3
 80051e0:	d104      	bne.n	80051ec <vTaskSwitchContext+0x8c>
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	685a      	ldr	r2, [r3, #4]
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	605a      	str	r2, [r3, #4]
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	4a09      	ldr	r2, [pc, #36]	@ (8005218 <vTaskSwitchContext+0xb8>)
 80051f4:	6013      	str	r3, [r2, #0]
 80051f6:	4a06      	ldr	r2, [pc, #24]	@ (8005210 <vTaskSwitchContext+0xb0>)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6013      	str	r3, [r2, #0]
}
 80051fc:	bf00      	nop
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	200011bc 	.word	0x200011bc
 800520c:	200011a8 	.word	0x200011a8
 8005210:	2000119c 	.word	0x2000119c
 8005214:	20000cc4 	.word	0x20000cc4
 8005218:	20000cc0 	.word	0x20000cc0

0800521c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10b      	bne.n	8005244 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800522c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005230:	f383 8811 	msr	BASEPRI, r3
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	60fb      	str	r3, [r7, #12]
}
 800523e:	bf00      	nop
 8005240:	bf00      	nop
 8005242:	e7fd      	b.n	8005240 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005244:	4b07      	ldr	r3, [pc, #28]	@ (8005264 <vTaskPlaceOnEventList+0x48>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	3318      	adds	r3, #24
 800524a:	4619      	mov	r1, r3
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7fe fe70 	bl	8003f32 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005252:	2101      	movs	r1, #1
 8005254:	6838      	ldr	r0, [r7, #0]
 8005256:	f000 fa81 	bl	800575c <prvAddCurrentTaskToDelayedList>
}
 800525a:	bf00      	nop
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	20000cc0 	.word	0x20000cc0

08005268 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10b      	bne.n	8005292 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	617b      	str	r3, [r7, #20]
}
 800528c:	bf00      	nop
 800528e:	bf00      	nop
 8005290:	e7fd      	b.n	800528e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005292:	4b0a      	ldr	r3, [pc, #40]	@ (80052bc <vTaskPlaceOnEventListRestricted+0x54>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	3318      	adds	r3, #24
 8005298:	4619      	mov	r1, r3
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f7fe fe25 	bl	8003eea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d002      	beq.n	80052ac <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80052a6:	f04f 33ff 	mov.w	r3, #4294967295
 80052aa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80052ac:	6879      	ldr	r1, [r7, #4]
 80052ae:	68b8      	ldr	r0, [r7, #8]
 80052b0:	f000 fa54 	bl	800575c <prvAddCurrentTaskToDelayedList>
	}
 80052b4:	bf00      	nop
 80052b6:	3718      	adds	r7, #24
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	20000cc0 	.word	0x20000cc0

080052c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10b      	bne.n	80052ee <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80052d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	60fb      	str	r3, [r7, #12]
}
 80052e8:	bf00      	nop
 80052ea:	bf00      	nop
 80052ec:	e7fd      	b.n	80052ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	3318      	adds	r3, #24
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fe fe56 	bl	8003fa4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005370 <xTaskRemoveFromEventList+0xb0>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d11d      	bne.n	800533c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	3304      	adds	r3, #4
 8005304:	4618      	mov	r0, r3
 8005306:	f7fe fe4d 	bl	8003fa4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800530e:	4b19      	ldr	r3, [pc, #100]	@ (8005374 <xTaskRemoveFromEventList+0xb4>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	429a      	cmp	r2, r3
 8005314:	d903      	bls.n	800531e <xTaskRemoveFromEventList+0x5e>
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800531a:	4a16      	ldr	r2, [pc, #88]	@ (8005374 <xTaskRemoveFromEventList+0xb4>)
 800531c:	6013      	str	r3, [r2, #0]
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005322:	4613      	mov	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4a13      	ldr	r2, [pc, #76]	@ (8005378 <xTaskRemoveFromEventList+0xb8>)
 800532c:	441a      	add	r2, r3
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	3304      	adds	r3, #4
 8005332:	4619      	mov	r1, r3
 8005334:	4610      	mov	r0, r2
 8005336:	f7fe fdd8 	bl	8003eea <vListInsertEnd>
 800533a:	e005      	b.n	8005348 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	3318      	adds	r3, #24
 8005340:	4619      	mov	r1, r3
 8005342:	480e      	ldr	r0, [pc, #56]	@ (800537c <xTaskRemoveFromEventList+0xbc>)
 8005344:	f7fe fdd1 	bl	8003eea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800534c:	4b0c      	ldr	r3, [pc, #48]	@ (8005380 <xTaskRemoveFromEventList+0xc0>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005352:	429a      	cmp	r2, r3
 8005354:	d905      	bls.n	8005362 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005356:	2301      	movs	r3, #1
 8005358:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800535a:	4b0a      	ldr	r3, [pc, #40]	@ (8005384 <xTaskRemoveFromEventList+0xc4>)
 800535c:	2201      	movs	r2, #1
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	e001      	b.n	8005366 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005362:	2300      	movs	r3, #0
 8005364:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005366:	697b      	ldr	r3, [r7, #20]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3718      	adds	r7, #24
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	200011bc 	.word	0x200011bc
 8005374:	2000119c 	.word	0x2000119c
 8005378:	20000cc4 	.word	0x20000cc4
 800537c:	20001154 	.word	0x20001154
 8005380:	20000cc0 	.word	0x20000cc0
 8005384:	200011a8 	.word	0x200011a8

08005388 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005390:	4b06      	ldr	r3, [pc, #24]	@ (80053ac <vTaskInternalSetTimeOutState+0x24>)
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005398:	4b05      	ldr	r3, [pc, #20]	@ (80053b0 <vTaskInternalSetTimeOutState+0x28>)
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	605a      	str	r2, [r3, #4]
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr
 80053ac:	200011ac 	.word	0x200011ac
 80053b0:	20001198 	.word	0x20001198

080053b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b088      	sub	sp, #32
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10b      	bne.n	80053dc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80053c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c8:	f383 8811 	msr	BASEPRI, r3
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	613b      	str	r3, [r7, #16]
}
 80053d6:	bf00      	nop
 80053d8:	bf00      	nop
 80053da:	e7fd      	b.n	80053d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10b      	bne.n	80053fa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80053e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e6:	f383 8811 	msr	BASEPRI, r3
 80053ea:	f3bf 8f6f 	isb	sy
 80053ee:	f3bf 8f4f 	dsb	sy
 80053f2:	60fb      	str	r3, [r7, #12]
}
 80053f4:	bf00      	nop
 80053f6:	bf00      	nop
 80053f8:	e7fd      	b.n	80053f6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80053fa:	f000 fe8d 	bl	8006118 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80053fe:	4b1d      	ldr	r3, [pc, #116]	@ (8005474 <xTaskCheckForTimeOut+0xc0>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005416:	d102      	bne.n	800541e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005418:	2300      	movs	r3, #0
 800541a:	61fb      	str	r3, [r7, #28]
 800541c:	e023      	b.n	8005466 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	4b15      	ldr	r3, [pc, #84]	@ (8005478 <xTaskCheckForTimeOut+0xc4>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	429a      	cmp	r2, r3
 8005428:	d007      	beq.n	800543a <xTaskCheckForTimeOut+0x86>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	429a      	cmp	r2, r3
 8005432:	d302      	bcc.n	800543a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005434:	2301      	movs	r3, #1
 8005436:	61fb      	str	r3, [r7, #28]
 8005438:	e015      	b.n	8005466 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	429a      	cmp	r2, r3
 8005442:	d20b      	bcs.n	800545c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	1ad2      	subs	r2, r2, r3
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f7ff ff99 	bl	8005388 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005456:	2300      	movs	r3, #0
 8005458:	61fb      	str	r3, [r7, #28]
 800545a:	e004      	b.n	8005466 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	2200      	movs	r2, #0
 8005460:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005462:	2301      	movs	r3, #1
 8005464:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005466:	f000 fe89 	bl	800617c <vPortExitCritical>

	return xReturn;
 800546a:	69fb      	ldr	r3, [r7, #28]
}
 800546c:	4618      	mov	r0, r3
 800546e:	3720      	adds	r7, #32
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	20001198 	.word	0x20001198
 8005478:	200011ac 	.word	0x200011ac

0800547c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800547c:	b480      	push	{r7}
 800547e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005480:	4b03      	ldr	r3, [pc, #12]	@ (8005490 <vTaskMissedYield+0x14>)
 8005482:	2201      	movs	r2, #1
 8005484:	601a      	str	r2, [r3, #0]
}
 8005486:	bf00      	nop
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	200011a8 	.word	0x200011a8

08005494 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800549c:	f000 f852 	bl	8005544 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80054a0:	4b06      	ldr	r3, [pc, #24]	@ (80054bc <prvIdleTask+0x28>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d9f9      	bls.n	800549c <prvIdleTask+0x8>
			{
				taskYIELD();
 80054a8:	4b05      	ldr	r3, [pc, #20]	@ (80054c0 <prvIdleTask+0x2c>)
 80054aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80054b8:	e7f0      	b.n	800549c <prvIdleTask+0x8>
 80054ba:	bf00      	nop
 80054bc:	20000cc4 	.word	0x20000cc4
 80054c0:	e000ed04 	.word	0xe000ed04

080054c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054ca:	2300      	movs	r3, #0
 80054cc:	607b      	str	r3, [r7, #4]
 80054ce:	e00c      	b.n	80054ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	4613      	mov	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4413      	add	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	4a12      	ldr	r2, [pc, #72]	@ (8005524 <prvInitialiseTaskLists+0x60>)
 80054dc:	4413      	add	r3, r2
 80054de:	4618      	mov	r0, r3
 80054e0:	f7fe fcd6 	bl	8003e90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	3301      	adds	r3, #1
 80054e8:	607b      	str	r3, [r7, #4]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b37      	cmp	r3, #55	@ 0x37
 80054ee:	d9ef      	bls.n	80054d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80054f0:	480d      	ldr	r0, [pc, #52]	@ (8005528 <prvInitialiseTaskLists+0x64>)
 80054f2:	f7fe fccd 	bl	8003e90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80054f6:	480d      	ldr	r0, [pc, #52]	@ (800552c <prvInitialiseTaskLists+0x68>)
 80054f8:	f7fe fcca 	bl	8003e90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80054fc:	480c      	ldr	r0, [pc, #48]	@ (8005530 <prvInitialiseTaskLists+0x6c>)
 80054fe:	f7fe fcc7 	bl	8003e90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005502:	480c      	ldr	r0, [pc, #48]	@ (8005534 <prvInitialiseTaskLists+0x70>)
 8005504:	f7fe fcc4 	bl	8003e90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005508:	480b      	ldr	r0, [pc, #44]	@ (8005538 <prvInitialiseTaskLists+0x74>)
 800550a:	f7fe fcc1 	bl	8003e90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800550e:	4b0b      	ldr	r3, [pc, #44]	@ (800553c <prvInitialiseTaskLists+0x78>)
 8005510:	4a05      	ldr	r2, [pc, #20]	@ (8005528 <prvInitialiseTaskLists+0x64>)
 8005512:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005514:	4b0a      	ldr	r3, [pc, #40]	@ (8005540 <prvInitialiseTaskLists+0x7c>)
 8005516:	4a05      	ldr	r2, [pc, #20]	@ (800552c <prvInitialiseTaskLists+0x68>)
 8005518:	601a      	str	r2, [r3, #0]
}
 800551a:	bf00      	nop
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	20000cc4 	.word	0x20000cc4
 8005528:	20001124 	.word	0x20001124
 800552c:	20001138 	.word	0x20001138
 8005530:	20001154 	.word	0x20001154
 8005534:	20001168 	.word	0x20001168
 8005538:	20001180 	.word	0x20001180
 800553c:	2000114c 	.word	0x2000114c
 8005540:	20001150 	.word	0x20001150

08005544 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800554a:	e019      	b.n	8005580 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800554c:	f000 fde4 	bl	8006118 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005550:	4b10      	ldr	r3, [pc, #64]	@ (8005594 <prvCheckTasksWaitingTermination+0x50>)
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3304      	adds	r3, #4
 800555c:	4618      	mov	r0, r3
 800555e:	f7fe fd21 	bl	8003fa4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005562:	4b0d      	ldr	r3, [pc, #52]	@ (8005598 <prvCheckTasksWaitingTermination+0x54>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	3b01      	subs	r3, #1
 8005568:	4a0b      	ldr	r2, [pc, #44]	@ (8005598 <prvCheckTasksWaitingTermination+0x54>)
 800556a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800556c:	4b0b      	ldr	r3, [pc, #44]	@ (800559c <prvCheckTasksWaitingTermination+0x58>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	3b01      	subs	r3, #1
 8005572:	4a0a      	ldr	r2, [pc, #40]	@ (800559c <prvCheckTasksWaitingTermination+0x58>)
 8005574:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005576:	f000 fe01 	bl	800617c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f810 	bl	80055a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005580:	4b06      	ldr	r3, [pc, #24]	@ (800559c <prvCheckTasksWaitingTermination+0x58>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1e1      	bne.n	800554c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005588:	bf00      	nop
 800558a:	bf00      	nop
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	20001168 	.word	0x20001168
 8005598:	20001194 	.word	0x20001194
 800559c:	2000117c 	.word	0x2000117c

080055a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d108      	bne.n	80055c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 ff9e 	bl	80064f8 <vPortFree>
				vPortFree( pxTCB );
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 ff9b 	bl	80064f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80055c2:	e019      	b.n	80055f8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d103      	bne.n	80055d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 ff92 	bl	80064f8 <vPortFree>
	}
 80055d4:	e010      	b.n	80055f8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d00b      	beq.n	80055f8 <prvDeleteTCB+0x58>
	__asm volatile
 80055e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e4:	f383 8811 	msr	BASEPRI, r3
 80055e8:	f3bf 8f6f 	isb	sy
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	60fb      	str	r3, [r7, #12]
}
 80055f2:	bf00      	nop
 80055f4:	bf00      	nop
 80055f6:	e7fd      	b.n	80055f4 <prvDeleteTCB+0x54>
	}
 80055f8:	bf00      	nop
 80055fa:	3710      	adds	r7, #16
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005606:	4b0c      	ldr	r3, [pc, #48]	@ (8005638 <prvResetNextTaskUnblockTime+0x38>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d104      	bne.n	800561a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005610:	4b0a      	ldr	r3, [pc, #40]	@ (800563c <prvResetNextTaskUnblockTime+0x3c>)
 8005612:	f04f 32ff 	mov.w	r2, #4294967295
 8005616:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005618:	e008      	b.n	800562c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800561a:	4b07      	ldr	r3, [pc, #28]	@ (8005638 <prvResetNextTaskUnblockTime+0x38>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	4a04      	ldr	r2, [pc, #16]	@ (800563c <prvResetNextTaskUnblockTime+0x3c>)
 800562a:	6013      	str	r3, [r2, #0]
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	2000114c 	.word	0x2000114c
 800563c:	200011b4 	.word	0x200011b4

08005640 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005646:	4b0b      	ldr	r3, [pc, #44]	@ (8005674 <xTaskGetSchedulerState+0x34>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d102      	bne.n	8005654 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800564e:	2301      	movs	r3, #1
 8005650:	607b      	str	r3, [r7, #4]
 8005652:	e008      	b.n	8005666 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005654:	4b08      	ldr	r3, [pc, #32]	@ (8005678 <xTaskGetSchedulerState+0x38>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d102      	bne.n	8005662 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800565c:	2302      	movs	r3, #2
 800565e:	607b      	str	r3, [r7, #4]
 8005660:	e001      	b.n	8005666 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005662:	2300      	movs	r3, #0
 8005664:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005666:	687b      	ldr	r3, [r7, #4]
	}
 8005668:	4618      	mov	r0, r3
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	200011a0 	.word	0x200011a0
 8005678:	200011bc 	.word	0x200011bc

0800567c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800567c:	b580      	push	{r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005688:	2300      	movs	r3, #0
 800568a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d058      	beq.n	8005744 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005692:	4b2f      	ldr	r3, [pc, #188]	@ (8005750 <xTaskPriorityDisinherit+0xd4>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	429a      	cmp	r2, r3
 800569a:	d00b      	beq.n	80056b4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800569c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a0:	f383 8811 	msr	BASEPRI, r3
 80056a4:	f3bf 8f6f 	isb	sy
 80056a8:	f3bf 8f4f 	dsb	sy
 80056ac:	60fb      	str	r3, [r7, #12]
}
 80056ae:	bf00      	nop
 80056b0:	bf00      	nop
 80056b2:	e7fd      	b.n	80056b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10b      	bne.n	80056d4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	60bb      	str	r3, [r7, #8]
}
 80056ce:	bf00      	nop
 80056d0:	bf00      	nop
 80056d2:	e7fd      	b.n	80056d0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056d8:	1e5a      	subs	r2, r3, #1
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d02c      	beq.n	8005744 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d128      	bne.n	8005744 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	3304      	adds	r3, #4
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7fe fc54 	bl	8003fa4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005708:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005714:	4b0f      	ldr	r3, [pc, #60]	@ (8005754 <xTaskPriorityDisinherit+0xd8>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	429a      	cmp	r2, r3
 800571a:	d903      	bls.n	8005724 <xTaskPriorityDisinherit+0xa8>
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005720:	4a0c      	ldr	r2, [pc, #48]	@ (8005754 <xTaskPriorityDisinherit+0xd8>)
 8005722:	6013      	str	r3, [r2, #0]
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005728:	4613      	mov	r3, r2
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	4413      	add	r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	4a09      	ldr	r2, [pc, #36]	@ (8005758 <xTaskPriorityDisinherit+0xdc>)
 8005732:	441a      	add	r2, r3
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	3304      	adds	r3, #4
 8005738:	4619      	mov	r1, r3
 800573a:	4610      	mov	r0, r2
 800573c:	f7fe fbd5 	bl	8003eea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005740:	2301      	movs	r3, #1
 8005742:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005744:	697b      	ldr	r3, [r7, #20]
	}
 8005746:	4618      	mov	r0, r3
 8005748:	3718      	adds	r7, #24
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	20000cc0 	.word	0x20000cc0
 8005754:	2000119c 	.word	0x2000119c
 8005758:	20000cc4 	.word	0x20000cc4

0800575c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005766:	4b21      	ldr	r3, [pc, #132]	@ (80057ec <prvAddCurrentTaskToDelayedList+0x90>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800576c:	4b20      	ldr	r3, [pc, #128]	@ (80057f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	3304      	adds	r3, #4
 8005772:	4618      	mov	r0, r3
 8005774:	f7fe fc16 	bl	8003fa4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577e:	d10a      	bne.n	8005796 <prvAddCurrentTaskToDelayedList+0x3a>
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d007      	beq.n	8005796 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005786:	4b1a      	ldr	r3, [pc, #104]	@ (80057f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	3304      	adds	r3, #4
 800578c:	4619      	mov	r1, r3
 800578e:	4819      	ldr	r0, [pc, #100]	@ (80057f4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005790:	f7fe fbab 	bl	8003eea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005794:	e026      	b.n	80057e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4413      	add	r3, r2
 800579c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800579e:	4b14      	ldr	r3, [pc, #80]	@ (80057f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80057a6:	68ba      	ldr	r2, [r7, #8]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d209      	bcs.n	80057c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057ae:	4b12      	ldr	r3, [pc, #72]	@ (80057f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	4b0f      	ldr	r3, [pc, #60]	@ (80057f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	3304      	adds	r3, #4
 80057b8:	4619      	mov	r1, r3
 80057ba:	4610      	mov	r0, r2
 80057bc:	f7fe fbb9 	bl	8003f32 <vListInsert>
}
 80057c0:	e010      	b.n	80057e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057c2:	4b0e      	ldr	r3, [pc, #56]	@ (80057fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	4b0a      	ldr	r3, [pc, #40]	@ (80057f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	3304      	adds	r3, #4
 80057cc:	4619      	mov	r1, r3
 80057ce:	4610      	mov	r0, r2
 80057d0:	f7fe fbaf 	bl	8003f32 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80057d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005800 <prvAddCurrentTaskToDelayedList+0xa4>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68ba      	ldr	r2, [r7, #8]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d202      	bcs.n	80057e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80057de:	4a08      	ldr	r2, [pc, #32]	@ (8005800 <prvAddCurrentTaskToDelayedList+0xa4>)
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	6013      	str	r3, [r2, #0]
}
 80057e4:	bf00      	nop
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	20001198 	.word	0x20001198
 80057f0:	20000cc0 	.word	0x20000cc0
 80057f4:	20001180 	.word	0x20001180
 80057f8:	20001150 	.word	0x20001150
 80057fc:	2000114c 	.word	0x2000114c
 8005800:	200011b4 	.word	0x200011b4

08005804 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b08a      	sub	sp, #40	@ 0x28
 8005808:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800580a:	2300      	movs	r3, #0
 800580c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800580e:	f000 fb13 	bl	8005e38 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005812:	4b1d      	ldr	r3, [pc, #116]	@ (8005888 <xTimerCreateTimerTask+0x84>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d021      	beq.n	800585e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800581a:	2300      	movs	r3, #0
 800581c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800581e:	2300      	movs	r3, #0
 8005820:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005822:	1d3a      	adds	r2, r7, #4
 8005824:	f107 0108 	add.w	r1, r7, #8
 8005828:	f107 030c 	add.w	r3, r7, #12
 800582c:	4618      	mov	r0, r3
 800582e:	f7fe fb15 	bl	8003e5c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	9202      	str	r2, [sp, #8]
 800583a:	9301      	str	r3, [sp, #4]
 800583c:	2302      	movs	r3, #2
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	2300      	movs	r3, #0
 8005842:	460a      	mov	r2, r1
 8005844:	4911      	ldr	r1, [pc, #68]	@ (800588c <xTimerCreateTimerTask+0x88>)
 8005846:	4812      	ldr	r0, [pc, #72]	@ (8005890 <xTimerCreateTimerTask+0x8c>)
 8005848:	f7ff f8d0 	bl	80049ec <xTaskCreateStatic>
 800584c:	4603      	mov	r3, r0
 800584e:	4a11      	ldr	r2, [pc, #68]	@ (8005894 <xTimerCreateTimerTask+0x90>)
 8005850:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005852:	4b10      	ldr	r3, [pc, #64]	@ (8005894 <xTimerCreateTimerTask+0x90>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800585a:	2301      	movs	r3, #1
 800585c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10b      	bne.n	800587c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	613b      	str	r3, [r7, #16]
}
 8005876:	bf00      	nop
 8005878:	bf00      	nop
 800587a:	e7fd      	b.n	8005878 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800587c:	697b      	ldr	r3, [r7, #20]
}
 800587e:	4618      	mov	r0, r3
 8005880:	3718      	adds	r7, #24
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	200011f0 	.word	0x200011f0
 800588c:	080067e4 	.word	0x080067e4
 8005890:	080059d1 	.word	0x080059d1
 8005894:	200011f4 	.word	0x200011f4

08005898 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b08a      	sub	sp, #40	@ 0x28
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
 80058a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80058a6:	2300      	movs	r3, #0
 80058a8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10b      	bne.n	80058c8 <xTimerGenericCommand+0x30>
	__asm volatile
 80058b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b4:	f383 8811 	msr	BASEPRI, r3
 80058b8:	f3bf 8f6f 	isb	sy
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	623b      	str	r3, [r7, #32]
}
 80058c2:	bf00      	nop
 80058c4:	bf00      	nop
 80058c6:	e7fd      	b.n	80058c4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80058c8:	4b19      	ldr	r3, [pc, #100]	@ (8005930 <xTimerGenericCommand+0x98>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d02a      	beq.n	8005926 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	2b05      	cmp	r3, #5
 80058e0:	dc18      	bgt.n	8005914 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80058e2:	f7ff fead 	bl	8005640 <xTaskGetSchedulerState>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d109      	bne.n	8005900 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80058ec:	4b10      	ldr	r3, [pc, #64]	@ (8005930 <xTimerGenericCommand+0x98>)
 80058ee:	6818      	ldr	r0, [r3, #0]
 80058f0:	f107 0110 	add.w	r1, r7, #16
 80058f4:	2300      	movs	r3, #0
 80058f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058f8:	f7fe fc88 	bl	800420c <xQueueGenericSend>
 80058fc:	6278      	str	r0, [r7, #36]	@ 0x24
 80058fe:	e012      	b.n	8005926 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005900:	4b0b      	ldr	r3, [pc, #44]	@ (8005930 <xTimerGenericCommand+0x98>)
 8005902:	6818      	ldr	r0, [r3, #0]
 8005904:	f107 0110 	add.w	r1, r7, #16
 8005908:	2300      	movs	r3, #0
 800590a:	2200      	movs	r2, #0
 800590c:	f7fe fc7e 	bl	800420c <xQueueGenericSend>
 8005910:	6278      	str	r0, [r7, #36]	@ 0x24
 8005912:	e008      	b.n	8005926 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005914:	4b06      	ldr	r3, [pc, #24]	@ (8005930 <xTimerGenericCommand+0x98>)
 8005916:	6818      	ldr	r0, [r3, #0]
 8005918:	f107 0110 	add.w	r1, r7, #16
 800591c:	2300      	movs	r3, #0
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	f7fe fd76 	bl	8004410 <xQueueGenericSendFromISR>
 8005924:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005928:	4618      	mov	r0, r3
 800592a:	3728      	adds	r7, #40	@ 0x28
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	200011f0 	.word	0x200011f0

08005934 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b088      	sub	sp, #32
 8005938:	af02      	add	r7, sp, #8
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800593e:	4b23      	ldr	r3, [pc, #140]	@ (80059cc <prvProcessExpiredTimer+0x98>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	3304      	adds	r3, #4
 800594c:	4618      	mov	r0, r3
 800594e:	f7fe fb29 	bl	8003fa4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005958:	f003 0304 	and.w	r3, r3, #4
 800595c:	2b00      	cmp	r3, #0
 800595e:	d023      	beq.n	80059a8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	699a      	ldr	r2, [r3, #24]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	18d1      	adds	r1, r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	6978      	ldr	r0, [r7, #20]
 800596e:	f000 f8d5 	bl	8005b1c <prvInsertTimerInActiveList>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d020      	beq.n	80059ba <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005978:	2300      	movs	r3, #0
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	2300      	movs	r3, #0
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	2100      	movs	r1, #0
 8005982:	6978      	ldr	r0, [r7, #20]
 8005984:	f7ff ff88 	bl	8005898 <xTimerGenericCommand>
 8005988:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d114      	bne.n	80059ba <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005994:	f383 8811 	msr	BASEPRI, r3
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	60fb      	str	r3, [r7, #12]
}
 80059a2:	bf00      	nop
 80059a4:	bf00      	nop
 80059a6:	e7fd      	b.n	80059a4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80059ae:	f023 0301 	bic.w	r3, r3, #1
 80059b2:	b2da      	uxtb	r2, r3
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	6978      	ldr	r0, [r7, #20]
 80059c0:	4798      	blx	r3
}
 80059c2:	bf00      	nop
 80059c4:	3718      	adds	r7, #24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	200011e8 	.word	0x200011e8

080059d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059d8:	f107 0308 	add.w	r3, r7, #8
 80059dc:	4618      	mov	r0, r3
 80059de:	f000 f859 	bl	8005a94 <prvGetNextExpireTime>
 80059e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	4619      	mov	r1, r3
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f000 f805 	bl	80059f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80059ee:	f000 f8d7 	bl	8005ba0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059f2:	bf00      	nop
 80059f4:	e7f0      	b.n	80059d8 <prvTimerTask+0x8>
	...

080059f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005a02:	f7ff fa37 	bl	8004e74 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a06:	f107 0308 	add.w	r3, r7, #8
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f000 f866 	bl	8005adc <prvSampleTimeNow>
 8005a10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d130      	bne.n	8005a7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10a      	bne.n	8005a34 <prvProcessTimerOrBlockTask+0x3c>
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d806      	bhi.n	8005a34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005a26:	f7ff fa33 	bl	8004e90 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005a2a:	68f9      	ldr	r1, [r7, #12]
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f7ff ff81 	bl	8005934 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005a32:	e024      	b.n	8005a7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d008      	beq.n	8005a4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005a3a:	4b13      	ldr	r3, [pc, #76]	@ (8005a88 <prvProcessTimerOrBlockTask+0x90>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <prvProcessTimerOrBlockTask+0x50>
 8005a44:	2301      	movs	r3, #1
 8005a46:	e000      	b.n	8005a4a <prvProcessTimerOrBlockTask+0x52>
 8005a48:	2300      	movs	r3, #0
 8005a4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8005a8c <prvProcessTimerOrBlockTask+0x94>)
 8005a4e:	6818      	ldr	r0, [r3, #0]
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	4619      	mov	r1, r3
 8005a5a:	f7fe ff93 	bl	8004984 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005a5e:	f7ff fa17 	bl	8004e90 <xTaskResumeAll>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10a      	bne.n	8005a7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005a68:	4b09      	ldr	r3, [pc, #36]	@ (8005a90 <prvProcessTimerOrBlockTask+0x98>)
 8005a6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a6e:	601a      	str	r2, [r3, #0]
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	f3bf 8f6f 	isb	sy
}
 8005a78:	e001      	b.n	8005a7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005a7a:	f7ff fa09 	bl	8004e90 <xTaskResumeAll>
}
 8005a7e:	bf00      	nop
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	200011ec 	.word	0x200011ec
 8005a8c:	200011f0 	.word	0x200011f0
 8005a90:	e000ed04 	.word	0xe000ed04

08005a94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8005ad8 <prvGetNextExpireTime+0x44>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <prvGetNextExpireTime+0x16>
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	e000      	b.n	8005aac <prvGetNextExpireTime+0x18>
 8005aaa:	2200      	movs	r2, #0
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d105      	bne.n	8005ac4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ab8:	4b07      	ldr	r3, [pc, #28]	@ (8005ad8 <prvGetNextExpireTime+0x44>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	60fb      	str	r3, [r7, #12]
 8005ac2:	e001      	b.n	8005ac8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3714      	adds	r7, #20
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	200011e8 	.word	0x200011e8

08005adc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005ae4:	f7ff fa72 	bl	8004fcc <xTaskGetTickCount>
 8005ae8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005aea:	4b0b      	ldr	r3, [pc, #44]	@ (8005b18 <prvSampleTimeNow+0x3c>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d205      	bcs.n	8005b00 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005af4:	f000 f93a 	bl	8005d6c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	e002      	b.n	8005b06 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005b06:	4a04      	ldr	r2, [pc, #16]	@ (8005b18 <prvSampleTimeNow+0x3c>)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	200011f8 	.word	0x200011f8

08005b1c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
 8005b28:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d812      	bhi.n	8005b68 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	1ad2      	subs	r2, r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d302      	bcc.n	8005b56 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005b50:	2301      	movs	r3, #1
 8005b52:	617b      	str	r3, [r7, #20]
 8005b54:	e01b      	b.n	8005b8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005b56:	4b10      	ldr	r3, [pc, #64]	@ (8005b98 <prvInsertTimerInActiveList+0x7c>)
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	4619      	mov	r1, r3
 8005b60:	4610      	mov	r0, r2
 8005b62:	f7fe f9e6 	bl	8003f32 <vListInsert>
 8005b66:	e012      	b.n	8005b8e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d206      	bcs.n	8005b7e <prvInsertTimerInActiveList+0x62>
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d302      	bcc.n	8005b7e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	617b      	str	r3, [r7, #20]
 8005b7c:	e007      	b.n	8005b8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b7e:	4b07      	ldr	r3, [pc, #28]	@ (8005b9c <prvInsertTimerInActiveList+0x80>)
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	3304      	adds	r3, #4
 8005b86:	4619      	mov	r1, r3
 8005b88:	4610      	mov	r0, r2
 8005b8a:	f7fe f9d2 	bl	8003f32 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005b8e:	697b      	ldr	r3, [r7, #20]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3718      	adds	r7, #24
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	200011ec 	.word	0x200011ec
 8005b9c:	200011e8 	.word	0x200011e8

08005ba0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b08e      	sub	sp, #56	@ 0x38
 8005ba4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ba6:	e0ce      	b.n	8005d46 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	da19      	bge.n	8005be2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005bae:	1d3b      	adds	r3, r7, #4
 8005bb0:	3304      	adds	r3, #4
 8005bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10b      	bne.n	8005bd2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bbe:	f383 8811 	msr	BASEPRI, r3
 8005bc2:	f3bf 8f6f 	isb	sy
 8005bc6:	f3bf 8f4f 	dsb	sy
 8005bca:	61fb      	str	r3, [r7, #28]
}
 8005bcc:	bf00      	nop
 8005bce:	bf00      	nop
 8005bd0:	e7fd      	b.n	8005bce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bd8:	6850      	ldr	r0, [r2, #4]
 8005bda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bdc:	6892      	ldr	r2, [r2, #8]
 8005bde:	4611      	mov	r1, r2
 8005be0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f2c0 80ae 	blt.w	8005d46 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d004      	beq.n	8005c00 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bf8:	3304      	adds	r3, #4
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7fe f9d2 	bl	8003fa4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c00:	463b      	mov	r3, r7
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7ff ff6a 	bl	8005adc <prvSampleTimeNow>
 8005c08:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b09      	cmp	r3, #9
 8005c0e:	f200 8097 	bhi.w	8005d40 <prvProcessReceivedCommands+0x1a0>
 8005c12:	a201      	add	r2, pc, #4	@ (adr r2, 8005c18 <prvProcessReceivedCommands+0x78>)
 8005c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c18:	08005c41 	.word	0x08005c41
 8005c1c:	08005c41 	.word	0x08005c41
 8005c20:	08005c41 	.word	0x08005c41
 8005c24:	08005cb7 	.word	0x08005cb7
 8005c28:	08005ccb 	.word	0x08005ccb
 8005c2c:	08005d17 	.word	0x08005d17
 8005c30:	08005c41 	.word	0x08005c41
 8005c34:	08005c41 	.word	0x08005c41
 8005c38:	08005cb7 	.word	0x08005cb7
 8005c3c:	08005ccb 	.word	0x08005ccb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c46:	f043 0301 	orr.w	r3, r3, #1
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	18d1      	adds	r1, r2, r3
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c60:	f7ff ff5c 	bl	8005b1c <prvInsertTimerInActiveList>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d06c      	beq.n	8005d44 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c70:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c78:	f003 0304 	and.w	r3, r3, #4
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d061      	beq.n	8005d44 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	441a      	add	r2, r3
 8005c88:	2300      	movs	r3, #0
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	2100      	movs	r1, #0
 8005c90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c92:	f7ff fe01 	bl	8005898 <xTimerGenericCommand>
 8005c96:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005c98:	6a3b      	ldr	r3, [r7, #32]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d152      	bne.n	8005d44 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca2:	f383 8811 	msr	BASEPRI, r3
 8005ca6:	f3bf 8f6f 	isb	sy
 8005caa:	f3bf 8f4f 	dsb	sy
 8005cae:	61bb      	str	r3, [r7, #24]
}
 8005cb0:	bf00      	nop
 8005cb2:	bf00      	nop
 8005cb4:	e7fd      	b.n	8005cb2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005cbc:	f023 0301 	bic.w	r3, r3, #1
 8005cc0:	b2da      	uxtb	r2, r3
 8005cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cc4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005cc8:	e03d      	b.n	8005d46 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ccc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005cd0:	f043 0301 	orr.w	r3, r3, #1
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10b      	bne.n	8005d02 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cee:	f383 8811 	msr	BASEPRI, r3
 8005cf2:	f3bf 8f6f 	isb	sy
 8005cf6:	f3bf 8f4f 	dsb	sy
 8005cfa:	617b      	str	r3, [r7, #20]
}
 8005cfc:	bf00      	nop
 8005cfe:	bf00      	nop
 8005d00:	e7fd      	b.n	8005cfe <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d04:	699a      	ldr	r2, [r3, #24]
 8005d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d08:	18d1      	adds	r1, r2, r3
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d10:	f7ff ff04 	bl	8005b1c <prvInsertTimerInActiveList>
					break;
 8005d14:	e017      	b.n	8005d46 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d103      	bne.n	8005d2c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005d24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d26:	f000 fbe7 	bl	80064f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005d2a:	e00c      	b.n	8005d46 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d32:	f023 0301 	bic.w	r3, r3, #1
 8005d36:	b2da      	uxtb	r2, r3
 8005d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005d3e:	e002      	b.n	8005d46 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005d40:	bf00      	nop
 8005d42:	e000      	b.n	8005d46 <prvProcessReceivedCommands+0x1a6>
					break;
 8005d44:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d46:	4b08      	ldr	r3, [pc, #32]	@ (8005d68 <prvProcessReceivedCommands+0x1c8>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	1d39      	adds	r1, r7, #4
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7fe fbfc 	bl	800454c <xQueueReceive>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	f47f af26 	bne.w	8005ba8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005d5c:	bf00      	nop
 8005d5e:	bf00      	nop
 8005d60:	3730      	adds	r7, #48	@ 0x30
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	200011f0 	.word	0x200011f0

08005d6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b088      	sub	sp, #32
 8005d70:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d72:	e049      	b.n	8005e08 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d74:	4b2e      	ldr	r3, [pc, #184]	@ (8005e30 <prvSwitchTimerLists+0xc4>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d7e:	4b2c      	ldr	r3, [pc, #176]	@ (8005e30 <prvSwitchTimerLists+0xc4>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	3304      	adds	r3, #4
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7fe f909 	bl	8003fa4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005da0:	f003 0304 	and.w	r3, r3, #4
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d02f      	beq.n	8005e08 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	4413      	add	r3, r2
 8005db0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d90e      	bls.n	8005dd8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8005e30 <prvSwitchTimerLists+0xc4>)
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	3304      	adds	r3, #4
 8005dce:	4619      	mov	r1, r3
 8005dd0:	4610      	mov	r0, r2
 8005dd2:	f7fe f8ae 	bl	8003f32 <vListInsert>
 8005dd6:	e017      	b.n	8005e08 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005dd8:	2300      	movs	r3, #0
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	2300      	movs	r3, #0
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	2100      	movs	r1, #0
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f7ff fd58 	bl	8005898 <xTimerGenericCommand>
 8005de8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10b      	bne.n	8005e08 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df4:	f383 8811 	msr	BASEPRI, r3
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	f3bf 8f4f 	dsb	sy
 8005e00:	603b      	str	r3, [r7, #0]
}
 8005e02:	bf00      	nop
 8005e04:	bf00      	nop
 8005e06:	e7fd      	b.n	8005e04 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e08:	4b09      	ldr	r3, [pc, #36]	@ (8005e30 <prvSwitchTimerLists+0xc4>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1b0      	bne.n	8005d74 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005e12:	4b07      	ldr	r3, [pc, #28]	@ (8005e30 <prvSwitchTimerLists+0xc4>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005e18:	4b06      	ldr	r3, [pc, #24]	@ (8005e34 <prvSwitchTimerLists+0xc8>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a04      	ldr	r2, [pc, #16]	@ (8005e30 <prvSwitchTimerLists+0xc4>)
 8005e1e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005e20:	4a04      	ldr	r2, [pc, #16]	@ (8005e34 <prvSwitchTimerLists+0xc8>)
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	6013      	str	r3, [r2, #0]
}
 8005e26:	bf00      	nop
 8005e28:	3718      	adds	r7, #24
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	200011e8 	.word	0x200011e8
 8005e34:	200011ec 	.word	0x200011ec

08005e38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005e3e:	f000 f96b 	bl	8006118 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005e42:	4b15      	ldr	r3, [pc, #84]	@ (8005e98 <prvCheckForValidListAndQueue+0x60>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d120      	bne.n	8005e8c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005e4a:	4814      	ldr	r0, [pc, #80]	@ (8005e9c <prvCheckForValidListAndQueue+0x64>)
 8005e4c:	f7fe f820 	bl	8003e90 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005e50:	4813      	ldr	r0, [pc, #76]	@ (8005ea0 <prvCheckForValidListAndQueue+0x68>)
 8005e52:	f7fe f81d 	bl	8003e90 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005e56:	4b13      	ldr	r3, [pc, #76]	@ (8005ea4 <prvCheckForValidListAndQueue+0x6c>)
 8005e58:	4a10      	ldr	r2, [pc, #64]	@ (8005e9c <prvCheckForValidListAndQueue+0x64>)
 8005e5a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005e5c:	4b12      	ldr	r3, [pc, #72]	@ (8005ea8 <prvCheckForValidListAndQueue+0x70>)
 8005e5e:	4a10      	ldr	r2, [pc, #64]	@ (8005ea0 <prvCheckForValidListAndQueue+0x68>)
 8005e60:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005e62:	2300      	movs	r3, #0
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	4b11      	ldr	r3, [pc, #68]	@ (8005eac <prvCheckForValidListAndQueue+0x74>)
 8005e68:	4a11      	ldr	r2, [pc, #68]	@ (8005eb0 <prvCheckForValidListAndQueue+0x78>)
 8005e6a:	2110      	movs	r1, #16
 8005e6c:	200a      	movs	r0, #10
 8005e6e:	f7fe f92d 	bl	80040cc <xQueueGenericCreateStatic>
 8005e72:	4603      	mov	r3, r0
 8005e74:	4a08      	ldr	r2, [pc, #32]	@ (8005e98 <prvCheckForValidListAndQueue+0x60>)
 8005e76:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005e78:	4b07      	ldr	r3, [pc, #28]	@ (8005e98 <prvCheckForValidListAndQueue+0x60>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d005      	beq.n	8005e8c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005e80:	4b05      	ldr	r3, [pc, #20]	@ (8005e98 <prvCheckForValidListAndQueue+0x60>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	490b      	ldr	r1, [pc, #44]	@ (8005eb4 <prvCheckForValidListAndQueue+0x7c>)
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7fe fd52 	bl	8004930 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e8c:	f000 f976 	bl	800617c <vPortExitCritical>
}
 8005e90:	bf00      	nop
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	200011f0 	.word	0x200011f0
 8005e9c:	200011c0 	.word	0x200011c0
 8005ea0:	200011d4 	.word	0x200011d4
 8005ea4:	200011e8 	.word	0x200011e8
 8005ea8:	200011ec 	.word	0x200011ec
 8005eac:	2000129c 	.word	0x2000129c
 8005eb0:	200011fc 	.word	0x200011fc
 8005eb4:	080067ec 	.word	0x080067ec

08005eb8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	3b04      	subs	r3, #4
 8005ec8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005ed0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	3b04      	subs	r3, #4
 8005ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	f023 0201 	bic.w	r2, r3, #1
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	3b04      	subs	r3, #4
 8005ee6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ee8:	4a0c      	ldr	r2, [pc, #48]	@ (8005f1c <pxPortInitialiseStack+0x64>)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	3b14      	subs	r3, #20
 8005ef2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	3b04      	subs	r3, #4
 8005efe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f06f 0202 	mvn.w	r2, #2
 8005f06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	3b20      	subs	r3, #32
 8005f0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3714      	adds	r7, #20
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr
 8005f1c:	08005f21 	.word	0x08005f21

08005f20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005f26:	2300      	movs	r3, #0
 8005f28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005f2a:	4b13      	ldr	r3, [pc, #76]	@ (8005f78 <prvTaskExitError+0x58>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f32:	d00b      	beq.n	8005f4c <prvTaskExitError+0x2c>
	__asm volatile
 8005f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f38:	f383 8811 	msr	BASEPRI, r3
 8005f3c:	f3bf 8f6f 	isb	sy
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	60fb      	str	r3, [r7, #12]
}
 8005f46:	bf00      	nop
 8005f48:	bf00      	nop
 8005f4a:	e7fd      	b.n	8005f48 <prvTaskExitError+0x28>
	__asm volatile
 8005f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f50:	f383 8811 	msr	BASEPRI, r3
 8005f54:	f3bf 8f6f 	isb	sy
 8005f58:	f3bf 8f4f 	dsb	sy
 8005f5c:	60bb      	str	r3, [r7, #8]
}
 8005f5e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f60:	bf00      	nop
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d0fc      	beq.n	8005f62 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f68:	bf00      	nop
 8005f6a:	bf00      	nop
 8005f6c:	3714      	adds	r7, #20
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	20000014 	.word	0x20000014
 8005f7c:	00000000 	.word	0x00000000

08005f80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005f80:	4b07      	ldr	r3, [pc, #28]	@ (8005fa0 <pxCurrentTCBConst2>)
 8005f82:	6819      	ldr	r1, [r3, #0]
 8005f84:	6808      	ldr	r0, [r1, #0]
 8005f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f8a:	f380 8809 	msr	PSP, r0
 8005f8e:	f3bf 8f6f 	isb	sy
 8005f92:	f04f 0000 	mov.w	r0, #0
 8005f96:	f380 8811 	msr	BASEPRI, r0
 8005f9a:	4770      	bx	lr
 8005f9c:	f3af 8000 	nop.w

08005fa0 <pxCurrentTCBConst2>:
 8005fa0:	20000cc0 	.word	0x20000cc0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005fa4:	bf00      	nop
 8005fa6:	bf00      	nop

08005fa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005fa8:	4808      	ldr	r0, [pc, #32]	@ (8005fcc <prvPortStartFirstTask+0x24>)
 8005faa:	6800      	ldr	r0, [r0, #0]
 8005fac:	6800      	ldr	r0, [r0, #0]
 8005fae:	f380 8808 	msr	MSP, r0
 8005fb2:	f04f 0000 	mov.w	r0, #0
 8005fb6:	f380 8814 	msr	CONTROL, r0
 8005fba:	b662      	cpsie	i
 8005fbc:	b661      	cpsie	f
 8005fbe:	f3bf 8f4f 	dsb	sy
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	df00      	svc	0
 8005fc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005fca:	bf00      	nop
 8005fcc:	e000ed08 	.word	0xe000ed08

08005fd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005fd6:	4b47      	ldr	r3, [pc, #284]	@ (80060f4 <xPortStartScheduler+0x124>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a47      	ldr	r2, [pc, #284]	@ (80060f8 <xPortStartScheduler+0x128>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d10b      	bne.n	8005ff8 <xPortStartScheduler+0x28>
	__asm volatile
 8005fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fe4:	f383 8811 	msr	BASEPRI, r3
 8005fe8:	f3bf 8f6f 	isb	sy
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	60fb      	str	r3, [r7, #12]
}
 8005ff2:	bf00      	nop
 8005ff4:	bf00      	nop
 8005ff6:	e7fd      	b.n	8005ff4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005ff8:	4b3e      	ldr	r3, [pc, #248]	@ (80060f4 <xPortStartScheduler+0x124>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a3f      	ldr	r2, [pc, #252]	@ (80060fc <xPortStartScheduler+0x12c>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d10b      	bne.n	800601a <xPortStartScheduler+0x4a>
	__asm volatile
 8006002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006006:	f383 8811 	msr	BASEPRI, r3
 800600a:	f3bf 8f6f 	isb	sy
 800600e:	f3bf 8f4f 	dsb	sy
 8006012:	613b      	str	r3, [r7, #16]
}
 8006014:	bf00      	nop
 8006016:	bf00      	nop
 8006018:	e7fd      	b.n	8006016 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800601a:	4b39      	ldr	r3, [pc, #228]	@ (8006100 <xPortStartScheduler+0x130>)
 800601c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	b2db      	uxtb	r3, r3
 8006024:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	22ff      	movs	r2, #255	@ 0xff
 800602a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	b2db      	uxtb	r3, r3
 8006032:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006034:	78fb      	ldrb	r3, [r7, #3]
 8006036:	b2db      	uxtb	r3, r3
 8006038:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800603c:	b2da      	uxtb	r2, r3
 800603e:	4b31      	ldr	r3, [pc, #196]	@ (8006104 <xPortStartScheduler+0x134>)
 8006040:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006042:	4b31      	ldr	r3, [pc, #196]	@ (8006108 <xPortStartScheduler+0x138>)
 8006044:	2207      	movs	r2, #7
 8006046:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006048:	e009      	b.n	800605e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800604a:	4b2f      	ldr	r3, [pc, #188]	@ (8006108 <xPortStartScheduler+0x138>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	3b01      	subs	r3, #1
 8006050:	4a2d      	ldr	r2, [pc, #180]	@ (8006108 <xPortStartScheduler+0x138>)
 8006052:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006054:	78fb      	ldrb	r3, [r7, #3]
 8006056:	b2db      	uxtb	r3, r3
 8006058:	005b      	lsls	r3, r3, #1
 800605a:	b2db      	uxtb	r3, r3
 800605c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800605e:	78fb      	ldrb	r3, [r7, #3]
 8006060:	b2db      	uxtb	r3, r3
 8006062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006066:	2b80      	cmp	r3, #128	@ 0x80
 8006068:	d0ef      	beq.n	800604a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800606a:	4b27      	ldr	r3, [pc, #156]	@ (8006108 <xPortStartScheduler+0x138>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f1c3 0307 	rsb	r3, r3, #7
 8006072:	2b04      	cmp	r3, #4
 8006074:	d00b      	beq.n	800608e <xPortStartScheduler+0xbe>
	__asm volatile
 8006076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800607a:	f383 8811 	msr	BASEPRI, r3
 800607e:	f3bf 8f6f 	isb	sy
 8006082:	f3bf 8f4f 	dsb	sy
 8006086:	60bb      	str	r3, [r7, #8]
}
 8006088:	bf00      	nop
 800608a:	bf00      	nop
 800608c:	e7fd      	b.n	800608a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800608e:	4b1e      	ldr	r3, [pc, #120]	@ (8006108 <xPortStartScheduler+0x138>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	021b      	lsls	r3, r3, #8
 8006094:	4a1c      	ldr	r2, [pc, #112]	@ (8006108 <xPortStartScheduler+0x138>)
 8006096:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006098:	4b1b      	ldr	r3, [pc, #108]	@ (8006108 <xPortStartScheduler+0x138>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80060a0:	4a19      	ldr	r2, [pc, #100]	@ (8006108 <xPortStartScheduler+0x138>)
 80060a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	b2da      	uxtb	r2, r3
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80060ac:	4b17      	ldr	r3, [pc, #92]	@ (800610c <xPortStartScheduler+0x13c>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a16      	ldr	r2, [pc, #88]	@ (800610c <xPortStartScheduler+0x13c>)
 80060b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80060b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80060b8:	4b14      	ldr	r3, [pc, #80]	@ (800610c <xPortStartScheduler+0x13c>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a13      	ldr	r2, [pc, #76]	@ (800610c <xPortStartScheduler+0x13c>)
 80060be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80060c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80060c4:	f000 f8da 	bl	800627c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80060c8:	4b11      	ldr	r3, [pc, #68]	@ (8006110 <xPortStartScheduler+0x140>)
 80060ca:	2200      	movs	r2, #0
 80060cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80060ce:	f000 f8f9 	bl	80062c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80060d2:	4b10      	ldr	r3, [pc, #64]	@ (8006114 <xPortStartScheduler+0x144>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a0f      	ldr	r2, [pc, #60]	@ (8006114 <xPortStartScheduler+0x144>)
 80060d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80060dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80060de:	f7ff ff63 	bl	8005fa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80060e2:	f7ff f83d 	bl	8005160 <vTaskSwitchContext>
	prvTaskExitError();
 80060e6:	f7ff ff1b 	bl	8005f20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3718      	adds	r7, #24
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	e000ed00 	.word	0xe000ed00
 80060f8:	410fc271 	.word	0x410fc271
 80060fc:	410fc270 	.word	0x410fc270
 8006100:	e000e400 	.word	0xe000e400
 8006104:	200012ec 	.word	0x200012ec
 8006108:	200012f0 	.word	0x200012f0
 800610c:	e000ed20 	.word	0xe000ed20
 8006110:	20000014 	.word	0x20000014
 8006114:	e000ef34 	.word	0xe000ef34

08006118 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
	__asm volatile
 800611e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	607b      	str	r3, [r7, #4]
}
 8006130:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006132:	4b10      	ldr	r3, [pc, #64]	@ (8006174 <vPortEnterCritical+0x5c>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	3301      	adds	r3, #1
 8006138:	4a0e      	ldr	r2, [pc, #56]	@ (8006174 <vPortEnterCritical+0x5c>)
 800613a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800613c:	4b0d      	ldr	r3, [pc, #52]	@ (8006174 <vPortEnterCritical+0x5c>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d110      	bne.n	8006166 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006144:	4b0c      	ldr	r3, [pc, #48]	@ (8006178 <vPortEnterCritical+0x60>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00b      	beq.n	8006166 <vPortEnterCritical+0x4e>
	__asm volatile
 800614e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006152:	f383 8811 	msr	BASEPRI, r3
 8006156:	f3bf 8f6f 	isb	sy
 800615a:	f3bf 8f4f 	dsb	sy
 800615e:	603b      	str	r3, [r7, #0]
}
 8006160:	bf00      	nop
 8006162:	bf00      	nop
 8006164:	e7fd      	b.n	8006162 <vPortEnterCritical+0x4a>
	}
}
 8006166:	bf00      	nop
 8006168:	370c      	adds	r7, #12
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	20000014 	.word	0x20000014
 8006178:	e000ed04 	.word	0xe000ed04

0800617c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006182:	4b12      	ldr	r3, [pc, #72]	@ (80061cc <vPortExitCritical+0x50>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10b      	bne.n	80061a2 <vPortExitCritical+0x26>
	__asm volatile
 800618a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800618e:	f383 8811 	msr	BASEPRI, r3
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	607b      	str	r3, [r7, #4]
}
 800619c:	bf00      	nop
 800619e:	bf00      	nop
 80061a0:	e7fd      	b.n	800619e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80061a2:	4b0a      	ldr	r3, [pc, #40]	@ (80061cc <vPortExitCritical+0x50>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	3b01      	subs	r3, #1
 80061a8:	4a08      	ldr	r2, [pc, #32]	@ (80061cc <vPortExitCritical+0x50>)
 80061aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80061ac:	4b07      	ldr	r3, [pc, #28]	@ (80061cc <vPortExitCritical+0x50>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d105      	bne.n	80061c0 <vPortExitCritical+0x44>
 80061b4:	2300      	movs	r3, #0
 80061b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	f383 8811 	msr	BASEPRI, r3
}
 80061be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr
 80061cc:	20000014 	.word	0x20000014

080061d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80061d0:	f3ef 8009 	mrs	r0, PSP
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	4b15      	ldr	r3, [pc, #84]	@ (8006230 <pxCurrentTCBConst>)
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	f01e 0f10 	tst.w	lr, #16
 80061e0:	bf08      	it	eq
 80061e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80061e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ea:	6010      	str	r0, [r2, #0]
 80061ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80061f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80061f4:	f380 8811 	msr	BASEPRI, r0
 80061f8:	f3bf 8f4f 	dsb	sy
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f7fe ffae 	bl	8005160 <vTaskSwitchContext>
 8006204:	f04f 0000 	mov.w	r0, #0
 8006208:	f380 8811 	msr	BASEPRI, r0
 800620c:	bc09      	pop	{r0, r3}
 800620e:	6819      	ldr	r1, [r3, #0]
 8006210:	6808      	ldr	r0, [r1, #0]
 8006212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006216:	f01e 0f10 	tst.w	lr, #16
 800621a:	bf08      	it	eq
 800621c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006220:	f380 8809 	msr	PSP, r0
 8006224:	f3bf 8f6f 	isb	sy
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	f3af 8000 	nop.w

08006230 <pxCurrentTCBConst>:
 8006230:	20000cc0 	.word	0x20000cc0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006234:	bf00      	nop
 8006236:	bf00      	nop

08006238 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
	__asm volatile
 800623e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006242:	f383 8811 	msr	BASEPRI, r3
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	607b      	str	r3, [r7, #4]
}
 8006250:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006252:	f7fe fecb 	bl	8004fec <xTaskIncrementTick>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d003      	beq.n	8006264 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800625c:	4b06      	ldr	r3, [pc, #24]	@ (8006278 <xPortSysTickHandler+0x40>)
 800625e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006262:	601a      	str	r2, [r3, #0]
 8006264:	2300      	movs	r3, #0
 8006266:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	f383 8811 	msr	BASEPRI, r3
}
 800626e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006270:	bf00      	nop
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	e000ed04 	.word	0xe000ed04

0800627c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800627c:	b480      	push	{r7}
 800627e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006280:	4b0b      	ldr	r3, [pc, #44]	@ (80062b0 <vPortSetupTimerInterrupt+0x34>)
 8006282:	2200      	movs	r2, #0
 8006284:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006286:	4b0b      	ldr	r3, [pc, #44]	@ (80062b4 <vPortSetupTimerInterrupt+0x38>)
 8006288:	2200      	movs	r2, #0
 800628a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800628c:	4b0a      	ldr	r3, [pc, #40]	@ (80062b8 <vPortSetupTimerInterrupt+0x3c>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a0a      	ldr	r2, [pc, #40]	@ (80062bc <vPortSetupTimerInterrupt+0x40>)
 8006292:	fba2 2303 	umull	r2, r3, r2, r3
 8006296:	099b      	lsrs	r3, r3, #6
 8006298:	4a09      	ldr	r2, [pc, #36]	@ (80062c0 <vPortSetupTimerInterrupt+0x44>)
 800629a:	3b01      	subs	r3, #1
 800629c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800629e:	4b04      	ldr	r3, [pc, #16]	@ (80062b0 <vPortSetupTimerInterrupt+0x34>)
 80062a0:	2207      	movs	r2, #7
 80062a2:	601a      	str	r2, [r3, #0]
}
 80062a4:	bf00      	nop
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	e000e010 	.word	0xe000e010
 80062b4:	e000e018 	.word	0xe000e018
 80062b8:	20000008 	.word	0x20000008
 80062bc:	10624dd3 	.word	0x10624dd3
 80062c0:	e000e014 	.word	0xe000e014

080062c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80062c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80062d4 <vPortEnableVFP+0x10>
 80062c8:	6801      	ldr	r1, [r0, #0]
 80062ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80062ce:	6001      	str	r1, [r0, #0]
 80062d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80062d2:	bf00      	nop
 80062d4:	e000ed88 	.word	0xe000ed88

080062d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80062de:	f3ef 8305 	mrs	r3, IPSR
 80062e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2b0f      	cmp	r3, #15
 80062e8:	d915      	bls.n	8006316 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80062ea:	4a18      	ldr	r2, [pc, #96]	@ (800634c <vPortValidateInterruptPriority+0x74>)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	4413      	add	r3, r2
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80062f4:	4b16      	ldr	r3, [pc, #88]	@ (8006350 <vPortValidateInterruptPriority+0x78>)
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	7afa      	ldrb	r2, [r7, #11]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d20b      	bcs.n	8006316 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80062fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006302:	f383 8811 	msr	BASEPRI, r3
 8006306:	f3bf 8f6f 	isb	sy
 800630a:	f3bf 8f4f 	dsb	sy
 800630e:	607b      	str	r3, [r7, #4]
}
 8006310:	bf00      	nop
 8006312:	bf00      	nop
 8006314:	e7fd      	b.n	8006312 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006316:	4b0f      	ldr	r3, [pc, #60]	@ (8006354 <vPortValidateInterruptPriority+0x7c>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800631e:	4b0e      	ldr	r3, [pc, #56]	@ (8006358 <vPortValidateInterruptPriority+0x80>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	429a      	cmp	r2, r3
 8006324:	d90b      	bls.n	800633e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800632a:	f383 8811 	msr	BASEPRI, r3
 800632e:	f3bf 8f6f 	isb	sy
 8006332:	f3bf 8f4f 	dsb	sy
 8006336:	603b      	str	r3, [r7, #0]
}
 8006338:	bf00      	nop
 800633a:	bf00      	nop
 800633c:	e7fd      	b.n	800633a <vPortValidateInterruptPriority+0x62>
	}
 800633e:	bf00      	nop
 8006340:	3714      	adds	r7, #20
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	e000e3f0 	.word	0xe000e3f0
 8006350:	200012ec 	.word	0x200012ec
 8006354:	e000ed0c 	.word	0xe000ed0c
 8006358:	200012f0 	.word	0x200012f0

0800635c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b08a      	sub	sp, #40	@ 0x28
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006364:	2300      	movs	r3, #0
 8006366:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006368:	f7fe fd84 	bl	8004e74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800636c:	4b5c      	ldr	r3, [pc, #368]	@ (80064e0 <pvPortMalloc+0x184>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006374:	f000 f924 	bl	80065c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006378:	4b5a      	ldr	r3, [pc, #360]	@ (80064e4 <pvPortMalloc+0x188>)
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4013      	ands	r3, r2
 8006380:	2b00      	cmp	r3, #0
 8006382:	f040 8095 	bne.w	80064b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d01e      	beq.n	80063ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800638c:	2208      	movs	r2, #8
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4413      	add	r3, r2
 8006392:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f003 0307 	and.w	r3, r3, #7
 800639a:	2b00      	cmp	r3, #0
 800639c:	d015      	beq.n	80063ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f023 0307 	bic.w	r3, r3, #7
 80063a4:	3308      	adds	r3, #8
 80063a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f003 0307 	and.w	r3, r3, #7
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00b      	beq.n	80063ca <pvPortMalloc+0x6e>
	__asm volatile
 80063b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b6:	f383 8811 	msr	BASEPRI, r3
 80063ba:	f3bf 8f6f 	isb	sy
 80063be:	f3bf 8f4f 	dsb	sy
 80063c2:	617b      	str	r3, [r7, #20]
}
 80063c4:	bf00      	nop
 80063c6:	bf00      	nop
 80063c8:	e7fd      	b.n	80063c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d06f      	beq.n	80064b0 <pvPortMalloc+0x154>
 80063d0:	4b45      	ldr	r3, [pc, #276]	@ (80064e8 <pvPortMalloc+0x18c>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d86a      	bhi.n	80064b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80063da:	4b44      	ldr	r3, [pc, #272]	@ (80064ec <pvPortMalloc+0x190>)
 80063dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80063de:	4b43      	ldr	r3, [pc, #268]	@ (80064ec <pvPortMalloc+0x190>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063e4:	e004      	b.n	80063f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80063e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80063ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d903      	bls.n	8006402 <pvPortMalloc+0xa6>
 80063fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1f1      	bne.n	80063e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006402:	4b37      	ldr	r3, [pc, #220]	@ (80064e0 <pvPortMalloc+0x184>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006408:	429a      	cmp	r2, r3
 800640a:	d051      	beq.n	80064b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800640c:	6a3b      	ldr	r3, [r7, #32]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2208      	movs	r2, #8
 8006412:	4413      	add	r3, r2
 8006414:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	6a3b      	ldr	r3, [r7, #32]
 800641c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800641e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006420:	685a      	ldr	r2, [r3, #4]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	1ad2      	subs	r2, r2, r3
 8006426:	2308      	movs	r3, #8
 8006428:	005b      	lsls	r3, r3, #1
 800642a:	429a      	cmp	r2, r3
 800642c:	d920      	bls.n	8006470 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800642e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4413      	add	r3, r2
 8006434:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	f003 0307 	and.w	r3, r3, #7
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00b      	beq.n	8006458 <pvPortMalloc+0xfc>
	__asm volatile
 8006440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006444:	f383 8811 	msr	BASEPRI, r3
 8006448:	f3bf 8f6f 	isb	sy
 800644c:	f3bf 8f4f 	dsb	sy
 8006450:	613b      	str	r3, [r7, #16]
}
 8006452:	bf00      	nop
 8006454:	bf00      	nop
 8006456:	e7fd      	b.n	8006454 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645a:	685a      	ldr	r2, [r3, #4]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	1ad2      	subs	r2, r2, r3
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800646a:	69b8      	ldr	r0, [r7, #24]
 800646c:	f000 f90a 	bl	8006684 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006470:	4b1d      	ldr	r3, [pc, #116]	@ (80064e8 <pvPortMalloc+0x18c>)
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	4a1b      	ldr	r2, [pc, #108]	@ (80064e8 <pvPortMalloc+0x18c>)
 800647c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800647e:	4b1a      	ldr	r3, [pc, #104]	@ (80064e8 <pvPortMalloc+0x18c>)
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	4b1b      	ldr	r3, [pc, #108]	@ (80064f0 <pvPortMalloc+0x194>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	429a      	cmp	r2, r3
 8006488:	d203      	bcs.n	8006492 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800648a:	4b17      	ldr	r3, [pc, #92]	@ (80064e8 <pvPortMalloc+0x18c>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a18      	ldr	r2, [pc, #96]	@ (80064f0 <pvPortMalloc+0x194>)
 8006490:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	4b13      	ldr	r3, [pc, #76]	@ (80064e4 <pvPortMalloc+0x188>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	431a      	orrs	r2, r3
 800649c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80064a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a2:	2200      	movs	r2, #0
 80064a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80064a6:	4b13      	ldr	r3, [pc, #76]	@ (80064f4 <pvPortMalloc+0x198>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	3301      	adds	r3, #1
 80064ac:	4a11      	ldr	r2, [pc, #68]	@ (80064f4 <pvPortMalloc+0x198>)
 80064ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80064b0:	f7fe fcee 	bl	8004e90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	f003 0307 	and.w	r3, r3, #7
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00b      	beq.n	80064d6 <pvPortMalloc+0x17a>
	__asm volatile
 80064be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	60fb      	str	r3, [r7, #12]
}
 80064d0:	bf00      	nop
 80064d2:	bf00      	nop
 80064d4:	e7fd      	b.n	80064d2 <pvPortMalloc+0x176>
	return pvReturn;
 80064d6:	69fb      	ldr	r3, [r7, #28]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3728      	adds	r7, #40	@ 0x28
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	20004efc 	.word	0x20004efc
 80064e4:	20004f10 	.word	0x20004f10
 80064e8:	20004f00 	.word	0x20004f00
 80064ec:	20004ef4 	.word	0x20004ef4
 80064f0:	20004f04 	.word	0x20004f04
 80064f4:	20004f08 	.word	0x20004f08

080064f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d04f      	beq.n	80065aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800650a:	2308      	movs	r3, #8
 800650c:	425b      	negs	r3, r3
 800650e:	697a      	ldr	r2, [r7, #20]
 8006510:	4413      	add	r3, r2
 8006512:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	685a      	ldr	r2, [r3, #4]
 800651c:	4b25      	ldr	r3, [pc, #148]	@ (80065b4 <vPortFree+0xbc>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4013      	ands	r3, r2
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10b      	bne.n	800653e <vPortFree+0x46>
	__asm volatile
 8006526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800652a:	f383 8811 	msr	BASEPRI, r3
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	f3bf 8f4f 	dsb	sy
 8006536:	60fb      	str	r3, [r7, #12]
}
 8006538:	bf00      	nop
 800653a:	bf00      	nop
 800653c:	e7fd      	b.n	800653a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00b      	beq.n	800655e <vPortFree+0x66>
	__asm volatile
 8006546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800654a:	f383 8811 	msr	BASEPRI, r3
 800654e:	f3bf 8f6f 	isb	sy
 8006552:	f3bf 8f4f 	dsb	sy
 8006556:	60bb      	str	r3, [r7, #8]
}
 8006558:	bf00      	nop
 800655a:	bf00      	nop
 800655c:	e7fd      	b.n	800655a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	685a      	ldr	r2, [r3, #4]
 8006562:	4b14      	ldr	r3, [pc, #80]	@ (80065b4 <vPortFree+0xbc>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4013      	ands	r3, r2
 8006568:	2b00      	cmp	r3, #0
 800656a:	d01e      	beq.n	80065aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d11a      	bne.n	80065aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	685a      	ldr	r2, [r3, #4]
 8006578:	4b0e      	ldr	r3, [pc, #56]	@ (80065b4 <vPortFree+0xbc>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	43db      	mvns	r3, r3
 800657e:	401a      	ands	r2, r3
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006584:	f7fe fc76 	bl	8004e74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	4b0a      	ldr	r3, [pc, #40]	@ (80065b8 <vPortFree+0xc0>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4413      	add	r3, r2
 8006592:	4a09      	ldr	r2, [pc, #36]	@ (80065b8 <vPortFree+0xc0>)
 8006594:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006596:	6938      	ldr	r0, [r7, #16]
 8006598:	f000 f874 	bl	8006684 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800659c:	4b07      	ldr	r3, [pc, #28]	@ (80065bc <vPortFree+0xc4>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	3301      	adds	r3, #1
 80065a2:	4a06      	ldr	r2, [pc, #24]	@ (80065bc <vPortFree+0xc4>)
 80065a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80065a6:	f7fe fc73 	bl	8004e90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80065aa:	bf00      	nop
 80065ac:	3718      	adds	r7, #24
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	20004f10 	.word	0x20004f10
 80065b8:	20004f00 	.word	0x20004f00
 80065bc:	20004f0c 	.word	0x20004f0c

080065c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80065c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80065ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80065cc:	4b27      	ldr	r3, [pc, #156]	@ (800666c <prvHeapInit+0xac>)
 80065ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f003 0307 	and.w	r3, r3, #7
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00c      	beq.n	80065f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	3307      	adds	r3, #7
 80065de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f023 0307 	bic.w	r3, r3, #7
 80065e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	4a1f      	ldr	r2, [pc, #124]	@ (800666c <prvHeapInit+0xac>)
 80065f0:	4413      	add	r3, r2
 80065f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80065f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006670 <prvHeapInit+0xb0>)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80065fe:	4b1c      	ldr	r3, [pc, #112]	@ (8006670 <prvHeapInit+0xb0>)
 8006600:	2200      	movs	r2, #0
 8006602:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	4413      	add	r3, r2
 800660a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800660c:	2208      	movs	r2, #8
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	1a9b      	subs	r3, r3, r2
 8006612:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f023 0307 	bic.w	r3, r3, #7
 800661a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4a15      	ldr	r2, [pc, #84]	@ (8006674 <prvHeapInit+0xb4>)
 8006620:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006622:	4b14      	ldr	r3, [pc, #80]	@ (8006674 <prvHeapInit+0xb4>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2200      	movs	r2, #0
 8006628:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800662a:	4b12      	ldr	r3, [pc, #72]	@ (8006674 <prvHeapInit+0xb4>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2200      	movs	r2, #0
 8006630:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	1ad2      	subs	r2, r2, r3
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006640:	4b0c      	ldr	r3, [pc, #48]	@ (8006674 <prvHeapInit+0xb4>)
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	4a0a      	ldr	r2, [pc, #40]	@ (8006678 <prvHeapInit+0xb8>)
 800664e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	4a09      	ldr	r2, [pc, #36]	@ (800667c <prvHeapInit+0xbc>)
 8006656:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006658:	4b09      	ldr	r3, [pc, #36]	@ (8006680 <prvHeapInit+0xc0>)
 800665a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800665e:	601a      	str	r2, [r3, #0]
}
 8006660:	bf00      	nop
 8006662:	3714      	adds	r7, #20
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr
 800666c:	200012f4 	.word	0x200012f4
 8006670:	20004ef4 	.word	0x20004ef4
 8006674:	20004efc 	.word	0x20004efc
 8006678:	20004f04 	.word	0x20004f04
 800667c:	20004f00 	.word	0x20004f00
 8006680:	20004f10 	.word	0x20004f10

08006684 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800668c:	4b28      	ldr	r3, [pc, #160]	@ (8006730 <prvInsertBlockIntoFreeList+0xac>)
 800668e:	60fb      	str	r3, [r7, #12]
 8006690:	e002      	b.n	8006698 <prvInsertBlockIntoFreeList+0x14>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	60fb      	str	r3, [r7, #12]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d8f7      	bhi.n	8006692 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	4413      	add	r3, r2
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d108      	bne.n	80066c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	685a      	ldr	r2, [r3, #4]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	441a      	add	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	441a      	add	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d118      	bne.n	800670c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	4b15      	ldr	r3, [pc, #84]	@ (8006734 <prvInsertBlockIntoFreeList+0xb0>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d00d      	beq.n	8006702 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	685a      	ldr	r2, [r3, #4]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	441a      	add	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	601a      	str	r2, [r3, #0]
 8006700:	e008      	b.n	8006714 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006702:	4b0c      	ldr	r3, [pc, #48]	@ (8006734 <prvInsertBlockIntoFreeList+0xb0>)
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	601a      	str	r2, [r3, #0]
 800670a:	e003      	b.n	8006714 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	429a      	cmp	r2, r3
 800671a:	d002      	beq.n	8006722 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006722:	bf00      	nop
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	20004ef4 	.word	0x20004ef4
 8006734:	20004efc 	.word	0x20004efc

08006738 <memset>:
 8006738:	4402      	add	r2, r0
 800673a:	4603      	mov	r3, r0
 800673c:	4293      	cmp	r3, r2
 800673e:	d100      	bne.n	8006742 <memset+0xa>
 8006740:	4770      	bx	lr
 8006742:	f803 1b01 	strb.w	r1, [r3], #1
 8006746:	e7f9      	b.n	800673c <memset+0x4>

08006748 <__libc_init_array>:
 8006748:	b570      	push	{r4, r5, r6, lr}
 800674a:	4d0d      	ldr	r5, [pc, #52]	@ (8006780 <__libc_init_array+0x38>)
 800674c:	4c0d      	ldr	r4, [pc, #52]	@ (8006784 <__libc_init_array+0x3c>)
 800674e:	1b64      	subs	r4, r4, r5
 8006750:	10a4      	asrs	r4, r4, #2
 8006752:	2600      	movs	r6, #0
 8006754:	42a6      	cmp	r6, r4
 8006756:	d109      	bne.n	800676c <__libc_init_array+0x24>
 8006758:	4d0b      	ldr	r5, [pc, #44]	@ (8006788 <__libc_init_array+0x40>)
 800675a:	4c0c      	ldr	r4, [pc, #48]	@ (800678c <__libc_init_array+0x44>)
 800675c:	f000 f826 	bl	80067ac <_init>
 8006760:	1b64      	subs	r4, r4, r5
 8006762:	10a4      	asrs	r4, r4, #2
 8006764:	2600      	movs	r6, #0
 8006766:	42a6      	cmp	r6, r4
 8006768:	d105      	bne.n	8006776 <__libc_init_array+0x2e>
 800676a:	bd70      	pop	{r4, r5, r6, pc}
 800676c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006770:	4798      	blx	r3
 8006772:	3601      	adds	r6, #1
 8006774:	e7ee      	b.n	8006754 <__libc_init_array+0xc>
 8006776:	f855 3b04 	ldr.w	r3, [r5], #4
 800677a:	4798      	blx	r3
 800677c:	3601      	adds	r6, #1
 800677e:	e7f2      	b.n	8006766 <__libc_init_array+0x1e>
 8006780:	0800685c 	.word	0x0800685c
 8006784:	0800685c 	.word	0x0800685c
 8006788:	0800685c 	.word	0x0800685c
 800678c:	08006860 	.word	0x08006860

08006790 <memcpy>:
 8006790:	440a      	add	r2, r1
 8006792:	4291      	cmp	r1, r2
 8006794:	f100 33ff 	add.w	r3, r0, #4294967295
 8006798:	d100      	bne.n	800679c <memcpy+0xc>
 800679a:	4770      	bx	lr
 800679c:	b510      	push	{r4, lr}
 800679e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067a6:	4291      	cmp	r1, r2
 80067a8:	d1f9      	bne.n	800679e <memcpy+0xe>
 80067aa:	bd10      	pop	{r4, pc}

080067ac <_init>:
 80067ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ae:	bf00      	nop
 80067b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067b2:	bc08      	pop	{r3}
 80067b4:	469e      	mov	lr, r3
 80067b6:	4770      	bx	lr

080067b8 <_fini>:
 80067b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ba:	bf00      	nop
 80067bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067be:	bc08      	pop	{r3}
 80067c0:	469e      	mov	lr, r3
 80067c2:	4770      	bx	lr
