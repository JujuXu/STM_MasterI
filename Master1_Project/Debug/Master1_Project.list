
Master1_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000adb8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  0800af88  0800af88  0000bf88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b46c  0800b46c  0000d074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b46c  0800b46c  0000c46c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b474  0800b474  0000d074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b474  0800b474  0000c474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b478  0800b478  0000c478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  0800b47c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000513c  20000074  0800b4f0  0000d074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200051b0  0800b4f0  0000d1b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021a79  00000000  00000000  0000d0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e91  00000000  00000000  0002eb1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cf8  00000000  00000000  000339b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000167e  00000000  00000000  000356a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026fbd  00000000  00000000  00036d26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002460f  00000000  00000000  0005dce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1d80  00000000  00000000  000822f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00164072  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ec8  00000000  00000000  001640b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0016bf80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800af70 	.word	0x0800af70

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800af70 	.word	0x0800af70

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <ADXL345_ReadData>:
	}

}*/


void ADXL345_ReadData(int16_t *x, int16_t *y, int16_t *z) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	@ 0x28
 80005e0:	af04      	add	r7, sp, #16
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
    uint8_t buffer[6];

    // Read 6 bytes of data starting from DATAX0
    HAL_I2C_Mem_Read(&hi2c1, ADXL345_ADDRESS, ADXL345_DATAX0, 1, buffer, 6, HAL_MAX_DELAY);
 80005e8:	f04f 33ff 	mov.w	r3, #4294967295
 80005ec:	9302      	str	r3, [sp, #8]
 80005ee:	2306      	movs	r3, #6
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	f107 0310 	add.w	r3, r7, #16
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2301      	movs	r3, #1
 80005fa:	2232      	movs	r2, #50	@ 0x32
 80005fc:	21a6      	movs	r1, #166	@ 0xa6
 80005fe:	4812      	ldr	r0, [pc, #72]	@ (8000648 <ADXL345_ReadData+0x6c>)
 8000600:	f002 fb32 	bl	8002c68 <HAL_I2C_Mem_Read>

    // Combine high and low bytes for each axis
    *x = (int16_t)((buffer[1] << 8) | buffer[0]);
 8000604:	7c7b      	ldrb	r3, [r7, #17]
 8000606:	b21b      	sxth	r3, r3
 8000608:	021b      	lsls	r3, r3, #8
 800060a:	b21a      	sxth	r2, r3
 800060c:	7c3b      	ldrb	r3, [r7, #16]
 800060e:	b21b      	sxth	r3, r3
 8000610:	4313      	orrs	r3, r2
 8000612:	b21a      	sxth	r2, r3
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((buffer[3] << 8) | buffer[2]);
 8000618:	7cfb      	ldrb	r3, [r7, #19]
 800061a:	b21b      	sxth	r3, r3
 800061c:	021b      	lsls	r3, r3, #8
 800061e:	b21a      	sxth	r2, r3
 8000620:	7cbb      	ldrb	r3, [r7, #18]
 8000622:	b21b      	sxth	r3, r3
 8000624:	4313      	orrs	r3, r2
 8000626:	b21a      	sxth	r2, r3
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((buffer[5] << 8) | buffer[4]);
 800062c:	7d7b      	ldrb	r3, [r7, #21]
 800062e:	b21b      	sxth	r3, r3
 8000630:	021b      	lsls	r3, r3, #8
 8000632:	b21a      	sxth	r2, r3
 8000634:	7d3b      	ldrb	r3, [r7, #20]
 8000636:	b21b      	sxth	r3, r3
 8000638:	4313      	orrs	r3, r2
 800063a:	b21a      	sxth	r2, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	801a      	strh	r2, [r3, #0]
}
 8000640:	bf00      	nop
 8000642:	3718      	adds	r7, #24
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200000fc 	.word	0x200000fc

0800064c <encoder_update>:
void encoder_init(void) {
    ticks = 0;
    steps = 0;
}

void encoder_update(void) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
    static int16_t last = 0;
    int16_t current = __HAL_TIM_GET_COUNTER(&htim4); // no mutex required, not a ressource, just a register read
 8000652:	4b39      	ldr	r3, [pc, #228]	@ (8000738 <encoder_update+0xec>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000658:	817b      	strh	r3, [r7, #10]
    int16_t delta = current - last;
 800065a:	897a      	ldrh	r2, [r7, #10]
 800065c:	4b37      	ldr	r3, [pc, #220]	@ (800073c <encoder_update+0xf0>)
 800065e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000662:	b29b      	uxth	r3, r3
 8000664:	1ad3      	subs	r3, r2, r3
 8000666:	b29b      	uxth	r3, r3
 8000668:	81fb      	strh	r3, [r7, #14]
    last = current;
 800066a:	4a34      	ldr	r2, [pc, #208]	@ (800073c <encoder_update+0xf0>)
 800066c:	897b      	ldrh	r3, [r7, #10]
 800066e:	8013      	strh	r3, [r2, #0]

    // Inversion du sens si nécessaire
    if (is_reversed)
 8000670:	4b33      	ldr	r3, [pc, #204]	@ (8000740 <encoder_update+0xf4>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d003      	beq.n	8000680 <encoder_update+0x34>
        delta = -delta;
 8000678:	89fb      	ldrh	r3, [r7, #14]
 800067a:	425b      	negs	r3, r3
 800067c:	b29b      	uxth	r3, r3
 800067e:	81fb      	strh	r3, [r7, #14]

    ticks += delta;
 8000680:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000684:	4b2f      	ldr	r3, [pc, #188]	@ (8000744 <encoder_update+0xf8>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4413      	add	r3, r2
 800068a:	4a2e      	ldr	r2, [pc, #184]	@ (8000744 <encoder_update+0xf8>)
 800068c:	6013      	str	r3, [r2, #0]
    int16_t new_steps = (int16_t)(ticks / 4);
 800068e:	4b2d      	ldr	r3, [pc, #180]	@ (8000744 <encoder_update+0xf8>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	da00      	bge.n	8000698 <encoder_update+0x4c>
 8000696:	3303      	adds	r3, #3
 8000698:	109b      	asrs	r3, r3, #2
 800069a:	81bb      	strh	r3, [r7, #12]

    taskENTER_CRITICAL();
 800069c:	f009 fca4 	bl	8009fe8 <vPortEnterCritical>
    if (is_cyclic) {
 80006a0:	4b29      	ldr	r3, [pc, #164]	@ (8000748 <encoder_update+0xfc>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d02a      	beq.n	80006fe <encoder_update+0xb2>
    	 int32_t range = max - min + 1;
 80006a8:	4b28      	ldr	r3, [pc, #160]	@ (800074c <encoder_update+0x100>)
 80006aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006ae:	461a      	mov	r2, r3
 80006b0:	4b27      	ldr	r3, [pc, #156]	@ (8000750 <encoder_update+0x104>)
 80006b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006b6:	1ad3      	subs	r3, r2, r3
 80006b8:	3301      	adds	r3, #1
 80006ba:	607b      	str	r3, [r7, #4]
    	 steps = ((new_steps - min) % range + range) % range + min;
 80006bc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80006c0:	4a23      	ldr	r2, [pc, #140]	@ (8000750 <encoder_update+0x104>)
 80006c2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	fb93 f2f2 	sdiv	r2, r3, r2
 80006ce:	6879      	ldr	r1, [r7, #4]
 80006d0:	fb01 f202 	mul.w	r2, r1, r2
 80006d4:	1a9a      	subs	r2, r3, r2
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4413      	add	r3, r2
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	fb93 f2f2 	sdiv	r2, r3, r2
 80006e0:	6879      	ldr	r1, [r7, #4]
 80006e2:	fb01 f202 	mul.w	r2, r1, r2
 80006e6:	1a9b      	subs	r3, r3, r2
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	4b19      	ldr	r3, [pc, #100]	@ (8000750 <encoder_update+0x104>)
 80006ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	4413      	add	r3, r2
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	b21a      	sxth	r2, r3
 80006f8:	4b16      	ldr	r3, [pc, #88]	@ (8000754 <encoder_update+0x108>)
 80006fa:	801a      	strh	r2, [r3, #0]
 80006fc:	e016      	b.n	800072c <encoder_update+0xe0>
    } else {
        if (new_steps < min) new_steps = min;
 80006fe:	4b14      	ldr	r3, [pc, #80]	@ (8000750 <encoder_update+0x104>)
 8000700:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000704:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000708:	429a      	cmp	r2, r3
 800070a:	da02      	bge.n	8000712 <encoder_update+0xc6>
 800070c:	4b10      	ldr	r3, [pc, #64]	@ (8000750 <encoder_update+0x104>)
 800070e:	881b      	ldrh	r3, [r3, #0]
 8000710:	81bb      	strh	r3, [r7, #12]
        if (new_steps > max) new_steps = max;
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <encoder_update+0x100>)
 8000714:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000718:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800071c:	429a      	cmp	r2, r3
 800071e:	dd02      	ble.n	8000726 <encoder_update+0xda>
 8000720:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <encoder_update+0x100>)
 8000722:	881b      	ldrh	r3, [r3, #0]
 8000724:	81bb      	strh	r3, [r7, #12]
        steps = new_steps;
 8000726:	4a0b      	ldr	r2, [pc, #44]	@ (8000754 <encoder_update+0x108>)
 8000728:	89bb      	ldrh	r3, [r7, #12]
 800072a:	8013      	strh	r3, [r2, #0]
    }
    taskEXIT_CRITICAL();
 800072c:	f009 fc8e 	bl	800a04c <vPortExitCritical>
}
 8000730:	bf00      	nop
 8000732:	3710      	adds	r7, #16
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	200001a0 	.word	0x200001a0
 800073c:	2000009a 	.word	0x2000009a
 8000740:	20000098 	.word	0x20000098
 8000744:	20000090 	.word	0x20000090
 8000748:	20000002 	.word	0x20000002
 800074c:	20000000 	.word	0x20000000
 8000750:	20000096 	.word	0x20000096
 8000754:	20000094 	.word	0x20000094

08000758 <encoder_get_steps>:

int32_t encoder_get_ticks(void) {
    return ticks;
}

int16_t encoder_get_steps(void) {
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
    return steps;
 800075c:	4b03      	ldr	r3, [pc, #12]	@ (800076c <encoder_get_steps+0x14>)
 800075e:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8000762:	4618      	mov	r0, r3
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	20000094 	.word	0x20000094

08000770 <encoder_set_min>:

void encoder_set_min(int16_t min_val) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	80fb      	strh	r3, [r7, #6]
	taskENTER_CRITICAL();
 800077a:	f009 fc35 	bl	8009fe8 <vPortEnterCritical>
    min = min_val;
 800077e:	4a04      	ldr	r2, [pc, #16]	@ (8000790 <encoder_set_min+0x20>)
 8000780:	88fb      	ldrh	r3, [r7, #6]
 8000782:	8013      	strh	r3, [r2, #0]
    taskEXIT_CRITICAL();
 8000784:	f009 fc62 	bl	800a04c <vPortExitCritical>
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000096 	.word	0x20000096

08000794 <encoder_set_max>:

void encoder_set_max(int16_t max_val) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	80fb      	strh	r3, [r7, #6]
	taskENTER_CRITICAL();
 800079e:	f009 fc23 	bl	8009fe8 <vPortEnterCritical>
    max = max_val;
 80007a2:	4a04      	ldr	r2, [pc, #16]	@ (80007b4 <encoder_set_max+0x20>)
 80007a4:	88fb      	ldrh	r3, [r7, #6]
 80007a6:	8013      	strh	r3, [r2, #0]
    taskEXIT_CRITICAL();
 80007a8:	f009 fc50 	bl	800a04c <vPortExitCritical>
}
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000000 	.word	0x20000000

080007b8 <encoder_reset_position>:

void encoder_reset_position(void) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	taskENTER_CRITICAL();
 80007bc:	f009 fc14 	bl	8009fe8 <vPortEnterCritical>
    ticks = 0;
 80007c0:	4b04      	ldr	r3, [pc, #16]	@ (80007d4 <encoder_reset_position+0x1c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
    steps = 0;
 80007c6:	4b04      	ldr	r3, [pc, #16]	@ (80007d8 <encoder_reset_position+0x20>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	801a      	strh	r2, [r3, #0]
    taskEXIT_CRITICAL();
 80007cc:	f009 fc3e 	bl	800a04c <vPortExitCritical>
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000090 	.word	0x20000090
 80007d8:	20000094 	.word	0x20000094

080007dc <encoder_button_update>:

void encoder_set_direction(bool reverse) {
    is_reversed = reverse;
}

void encoder_button_update(void) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
	static bool last_state = true;
	bool current = HAL_GPIO_ReadPin(ENC_BUTT_GPIO_Port, ENC_BUTT_Pin) == GPIO_PIN_RESET;
 80007e2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007e6:	4815      	ldr	r0, [pc, #84]	@ (800083c <encoder_button_update+0x60>)
 80007e8:	f002 f8c8 	bl	800297c <HAL_GPIO_ReadPin>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	bf0c      	ite	eq
 80007f2:	2301      	moveq	r3, #1
 80007f4:	2300      	movne	r3, #0
 80007f6:	71fb      	strb	r3, [r7, #7]
	if (current && !last_state) {
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d011      	beq.n	8000822 <encoder_button_update+0x46>
 80007fe:	4b10      	ldr	r3, [pc, #64]	@ (8000840 <encoder_button_update+0x64>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	f083 0301 	eor.w	r3, r3, #1
 8000806:	b2db      	uxtb	r3, r3
 8000808:	2b00      	cmp	r3, #0
 800080a:	d00a      	beq.n	8000822 <encoder_button_update+0x46>
		last_state = true;
 800080c:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <encoder_button_update+0x64>)
 800080e:	2201      	movs	r2, #1
 8000810:	701a      	strb	r2, [r3, #0]
		taskENTER_CRITICAL();
 8000812:	f009 fbe9 	bl	8009fe8 <vPortEnterCritical>
		button = true;
 8000816:	4b0b      	ldr	r3, [pc, #44]	@ (8000844 <encoder_button_update+0x68>)
 8000818:	2201      	movs	r2, #1
 800081a:	701a      	strb	r2, [r3, #0]
		taskEXIT_CRITICAL();
 800081c:	f009 fc16 	bl	800a04c <vPortExitCritical>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
		osDelay(50);
	} else {
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
	}*/
}
 8000820:	e008      	b.n	8000834 <encoder_button_update+0x58>
	} else if (!current) {
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	f083 0301 	eor.w	r3, r3, #1
 8000828:	b2db      	uxtb	r3, r3
 800082a:	2b00      	cmp	r3, #0
 800082c:	d002      	beq.n	8000834 <encoder_button_update+0x58>
		last_state = false;
 800082e:	4b04      	ldr	r3, [pc, #16]	@ (8000840 <encoder_button_update+0x64>)
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40020c00 	.word	0x40020c00
 8000840:	20000003 	.word	0x20000003
 8000844:	20000099 	.word	0x20000099

08000848 <encoder_get_button>:

bool encoder_get_button(void) {
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	if (button) {
 800084c:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <encoder_get_button+0x2c>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	b2db      	uxtb	r3, r3
 8000852:	2b00      	cmp	r3, #0
 8000854:	d008      	beq.n	8000868 <encoder_get_button+0x20>
		taskENTER_CRITICAL();
 8000856:	f009 fbc7 	bl	8009fe8 <vPortEnterCritical>
		button = false;
 800085a:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <encoder_get_button+0x2c>)
 800085c:	2200      	movs	r2, #0
 800085e:	701a      	strb	r2, [r3, #0]
		taskEXIT_CRITICAL();
 8000860:	f009 fbf4 	bl	800a04c <vPortExitCritical>
		/*HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
		osDelay(50);
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);*/

		return true;
 8000864:	2301      	movs	r3, #1
 8000866:	e002      	b.n	800086e <encoder_get_button+0x26>
	}

	return button;
 8000868:	4b02      	ldr	r3, [pc, #8]	@ (8000874 <encoder_get_button+0x2c>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	b2db      	uxtb	r3, r3
}
 800086e:	4618      	mov	r0, r3
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000099 	.word	0x20000099

08000878 <encoder_set_step>:

void encoder_set_step(int16_t step) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	80fb      	strh	r3, [r7, #6]
	taskENTER_CRITICAL();
 8000882:	f009 fbb1 	bl	8009fe8 <vPortEnterCritical>
	steps = step;
 8000886:	4a07      	ldr	r2, [pc, #28]	@ (80008a4 <encoder_set_step+0x2c>)
 8000888:	88fb      	ldrh	r3, [r7, #6]
 800088a:	8013      	strh	r3, [r2, #0]
	ticks = step*4;
 800088c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	4a05      	ldr	r2, [pc, #20]	@ (80008a8 <encoder_set_step+0x30>)
 8000894:	6013      	str	r3, [r2, #0]
	taskEXIT_CRITICAL();
 8000896:	f009 fbd9 	bl	800a04c <vPortExitCritical>
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000094 	.word	0x20000094
 80008a8:	20000090 	.word	0x20000090

080008ac <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of mpuMode */
  mpuModeHandle = osMutexNew(&mpuMode_attributes);
 80008b0:	4847      	ldr	r0, [pc, #284]	@ (80009d0 <MX_FREERTOS_Init+0x124>)
 80008b2:	f006 f8e2 	bl	8006a7a <osMutexNew>
 80008b6:	4603      	mov	r3, r0
 80008b8:	4a46      	ldr	r2, [pc, #280]	@ (80009d4 <MX_FREERTOS_Init+0x128>)
 80008ba:	6013      	str	r3, [r2, #0]

  /* creation of convMode */
  convModeHandle = osMutexNew(&convMode_attributes);
 80008bc:	4846      	ldr	r0, [pc, #280]	@ (80009d8 <MX_FREERTOS_Init+0x12c>)
 80008be:	f006 f8dc 	bl	8006a7a <osMutexNew>
 80008c2:	4603      	mov	r3, r0
 80008c4:	4a45      	ldr	r2, [pc, #276]	@ (80009dc <MX_FREERTOS_Init+0x130>)
 80008c6:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myADXLQueue */
  myADXLQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &myADXLQueue_attributes);
 80008c8:	4a45      	ldr	r2, [pc, #276]	@ (80009e0 <MX_FREERTOS_Init+0x134>)
 80008ca:	2102      	movs	r1, #2
 80008cc:	2010      	movs	r0, #16
 80008ce:	f006 f9e2 	bl	8006c96 <osMessageQueueNew>
 80008d2:	4603      	mov	r3, r0
 80008d4:	4a43      	ldr	r2, [pc, #268]	@ (80009e4 <MX_FREERTOS_Init+0x138>)
 80008d6:	6013      	str	r3, [r2, #0]

  /* creation of myVibratorQueue */
  myVibratorQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &myVibratorQueue_attributes);
 80008d8:	4a43      	ldr	r2, [pc, #268]	@ (80009e8 <MX_FREERTOS_Init+0x13c>)
 80008da:	2102      	movs	r1, #2
 80008dc:	2010      	movs	r0, #16
 80008de:	f006 f9da 	bl	8006c96 <osMessageQueueNew>
 80008e2:	4603      	mov	r3, r0
 80008e4:	4a41      	ldr	r2, [pc, #260]	@ (80009ec <MX_FREERTOS_Init+0x140>)
 80008e6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80008e8:	4a41      	ldr	r2, [pc, #260]	@ (80009f0 <MX_FREERTOS_Init+0x144>)
 80008ea:	2100      	movs	r1, #0
 80008ec:	4841      	ldr	r0, [pc, #260]	@ (80009f4 <MX_FREERTOS_Init+0x148>)
 80008ee:	f005 fedf 	bl	80066b0 <osThreadNew>
 80008f2:	4603      	mov	r3, r0
 80008f4:	4a40      	ldr	r2, [pc, #256]	@ (80009f8 <MX_FREERTOS_Init+0x14c>)
 80008f6:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(encoder, NULL, &encoderTask_attributes);
 80008f8:	4a40      	ldr	r2, [pc, #256]	@ (80009fc <MX_FREERTOS_Init+0x150>)
 80008fa:	2100      	movs	r1, #0
 80008fc:	4840      	ldr	r0, [pc, #256]	@ (8000a00 <MX_FREERTOS_Init+0x154>)
 80008fe:	f005 fed7 	bl	80066b0 <osThreadNew>
 8000902:	4603      	mov	r3, r0
 8000904:	4a3f      	ldr	r2, [pc, #252]	@ (8000a04 <MX_FREERTOS_Init+0x158>)
 8000906:	6013      	str	r3, [r2, #0]

  /* creation of SM_Task */
  SM_TaskHandle = osThreadNew(StateMachine, NULL, &SM_Task_attributes);
 8000908:	4a3f      	ldr	r2, [pc, #252]	@ (8000a08 <MX_FREERTOS_Init+0x15c>)
 800090a:	2100      	movs	r1, #0
 800090c:	483f      	ldr	r0, [pc, #252]	@ (8000a0c <MX_FREERTOS_Init+0x160>)
 800090e:	f005 fecf 	bl	80066b0 <osThreadNew>
 8000912:	4603      	mov	r3, r0
 8000914:	4a3e      	ldr	r2, [pc, #248]	@ (8000a10 <MX_FREERTOS_Init+0x164>)
 8000916:	6013      	str	r3, [r2, #0]

  /* creation of ledsTask */
  ledsTaskHandle = osThreadNew(leds, NULL, &ledsTask_attributes);
 8000918:	4a3e      	ldr	r2, [pc, #248]	@ (8000a14 <MX_FREERTOS_Init+0x168>)
 800091a:	2100      	movs	r1, #0
 800091c:	483e      	ldr	r0, [pc, #248]	@ (8000a18 <MX_FREERTOS_Init+0x16c>)
 800091e:	f005 fec7 	bl	80066b0 <osThreadNew>
 8000922:	4603      	mov	r3, r0
 8000924:	4a3d      	ldr	r2, [pc, #244]	@ (8000a1c <MX_FREERTOS_Init+0x170>)
 8000926:	6013      	str	r3, [r2, #0]

  /* creation of infoFuncTask */
  infoFuncTaskHandle = osThreadNew(infoFunc, NULL, &infoFuncTask_attributes);
 8000928:	4a3d      	ldr	r2, [pc, #244]	@ (8000a20 <MX_FREERTOS_Init+0x174>)
 800092a:	2100      	movs	r1, #0
 800092c:	483d      	ldr	r0, [pc, #244]	@ (8000a24 <MX_FREERTOS_Init+0x178>)
 800092e:	f005 febf 	bl	80066b0 <osThreadNew>
 8000932:	4603      	mov	r3, r0
 8000934:	4a3c      	ldr	r2, [pc, #240]	@ (8000a28 <MX_FREERTOS_Init+0x17c>)
 8000936:	6013      	str	r3, [r2, #0]

  /* creation of sensFuncTask */
  sensFuncTaskHandle = osThreadNew(sensFunc, NULL, &sensFuncTask_attributes);
 8000938:	4a3c      	ldr	r2, [pc, #240]	@ (8000a2c <MX_FREERTOS_Init+0x180>)
 800093a:	2100      	movs	r1, #0
 800093c:	483c      	ldr	r0, [pc, #240]	@ (8000a30 <MX_FREERTOS_Init+0x184>)
 800093e:	f005 feb7 	bl	80066b0 <osThreadNew>
 8000942:	4603      	mov	r3, r0
 8000944:	4a3b      	ldr	r2, [pc, #236]	@ (8000a34 <MX_FREERTOS_Init+0x188>)
 8000946:	6013      	str	r3, [r2, #0]

  /* creation of convFuncTask */
  convFuncTaskHandle = osThreadNew(convFunc, NULL, &convFuncTask_attributes);
 8000948:	4a3b      	ldr	r2, [pc, #236]	@ (8000a38 <MX_FREERTOS_Init+0x18c>)
 800094a:	2100      	movs	r1, #0
 800094c:	483b      	ldr	r0, [pc, #236]	@ (8000a3c <MX_FREERTOS_Init+0x190>)
 800094e:	f005 feaf 	bl	80066b0 <osThreadNew>
 8000952:	4603      	mov	r3, r0
 8000954:	4a3a      	ldr	r2, [pc, #232]	@ (8000a40 <MX_FREERTOS_Init+0x194>)
 8000956:	6013      	str	r3, [r2, #0]

  /* creation of actFuncTask */
  actFuncTaskHandle = osThreadNew(actFunc, NULL, &actFuncTask_attributes);
 8000958:	4a3a      	ldr	r2, [pc, #232]	@ (8000a44 <MX_FREERTOS_Init+0x198>)
 800095a:	2100      	movs	r1, #0
 800095c:	483a      	ldr	r0, [pc, #232]	@ (8000a48 <MX_FREERTOS_Init+0x19c>)
 800095e:	f005 fea7 	bl	80066b0 <osThreadNew>
 8000962:	4603      	mov	r3, r0
 8000964:	4a39      	ldr	r2, [pc, #228]	@ (8000a4c <MX_FREERTOS_Init+0x1a0>)
 8000966:	6013      	str	r3, [r2, #0]

  /* creation of mpuFuncTask */
  mpuFuncTaskHandle = osThreadNew(mpuFunc, NULL, &mpuFuncTask_attributes);
 8000968:	4a39      	ldr	r2, [pc, #228]	@ (8000a50 <MX_FREERTOS_Init+0x1a4>)
 800096a:	2100      	movs	r1, #0
 800096c:	4839      	ldr	r0, [pc, #228]	@ (8000a54 <MX_FREERTOS_Init+0x1a8>)
 800096e:	f005 fe9f 	bl	80066b0 <osThreadNew>
 8000972:	4603      	mov	r3, r0
 8000974:	4a38      	ldr	r2, [pc, #224]	@ (8000a58 <MX_FREERTOS_Init+0x1ac>)
 8000976:	6013      	str	r3, [r2, #0]

  /* creation of MappingThread */
  MappingThreadHandle = osThreadNew(StartMappingThread, NULL, &MappingThread_attributes);
 8000978:	4a38      	ldr	r2, [pc, #224]	@ (8000a5c <MX_FREERTOS_Init+0x1b0>)
 800097a:	2100      	movs	r1, #0
 800097c:	4838      	ldr	r0, [pc, #224]	@ (8000a60 <MX_FREERTOS_Init+0x1b4>)
 800097e:	f005 fe97 	bl	80066b0 <osThreadNew>
 8000982:	4603      	mov	r3, r0
 8000984:	4a37      	ldr	r2, [pc, #220]	@ (8000a64 <MX_FREERTOS_Init+0x1b8>)
 8000986:	6013      	str	r3, [r2, #0]

  /* creation of DutycycleThread */
  DutycycleThreadHandle = osThreadNew(StartDutycycleThread, NULL, &DutycycleThread_attributes);
 8000988:	4a37      	ldr	r2, [pc, #220]	@ (8000a68 <MX_FREERTOS_Init+0x1bc>)
 800098a:	2100      	movs	r1, #0
 800098c:	4837      	ldr	r0, [pc, #220]	@ (8000a6c <MX_FREERTOS_Init+0x1c0>)
 800098e:	f005 fe8f 	bl	80066b0 <osThreadNew>
 8000992:	4603      	mov	r3, r0
 8000994:	4a36      	ldr	r2, [pc, #216]	@ (8000a70 <MX_FREERTOS_Init+0x1c4>)
 8000996:	6013      	str	r3, [r2, #0]

  /* creation of VibratorThread */
  VibratorThreadHandle = osThreadNew(StartVibratorThread, NULL, &VibratorThread_attributes);
 8000998:	4a36      	ldr	r2, [pc, #216]	@ (8000a74 <MX_FREERTOS_Init+0x1c8>)
 800099a:	2100      	movs	r1, #0
 800099c:	4836      	ldr	r0, [pc, #216]	@ (8000a78 <MX_FREERTOS_Init+0x1cc>)
 800099e:	f005 fe87 	bl	80066b0 <osThreadNew>
 80009a2:	4603      	mov	r3, r0
 80009a4:	4a35      	ldr	r2, [pc, #212]	@ (8000a7c <MX_FREERTOS_Init+0x1d0>)
 80009a6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of smEvent */
  smEventHandle = osEventFlagsNew(&smEvent_attributes);
 80009a8:	4835      	ldr	r0, [pc, #212]	@ (8000a80 <MX_FREERTOS_Init+0x1d4>)
 80009aa:	f005 ff2e 	bl	800680a <osEventFlagsNew>
 80009ae:	4603      	mov	r3, r0
 80009b0:	4a34      	ldr	r2, [pc, #208]	@ (8000a84 <MX_FREERTOS_Init+0x1d8>)
 80009b2:	6013      	str	r3, [r2, #0]

  /* creation of funcEvent */
  funcEventHandle = osEventFlagsNew(&funcEvent_attributes);
 80009b4:	4834      	ldr	r0, [pc, #208]	@ (8000a88 <MX_FREERTOS_Init+0x1dc>)
 80009b6:	f005 ff28 	bl	800680a <osEventFlagsNew>
 80009ba:	4603      	mov	r3, r0
 80009bc:	4a33      	ldr	r2, [pc, #204]	@ (8000a8c <MX_FREERTOS_Init+0x1e0>)
 80009be:	6013      	str	r3, [r2, #0]

  /* creation of ledEvent */
  ledEventHandle = osEventFlagsNew(&ledEvent_attributes);
 80009c0:	4833      	ldr	r0, [pc, #204]	@ (8000a90 <MX_FREERTOS_Init+0x1e4>)
 80009c2:	f005 ff22 	bl	800680a <osEventFlagsNew>
 80009c6:	4603      	mov	r3, r0
 80009c8:	4a32      	ldr	r2, [pc, #200]	@ (8000a94 <MX_FREERTOS_Init+0x1e8>)
 80009ca:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	0800b3d0 	.word	0x0800b3d0
 80009d4:	200000d8 	.word	0x200000d8
 80009d8:	0800b3e0 	.word	0x0800b3e0
 80009dc:	200000dc 	.word	0x200000dc
 80009e0:	0800b3a0 	.word	0x0800b3a0
 80009e4:	200000d0 	.word	0x200000d0
 80009e8:	0800b3b8 	.word	0x0800b3b8
 80009ec:	200000d4 	.word	0x200000d4
 80009f0:	0800b1f0 	.word	0x0800b1f0
 80009f4:	08000a99 	.word	0x08000a99
 80009f8:	200000a0 	.word	0x200000a0
 80009fc:	0800b214 	.word	0x0800b214
 8000a00:	08000aa9 	.word	0x08000aa9
 8000a04:	200000a4 	.word	0x200000a4
 8000a08:	0800b238 	.word	0x0800b238
 8000a0c:	08000ac5 	.word	0x08000ac5
 8000a10:	200000a8 	.word	0x200000a8
 8000a14:	0800b25c 	.word	0x0800b25c
 8000a18:	08000ce5 	.word	0x08000ce5
 8000a1c:	200000ac 	.word	0x200000ac
 8000a20:	0800b280 	.word	0x0800b280
 8000a24:	08000d81 	.word	0x08000d81
 8000a28:	200000b0 	.word	0x200000b0
 8000a2c:	0800b2a4 	.word	0x0800b2a4
 8000a30:	08000e01 	.word	0x08000e01
 8000a34:	200000b4 	.word	0x200000b4
 8000a38:	0800b2c8 	.word	0x0800b2c8
 8000a3c:	08000f09 	.word	0x08000f09
 8000a40:	200000b8 	.word	0x200000b8
 8000a44:	0800b2ec 	.word	0x0800b2ec
 8000a48:	08001045 	.word	0x08001045
 8000a4c:	200000bc 	.word	0x200000bc
 8000a50:	0800b310 	.word	0x0800b310
 8000a54:	08001235 	.word	0x08001235
 8000a58:	200000c0 	.word	0x200000c0
 8000a5c:	0800b334 	.word	0x0800b334
 8000a60:	080013c9 	.word	0x080013c9
 8000a64:	200000c4 	.word	0x200000c4
 8000a68:	0800b358 	.word	0x0800b358
 8000a6c:	08001455 	.word	0x08001455
 8000a70:	200000c8 	.word	0x200000c8
 8000a74:	0800b37c 	.word	0x0800b37c
 8000a78:	080014e9 	.word	0x080014e9
 8000a7c:	200000cc 	.word	0x200000cc
 8000a80:	0800b3f0 	.word	0x0800b3f0
 8000a84:	200000e0 	.word	0x200000e0
 8000a88:	0800b400 	.word	0x0800b400
 8000a8c:	200000e4 	.word	0x200000e4
 8000a90:	0800b410 	.word	0x0800b410
 8000a94:	200000e8 	.word	0x200000e8

08000a98 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	f005 fe97 	bl	80067d4 <osDelay>
 8000aa6:	e7fb      	b.n	8000aa0 <StartDefaultTask+0x8>

08000aa8 <encoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder */
void encoder(void *argument)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoder */
  /* Infinite loop */
  for(;;)
  {
		encoder_update();
 8000ab0:	f7ff fdcc 	bl	800064c <encoder_update>
		encoder_button_update();
 8000ab4:	f7ff fe92 	bl	80007dc <encoder_button_update>

		osDelay(10);  // 100 Hz
 8000ab8:	200a      	movs	r0, #10
 8000aba:	f005 fe8b 	bl	80067d4 <osDelay>
		encoder_update();
 8000abe:	bf00      	nop
 8000ac0:	e7f6      	b.n	8000ab0 <encoder+0x8>
	...

08000ac4 <StateMachine>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StateMachine */
void StateMachine(void *argument)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	@ 0x28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  static bool FIF = false;
  static int16_t last_step = -1;  // Rendue statique pour garder la valeur entre les appels

  for(;;)
  {
    uint32_t flags = osEventFlagsGet(smEventHandle);
 8000acc:	4b7f      	ldr	r3, [pc, #508]	@ (8000ccc <StateMachine+0x208>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f005 ff4c 	bl	800696e <osEventFlagsGet>
 8000ad6:	60f8      	str	r0, [r7, #12]

    if (!(flags & FLAG_SM_OFF))  // tant que menu actif
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	f040 80ec 	bne.w	8000cbc <StateMachine+0x1f8>
    {
      if (!FIF) {
 8000ae4:	4b7a      	ldr	r3, [pc, #488]	@ (8000cd0 <StateMachine+0x20c>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	f083 0301 	eor.w	r3, r3, #1
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d04c      	beq.n	8000b8c <StateMachine+0xc8>
        if (last_step >= 0) {
 8000af2:	4b78      	ldr	r3, [pc, #480]	@ (8000cd4 <StateMachine+0x210>)
 8000af4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	db05      	blt.n	8000b08 <StateMachine+0x44>
          encoder_set_step(last_step);  // Revenir à la dernière position connue
 8000afc:	4b75      	ldr	r3, [pc, #468]	@ (8000cd4 <StateMachine+0x210>)
 8000afe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff feb8 	bl	8000878 <encoder_set_step>
        }

        encoder_set_min(0);
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f7ff fe31 	bl	8000770 <encoder_set_min>
        encoder_set_max(4);
 8000b0e:	2004      	movs	r0, #4
 8000b10:	f7ff fe40 	bl	8000794 <encoder_set_max>

        const menu_state_t *entry = NULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	@ 0x24
        for (int i = 0; menu_state[i].text != NULL; i++) {
 8000b18:	2300      	movs	r3, #0
 8000b1a:	623b      	str	r3, [r7, #32]
 8000b1c:	e01a      	b.n	8000b54 <StateMachine+0x90>
          if (menu_state[i].step == last_step) {
 8000b1e:	496e      	ldr	r1, [pc, #440]	@ (8000cd8 <StateMachine+0x214>)
 8000b20:	6a3a      	ldr	r2, [r7, #32]
 8000b22:	4613      	mov	r3, r2
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	4413      	add	r3, r2
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	440b      	add	r3, r1
 8000b2c:	3302      	adds	r3, #2
 8000b2e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b32:	4b68      	ldr	r3, [pc, #416]	@ (8000cd4 <StateMachine+0x210>)
 8000b34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d108      	bne.n	8000b4e <StateMachine+0x8a>
            entry = &menu_state[i];
 8000b3c:	6a3a      	ldr	r2, [r7, #32]
 8000b3e:	4613      	mov	r3, r2
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	4413      	add	r3, r2
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	4a64      	ldr	r2, [pc, #400]	@ (8000cd8 <StateMachine+0x214>)
 8000b48:	4413      	add	r3, r2
 8000b4a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000b4c:	e00d      	b.n	8000b6a <StateMachine+0xa6>
        for (int i = 0; menu_state[i].text != NULL; i++) {
 8000b4e:	6a3b      	ldr	r3, [r7, #32]
 8000b50:	3301      	adds	r3, #1
 8000b52:	623b      	str	r3, [r7, #32]
 8000b54:	4960      	ldr	r1, [pc, #384]	@ (8000cd8 <StateMachine+0x214>)
 8000b56:	6a3a      	ldr	r2, [r7, #32]
 8000b58:	4613      	mov	r3, r2
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	4413      	add	r3, r2
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	440b      	add	r3, r1
 8000b62:	3308      	adds	r3, #8
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d1d9      	bne.n	8000b1e <StateMachine+0x5a>
          }
        }

        if (entry != NULL) {
 8000b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d00a      	beq.n	8000b86 <StateMachine+0xc2>
          clearLCD();
 8000b70:	f000 ff24 	bl	80019bc <clearLCD>
          setCursor(0, 0);
 8000b74:	2100      	movs	r1, #0
 8000b76:	2000      	movs	r0, #0
 8000b78:	f000 ff96 	bl	8001aa8 <setCursor>
          writeLCD(entry->text);  // Réafficher le texte correspondant
 8000b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f000 ff25 	bl	80019d0 <writeLCD>
        }

        FIF = true;  // On a fait le setup d'entrée
 8000b86:	4b52      	ldr	r3, [pc, #328]	@ (8000cd0 <StateMachine+0x20c>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	701a      	strb	r2, [r3, #0]
      }

      osEventFlagsSet(ledEventHandle, FLAG_LED1);  // Clignotement menu actif
 8000b8c:	4b53      	ldr	r3, [pc, #332]	@ (8000cdc <StateMachine+0x218>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2101      	movs	r1, #1
 8000b92:	4618      	mov	r0, r3
 8000b94:	f005 fe78 	bl	8006888 <osEventFlagsSet>

      int16_t step = encoder_get_steps();
 8000b98:	f7ff fdde 	bl	8000758 <encoder_get_steps>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	817b      	strh	r3, [r7, #10]
      bool button = encoder_get_button();
 8000ba0:	f7ff fe52 	bl	8000848 <encoder_get_button>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	727b      	strb	r3, [r7, #9]

      if (step != last_step)
 8000ba8:	4b4a      	ldr	r3, [pc, #296]	@ (8000cd4 <StateMachine+0x210>)
 8000baa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bae:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d03a      	beq.n	8000c2c <StateMachine+0x168>
      {
        const menu_state_t *entry = NULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
        for (int i = 0; menu_state[i].text != NULL; i++) {
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61bb      	str	r3, [r7, #24]
 8000bbe:	e019      	b.n	8000bf4 <StateMachine+0x130>
          if (menu_state[i].step == step) {
 8000bc0:	4945      	ldr	r1, [pc, #276]	@ (8000cd8 <StateMachine+0x214>)
 8000bc2:	69ba      	ldr	r2, [r7, #24]
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	4413      	add	r3, r2
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	440b      	add	r3, r1
 8000bce:	3302      	adds	r3, #2
 8000bd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bd4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d108      	bne.n	8000bee <StateMachine+0x12a>
            entry = &menu_state[i];
 8000bdc:	69ba      	ldr	r2, [r7, #24]
 8000bde:	4613      	mov	r3, r2
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	4413      	add	r3, r2
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	4a3c      	ldr	r2, [pc, #240]	@ (8000cd8 <StateMachine+0x214>)
 8000be8:	4413      	add	r3, r2
 8000bea:	61fb      	str	r3, [r7, #28]
            break;
 8000bec:	e00d      	b.n	8000c0a <StateMachine+0x146>
        for (int i = 0; menu_state[i].text != NULL; i++) {
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	61bb      	str	r3, [r7, #24]
 8000bf4:	4938      	ldr	r1, [pc, #224]	@ (8000cd8 <StateMachine+0x214>)
 8000bf6:	69ba      	ldr	r2, [r7, #24]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	4413      	add	r3, r2
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	440b      	add	r3, r1
 8000c02:	3308      	adds	r3, #8
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d1da      	bne.n	8000bc0 <StateMachine+0xfc>
          }
        }

        if (entry != NULL) {
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d00d      	beq.n	8000c2c <StateMachine+0x168>
          clearLCD();
 8000c10:	f000 fed4 	bl	80019bc <clearLCD>
          setCursor(0, 0);
 8000c14:	2100      	movs	r1, #0
 8000c16:	2000      	movs	r0, #0
 8000c18:	f000 ff46 	bl	8001aa8 <setCursor>
          writeLCD(entry->text);
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f000 fed5 	bl	80019d0 <writeLCD>
          last_step = step;
 8000c26:	4a2b      	ldr	r2, [pc, #172]	@ (8000cd4 <StateMachine+0x210>)
 8000c28:	897b      	ldrh	r3, [r7, #10]
 8000c2a:	8013      	strh	r3, [r2, #0]
        }
      }

      if (button)
 8000c2c:	7a7b      	ldrb	r3, [r7, #9]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d047      	beq.n	8000cc2 <StateMachine+0x1fe>
      {
        osEventFlagsSet(ledEventHandle, FLAG_LED2);
 8000c32:	4b2a      	ldr	r3, [pc, #168]	@ (8000cdc <StateMachine+0x218>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2102      	movs	r1, #2
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f005 fe25 	bl	8006888 <osEventFlagsSet>

        const menu_state_t *entry = NULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
        for (int i = 0; menu_state[i].text != NULL; i++) {
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	e019      	b.n	8000c7c <StateMachine+0x1b8>
          if (menu_state[i].step == step) {
 8000c48:	4923      	ldr	r1, [pc, #140]	@ (8000cd8 <StateMachine+0x214>)
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	4413      	add	r3, r2
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	440b      	add	r3, r1
 8000c56:	3302      	adds	r3, #2
 8000c58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c5c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d108      	bne.n	8000c76 <StateMachine+0x1b2>
            entry = &menu_state[i];
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	4613      	mov	r3, r2
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	4413      	add	r3, r2
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	4a1a      	ldr	r2, [pc, #104]	@ (8000cd8 <StateMachine+0x214>)
 8000c70:	4413      	add	r3, r2
 8000c72:	617b      	str	r3, [r7, #20]
            break;
 8000c74:	e00d      	b.n	8000c92 <StateMachine+0x1ce>
        for (int i = 0; menu_state[i].text != NULL; i++) {
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	4916      	ldr	r1, [pc, #88]	@ (8000cd8 <StateMachine+0x214>)
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4613      	mov	r3, r2
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	4413      	add	r3, r2
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	440b      	add	r3, r1
 8000c8a:	3308      	adds	r3, #8
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d1da      	bne.n	8000c48 <StateMachine+0x184>
          }
        }

        if (entry != NULL) {
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d014      	beq.n	8000cc2 <StateMachine+0x1fe>
          osEventFlagsSet(funcEventHandle, entry->flag); // set task flag
 8000c98:	4b11      	ldr	r3, [pc, #68]	@ (8000ce0 <StateMachine+0x21c>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	889b      	ldrh	r3, [r3, #4]
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4610      	mov	r0, r2
 8000ca4:	f005 fdf0 	bl	8006888 <osEventFlagsSet>
          osEventFlagsSet(smEventHandle, FLAG_SM_OFF);   // exit statemachine
 8000ca8:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <StateMachine+0x208>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2101      	movs	r1, #1
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f005 fdea 	bl	8006888 <osEventFlagsSet>
          FIF = false;  // Réinitialise pour le prochain retour dans le menu
 8000cb4:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <StateMachine+0x20c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
 8000cba:	e002      	b.n	8000cc2 <StateMachine+0x1fe>
        }
      }
    }
    else
    {
      osDelay(100);  // Repos hors mode menu
 8000cbc:	2064      	movs	r0, #100	@ 0x64
 8000cbe:	f005 fd89 	bl	80067d4 <osDelay>
    }

    osDelay(20); // 50 Hz
 8000cc2:	2014      	movs	r0, #20
 8000cc4:	f005 fd86 	bl	80067d4 <osDelay>
  {
 8000cc8:	e700      	b.n	8000acc <StateMachine+0x8>
 8000cca:	bf00      	nop
 8000ccc:	200000e0 	.word	0x200000e0
 8000cd0:	200000ec 	.word	0x200000ec
 8000cd4:	20000004 	.word	0x20000004
 8000cd8:	0800b1a8 	.word	0x0800b1a8
 8000cdc:	200000e8 	.word	0x200000e8
 8000ce0:	200000e4 	.word	0x200000e4

08000ce4 <leds>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_leds */
void leds(void *argument)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN leds */
  /* Infinite loop */
  for(;;)
  {
	  uint32_t flags = osEventFlagsWait(ledEventHandle, FLAG_LED1|FLAG_LED2|FLAG_LED3, osFlagsWaitAny, osWaitForever);
 8000cec:	4b22      	ldr	r3, [pc, #136]	@ (8000d78 <leds+0x94>)
 8000cee:	6818      	ldr	r0, [r3, #0]
 8000cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2107      	movs	r1, #7
 8000cf8:	f005 fe5a 	bl	80069b0 <osEventFlagsWait>
 8000cfc:	60f8      	str	r0, [r7, #12]

	  if (flags & FLAG_LED1) {
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d00c      	beq.n	8000d22 <leds+0x3e>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	481b      	ldr	r0, [pc, #108]	@ (8000d7c <leds+0x98>)
 8000d0e:	f001 fe4d 	bl	80029ac <HAL_GPIO_WritePin>
		osDelay(50);
 8000d12:	2032      	movs	r0, #50	@ 0x32
 8000d14:	f005 fd5e 	bl	80067d4 <osDelay>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	4817      	ldr	r0, [pc, #92]	@ (8000d7c <leds+0x98>)
 8000d1e:	f001 fe45 	bl	80029ac <HAL_GPIO_WritePin>

	  }

	  if (flags & FLAG_LED2) {
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f003 0302 	and.w	r3, r3, #2
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00c      	beq.n	8000d46 <leds+0x62>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	2180      	movs	r1, #128	@ 0x80
 8000d30:	4812      	ldr	r0, [pc, #72]	@ (8000d7c <leds+0x98>)
 8000d32:	f001 fe3b 	bl	80029ac <HAL_GPIO_WritePin>
		osDelay(50);
 8000d36:	2032      	movs	r0, #50	@ 0x32
 8000d38:	f005 fd4c 	bl	80067d4 <osDelay>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2180      	movs	r1, #128	@ 0x80
 8000d40:	480e      	ldr	r0, [pc, #56]	@ (8000d7c <leds+0x98>)
 8000d42:	f001 fe33 	bl	80029ac <HAL_GPIO_WritePin>

	  }

	  if (flags & FLAG_LED3) {
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	f003 0304 	and.w	r3, r3, #4
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d00e      	beq.n	8000d6e <leds+0x8a>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000d50:	2201      	movs	r2, #1
 8000d52:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d56:	4809      	ldr	r0, [pc, #36]	@ (8000d7c <leds+0x98>)
 8000d58:	f001 fe28 	bl	80029ac <HAL_GPIO_WritePin>
		osDelay(50);
 8000d5c:	2032      	movs	r0, #50	@ 0x32
 8000d5e:	f005 fd39 	bl	80067d4 <osDelay>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d68:	4804      	ldr	r0, [pc, #16]	@ (8000d7c <leds+0x98>)
 8000d6a:	f001 fe1f 	bl	80029ac <HAL_GPIO_WritePin>
	  }
		osDelay(50);
 8000d6e:	2032      	movs	r0, #50	@ 0x32
 8000d70:	f005 fd30 	bl	80067d4 <osDelay>
  {
 8000d74:	e7ba      	b.n	8000cec <leds+0x8>
 8000d76:	bf00      	nop
 8000d78:	200000e8 	.word	0x200000e8
 8000d7c:	40020400 	.word	0x40020400

08000d80 <infoFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_infoFunc */
void infoFunc(void *argument)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN infoFunc */
  static bool FIF = false; // first in function
  /* Infinite loop */
  for(;;)
  {
	  uint32_t flags = osEventFlagsGet(funcEventHandle);
 8000d88:	4b19      	ldr	r3, [pc, #100]	@ (8000df0 <infoFunc+0x70>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f005 fdee 	bl	800696e <osEventFlagsGet>
 8000d92:	60f8      	str	r0, [r7, #12]

	  if (flags & FLAG_INFO) {
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d0f4      	beq.n	8000d88 <infoFunc+0x8>
		  if (!FIF) {
 8000d9e:	4b15      	ldr	r3, [pc, #84]	@ (8000df4 <infoFunc+0x74>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	f083 0301 	eor.w	r3, r3, #1
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d013      	beq.n	8000dd4 <infoFunc+0x54>
			  clearLCD();
 8000dac:	f000 fe06 	bl	80019bc <clearLCD>
			  setCursor(0, 0);
 8000db0:	2100      	movs	r1, #0
 8000db2:	2000      	movs	r0, #0
 8000db4:	f000 fe78 	bl	8001aa8 <setCursor>
			  writeLCD("Julien NAVEZ");
 8000db8:	480f      	ldr	r0, [pc, #60]	@ (8000df8 <infoFunc+0x78>)
 8000dba:	f000 fe09 	bl	80019d0 <writeLCD>
			  setCursor(0, 1);
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f000 fe71 	bl	8001aa8 <setCursor>
			  writeLCD("Nattan PAPIER");
 8000dc6:	480d      	ldr	r0, [pc, #52]	@ (8000dfc <infoFunc+0x7c>)
 8000dc8:	f000 fe02 	bl	80019d0 <writeLCD>

			  FIF = true;
 8000dcc:	4b09      	ldr	r3, [pc, #36]	@ (8000df4 <infoFunc+0x74>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	701a      	strb	r2, [r3, #0]
 8000dd2:	e7d9      	b.n	8000d88 <infoFunc+0x8>
		  } else {
			  bool button = encoder_get_button();
 8000dd4:	f7ff fd38 	bl	8000848 <encoder_get_button>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	72fb      	strb	r3, [r7, #11]

			  if (button) {
 8000ddc:	7afb      	ldrb	r3, [r7, #11]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d0d2      	beq.n	8000d88 <infoFunc+0x8>
				  exitFunc();
 8000de2:	f000 fbcb 	bl	800157c <exitFunc>
				  FIF = false;
 8000de6:	4b03      	ldr	r3, [pc, #12]	@ (8000df4 <infoFunc+0x74>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]
  {
 8000dec:	e7cc      	b.n	8000d88 <infoFunc+0x8>
 8000dee:	bf00      	nop
 8000df0:	200000e4 	.word	0x200000e4
 8000df4:	200000ed 	.word	0x200000ed
 8000df8:	0800b0b8 	.word	0x0800b0b8
 8000dfc:	0800b0c8 	.word	0x0800b0c8

08000e00 <sensFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensFunc */
void sensFunc(void *argument)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b092      	sub	sp, #72	@ 0x48
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensFunc */
  int16_t step = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  int16_t x_gyro = 0, y_gyro = 0, z_gyro = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8000e12:	2300      	movs	r3, #0
 8000e14:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8000e16:	2300      	movs	r3, #0
 8000e18:	873b      	strh	r3, [r7, #56]	@ 0x38
  /* Infinite loop */
  for(;;)
  {
	  uint32_t flags = osEventFlagsGet(funcEventHandle);
 8000e1a:	4b36      	ldr	r3, [pc, #216]	@ (8000ef4 <sensFunc+0xf4>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f005 fda5 	bl	800696e <osEventFlagsGet>
 8000e24:	6438      	str	r0, [r7, #64]	@ 0x40

	  if (flags & FLAG_SENSOR) {
 8000e26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d0f4      	beq.n	8000e1a <sensFunc+0x1a>
		  encoder_set_min(0);
 8000e30:	2000      	movs	r0, #0
 8000e32:	f7ff fc9d 	bl	8000770 <encoder_set_min>
		  encoder_set_max(0);
 8000e36:	2000      	movs	r0, #0
 8000e38:	f7ff fcac 	bl	8000794 <encoder_set_max>

		  step = encoder_get_steps();
 8000e3c:	f7ff fc8c 	bl	8000758 <encoder_get_steps>
 8000e40:	4603      	mov	r3, r0
 8000e42:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

		  clearLCD();
 8000e46:	f000 fdb9 	bl	80019bc <clearLCD>
			  setCursor(0, 1);
			  writeLCD("gz");
			  writeLCD("0.000");
		  }*/

		  if (step == 0) {
 8000e4a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d140      	bne.n	8000ed4 <sensFunc+0xd4>
		      ADXL345_ReadData(&x_gyro, &y_gyro, &z_gyro);
 8000e52:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000e56:	f107 013a 	add.w	r1, r7, #58	@ 0x3a
 8000e5a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fbbc 	bl	80005dc <ADXL345_ReadData>

		      char x_str[16];
		      char y_str[16];
		      char z_str[16];
			  snprintf(x_str, sizeof(x_str), "%d", x_gyro);
 8000e64:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8000e68:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8000e6c:	4a22      	ldr	r2, [pc, #136]	@ (8000ef8 <sensFunc+0xf8>)
 8000e6e:	2110      	movs	r1, #16
 8000e70:	f009 fbca 	bl	800a608 <sniprintf>
			  snprintf(y_str, sizeof(y_str), "%d", y_gyro);
 8000e74:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8000e78:	f107 0018 	add.w	r0, r7, #24
 8000e7c:	4a1e      	ldr	r2, [pc, #120]	@ (8000ef8 <sensFunc+0xf8>)
 8000e7e:	2110      	movs	r1, #16
 8000e80:	f009 fbc2 	bl	800a608 <sniprintf>
			  snprintf(z_str, sizeof(z_str), "%d", z_gyro);
 8000e84:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8000e88:	f107 0008 	add.w	r0, r7, #8
 8000e8c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ef8 <sensFunc+0xf8>)
 8000e8e:	2110      	movs	r1, #16
 8000e90:	f009 fbba 	bl	800a608 <sniprintf>

			  setCursor(0, 0);
 8000e94:	2100      	movs	r1, #0
 8000e96:	2000      	movs	r0, #0
 8000e98:	f000 fe06 	bl	8001aa8 <setCursor>
			  writeLCD("Gx:");
 8000e9c:	4817      	ldr	r0, [pc, #92]	@ (8000efc <sensFunc+0xfc>)
 8000e9e:	f000 fd97 	bl	80019d0 <writeLCD>
			  writeLCD(x_str);
 8000ea2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 fd92 	bl	80019d0 <writeLCD>
			  writeLCD(" Gy:");
 8000eac:	4814      	ldr	r0, [pc, #80]	@ (8000f00 <sensFunc+0x100>)
 8000eae:	f000 fd8f 	bl	80019d0 <writeLCD>
			  writeLCD(y_str);
 8000eb2:	f107 0318 	add.w	r3, r7, #24
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 fd8a 	bl	80019d0 <writeLCD>

			  setCursor(0, 1);
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	f000 fdf2 	bl	8001aa8 <setCursor>
			  writeLCD("Gz:");
 8000ec4:	480f      	ldr	r0, [pc, #60]	@ (8000f04 <sensFunc+0x104>)
 8000ec6:	f000 fd83 	bl	80019d0 <writeLCD>
			  writeLCD(z_str);
 8000eca:	f107 0308 	add.w	r3, r7, #8
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 fd7e 	bl	80019d0 <writeLCD>
		  }

		  bool button = encoder_get_button();
 8000ed4:	f7ff fcb8 	bl	8000848 <encoder_get_button>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		  if (button) {
 8000ede:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <sensFunc+0xea>
			  exitFunc();
 8000ee6:	f000 fb49 	bl	800157c <exitFunc>
		  }

		  osDelay(200);
 8000eea:	20c8      	movs	r0, #200	@ 0xc8
 8000eec:	f005 fc72 	bl	80067d4 <osDelay>
  {
 8000ef0:	e793      	b.n	8000e1a <sensFunc+0x1a>
 8000ef2:	bf00      	nop
 8000ef4:	200000e4 	.word	0x200000e4
 8000ef8:	0800b0d8 	.word	0x0800b0d8
 8000efc:	0800b0dc 	.word	0x0800b0dc
 8000f00:	0800b0e0 	.word	0x0800b0e0
 8000f04:	0800b0e8 	.word	0x0800b0e8

08000f08 <convFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_convFunc */
void convFunc(void *argument)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN convFunc */
  static bool FIF = false; // first in function
  static int16_t step = 0;
  static int16_t last_step = -1;
  char *mode[] = {
 8000f10:	4a43      	ldr	r2, [pc, #268]	@ (8001020 <convFunc+0x118>)
 8000f12:	f107 0308 	add.w	r3, r7, #8
 8000f16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f1a:	e883 0003 	stmia.w	r3, {r0, r1}
		  "MANUAL"
  };
  /* Infinite loop */
  for(;;)
  {
	  uint32_t flags = osEventFlagsGet(funcEventHandle);
 8000f1e:	4b41      	ldr	r3, [pc, #260]	@ (8001024 <convFunc+0x11c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f005 fd23 	bl	800696e <osEventFlagsGet>
 8000f28:	6178      	str	r0, [r7, #20]

	  if (flags & FLAG_CONV) {
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	f003 0304 	and.w	r3, r3, #4
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d070      	beq.n	8001016 <convFunc+0x10e>
		  encoder_set_min(0);
 8000f34:	2000      	movs	r0, #0
 8000f36:	f7ff fc1b 	bl	8000770 <encoder_set_min>
		  encoder_set_max(1);
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f7ff fc2a 	bl	8000794 <encoder_set_max>

		  if (!FIF) {
 8000f40:	4b39      	ldr	r3, [pc, #228]	@ (8001028 <convFunc+0x120>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	f083 0301 	eor.w	r3, r3, #1
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d016      	beq.n	8000f7c <convFunc+0x74>
			  clearLCD();
 8000f4e:	f000 fd35 	bl	80019bc <clearLCD>
			  setCursor(0, 0);
 8000f52:	2100      	movs	r1, #0
 8000f54:	2000      	movs	r0, #0
 8000f56:	f000 fda7 	bl	8001aa8 <setCursor>
			  writeLCD("Mode:");
 8000f5a:	4834      	ldr	r0, [pc, #208]	@ (800102c <convFunc+0x124>)
 8000f5c:	f000 fd38 	bl	80019d0 <writeLCD>

			  FIF = true;
 8000f60:	4b31      	ldr	r3, [pc, #196]	@ (8001028 <convFunc+0x120>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	701a      	strb	r2, [r3, #0]
			  encoder_set_step(step);
 8000f66:	4b32      	ldr	r3, [pc, #200]	@ (8001030 <convFunc+0x128>)
 8000f68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fc83 	bl	8000878 <encoder_set_step>
			  last_step = -1;
 8000f72:	4b30      	ldr	r3, [pc, #192]	@ (8001034 <convFunc+0x12c>)
 8000f74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f78:	801a      	strh	r2, [r3, #0]
 8000f7a:	e04c      	b.n	8001016 <convFunc+0x10e>
		  } else {
			  step = encoder_get_steps();
 8000f7c:	f7ff fbec 	bl	8000758 <encoder_get_steps>
 8000f80:	4603      	mov	r3, r0
 8000f82:	461a      	mov	r2, r3
 8000f84:	4b2a      	ldr	r3, [pc, #168]	@ (8001030 <convFunc+0x128>)
 8000f86:	801a      	strh	r2, [r3, #0]

			  if(step != last_step) {
 8000f88:	4b29      	ldr	r3, [pc, #164]	@ (8001030 <convFunc+0x128>)
 8000f8a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f8e:	4b29      	ldr	r3, [pc, #164]	@ (8001034 <convFunc+0x12c>)
 8000f90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d032      	beq.n	8000ffe <convFunc+0xf6>
				  last_step = step;
 8000f98:	4b25      	ldr	r3, [pc, #148]	@ (8001030 <convFunc+0x128>)
 8000f9a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f9e:	4b25      	ldr	r3, [pc, #148]	@ (8001034 <convFunc+0x12c>)
 8000fa0:	801a      	strh	r2, [r3, #0]

				  setCursor(0, 1);
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f000 fd7f 	bl	8001aa8 <setCursor>
				  writeLCD("                ");
 8000faa:	4823      	ldr	r0, [pc, #140]	@ (8001038 <convFunc+0x130>)
 8000fac:	f000 fd10 	bl	80019d0 <writeLCD>
				  setCursor(0, 1);
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f000 fd78 	bl	8001aa8 <setCursor>

				  if (step < sizeof(mode)) {
 8000fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8001030 <convFunc+0x128>)
 8000fba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	2b07      	cmp	r3, #7
 8000fc2:	d80a      	bhi.n	8000fda <convFunc+0xd2>
					  writeLCD(mode[step]);
 8000fc4:	4b1a      	ldr	r3, [pc, #104]	@ (8001030 <convFunc+0x128>)
 8000fc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	3318      	adds	r3, #24
 8000fce:	443b      	add	r3, r7
 8000fd0:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 fcfb 	bl	80019d0 <writeLCD>
				  }

				  osMutexAcquire(convModeHandle, osWaitForever);
 8000fda:	4b18      	ldr	r3, [pc, #96]	@ (800103c <convFunc+0x134>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f005 fdcf 	bl	8006b86 <osMutexAcquire>

				  conv_mode = (uint8_t) step;
 8000fe8:	4b11      	ldr	r3, [pc, #68]	@ (8001030 <convFunc+0x128>)
 8000fea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	4b13      	ldr	r3, [pc, #76]	@ (8001040 <convFunc+0x138>)
 8000ff2:	701a      	strb	r2, [r3, #0]

				  osMutexRelease(convModeHandle);
 8000ff4:	4b11      	ldr	r3, [pc, #68]	@ (800103c <convFunc+0x134>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f005 fe0f 	bl	8006c1c <osMutexRelease>
			  }

			  bool button = encoder_get_button();
 8000ffe:	f7ff fc23 	bl	8000848 <encoder_get_button>
 8001002:	4603      	mov	r3, r0
 8001004:	74fb      	strb	r3, [r7, #19]

			  if (button) {
 8001006:	7cfb      	ldrb	r3, [r7, #19]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d004      	beq.n	8001016 <convFunc+0x10e>
				  exitFunc();
 800100c:	f000 fab6 	bl	800157c <exitFunc>
				  FIF = false;
 8001010:	4b05      	ldr	r3, [pc, #20]	@ (8001028 <convFunc+0x120>)
 8001012:	2200      	movs	r2, #0
 8001014:	701a      	strb	r2, [r3, #0]
			  }
		  }
	  }

	  osDelay(1);
 8001016:	2001      	movs	r0, #1
 8001018:	f005 fbdc 	bl	80067d4 <osDelay>
  {
 800101c:	e77f      	b.n	8000f1e <convFunc+0x16>
 800101e:	bf00      	nop
 8001020:	0800b118 	.word	0x0800b118
 8001024:	200000e4 	.word	0x200000e4
 8001028:	200000ee 	.word	0x200000ee
 800102c:	0800b0ec 	.word	0x0800b0ec
 8001030:	200000f0 	.word	0x200000f0
 8001034:	20000006 	.word	0x20000006
 8001038:	0800b0f4 	.word	0x0800b0f4
 800103c:	200000dc 	.word	0x200000dc
 8001040:	2000009c 	.word	0x2000009c

08001044 <actFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_actFunc */
void actFunc(void *argument)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b090      	sub	sp, #64	@ 0x40
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN actFunc */
  static bool FIF = false; // first in function
  char *mode[] = {
 800104c:	4a68      	ldr	r2, [pc, #416]	@ (80011f0 <actFunc+0x1ac>)
 800104e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001052:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001056:	e883 0003 	stmia.w	r3, {r0, r1}
		  "AUTO",
		  "MAN"
	};
  static int16_t step = 0;
  static int16_t last_step = -1;
  uint32_t DC = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  static uint32_t last_DC = -1;
  /* Infinite loop */
  for(;;)
  {
	  uint32_t flags = osEventFlagsGet(funcEventHandle);
 800105e:	4b65      	ldr	r3, [pc, #404]	@ (80011f4 <actFunc+0x1b0>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4618      	mov	r0, r3
 8001064:	f005 fc83 	bl	800696e <osEventFlagsGet>
 8001068:	63b8      	str	r0, [r7, #56]	@ 0x38

	  if (flags & FLAG_ACT) {
 800106a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800106c:	f003 0308 	and.w	r3, r3, #8
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 80b8 	beq.w	80011e6 <actFunc+0x1a2>
		  if (!FIF) {
 8001076:	4b60      	ldr	r3, [pc, #384]	@ (80011f8 <actFunc+0x1b4>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	f083 0301 	eor.w	r3, r3, #1
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	d024      	beq.n	80010ce <actFunc+0x8a>
			  clearLCD();
 8001084:	f000 fc9a 	bl	80019bc <clearLCD>
			  setCursor(0, 0);
 8001088:	2100      	movs	r1, #0
 800108a:	2000      	movs	r0, #0
 800108c:	f000 fd0c 	bl	8001aa8 <setCursor>
			  writeLCD("VM QYF-740  ");
 8001090:	485a      	ldr	r0, [pc, #360]	@ (80011fc <actFunc+0x1b8>)
 8001092:	f000 fc9d 	bl	80019d0 <writeLCD>
			  if (conv_mode >= 0 && conv_mode < sizeof(mode)) {
 8001096:	4b5a      	ldr	r3, [pc, #360]	@ (8001200 <actFunc+0x1bc>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b07      	cmp	r3, #7
 800109c:	d809      	bhi.n	80010b2 <actFunc+0x6e>
				  writeLCD(mode[conv_mode]);
 800109e:	4b58      	ldr	r3, [pc, #352]	@ (8001200 <actFunc+0x1bc>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	3340      	adds	r3, #64	@ 0x40
 80010a6:	443b      	add	r3, r7
 80010a8:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 fc8f 	bl	80019d0 <writeLCD>
			  }

			  FIF = true;
 80010b2:	4b51      	ldr	r3, [pc, #324]	@ (80011f8 <actFunc+0x1b4>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	701a      	strb	r2, [r3, #0]
			  encoder_set_step(step);
 80010b8:	4b52      	ldr	r3, [pc, #328]	@ (8001204 <actFunc+0x1c0>)
 80010ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fbda 	bl	8000878 <encoder_set_step>
			  last_step = -1;
 80010c4:	4b50      	ldr	r3, [pc, #320]	@ (8001208 <actFunc+0x1c4>)
 80010c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010ca:	801a      	strh	r2, [r3, #0]
 80010cc:	e08b      	b.n	80011e6 <actFunc+0x1a2>
		  } else {
			  osMutexAcquire(convModeHandle, osWaitForever);
 80010ce:	4b4f      	ldr	r3, [pc, #316]	@ (800120c <actFunc+0x1c8>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f04f 31ff 	mov.w	r1, #4294967295
 80010d6:	4618      	mov	r0, r3
 80010d8:	f005 fd55 	bl	8006b86 <osMutexAcquire>
			  if (conv_mode == 0) {
 80010dc:	4b48      	ldr	r3, [pc, #288]	@ (8001200 <actFunc+0x1bc>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d129      	bne.n	8001138 <actFunc+0xf4>
				  setCursor(0, 1);
 80010e4:	2101      	movs	r1, #1
 80010e6:	2000      	movs	r0, #0
 80010e8:	f000 fcde 	bl	8001aa8 <setCursor>
				  writeLCD("Setpoint: ");
 80010ec:	4848      	ldr	r0, [pc, #288]	@ (8001210 <actFunc+0x1cc>)
 80010ee:	f000 fc6f 	bl	80019d0 <writeLCD>
				  //TIM1->CCR1 = (dutyCycle * (TIM1->ARR + 1)) / 100; // Set duty cycle

				  DC = 100 * TIM1->CCR1 / (TIM1->ARR + 1);
 80010f2:	4b48      	ldr	r3, [pc, #288]	@ (8001214 <actFunc+0x1d0>)
 80010f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010f6:	2264      	movs	r2, #100	@ 0x64
 80010f8:	fb03 f202 	mul.w	r2, r3, r2
 80010fc:	4b45      	ldr	r3, [pc, #276]	@ (8001214 <actFunc+0x1d0>)
 80010fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001100:	3301      	adds	r3, #1
 8001102:	fbb2 f3f3 	udiv	r3, r2, r3
 8001106:	63fb      	str	r3, [r7, #60]	@ 0x3c

				  if (DC != last_DC) {
 8001108:	4b43      	ldr	r3, [pc, #268]	@ (8001218 <actFunc+0x1d4>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800110e:	429a      	cmp	r2, r3
 8001110:	d056      	beq.n	80011c0 <actFunc+0x17c>
					  last_DC = DC;
 8001112:	4a41      	ldr	r2, [pc, #260]	@ (8001218 <actFunc+0x1d4>)
 8001114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001116:	6013      	str	r3, [r2, #0]

					  char buffer[16];
					  snprintf(buffer, sizeof(buffer), "%ld", DC);
 8001118:	f107 001c 	add.w	r0, r7, #28
 800111c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800111e:	4a3f      	ldr	r2, [pc, #252]	@ (800121c <actFunc+0x1d8>)
 8001120:	2110      	movs	r1, #16
 8001122:	f009 fa71 	bl	800a608 <sniprintf>

					  writeLCD(buffer); // auto setpoint variable
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	4618      	mov	r0, r3
 800112c:	f000 fc50 	bl	80019d0 <writeLCD>
					  writeLCD(" %");
 8001130:	483b      	ldr	r0, [pc, #236]	@ (8001220 <actFunc+0x1dc>)
 8001132:	f000 fc4d 	bl	80019d0 <writeLCD>
 8001136:	e043      	b.n	80011c0 <actFunc+0x17c>
				  }
			  } else if (conv_mode == 1) {
 8001138:	4b31      	ldr	r3, [pc, #196]	@ (8001200 <actFunc+0x1bc>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d13f      	bne.n	80011c0 <actFunc+0x17c>
				  encoder_set_min(30);
 8001140:	201e      	movs	r0, #30
 8001142:	f7ff fb15 	bl	8000770 <encoder_set_min>
				  encoder_set_max(100);
 8001146:	2064      	movs	r0, #100	@ 0x64
 8001148:	f7ff fb24 	bl	8000794 <encoder_set_max>

				  step = encoder_get_steps();
 800114c:	f7ff fb04 	bl	8000758 <encoder_get_steps>
 8001150:	4603      	mov	r3, r0
 8001152:	461a      	mov	r2, r3
 8001154:	4b2b      	ldr	r3, [pc, #172]	@ (8001204 <actFunc+0x1c0>)
 8001156:	801a      	strh	r2, [r3, #0]

				  if (step != last_step) {
 8001158:	4b2a      	ldr	r3, [pc, #168]	@ (8001204 <actFunc+0x1c0>)
 800115a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800115e:	4b2a      	ldr	r3, [pc, #168]	@ (8001208 <actFunc+0x1c4>)
 8001160:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001164:	429a      	cmp	r2, r3
 8001166:	d02b      	beq.n	80011c0 <actFunc+0x17c>
					  last_step = step;
 8001168:	4b26      	ldr	r3, [pc, #152]	@ (8001204 <actFunc+0x1c0>)
 800116a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800116e:	4b26      	ldr	r3, [pc, #152]	@ (8001208 <actFunc+0x1c4>)
 8001170:	801a      	strh	r2, [r3, #0]
					  setCursor(0, 1);
 8001172:	2101      	movs	r1, #1
 8001174:	2000      	movs	r0, #0
 8001176:	f000 fc97 	bl	8001aa8 <setCursor>
					  writeLCD("PWM: ");
 800117a:	482a      	ldr	r0, [pc, #168]	@ (8001224 <actFunc+0x1e0>)
 800117c:	f000 fc28 	bl	80019d0 <writeLCD>

					  char buffer[16];
					  snprintf(buffer, sizeof(buffer), "%d", step);
 8001180:	4b20      	ldr	r3, [pc, #128]	@ (8001204 <actFunc+0x1c0>)
 8001182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001186:	f107 000c 	add.w	r0, r7, #12
 800118a:	4a27      	ldr	r2, [pc, #156]	@ (8001228 <actFunc+0x1e4>)
 800118c:	2110      	movs	r1, #16
 800118e:	f009 fa3b 	bl	800a608 <sniprintf>

					  writeLCD(buffer);
 8001192:	f107 030c 	add.w	r3, r7, #12
 8001196:	4618      	mov	r0, r3
 8001198:	f000 fc1a 	bl	80019d0 <writeLCD>
					  writeLCD("%   ");
 800119c:	4823      	ldr	r0, [pc, #140]	@ (800122c <actFunc+0x1e8>)
 800119e:	f000 fc17 	bl	80019d0 <writeLCD>

					  // TODO SET PWM VALUE
					  TIM1->CCR1 = (step * (TIM1->ARR + 1)) / 100; // Set duty cycle
 80011a2:	4b18      	ldr	r3, [pc, #96]	@ (8001204 <actFunc+0x1c0>)
 80011a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001214 <actFunc+0x1d0>)
 80011ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ae:	3301      	adds	r3, #1
 80011b0:	fb02 f303 	mul.w	r3, r2, r3
 80011b4:	4a17      	ldr	r2, [pc, #92]	@ (8001214 <actFunc+0x1d0>)
 80011b6:	491e      	ldr	r1, [pc, #120]	@ (8001230 <actFunc+0x1ec>)
 80011b8:	fba1 1303 	umull	r1, r3, r1, r3
 80011bc:	095b      	lsrs	r3, r3, #5
 80011be:	6353      	str	r3, [r2, #52]	@ 0x34
				  }
			  }

			  osMutexRelease(convModeHandle);
 80011c0:	4b12      	ldr	r3, [pc, #72]	@ (800120c <actFunc+0x1c8>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f005 fd29 	bl	8006c1c <osMutexRelease>

			  bool button = encoder_get_button();
 80011ca:	f7ff fb3d 	bl	8000848 <encoder_get_button>
 80011ce:	4603      	mov	r3, r0
 80011d0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			  if (button) {
 80011d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d004      	beq.n	80011e6 <actFunc+0x1a2>
				  exitFunc();
 80011dc:	f000 f9ce 	bl	800157c <exitFunc>
				  FIF = false;
 80011e0:	4b05      	ldr	r3, [pc, #20]	@ (80011f8 <actFunc+0x1b4>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	701a      	strb	r2, [r3, #0]
			  }
		  }
	  }

	  osDelay(1);
 80011e6:	2001      	movs	r0, #1
 80011e8:	f005 faf4 	bl	80067d4 <osDelay>
  {
 80011ec:	e737      	b.n	800105e <actFunc+0x1a>
 80011ee:	bf00      	nop
 80011f0:	0800b158 	.word	0x0800b158
 80011f4:	200000e4 	.word	0x200000e4
 80011f8:	200000f2 	.word	0x200000f2
 80011fc:	0800b120 	.word	0x0800b120
 8001200:	2000009c 	.word	0x2000009c
 8001204:	200000f4 	.word	0x200000f4
 8001208:	20000008 	.word	0x20000008
 800120c:	200000dc 	.word	0x200000dc
 8001210:	0800b130 	.word	0x0800b130
 8001214:	40010000 	.word	0x40010000
 8001218:	2000000c 	.word	0x2000000c
 800121c:	0800b13c 	.word	0x0800b13c
 8001220:	0800b140 	.word	0x0800b140
 8001224:	0800b144 	.word	0x0800b144
 8001228:	0800b0d8 	.word	0x0800b0d8
 800122c:	0800b14c 	.word	0x0800b14c
 8001230:	51eb851f 	.word	0x51eb851f

08001234 <mpuFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_mpuFunc */
void mpuFunc(void *argument)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN mpuFunc */
	static bool FIF = false; // first in function
	static int16_t step = 0;
	static int16_t last_step = -1;
	char *mode[] = {
 800123c:	4a42      	ldr	r2, [pc, #264]	@ (8001348 <mpuFunc+0x114>)
 800123e:	f107 030c 	add.w	r3, r7, #12
 8001242:	ca07      	ldmia	r2, {r0, r1, r2}
 8001244:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		  "Z-Axis"
	};
	/* Infinite loop */
	for(;;)
	{
	  uint32_t flags = osEventFlagsGet(funcEventHandle);
 8001248:	4b40      	ldr	r3, [pc, #256]	@ (800134c <mpuFunc+0x118>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f005 fb8e 	bl	800696e <osEventFlagsGet>
 8001252:	61f8      	str	r0, [r7, #28]

	  if (flags & FLAG_MPU) {
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f003 0310 	and.w	r3, r3, #16
 800125a:	2b00      	cmp	r3, #0
 800125c:	d070      	beq.n	8001340 <mpuFunc+0x10c>
		  encoder_set_min(0);
 800125e:	2000      	movs	r0, #0
 8001260:	f7ff fa86 	bl	8000770 <encoder_set_min>
		  encoder_set_max(2);
 8001264:	2002      	movs	r0, #2
 8001266:	f7ff fa95 	bl	8000794 <encoder_set_max>

		  if (!FIF) {
 800126a:	4b39      	ldr	r3, [pc, #228]	@ (8001350 <mpuFunc+0x11c>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	f083 0301 	eor.w	r3, r3, #1
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b00      	cmp	r3, #0
 8001276:	d016      	beq.n	80012a6 <mpuFunc+0x72>
			  clearLCD();
 8001278:	f000 fba0 	bl	80019bc <clearLCD>
			  setCursor(0, 0);
 800127c:	2100      	movs	r1, #0
 800127e:	2000      	movs	r0, #0
 8001280:	f000 fc12 	bl	8001aa8 <setCursor>
			  writeLCD("MPU Mode:");
 8001284:	4833      	ldr	r0, [pc, #204]	@ (8001354 <mpuFunc+0x120>)
 8001286:	f000 fba3 	bl	80019d0 <writeLCD>

			  FIF = true;
 800128a:	4b31      	ldr	r3, [pc, #196]	@ (8001350 <mpuFunc+0x11c>)
 800128c:	2201      	movs	r2, #1
 800128e:	701a      	strb	r2, [r3, #0]
			  encoder_set_step(step);
 8001290:	4b31      	ldr	r3, [pc, #196]	@ (8001358 <mpuFunc+0x124>)
 8001292:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff faee 	bl	8000878 <encoder_set_step>
			  last_step = -1;
 800129c:	4b2f      	ldr	r3, [pc, #188]	@ (800135c <mpuFunc+0x128>)
 800129e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012a2:	801a      	strh	r2, [r3, #0]
 80012a4:	e04c      	b.n	8001340 <mpuFunc+0x10c>
		  } else {
			  step = encoder_get_steps();
 80012a6:	f7ff fa57 	bl	8000758 <encoder_get_steps>
 80012aa:	4603      	mov	r3, r0
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001358 <mpuFunc+0x124>)
 80012b0:	801a      	strh	r2, [r3, #0]

			  if(step != last_step) {
 80012b2:	4b29      	ldr	r3, [pc, #164]	@ (8001358 <mpuFunc+0x124>)
 80012b4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012b8:	4b28      	ldr	r3, [pc, #160]	@ (800135c <mpuFunc+0x128>)
 80012ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d032      	beq.n	8001328 <mpuFunc+0xf4>
				  last_step = step;
 80012c2:	4b25      	ldr	r3, [pc, #148]	@ (8001358 <mpuFunc+0x124>)
 80012c4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012c8:	4b24      	ldr	r3, [pc, #144]	@ (800135c <mpuFunc+0x128>)
 80012ca:	801a      	strh	r2, [r3, #0]

				  setCursor(0, 1);
 80012cc:	2101      	movs	r1, #1
 80012ce:	2000      	movs	r0, #0
 80012d0:	f000 fbea 	bl	8001aa8 <setCursor>
				  writeLCD("                ");
 80012d4:	4822      	ldr	r0, [pc, #136]	@ (8001360 <mpuFunc+0x12c>)
 80012d6:	f000 fb7b 	bl	80019d0 <writeLCD>
				  setCursor(0, 1);
 80012da:	2101      	movs	r1, #1
 80012dc:	2000      	movs	r0, #0
 80012de:	f000 fbe3 	bl	8001aa8 <setCursor>

				  if (step < sizeof(mode)) {
 80012e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001358 <mpuFunc+0x124>)
 80012e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	2b0b      	cmp	r3, #11
 80012ec:	d80a      	bhi.n	8001304 <mpuFunc+0xd0>
					  writeLCD(mode[step]);
 80012ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001358 <mpuFunc+0x124>)
 80012f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	3320      	adds	r3, #32
 80012f8:	443b      	add	r3, r7
 80012fa:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 fb66 	bl	80019d0 <writeLCD>
				  }

				  osMutexAcquire(mpuModeHandle, osWaitForever);
 8001304:	4b17      	ldr	r3, [pc, #92]	@ (8001364 <mpuFunc+0x130>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f04f 31ff 	mov.w	r1, #4294967295
 800130c:	4618      	mov	r0, r3
 800130e:	f005 fc3a 	bl	8006b86 <osMutexAcquire>

				  // TODO change mode

				  mpu_mode = (uint8_t) step;
 8001312:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <mpuFunc+0x124>)
 8001314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001318:	b2da      	uxtb	r2, r3
 800131a:	4b13      	ldr	r3, [pc, #76]	@ (8001368 <mpuFunc+0x134>)
 800131c:	701a      	strb	r2, [r3, #0]

				  osMutexRelease(mpuModeHandle);
 800131e:	4b11      	ldr	r3, [pc, #68]	@ (8001364 <mpuFunc+0x130>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f005 fc7a 	bl	8006c1c <osMutexRelease>
			  }

			  bool button = encoder_get_button();
 8001328:	f7ff fa8e 	bl	8000848 <encoder_get_button>
 800132c:	4603      	mov	r3, r0
 800132e:	76fb      	strb	r3, [r7, #27]

			  if (button) {
 8001330:	7efb      	ldrb	r3, [r7, #27]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d004      	beq.n	8001340 <mpuFunc+0x10c>
				  exitFunc();
 8001336:	f000 f921 	bl	800157c <exitFunc>
				  FIF = false;
 800133a:	4b05      	ldr	r3, [pc, #20]	@ (8001350 <mpuFunc+0x11c>)
 800133c:	2200      	movs	r2, #0
 800133e:	701a      	strb	r2, [r3, #0]
			  }
		  }
	  }

	  osDelay(1);
 8001340:	2001      	movs	r0, #1
 8001342:	f005 fa47 	bl	80067d4 <osDelay>
	{
 8001346:	e77f      	b.n	8001248 <mpuFunc+0x14>
 8001348:	0800b184 	.word	0x0800b184
 800134c:	200000e4 	.word	0x200000e4
 8001350:	200000f6 	.word	0x200000f6
 8001354:	0800b160 	.word	0x0800b160
 8001358:	200000f8 	.word	0x200000f8
 800135c:	20000010 	.word	0x20000010
 8001360:	0800b0f4 	.word	0x0800b0f4
 8001364:	200000d8 	.word	0x200000d8
 8001368:	2000009d 	.word	0x2000009d

0800136c <map_value.0>:
	{


	  osMessageQueueGet(myADXLQueueHandle, &valueReceived, 0,osWaitForever);

	  int16_t map_value(int16_t input_value, int16_t input_min, int16_t input_max, int16_t output_min, int16_t output_max) {
 800136c:	b490      	push	{r4, r7}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	4604      	mov	r4, r0
 8001374:	4608      	mov	r0, r1
 8001376:	4611      	mov	r1, r2
 8001378:	461a      	mov	r2, r3
 800137a:	4623      	mov	r3, r4
 800137c:	81fb      	strh	r3, [r7, #14]
 800137e:	4603      	mov	r3, r0
 8001380:	81bb      	strh	r3, [r7, #12]
 8001382:	460b      	mov	r3, r1
 8001384:	817b      	strh	r3, [r7, #10]
 8001386:	4613      	mov	r3, r2
 8001388:	813b      	strh	r3, [r7, #8]
 800138a:	f8c7 c004 	str.w	ip, [r7, #4]
	return (input_value - input_min) * (output_max - output_min) / (input_max - input_min) + output_min;
 800138e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001392:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 800139c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80013a0:	1a8a      	subs	r2, r1, r2
 80013a2:	fb03 f202 	mul.w	r2, r3, r2
 80013a6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80013aa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013ae:	1acb      	subs	r3, r1, r3
 80013b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	893b      	ldrh	r3, [r7, #8]
 80013b8:	4413      	add	r3, r2
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	b21b      	sxth	r3, r3
			}
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc90      	pop	{r4, r7}
 80013c6:	4770      	bx	lr

080013c8 <StartMappingThread>:
{
 80013c8:	b5b0      	push	{r4, r5, r7, lr}
 80013ca:	b08a      	sub	sp, #40	@ 0x28
 80013cc:	af02      	add	r7, sp, #8
 80013ce:	6078      	str	r0, [r7, #4]
void StartMappingThread(void *argument)
 80013d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013d4:	60fb      	str	r3, [r7, #12]
	int16_t input_value = 0; // Example input value
 80013d6:	2300      	movs	r3, #0
 80013d8:	83fb      	strh	r3, [r7, #30]
	int16_t input_min = -280;    // Input range minimum
 80013da:	f64f 63e8 	movw	r3, #65256	@ 0xfee8
 80013de:	83bb      	strh	r3, [r7, #28]
	int16_t input_max = 280;  // Input range maximum
 80013e0:	f44f 738c 	mov.w	r3, #280	@ 0x118
 80013e4:	837b      	strh	r3, [r7, #26]
	int16_t output_min = 30;  // Output range minimum
 80013e6:	231e      	movs	r3, #30
 80013e8:	833b      	strh	r3, [r7, #24]
	int16_t output_max = 100; // Output range maximum
 80013ea:	2364      	movs	r3, #100	@ 0x64
 80013ec:	82fb      	strh	r3, [r7, #22]
	  osMessageQueueGet(myADXLQueueHandle, &valueReceived, 0,osWaitForever);
 80013ee:	4b17      	ldr	r3, [pc, #92]	@ (800144c <StartMappingThread+0x84>)
 80013f0:	6818      	ldr	r0, [r3, #0]
 80013f2:	f107 0112 	add.w	r1, r7, #18
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295
 80013fa:	2200      	movs	r2, #0
 80013fc:	f005 fd1e 	bl	8006e3c <osMessageQueueGet>

	  input_value = valueReceived;
 8001400:	8a7b      	ldrh	r3, [r7, #18]
 8001402:	83fb      	strh	r3, [r7, #30]

	  int16_t mapped_value = map_value(input_value, input_min, input_max, output_min, output_max);
 8001404:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8001408:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800140c:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8001410:	f9b7 001e 	ldrsh.w	r0, [r7, #30]
 8001414:	f107 050c 	add.w	r5, r7, #12
 8001418:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	46ac      	mov	ip, r5
 8001420:	4623      	mov	r3, r4
 8001422:	f7ff ffa3 	bl	800136c <map_value.0>
 8001426:	4603      	mov	r3, r0
 8001428:	82bb      	strh	r3, [r7, #20]

	  valueToSend = mapped_value;
 800142a:	8abb      	ldrh	r3, [r7, #20]
 800142c:	823b      	strh	r3, [r7, #16]

	  osMessageQueuePut(myVibratorQueueHandle, &valueToSend, 0,0);
 800142e:	4b08      	ldr	r3, [pc, #32]	@ (8001450 <StartMappingThread+0x88>)
 8001430:	6818      	ldr	r0, [r3, #0]
 8001432:	f107 0110 	add.w	r1, r7, #16
 8001436:	2300      	movs	r3, #0
 8001438:	2200      	movs	r2, #0
 800143a:	f005 fc9f 	bl	8006d7c <osMessageQueuePut>

	  //sprintf(buffer, "Valeur: %d\r\n", mapped_value);
	  //HAL_UART_Transmit(&huart3, (uint16_t *)buffer, strlen(buffer), HAL_MAX_DELAY);

	  osDelay(500);
 800143e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001442:	f005 f9c7 	bl	80067d4 <osDelay>
	{
 8001446:	bf00      	nop
 8001448:	e7d1      	b.n	80013ee <StartMappingThread+0x26>
 800144a:	bf00      	nop
 800144c:	200000d0 	.word	0x200000d0
 8001450:	200000d4 	.word	0x200000d4

08001454 <StartDutycycleThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDutycycleThread */
void StartDutycycleThread(void *argument)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDutycycleThread */
  uint8_t dutyCycle = 50;
 800145c:	2332      	movs	r3, #50	@ 0x32
 800145e:	73fb      	strb	r3, [r7, #15]

  int16_t valueReceived;
  /* Infinite loop */
  for(;;)
  {
	osEventFlagsSet(ledEventHandle, FLAG_LED3);
 8001460:	4b1b      	ldr	r3, [pc, #108]	@ (80014d0 <StartDutycycleThread+0x7c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2104      	movs	r1, #4
 8001466:	4618      	mov	r0, r3
 8001468:	f005 fa0e 	bl	8006888 <osEventFlagsSet>
	osMessageQueueGet(myVibratorQueueHandle, &valueReceived, 0,osWaitForever);
 800146c:	4b19      	ldr	r3, [pc, #100]	@ (80014d4 <StartDutycycleThread+0x80>)
 800146e:	6818      	ldr	r0, [r3, #0]
 8001470:	f107 010c 	add.w	r1, r7, #12
 8001474:	f04f 33ff 	mov.w	r3, #4294967295
 8001478:	2200      	movs	r2, #0
 800147a:	f005 fcdf 	bl	8006e3c <osMessageQueueGet>

	dutyCycle = valueReceived;
 800147e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001482:	73fb      	strb	r3, [r7, #15]
	if (dutyCycle > 100) dutyCycle = 100; // Clamp duty cycle to 100%
 8001484:	7bfb      	ldrb	r3, [r7, #15]
 8001486:	2b64      	cmp	r3, #100	@ 0x64
 8001488:	d901      	bls.n	800148e <StartDutycycleThread+0x3a>
 800148a:	2364      	movs	r3, #100	@ 0x64
 800148c:	73fb      	strb	r3, [r7, #15]

	osMutexAcquire(convModeHandle, osWaitForever);
 800148e:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <StartDutycycleThread+0x84>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f04f 31ff 	mov.w	r1, #4294967295
 8001496:	4618      	mov	r0, r3
 8001498:	f005 fb75 	bl	8006b86 <osMutexAcquire>
	if (conv_mode == 0) TIM1->CCR1 = (dutyCycle * (TIM1->ARR + 1)) / 100; // Set duty cycle
 800149c:	4b0f      	ldr	r3, [pc, #60]	@ (80014dc <StartDutycycleThread+0x88>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d10b      	bne.n	80014bc <StartDutycycleThread+0x68>
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	4a0e      	ldr	r2, [pc, #56]	@ (80014e0 <StartDutycycleThread+0x8c>)
 80014a8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80014aa:	3201      	adds	r2, #1
 80014ac:	fb02 f303 	mul.w	r3, r2, r3
 80014b0:	4a0b      	ldr	r2, [pc, #44]	@ (80014e0 <StartDutycycleThread+0x8c>)
 80014b2:	490c      	ldr	r1, [pc, #48]	@ (80014e4 <StartDutycycleThread+0x90>)
 80014b4:	fba1 1303 	umull	r1, r3, r1, r3
 80014b8:	095b      	lsrs	r3, r3, #5
 80014ba:	6353      	str	r3, [r2, #52]	@ 0x34
	osMutexRelease(convModeHandle);
 80014bc:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <StartDutycycleThread+0x84>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f005 fbab 	bl	8006c1c <osMutexRelease>

	//sprintf(buffer, "duty cycle: %d\r\n", dutyCycle);
	//HAL_UART_Transmit(&huart3, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
	osDelay(500);
 80014c6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014ca:	f005 f983 	bl	80067d4 <osDelay>
	osEventFlagsSet(ledEventHandle, FLAG_LED3);
 80014ce:	e7c7      	b.n	8001460 <StartDutycycleThread+0xc>
 80014d0:	200000e8 	.word	0x200000e8
 80014d4:	200000d4 	.word	0x200000d4
 80014d8:	200000dc 	.word	0x200000dc
 80014dc:	2000009c 	.word	0x2000009c
 80014e0:	40010000 	.word	0x40010000
 80014e4:	51eb851f 	.word	0x51eb851f

080014e8 <StartVibratorThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartVibratorThread */
void StartVibratorThread(void *argument)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartVibratorThread */
	int16_t x_gyro = 0, y_gyro = 0, z_gyro = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	81fb      	strh	r3, [r7, #14]
 80014f4:	2300      	movs	r3, #0
 80014f6:	81bb      	strh	r3, [r7, #12]
 80014f8:	2300      	movs	r3, #0
 80014fa:	817b      	strh	r3, [r7, #10]

	int16_t valueToSend;
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(mpuModeHandle, osWaitForever);
 80014fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001570 <StartVibratorThread+0x88>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f04f 31ff 	mov.w	r1, #4294967295
 8001504:	4618      	mov	r0, r3
 8001506:	f005 fb3e 	bl	8006b86 <osMutexAcquire>
      ADXL345_ReadData(&x_gyro, &y_gyro, &z_gyro);
 800150a:	f107 020a 	add.w	r2, r7, #10
 800150e:	f107 010c 	add.w	r1, r7, #12
 8001512:	f107 030e 	add.w	r3, r7, #14
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff f860 	bl	80005dc <ADXL345_ReadData>

	  switch (mpu_mode) {
 800151c:	4b15      	ldr	r3, [pc, #84]	@ (8001574 <StartVibratorThread+0x8c>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b03      	cmp	r3, #3
 8001522:	d00e      	beq.n	8001542 <StartVibratorThread+0x5a>
 8001524:	2b03      	cmp	r3, #3
 8001526:	dc10      	bgt.n	800154a <StartVibratorThread+0x62>
 8001528:	2b01      	cmp	r3, #1
 800152a:	d002      	beq.n	8001532 <StartVibratorThread+0x4a>
 800152c:	2b02      	cmp	r3, #2
 800152e:	d004      	beq.n	800153a <StartVibratorThread+0x52>
			  break;
		  case 3: // Send z-axis data
			  valueToSend = z_gyro;
			  break;
		  default:
			  break;
 8001530:	e00b      	b.n	800154a <StartVibratorThread+0x62>
			  valueToSend = x_gyro;
 8001532:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001536:	813b      	strh	r3, [r7, #8]
			  break;
 8001538:	e008      	b.n	800154c <StartVibratorThread+0x64>
			  valueToSend = y_gyro;
 800153a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800153e:	813b      	strh	r3, [r7, #8]
			  break;
 8001540:	e004      	b.n	800154c <StartVibratorThread+0x64>
			  valueToSend = z_gyro;
 8001542:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001546:	813b      	strh	r3, [r7, #8]
			  break;
 8001548:	e000      	b.n	800154c <StartVibratorThread+0x64>
			  break;
 800154a:	bf00      	nop
	  }
	  osMutexRelease(mpuModeHandle);
 800154c:	4b08      	ldr	r3, [pc, #32]	@ (8001570 <StartVibratorThread+0x88>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4618      	mov	r0, r3
 8001552:	f005 fb63 	bl	8006c1c <osMutexRelease>

      osMessageQueuePut(myADXLQueueHandle, &valueToSend, 0,0);
 8001556:	4b08      	ldr	r3, [pc, #32]	@ (8001578 <StartVibratorThread+0x90>)
 8001558:	6818      	ldr	r0, [r3, #0]
 800155a:	f107 0108 	add.w	r1, r7, #8
 800155e:	2300      	movs	r3, #0
 8001560:	2200      	movs	r2, #0
 8001562:	f005 fc0b 	bl	8006d7c <osMessageQueuePut>

      //sprintf(buffer, "X: %d, Y: %d, Z: %d\r\n", x_gyro, y_gyro, z_gyro);
      //HAL_UART_Transmit(&huart3, (uint16_t *)buffer, strlen(buffer), HAL_MAX_DELAY);

      osDelay(500);
 8001566:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800156a:	f005 f933 	bl	80067d4 <osDelay>
	  osMutexAcquire(mpuModeHandle, osWaitForever);
 800156e:	e7c5      	b.n	80014fc <StartVibratorThread+0x14>
 8001570:	200000d8 	.word	0x200000d8
 8001574:	2000009d 	.word	0x2000009d
 8001578:	200000d0 	.word	0x200000d0

0800157c <exitFunc>:
  /* USER CODE END StartVibratorThread */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void exitFunc(void) {
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
	encoder_reset_position();
 8001580:	f7ff f91a 	bl	80007b8 <encoder_reset_position>

	if (funcEventHandle != NULL) {
 8001584:	4b16      	ldr	r3, [pc, #88]	@ (80015e0 <exitFunc+0x64>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d01d      	beq.n	80015c8 <exitFunc+0x4c>
		osEventFlagsClear(funcEventHandle, FLAG_INFO);
 800158c:	4b14      	ldr	r3, [pc, #80]	@ (80015e0 <exitFunc+0x64>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2101      	movs	r1, #1
 8001592:	4618      	mov	r0, r3
 8001594:	f005 f9ba 	bl	800690c <osEventFlagsClear>
		osEventFlagsClear(funcEventHandle, FLAG_SENSOR);
 8001598:	4b11      	ldr	r3, [pc, #68]	@ (80015e0 <exitFunc+0x64>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2102      	movs	r1, #2
 800159e:	4618      	mov	r0, r3
 80015a0:	f005 f9b4 	bl	800690c <osEventFlagsClear>
		osEventFlagsClear(funcEventHandle, FLAG_CONV);
 80015a4:	4b0e      	ldr	r3, [pc, #56]	@ (80015e0 <exitFunc+0x64>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2104      	movs	r1, #4
 80015aa:	4618      	mov	r0, r3
 80015ac:	f005 f9ae 	bl	800690c <osEventFlagsClear>
		osEventFlagsClear(funcEventHandle, FLAG_ACT);
 80015b0:	4b0b      	ldr	r3, [pc, #44]	@ (80015e0 <exitFunc+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2108      	movs	r1, #8
 80015b6:	4618      	mov	r0, r3
 80015b8:	f005 f9a8 	bl	800690c <osEventFlagsClear>
		osEventFlagsClear(funcEventHandle, FLAG_MPU);
 80015bc:	4b08      	ldr	r3, [pc, #32]	@ (80015e0 <exitFunc+0x64>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2110      	movs	r1, #16
 80015c2:	4618      	mov	r0, r3
 80015c4:	f005 f9a2 	bl	800690c <osEventFlagsClear>
	}
		//osEventFlagsSet(funcEventHandle, 0xFFFFFFFF);


	if (smEventHandle != NULL)
 80015c8:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <exitFunc+0x68>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d005      	beq.n	80015dc <exitFunc+0x60>
		osEventFlagsClear(smEventHandle, FLAG_SM_OFF);
 80015d0:	4b04      	ldr	r3, [pc, #16]	@ (80015e4 <exitFunc+0x68>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2101      	movs	r1, #1
 80015d6:	4618      	mov	r0, r3
 80015d8:	f005 f998 	bl	800690c <osEventFlagsClear>
}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	200000e4 	.word	0x200000e4
 80015e4:	200000e0 	.word	0x200000e0

080015e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08c      	sub	sp, #48	@ 0x30
 80015ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
 80015fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
 8001602:	4b6b      	ldr	r3, [pc, #428]	@ (80017b0 <MX_GPIO_Init+0x1c8>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	4a6a      	ldr	r2, [pc, #424]	@ (80017b0 <MX_GPIO_Init+0x1c8>)
 8001608:	f043 0304 	orr.w	r3, r3, #4
 800160c:	6313      	str	r3, [r2, #48]	@ 0x30
 800160e:	4b68      	ldr	r3, [pc, #416]	@ (80017b0 <MX_GPIO_Init+0x1c8>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	f003 0304 	and.w	r3, r3, #4
 8001616:	61bb      	str	r3, [r7, #24]
 8001618:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	4b64      	ldr	r3, [pc, #400]	@ (80017b0 <MX_GPIO_Init+0x1c8>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	4a63      	ldr	r2, [pc, #396]	@ (80017b0 <MX_GPIO_Init+0x1c8>)
 8001624:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001628:	6313      	str	r3, [r2, #48]	@ 0x30
 800162a:	4b61      	ldr	r3, [pc, #388]	@ (80017b0 <MX_GPIO_Init+0x1c8>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	4b5d      	ldr	r3, [pc, #372]	@ (80017b0 <MX_GPIO_Init+0x1c8>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	4a5c      	ldr	r2, [pc, #368]	@ (80017b0 <MX_GPIO_Init+0x1c8>)
 8001640:	f043 0302 	orr.w	r3, r3, #2
 8001644:	6313      	str	r3, [r2, #48]	@ 0x30
 8001646:	4b5a      	ldr	r3, [pc, #360]	@ (80017b0 <MX_GPIO_Init+0x1c8>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	4b56      	ldr	r3, [pc, #344]	@ (80017b0 <MX_GPIO_Init+0x1c8>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	4a55      	ldr	r2, [pc, #340]	@ (80017b0 <MX_GPIO_Init+0x1c8>)
 800165c:	f043 0310 	orr.w	r3, r3, #16
 8001660:	6313      	str	r3, [r2, #48]	@ 0x30
 8001662:	4b53      	ldr	r3, [pc, #332]	@ (80017b0 <MX_GPIO_Init+0x1c8>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	f003 0310 	and.w	r3, r3, #16
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	4b4f      	ldr	r3, [pc, #316]	@ (80017b0 <MX_GPIO_Init+0x1c8>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	4a4e      	ldr	r2, [pc, #312]	@ (80017b0 <MX_GPIO_Init+0x1c8>)
 8001678:	f043 0308 	orr.w	r3, r3, #8
 800167c:	6313      	str	r3, [r2, #48]	@ 0x30
 800167e:	4b4c      	ldr	r3, [pc, #304]	@ (80017b0 <MX_GPIO_Init+0x1c8>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	f003 0308 	and.w	r3, r3, #8
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	4b48      	ldr	r3, [pc, #288]	@ (80017b0 <MX_GPIO_Init+0x1c8>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	4a47      	ldr	r2, [pc, #284]	@ (80017b0 <MX_GPIO_Init+0x1c8>)
 8001694:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001698:	6313      	str	r3, [r2, #48]	@ 0x30
 800169a:	4b45      	ldr	r3, [pc, #276]	@ (80017b0 <MX_GPIO_Init+0x1c8>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	603b      	str	r3, [r7, #0]
 80016aa:	4b41      	ldr	r3, [pc, #260]	@ (80017b0 <MX_GPIO_Init+0x1c8>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	4a40      	ldr	r2, [pc, #256]	@ (80017b0 <MX_GPIO_Init+0x1c8>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b6:	4b3e      	ldr	r3, [pc, #248]	@ (80017b0 <MX_GPIO_Init+0x1c8>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80016c2:	2200      	movs	r2, #0
 80016c4:	f244 0181 	movw	r1, #16513	@ 0x4081
 80016c8:	483a      	ldr	r0, [pc, #232]	@ (80017b4 <MX_GPIO_Init+0x1cc>)
 80016ca:	f001 f96f 	bl	80029ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2140      	movs	r1, #64	@ 0x40
 80016d2:	4839      	ldr	r0, [pc, #228]	@ (80017b8 <MX_GPIO_Init+0x1d0>)
 80016d4:	f001 f96a 	bl	80029ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_RS_Pin|LCD_E_Pin|LCD_D4_Pin|LCD_D5_Pin
 80016d8:	2200      	movs	r2, #0
 80016da:	21fc      	movs	r1, #252	@ 0xfc
 80016dc:	4837      	ldr	r0, [pc, #220]	@ (80017bc <MX_GPIO_Init+0x1d4>)
 80016de:	f001 f965 	bl	80029ac <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80016e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016e8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80016f2:	f107 031c 	add.w	r3, r7, #28
 80016f6:	4619      	mov	r1, r3
 80016f8:	4831      	ldr	r0, [pc, #196]	@ (80017c0 <MX_GPIO_Init+0x1d8>)
 80016fa:	f000 ffab 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80016fe:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001704:	2301      	movs	r3, #1
 8001706:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	2300      	movs	r3, #0
 800170e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001710:	f107 031c 	add.w	r3, r7, #28
 8001714:	4619      	mov	r1, r3
 8001716:	4827      	ldr	r0, [pc, #156]	@ (80017b4 <MX_GPIO_Init+0x1cc>)
 8001718:	f000 ff9c 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_BUTT_Pin */
  GPIO_InitStruct.Pin = ENC_BUTT_Pin;
 800171c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001722:	2300      	movs	r3, #0
 8001724:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001726:	2301      	movs	r3, #1
 8001728:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ENC_BUTT_GPIO_Port, &GPIO_InitStruct);
 800172a:	f107 031c 	add.w	r3, r7, #28
 800172e:	4619      	mov	r1, r3
 8001730:	4822      	ldr	r0, [pc, #136]	@ (80017bc <MX_GPIO_Init+0x1d4>)
 8001732:	f000 ff8f 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001736:	2340      	movs	r3, #64	@ 0x40
 8001738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173a:	2301      	movs	r3, #1
 800173c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001742:	2300      	movs	r3, #0
 8001744:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001746:	f107 031c 	add.w	r3, r7, #28
 800174a:	4619      	mov	r1, r3
 800174c:	481a      	ldr	r0, [pc, #104]	@ (80017b8 <MX_GPIO_Init+0x1d0>)
 800174e:	f000 ff81 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001752:	2380      	movs	r3, #128	@ 0x80
 8001754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001756:	2300      	movs	r3, #0
 8001758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800175e:	f107 031c 	add.w	r3, r7, #28
 8001762:	4619      	mov	r1, r3
 8001764:	4814      	ldr	r0, [pc, #80]	@ (80017b8 <MX_GPIO_Init+0x1d0>)
 8001766:	f000 ff75 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_E_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_E_Pin|LCD_D4_Pin|LCD_D5_Pin
 800176a:	23fc      	movs	r3, #252	@ 0xfc
 800176c:	61fb      	str	r3, [r7, #28]
                          |LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176e:	2301      	movs	r3, #1
 8001770:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001772:	2302      	movs	r3, #2
 8001774:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001776:	2300      	movs	r3, #0
 8001778:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800177a:	f107 031c 	add.w	r3, r7, #28
 800177e:	4619      	mov	r1, r3
 8001780:	480e      	ldr	r0, [pc, #56]	@ (80017bc <MX_GPIO_Init+0x1d4>)
 8001782:	f000 ff67 	bl	8002654 <HAL_GPIO_Init>

  // modified for the project
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001786:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800178a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	2300      	movs	r3, #0
 8001796:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1; // Alternate Function 1 pour TIM1
 8001798:	2301      	movs	r3, #1
 800179a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800179c:	f107 031c 	add.w	r3, r7, #28
 80017a0:	4619      	mov	r1, r3
 80017a2:	4808      	ldr	r0, [pc, #32]	@ (80017c4 <MX_GPIO_Init+0x1dc>)
 80017a4:	f000 ff56 	bl	8002654 <HAL_GPIO_Init>

}
 80017a8:	bf00      	nop
 80017aa:	3730      	adds	r7, #48	@ 0x30
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40020400 	.word	0x40020400
 80017b8:	40021800 	.word	0x40021800
 80017bc:	40020c00 	.word	0x40020c00
 80017c0:	40020800 	.word	0x40020800
 80017c4:	40021000 	.word	0x40021000

080017c8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017cc:	4b12      	ldr	r3, [pc, #72]	@ (8001818 <MX_I2C1_Init+0x50>)
 80017ce:	4a13      	ldr	r2, [pc, #76]	@ (800181c <MX_I2C1_Init+0x54>)
 80017d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80017d2:	4b11      	ldr	r3, [pc, #68]	@ (8001818 <MX_I2C1_Init+0x50>)
 80017d4:	4a12      	ldr	r2, [pc, #72]	@ (8001820 <MX_I2C1_Init+0x58>)
 80017d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001818 <MX_I2C1_Init+0x50>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017de:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <MX_I2C1_Init+0x50>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001818 <MX_I2C1_Init+0x50>)
 80017e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001818 <MX_I2C1_Init+0x50>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017f2:	4b09      	ldr	r3, [pc, #36]	@ (8001818 <MX_I2C1_Init+0x50>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017f8:	4b07      	ldr	r3, [pc, #28]	@ (8001818 <MX_I2C1_Init+0x50>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017fe:	4b06      	ldr	r3, [pc, #24]	@ (8001818 <MX_I2C1_Init+0x50>)
 8001800:	2200      	movs	r2, #0
 8001802:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001804:	4804      	ldr	r0, [pc, #16]	@ (8001818 <MX_I2C1_Init+0x50>)
 8001806:	f001 f8eb 	bl	80029e0 <HAL_I2C_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001810:	f000 fa04 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}
 8001818:	200000fc 	.word	0x200000fc
 800181c:	40005400 	.word	0x40005400
 8001820:	00061a80 	.word	0x00061a80

08001824 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08a      	sub	sp, #40	@ 0x28
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a19      	ldr	r2, [pc, #100]	@ (80018a8 <HAL_I2C_MspInit+0x84>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d12c      	bne.n	80018a0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	4b18      	ldr	r3, [pc, #96]	@ (80018ac <HAL_I2C_MspInit+0x88>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184e:	4a17      	ldr	r2, [pc, #92]	@ (80018ac <HAL_I2C_MspInit+0x88>)
 8001850:	f043 0302 	orr.w	r3, r3, #2
 8001854:	6313      	str	r3, [r2, #48]	@ 0x30
 8001856:	4b15      	ldr	r3, [pc, #84]	@ (80018ac <HAL_I2C_MspInit+0x88>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001862:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001868:	2312      	movs	r3, #18
 800186a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001870:	2303      	movs	r3, #3
 8001872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001874:	2304      	movs	r3, #4
 8001876:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	4619      	mov	r1, r3
 800187e:	480c      	ldr	r0, [pc, #48]	@ (80018b0 <HAL_I2C_MspInit+0x8c>)
 8001880:	f000 fee8 	bl	8002654 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	4b08      	ldr	r3, [pc, #32]	@ (80018ac <HAL_I2C_MspInit+0x88>)
 800188a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188c:	4a07      	ldr	r2, [pc, #28]	@ (80018ac <HAL_I2C_MspInit+0x88>)
 800188e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001892:	6413      	str	r3, [r2, #64]	@ 0x40
 8001894:	4b05      	ldr	r3, [pc, #20]	@ (80018ac <HAL_I2C_MspInit+0x88>)
 8001896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001898:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80018a0:	bf00      	nop
 80018a2:	3728      	adds	r7, #40	@ 0x28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40005400 	.word	0x40005400
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020400 	.word	0x40020400

080018b4 <fallingEdge>:
#define SET_IF(expr)  ((expr) ? GPIO_PIN_SET : GPIO_PIN_RESET)
char display_settings;

//Sending falling edge signal to EPin for waking up LCD
static void fallingEdge(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIO_PORT, E_Pin, GPIO_PIN_RESET);
 80018b8:	2200      	movs	r2, #0
 80018ba:	2108      	movs	r1, #8
 80018bc:	4808      	ldr	r0, [pc, #32]	@ (80018e0 <fallingEdge+0x2c>)
 80018be:	f001 f875 	bl	80029ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PORT, E_Pin, GPIO_PIN_SET);
 80018c2:	2201      	movs	r2, #1
 80018c4:	2108      	movs	r1, #8
 80018c6:	4806      	ldr	r0, [pc, #24]	@ (80018e0 <fallingEdge+0x2c>)
 80018c8:	f001 f870 	bl	80029ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PORT, E_Pin, GPIO_PIN_RESET);
 80018cc:	2200      	movs	r2, #0
 80018ce:	2108      	movs	r1, #8
 80018d0:	4803      	ldr	r0, [pc, #12]	@ (80018e0 <fallingEdge+0x2c>)
 80018d2:	f001 f86b 	bl	80029ac <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80018d6:	2001      	movs	r0, #1
 80018d8:	f000 fd86 	bl	80023e8 <HAL_Delay>
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40020c00 	.word	0x40020c00

080018e4 <send4Bits>:

#ifndef LCD8Bit
	static void send4Bits(char data)
	{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(GPIO_PORT, DATA5_Pin, SET_IF(data&0x01));
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	461a      	mov	r2, r3
 80018f8:	2110      	movs	r1, #16
 80018fa:	4815      	ldr	r0, [pc, #84]	@ (8001950 <send4Bits+0x6c>)
 80018fc:	f001 f856 	bl	80029ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_PORT, DATA6_Pin, SET_IF(data&0x02));
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	105b      	asrs	r3, r3, #1
 8001904:	b2db      	uxtb	r3, r3
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	b2db      	uxtb	r3, r3
 800190c:	461a      	mov	r2, r3
 800190e:	2120      	movs	r1, #32
 8001910:	480f      	ldr	r0, [pc, #60]	@ (8001950 <send4Bits+0x6c>)
 8001912:	f001 f84b 	bl	80029ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_PORT, DATA7_Pin, SET_IF(data&0x04));
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	109b      	asrs	r3, r3, #2
 800191a:	b2db      	uxtb	r3, r3
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	b2db      	uxtb	r3, r3
 8001922:	461a      	mov	r2, r3
 8001924:	2140      	movs	r1, #64	@ 0x40
 8001926:	480a      	ldr	r0, [pc, #40]	@ (8001950 <send4Bits+0x6c>)
 8001928:	f001 f840 	bl	80029ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_PORT, DATA8_Pin, SET_IF(data&0x08));
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	10db      	asrs	r3, r3, #3
 8001930:	b2db      	uxtb	r3, r3
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	b2db      	uxtb	r3, r3
 8001938:	461a      	mov	r2, r3
 800193a:	2180      	movs	r1, #128	@ 0x80
 800193c:	4804      	ldr	r0, [pc, #16]	@ (8001950 <send4Bits+0x6c>)
 800193e:	f001 f835 	bl	80029ac <HAL_GPIO_WritePin>

		fallingEdge();
 8001942:	f7ff ffb7 	bl	80018b4 <fallingEdge>
	}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40020c00 	.word	0x40020c00

08001954 <sendCommand>:
		fallingEdge();
	}
#endif

static void sendCommand(char cmd)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	71fb      	strb	r3, [r7, #7]
	#ifdef LCD8Bit
    	HAL_GPIO_WritePin(GPIO_PORT, RS_Pin, GPIO_PIN_RESET);
		send8Bits(cmd);
	#else
	    HAL_GPIO_WritePin(GPIO_PORT, RS_Pin, GPIO_PIN_RESET);
 800195e:	2200      	movs	r2, #0
 8001960:	2104      	movs	r1, #4
 8001962:	4808      	ldr	r0, [pc, #32]	@ (8001984 <sendCommand+0x30>)
 8001964:	f001 f822 	bl	80029ac <HAL_GPIO_WritePin>
		send4Bits(cmd >> 4);
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	091b      	lsrs	r3, r3, #4
 800196c:	b2db      	uxtb	r3, r3
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff ffb8 	bl	80018e4 <send4Bits>
		send4Bits(cmd);
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff ffb4 	bl	80018e4 <send4Bits>
	#endif
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40020c00 	.word	0x40020c00

08001988 <sendData>:

static void sendData(char data)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	71fb      	strb	r3, [r7, #7]
	#ifdef LCD8Bit
    	HAL_GPIO_WritePin(GPIO_PORT, RS_Pin, GPIO_PIN_SET);
		send8Bits(data);
	#else
	    HAL_GPIO_WritePin(GPIO_PORT, RS_Pin, GPIO_PIN_SET);
 8001992:	2201      	movs	r2, #1
 8001994:	2104      	movs	r1, #4
 8001996:	4808      	ldr	r0, [pc, #32]	@ (80019b8 <sendData+0x30>)
 8001998:	f001 f808 	bl	80029ac <HAL_GPIO_WritePin>
		send4Bits(data >> 4);
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	091b      	lsrs	r3, r3, #4
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff ff9e 	bl	80018e4 <send4Bits>
		send4Bits(data);
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff ff9a 	bl	80018e4 <send4Bits>
	#endif
}
 80019b0:	bf00      	nop
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40020c00 	.word	0x40020c00

080019bc <clearLCD>:

void clearLCD(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
	sendCommand(LCD_CLEARDISPLAY);
 80019c0:	2001      	movs	r0, #1
 80019c2:	f7ff ffc7 	bl	8001954 <sendCommand>
	HAL_Delay(5);
 80019c6:	2005      	movs	r0, #5
 80019c8:	f000 fd0e 	bl	80023e8 <HAL_Delay>
}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <writeLCD>:
{
	sendData(c);
}

void writeLCD (char *str)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
	for(; *str != 0; ++str)
 80019d8:	e007      	b.n	80019ea <writeLCD+0x1a>
	{
		sendData(*str);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff ffd2 	bl	8001988 <sendData>
	for(; *str != 0; ++str)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3301      	adds	r3, #1
 80019e8:	607b      	str	r3, [r7, #4]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f3      	bne.n	80019da <writeLCD+0xa>
	}
}
 80019f2:	bf00      	nop
 80019f4:	bf00      	nop
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <initLCD>:

void initLCD(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIO_PORT, E_Pin,  	 GPIO_PIN_RESET);
 8001a00:	2200      	movs	r2, #0
 8001a02:	2108      	movs	r1, #8
 8001a04:	4826      	ldr	r0, [pc, #152]	@ (8001aa0 <initLCD+0xa4>)
 8001a06:	f000 ffd1 	bl	80029ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PORT, RS_Pin, 	 GPIO_PIN_RESET);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2104      	movs	r1, #4
 8001a0e:	4824      	ldr	r0, [pc, #144]	@ (8001aa0 <initLCD+0xa4>)
 8001a10:	f000 ffcc 	bl	80029ac <HAL_GPIO_WritePin>

	HAL_Delay(50);
 8001a14:	2032      	movs	r0, #50	@ 0x32
 8001a16:	f000 fce7 	bl	80023e8 <HAL_Delay>
		HAL_Delay(5);
		sendCommand(LCD_FUNCTIONSET | display_settings);
		HAL_Delay(5);

	#else
		display_settings = LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS;
 8001a1a:	4b22      	ldr	r3, [pc, #136]	@ (8001aa4 <initLCD+0xa8>)
 8001a1c:	2208      	movs	r2, #8
 8001a1e:	701a      	strb	r2, [r3, #0]
		send4Bits(0x03);
		HAL_Delay(2);
		send4Bits(0x02);
		HAL_Delay(2);*/

		send4Bits(0x03);
 8001a20:	2003      	movs	r0, #3
 8001a22:	f7ff ff5f 	bl	80018e4 <send4Bits>
		HAL_Delay(10);
 8001a26:	200a      	movs	r0, #10
 8001a28:	f000 fcde 	bl	80023e8 <HAL_Delay>
		send4Bits(0x03);
 8001a2c:	2003      	movs	r0, #3
 8001a2e:	f7ff ff59 	bl	80018e4 <send4Bits>
		HAL_Delay(10);
 8001a32:	200a      	movs	r0, #10
 8001a34:	f000 fcd8 	bl	80023e8 <HAL_Delay>
		send4Bits(0x03);
 8001a38:	2003      	movs	r0, #3
 8001a3a:	f7ff ff53 	bl	80018e4 <send4Bits>
		HAL_Delay(10);
 8001a3e:	200a      	movs	r0, #10
 8001a40:	f000 fcd2 	bl	80023e8 <HAL_Delay>
		send4Bits(0x02);
 8001a44:	2002      	movs	r0, #2
 8001a46:	f7ff ff4d 	bl	80018e4 <send4Bits>
		HAL_Delay(10);
 8001a4a:	200a      	movs	r0, #10
 8001a4c:	f000 fccc 	bl	80023e8 <HAL_Delay>
	#endif
		sendCommand(LCD_FUNCTIONSET | display_settings);
 8001a50:	4b14      	ldr	r3, [pc, #80]	@ (8001aa4 <initLCD+0xa8>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	f043 0320 	orr.w	r3, r3, #32
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff ff7a 	bl	8001954 <sendCommand>
		display_settings = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001a60:	4b10      	ldr	r3, [pc, #64]	@ (8001aa4 <initLCD+0xa8>)
 8001a62:	2204      	movs	r2, #4
 8001a64:	701a      	strb	r2, [r3, #0]
		sendCommand(LCD_DISPLAYCONTROL | display_settings);
 8001a66:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa4 <initLCD+0xa8>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	f043 0308 	orr.w	r3, r3, #8
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff6f 	bl	8001954 <sendCommand>
		HAL_Delay(2);
 8001a76:	2002      	movs	r0, #2
 8001a78:	f000 fcb6 	bl	80023e8 <HAL_Delay>

		clearLCD();
 8001a7c:	f7ff ff9e 	bl	80019bc <clearLCD>
		display_settings =  LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001a80:	4b08      	ldr	r3, [pc, #32]	@ (8001aa4 <initLCD+0xa8>)
 8001a82:	2202      	movs	r2, #2
 8001a84:	701a      	strb	r2, [r3, #0]
		sendCommand(LCD_ENTRYMODESET | display_settings);
 8001a86:	4b07      	ldr	r3, [pc, #28]	@ (8001aa4 <initLCD+0xa8>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	f043 0304 	orr.w	r3, r3, #4
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff ff5f 	bl	8001954 <sendCommand>
		HAL_Delay(2);
 8001a96:	2002      	movs	r0, #2
 8001a98:	f000 fca6 	bl	80023e8 <HAL_Delay>
}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40020c00 	.word	0x40020c00
 8001aa4:	20000150 	.word	0x20000150

08001aa8 <setCursor>:


void setCursor(char x, char y)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	460a      	mov	r2, r1
 8001ab2:	71fb      	strb	r3, [r7, #7]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	71bb      	strb	r3, [r7, #6]
	uint8_t base = 0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	73fb      	strb	r3, [r7, #15]

	if(y == 1)
 8001abc:	79bb      	ldrb	r3, [r7, #6]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d102      	bne.n	8001ac8 <setCursor+0x20>
	{
		base = 0x40;
 8001ac2:	2340      	movs	r3, #64	@ 0x40
 8001ac4:	73fb      	strb	r3, [r7, #15]
 8001ac6:	e001      	b.n	8001acc <setCursor+0x24>
	}
	else
	{
		base = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	73fb      	strb	r3, [r7, #15]
	}

	sendCommand( 0x80 | (base + x));
 8001acc:	7bfa      	ldrb	r2, [r7, #15]
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	b25b      	sxtb	r3, r3
 8001ad6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ada:	b25b      	sxtb	r3, r3
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff ff38 	bl	8001954 <sendCommand>
}
 8001ae4:	bf00      	nop
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001af0:	f000 fc08 	bl	8002304 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001af4:	f000 f826 	bl	8001b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001af8:	f7ff fd76 	bl	80015e8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001afc:	f000 fac8 	bl	8002090 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001b00:	f000 fb38 	bl	8002174 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM4_Init();
 8001b04:	f000 f9c4 	bl	8001e90 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001b08:	f000 f934 	bl	8001d74 <MX_TIM1_Init>
  MX_I2C1_Init();
 8001b0c:	f7ff fe5c 	bl	80017c8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // encoder
 8001b10:	213c      	movs	r1, #60	@ 0x3c
 8001b12:	480a      	ldr	r0, [pc, #40]	@ (8001b3c <main+0x50>)
 8001b14:	f003 f9ba 	bl	8004e8c <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // PWM D6 for VM
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4809      	ldr	r0, [pc, #36]	@ (8001b40 <main+0x54>)
 8001b1c:	f003 f848 	bl	8004bb0 <HAL_TIM_PWM_Start>

  HAL_Delay(100);
 8001b20:	2064      	movs	r0, #100	@ 0x64
 8001b22:	f000 fc61 	bl	80023e8 <HAL_Delay>
  initLCD();
 8001b26:	f7ff ff69 	bl	80019fc <initLCD>
  //ADXL345_Init();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001b2a:	f004 fd77 	bl	800661c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001b2e:	f7fe febd 	bl	80008ac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001b32:	f004 fd97 	bl	8006664 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b36:	bf00      	nop
 8001b38:	e7fd      	b.n	8001b36 <main+0x4a>
 8001b3a:	bf00      	nop
 8001b3c:	200001a0 	.word	0x200001a0
 8001b40:	20000158 	.word	0x20000158

08001b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b094      	sub	sp, #80	@ 0x50
 8001b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b4a:	f107 031c 	add.w	r3, r7, #28
 8001b4e:	2234      	movs	r2, #52	@ 0x34
 8001b50:	2100      	movs	r1, #0
 8001b52:	4618      	mov	r0, r3
 8001b54:	f008 fd8e 	bl	800a674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b58:	f107 0308 	add.w	r3, r7, #8
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b68:	2300      	movs	r3, #0
 8001b6a:	607b      	str	r3, [r7, #4]
 8001b6c:	4b29      	ldr	r3, [pc, #164]	@ (8001c14 <SystemClock_Config+0xd0>)
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b70:	4a28      	ldr	r2, [pc, #160]	@ (8001c14 <SystemClock_Config+0xd0>)
 8001b72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b76:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b78:	4b26      	ldr	r3, [pc, #152]	@ (8001c14 <SystemClock_Config+0xd0>)
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b80:	607b      	str	r3, [r7, #4]
 8001b82:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b84:	2300      	movs	r3, #0
 8001b86:	603b      	str	r3, [r7, #0]
 8001b88:	4b23      	ldr	r3, [pc, #140]	@ (8001c18 <SystemClock_Config+0xd4>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a22      	ldr	r2, [pc, #136]	@ (8001c18 <SystemClock_Config+0xd4>)
 8001b8e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	4b20      	ldr	r3, [pc, #128]	@ (8001c18 <SystemClock_Config+0xd4>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001b9c:	603b      	str	r3, [r7, #0]
 8001b9e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001ba4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001ba8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001baa:	2302      	movs	r3, #2
 8001bac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001bb4:	2304      	movs	r3, #4
 8001bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001bb8:	23a8      	movs	r3, #168	@ 0xa8
 8001bba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001bc0:	2307      	movs	r3, #7
 8001bc2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bc8:	f107 031c 	add.w	r3, r7, #28
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f002 fd01 	bl	80045d4 <HAL_RCC_OscConfig>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001bd8:	f000 f820 	bl	8001c1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bdc:	230f      	movs	r3, #15
 8001bde:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001be0:	2302      	movs	r3, #2
 8001be2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001be4:	2300      	movs	r3, #0
 8001be6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001be8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001bec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bf2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001bf4:	f107 0308 	add.w	r3, r7, #8
 8001bf8:	2105      	movs	r1, #5
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f001 fe76 	bl	80038ec <HAL_RCC_ClockConfig>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001c06:	f000 f809 	bl	8001c1c <Error_Handler>
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	3750      	adds	r7, #80	@ 0x50
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40007000 	.word	0x40007000

08001c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c20:	b672      	cpsid	i
}
 8001c22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c24:	bf00      	nop
 8001c26:	e7fd      	b.n	8001c24 <Error_Handler+0x8>

08001c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	607b      	str	r3, [r7, #4]
 8001c32:	4b12      	ldr	r3, [pc, #72]	@ (8001c7c <HAL_MspInit+0x54>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c36:	4a11      	ldr	r2, [pc, #68]	@ (8001c7c <HAL_MspInit+0x54>)
 8001c38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c7c <HAL_MspInit+0x54>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c46:	607b      	str	r3, [r7, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	603b      	str	r3, [r7, #0]
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c7c <HAL_MspInit+0x54>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c52:	4a0a      	ldr	r2, [pc, #40]	@ (8001c7c <HAL_MspInit+0x54>)
 8001c54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c5a:	4b08      	ldr	r3, [pc, #32]	@ (8001c7c <HAL_MspInit+0x54>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c62:	603b      	str	r3, [r7, #0]
 8001c64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	210f      	movs	r1, #15
 8001c6a:	f06f 0001 	mvn.w	r0, #1
 8001c6e:	f000 fcba 	bl	80025e6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40023800 	.word	0x40023800

08001c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c84:	bf00      	nop
 8001c86:	e7fd      	b.n	8001c84 <NMI_Handler+0x4>

08001c88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c8c:	bf00      	nop
 8001c8e:	e7fd      	b.n	8001c8c <HardFault_Handler+0x4>

08001c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c94:	bf00      	nop
 8001c96:	e7fd      	b.n	8001c94 <MemManage_Handler+0x4>

08001c98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c9c:	bf00      	nop
 8001c9e:	e7fd      	b.n	8001c9c <BusFault_Handler+0x4>

08001ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca4:	bf00      	nop
 8001ca6:	e7fd      	b.n	8001ca4 <UsageFault_Handler+0x4>

08001ca8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cba:	f000 fb75 	bl	80023a8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001cbe:	f007 faeb 	bl	8009298 <xTaskGetSchedulerState>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d001      	beq.n	8001ccc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001cc8:	f008 fa1e 	bl	800a108 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ccc:	bf00      	nop
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001cd4:	4802      	ldr	r0, [pc, #8]	@ (8001ce0 <TIM4_IRQHandler+0x10>)
 8001cd6:	f003 f967 	bl	8004fa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	200001a0 	.word	0x200001a0

08001ce4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cec:	4a14      	ldr	r2, [pc, #80]	@ (8001d40 <_sbrk+0x5c>)
 8001cee:	4b15      	ldr	r3, [pc, #84]	@ (8001d44 <_sbrk+0x60>)
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cf8:	4b13      	ldr	r3, [pc, #76]	@ (8001d48 <_sbrk+0x64>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d102      	bne.n	8001d06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d00:	4b11      	ldr	r3, [pc, #68]	@ (8001d48 <_sbrk+0x64>)
 8001d02:	4a12      	ldr	r2, [pc, #72]	@ (8001d4c <_sbrk+0x68>)
 8001d04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d06:	4b10      	ldr	r3, [pc, #64]	@ (8001d48 <_sbrk+0x64>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d207      	bcs.n	8001d24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d14:	f008 fcb6 	bl	800a684 <__errno>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	220c      	movs	r2, #12
 8001d1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d22:	e009      	b.n	8001d38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d24:	4b08      	ldr	r3, [pc, #32]	@ (8001d48 <_sbrk+0x64>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d2a:	4b07      	ldr	r3, [pc, #28]	@ (8001d48 <_sbrk+0x64>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4413      	add	r3, r2
 8001d32:	4a05      	ldr	r2, [pc, #20]	@ (8001d48 <_sbrk+0x64>)
 8001d34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d36:	68fb      	ldr	r3, [r7, #12]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3718      	adds	r7, #24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20020000 	.word	0x20020000
 8001d44:	00000400 	.word	0x00000400
 8001d48:	20000154 	.word	0x20000154
 8001d4c:	200051b0 	.word	0x200051b0

08001d50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d54:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <SystemInit+0x20>)
 8001d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d5a:	4a05      	ldr	r2, [pc, #20]	@ (8001d70 <SystemInit+0x20>)
 8001d5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b092      	sub	sp, #72	@ 0x48
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d7a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
 8001d94:	615a      	str	r2, [r3, #20]
 8001d96:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d98:	1d3b      	adds	r3, r7, #4
 8001d9a:	2220      	movs	r2, #32
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f008 fc68 	bl	800a674 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001da4:	4b36      	ldr	r3, [pc, #216]	@ (8001e80 <MX_TIM1_Init+0x10c>)
 8001da6:	4a37      	ldr	r2, [pc, #220]	@ (8001e84 <MX_TIM1_Init+0x110>)
 8001da8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = (SystemCoreClock / 1000000) - 1;
 8001daa:	4b37      	ldr	r3, [pc, #220]	@ (8001e88 <MX_TIM1_Init+0x114>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a37      	ldr	r2, [pc, #220]	@ (8001e8c <MX_TIM1_Init+0x118>)
 8001db0:	fba2 2303 	umull	r2, r3, r2, r3
 8001db4:	0c9b      	lsrs	r3, r3, #18
 8001db6:	3b01      	subs	r3, #1
 8001db8:	4a31      	ldr	r2, [pc, #196]	@ (8001e80 <MX_TIM1_Init+0x10c>)
 8001dba:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dbc:	4b30      	ldr	r3, [pc, #192]	@ (8001e80 <MX_TIM1_Init+0x10c>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001dc2:	4b2f      	ldr	r3, [pc, #188]	@ (8001e80 <MX_TIM1_Init+0x10c>)
 8001dc4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001dc8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dca:	4b2d      	ldr	r3, [pc, #180]	@ (8001e80 <MX_TIM1_Init+0x10c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001dd0:	4b2b      	ldr	r3, [pc, #172]	@ (8001e80 <MX_TIM1_Init+0x10c>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd6:	4b2a      	ldr	r3, [pc, #168]	@ (8001e80 <MX_TIM1_Init+0x10c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ddc:	4828      	ldr	r0, [pc, #160]	@ (8001e80 <MX_TIM1_Init+0x10c>)
 8001dde:	f002 fe97 	bl	8004b10 <HAL_TIM_PWM_Init>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001de8:	f7ff ff18 	bl	8001c1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dec:	2300      	movs	r3, #0
 8001dee:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df0:	2300      	movs	r3, #0
 8001df2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001df4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4821      	ldr	r0, [pc, #132]	@ (8001e80 <MX_TIM1_Init+0x10c>)
 8001dfc:	f003 fd34 	bl	8005868 <HAL_TIMEx_MasterConfigSynchronization>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001e06:	f7ff ff09 	bl	8001c1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e0a:	2360      	movs	r3, #96	@ 0x60
 8001e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 32767;
 8001e0e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001e12:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e14:	2300      	movs	r3, #0
 8001e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e20:	2300      	movs	r3, #0
 8001e22:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e24:	2300      	movs	r3, #0
 8001e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4813      	ldr	r0, [pc, #76]	@ (8001e80 <MX_TIM1_Init+0x10c>)
 8001e32:	f003 f9a9 	bl	8005188 <HAL_TIM_PWM_ConfigChannel>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001e3c:	f7ff feee 	bl	8001c1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e40:	2300      	movs	r3, #0
 8001e42:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e58:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e5e:	1d3b      	adds	r3, r7, #4
 8001e60:	4619      	mov	r1, r3
 8001e62:	4807      	ldr	r0, [pc, #28]	@ (8001e80 <MX_TIM1_Init+0x10c>)
 8001e64:	f003 fd7c 	bl	8005960 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001e6e:	f7ff fed5 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e72:	4803      	ldr	r0, [pc, #12]	@ (8001e80 <MX_TIM1_Init+0x10c>)
 8001e74:	f000 f8d2 	bl	800201c <HAL_TIM_MspPostInit>

}
 8001e78:	bf00      	nop
 8001e7a:	3748      	adds	r7, #72	@ 0x48
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20000158 	.word	0x20000158
 8001e84:	40010000 	.word	0x40010000
 8001e88:	20000014 	.word	0x20000014
 8001e8c:	431bde83 	.word	0x431bde83

08001e90 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08c      	sub	sp, #48	@ 0x30
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e96:	f107 030c 	add.w	r3, r7, #12
 8001e9a:	2224      	movs	r2, #36	@ 0x24
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f008 fbe8 	bl	800a674 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea4:	1d3b      	adds	r3, r7, #4
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001eac:	4b20      	ldr	r3, [pc, #128]	@ (8001f30 <MX_TIM4_Init+0xa0>)
 8001eae:	4a21      	ldr	r2, [pc, #132]	@ (8001f34 <MX_TIM4_Init+0xa4>)
 8001eb0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001eb2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f30 <MX_TIM4_Init+0xa0>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f30 <MX_TIM4_Init+0xa0>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8001f30 <MX_TIM4_Init+0xa0>)
 8001ec0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ec4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f30 <MX_TIM4_Init+0xa0>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ecc:	4b18      	ldr	r3, [pc, #96]	@ (8001f30 <MX_TIM4_Init+0xa0>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001eda:	2301      	movs	r3, #1
 8001edc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001eea:	2301      	movs	r3, #1
 8001eec:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001ef6:	f107 030c 	add.w	r3, r7, #12
 8001efa:	4619      	mov	r1, r3
 8001efc:	480c      	ldr	r0, [pc, #48]	@ (8001f30 <MX_TIM4_Init+0xa0>)
 8001efe:	f002 ff1f 	bl	8004d40 <HAL_TIM_Encoder_Init>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001f08:	f7ff fe88 	bl	8001c1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f14:	1d3b      	adds	r3, r7, #4
 8001f16:	4619      	mov	r1, r3
 8001f18:	4805      	ldr	r0, [pc, #20]	@ (8001f30 <MX_TIM4_Init+0xa0>)
 8001f1a:	f003 fca5 	bl	8005868 <HAL_TIMEx_MasterConfigSynchronization>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001f24:	f7ff fe7a 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001f28:	bf00      	nop
 8001f2a:	3730      	adds	r7, #48	@ 0x30
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	200001a0 	.word	0x200001a0
 8001f34:	40000800 	.word	0x40000800

08001f38 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a0b      	ldr	r2, [pc, #44]	@ (8001f74 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d10d      	bne.n	8001f66 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f78 <HAL_TIM_PWM_MspInit+0x40>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f52:	4a09      	ldr	r2, [pc, #36]	@ (8001f78 <HAL_TIM_PWM_MspInit+0x40>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f5a:	4b07      	ldr	r3, [pc, #28]	@ (8001f78 <HAL_TIM_PWM_MspInit+0x40>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001f66:	bf00      	nop
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	40010000 	.word	0x40010000
 8001f78:	40023800 	.word	0x40023800

08001f7c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08a      	sub	sp, #40	@ 0x28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a1d      	ldr	r2, [pc, #116]	@ (8002010 <HAL_TIM_Encoder_MspInit+0x94>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d134      	bne.n	8002008 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	4b1c      	ldr	r3, [pc, #112]	@ (8002014 <HAL_TIM_Encoder_MspInit+0x98>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa6:	4a1b      	ldr	r2, [pc, #108]	@ (8002014 <HAL_TIM_Encoder_MspInit+0x98>)
 8001fa8:	f043 0304 	orr.w	r3, r3, #4
 8001fac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fae:	4b19      	ldr	r3, [pc, #100]	@ (8002014 <HAL_TIM_Encoder_MspInit+0x98>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	4b15      	ldr	r3, [pc, #84]	@ (8002014 <HAL_TIM_Encoder_MspInit+0x98>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	4a14      	ldr	r2, [pc, #80]	@ (8002014 <HAL_TIM_Encoder_MspInit+0x98>)
 8001fc4:	f043 0308 	orr.w	r3, r3, #8
 8001fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fca:	4b12      	ldr	r3, [pc, #72]	@ (8002014 <HAL_TIM_Encoder_MspInit+0x98>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001fd6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4809      	ldr	r0, [pc, #36]	@ (8002018 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001ff4:	f000 fb2e 	bl	8002654 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2105      	movs	r1, #5
 8001ffc:	201e      	movs	r0, #30
 8001ffe:	f000 faf2 	bl	80025e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002002:	201e      	movs	r0, #30
 8002004:	f000 fb0b 	bl	800261e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002008:	bf00      	nop
 800200a:	3728      	adds	r7, #40	@ 0x28
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40000800 	.word	0x40000800
 8002014:	40023800 	.word	0x40023800
 8002018:	40020c00 	.word	0x40020c00

0800201c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b088      	sub	sp, #32
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 030c 	add.w	r3, r7, #12
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a12      	ldr	r2, [pc, #72]	@ (8002084 <HAL_TIM_MspPostInit+0x68>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d11e      	bne.n	800207c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	60bb      	str	r3, [r7, #8]
 8002042:	4b11      	ldr	r3, [pc, #68]	@ (8002088 <HAL_TIM_MspPostInit+0x6c>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002046:	4a10      	ldr	r2, [pc, #64]	@ (8002088 <HAL_TIM_MspPostInit+0x6c>)
 8002048:	f043 0310 	orr.w	r3, r3, #16
 800204c:	6313      	str	r3, [r2, #48]	@ 0x30
 800204e:	4b0e      	ldr	r3, [pc, #56]	@ (8002088 <HAL_TIM_MspPostInit+0x6c>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002052:	f003 0310 	and.w	r3, r3, #16
 8002056:	60bb      	str	r3, [r7, #8]
 8002058:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800205a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800205e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002060:	2302      	movs	r3, #2
 8002062:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002068:	2300      	movs	r3, #0
 800206a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800206c:	2301      	movs	r3, #1
 800206e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002070:	f107 030c 	add.w	r3, r7, #12
 8002074:	4619      	mov	r1, r3
 8002076:	4805      	ldr	r0, [pc, #20]	@ (800208c <HAL_TIM_MspPostInit+0x70>)
 8002078:	f000 faec 	bl	8002654 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800207c:	bf00      	nop
 800207e:	3720      	adds	r7, #32
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40010000 	.word	0x40010000
 8002088:	40023800 	.word	0x40023800
 800208c:	40021000 	.word	0x40021000

08002090 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002094:	4b11      	ldr	r3, [pc, #68]	@ (80020dc <MX_USART3_UART_Init+0x4c>)
 8002096:	4a12      	ldr	r2, [pc, #72]	@ (80020e0 <MX_USART3_UART_Init+0x50>)
 8002098:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800209a:	4b10      	ldr	r3, [pc, #64]	@ (80020dc <MX_USART3_UART_Init+0x4c>)
 800209c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020a2:	4b0e      	ldr	r3, [pc, #56]	@ (80020dc <MX_USART3_UART_Init+0x4c>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020a8:	4b0c      	ldr	r3, [pc, #48]	@ (80020dc <MX_USART3_UART_Init+0x4c>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020ae:	4b0b      	ldr	r3, [pc, #44]	@ (80020dc <MX_USART3_UART_Init+0x4c>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020b4:	4b09      	ldr	r3, [pc, #36]	@ (80020dc <MX_USART3_UART_Init+0x4c>)
 80020b6:	220c      	movs	r2, #12
 80020b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ba:	4b08      	ldr	r3, [pc, #32]	@ (80020dc <MX_USART3_UART_Init+0x4c>)
 80020bc:	2200      	movs	r2, #0
 80020be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020c0:	4b06      	ldr	r3, [pc, #24]	@ (80020dc <MX_USART3_UART_Init+0x4c>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020c6:	4805      	ldr	r0, [pc, #20]	@ (80020dc <MX_USART3_UART_Init+0x4c>)
 80020c8:	f003 fcb0 	bl	8005a2c <HAL_UART_Init>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80020d2:	f7ff fda3 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	200001e8 	.word	0x200001e8
 80020e0:	40004800 	.word	0x40004800

080020e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b08a      	sub	sp, #40	@ 0x28
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ec:	f107 0314 	add.w	r3, r7, #20
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a19      	ldr	r2, [pc, #100]	@ (8002168 <HAL_UART_MspInit+0x84>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d12c      	bne.n	8002160 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	4b18      	ldr	r3, [pc, #96]	@ (800216c <HAL_UART_MspInit+0x88>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210e:	4a17      	ldr	r2, [pc, #92]	@ (800216c <HAL_UART_MspInit+0x88>)
 8002110:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002114:	6413      	str	r3, [r2, #64]	@ 0x40
 8002116:	4b15      	ldr	r3, [pc, #84]	@ (800216c <HAL_UART_MspInit+0x88>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	4b11      	ldr	r3, [pc, #68]	@ (800216c <HAL_UART_MspInit+0x88>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212a:	4a10      	ldr	r2, [pc, #64]	@ (800216c <HAL_UART_MspInit+0x88>)
 800212c:	f043 0308 	orr.w	r3, r3, #8
 8002130:	6313      	str	r3, [r2, #48]	@ 0x30
 8002132:	4b0e      	ldr	r3, [pc, #56]	@ (800216c <HAL_UART_MspInit+0x88>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800213e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002144:	2302      	movs	r3, #2
 8002146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	2300      	movs	r3, #0
 800214a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214c:	2303      	movs	r3, #3
 800214e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002150:	2307      	movs	r3, #7
 8002152:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002154:	f107 0314 	add.w	r3, r7, #20
 8002158:	4619      	mov	r1, r3
 800215a:	4805      	ldr	r0, [pc, #20]	@ (8002170 <HAL_UART_MspInit+0x8c>)
 800215c:	f000 fa7a 	bl	8002654 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002160:	bf00      	nop
 8002162:	3728      	adds	r7, #40	@ 0x28
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40004800 	.word	0x40004800
 800216c:	40023800 	.word	0x40023800
 8002170:	40020c00 	.word	0x40020c00

08002174 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002178:	4b14      	ldr	r3, [pc, #80]	@ (80021cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800217a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800217e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002180:	4b12      	ldr	r3, [pc, #72]	@ (80021cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002182:	2206      	movs	r2, #6
 8002184:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002186:	4b11      	ldr	r3, [pc, #68]	@ (80021cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002188:	2202      	movs	r2, #2
 800218a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800218c:	4b0f      	ldr	r3, [pc, #60]	@ (80021cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800218e:	2200      	movs	r2, #0
 8002190:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002192:	4b0e      	ldr	r3, [pc, #56]	@ (80021cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002194:	2202      	movs	r2, #2
 8002196:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002198:	4b0c      	ldr	r3, [pc, #48]	@ (80021cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800219a:	2201      	movs	r2, #1
 800219c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800219e:	4b0b      	ldr	r3, [pc, #44]	@ (80021cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80021a4:	4b09      	ldr	r3, [pc, #36]	@ (80021cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80021aa:	4b08      	ldr	r3, [pc, #32]	@ (80021cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021ac:	2201      	movs	r2, #1
 80021ae:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80021b0:	4b06      	ldr	r3, [pc, #24]	@ (80021cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80021b6:	4805      	ldr	r0, [pc, #20]	@ (80021cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021b8:	f001 fa5e 	bl	8003678 <HAL_PCD_Init>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80021c2:	f7ff fd2b 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000230 	.word	0x20000230

080021d0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b0a0      	sub	sp, #128	@ 0x80
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021e8:	f107 0310 	add.w	r3, r7, #16
 80021ec:	225c      	movs	r2, #92	@ 0x5c
 80021ee:	2100      	movs	r1, #0
 80021f0:	4618      	mov	r0, r3
 80021f2:	f008 fa3f 	bl	800a674 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021fe:	d14e      	bne.n	800229e <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002200:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002204:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8002206:	2300      	movs	r3, #0
 8002208:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800220a:	f107 0310 	add.w	r3, r7, #16
 800220e:	4618      	mov	r0, r3
 8002210:	f001 fc86 	bl	8003b20 <HAL_RCCEx_PeriphCLKConfig>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800221a:	f7ff fcff 	bl	8001c1c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	4b21      	ldr	r3, [pc, #132]	@ (80022a8 <HAL_PCD_MspInit+0xd8>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	4a20      	ldr	r2, [pc, #128]	@ (80022a8 <HAL_PCD_MspInit+0xd8>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	6313      	str	r3, [r2, #48]	@ 0x30
 800222e:	4b1e      	ldr	r3, [pc, #120]	@ (80022a8 <HAL_PCD_MspInit+0xd8>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800223a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800223e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002240:	2302      	movs	r3, #2
 8002242:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002248:	2303      	movs	r3, #3
 800224a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800224c:	230a      	movs	r3, #10
 800224e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002250:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002254:	4619      	mov	r1, r3
 8002256:	4815      	ldr	r0, [pc, #84]	@ (80022ac <HAL_PCD_MspInit+0xdc>)
 8002258:	f000 f9fc 	bl	8002654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800225c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002260:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002262:	2300      	movs	r3, #0
 8002264:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800226a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800226e:	4619      	mov	r1, r3
 8002270:	480e      	ldr	r0, [pc, #56]	@ (80022ac <HAL_PCD_MspInit+0xdc>)
 8002272:	f000 f9ef 	bl	8002654 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002276:	4b0c      	ldr	r3, [pc, #48]	@ (80022a8 <HAL_PCD_MspInit+0xd8>)
 8002278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800227a:	4a0b      	ldr	r2, [pc, #44]	@ (80022a8 <HAL_PCD_MspInit+0xd8>)
 800227c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002280:	6353      	str	r3, [r2, #52]	@ 0x34
 8002282:	2300      	movs	r3, #0
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	4b08      	ldr	r3, [pc, #32]	@ (80022a8 <HAL_PCD_MspInit+0xd8>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800228a:	4a07      	ldr	r2, [pc, #28]	@ (80022a8 <HAL_PCD_MspInit+0xd8>)
 800228c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002290:	6453      	str	r3, [r2, #68]	@ 0x44
 8002292:	4b05      	ldr	r3, [pc, #20]	@ (80022a8 <HAL_PCD_MspInit+0xd8>)
 8002294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002296:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800229e:	bf00      	nop
 80022a0:	3780      	adds	r7, #128	@ 0x80
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40020000 	.word	0x40020000

080022b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80022b4:	f7ff fd4c 	bl	8001d50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022b8:	480c      	ldr	r0, [pc, #48]	@ (80022ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022ba:	490d      	ldr	r1, [pc, #52]	@ (80022f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022bc:	4a0d      	ldr	r2, [pc, #52]	@ (80022f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022c0:	e002      	b.n	80022c8 <LoopCopyDataInit>

080022c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022c6:	3304      	adds	r3, #4

080022c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022cc:	d3f9      	bcc.n	80022c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ce:	4a0a      	ldr	r2, [pc, #40]	@ (80022f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022d0:	4c0a      	ldr	r4, [pc, #40]	@ (80022fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80022d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022d4:	e001      	b.n	80022da <LoopFillZerobss>

080022d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022d8:	3204      	adds	r2, #4

080022da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022dc:	d3fb      	bcc.n	80022d6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80022de:	f008 f9d7 	bl	800a690 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022e2:	f7ff fc03 	bl	8001aec <main>
  bx  lr    
 80022e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022f0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80022f4:	0800b47c 	.word	0x0800b47c
  ldr r2, =_sbss
 80022f8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80022fc:	200051b0 	.word	0x200051b0

08002300 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002300:	e7fe      	b.n	8002300 <ADC_IRQHandler>
	...

08002304 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002308:	4b0e      	ldr	r3, [pc, #56]	@ (8002344 <HAL_Init+0x40>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a0d      	ldr	r2, [pc, #52]	@ (8002344 <HAL_Init+0x40>)
 800230e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002312:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002314:	4b0b      	ldr	r3, [pc, #44]	@ (8002344 <HAL_Init+0x40>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a0a      	ldr	r2, [pc, #40]	@ (8002344 <HAL_Init+0x40>)
 800231a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800231e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002320:	4b08      	ldr	r3, [pc, #32]	@ (8002344 <HAL_Init+0x40>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a07      	ldr	r2, [pc, #28]	@ (8002344 <HAL_Init+0x40>)
 8002326:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800232a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800232c:	2003      	movs	r0, #3
 800232e:	f000 f94f 	bl	80025d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002332:	200f      	movs	r0, #15
 8002334:	f000 f808 	bl	8002348 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002338:	f7ff fc76 	bl	8001c28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40023c00 	.word	0x40023c00

08002348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002350:	4b12      	ldr	r3, [pc, #72]	@ (800239c <HAL_InitTick+0x54>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4b12      	ldr	r3, [pc, #72]	@ (80023a0 <HAL_InitTick+0x58>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	4619      	mov	r1, r3
 800235a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800235e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002362:	fbb2 f3f3 	udiv	r3, r2, r3
 8002366:	4618      	mov	r0, r3
 8002368:	f000 f967 	bl	800263a <HAL_SYSTICK_Config>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e00e      	b.n	8002394 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b0f      	cmp	r3, #15
 800237a:	d80a      	bhi.n	8002392 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800237c:	2200      	movs	r2, #0
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	f04f 30ff 	mov.w	r0, #4294967295
 8002384:	f000 f92f 	bl	80025e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002388:	4a06      	ldr	r2, [pc, #24]	@ (80023a4 <HAL_InitTick+0x5c>)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800238e:	2300      	movs	r3, #0
 8002390:	e000      	b.n	8002394 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
}
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20000014 	.word	0x20000014
 80023a0:	2000001c 	.word	0x2000001c
 80023a4:	20000018 	.word	0x20000018

080023a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023ac:	4b06      	ldr	r3, [pc, #24]	@ (80023c8 <HAL_IncTick+0x20>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	461a      	mov	r2, r3
 80023b2:	4b06      	ldr	r3, [pc, #24]	@ (80023cc <HAL_IncTick+0x24>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4413      	add	r3, r2
 80023b8:	4a04      	ldr	r2, [pc, #16]	@ (80023cc <HAL_IncTick+0x24>)
 80023ba:	6013      	str	r3, [r2, #0]
}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	2000001c 	.word	0x2000001c
 80023cc:	20000714 	.word	0x20000714

080023d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return uwTick;
 80023d4:	4b03      	ldr	r3, [pc, #12]	@ (80023e4 <HAL_GetTick+0x14>)
 80023d6:	681b      	ldr	r3, [r3, #0]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	20000714 	.word	0x20000714

080023e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023f0:	f7ff ffee 	bl	80023d0 <HAL_GetTick>
 80023f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002400:	d005      	beq.n	800240e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002402:	4b0a      	ldr	r3, [pc, #40]	@ (800242c <HAL_Delay+0x44>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	461a      	mov	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4413      	add	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800240e:	bf00      	nop
 8002410:	f7ff ffde 	bl	80023d0 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	429a      	cmp	r2, r3
 800241e:	d8f7      	bhi.n	8002410 <HAL_Delay+0x28>
  {
  }
}
 8002420:	bf00      	nop
 8002422:	bf00      	nop
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	2000001c 	.word	0x2000001c

08002430 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002440:	4b0c      	ldr	r3, [pc, #48]	@ (8002474 <__NVIC_SetPriorityGrouping+0x44>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800244c:	4013      	ands	r3, r2
 800244e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002458:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800245c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002460:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002462:	4a04      	ldr	r2, [pc, #16]	@ (8002474 <__NVIC_SetPriorityGrouping+0x44>)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	60d3      	str	r3, [r2, #12]
}
 8002468:	bf00      	nop
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800247c:	4b04      	ldr	r3, [pc, #16]	@ (8002490 <__NVIC_GetPriorityGrouping+0x18>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	0a1b      	lsrs	r3, r3, #8
 8002482:	f003 0307 	and.w	r3, r3, #7
}
 8002486:	4618      	mov	r0, r3
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800249e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	db0b      	blt.n	80024be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024a6:	79fb      	ldrb	r3, [r7, #7]
 80024a8:	f003 021f 	and.w	r2, r3, #31
 80024ac:	4907      	ldr	r1, [pc, #28]	@ (80024cc <__NVIC_EnableIRQ+0x38>)
 80024ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b2:	095b      	lsrs	r3, r3, #5
 80024b4:	2001      	movs	r0, #1
 80024b6:	fa00 f202 	lsl.w	r2, r0, r2
 80024ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	e000e100 	.word	0xe000e100

080024d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	6039      	str	r1, [r7, #0]
 80024da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	db0a      	blt.n	80024fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	490c      	ldr	r1, [pc, #48]	@ (800251c <__NVIC_SetPriority+0x4c>)
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	0112      	lsls	r2, r2, #4
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	440b      	add	r3, r1
 80024f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f8:	e00a      	b.n	8002510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	4908      	ldr	r1, [pc, #32]	@ (8002520 <__NVIC_SetPriority+0x50>)
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	3b04      	subs	r3, #4
 8002508:	0112      	lsls	r2, r2, #4
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	440b      	add	r3, r1
 800250e:	761a      	strb	r2, [r3, #24]
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	e000e100 	.word	0xe000e100
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002524:	b480      	push	{r7}
 8002526:	b089      	sub	sp, #36	@ 0x24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f1c3 0307 	rsb	r3, r3, #7
 800253e:	2b04      	cmp	r3, #4
 8002540:	bf28      	it	cs
 8002542:	2304      	movcs	r3, #4
 8002544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3304      	adds	r3, #4
 800254a:	2b06      	cmp	r3, #6
 800254c:	d902      	bls.n	8002554 <NVIC_EncodePriority+0x30>
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	3b03      	subs	r3, #3
 8002552:	e000      	b.n	8002556 <NVIC_EncodePriority+0x32>
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002558:	f04f 32ff 	mov.w	r2, #4294967295
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43da      	mvns	r2, r3
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	401a      	ands	r2, r3
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800256c:	f04f 31ff 	mov.w	r1, #4294967295
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	fa01 f303 	lsl.w	r3, r1, r3
 8002576:	43d9      	mvns	r1, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800257c:	4313      	orrs	r3, r2
         );
}
 800257e:	4618      	mov	r0, r3
 8002580:	3724      	adds	r7, #36	@ 0x24
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
	...

0800258c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3b01      	subs	r3, #1
 8002598:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800259c:	d301      	bcc.n	80025a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800259e:	2301      	movs	r3, #1
 80025a0:	e00f      	b.n	80025c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025a2:	4a0a      	ldr	r2, [pc, #40]	@ (80025cc <SysTick_Config+0x40>)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025aa:	210f      	movs	r1, #15
 80025ac:	f04f 30ff 	mov.w	r0, #4294967295
 80025b0:	f7ff ff8e 	bl	80024d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025b4:	4b05      	ldr	r3, [pc, #20]	@ (80025cc <SysTick_Config+0x40>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ba:	4b04      	ldr	r3, [pc, #16]	@ (80025cc <SysTick_Config+0x40>)
 80025bc:	2207      	movs	r2, #7
 80025be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	e000e010 	.word	0xe000e010

080025d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f7ff ff29 	bl	8002430 <__NVIC_SetPriorityGrouping>
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b086      	sub	sp, #24
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	4603      	mov	r3, r0
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	607a      	str	r2, [r7, #4]
 80025f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025f8:	f7ff ff3e 	bl	8002478 <__NVIC_GetPriorityGrouping>
 80025fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	68b9      	ldr	r1, [r7, #8]
 8002602:	6978      	ldr	r0, [r7, #20]
 8002604:	f7ff ff8e 	bl	8002524 <NVIC_EncodePriority>
 8002608:	4602      	mov	r2, r0
 800260a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800260e:	4611      	mov	r1, r2
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff ff5d 	bl	80024d0 <__NVIC_SetPriority>
}
 8002616:	bf00      	nop
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b082      	sub	sp, #8
 8002622:	af00      	add	r7, sp, #0
 8002624:	4603      	mov	r3, r0
 8002626:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff ff31 	bl	8002494 <__NVIC_EnableIRQ>
}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff ffa2 	bl	800258c <SysTick_Config>
 8002648:	4603      	mov	r3, r0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002654:	b480      	push	{r7}
 8002656:	b089      	sub	sp, #36	@ 0x24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002666:	2300      	movs	r3, #0
 8002668:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
 800266e:	e165      	b.n	800293c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002670:	2201      	movs	r2, #1
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	4013      	ands	r3, r2
 8002682:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	429a      	cmp	r2, r3
 800268a:	f040 8154 	bne.w	8002936 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	2b01      	cmp	r3, #1
 8002698:	d005      	beq.n	80026a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d130      	bne.n	8002708 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	2203      	movs	r2, #3
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43db      	mvns	r3, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4013      	ands	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026dc:	2201      	movs	r2, #1
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	43db      	mvns	r3, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4013      	ands	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	091b      	lsrs	r3, r3, #4
 80026f2:	f003 0201 	and.w	r2, r3, #1
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	2b03      	cmp	r3, #3
 8002712:	d017      	beq.n	8002744 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	2203      	movs	r2, #3
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d123      	bne.n	8002798 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	08da      	lsrs	r2, r3, #3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3208      	adds	r2, #8
 8002758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800275c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	220f      	movs	r2, #15
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	691a      	ldr	r2, [r3, #16]
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	08da      	lsrs	r2, r3, #3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3208      	adds	r2, #8
 8002792:	69b9      	ldr	r1, [r7, #24]
 8002794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	2203      	movs	r2, #3
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 0203 	and.w	r2, r3, #3
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 80ae 	beq.w	8002936 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	4b5d      	ldr	r3, [pc, #372]	@ (8002954 <HAL_GPIO_Init+0x300>)
 80027e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e2:	4a5c      	ldr	r2, [pc, #368]	@ (8002954 <HAL_GPIO_Init+0x300>)
 80027e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80027ea:	4b5a      	ldr	r3, [pc, #360]	@ (8002954 <HAL_GPIO_Init+0x300>)
 80027ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027f6:	4a58      	ldr	r2, [pc, #352]	@ (8002958 <HAL_GPIO_Init+0x304>)
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	089b      	lsrs	r3, r3, #2
 80027fc:	3302      	adds	r3, #2
 80027fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	220f      	movs	r2, #15
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43db      	mvns	r3, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4013      	ands	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a4f      	ldr	r2, [pc, #316]	@ (800295c <HAL_GPIO_Init+0x308>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d025      	beq.n	800286e <HAL_GPIO_Init+0x21a>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a4e      	ldr	r2, [pc, #312]	@ (8002960 <HAL_GPIO_Init+0x30c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d01f      	beq.n	800286a <HAL_GPIO_Init+0x216>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a4d      	ldr	r2, [pc, #308]	@ (8002964 <HAL_GPIO_Init+0x310>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d019      	beq.n	8002866 <HAL_GPIO_Init+0x212>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a4c      	ldr	r2, [pc, #304]	@ (8002968 <HAL_GPIO_Init+0x314>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d013      	beq.n	8002862 <HAL_GPIO_Init+0x20e>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a4b      	ldr	r2, [pc, #300]	@ (800296c <HAL_GPIO_Init+0x318>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d00d      	beq.n	800285e <HAL_GPIO_Init+0x20a>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a4a      	ldr	r2, [pc, #296]	@ (8002970 <HAL_GPIO_Init+0x31c>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d007      	beq.n	800285a <HAL_GPIO_Init+0x206>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a49      	ldr	r2, [pc, #292]	@ (8002974 <HAL_GPIO_Init+0x320>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d101      	bne.n	8002856 <HAL_GPIO_Init+0x202>
 8002852:	2306      	movs	r3, #6
 8002854:	e00c      	b.n	8002870 <HAL_GPIO_Init+0x21c>
 8002856:	2307      	movs	r3, #7
 8002858:	e00a      	b.n	8002870 <HAL_GPIO_Init+0x21c>
 800285a:	2305      	movs	r3, #5
 800285c:	e008      	b.n	8002870 <HAL_GPIO_Init+0x21c>
 800285e:	2304      	movs	r3, #4
 8002860:	e006      	b.n	8002870 <HAL_GPIO_Init+0x21c>
 8002862:	2303      	movs	r3, #3
 8002864:	e004      	b.n	8002870 <HAL_GPIO_Init+0x21c>
 8002866:	2302      	movs	r3, #2
 8002868:	e002      	b.n	8002870 <HAL_GPIO_Init+0x21c>
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <HAL_GPIO_Init+0x21c>
 800286e:	2300      	movs	r3, #0
 8002870:	69fa      	ldr	r2, [r7, #28]
 8002872:	f002 0203 	and.w	r2, r2, #3
 8002876:	0092      	lsls	r2, r2, #2
 8002878:	4093      	lsls	r3, r2
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002880:	4935      	ldr	r1, [pc, #212]	@ (8002958 <HAL_GPIO_Init+0x304>)
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	089b      	lsrs	r3, r3, #2
 8002886:	3302      	adds	r3, #2
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800288e:	4b3a      	ldr	r3, [pc, #232]	@ (8002978 <HAL_GPIO_Init+0x324>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	43db      	mvns	r3, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4013      	ands	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028b2:	4a31      	ldr	r2, [pc, #196]	@ (8002978 <HAL_GPIO_Init+0x324>)
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028b8:	4b2f      	ldr	r3, [pc, #188]	@ (8002978 <HAL_GPIO_Init+0x324>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028dc:	4a26      	ldr	r2, [pc, #152]	@ (8002978 <HAL_GPIO_Init+0x324>)
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028e2:	4b25      	ldr	r3, [pc, #148]	@ (8002978 <HAL_GPIO_Init+0x324>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	43db      	mvns	r3, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4013      	ands	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002906:	4a1c      	ldr	r2, [pc, #112]	@ (8002978 <HAL_GPIO_Init+0x324>)
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800290c:	4b1a      	ldr	r3, [pc, #104]	@ (8002978 <HAL_GPIO_Init+0x324>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002930:	4a11      	ldr	r2, [pc, #68]	@ (8002978 <HAL_GPIO_Init+0x324>)
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	3301      	adds	r3, #1
 800293a:	61fb      	str	r3, [r7, #28]
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	2b0f      	cmp	r3, #15
 8002940:	f67f ae96 	bls.w	8002670 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002944:	bf00      	nop
 8002946:	bf00      	nop
 8002948:	3724      	adds	r7, #36	@ 0x24
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40023800 	.word	0x40023800
 8002958:	40013800 	.word	0x40013800
 800295c:	40020000 	.word	0x40020000
 8002960:	40020400 	.word	0x40020400
 8002964:	40020800 	.word	0x40020800
 8002968:	40020c00 	.word	0x40020c00
 800296c:	40021000 	.word	0x40021000
 8002970:	40021400 	.word	0x40021400
 8002974:	40021800 	.word	0x40021800
 8002978:	40013c00 	.word	0x40013c00

0800297c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	691a      	ldr	r2, [r3, #16]
 800298c:	887b      	ldrh	r3, [r7, #2]
 800298e:	4013      	ands	r3, r2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d002      	beq.n	800299a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002994:	2301      	movs	r3, #1
 8002996:	73fb      	strb	r3, [r7, #15]
 8002998:	e001      	b.n	800299e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800299a:	2300      	movs	r3, #0
 800299c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800299e:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	807b      	strh	r3, [r7, #2]
 80029b8:	4613      	mov	r3, r2
 80029ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029bc:	787b      	ldrb	r3, [r7, #1]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029c2:	887a      	ldrh	r2, [r7, #2]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029c8:	e003      	b.n	80029d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029ca:	887b      	ldrh	r3, [r7, #2]
 80029cc:	041a      	lsls	r2, r3, #16
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	619a      	str	r2, [r3, #24]
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
	...

080029e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e12b      	b.n	8002c4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d106      	bne.n	8002a0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7fe ff0c 	bl	8001824 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2224      	movs	r2, #36	@ 0x24
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0201 	bic.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a44:	f001 f844 	bl	8003ad0 <HAL_RCC_GetPCLK1Freq>
 8002a48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	4a81      	ldr	r2, [pc, #516]	@ (8002c54 <HAL_I2C_Init+0x274>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d807      	bhi.n	8002a64 <HAL_I2C_Init+0x84>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4a80      	ldr	r2, [pc, #512]	@ (8002c58 <HAL_I2C_Init+0x278>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	bf94      	ite	ls
 8002a5c:	2301      	movls	r3, #1
 8002a5e:	2300      	movhi	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	e006      	b.n	8002a72 <HAL_I2C_Init+0x92>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	4a7d      	ldr	r2, [pc, #500]	@ (8002c5c <HAL_I2C_Init+0x27c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	bf94      	ite	ls
 8002a6c:	2301      	movls	r3, #1
 8002a6e:	2300      	movhi	r3, #0
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e0e7      	b.n	8002c4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	4a78      	ldr	r2, [pc, #480]	@ (8002c60 <HAL_I2C_Init+0x280>)
 8002a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a82:	0c9b      	lsrs	r3, r3, #18
 8002a84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68ba      	ldr	r2, [r7, #8]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	4a6a      	ldr	r2, [pc, #424]	@ (8002c54 <HAL_I2C_Init+0x274>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d802      	bhi.n	8002ab4 <HAL_I2C_Init+0xd4>
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	e009      	b.n	8002ac8 <HAL_I2C_Init+0xe8>
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002aba:	fb02 f303 	mul.w	r3, r2, r3
 8002abe:	4a69      	ldr	r2, [pc, #420]	@ (8002c64 <HAL_I2C_Init+0x284>)
 8002ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac4:	099b      	lsrs	r3, r3, #6
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6812      	ldr	r2, [r2, #0]
 8002acc:	430b      	orrs	r3, r1
 8002ace:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002ada:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	495c      	ldr	r1, [pc, #368]	@ (8002c54 <HAL_I2C_Init+0x274>)
 8002ae4:	428b      	cmp	r3, r1
 8002ae6:	d819      	bhi.n	8002b1c <HAL_I2C_Init+0x13c>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	1e59      	subs	r1, r3, #1
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002af6:	1c59      	adds	r1, r3, #1
 8002af8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002afc:	400b      	ands	r3, r1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00a      	beq.n	8002b18 <HAL_I2C_Init+0x138>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	1e59      	subs	r1, r3, #1
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b10:	3301      	adds	r3, #1
 8002b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b16:	e051      	b.n	8002bbc <HAL_I2C_Init+0x1dc>
 8002b18:	2304      	movs	r3, #4
 8002b1a:	e04f      	b.n	8002bbc <HAL_I2C_Init+0x1dc>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d111      	bne.n	8002b48 <HAL_I2C_Init+0x168>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	1e58      	subs	r0, r3, #1
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6859      	ldr	r1, [r3, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	440b      	add	r3, r1
 8002b32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b36:	3301      	adds	r3, #1
 8002b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	bf0c      	ite	eq
 8002b40:	2301      	moveq	r3, #1
 8002b42:	2300      	movne	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	e012      	b.n	8002b6e <HAL_I2C_Init+0x18e>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	1e58      	subs	r0, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6859      	ldr	r1, [r3, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	0099      	lsls	r1, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b5e:	3301      	adds	r3, #1
 8002b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	bf0c      	ite	eq
 8002b68:	2301      	moveq	r3, #1
 8002b6a:	2300      	movne	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_I2C_Init+0x196>
 8002b72:	2301      	movs	r3, #1
 8002b74:	e022      	b.n	8002bbc <HAL_I2C_Init+0x1dc>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10e      	bne.n	8002b9c <HAL_I2C_Init+0x1bc>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	1e58      	subs	r0, r3, #1
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6859      	ldr	r1, [r3, #4]
 8002b86:	460b      	mov	r3, r1
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	440b      	add	r3, r1
 8002b8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b90:	3301      	adds	r3, #1
 8002b92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b9a:	e00f      	b.n	8002bbc <HAL_I2C_Init+0x1dc>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	1e58      	subs	r0, r3, #1
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6859      	ldr	r1, [r3, #4]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	0099      	lsls	r1, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bb8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	6809      	ldr	r1, [r1, #0]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69da      	ldr	r2, [r3, #28]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002bea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6911      	ldr	r1, [r2, #16]
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	68d2      	ldr	r2, [r2, #12]
 8002bf6:	4311      	orrs	r1, r2
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	6812      	ldr	r2, [r2, #0]
 8002bfc:	430b      	orrs	r3, r1
 8002bfe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	695a      	ldr	r2, [r3, #20]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0201 	orr.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2220      	movs	r2, #32
 8002c36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	000186a0 	.word	0x000186a0
 8002c58:	001e847f 	.word	0x001e847f
 8002c5c:	003d08ff 	.word	0x003d08ff
 8002c60:	431bde83 	.word	0x431bde83
 8002c64:	10624dd3 	.word	0x10624dd3

08002c68 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b08c      	sub	sp, #48	@ 0x30
 8002c6c:	af02      	add	r7, sp, #8
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	4608      	mov	r0, r1
 8002c72:	4611      	mov	r1, r2
 8002c74:	461a      	mov	r2, r3
 8002c76:	4603      	mov	r3, r0
 8002c78:	817b      	strh	r3, [r7, #10]
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	813b      	strh	r3, [r7, #8]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c82:	f7ff fba5 	bl	80023d0 <HAL_GetTick>
 8002c86:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b20      	cmp	r3, #32
 8002c92:	f040 8214 	bne.w	80030be <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	2319      	movs	r3, #25
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	497b      	ldr	r1, [pc, #492]	@ (8002e8c <HAL_I2C_Mem_Read+0x224>)
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f000 fafb 	bl	800329c <I2C_WaitOnFlagUntilTimeout>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002cac:	2302      	movs	r3, #2
 8002cae:	e207      	b.n	80030c0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d101      	bne.n	8002cbe <HAL_I2C_Mem_Read+0x56>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	e200      	b.n	80030c0 <HAL_I2C_Mem_Read+0x458>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d007      	beq.n	8002ce4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0201 	orr.w	r2, r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cf2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2222      	movs	r2, #34	@ 0x22
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2240      	movs	r2, #64	@ 0x40
 8002d00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d0e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002d14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4a5b      	ldr	r2, [pc, #364]	@ (8002e90 <HAL_I2C_Mem_Read+0x228>)
 8002d24:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d26:	88f8      	ldrh	r0, [r7, #6]
 8002d28:	893a      	ldrh	r2, [r7, #8]
 8002d2a:	8979      	ldrh	r1, [r7, #10]
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2e:	9301      	str	r3, [sp, #4]
 8002d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	4603      	mov	r3, r0
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 f9c8 	bl	80030cc <I2C_RequestMemoryRead>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e1bc      	b.n	80030c0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d113      	bne.n	8002d76 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d4e:	2300      	movs	r3, #0
 8002d50:	623b      	str	r3, [r7, #32]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	623b      	str	r3, [r7, #32]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	623b      	str	r3, [r7, #32]
 8002d62:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	e190      	b.n	8003098 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d11b      	bne.n	8002db6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61fb      	str	r3, [r7, #28]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	61fb      	str	r3, [r7, #28]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	61fb      	str	r3, [r7, #28]
 8002da2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	e170      	b.n	8003098 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d11b      	bne.n	8002df6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dcc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ddc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dde:	2300      	movs	r3, #0
 8002de0:	61bb      	str	r3, [r7, #24]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	61bb      	str	r3, [r7, #24]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	61bb      	str	r3, [r7, #24]
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	e150      	b.n	8003098 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002df6:	2300      	movs	r3, #0
 8002df8:	617b      	str	r3, [r7, #20]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	617b      	str	r3, [r7, #20]
 8002e0a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002e0c:	e144      	b.n	8003098 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e12:	2b03      	cmp	r3, #3
 8002e14:	f200 80f1 	bhi.w	8002ffa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d123      	bne.n	8002e68 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e22:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 fb9b 	bl	8003560 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e145      	b.n	80030c0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	691a      	ldr	r2, [r3, #16]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e46:	1c5a      	adds	r2, r3, #1
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e66:	e117      	b.n	8003098 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d14e      	bne.n	8002f0e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e76:	2200      	movs	r2, #0
 8002e78:	4906      	ldr	r1, [pc, #24]	@ (8002e94 <HAL_I2C_Mem_Read+0x22c>)
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 fa0e 	bl	800329c <I2C_WaitOnFlagUntilTimeout>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d008      	beq.n	8002e98 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e11a      	b.n	80030c0 <HAL_I2C_Mem_Read+0x458>
 8002e8a:	bf00      	nop
 8002e8c:	00100002 	.word	0x00100002
 8002e90:	ffff0000 	.word	0xffff0000
 8002e94:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ea6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	691a      	ldr	r2, [r3, #16]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eba:	1c5a      	adds	r2, r3, #1
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	691a      	ldr	r2, [r3, #16]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f0c:	e0c4      	b.n	8003098 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f14:	2200      	movs	r2, #0
 8002f16:	496c      	ldr	r1, [pc, #432]	@ (80030c8 <HAL_I2C_Mem_Read+0x460>)
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 f9bf 	bl	800329c <I2C_WaitOnFlagUntilTimeout>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e0cb      	b.n	80030c0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691a      	ldr	r2, [r3, #16]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f42:	b2d2      	uxtb	r2, r2
 8002f44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4a:	1c5a      	adds	r2, r3, #1
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f54:	3b01      	subs	r3, #1
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	3b01      	subs	r3, #1
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f70:	2200      	movs	r2, #0
 8002f72:	4955      	ldr	r1, [pc, #340]	@ (80030c8 <HAL_I2C_Mem_Read+0x460>)
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 f991 	bl	800329c <I2C_WaitOnFlagUntilTimeout>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e09d      	b.n	80030c0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691a      	ldr	r2, [r3, #16]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa6:	1c5a      	adds	r2, r3, #1
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	691a      	ldr	r2, [r3, #16]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ff8:	e04e      	b.n	8003098 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ffc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 faae 	bl	8003560 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e058      	b.n	80030c0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800302a:	3b01      	subs	r3, #1
 800302c:	b29a      	uxth	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003036:	b29b      	uxth	r3, r3
 8003038:	3b01      	subs	r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	2b04      	cmp	r3, #4
 800304c:	d124      	bne.n	8003098 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003052:	2b03      	cmp	r3, #3
 8003054:	d107      	bne.n	8003066 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003064:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	691a      	ldr	r2, [r3, #16]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003070:	b2d2      	uxtb	r2, r2
 8003072:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003082:	3b01      	subs	r3, #1
 8003084:	b29a      	uxth	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800308e:	b29b      	uxth	r3, r3
 8003090:	3b01      	subs	r3, #1
 8003092:	b29a      	uxth	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800309c:	2b00      	cmp	r3, #0
 800309e:	f47f aeb6 	bne.w	8002e0e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2220      	movs	r2, #32
 80030a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	e000      	b.n	80030c0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80030be:	2302      	movs	r3, #2
  }
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3728      	adds	r7, #40	@ 0x28
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	00010004 	.word	0x00010004

080030cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b088      	sub	sp, #32
 80030d0:	af02      	add	r7, sp, #8
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	4608      	mov	r0, r1
 80030d6:	4611      	mov	r1, r2
 80030d8:	461a      	mov	r2, r3
 80030da:	4603      	mov	r3, r0
 80030dc:	817b      	strh	r3, [r7, #10]
 80030de:	460b      	mov	r3, r1
 80030e0:	813b      	strh	r3, [r7, #8]
 80030e2:	4613      	mov	r3, r2
 80030e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80030f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003104:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	2200      	movs	r2, #0
 800310e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 f8c2 	bl	800329c <I2C_WaitOnFlagUntilTimeout>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00d      	beq.n	800313a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003128:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800312c:	d103      	bne.n	8003136 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003134:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e0aa      	b.n	8003290 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800313a:	897b      	ldrh	r3, [r7, #10]
 800313c:	b2db      	uxtb	r3, r3
 800313e:	461a      	mov	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003148:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800314a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314c:	6a3a      	ldr	r2, [r7, #32]
 800314e:	4952      	ldr	r1, [pc, #328]	@ (8003298 <I2C_RequestMemoryRead+0x1cc>)
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f000 f91d 	bl	8003390 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e097      	b.n	8003290 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003160:	2300      	movs	r3, #0
 8003162:	617b      	str	r3, [r7, #20]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	617b      	str	r3, [r7, #20]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	617b      	str	r3, [r7, #20]
 8003174:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003178:	6a39      	ldr	r1, [r7, #32]
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 f9a8 	bl	80034d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00d      	beq.n	80031a2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318a:	2b04      	cmp	r3, #4
 800318c:	d107      	bne.n	800319e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800319c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e076      	b.n	8003290 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031a2:	88fb      	ldrh	r3, [r7, #6]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d105      	bne.n	80031b4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031a8:	893b      	ldrh	r3, [r7, #8]
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	611a      	str	r2, [r3, #16]
 80031b2:	e021      	b.n	80031f8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80031b4:	893b      	ldrh	r3, [r7, #8]
 80031b6:	0a1b      	lsrs	r3, r3, #8
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	b2da      	uxtb	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031c4:	6a39      	ldr	r1, [r7, #32]
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 f982 	bl	80034d0 <I2C_WaitOnTXEFlagUntilTimeout>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00d      	beq.n	80031ee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d107      	bne.n	80031ea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e050      	b.n	8003290 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031ee:	893b      	ldrh	r3, [r7, #8]
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031fa:	6a39      	ldr	r1, [r7, #32]
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 f967 	bl	80034d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00d      	beq.n	8003224 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320c:	2b04      	cmp	r3, #4
 800320e:	d107      	bne.n	8003220 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800321e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e035      	b.n	8003290 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003232:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	2200      	movs	r2, #0
 800323c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 f82b 	bl	800329c <I2C_WaitOnFlagUntilTimeout>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00d      	beq.n	8003268 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003256:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800325a:	d103      	bne.n	8003264 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003262:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e013      	b.n	8003290 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003268:	897b      	ldrh	r3, [r7, #10]
 800326a:	b2db      	uxtb	r3, r3
 800326c:	f043 0301 	orr.w	r3, r3, #1
 8003270:	b2da      	uxtb	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327a:	6a3a      	ldr	r2, [r7, #32]
 800327c:	4906      	ldr	r1, [pc, #24]	@ (8003298 <I2C_RequestMemoryRead+0x1cc>)
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 f886 	bl	8003390 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e000      	b.n	8003290 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3718      	adds	r7, #24
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	00010002 	.word	0x00010002

0800329c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	603b      	str	r3, [r7, #0]
 80032a8:	4613      	mov	r3, r2
 80032aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032ac:	e048      	b.n	8003340 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b4:	d044      	beq.n	8003340 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b6:	f7ff f88b 	bl	80023d0 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d302      	bcc.n	80032cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d139      	bne.n	8003340 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	0c1b      	lsrs	r3, r3, #16
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d10d      	bne.n	80032f2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	43da      	mvns	r2, r3
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	4013      	ands	r3, r2
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	bf0c      	ite	eq
 80032e8:	2301      	moveq	r3, #1
 80032ea:	2300      	movne	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	461a      	mov	r2, r3
 80032f0:	e00c      	b.n	800330c <I2C_WaitOnFlagUntilTimeout+0x70>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	43da      	mvns	r2, r3
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	4013      	ands	r3, r2
 80032fe:	b29b      	uxth	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	bf0c      	ite	eq
 8003304:	2301      	moveq	r3, #1
 8003306:	2300      	movne	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	461a      	mov	r2, r3
 800330c:	79fb      	ldrb	r3, [r7, #7]
 800330e:	429a      	cmp	r2, r3
 8003310:	d116      	bne.n	8003340 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2220      	movs	r2, #32
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332c:	f043 0220 	orr.w	r2, r3, #32
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e023      	b.n	8003388 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	0c1b      	lsrs	r3, r3, #16
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b01      	cmp	r3, #1
 8003348:	d10d      	bne.n	8003366 <I2C_WaitOnFlagUntilTimeout+0xca>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	43da      	mvns	r2, r3
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	4013      	ands	r3, r2
 8003356:	b29b      	uxth	r3, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	bf0c      	ite	eq
 800335c:	2301      	moveq	r3, #1
 800335e:	2300      	movne	r3, #0
 8003360:	b2db      	uxtb	r3, r3
 8003362:	461a      	mov	r2, r3
 8003364:	e00c      	b.n	8003380 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	43da      	mvns	r2, r3
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	4013      	ands	r3, r2
 8003372:	b29b      	uxth	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	bf0c      	ite	eq
 8003378:	2301      	moveq	r3, #1
 800337a:	2300      	movne	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	461a      	mov	r2, r3
 8003380:	79fb      	ldrb	r3, [r7, #7]
 8003382:	429a      	cmp	r2, r3
 8003384:	d093      	beq.n	80032ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
 800339c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800339e:	e071      	b.n	8003484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033ae:	d123      	bne.n	80033f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033be:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80033c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2220      	movs	r2, #32
 80033d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e4:	f043 0204 	orr.w	r2, r3, #4
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e067      	b.n	80034c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fe:	d041      	beq.n	8003484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003400:	f7fe ffe6 	bl	80023d0 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	429a      	cmp	r2, r3
 800340e:	d302      	bcc.n	8003416 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d136      	bne.n	8003484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	0c1b      	lsrs	r3, r3, #16
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b01      	cmp	r3, #1
 800341e:	d10c      	bne.n	800343a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	43da      	mvns	r2, r3
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	4013      	ands	r3, r2
 800342c:	b29b      	uxth	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	bf14      	ite	ne
 8003432:	2301      	movne	r3, #1
 8003434:	2300      	moveq	r3, #0
 8003436:	b2db      	uxtb	r3, r3
 8003438:	e00b      	b.n	8003452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	43da      	mvns	r2, r3
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	4013      	ands	r3, r2
 8003446:	b29b      	uxth	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	bf14      	ite	ne
 800344c:	2301      	movne	r3, #1
 800344e:	2300      	moveq	r3, #0
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d016      	beq.n	8003484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2220      	movs	r2, #32
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003470:	f043 0220 	orr.w	r2, r3, #32
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e021      	b.n	80034c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	0c1b      	lsrs	r3, r3, #16
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b01      	cmp	r3, #1
 800348c:	d10c      	bne.n	80034a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	43da      	mvns	r2, r3
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	4013      	ands	r3, r2
 800349a:	b29b      	uxth	r3, r3
 800349c:	2b00      	cmp	r3, #0
 800349e:	bf14      	ite	ne
 80034a0:	2301      	movne	r3, #1
 80034a2:	2300      	moveq	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	e00b      	b.n	80034c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	43da      	mvns	r2, r3
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	4013      	ands	r3, r2
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	bf14      	ite	ne
 80034ba:	2301      	movne	r3, #1
 80034bc:	2300      	moveq	r3, #0
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f47f af6d 	bne.w	80033a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034dc:	e034      	b.n	8003548 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f000 f89b 	bl	800361a <I2C_IsAcknowledgeFailed>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e034      	b.n	8003558 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f4:	d028      	beq.n	8003548 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f6:	f7fe ff6b 	bl	80023d0 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	429a      	cmp	r2, r3
 8003504:	d302      	bcc.n	800350c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d11d      	bne.n	8003548 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003516:	2b80      	cmp	r3, #128	@ 0x80
 8003518:	d016      	beq.n	8003548 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2220      	movs	r2, #32
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003534:	f043 0220 	orr.w	r2, r3, #32
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e007      	b.n	8003558 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003552:	2b80      	cmp	r3, #128	@ 0x80
 8003554:	d1c3      	bne.n	80034de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800356c:	e049      	b.n	8003602 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	f003 0310 	and.w	r3, r3, #16
 8003578:	2b10      	cmp	r3, #16
 800357a:	d119      	bne.n	80035b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f06f 0210 	mvn.w	r2, #16
 8003584:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2220      	movs	r2, #32
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e030      	b.n	8003612 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b0:	f7fe ff0e 	bl	80023d0 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d302      	bcc.n	80035c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d11d      	bne.n	8003602 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035d0:	2b40      	cmp	r3, #64	@ 0x40
 80035d2:	d016      	beq.n	8003602 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2220      	movs	r2, #32
 80035de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ee:	f043 0220 	orr.w	r2, r3, #32
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e007      	b.n	8003612 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800360c:	2b40      	cmp	r3, #64	@ 0x40
 800360e:	d1ae      	bne.n	800356e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800362c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003630:	d11b      	bne.n	800366a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800363a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2220      	movs	r2, #32
 8003646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003656:	f043 0204 	orr.w	r2, r3, #4
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e000      	b.n	800366c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af02      	add	r7, sp, #8
 800367e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e108      	b.n	800389c <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b00      	cmp	r3, #0
 800369a:	d106      	bne.n	80036aa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7fe fd93 	bl	80021d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2203      	movs	r2, #3
 80036ae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036b8:	d102      	bne.n	80036c0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f002 fcd9 	bl	800607c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6818      	ldr	r0, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	7c1a      	ldrb	r2, [r3, #16]
 80036d2:	f88d 2000 	strb.w	r2, [sp]
 80036d6:	3304      	adds	r3, #4
 80036d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036da:	f002 fc6b 	bl	8005fb4 <USB_CoreInit>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e0d5      	b.n	800389c <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2100      	movs	r1, #0
 80036f6:	4618      	mov	r0, r3
 80036f8:	f002 fcd1 	bl	800609e <USB_SetCurrentMode>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d005      	beq.n	800370e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2202      	movs	r2, #2
 8003706:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e0c6      	b.n	800389c <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800370e:	2300      	movs	r3, #0
 8003710:	73fb      	strb	r3, [r7, #15]
 8003712:	e04a      	b.n	80037aa <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003714:	7bfa      	ldrb	r2, [r7, #15]
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	4613      	mov	r3, r2
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	4413      	add	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	3315      	adds	r3, #21
 8003724:	2201      	movs	r2, #1
 8003726:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003728:	7bfa      	ldrb	r2, [r7, #15]
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	4613      	mov	r3, r2
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	4413      	add	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	3314      	adds	r3, #20
 8003738:	7bfa      	ldrb	r2, [r7, #15]
 800373a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800373c:	7bfa      	ldrb	r2, [r7, #15]
 800373e:	7bfb      	ldrb	r3, [r7, #15]
 8003740:	b298      	uxth	r0, r3
 8003742:	6879      	ldr	r1, [r7, #4]
 8003744:	4613      	mov	r3, r2
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	4413      	add	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	440b      	add	r3, r1
 800374e:	332e      	adds	r3, #46	@ 0x2e
 8003750:	4602      	mov	r2, r0
 8003752:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003754:	7bfa      	ldrb	r2, [r7, #15]
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	4613      	mov	r3, r2
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	4413      	add	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	440b      	add	r3, r1
 8003762:	3318      	adds	r3, #24
 8003764:	2200      	movs	r2, #0
 8003766:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003768:	7bfa      	ldrb	r2, [r7, #15]
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	4613      	mov	r3, r2
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	4413      	add	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	331c      	adds	r3, #28
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800377c:	7bfa      	ldrb	r2, [r7, #15]
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	4613      	mov	r3, r2
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	4413      	add	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	3320      	adds	r3, #32
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003790:	7bfa      	ldrb	r2, [r7, #15]
 8003792:	6879      	ldr	r1, [r7, #4]
 8003794:	4613      	mov	r3, r2
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	4413      	add	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	3324      	adds	r3, #36	@ 0x24
 80037a0:	2200      	movs	r2, #0
 80037a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
 80037a6:	3301      	adds	r3, #1
 80037a8:	73fb      	strb	r3, [r7, #15]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	791b      	ldrb	r3, [r3, #4]
 80037ae:	7bfa      	ldrb	r2, [r7, #15]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d3af      	bcc.n	8003714 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037b4:	2300      	movs	r3, #0
 80037b6:	73fb      	strb	r3, [r7, #15]
 80037b8:	e044      	b.n	8003844 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037ba:	7bfa      	ldrb	r2, [r7, #15]
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	4613      	mov	r3, r2
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	4413      	add	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	440b      	add	r3, r1
 80037c8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80037cc:	2200      	movs	r2, #0
 80037ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80037d0:	7bfa      	ldrb	r2, [r7, #15]
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	4613      	mov	r3, r2
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	4413      	add	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	440b      	add	r3, r1
 80037de:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80037e2:	7bfa      	ldrb	r2, [r7, #15]
 80037e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80037e6:	7bfa      	ldrb	r2, [r7, #15]
 80037e8:	6879      	ldr	r1, [r7, #4]
 80037ea:	4613      	mov	r3, r2
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	4413      	add	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	440b      	add	r3, r1
 80037f4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80037f8:	2200      	movs	r2, #0
 80037fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80037fc:	7bfa      	ldrb	r2, [r7, #15]
 80037fe:	6879      	ldr	r1, [r7, #4]
 8003800:	4613      	mov	r3, r2
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	4413      	add	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	440b      	add	r3, r1
 800380a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800380e:	2200      	movs	r2, #0
 8003810:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003812:	7bfa      	ldrb	r2, [r7, #15]
 8003814:	6879      	ldr	r1, [r7, #4]
 8003816:	4613      	mov	r3, r2
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	4413      	add	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	440b      	add	r3, r1
 8003820:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003828:	7bfa      	ldrb	r2, [r7, #15]
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	4613      	mov	r3, r2
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	4413      	add	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800383e:	7bfb      	ldrb	r3, [r7, #15]
 8003840:	3301      	adds	r3, #1
 8003842:	73fb      	strb	r3, [r7, #15]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	791b      	ldrb	r3, [r3, #4]
 8003848:	7bfa      	ldrb	r2, [r7, #15]
 800384a:	429a      	cmp	r2, r3
 800384c:	d3b5      	bcc.n	80037ba <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6818      	ldr	r0, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	7c1a      	ldrb	r2, [r3, #16]
 8003856:	f88d 2000 	strb.w	r2, [sp]
 800385a:	3304      	adds	r3, #4
 800385c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800385e:	f002 fc6b 	bl	8006138 <USB_DevInit>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d005      	beq.n	8003874 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2202      	movs	r2, #2
 800386c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e013      	b.n	800389c <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	7b1b      	ldrb	r3, [r3, #12]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d102      	bne.n	8003890 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f80a 	bl	80038a4 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f002 fe26 	bl	80064e6 <USB_DevDisconnect>

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038d6:	f043 0303 	orr.w	r3, r3, #3
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e0cc      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003900:	4b68      	ldr	r3, [pc, #416]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 030f 	and.w	r3, r3, #15
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	429a      	cmp	r2, r3
 800390c:	d90c      	bls.n	8003928 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800390e:	4b65      	ldr	r3, [pc, #404]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003916:	4b63      	ldr	r3, [pc, #396]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	429a      	cmp	r2, r3
 8003922:	d001      	beq.n	8003928 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e0b8      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d020      	beq.n	8003976 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d005      	beq.n	800394c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003940:	4b59      	ldr	r3, [pc, #356]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	4a58      	ldr	r2, [pc, #352]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800394a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	2b00      	cmp	r3, #0
 8003956:	d005      	beq.n	8003964 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003958:	4b53      	ldr	r3, [pc, #332]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	4a52      	ldr	r2, [pc, #328]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003962:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003964:	4b50      	ldr	r3, [pc, #320]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	494d      	ldr	r1, [pc, #308]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003972:	4313      	orrs	r3, r2
 8003974:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d044      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d107      	bne.n	800399a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800398a:	4b47      	ldr	r3, [pc, #284]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d119      	bne.n	80039ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e07f      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d003      	beq.n	80039aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039a6:	2b03      	cmp	r3, #3
 80039a8:	d107      	bne.n	80039ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039aa:	4b3f      	ldr	r3, [pc, #252]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d109      	bne.n	80039ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e06f      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ba:	4b3b      	ldr	r3, [pc, #236]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e067      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ca:	4b37      	ldr	r3, [pc, #220]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f023 0203 	bic.w	r2, r3, #3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	4934      	ldr	r1, [pc, #208]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039dc:	f7fe fcf8 	bl	80023d0 <HAL_GetTick>
 80039e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e2:	e00a      	b.n	80039fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039e4:	f7fe fcf4 	bl	80023d0 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e04f      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fa:	4b2b      	ldr	r3, [pc, #172]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f003 020c 	and.w	r2, r3, #12
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d1eb      	bne.n	80039e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a0c:	4b25      	ldr	r3, [pc, #148]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 030f 	and.w	r3, r3, #15
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d20c      	bcs.n	8003a34 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a1a:	4b22      	ldr	r3, [pc, #136]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	b2d2      	uxtb	r2, r2
 8003a20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a22:	4b20      	ldr	r3, [pc, #128]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d001      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e032      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d008      	beq.n	8003a52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a40:	4b19      	ldr	r3, [pc, #100]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	4916      	ldr	r1, [pc, #88]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d009      	beq.n	8003a72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a5e:	4b12      	ldr	r3, [pc, #72]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	490e      	ldr	r1, [pc, #56]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a72:	f000 fb7f 	bl	8004174 <HAL_RCC_GetSysClockFreq>
 8003a76:	4602      	mov	r2, r0
 8003a78:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	091b      	lsrs	r3, r3, #4
 8003a7e:	f003 030f 	and.w	r3, r3, #15
 8003a82:	490a      	ldr	r1, [pc, #40]	@ (8003aac <HAL_RCC_ClockConfig+0x1c0>)
 8003a84:	5ccb      	ldrb	r3, [r1, r3]
 8003a86:	fa22 f303 	lsr.w	r3, r2, r3
 8003a8a:	4a09      	ldr	r2, [pc, #36]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003a8e:	4b09      	ldr	r3, [pc, #36]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fe fc58 	bl	8002348 <HAL_InitTick>

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40023c00 	.word	0x40023c00
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	0800b420 	.word	0x0800b420
 8003ab0:	20000014 	.word	0x20000014
 8003ab4:	20000018 	.word	0x20000018

08003ab8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003abc:	4b03      	ldr	r3, [pc, #12]	@ (8003acc <HAL_RCC_GetHCLKFreq+0x14>)
 8003abe:	681b      	ldr	r3, [r3, #0]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	20000014 	.word	0x20000014

08003ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ad4:	f7ff fff0 	bl	8003ab8 <HAL_RCC_GetHCLKFreq>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	4b05      	ldr	r3, [pc, #20]	@ (8003af0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	0a9b      	lsrs	r3, r3, #10
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	4903      	ldr	r1, [pc, #12]	@ (8003af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ae6:	5ccb      	ldrb	r3, [r1, r3]
 8003ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	40023800 	.word	0x40023800
 8003af4:	0800b430 	.word	0x0800b430

08003af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003afc:	f7ff ffdc 	bl	8003ab8 <HAL_RCC_GetHCLKFreq>
 8003b00:	4602      	mov	r2, r0
 8003b02:	4b05      	ldr	r3, [pc, #20]	@ (8003b18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	0b5b      	lsrs	r3, r3, #13
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	4903      	ldr	r1, [pc, #12]	@ (8003b1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b0e:	5ccb      	ldrb	r3, [r1, r3]
 8003b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	0800b430 	.word	0x0800b430

08003b20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b08c      	sub	sp, #48	@ 0x30
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d010      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003b58:	4b6f      	ldr	r3, [pc, #444]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b5e:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b66:	496c      	ldr	r1, [pc, #432]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003b76:	2301      	movs	r3, #1
 8003b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d010      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003b86:	4b64      	ldr	r3, [pc, #400]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b8c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b94:	4960      	ldr	r1, [pc, #384]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d017      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bb4:	4b58      	ldr	r3, [pc, #352]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc2:	4955      	ldr	r1, [pc, #340]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bd2:	d101      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003be0:	2301      	movs	r3, #1
 8003be2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d017      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003bf0:	4b49      	ldr	r3, [pc, #292]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bf6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bfe:	4946      	ldr	r1, [pc, #280]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c0e:	d101      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003c10:	2301      	movs	r3, #1
 8003c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0320 	and.w	r3, r3, #32
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 808a 	beq.w	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60bb      	str	r3, [r7, #8]
 8003c32:	4b39      	ldr	r3, [pc, #228]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c36:	4a38      	ldr	r2, [pc, #224]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c3e:	4b36      	ldr	r3, [pc, #216]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c46:	60bb      	str	r3, [r7, #8]
 8003c48:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003c4a:	4b34      	ldr	r3, [pc, #208]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a33      	ldr	r2, [pc, #204]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c54:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c56:	f7fe fbbb 	bl	80023d0 <HAL_GetTick>
 8003c5a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003c5c:	e008      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c5e:	f7fe fbb7 	bl	80023d0 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e278      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003c70:	4b2a      	ldr	r3, [pc, #168]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0f0      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c7c:	4b26      	ldr	r3, [pc, #152]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c84:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d02f      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c94:	6a3a      	ldr	r2, [r7, #32]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d028      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c9a:	4b1f      	ldr	r3, [pc, #124]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ca2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ca4:	4b1e      	ldr	r3, [pc, #120]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003caa:	4b1d      	ldr	r3, [pc, #116]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003cb0:	4a19      	ldr	r2, [pc, #100]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cb2:	6a3b      	ldr	r3, [r7, #32]
 8003cb4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003cb6:	4b18      	ldr	r3, [pc, #96]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d114      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003cc2:	f7fe fb85 	bl	80023d0 <HAL_GetTick>
 8003cc6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc8:	e00a      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cca:	f7fe fb81 	bl	80023d0 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e240      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce0:	4b0d      	ldr	r3, [pc, #52]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0ee      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cf4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cf8:	d114      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003cfa:	4b07      	ldr	r3, [pc, #28]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d06:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003d0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d0e:	4902      	ldr	r1, [pc, #8]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	608b      	str	r3, [r1, #8]
 8003d14:	e00c      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003d16:	bf00      	nop
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	40007000 	.word	0x40007000
 8003d20:	42470e40 	.word	0x42470e40
 8003d24:	4b4a      	ldr	r3, [pc, #296]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	4a49      	ldr	r2, [pc, #292]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d2a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003d2e:	6093      	str	r3, [r2, #8]
 8003d30:	4b47      	ldr	r3, [pc, #284]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d32:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d3c:	4944      	ldr	r1, [pc, #272]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0310 	and.w	r3, r3, #16
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d004      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003d54:	4b3f      	ldr	r3, [pc, #252]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003d56:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00a      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003d64:	4b3a      	ldr	r3, [pc, #232]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d6a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d72:	4937      	ldr	r1, [pc, #220]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00a      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d86:	4b32      	ldr	r3, [pc, #200]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d8c:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d94:	492e      	ldr	r1, [pc, #184]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d011      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003da8:	4b29      	ldr	r3, [pc, #164]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dae:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003db6:	4926      	ldr	r1, [pc, #152]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dc2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003dc6:	d101      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00a      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dde:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de6:	491a      	ldr	r1, [pc, #104]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d011      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003dfa:	4b15      	ldr	r3, [pc, #84]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003dfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e00:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e08:	4911      	ldr	r1, [pc, #68]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e18:	d101      	bne.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d005      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e2c:	f040 80ff 	bne.w	800402e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e30:	4b09      	ldr	r3, [pc, #36]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e36:	f7fe facb 	bl	80023d0 <HAL_GetTick>
 8003e3a:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e3c:	e00e      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e3e:	f7fe fac7 	bl	80023d0 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d907      	bls.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e188      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003e50:	40023800 	.word	0x40023800
 8003e54:	424711e0 	.word	0x424711e0
 8003e58:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e5c:	4b7e      	ldr	r3, [pc, #504]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1ea      	bne.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d003      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d009      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d028      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d124      	bne.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003e90:	4b71      	ldr	r3, [pc, #452]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e96:	0c1b      	lsrs	r3, r3, #16
 8003e98:	f003 0303 	and.w	r3, r3, #3
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ea2:	4b6d      	ldr	r3, [pc, #436]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ea8:	0e1b      	lsrs	r3, r3, #24
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	019b      	lsls	r3, r3, #6
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	085b      	lsrs	r3, r3, #1
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	041b      	lsls	r3, r3, #16
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	061b      	lsls	r3, r3, #24
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	071b      	lsls	r3, r3, #28
 8003ed2:	4961      	ldr	r1, [pc, #388]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0304 	and.w	r3, r3, #4
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d004      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003eee:	d00a      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d035      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f04:	d130      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003f06:	4b54      	ldr	r3, [pc, #336]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f0c:	0c1b      	lsrs	r3, r3, #16
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	3301      	adds	r3, #1
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f18:	4b4f      	ldr	r3, [pc, #316]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f1e:	0f1b      	lsrs	r3, r3, #28
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	019b      	lsls	r3, r3, #6
 8003f30:	431a      	orrs	r2, r3
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	085b      	lsrs	r3, r3, #1
 8003f36:	3b01      	subs	r3, #1
 8003f38:	041b      	lsls	r3, r3, #16
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	061b      	lsls	r3, r3, #24
 8003f42:	431a      	orrs	r2, r3
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	071b      	lsls	r3, r3, #28
 8003f48:	4943      	ldr	r1, [pc, #268]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f50:	4b41      	ldr	r3, [pc, #260]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f56:	f023 021f 	bic.w	r2, r3, #31
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	493d      	ldr	r1, [pc, #244]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d029      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f7c:	d124      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003f7e:	4b36      	ldr	r3, [pc, #216]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f84:	0c1b      	lsrs	r3, r3, #16
 8003f86:	f003 0303 	and.w	r3, r3, #3
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f90:	4b31      	ldr	r3, [pc, #196]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f96:	0f1b      	lsrs	r3, r3, #28
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	019b      	lsls	r3, r3, #6
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	085b      	lsrs	r3, r3, #1
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	041b      	lsls	r3, r3, #16
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	061b      	lsls	r3, r3, #24
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	071b      	lsls	r3, r3, #28
 8003fc0:	4925      	ldr	r1, [pc, #148]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d016      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	019b      	lsls	r3, r3, #6
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	085b      	lsrs	r3, r3, #1
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	041b      	lsls	r3, r3, #16
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	061b      	lsls	r3, r3, #24
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	071b      	lsls	r3, r3, #28
 8003ffa:	4917      	ldr	r1, [pc, #92]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004002:	4b16      	ldr	r3, [pc, #88]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004004:	2201      	movs	r2, #1
 8004006:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004008:	f7fe f9e2 	bl	80023d0 <HAL_GetTick>
 800400c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004010:	f7fe f9de 	bl	80023d0 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e09f      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004022:	4b0d      	ldr	r3, [pc, #52]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0f0      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 800402e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004030:	2b01      	cmp	r3, #1
 8004032:	f040 8095 	bne.w	8004160 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004036:	4b0a      	ldr	r3, [pc, #40]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800403c:	f7fe f9c8 	bl	80023d0 <HAL_GetTick>
 8004040:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004042:	e00f      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004044:	f7fe f9c4 	bl	80023d0 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d908      	bls.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e085      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004056:	bf00      	nop
 8004058:	40023800 	.word	0x40023800
 800405c:	42470068 	.word	0x42470068
 8004060:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004064:	4b41      	ldr	r3, [pc, #260]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800406c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004070:	d0e8      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0304 	and.w	r3, r3, #4
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004082:	2b00      	cmp	r3, #0
 8004084:	d009      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800408e:	2b00      	cmp	r3, #0
 8004090:	d02b      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004096:	2b00      	cmp	r3, #0
 8004098:	d127      	bne.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800409a:	4b34      	ldr	r3, [pc, #208]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800409c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a0:	0c1b      	lsrs	r3, r3, #16
 80040a2:	f003 0303 	and.w	r3, r3, #3
 80040a6:	3301      	adds	r3, #1
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	699a      	ldr	r2, [r3, #24]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	019b      	lsls	r3, r3, #6
 80040b6:	431a      	orrs	r2, r3
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	085b      	lsrs	r3, r3, #1
 80040bc:	3b01      	subs	r3, #1
 80040be:	041b      	lsls	r3, r3, #16
 80040c0:	431a      	orrs	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c6:	061b      	lsls	r3, r3, #24
 80040c8:	4928      	ldr	r1, [pc, #160]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80040d0:	4b26      	ldr	r3, [pc, #152]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80040d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040d6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040de:	3b01      	subs	r3, #1
 80040e0:	021b      	lsls	r3, r3, #8
 80040e2:	4922      	ldr	r1, [pc, #136]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d01d      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040fe:	d118      	bne.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004100:	4b1a      	ldr	r3, [pc, #104]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004106:	0e1b      	lsrs	r3, r3, #24
 8004108:	f003 030f 	and.w	r3, r3, #15
 800410c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699a      	ldr	r2, [r3, #24]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	019b      	lsls	r3, r3, #6
 8004118:	431a      	orrs	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	085b      	lsrs	r3, r3, #1
 8004120:	3b01      	subs	r3, #1
 8004122:	041b      	lsls	r3, r3, #16
 8004124:	431a      	orrs	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	061b      	lsls	r3, r3, #24
 800412a:	4910      	ldr	r1, [pc, #64]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004132:	4b0f      	ldr	r3, [pc, #60]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004134:	2201      	movs	r2, #1
 8004136:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004138:	f7fe f94a 	bl	80023d0 <HAL_GetTick>
 800413c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800413e:	e008      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004140:	f7fe f946 	bl	80023d0 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e007      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004152:	4b06      	ldr	r3, [pc, #24]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800415a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800415e:	d1ef      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3730      	adds	r7, #48	@ 0x30
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	40023800 	.word	0x40023800
 8004170:	42470070 	.word	0x42470070

08004174 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004178:	b0ae      	sub	sp, #184	@ 0xb8
 800417a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800417c:	2300      	movs	r3, #0
 800417e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004182:	2300      	movs	r3, #0
 8004184:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004188:	2300      	movs	r3, #0
 800418a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800418e:	2300      	movs	r3, #0
 8004190:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004194:	2300      	movs	r3, #0
 8004196:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800419a:	4bcb      	ldr	r3, [pc, #812]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 030c 	and.w	r3, r3, #12
 80041a2:	2b0c      	cmp	r3, #12
 80041a4:	f200 8206 	bhi.w	80045b4 <HAL_RCC_GetSysClockFreq+0x440>
 80041a8:	a201      	add	r2, pc, #4	@ (adr r2, 80041b0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80041aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ae:	bf00      	nop
 80041b0:	080041e5 	.word	0x080041e5
 80041b4:	080045b5 	.word	0x080045b5
 80041b8:	080045b5 	.word	0x080045b5
 80041bc:	080045b5 	.word	0x080045b5
 80041c0:	080041ed 	.word	0x080041ed
 80041c4:	080045b5 	.word	0x080045b5
 80041c8:	080045b5 	.word	0x080045b5
 80041cc:	080045b5 	.word	0x080045b5
 80041d0:	080041f5 	.word	0x080041f5
 80041d4:	080045b5 	.word	0x080045b5
 80041d8:	080045b5 	.word	0x080045b5
 80041dc:	080045b5 	.word	0x080045b5
 80041e0:	080043e5 	.word	0x080043e5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041e4:	4bb9      	ldr	r3, [pc, #740]	@ (80044cc <HAL_RCC_GetSysClockFreq+0x358>)
 80041e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80041ea:	e1e7      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041ec:	4bb8      	ldr	r3, [pc, #736]	@ (80044d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80041ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80041f2:	e1e3      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041f4:	4bb4      	ldr	r3, [pc, #720]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004200:	4bb1      	ldr	r3, [pc, #708]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d071      	beq.n	80042f0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800420c:	4bae      	ldr	r3, [pc, #696]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	099b      	lsrs	r3, r3, #6
 8004212:	2200      	movs	r2, #0
 8004214:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004218:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800421c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004224:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004228:	2300      	movs	r3, #0
 800422a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800422e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004232:	4622      	mov	r2, r4
 8004234:	462b      	mov	r3, r5
 8004236:	f04f 0000 	mov.w	r0, #0
 800423a:	f04f 0100 	mov.w	r1, #0
 800423e:	0159      	lsls	r1, r3, #5
 8004240:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004244:	0150      	lsls	r0, r2, #5
 8004246:	4602      	mov	r2, r0
 8004248:	460b      	mov	r3, r1
 800424a:	4621      	mov	r1, r4
 800424c:	1a51      	subs	r1, r2, r1
 800424e:	6439      	str	r1, [r7, #64]	@ 0x40
 8004250:	4629      	mov	r1, r5
 8004252:	eb63 0301 	sbc.w	r3, r3, r1
 8004256:	647b      	str	r3, [r7, #68]	@ 0x44
 8004258:	f04f 0200 	mov.w	r2, #0
 800425c:	f04f 0300 	mov.w	r3, #0
 8004260:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004264:	4649      	mov	r1, r9
 8004266:	018b      	lsls	r3, r1, #6
 8004268:	4641      	mov	r1, r8
 800426a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800426e:	4641      	mov	r1, r8
 8004270:	018a      	lsls	r2, r1, #6
 8004272:	4641      	mov	r1, r8
 8004274:	1a51      	subs	r1, r2, r1
 8004276:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004278:	4649      	mov	r1, r9
 800427a:	eb63 0301 	sbc.w	r3, r3, r1
 800427e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	f04f 0300 	mov.w	r3, #0
 8004288:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800428c:	4649      	mov	r1, r9
 800428e:	00cb      	lsls	r3, r1, #3
 8004290:	4641      	mov	r1, r8
 8004292:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004296:	4641      	mov	r1, r8
 8004298:	00ca      	lsls	r2, r1, #3
 800429a:	4610      	mov	r0, r2
 800429c:	4619      	mov	r1, r3
 800429e:	4603      	mov	r3, r0
 80042a0:	4622      	mov	r2, r4
 80042a2:	189b      	adds	r3, r3, r2
 80042a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80042a6:	462b      	mov	r3, r5
 80042a8:	460a      	mov	r2, r1
 80042aa:	eb42 0303 	adc.w	r3, r2, r3
 80042ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80042b0:	f04f 0200 	mov.w	r2, #0
 80042b4:	f04f 0300 	mov.w	r3, #0
 80042b8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80042bc:	4629      	mov	r1, r5
 80042be:	024b      	lsls	r3, r1, #9
 80042c0:	4621      	mov	r1, r4
 80042c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042c6:	4621      	mov	r1, r4
 80042c8:	024a      	lsls	r2, r1, #9
 80042ca:	4610      	mov	r0, r2
 80042cc:	4619      	mov	r1, r3
 80042ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80042d2:	2200      	movs	r2, #0
 80042d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80042d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80042dc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80042e0:	f7fb ffe6 	bl	80002b0 <__aeabi_uldivmod>
 80042e4:	4602      	mov	r2, r0
 80042e6:	460b      	mov	r3, r1
 80042e8:	4613      	mov	r3, r2
 80042ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042ee:	e067      	b.n	80043c0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042f0:	4b75      	ldr	r3, [pc, #468]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	099b      	lsrs	r3, r3, #6
 80042f6:	2200      	movs	r2, #0
 80042f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80042fc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004300:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004308:	67bb      	str	r3, [r7, #120]	@ 0x78
 800430a:	2300      	movs	r3, #0
 800430c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800430e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004312:	4622      	mov	r2, r4
 8004314:	462b      	mov	r3, r5
 8004316:	f04f 0000 	mov.w	r0, #0
 800431a:	f04f 0100 	mov.w	r1, #0
 800431e:	0159      	lsls	r1, r3, #5
 8004320:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004324:	0150      	lsls	r0, r2, #5
 8004326:	4602      	mov	r2, r0
 8004328:	460b      	mov	r3, r1
 800432a:	4621      	mov	r1, r4
 800432c:	1a51      	subs	r1, r2, r1
 800432e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004330:	4629      	mov	r1, r5
 8004332:	eb63 0301 	sbc.w	r3, r3, r1
 8004336:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004338:	f04f 0200 	mov.w	r2, #0
 800433c:	f04f 0300 	mov.w	r3, #0
 8004340:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004344:	4649      	mov	r1, r9
 8004346:	018b      	lsls	r3, r1, #6
 8004348:	4641      	mov	r1, r8
 800434a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800434e:	4641      	mov	r1, r8
 8004350:	018a      	lsls	r2, r1, #6
 8004352:	4641      	mov	r1, r8
 8004354:	ebb2 0a01 	subs.w	sl, r2, r1
 8004358:	4649      	mov	r1, r9
 800435a:	eb63 0b01 	sbc.w	fp, r3, r1
 800435e:	f04f 0200 	mov.w	r2, #0
 8004362:	f04f 0300 	mov.w	r3, #0
 8004366:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800436a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800436e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004372:	4692      	mov	sl, r2
 8004374:	469b      	mov	fp, r3
 8004376:	4623      	mov	r3, r4
 8004378:	eb1a 0303 	adds.w	r3, sl, r3
 800437c:	623b      	str	r3, [r7, #32]
 800437e:	462b      	mov	r3, r5
 8004380:	eb4b 0303 	adc.w	r3, fp, r3
 8004384:	627b      	str	r3, [r7, #36]	@ 0x24
 8004386:	f04f 0200 	mov.w	r2, #0
 800438a:	f04f 0300 	mov.w	r3, #0
 800438e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004392:	4629      	mov	r1, r5
 8004394:	028b      	lsls	r3, r1, #10
 8004396:	4621      	mov	r1, r4
 8004398:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800439c:	4621      	mov	r1, r4
 800439e:	028a      	lsls	r2, r1, #10
 80043a0:	4610      	mov	r0, r2
 80043a2:	4619      	mov	r1, r3
 80043a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80043a8:	2200      	movs	r2, #0
 80043aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80043ac:	677a      	str	r2, [r7, #116]	@ 0x74
 80043ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80043b2:	f7fb ff7d 	bl	80002b0 <__aeabi_uldivmod>
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	4613      	mov	r3, r2
 80043bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80043c0:	4b41      	ldr	r3, [pc, #260]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	0c1b      	lsrs	r3, r3, #16
 80043c6:	f003 0303 	and.w	r3, r3, #3
 80043ca:	3301      	adds	r3, #1
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80043d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80043d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80043da:	fbb2 f3f3 	udiv	r3, r2, r3
 80043de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80043e2:	e0eb      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043e4:	4b38      	ldr	r3, [pc, #224]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043f0:	4b35      	ldr	r3, [pc, #212]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d06b      	beq.n	80044d4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043fc:	4b32      	ldr	r3, [pc, #200]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	099b      	lsrs	r3, r3, #6
 8004402:	2200      	movs	r2, #0
 8004404:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004406:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004408:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800440a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800440e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004410:	2300      	movs	r3, #0
 8004412:	667b      	str	r3, [r7, #100]	@ 0x64
 8004414:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004418:	4622      	mov	r2, r4
 800441a:	462b      	mov	r3, r5
 800441c:	f04f 0000 	mov.w	r0, #0
 8004420:	f04f 0100 	mov.w	r1, #0
 8004424:	0159      	lsls	r1, r3, #5
 8004426:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800442a:	0150      	lsls	r0, r2, #5
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	4621      	mov	r1, r4
 8004432:	1a51      	subs	r1, r2, r1
 8004434:	61b9      	str	r1, [r7, #24]
 8004436:	4629      	mov	r1, r5
 8004438:	eb63 0301 	sbc.w	r3, r3, r1
 800443c:	61fb      	str	r3, [r7, #28]
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	f04f 0300 	mov.w	r3, #0
 8004446:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800444a:	4659      	mov	r1, fp
 800444c:	018b      	lsls	r3, r1, #6
 800444e:	4651      	mov	r1, sl
 8004450:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004454:	4651      	mov	r1, sl
 8004456:	018a      	lsls	r2, r1, #6
 8004458:	4651      	mov	r1, sl
 800445a:	ebb2 0801 	subs.w	r8, r2, r1
 800445e:	4659      	mov	r1, fp
 8004460:	eb63 0901 	sbc.w	r9, r3, r1
 8004464:	f04f 0200 	mov.w	r2, #0
 8004468:	f04f 0300 	mov.w	r3, #0
 800446c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004470:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004474:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004478:	4690      	mov	r8, r2
 800447a:	4699      	mov	r9, r3
 800447c:	4623      	mov	r3, r4
 800447e:	eb18 0303 	adds.w	r3, r8, r3
 8004482:	613b      	str	r3, [r7, #16]
 8004484:	462b      	mov	r3, r5
 8004486:	eb49 0303 	adc.w	r3, r9, r3
 800448a:	617b      	str	r3, [r7, #20]
 800448c:	f04f 0200 	mov.w	r2, #0
 8004490:	f04f 0300 	mov.w	r3, #0
 8004494:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004498:	4629      	mov	r1, r5
 800449a:	024b      	lsls	r3, r1, #9
 800449c:	4621      	mov	r1, r4
 800449e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044a2:	4621      	mov	r1, r4
 80044a4:	024a      	lsls	r2, r1, #9
 80044a6:	4610      	mov	r0, r2
 80044a8:	4619      	mov	r1, r3
 80044aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80044ae:	2200      	movs	r2, #0
 80044b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80044b2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80044b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80044b8:	f7fb fefa 	bl	80002b0 <__aeabi_uldivmod>
 80044bc:	4602      	mov	r2, r0
 80044be:	460b      	mov	r3, r1
 80044c0:	4613      	mov	r3, r2
 80044c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044c6:	e065      	b.n	8004594 <HAL_RCC_GetSysClockFreq+0x420>
 80044c8:	40023800 	.word	0x40023800
 80044cc:	00f42400 	.word	0x00f42400
 80044d0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044d4:	4b3d      	ldr	r3, [pc, #244]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x458>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	099b      	lsrs	r3, r3, #6
 80044da:	2200      	movs	r2, #0
 80044dc:	4618      	mov	r0, r3
 80044de:	4611      	mov	r1, r2
 80044e0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80044e6:	2300      	movs	r3, #0
 80044e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80044ea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80044ee:	4642      	mov	r2, r8
 80044f0:	464b      	mov	r3, r9
 80044f2:	f04f 0000 	mov.w	r0, #0
 80044f6:	f04f 0100 	mov.w	r1, #0
 80044fa:	0159      	lsls	r1, r3, #5
 80044fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004500:	0150      	lsls	r0, r2, #5
 8004502:	4602      	mov	r2, r0
 8004504:	460b      	mov	r3, r1
 8004506:	4641      	mov	r1, r8
 8004508:	1a51      	subs	r1, r2, r1
 800450a:	60b9      	str	r1, [r7, #8]
 800450c:	4649      	mov	r1, r9
 800450e:	eb63 0301 	sbc.w	r3, r3, r1
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	f04f 0200 	mov.w	r2, #0
 8004518:	f04f 0300 	mov.w	r3, #0
 800451c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004520:	4659      	mov	r1, fp
 8004522:	018b      	lsls	r3, r1, #6
 8004524:	4651      	mov	r1, sl
 8004526:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800452a:	4651      	mov	r1, sl
 800452c:	018a      	lsls	r2, r1, #6
 800452e:	4651      	mov	r1, sl
 8004530:	1a54      	subs	r4, r2, r1
 8004532:	4659      	mov	r1, fp
 8004534:	eb63 0501 	sbc.w	r5, r3, r1
 8004538:	f04f 0200 	mov.w	r2, #0
 800453c:	f04f 0300 	mov.w	r3, #0
 8004540:	00eb      	lsls	r3, r5, #3
 8004542:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004546:	00e2      	lsls	r2, r4, #3
 8004548:	4614      	mov	r4, r2
 800454a:	461d      	mov	r5, r3
 800454c:	4643      	mov	r3, r8
 800454e:	18e3      	adds	r3, r4, r3
 8004550:	603b      	str	r3, [r7, #0]
 8004552:	464b      	mov	r3, r9
 8004554:	eb45 0303 	adc.w	r3, r5, r3
 8004558:	607b      	str	r3, [r7, #4]
 800455a:	f04f 0200 	mov.w	r2, #0
 800455e:	f04f 0300 	mov.w	r3, #0
 8004562:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004566:	4629      	mov	r1, r5
 8004568:	028b      	lsls	r3, r1, #10
 800456a:	4621      	mov	r1, r4
 800456c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004570:	4621      	mov	r1, r4
 8004572:	028a      	lsls	r2, r1, #10
 8004574:	4610      	mov	r0, r2
 8004576:	4619      	mov	r1, r3
 8004578:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800457c:	2200      	movs	r2, #0
 800457e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004580:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004582:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004586:	f7fb fe93 	bl	80002b0 <__aeabi_uldivmod>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	4613      	mov	r3, r2
 8004590:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004594:	4b0d      	ldr	r3, [pc, #52]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x458>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	0f1b      	lsrs	r3, r3, #28
 800459a:	f003 0307 	and.w	r3, r3, #7
 800459e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80045a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80045a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80045aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80045b2:	e003      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045b4:	4b06      	ldr	r3, [pc, #24]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80045b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80045ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	37b8      	adds	r7, #184	@ 0xb8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045ca:	bf00      	nop
 80045cc:	40023800 	.word	0x40023800
 80045d0:	00f42400 	.word	0x00f42400

080045d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e28d      	b.n	8004b02 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 8083 	beq.w	80046fa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80045f4:	4b94      	ldr	r3, [pc, #592]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f003 030c 	and.w	r3, r3, #12
 80045fc:	2b04      	cmp	r3, #4
 80045fe:	d019      	beq.n	8004634 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004600:	4b91      	ldr	r3, [pc, #580]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f003 030c 	and.w	r3, r3, #12
        || \
 8004608:	2b08      	cmp	r3, #8
 800460a:	d106      	bne.n	800461a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800460c:	4b8e      	ldr	r3, [pc, #568]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004614:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004618:	d00c      	beq.n	8004634 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800461a:	4b8b      	ldr	r3, [pc, #556]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004622:	2b0c      	cmp	r3, #12
 8004624:	d112      	bne.n	800464c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004626:	4b88      	ldr	r3, [pc, #544]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800462e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004632:	d10b      	bne.n	800464c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004634:	4b84      	ldr	r3, [pc, #528]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d05b      	beq.n	80046f8 <HAL_RCC_OscConfig+0x124>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d157      	bne.n	80046f8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e25a      	b.n	8004b02 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004654:	d106      	bne.n	8004664 <HAL_RCC_OscConfig+0x90>
 8004656:	4b7c      	ldr	r3, [pc, #496]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a7b      	ldr	r2, [pc, #492]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 800465c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004660:	6013      	str	r3, [r2, #0]
 8004662:	e01d      	b.n	80046a0 <HAL_RCC_OscConfig+0xcc>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800466c:	d10c      	bne.n	8004688 <HAL_RCC_OscConfig+0xb4>
 800466e:	4b76      	ldr	r3, [pc, #472]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a75      	ldr	r2, [pc, #468]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 8004674:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	4b73      	ldr	r3, [pc, #460]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a72      	ldr	r2, [pc, #456]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 8004680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004684:	6013      	str	r3, [r2, #0]
 8004686:	e00b      	b.n	80046a0 <HAL_RCC_OscConfig+0xcc>
 8004688:	4b6f      	ldr	r3, [pc, #444]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a6e      	ldr	r2, [pc, #440]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 800468e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004692:	6013      	str	r3, [r2, #0]
 8004694:	4b6c      	ldr	r3, [pc, #432]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a6b      	ldr	r2, [pc, #428]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 800469a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800469e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d013      	beq.n	80046d0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a8:	f7fd fe92 	bl	80023d0 <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046b0:	f7fd fe8e 	bl	80023d0 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b64      	cmp	r3, #100	@ 0x64
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e21f      	b.n	8004b02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046c2:	4b61      	ldr	r3, [pc, #388]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d0f0      	beq.n	80046b0 <HAL_RCC_OscConfig+0xdc>
 80046ce:	e014      	b.n	80046fa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d0:	f7fd fe7e 	bl	80023d0 <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046d8:	f7fd fe7a 	bl	80023d0 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b64      	cmp	r3, #100	@ 0x64
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e20b      	b.n	8004b02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ea:	4b57      	ldr	r3, [pc, #348]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1f0      	bne.n	80046d8 <HAL_RCC_OscConfig+0x104>
 80046f6:	e000      	b.n	80046fa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d06f      	beq.n	80047e6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004706:	4b50      	ldr	r3, [pc, #320]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 030c 	and.w	r3, r3, #12
 800470e:	2b00      	cmp	r3, #0
 8004710:	d017      	beq.n	8004742 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004712:	4b4d      	ldr	r3, [pc, #308]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 030c 	and.w	r3, r3, #12
        || \
 800471a:	2b08      	cmp	r3, #8
 800471c:	d105      	bne.n	800472a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800471e:	4b4a      	ldr	r3, [pc, #296]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00b      	beq.n	8004742 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800472a:	4b47      	ldr	r3, [pc, #284]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004732:	2b0c      	cmp	r3, #12
 8004734:	d11c      	bne.n	8004770 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004736:	4b44      	ldr	r3, [pc, #272]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d116      	bne.n	8004770 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004742:	4b41      	ldr	r3, [pc, #260]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d005      	beq.n	800475a <HAL_RCC_OscConfig+0x186>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d001      	beq.n	800475a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e1d3      	b.n	8004b02 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800475a:	4b3b      	ldr	r3, [pc, #236]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	4937      	ldr	r1, [pc, #220]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 800476a:	4313      	orrs	r3, r2
 800476c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800476e:	e03a      	b.n	80047e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d020      	beq.n	80047ba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004778:	4b34      	ldr	r3, [pc, #208]	@ (800484c <HAL_RCC_OscConfig+0x278>)
 800477a:	2201      	movs	r2, #1
 800477c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800477e:	f7fd fe27 	bl	80023d0 <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004784:	e008      	b.n	8004798 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004786:	f7fd fe23 	bl	80023d0 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e1b4      	b.n	8004b02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004798:	4b2b      	ldr	r3, [pc, #172]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0f0      	beq.n	8004786 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047a4:	4b28      	ldr	r3, [pc, #160]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	00db      	lsls	r3, r3, #3
 80047b2:	4925      	ldr	r1, [pc, #148]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	600b      	str	r3, [r1, #0]
 80047b8:	e015      	b.n	80047e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047ba:	4b24      	ldr	r3, [pc, #144]	@ (800484c <HAL_RCC_OscConfig+0x278>)
 80047bc:	2200      	movs	r2, #0
 80047be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c0:	f7fd fe06 	bl	80023d0 <HAL_GetTick>
 80047c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047c8:	f7fd fe02 	bl	80023d0 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e193      	b.n	8004b02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047da:	4b1b      	ldr	r3, [pc, #108]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1f0      	bne.n	80047c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0308 	and.w	r3, r3, #8
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d036      	beq.n	8004860 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d016      	beq.n	8004828 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047fa:	4b15      	ldr	r3, [pc, #84]	@ (8004850 <HAL_RCC_OscConfig+0x27c>)
 80047fc:	2201      	movs	r2, #1
 80047fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004800:	f7fd fde6 	bl	80023d0 <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004806:	e008      	b.n	800481a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004808:	f7fd fde2 	bl	80023d0 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e173      	b.n	8004b02 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800481a:	4b0b      	ldr	r3, [pc, #44]	@ (8004848 <HAL_RCC_OscConfig+0x274>)
 800481c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d0f0      	beq.n	8004808 <HAL_RCC_OscConfig+0x234>
 8004826:	e01b      	b.n	8004860 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004828:	4b09      	ldr	r3, [pc, #36]	@ (8004850 <HAL_RCC_OscConfig+0x27c>)
 800482a:	2200      	movs	r2, #0
 800482c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800482e:	f7fd fdcf 	bl	80023d0 <HAL_GetTick>
 8004832:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004834:	e00e      	b.n	8004854 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004836:	f7fd fdcb 	bl	80023d0 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d907      	bls.n	8004854 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e15c      	b.n	8004b02 <HAL_RCC_OscConfig+0x52e>
 8004848:	40023800 	.word	0x40023800
 800484c:	42470000 	.word	0x42470000
 8004850:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004854:	4b8a      	ldr	r3, [pc, #552]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 8004856:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1ea      	bne.n	8004836 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0304 	and.w	r3, r3, #4
 8004868:	2b00      	cmp	r3, #0
 800486a:	f000 8097 	beq.w	800499c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800486e:	2300      	movs	r3, #0
 8004870:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004872:	4b83      	ldr	r3, [pc, #524]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 8004874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10f      	bne.n	800489e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800487e:	2300      	movs	r3, #0
 8004880:	60bb      	str	r3, [r7, #8]
 8004882:	4b7f      	ldr	r3, [pc, #508]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 8004884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004886:	4a7e      	ldr	r2, [pc, #504]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 8004888:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800488c:	6413      	str	r3, [r2, #64]	@ 0x40
 800488e:	4b7c      	ldr	r3, [pc, #496]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 8004890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004896:	60bb      	str	r3, [r7, #8]
 8004898:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800489a:	2301      	movs	r3, #1
 800489c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800489e:	4b79      	ldr	r3, [pc, #484]	@ (8004a84 <HAL_RCC_OscConfig+0x4b0>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d118      	bne.n	80048dc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048aa:	4b76      	ldr	r3, [pc, #472]	@ (8004a84 <HAL_RCC_OscConfig+0x4b0>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a75      	ldr	r2, [pc, #468]	@ (8004a84 <HAL_RCC_OscConfig+0x4b0>)
 80048b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048b6:	f7fd fd8b 	bl	80023d0 <HAL_GetTick>
 80048ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048bc:	e008      	b.n	80048d0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048be:	f7fd fd87 	bl	80023d0 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e118      	b.n	8004b02 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d0:	4b6c      	ldr	r3, [pc, #432]	@ (8004a84 <HAL_RCC_OscConfig+0x4b0>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0f0      	beq.n	80048be <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d106      	bne.n	80048f2 <HAL_RCC_OscConfig+0x31e>
 80048e4:	4b66      	ldr	r3, [pc, #408]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 80048e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048e8:	4a65      	ldr	r2, [pc, #404]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 80048ea:	f043 0301 	orr.w	r3, r3, #1
 80048ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80048f0:	e01c      	b.n	800492c <HAL_RCC_OscConfig+0x358>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	2b05      	cmp	r3, #5
 80048f8:	d10c      	bne.n	8004914 <HAL_RCC_OscConfig+0x340>
 80048fa:	4b61      	ldr	r3, [pc, #388]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 80048fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048fe:	4a60      	ldr	r2, [pc, #384]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 8004900:	f043 0304 	orr.w	r3, r3, #4
 8004904:	6713      	str	r3, [r2, #112]	@ 0x70
 8004906:	4b5e      	ldr	r3, [pc, #376]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 8004908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800490a:	4a5d      	ldr	r2, [pc, #372]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 800490c:	f043 0301 	orr.w	r3, r3, #1
 8004910:	6713      	str	r3, [r2, #112]	@ 0x70
 8004912:	e00b      	b.n	800492c <HAL_RCC_OscConfig+0x358>
 8004914:	4b5a      	ldr	r3, [pc, #360]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 8004916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004918:	4a59      	ldr	r2, [pc, #356]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 800491a:	f023 0301 	bic.w	r3, r3, #1
 800491e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004920:	4b57      	ldr	r3, [pc, #348]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 8004922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004924:	4a56      	ldr	r2, [pc, #344]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 8004926:	f023 0304 	bic.w	r3, r3, #4
 800492a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d015      	beq.n	8004960 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004934:	f7fd fd4c 	bl	80023d0 <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800493a:	e00a      	b.n	8004952 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800493c:	f7fd fd48 	bl	80023d0 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800494a:	4293      	cmp	r3, r2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e0d7      	b.n	8004b02 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004952:	4b4b      	ldr	r3, [pc, #300]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 8004954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0ee      	beq.n	800493c <HAL_RCC_OscConfig+0x368>
 800495e:	e014      	b.n	800498a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004960:	f7fd fd36 	bl	80023d0 <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004966:	e00a      	b.n	800497e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004968:	f7fd fd32 	bl	80023d0 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004976:	4293      	cmp	r3, r2
 8004978:	d901      	bls.n	800497e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e0c1      	b.n	8004b02 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800497e:	4b40      	ldr	r3, [pc, #256]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 8004980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1ee      	bne.n	8004968 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800498a:	7dfb      	ldrb	r3, [r7, #23]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d105      	bne.n	800499c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004990:	4b3b      	ldr	r3, [pc, #236]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 8004992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004994:	4a3a      	ldr	r2, [pc, #232]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 8004996:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800499a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 80ad 	beq.w	8004b00 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049a6:	4b36      	ldr	r3, [pc, #216]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f003 030c 	and.w	r3, r3, #12
 80049ae:	2b08      	cmp	r3, #8
 80049b0:	d060      	beq.n	8004a74 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d145      	bne.n	8004a46 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ba:	4b33      	ldr	r3, [pc, #204]	@ (8004a88 <HAL_RCC_OscConfig+0x4b4>)
 80049bc:	2200      	movs	r2, #0
 80049be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c0:	f7fd fd06 	bl	80023d0 <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c8:	f7fd fd02 	bl	80023d0 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e093      	b.n	8004b02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049da:	4b29      	ldr	r3, [pc, #164]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1f0      	bne.n	80049c8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	69da      	ldr	r2, [r3, #28]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f4:	019b      	lsls	r3, r3, #6
 80049f6:	431a      	orrs	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049fc:	085b      	lsrs	r3, r3, #1
 80049fe:	3b01      	subs	r3, #1
 8004a00:	041b      	lsls	r3, r3, #16
 8004a02:	431a      	orrs	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a08:	061b      	lsls	r3, r3, #24
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a10:	071b      	lsls	r3, r3, #28
 8004a12:	491b      	ldr	r1, [pc, #108]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a18:	4b1b      	ldr	r3, [pc, #108]	@ (8004a88 <HAL_RCC_OscConfig+0x4b4>)
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a1e:	f7fd fcd7 	bl	80023d0 <HAL_GetTick>
 8004a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a24:	e008      	b.n	8004a38 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a26:	f7fd fcd3 	bl	80023d0 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d901      	bls.n	8004a38 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e064      	b.n	8004b02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a38:	4b11      	ldr	r3, [pc, #68]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d0f0      	beq.n	8004a26 <HAL_RCC_OscConfig+0x452>
 8004a44:	e05c      	b.n	8004b00 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a46:	4b10      	ldr	r3, [pc, #64]	@ (8004a88 <HAL_RCC_OscConfig+0x4b4>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a4c:	f7fd fcc0 	bl	80023d0 <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a54:	f7fd fcbc 	bl	80023d0 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e04d      	b.n	8004b02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a66:	4b06      	ldr	r3, [pc, #24]	@ (8004a80 <HAL_RCC_OscConfig+0x4ac>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1f0      	bne.n	8004a54 <HAL_RCC_OscConfig+0x480>
 8004a72:	e045      	b.n	8004b00 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d107      	bne.n	8004a8c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e040      	b.n	8004b02 <HAL_RCC_OscConfig+0x52e>
 8004a80:	40023800 	.word	0x40023800
 8004a84:	40007000 	.word	0x40007000
 8004a88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a8c:	4b1f      	ldr	r3, [pc, #124]	@ (8004b0c <HAL_RCC_OscConfig+0x538>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d030      	beq.n	8004afc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d129      	bne.n	8004afc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d122      	bne.n	8004afc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004abc:	4013      	ands	r3, r2
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ac2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d119      	bne.n	8004afc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad2:	085b      	lsrs	r3, r3, #1
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d10f      	bne.n	8004afc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d107      	bne.n	8004afc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d001      	beq.n	8004b00 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e000      	b.n	8004b02 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3718      	adds	r7, #24
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	40023800 	.word	0x40023800

08004b10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e041      	b.n	8004ba6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d106      	bne.n	8004b3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7fd f9fe 	bl	8001f38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3304      	adds	r3, #4
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	4610      	mov	r0, r2
 8004b50:	f000 fc0e 	bl	8005370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
	...

08004bb0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d109      	bne.n	8004bd4 <HAL_TIM_PWM_Start+0x24>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	bf14      	ite	ne
 8004bcc:	2301      	movne	r3, #1
 8004bce:	2300      	moveq	r3, #0
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	e022      	b.n	8004c1a <HAL_TIM_PWM_Start+0x6a>
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	d109      	bne.n	8004bee <HAL_TIM_PWM_Start+0x3e>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	bf14      	ite	ne
 8004be6:	2301      	movne	r3, #1
 8004be8:	2300      	moveq	r3, #0
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	e015      	b.n	8004c1a <HAL_TIM_PWM_Start+0x6a>
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	d109      	bne.n	8004c08 <HAL_TIM_PWM_Start+0x58>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	bf14      	ite	ne
 8004c00:	2301      	movne	r3, #1
 8004c02:	2300      	moveq	r3, #0
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	e008      	b.n	8004c1a <HAL_TIM_PWM_Start+0x6a>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	bf14      	ite	ne
 8004c14:	2301      	movne	r3, #1
 8004c16:	2300      	moveq	r3, #0
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e07c      	b.n	8004d1c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d104      	bne.n	8004c32 <HAL_TIM_PWM_Start+0x82>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c30:	e013      	b.n	8004c5a <HAL_TIM_PWM_Start+0xaa>
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b04      	cmp	r3, #4
 8004c36:	d104      	bne.n	8004c42 <HAL_TIM_PWM_Start+0x92>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c40:	e00b      	b.n	8004c5a <HAL_TIM_PWM_Start+0xaa>
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d104      	bne.n	8004c52 <HAL_TIM_PWM_Start+0xa2>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c50:	e003      	b.n	8004c5a <HAL_TIM_PWM_Start+0xaa>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2202      	movs	r2, #2
 8004c56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	6839      	ldr	r1, [r7, #0]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fdda 	bl	800581c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a2d      	ldr	r2, [pc, #180]	@ (8004d24 <HAL_TIM_PWM_Start+0x174>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d004      	beq.n	8004c7c <HAL_TIM_PWM_Start+0xcc>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a2c      	ldr	r2, [pc, #176]	@ (8004d28 <HAL_TIM_PWM_Start+0x178>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d101      	bne.n	8004c80 <HAL_TIM_PWM_Start+0xd0>
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e000      	b.n	8004c82 <HAL_TIM_PWM_Start+0xd2>
 8004c80:	2300      	movs	r3, #0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d007      	beq.n	8004c96 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c94:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a22      	ldr	r2, [pc, #136]	@ (8004d24 <HAL_TIM_PWM_Start+0x174>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d022      	beq.n	8004ce6 <HAL_TIM_PWM_Start+0x136>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ca8:	d01d      	beq.n	8004ce6 <HAL_TIM_PWM_Start+0x136>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a1f      	ldr	r2, [pc, #124]	@ (8004d2c <HAL_TIM_PWM_Start+0x17c>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d018      	beq.n	8004ce6 <HAL_TIM_PWM_Start+0x136>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8004d30 <HAL_TIM_PWM_Start+0x180>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d013      	beq.n	8004ce6 <HAL_TIM_PWM_Start+0x136>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a1c      	ldr	r2, [pc, #112]	@ (8004d34 <HAL_TIM_PWM_Start+0x184>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d00e      	beq.n	8004ce6 <HAL_TIM_PWM_Start+0x136>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a16      	ldr	r2, [pc, #88]	@ (8004d28 <HAL_TIM_PWM_Start+0x178>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d009      	beq.n	8004ce6 <HAL_TIM_PWM_Start+0x136>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a18      	ldr	r2, [pc, #96]	@ (8004d38 <HAL_TIM_PWM_Start+0x188>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d004      	beq.n	8004ce6 <HAL_TIM_PWM_Start+0x136>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a16      	ldr	r2, [pc, #88]	@ (8004d3c <HAL_TIM_PWM_Start+0x18c>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d111      	bne.n	8004d0a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2b06      	cmp	r3, #6
 8004cf6:	d010      	beq.n	8004d1a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0201 	orr.w	r2, r2, #1
 8004d06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d08:	e007      	b.n	8004d1a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f042 0201 	orr.w	r2, r2, #1
 8004d18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	40010000 	.word	0x40010000
 8004d28:	40010400 	.word	0x40010400
 8004d2c:	40000400 	.word	0x40000400
 8004d30:	40000800 	.word	0x40000800
 8004d34:	40000c00 	.word	0x40000c00
 8004d38:	40014000 	.word	0x40014000
 8004d3c:	40001800 	.word	0x40001800

08004d40 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e097      	b.n	8004e84 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d106      	bne.n	8004d6e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7fd f907 	bl	8001f7c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2202      	movs	r2, #2
 8004d72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	6812      	ldr	r2, [r2, #0]
 8004d80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d84:	f023 0307 	bic.w	r3, r3, #7
 8004d88:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	3304      	adds	r3, #4
 8004d92:	4619      	mov	r1, r3
 8004d94:	4610      	mov	r0, r2
 8004d96:	f000 faeb 	bl	8005370 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dc2:	f023 0303 	bic.w	r3, r3, #3
 8004dc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	021b      	lsls	r3, r3, #8
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004de0:	f023 030c 	bic.w	r3, r3, #12
 8004de4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004dec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004df0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	68da      	ldr	r2, [r3, #12]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	69db      	ldr	r3, [r3, #28]
 8004dfa:	021b      	lsls	r3, r3, #8
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	011a      	lsls	r2, r3, #4
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	031b      	lsls	r3, r3, #12
 8004e10:	4313      	orrs	r3, r2
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004e1e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004e26:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	011b      	lsls	r3, r3, #4
 8004e32:	4313      	orrs	r3, r2
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3718      	adds	r7, #24
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e9c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004ea4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004eac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004eb4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d110      	bne.n	8004ede <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ebc:	7bfb      	ldrb	r3, [r7, #15]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d102      	bne.n	8004ec8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ec2:	7b7b      	ldrb	r3, [r7, #13]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d001      	beq.n	8004ecc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e069      	b.n	8004fa0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004edc:	e031      	b.n	8004f42 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b04      	cmp	r3, #4
 8004ee2:	d110      	bne.n	8004f06 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ee4:	7bbb      	ldrb	r3, [r7, #14]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d102      	bne.n	8004ef0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004eea:	7b3b      	ldrb	r3, [r7, #12]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d001      	beq.n	8004ef4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e055      	b.n	8004fa0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f04:	e01d      	b.n	8004f42 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f06:	7bfb      	ldrb	r3, [r7, #15]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d108      	bne.n	8004f1e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f0c:	7bbb      	ldrb	r3, [r7, #14]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d105      	bne.n	8004f1e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f12:	7b7b      	ldrb	r3, [r7, #13]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d102      	bne.n	8004f1e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f18:	7b3b      	ldrb	r3, [r7, #12]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d001      	beq.n	8004f22 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e03e      	b.n	8004fa0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2202      	movs	r2, #2
 8004f26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2202      	movs	r2, #2
 8004f36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d003      	beq.n	8004f50 <HAL_TIM_Encoder_Start+0xc4>
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d008      	beq.n	8004f60 <HAL_TIM_Encoder_Start+0xd4>
 8004f4e:	e00f      	b.n	8004f70 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2201      	movs	r2, #1
 8004f56:	2100      	movs	r1, #0
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f000 fc5f 	bl	800581c <TIM_CCxChannelCmd>
      break;
 8004f5e:	e016      	b.n	8004f8e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2201      	movs	r2, #1
 8004f66:	2104      	movs	r1, #4
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f000 fc57 	bl	800581c <TIM_CCxChannelCmd>
      break;
 8004f6e:	e00e      	b.n	8004f8e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2201      	movs	r2, #1
 8004f76:	2100      	movs	r1, #0
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f000 fc4f 	bl	800581c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2201      	movs	r2, #1
 8004f84:	2104      	movs	r1, #4
 8004f86:	4618      	mov	r0, r3
 8004f88:	f000 fc48 	bl	800581c <TIM_CCxChannelCmd>
      break;
 8004f8c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f042 0201 	orr.w	r2, r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d020      	beq.n	800500c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d01b      	beq.n	800500c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f06f 0202 	mvn.w	r2, #2
 8004fdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	f003 0303 	and.w	r3, r3, #3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f99e 	bl	8005334 <HAL_TIM_IC_CaptureCallback>
 8004ff8:	e005      	b.n	8005006 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f990 	bl	8005320 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f9a1 	bl	8005348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	f003 0304 	and.w	r3, r3, #4
 8005012:	2b00      	cmp	r3, #0
 8005014:	d020      	beq.n	8005058 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f003 0304 	and.w	r3, r3, #4
 800501c:	2b00      	cmp	r3, #0
 800501e:	d01b      	beq.n	8005058 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f06f 0204 	mvn.w	r2, #4
 8005028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2202      	movs	r2, #2
 800502e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f978 	bl	8005334 <HAL_TIM_IC_CaptureCallback>
 8005044:	e005      	b.n	8005052 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f96a 	bl	8005320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 f97b 	bl	8005348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	f003 0308 	and.w	r3, r3, #8
 800505e:	2b00      	cmp	r3, #0
 8005060:	d020      	beq.n	80050a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f003 0308 	and.w	r3, r3, #8
 8005068:	2b00      	cmp	r3, #0
 800506a:	d01b      	beq.n	80050a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f06f 0208 	mvn.w	r2, #8
 8005074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2204      	movs	r2, #4
 800507a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	f003 0303 	and.w	r3, r3, #3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f952 	bl	8005334 <HAL_TIM_IC_CaptureCallback>
 8005090:	e005      	b.n	800509e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f944 	bl	8005320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 f955 	bl	8005348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	f003 0310 	and.w	r3, r3, #16
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d020      	beq.n	80050f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f003 0310 	and.w	r3, r3, #16
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d01b      	beq.n	80050f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f06f 0210 	mvn.w	r2, #16
 80050c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2208      	movs	r2, #8
 80050c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f92c 	bl	8005334 <HAL_TIM_IC_CaptureCallback>
 80050dc:	e005      	b.n	80050ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f91e 	bl	8005320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f92f 	bl	8005348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00c      	beq.n	8005114 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	2b00      	cmp	r3, #0
 8005102:	d007      	beq.n	8005114 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f06f 0201 	mvn.w	r2, #1
 800510c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f8fc 	bl	800530c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00c      	beq.n	8005138 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005124:	2b00      	cmp	r3, #0
 8005126:	d007      	beq.n	8005138 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 fc70 	bl	8005a18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00c      	beq.n	800515c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005148:	2b00      	cmp	r3, #0
 800514a:	d007      	beq.n	800515c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f900 	bl	800535c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	f003 0320 	and.w	r3, r3, #32
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00c      	beq.n	8005180 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f003 0320 	and.w	r3, r3, #32
 800516c:	2b00      	cmp	r3, #0
 800516e:	d007      	beq.n	8005180 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f06f 0220 	mvn.w	r2, #32
 8005178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 fc42 	bl	8005a04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005180:	bf00      	nop
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005194:	2300      	movs	r3, #0
 8005196:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d101      	bne.n	80051a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051a2:	2302      	movs	r3, #2
 80051a4:	e0ae      	b.n	8005304 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b0c      	cmp	r3, #12
 80051b2:	f200 809f 	bhi.w	80052f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80051b6:	a201      	add	r2, pc, #4	@ (adr r2, 80051bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051bc:	080051f1 	.word	0x080051f1
 80051c0:	080052f5 	.word	0x080052f5
 80051c4:	080052f5 	.word	0x080052f5
 80051c8:	080052f5 	.word	0x080052f5
 80051cc:	08005231 	.word	0x08005231
 80051d0:	080052f5 	.word	0x080052f5
 80051d4:	080052f5 	.word	0x080052f5
 80051d8:	080052f5 	.word	0x080052f5
 80051dc:	08005273 	.word	0x08005273
 80051e0:	080052f5 	.word	0x080052f5
 80051e4:	080052f5 	.word	0x080052f5
 80051e8:	080052f5 	.word	0x080052f5
 80051ec:	080052b3 	.word	0x080052b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68b9      	ldr	r1, [r7, #8]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 f960 	bl	80054bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	699a      	ldr	r2, [r3, #24]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f042 0208 	orr.w	r2, r2, #8
 800520a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699a      	ldr	r2, [r3, #24]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 0204 	bic.w	r2, r2, #4
 800521a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6999      	ldr	r1, [r3, #24]
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	691a      	ldr	r2, [r3, #16]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	430a      	orrs	r2, r1
 800522c:	619a      	str	r2, [r3, #24]
      break;
 800522e:	e064      	b.n	80052fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68b9      	ldr	r1, [r7, #8]
 8005236:	4618      	mov	r0, r3
 8005238:	f000 f9b0 	bl	800559c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	699a      	ldr	r2, [r3, #24]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800524a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699a      	ldr	r2, [r3, #24]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800525a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6999      	ldr	r1, [r3, #24]
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	021a      	lsls	r2, r3, #8
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	430a      	orrs	r2, r1
 800526e:	619a      	str	r2, [r3, #24]
      break;
 8005270:	e043      	b.n	80052fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68b9      	ldr	r1, [r7, #8]
 8005278:	4618      	mov	r0, r3
 800527a:	f000 fa05 	bl	8005688 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	69da      	ldr	r2, [r3, #28]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f042 0208 	orr.w	r2, r2, #8
 800528c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	69da      	ldr	r2, [r3, #28]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 0204 	bic.w	r2, r2, #4
 800529c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	69d9      	ldr	r1, [r3, #28]
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	691a      	ldr	r2, [r3, #16]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	430a      	orrs	r2, r1
 80052ae:	61da      	str	r2, [r3, #28]
      break;
 80052b0:	e023      	b.n	80052fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68b9      	ldr	r1, [r7, #8]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 fa59 	bl	8005770 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	69da      	ldr	r2, [r3, #28]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	69da      	ldr	r2, [r3, #28]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	69d9      	ldr	r1, [r3, #28]
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	021a      	lsls	r2, r3, #8
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	61da      	str	r2, [r3, #28]
      break;
 80052f2:	e002      	b.n	80052fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	75fb      	strb	r3, [r7, #23]
      break;
 80052f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005302:	7dfb      	ldrb	r3, [r7, #23]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3718      	adds	r7, #24
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a43      	ldr	r2, [pc, #268]	@ (8005490 <TIM_Base_SetConfig+0x120>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d013      	beq.n	80053b0 <TIM_Base_SetConfig+0x40>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800538e:	d00f      	beq.n	80053b0 <TIM_Base_SetConfig+0x40>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a40      	ldr	r2, [pc, #256]	@ (8005494 <TIM_Base_SetConfig+0x124>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d00b      	beq.n	80053b0 <TIM_Base_SetConfig+0x40>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a3f      	ldr	r2, [pc, #252]	@ (8005498 <TIM_Base_SetConfig+0x128>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d007      	beq.n	80053b0 <TIM_Base_SetConfig+0x40>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a3e      	ldr	r2, [pc, #248]	@ (800549c <TIM_Base_SetConfig+0x12c>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d003      	beq.n	80053b0 <TIM_Base_SetConfig+0x40>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a3d      	ldr	r2, [pc, #244]	@ (80054a0 <TIM_Base_SetConfig+0x130>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d108      	bne.n	80053c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a32      	ldr	r2, [pc, #200]	@ (8005490 <TIM_Base_SetConfig+0x120>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d02b      	beq.n	8005422 <TIM_Base_SetConfig+0xb2>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053d0:	d027      	beq.n	8005422 <TIM_Base_SetConfig+0xb2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a2f      	ldr	r2, [pc, #188]	@ (8005494 <TIM_Base_SetConfig+0x124>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d023      	beq.n	8005422 <TIM_Base_SetConfig+0xb2>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a2e      	ldr	r2, [pc, #184]	@ (8005498 <TIM_Base_SetConfig+0x128>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d01f      	beq.n	8005422 <TIM_Base_SetConfig+0xb2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a2d      	ldr	r2, [pc, #180]	@ (800549c <TIM_Base_SetConfig+0x12c>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d01b      	beq.n	8005422 <TIM_Base_SetConfig+0xb2>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a2c      	ldr	r2, [pc, #176]	@ (80054a0 <TIM_Base_SetConfig+0x130>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d017      	beq.n	8005422 <TIM_Base_SetConfig+0xb2>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a2b      	ldr	r2, [pc, #172]	@ (80054a4 <TIM_Base_SetConfig+0x134>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d013      	beq.n	8005422 <TIM_Base_SetConfig+0xb2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a2a      	ldr	r2, [pc, #168]	@ (80054a8 <TIM_Base_SetConfig+0x138>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d00f      	beq.n	8005422 <TIM_Base_SetConfig+0xb2>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a29      	ldr	r2, [pc, #164]	@ (80054ac <TIM_Base_SetConfig+0x13c>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d00b      	beq.n	8005422 <TIM_Base_SetConfig+0xb2>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a28      	ldr	r2, [pc, #160]	@ (80054b0 <TIM_Base_SetConfig+0x140>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d007      	beq.n	8005422 <TIM_Base_SetConfig+0xb2>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a27      	ldr	r2, [pc, #156]	@ (80054b4 <TIM_Base_SetConfig+0x144>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d003      	beq.n	8005422 <TIM_Base_SetConfig+0xb2>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a26      	ldr	r2, [pc, #152]	@ (80054b8 <TIM_Base_SetConfig+0x148>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d108      	bne.n	8005434 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	4313      	orrs	r3, r2
 8005432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	4313      	orrs	r3, r2
 8005440:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	689a      	ldr	r2, [r3, #8]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a0e      	ldr	r2, [pc, #56]	@ (8005490 <TIM_Base_SetConfig+0x120>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d003      	beq.n	8005462 <TIM_Base_SetConfig+0xf2>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a10      	ldr	r2, [pc, #64]	@ (80054a0 <TIM_Base_SetConfig+0x130>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d103      	bne.n	800546a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	691a      	ldr	r2, [r3, #16]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f043 0204 	orr.w	r2, r3, #4
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	601a      	str	r2, [r3, #0]
}
 8005482:	bf00      	nop
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	40010000 	.word	0x40010000
 8005494:	40000400 	.word	0x40000400
 8005498:	40000800 	.word	0x40000800
 800549c:	40000c00 	.word	0x40000c00
 80054a0:	40010400 	.word	0x40010400
 80054a4:	40014000 	.word	0x40014000
 80054a8:	40014400 	.word	0x40014400
 80054ac:	40014800 	.word	0x40014800
 80054b0:	40001800 	.word	0x40001800
 80054b4:	40001c00 	.word	0x40001c00
 80054b8:	40002000 	.word	0x40002000

080054bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054bc:	b480      	push	{r7}
 80054be:	b087      	sub	sp, #28
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	f023 0201 	bic.w	r2, r3, #1
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 0303 	bic.w	r3, r3, #3
 80054f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f023 0302 	bic.w	r3, r3, #2
 8005504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	4313      	orrs	r3, r2
 800550e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a20      	ldr	r2, [pc, #128]	@ (8005594 <TIM_OC1_SetConfig+0xd8>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d003      	beq.n	8005520 <TIM_OC1_SetConfig+0x64>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a1f      	ldr	r2, [pc, #124]	@ (8005598 <TIM_OC1_SetConfig+0xdc>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d10c      	bne.n	800553a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f023 0308 	bic.w	r3, r3, #8
 8005526:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	4313      	orrs	r3, r2
 8005530:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f023 0304 	bic.w	r3, r3, #4
 8005538:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a15      	ldr	r2, [pc, #84]	@ (8005594 <TIM_OC1_SetConfig+0xd8>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d003      	beq.n	800554a <TIM_OC1_SetConfig+0x8e>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a14      	ldr	r2, [pc, #80]	@ (8005598 <TIM_OC1_SetConfig+0xdc>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d111      	bne.n	800556e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005550:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005558:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	4313      	orrs	r3, r2
 8005562:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	4313      	orrs	r3, r2
 800556c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	621a      	str	r2, [r3, #32]
}
 8005588:	bf00      	nop
 800558a:	371c      	adds	r7, #28
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	40010000 	.word	0x40010000
 8005598:	40010400 	.word	0x40010400

0800559c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800559c:	b480      	push	{r7}
 800559e:	b087      	sub	sp, #28
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a1b      	ldr	r3, [r3, #32]
 80055b0:	f023 0210 	bic.w	r2, r3, #16
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	021b      	lsls	r3, r3, #8
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	4313      	orrs	r3, r2
 80055de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	f023 0320 	bic.w	r3, r3, #32
 80055e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	011b      	lsls	r3, r3, #4
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a22      	ldr	r2, [pc, #136]	@ (8005680 <TIM_OC2_SetConfig+0xe4>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d003      	beq.n	8005604 <TIM_OC2_SetConfig+0x68>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a21      	ldr	r2, [pc, #132]	@ (8005684 <TIM_OC2_SetConfig+0xe8>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d10d      	bne.n	8005620 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800560a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	011b      	lsls	r3, r3, #4
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	4313      	orrs	r3, r2
 8005616:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800561e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a17      	ldr	r2, [pc, #92]	@ (8005680 <TIM_OC2_SetConfig+0xe4>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d003      	beq.n	8005630 <TIM_OC2_SetConfig+0x94>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a16      	ldr	r2, [pc, #88]	@ (8005684 <TIM_OC2_SetConfig+0xe8>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d113      	bne.n	8005658 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005636:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800563e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	4313      	orrs	r3, r2
 800564a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	4313      	orrs	r3, r2
 8005656:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	621a      	str	r2, [r3, #32]
}
 8005672:	bf00      	nop
 8005674:	371c      	adds	r7, #28
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	40010000 	.word	0x40010000
 8005684:	40010400 	.word	0x40010400

08005688 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005688:	b480      	push	{r7}
 800568a:	b087      	sub	sp, #28
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a1b      	ldr	r3, [r3, #32]
 800569c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f023 0303 	bic.w	r3, r3, #3
 80056be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	021b      	lsls	r3, r3, #8
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	4313      	orrs	r3, r2
 80056dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a21      	ldr	r2, [pc, #132]	@ (8005768 <TIM_OC3_SetConfig+0xe0>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d003      	beq.n	80056ee <TIM_OC3_SetConfig+0x66>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a20      	ldr	r2, [pc, #128]	@ (800576c <TIM_OC3_SetConfig+0xe4>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d10d      	bne.n	800570a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	021b      	lsls	r3, r3, #8
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	4313      	orrs	r3, r2
 8005700:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005708:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a16      	ldr	r2, [pc, #88]	@ (8005768 <TIM_OC3_SetConfig+0xe0>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d003      	beq.n	800571a <TIM_OC3_SetConfig+0x92>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a15      	ldr	r2, [pc, #84]	@ (800576c <TIM_OC3_SetConfig+0xe4>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d113      	bne.n	8005742 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005720:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005728:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	011b      	lsls	r3, r3, #4
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	4313      	orrs	r3, r2
 8005734:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	011b      	lsls	r3, r3, #4
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	4313      	orrs	r3, r2
 8005740:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	685a      	ldr	r2, [r3, #4]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	621a      	str	r2, [r3, #32]
}
 800575c:	bf00      	nop
 800575e:	371c      	adds	r7, #28
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr
 8005768:	40010000 	.word	0x40010000
 800576c:	40010400 	.word	0x40010400

08005770 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005770:	b480      	push	{r7}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800579e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	021b      	lsls	r3, r3, #8
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80057ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	031b      	lsls	r3, r3, #12
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a12      	ldr	r2, [pc, #72]	@ (8005814 <TIM_OC4_SetConfig+0xa4>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d003      	beq.n	80057d8 <TIM_OC4_SetConfig+0x68>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a11      	ldr	r2, [pc, #68]	@ (8005818 <TIM_OC4_SetConfig+0xa8>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d109      	bne.n	80057ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	019b      	lsls	r3, r3, #6
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	621a      	str	r2, [r3, #32]
}
 8005806:	bf00      	nop
 8005808:	371c      	adds	r7, #28
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	40010000 	.word	0x40010000
 8005818:	40010400 	.word	0x40010400

0800581c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800581c:	b480      	push	{r7}
 800581e:	b087      	sub	sp, #28
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	f003 031f 	and.w	r3, r3, #31
 800582e:	2201      	movs	r2, #1
 8005830:	fa02 f303 	lsl.w	r3, r2, r3
 8005834:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6a1a      	ldr	r2, [r3, #32]
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	43db      	mvns	r3, r3
 800583e:	401a      	ands	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6a1a      	ldr	r2, [r3, #32]
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	f003 031f 	and.w	r3, r3, #31
 800584e:	6879      	ldr	r1, [r7, #4]
 8005850:	fa01 f303 	lsl.w	r3, r1, r3
 8005854:	431a      	orrs	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	621a      	str	r2, [r3, #32]
}
 800585a:	bf00      	nop
 800585c:	371c      	adds	r7, #28
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
	...

08005868 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005878:	2b01      	cmp	r3, #1
 800587a:	d101      	bne.n	8005880 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800587c:	2302      	movs	r3, #2
 800587e:	e05a      	b.n	8005936 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2202      	movs	r2, #2
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a21      	ldr	r2, [pc, #132]	@ (8005944 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d022      	beq.n	800590a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058cc:	d01d      	beq.n	800590a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a1d      	ldr	r2, [pc, #116]	@ (8005948 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d018      	beq.n	800590a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a1b      	ldr	r2, [pc, #108]	@ (800594c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d013      	beq.n	800590a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a1a      	ldr	r2, [pc, #104]	@ (8005950 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d00e      	beq.n	800590a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a18      	ldr	r2, [pc, #96]	@ (8005954 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d009      	beq.n	800590a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a17      	ldr	r2, [pc, #92]	@ (8005958 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d004      	beq.n	800590a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a15      	ldr	r2, [pc, #84]	@ (800595c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d10c      	bne.n	8005924 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005910:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	4313      	orrs	r3, r2
 800591a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	40010000 	.word	0x40010000
 8005948:	40000400 	.word	0x40000400
 800594c:	40000800 	.word	0x40000800
 8005950:	40000c00 	.word	0x40000c00
 8005954:	40010400 	.word	0x40010400
 8005958:	40014000 	.word	0x40014000
 800595c:	40001800 	.word	0x40001800

08005960 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005974:	2b01      	cmp	r3, #1
 8005976:	d101      	bne.n	800597c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005978:	2302      	movs	r3, #2
 800597a:	e03d      	b.n	80059f8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	4313      	orrs	r3, r2
 8005990:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	4313      	orrs	r3, r2
 800599e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e042      	b.n	8005ac4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d106      	bne.n	8005a58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7fc fb46 	bl	80020e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2224      	movs	r2, #36	@ 0x24
 8005a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68da      	ldr	r2, [r3, #12]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 f82b 	bl	8005acc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	691a      	ldr	r2, [r3, #16]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	695a      	ldr	r2, [r3, #20]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68da      	ldr	r2, [r3, #12]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005aa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3708      	adds	r7, #8
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ad0:	b0c0      	sub	sp, #256	@ 0x100
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae8:	68d9      	ldr	r1, [r3, #12]
 8005aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	ea40 0301 	orr.w	r3, r0, r1
 8005af4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005afa:	689a      	ldr	r2, [r3, #8]
 8005afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	431a      	orrs	r2, r3
 8005b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005b24:	f021 010c 	bic.w	r1, r1, #12
 8005b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005b32:	430b      	orrs	r3, r1
 8005b34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b46:	6999      	ldr	r1, [r3, #24]
 8005b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	ea40 0301 	orr.w	r3, r0, r1
 8005b52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	4b8f      	ldr	r3, [pc, #572]	@ (8005d98 <UART_SetConfig+0x2cc>)
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d005      	beq.n	8005b6c <UART_SetConfig+0xa0>
 8005b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	4b8d      	ldr	r3, [pc, #564]	@ (8005d9c <UART_SetConfig+0x2d0>)
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d104      	bne.n	8005b76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b6c:	f7fd ffc4 	bl	8003af8 <HAL_RCC_GetPCLK2Freq>
 8005b70:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005b74:	e003      	b.n	8005b7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b76:	f7fd ffab 	bl	8003ad0 <HAL_RCC_GetPCLK1Freq>
 8005b7a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b82:	69db      	ldr	r3, [r3, #28]
 8005b84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b88:	f040 810c 	bne.w	8005da4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b90:	2200      	movs	r2, #0
 8005b92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b96:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005b9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005b9e:	4622      	mov	r2, r4
 8005ba0:	462b      	mov	r3, r5
 8005ba2:	1891      	adds	r1, r2, r2
 8005ba4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005ba6:	415b      	adcs	r3, r3
 8005ba8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005baa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005bae:	4621      	mov	r1, r4
 8005bb0:	eb12 0801 	adds.w	r8, r2, r1
 8005bb4:	4629      	mov	r1, r5
 8005bb6:	eb43 0901 	adc.w	r9, r3, r1
 8005bba:	f04f 0200 	mov.w	r2, #0
 8005bbe:	f04f 0300 	mov.w	r3, #0
 8005bc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bce:	4690      	mov	r8, r2
 8005bd0:	4699      	mov	r9, r3
 8005bd2:	4623      	mov	r3, r4
 8005bd4:	eb18 0303 	adds.w	r3, r8, r3
 8005bd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005bdc:	462b      	mov	r3, r5
 8005bde:	eb49 0303 	adc.w	r3, r9, r3
 8005be2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005bf2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005bf6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	18db      	adds	r3, r3, r3
 8005bfe:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c00:	4613      	mov	r3, r2
 8005c02:	eb42 0303 	adc.w	r3, r2, r3
 8005c06:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005c0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005c10:	f7fa fb4e 	bl	80002b0 <__aeabi_uldivmod>
 8005c14:	4602      	mov	r2, r0
 8005c16:	460b      	mov	r3, r1
 8005c18:	4b61      	ldr	r3, [pc, #388]	@ (8005da0 <UART_SetConfig+0x2d4>)
 8005c1a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c1e:	095b      	lsrs	r3, r3, #5
 8005c20:	011c      	lsls	r4, r3, #4
 8005c22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c26:	2200      	movs	r2, #0
 8005c28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c2c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005c30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005c34:	4642      	mov	r2, r8
 8005c36:	464b      	mov	r3, r9
 8005c38:	1891      	adds	r1, r2, r2
 8005c3a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005c3c:	415b      	adcs	r3, r3
 8005c3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005c44:	4641      	mov	r1, r8
 8005c46:	eb12 0a01 	adds.w	sl, r2, r1
 8005c4a:	4649      	mov	r1, r9
 8005c4c:	eb43 0b01 	adc.w	fp, r3, r1
 8005c50:	f04f 0200 	mov.w	r2, #0
 8005c54:	f04f 0300 	mov.w	r3, #0
 8005c58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c64:	4692      	mov	sl, r2
 8005c66:	469b      	mov	fp, r3
 8005c68:	4643      	mov	r3, r8
 8005c6a:	eb1a 0303 	adds.w	r3, sl, r3
 8005c6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c72:	464b      	mov	r3, r9
 8005c74:	eb4b 0303 	adc.w	r3, fp, r3
 8005c78:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c88:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005c8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005c90:	460b      	mov	r3, r1
 8005c92:	18db      	adds	r3, r3, r3
 8005c94:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c96:	4613      	mov	r3, r2
 8005c98:	eb42 0303 	adc.w	r3, r2, r3
 8005c9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005ca2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005ca6:	f7fa fb03 	bl	80002b0 <__aeabi_uldivmod>
 8005caa:	4602      	mov	r2, r0
 8005cac:	460b      	mov	r3, r1
 8005cae:	4611      	mov	r1, r2
 8005cb0:	4b3b      	ldr	r3, [pc, #236]	@ (8005da0 <UART_SetConfig+0x2d4>)
 8005cb2:	fba3 2301 	umull	r2, r3, r3, r1
 8005cb6:	095b      	lsrs	r3, r3, #5
 8005cb8:	2264      	movs	r2, #100	@ 0x64
 8005cba:	fb02 f303 	mul.w	r3, r2, r3
 8005cbe:	1acb      	subs	r3, r1, r3
 8005cc0:	00db      	lsls	r3, r3, #3
 8005cc2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005cc6:	4b36      	ldr	r3, [pc, #216]	@ (8005da0 <UART_SetConfig+0x2d4>)
 8005cc8:	fba3 2302 	umull	r2, r3, r3, r2
 8005ccc:	095b      	lsrs	r3, r3, #5
 8005cce:	005b      	lsls	r3, r3, #1
 8005cd0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005cd4:	441c      	add	r4, r3
 8005cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ce0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005ce4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005ce8:	4642      	mov	r2, r8
 8005cea:	464b      	mov	r3, r9
 8005cec:	1891      	adds	r1, r2, r2
 8005cee:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005cf0:	415b      	adcs	r3, r3
 8005cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cf4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005cf8:	4641      	mov	r1, r8
 8005cfa:	1851      	adds	r1, r2, r1
 8005cfc:	6339      	str	r1, [r7, #48]	@ 0x30
 8005cfe:	4649      	mov	r1, r9
 8005d00:	414b      	adcs	r3, r1
 8005d02:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d04:	f04f 0200 	mov.w	r2, #0
 8005d08:	f04f 0300 	mov.w	r3, #0
 8005d0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005d10:	4659      	mov	r1, fp
 8005d12:	00cb      	lsls	r3, r1, #3
 8005d14:	4651      	mov	r1, sl
 8005d16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d1a:	4651      	mov	r1, sl
 8005d1c:	00ca      	lsls	r2, r1, #3
 8005d1e:	4610      	mov	r0, r2
 8005d20:	4619      	mov	r1, r3
 8005d22:	4603      	mov	r3, r0
 8005d24:	4642      	mov	r2, r8
 8005d26:	189b      	adds	r3, r3, r2
 8005d28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d2c:	464b      	mov	r3, r9
 8005d2e:	460a      	mov	r2, r1
 8005d30:	eb42 0303 	adc.w	r3, r2, r3
 8005d34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005d44:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005d48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	18db      	adds	r3, r3, r3
 8005d50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d52:	4613      	mov	r3, r2
 8005d54:	eb42 0303 	adc.w	r3, r2, r3
 8005d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005d5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005d62:	f7fa faa5 	bl	80002b0 <__aeabi_uldivmod>
 8005d66:	4602      	mov	r2, r0
 8005d68:	460b      	mov	r3, r1
 8005d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005da0 <UART_SetConfig+0x2d4>)
 8005d6c:	fba3 1302 	umull	r1, r3, r3, r2
 8005d70:	095b      	lsrs	r3, r3, #5
 8005d72:	2164      	movs	r1, #100	@ 0x64
 8005d74:	fb01 f303 	mul.w	r3, r1, r3
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	00db      	lsls	r3, r3, #3
 8005d7c:	3332      	adds	r3, #50	@ 0x32
 8005d7e:	4a08      	ldr	r2, [pc, #32]	@ (8005da0 <UART_SetConfig+0x2d4>)
 8005d80:	fba2 2303 	umull	r2, r3, r2, r3
 8005d84:	095b      	lsrs	r3, r3, #5
 8005d86:	f003 0207 	and.w	r2, r3, #7
 8005d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4422      	add	r2, r4
 8005d92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d94:	e106      	b.n	8005fa4 <UART_SetConfig+0x4d8>
 8005d96:	bf00      	nop
 8005d98:	40011000 	.word	0x40011000
 8005d9c:	40011400 	.word	0x40011400
 8005da0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005da4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005da8:	2200      	movs	r2, #0
 8005daa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005dae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005db2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005db6:	4642      	mov	r2, r8
 8005db8:	464b      	mov	r3, r9
 8005dba:	1891      	adds	r1, r2, r2
 8005dbc:	6239      	str	r1, [r7, #32]
 8005dbe:	415b      	adcs	r3, r3
 8005dc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005dc6:	4641      	mov	r1, r8
 8005dc8:	1854      	adds	r4, r2, r1
 8005dca:	4649      	mov	r1, r9
 8005dcc:	eb43 0501 	adc.w	r5, r3, r1
 8005dd0:	f04f 0200 	mov.w	r2, #0
 8005dd4:	f04f 0300 	mov.w	r3, #0
 8005dd8:	00eb      	lsls	r3, r5, #3
 8005dda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005dde:	00e2      	lsls	r2, r4, #3
 8005de0:	4614      	mov	r4, r2
 8005de2:	461d      	mov	r5, r3
 8005de4:	4643      	mov	r3, r8
 8005de6:	18e3      	adds	r3, r4, r3
 8005de8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005dec:	464b      	mov	r3, r9
 8005dee:	eb45 0303 	adc.w	r3, r5, r3
 8005df2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e02:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005e06:	f04f 0200 	mov.w	r2, #0
 8005e0a:	f04f 0300 	mov.w	r3, #0
 8005e0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005e12:	4629      	mov	r1, r5
 8005e14:	008b      	lsls	r3, r1, #2
 8005e16:	4621      	mov	r1, r4
 8005e18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e1c:	4621      	mov	r1, r4
 8005e1e:	008a      	lsls	r2, r1, #2
 8005e20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005e24:	f7fa fa44 	bl	80002b0 <__aeabi_uldivmod>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	4b60      	ldr	r3, [pc, #384]	@ (8005fb0 <UART_SetConfig+0x4e4>)
 8005e2e:	fba3 2302 	umull	r2, r3, r3, r2
 8005e32:	095b      	lsrs	r3, r3, #5
 8005e34:	011c      	lsls	r4, r3, #4
 8005e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005e40:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005e44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005e48:	4642      	mov	r2, r8
 8005e4a:	464b      	mov	r3, r9
 8005e4c:	1891      	adds	r1, r2, r2
 8005e4e:	61b9      	str	r1, [r7, #24]
 8005e50:	415b      	adcs	r3, r3
 8005e52:	61fb      	str	r3, [r7, #28]
 8005e54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e58:	4641      	mov	r1, r8
 8005e5a:	1851      	adds	r1, r2, r1
 8005e5c:	6139      	str	r1, [r7, #16]
 8005e5e:	4649      	mov	r1, r9
 8005e60:	414b      	adcs	r3, r1
 8005e62:	617b      	str	r3, [r7, #20]
 8005e64:	f04f 0200 	mov.w	r2, #0
 8005e68:	f04f 0300 	mov.w	r3, #0
 8005e6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e70:	4659      	mov	r1, fp
 8005e72:	00cb      	lsls	r3, r1, #3
 8005e74:	4651      	mov	r1, sl
 8005e76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e7a:	4651      	mov	r1, sl
 8005e7c:	00ca      	lsls	r2, r1, #3
 8005e7e:	4610      	mov	r0, r2
 8005e80:	4619      	mov	r1, r3
 8005e82:	4603      	mov	r3, r0
 8005e84:	4642      	mov	r2, r8
 8005e86:	189b      	adds	r3, r3, r2
 8005e88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005e8c:	464b      	mov	r3, r9
 8005e8e:	460a      	mov	r2, r1
 8005e90:	eb42 0303 	adc.w	r3, r2, r3
 8005e94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ea2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005ea4:	f04f 0200 	mov.w	r2, #0
 8005ea8:	f04f 0300 	mov.w	r3, #0
 8005eac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005eb0:	4649      	mov	r1, r9
 8005eb2:	008b      	lsls	r3, r1, #2
 8005eb4:	4641      	mov	r1, r8
 8005eb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005eba:	4641      	mov	r1, r8
 8005ebc:	008a      	lsls	r2, r1, #2
 8005ebe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005ec2:	f7fa f9f5 	bl	80002b0 <__aeabi_uldivmod>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	460b      	mov	r3, r1
 8005eca:	4611      	mov	r1, r2
 8005ecc:	4b38      	ldr	r3, [pc, #224]	@ (8005fb0 <UART_SetConfig+0x4e4>)
 8005ece:	fba3 2301 	umull	r2, r3, r3, r1
 8005ed2:	095b      	lsrs	r3, r3, #5
 8005ed4:	2264      	movs	r2, #100	@ 0x64
 8005ed6:	fb02 f303 	mul.w	r3, r2, r3
 8005eda:	1acb      	subs	r3, r1, r3
 8005edc:	011b      	lsls	r3, r3, #4
 8005ede:	3332      	adds	r3, #50	@ 0x32
 8005ee0:	4a33      	ldr	r2, [pc, #204]	@ (8005fb0 <UART_SetConfig+0x4e4>)
 8005ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee6:	095b      	lsrs	r3, r3, #5
 8005ee8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005eec:	441c      	add	r4, r3
 8005eee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ef6:	677a      	str	r2, [r7, #116]	@ 0x74
 8005ef8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005efc:	4642      	mov	r2, r8
 8005efe:	464b      	mov	r3, r9
 8005f00:	1891      	adds	r1, r2, r2
 8005f02:	60b9      	str	r1, [r7, #8]
 8005f04:	415b      	adcs	r3, r3
 8005f06:	60fb      	str	r3, [r7, #12]
 8005f08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f0c:	4641      	mov	r1, r8
 8005f0e:	1851      	adds	r1, r2, r1
 8005f10:	6039      	str	r1, [r7, #0]
 8005f12:	4649      	mov	r1, r9
 8005f14:	414b      	adcs	r3, r1
 8005f16:	607b      	str	r3, [r7, #4]
 8005f18:	f04f 0200 	mov.w	r2, #0
 8005f1c:	f04f 0300 	mov.w	r3, #0
 8005f20:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f24:	4659      	mov	r1, fp
 8005f26:	00cb      	lsls	r3, r1, #3
 8005f28:	4651      	mov	r1, sl
 8005f2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f2e:	4651      	mov	r1, sl
 8005f30:	00ca      	lsls	r2, r1, #3
 8005f32:	4610      	mov	r0, r2
 8005f34:	4619      	mov	r1, r3
 8005f36:	4603      	mov	r3, r0
 8005f38:	4642      	mov	r2, r8
 8005f3a:	189b      	adds	r3, r3, r2
 8005f3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f3e:	464b      	mov	r3, r9
 8005f40:	460a      	mov	r2, r1
 8005f42:	eb42 0303 	adc.w	r3, r2, r3
 8005f46:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f52:	667a      	str	r2, [r7, #100]	@ 0x64
 8005f54:	f04f 0200 	mov.w	r2, #0
 8005f58:	f04f 0300 	mov.w	r3, #0
 8005f5c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005f60:	4649      	mov	r1, r9
 8005f62:	008b      	lsls	r3, r1, #2
 8005f64:	4641      	mov	r1, r8
 8005f66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f6a:	4641      	mov	r1, r8
 8005f6c:	008a      	lsls	r2, r1, #2
 8005f6e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005f72:	f7fa f99d 	bl	80002b0 <__aeabi_uldivmod>
 8005f76:	4602      	mov	r2, r0
 8005f78:	460b      	mov	r3, r1
 8005f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8005fb0 <UART_SetConfig+0x4e4>)
 8005f7c:	fba3 1302 	umull	r1, r3, r3, r2
 8005f80:	095b      	lsrs	r3, r3, #5
 8005f82:	2164      	movs	r1, #100	@ 0x64
 8005f84:	fb01 f303 	mul.w	r3, r1, r3
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	011b      	lsls	r3, r3, #4
 8005f8c:	3332      	adds	r3, #50	@ 0x32
 8005f8e:	4a08      	ldr	r2, [pc, #32]	@ (8005fb0 <UART_SetConfig+0x4e4>)
 8005f90:	fba2 2303 	umull	r2, r3, r2, r3
 8005f94:	095b      	lsrs	r3, r3, #5
 8005f96:	f003 020f 	and.w	r2, r3, #15
 8005f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4422      	add	r2, r4
 8005fa2:	609a      	str	r2, [r3, #8]
}
 8005fa4:	bf00      	nop
 8005fa6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005faa:	46bd      	mov	sp, r7
 8005fac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fb0:	51eb851f 	.word	0x51eb851f

08005fb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fb4:	b084      	sub	sp, #16
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b084      	sub	sp, #16
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	f107 001c 	add.w	r0, r7, #28
 8005fc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005fc6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d123      	bne.n	8006016 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005fe2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ff6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d105      	bne.n	800600a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 fa9a 	bl	8006544 <USB_CoreReset>
 8006010:	4603      	mov	r3, r0
 8006012:	73fb      	strb	r3, [r7, #15]
 8006014:	e01b      	b.n	800604e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 fa8e 	bl	8006544 <USB_CoreReset>
 8006028:	4603      	mov	r3, r0
 800602a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800602c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006030:	2b00      	cmp	r3, #0
 8006032:	d106      	bne.n	8006042 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006038:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006040:	e005      	b.n	800604e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006046:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800604e:	7fbb      	ldrb	r3, [r7, #30]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d10b      	bne.n	800606c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f043 0206 	orr.w	r2, r3, #6
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f043 0220 	orr.w	r2, r3, #32
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800606c:	7bfb      	ldrb	r3, [r7, #15]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006078:	b004      	add	sp, #16
 800607a:	4770      	bx	lr

0800607c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f023 0201 	bic.w	r2, r3, #1
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b084      	sub	sp, #16
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
 80060a6:	460b      	mov	r3, r1
 80060a8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80060aa:	2300      	movs	r3, #0
 80060ac:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80060ba:	78fb      	ldrb	r3, [r7, #3]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d115      	bne.n	80060ec <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80060cc:	200a      	movs	r0, #10
 80060ce:	f7fc f98b 	bl	80023e8 <HAL_Delay>
      ms += 10U;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	330a      	adds	r3, #10
 80060d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 fa25 	bl	8006528 <USB_GetMode>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d01e      	beq.n	8006122 <USB_SetCurrentMode+0x84>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2bc7      	cmp	r3, #199	@ 0xc7
 80060e8:	d9f0      	bls.n	80060cc <USB_SetCurrentMode+0x2e>
 80060ea:	e01a      	b.n	8006122 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80060ec:	78fb      	ldrb	r3, [r7, #3]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d115      	bne.n	800611e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80060fe:	200a      	movs	r0, #10
 8006100:	f7fc f972 	bl	80023e8 <HAL_Delay>
      ms += 10U;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	330a      	adds	r3, #10
 8006108:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 fa0c 	bl	8006528 <USB_GetMode>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d005      	beq.n	8006122 <USB_SetCurrentMode+0x84>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2bc7      	cmp	r3, #199	@ 0xc7
 800611a:	d9f0      	bls.n	80060fe <USB_SetCurrentMode+0x60>
 800611c:	e001      	b.n	8006122 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e005      	b.n	800612e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2bc8      	cmp	r3, #200	@ 0xc8
 8006126:	d101      	bne.n	800612c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e000      	b.n	800612e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
	...

08006138 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006138:	b084      	sub	sp, #16
 800613a:	b580      	push	{r7, lr}
 800613c:	b086      	sub	sp, #24
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
 8006142:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006146:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800614a:	2300      	movs	r3, #0
 800614c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006152:	2300      	movs	r3, #0
 8006154:	613b      	str	r3, [r7, #16]
 8006156:	e009      	b.n	800616c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	3340      	adds	r3, #64	@ 0x40
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	2200      	movs	r2, #0
 8006164:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	3301      	adds	r3, #1
 800616a:	613b      	str	r3, [r7, #16]
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	2b0e      	cmp	r3, #14
 8006170:	d9f2      	bls.n	8006158 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006172:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006176:	2b00      	cmp	r3, #0
 8006178:	d11c      	bne.n	80061b4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006188:	f043 0302 	orr.w	r3, r3, #2
 800618c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006192:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	601a      	str	r2, [r3, #0]
 80061b2:	e005      	b.n	80061c0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061b8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80061c6:	461a      	mov	r2, r3
 80061c8:	2300      	movs	r3, #0
 80061ca:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061cc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d10d      	bne.n	80061f0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80061d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d104      	bne.n	80061e6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80061dc:	2100      	movs	r1, #0
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f968 	bl	80064b4 <USB_SetDevSpeed>
 80061e4:	e008      	b.n	80061f8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80061e6:	2101      	movs	r1, #1
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 f963 	bl	80064b4 <USB_SetDevSpeed>
 80061ee:	e003      	b.n	80061f8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80061f0:	2103      	movs	r1, #3
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f95e 	bl	80064b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80061f8:	2110      	movs	r1, #16
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f8fa 	bl	80063f4 <USB_FlushTxFifo>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d001      	beq.n	800620a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f924 	bl	8006458 <USB_FlushRxFifo>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006220:	461a      	mov	r2, r3
 8006222:	2300      	movs	r3, #0
 8006224:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800622c:	461a      	mov	r2, r3
 800622e:	2300      	movs	r3, #0
 8006230:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006238:	461a      	mov	r2, r3
 800623a:	2300      	movs	r3, #0
 800623c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800623e:	2300      	movs	r3, #0
 8006240:	613b      	str	r3, [r7, #16]
 8006242:	e043      	b.n	80062cc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	015a      	lsls	r2, r3, #5
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	4413      	add	r3, r2
 800624c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006256:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800625a:	d118      	bne.n	800628e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10a      	bne.n	8006278 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	015a      	lsls	r2, r3, #5
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	4413      	add	r3, r2
 800626a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800626e:	461a      	mov	r2, r3
 8006270:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006274:	6013      	str	r3, [r2, #0]
 8006276:	e013      	b.n	80062a0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	015a      	lsls	r2, r3, #5
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	4413      	add	r3, r2
 8006280:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006284:	461a      	mov	r2, r3
 8006286:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800628a:	6013      	str	r3, [r2, #0]
 800628c:	e008      	b.n	80062a0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	015a      	lsls	r2, r3, #5
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	4413      	add	r3, r2
 8006296:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800629a:	461a      	mov	r2, r3
 800629c:	2300      	movs	r3, #0
 800629e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	015a      	lsls	r2, r3, #5
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	4413      	add	r3, r2
 80062a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062ac:	461a      	mov	r2, r3
 80062ae:	2300      	movs	r3, #0
 80062b0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062be:	461a      	mov	r2, r3
 80062c0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80062c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	3301      	adds	r3, #1
 80062ca:	613b      	str	r3, [r7, #16]
 80062cc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80062d0:	461a      	mov	r2, r3
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d3b5      	bcc.n	8006244 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062d8:	2300      	movs	r3, #0
 80062da:	613b      	str	r3, [r7, #16]
 80062dc:	e043      	b.n	8006366 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062f4:	d118      	bne.n	8006328 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10a      	bne.n	8006312 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	015a      	lsls	r2, r3, #5
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	4413      	add	r3, r2
 8006304:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006308:	461a      	mov	r2, r3
 800630a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800630e:	6013      	str	r3, [r2, #0]
 8006310:	e013      	b.n	800633a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	4413      	add	r3, r2
 800631a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800631e:	461a      	mov	r2, r3
 8006320:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006324:	6013      	str	r3, [r2, #0]
 8006326:	e008      	b.n	800633a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	015a      	lsls	r2, r3, #5
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	4413      	add	r3, r2
 8006330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006334:	461a      	mov	r2, r3
 8006336:	2300      	movs	r3, #0
 8006338:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	4413      	add	r3, r2
 8006342:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006346:	461a      	mov	r2, r3
 8006348:	2300      	movs	r3, #0
 800634a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	015a      	lsls	r2, r3, #5
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	4413      	add	r3, r2
 8006354:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006358:	461a      	mov	r2, r3
 800635a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800635e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	3301      	adds	r3, #1
 8006364:	613b      	str	r3, [r7, #16]
 8006366:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800636a:	461a      	mov	r2, r3
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	4293      	cmp	r3, r2
 8006370:	d3b5      	bcc.n	80062de <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006380:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006384:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006392:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006394:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006398:	2b00      	cmp	r3, #0
 800639a:	d105      	bne.n	80063a8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	699b      	ldr	r3, [r3, #24]
 80063a0:	f043 0210 	orr.w	r2, r3, #16
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	699a      	ldr	r2, [r3, #24]
 80063ac:	4b10      	ldr	r3, [pc, #64]	@ (80063f0 <USB_DevInit+0x2b8>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80063b4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d005      	beq.n	80063c8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	699b      	ldr	r3, [r3, #24]
 80063c0:	f043 0208 	orr.w	r2, r3, #8
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80063c8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d107      	bne.n	80063e0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80063d8:	f043 0304 	orr.w	r3, r3, #4
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80063e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3718      	adds	r7, #24
 80063e6:	46bd      	mov	sp, r7
 80063e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063ec:	b004      	add	sp, #16
 80063ee:	4770      	bx	lr
 80063f0:	803c3800 	.word	0x803c3800

080063f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80063fe:	2300      	movs	r3, #0
 8006400:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	3301      	adds	r3, #1
 8006406:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800640e:	d901      	bls.n	8006414 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e01b      	b.n	800644c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	2b00      	cmp	r3, #0
 800641a:	daf2      	bge.n	8006402 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800641c:	2300      	movs	r3, #0
 800641e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	019b      	lsls	r3, r3, #6
 8006424:	f043 0220 	orr.w	r2, r3, #32
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	3301      	adds	r3, #1
 8006430:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006438:	d901      	bls.n	800643e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e006      	b.n	800644c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	f003 0320 	and.w	r3, r3, #32
 8006446:	2b20      	cmp	r3, #32
 8006448:	d0f0      	beq.n	800642c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3714      	adds	r7, #20
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006460:	2300      	movs	r3, #0
 8006462:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	3301      	adds	r3, #1
 8006468:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006470:	d901      	bls.n	8006476 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e018      	b.n	80064a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	2b00      	cmp	r3, #0
 800647c:	daf2      	bge.n	8006464 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800647e:	2300      	movs	r3, #0
 8006480:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2210      	movs	r2, #16
 8006486:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	3301      	adds	r3, #1
 800648c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006494:	d901      	bls.n	800649a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e006      	b.n	80064a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	f003 0310 	and.w	r3, r3, #16
 80064a2:	2b10      	cmp	r3, #16
 80064a4:	d0f0      	beq.n	8006488 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3714      	adds	r7, #20
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	460b      	mov	r3, r1
 80064be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	78fb      	ldrb	r3, [r7, #3]
 80064ce:	68f9      	ldr	r1, [r7, #12]
 80064d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80064d4:	4313      	orrs	r3, r2
 80064d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3714      	adds	r7, #20
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80064e6:	b480      	push	{r7}
 80064e8:	b085      	sub	sp, #20
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006500:	f023 0303 	bic.w	r3, r3, #3
 8006504:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006514:	f043 0302 	orr.w	r3, r3, #2
 8006518:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	695b      	ldr	r3, [r3, #20]
 8006534:	f003 0301 	and.w	r3, r3, #1
}
 8006538:	4618      	mov	r0, r3
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800654c:	2300      	movs	r3, #0
 800654e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	3301      	adds	r3, #1
 8006554:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800655c:	d901      	bls.n	8006562 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e022      	b.n	80065a8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	2b00      	cmp	r3, #0
 8006568:	daf2      	bge.n	8006550 <USB_CoreReset+0xc>

  count = 10U;
 800656a:	230a      	movs	r3, #10
 800656c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800656e:	e002      	b.n	8006576 <USB_CoreReset+0x32>
  {
    count--;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	3b01      	subs	r3, #1
 8006574:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1f9      	bne.n	8006570 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	f043 0201 	orr.w	r2, r3, #1
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	3301      	adds	r3, #1
 800658c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006594:	d901      	bls.n	800659a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e006      	b.n	80065a8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d0f0      	beq.n	8006588 <USB_CoreReset+0x44>

  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3714      	adds	r7, #20
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <__NVIC_SetPriority>:
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	4603      	mov	r3, r0
 80065bc:	6039      	str	r1, [r7, #0]
 80065be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	db0a      	blt.n	80065de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	b2da      	uxtb	r2, r3
 80065cc:	490c      	ldr	r1, [pc, #48]	@ (8006600 <__NVIC_SetPriority+0x4c>)
 80065ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065d2:	0112      	lsls	r2, r2, #4
 80065d4:	b2d2      	uxtb	r2, r2
 80065d6:	440b      	add	r3, r1
 80065d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80065dc:	e00a      	b.n	80065f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	b2da      	uxtb	r2, r3
 80065e2:	4908      	ldr	r1, [pc, #32]	@ (8006604 <__NVIC_SetPriority+0x50>)
 80065e4:	79fb      	ldrb	r3, [r7, #7]
 80065e6:	f003 030f 	and.w	r3, r3, #15
 80065ea:	3b04      	subs	r3, #4
 80065ec:	0112      	lsls	r2, r2, #4
 80065ee:	b2d2      	uxtb	r2, r2
 80065f0:	440b      	add	r3, r1
 80065f2:	761a      	strb	r2, [r3, #24]
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr
 8006600:	e000e100 	.word	0xe000e100
 8006604:	e000ed00 	.word	0xe000ed00

08006608 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006608:	b580      	push	{r7, lr}
 800660a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800660c:	2100      	movs	r1, #0
 800660e:	f06f 0004 	mvn.w	r0, #4
 8006612:	f7ff ffcf 	bl	80065b4 <__NVIC_SetPriority>
#endif
}
 8006616:	bf00      	nop
 8006618:	bd80      	pop	{r7, pc}
	...

0800661c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006622:	f3ef 8305 	mrs	r3, IPSR
 8006626:	603b      	str	r3, [r7, #0]
  return(result);
 8006628:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800662a:	2b00      	cmp	r3, #0
 800662c:	d003      	beq.n	8006636 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800662e:	f06f 0305 	mvn.w	r3, #5
 8006632:	607b      	str	r3, [r7, #4]
 8006634:	e00c      	b.n	8006650 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006636:	4b0a      	ldr	r3, [pc, #40]	@ (8006660 <osKernelInitialize+0x44>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d105      	bne.n	800664a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800663e:	4b08      	ldr	r3, [pc, #32]	@ (8006660 <osKernelInitialize+0x44>)
 8006640:	2201      	movs	r2, #1
 8006642:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006644:	2300      	movs	r3, #0
 8006646:	607b      	str	r3, [r7, #4]
 8006648:	e002      	b.n	8006650 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800664a:	f04f 33ff 	mov.w	r3, #4294967295
 800664e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006650:	687b      	ldr	r3, [r7, #4]
}
 8006652:	4618      	mov	r0, r3
 8006654:	370c      	adds	r7, #12
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	20000718 	.word	0x20000718

08006664 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800666a:	f3ef 8305 	mrs	r3, IPSR
 800666e:	603b      	str	r3, [r7, #0]
  return(result);
 8006670:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006672:	2b00      	cmp	r3, #0
 8006674:	d003      	beq.n	800667e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006676:	f06f 0305 	mvn.w	r3, #5
 800667a:	607b      	str	r3, [r7, #4]
 800667c:	e010      	b.n	80066a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800667e:	4b0b      	ldr	r3, [pc, #44]	@ (80066ac <osKernelStart+0x48>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2b01      	cmp	r3, #1
 8006684:	d109      	bne.n	800669a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006686:	f7ff ffbf 	bl	8006608 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800668a:	4b08      	ldr	r3, [pc, #32]	@ (80066ac <osKernelStart+0x48>)
 800668c:	2202      	movs	r2, #2
 800668e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006690:	f002 f902 	bl	8008898 <vTaskStartScheduler>
      stat = osOK;
 8006694:	2300      	movs	r3, #0
 8006696:	607b      	str	r3, [r7, #4]
 8006698:	e002      	b.n	80066a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800669a:	f04f 33ff 	mov.w	r3, #4294967295
 800669e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80066a0:	687b      	ldr	r3, [r7, #4]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3708      	adds	r7, #8
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	20000718 	.word	0x20000718

080066b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b08e      	sub	sp, #56	@ 0x38
 80066b4:	af04      	add	r7, sp, #16
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80066bc:	2300      	movs	r3, #0
 80066be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066c0:	f3ef 8305 	mrs	r3, IPSR
 80066c4:	617b      	str	r3, [r7, #20]
  return(result);
 80066c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d17e      	bne.n	80067ca <osThreadNew+0x11a>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d07b      	beq.n	80067ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80066d2:	2380      	movs	r3, #128	@ 0x80
 80066d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80066d6:	2318      	movs	r3, #24
 80066d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80066da:	2300      	movs	r3, #0
 80066dc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80066de:	f04f 33ff 	mov.w	r3, #4294967295
 80066e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d045      	beq.n	8006776 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d002      	beq.n	80066f8 <osThreadNew+0x48>
        name = attr->name;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d002      	beq.n	8006706 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	699b      	ldr	r3, [r3, #24]
 8006704:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d008      	beq.n	800671e <osThreadNew+0x6e>
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	2b38      	cmp	r3, #56	@ 0x38
 8006710:	d805      	bhi.n	800671e <osThreadNew+0x6e>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b00      	cmp	r3, #0
 800671c:	d001      	beq.n	8006722 <osThreadNew+0x72>
        return (NULL);
 800671e:	2300      	movs	r3, #0
 8006720:	e054      	b.n	80067cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d003      	beq.n	8006732 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	089b      	lsrs	r3, r3, #2
 8006730:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00e      	beq.n	8006758 <osThreadNew+0xa8>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	2b5b      	cmp	r3, #91	@ 0x5b
 8006740:	d90a      	bls.n	8006758 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006746:	2b00      	cmp	r3, #0
 8006748:	d006      	beq.n	8006758 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d002      	beq.n	8006758 <osThreadNew+0xa8>
        mem = 1;
 8006752:	2301      	movs	r3, #1
 8006754:	61bb      	str	r3, [r7, #24]
 8006756:	e010      	b.n	800677a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10c      	bne.n	800677a <osThreadNew+0xca>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d108      	bne.n	800677a <osThreadNew+0xca>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d104      	bne.n	800677a <osThreadNew+0xca>
          mem = 0;
 8006770:	2300      	movs	r3, #0
 8006772:	61bb      	str	r3, [r7, #24]
 8006774:	e001      	b.n	800677a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006776:	2300      	movs	r3, #0
 8006778:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d110      	bne.n	80067a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006788:	9202      	str	r2, [sp, #8]
 800678a:	9301      	str	r3, [sp, #4]
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	9300      	str	r3, [sp, #0]
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	6a3a      	ldr	r2, [r7, #32]
 8006794:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f001 fea2 	bl	80084e0 <xTaskCreateStatic>
 800679c:	4603      	mov	r3, r0
 800679e:	613b      	str	r3, [r7, #16]
 80067a0:	e013      	b.n	80067ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d110      	bne.n	80067ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80067a8:	6a3b      	ldr	r3, [r7, #32]
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	f107 0310 	add.w	r3, r7, #16
 80067b0:	9301      	str	r3, [sp, #4]
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	9300      	str	r3, [sp, #0]
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80067ba:	68f8      	ldr	r0, [r7, #12]
 80067bc:	f001 fef0 	bl	80085a0 <xTaskCreate>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d001      	beq.n	80067ca <osThreadNew+0x11a>
            hTask = NULL;
 80067c6:	2300      	movs	r3, #0
 80067c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80067ca:	693b      	ldr	r3, [r7, #16]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3728      	adds	r7, #40	@ 0x28
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067dc:	f3ef 8305 	mrs	r3, IPSR
 80067e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80067e2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d003      	beq.n	80067f0 <osDelay+0x1c>
    stat = osErrorISR;
 80067e8:	f06f 0305 	mvn.w	r3, #5
 80067ec:	60fb      	str	r3, [r7, #12]
 80067ee:	e007      	b.n	8006800 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80067f0:	2300      	movs	r3, #0
 80067f2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d002      	beq.n	8006800 <osDelay+0x2c>
      vTaskDelay(ticks);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f002 f816 	bl	800882c <vTaskDelay>
    }
  }

  return (stat);
 8006800:	68fb      	ldr	r3, [r7, #12]
}
 8006802:	4618      	mov	r0, r3
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800680a:	b580      	push	{r7, lr}
 800680c:	b086      	sub	sp, #24
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8006812:	2300      	movs	r3, #0
 8006814:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006816:	f3ef 8305 	mrs	r3, IPSR
 800681a:	60fb      	str	r3, [r7, #12]
  return(result);
 800681c:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800681e:	2b00      	cmp	r3, #0
 8006820:	d12d      	bne.n	800687e <osEventFlagsNew+0x74>
    mem = -1;
 8006822:	f04f 33ff 	mov.w	r3, #4294967295
 8006826:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d015      	beq.n	800685a <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d006      	beq.n	8006844 <osEventFlagsNew+0x3a>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	2b1f      	cmp	r3, #31
 800683c:	d902      	bls.n	8006844 <osEventFlagsNew+0x3a>
        mem = 1;
 800683e:	2301      	movs	r3, #1
 8006840:	613b      	str	r3, [r7, #16]
 8006842:	e00c      	b.n	800685e <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d108      	bne.n	800685e <osEventFlagsNew+0x54>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d104      	bne.n	800685e <osEventFlagsNew+0x54>
          mem = 0;
 8006854:	2300      	movs	r3, #0
 8006856:	613b      	str	r3, [r7, #16]
 8006858:	e001      	b.n	800685e <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800685a:	2300      	movs	r3, #0
 800685c:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d106      	bne.n	8006872 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	4618      	mov	r0, r3
 800686a:	f000 fb79 	bl	8006f60 <xEventGroupCreateStatic>
 800686e:	6178      	str	r0, [r7, #20]
 8006870:	e005      	b.n	800687e <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d102      	bne.n	800687e <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8006878:	f000 fbab 	bl	8006fd2 <xEventGroupCreate>
 800687c:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800687e:	697b      	ldr	r3, [r7, #20]
}
 8006880:	4618      	mov	r0, r3
 8006882:	3718      	adds	r7, #24
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8006888:	b580      	push	{r7, lr}
 800688a:	b086      	sub	sp, #24
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d003      	beq.n	80068a4 <osEventFlagsSet+0x1c>
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80068a2:	d303      	bcc.n	80068ac <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 80068a4:	f06f 0303 	mvn.w	r3, #3
 80068a8:	617b      	str	r3, [r7, #20]
 80068aa:	e028      	b.n	80068fe <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068ac:	f3ef 8305 	mrs	r3, IPSR
 80068b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80068b2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d01d      	beq.n	80068f4 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80068b8:	2300      	movs	r3, #0
 80068ba:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80068bc:	f107 0308 	add.w	r3, r7, #8
 80068c0:	461a      	mov	r2, r3
 80068c2:	6839      	ldr	r1, [r7, #0]
 80068c4:	6938      	ldr	r0, [r7, #16]
 80068c6:	f000 fdab 	bl	8007420 <xEventGroupSetBitsFromISR>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d103      	bne.n	80068d8 <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 80068d0:	f06f 0302 	mvn.w	r3, #2
 80068d4:	617b      	str	r3, [r7, #20]
 80068d6:	e012      	b.n	80068fe <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00d      	beq.n	80068fe <osEventFlagsSet+0x76>
 80068e2:	4b09      	ldr	r3, [pc, #36]	@ (8006908 <osEventFlagsSet+0x80>)
 80068e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068e8:	601a      	str	r2, [r3, #0]
 80068ea:	f3bf 8f4f 	dsb	sy
 80068ee:	f3bf 8f6f 	isb	sy
 80068f2:	e004      	b.n	80068fe <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80068f4:	6839      	ldr	r1, [r7, #0]
 80068f6:	6938      	ldr	r0, [r7, #16]
 80068f8:	f000 fcca 	bl	8007290 <xEventGroupSetBits>
 80068fc:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80068fe:	697b      	ldr	r3, [r7, #20]
}
 8006900:	4618      	mov	r0, r3
 8006902:	3718      	adds	r7, #24
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	e000ed04 	.word	0xe000ed04

0800690c <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d003      	beq.n	8006928 <osEventFlagsClear+0x1c>
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006926:	d303      	bcc.n	8006930 <osEventFlagsClear+0x24>
    rflags = (uint32_t)osErrorParameter;
 8006928:	f06f 0303 	mvn.w	r3, #3
 800692c:	617b      	str	r3, [r7, #20]
 800692e:	e019      	b.n	8006964 <osEventFlagsClear+0x58>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006930:	f3ef 8305 	mrs	r3, IPSR
 8006934:	60fb      	str	r3, [r7, #12]
  return(result);
 8006936:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00e      	beq.n	800695a <osEventFlagsClear+0x4e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 800693c:	6938      	ldr	r0, [r7, #16]
 800693e:	f000 fc83 	bl	8007248 <xEventGroupGetBitsFromISR>
 8006942:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8006944:	6839      	ldr	r1, [r7, #0]
 8006946:	6938      	ldr	r0, [r7, #16]
 8006948:	f000 fc6a 	bl	8007220 <xEventGroupClearBitsFromISR>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d108      	bne.n	8006964 <osEventFlagsClear+0x58>
      rflags = (uint32_t)osErrorResource;
 8006952:	f06f 0302 	mvn.w	r3, #2
 8006956:	617b      	str	r3, [r7, #20]
 8006958:	e004      	b.n	8006964 <osEventFlagsClear+0x58>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 800695a:	6839      	ldr	r1, [r7, #0]
 800695c:	6938      	ldr	r0, [r7, #16]
 800695e:	f000 fc25 	bl	80071ac <xEventGroupClearBits>
 8006962:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8006964:	697b      	ldr	r3, [r7, #20]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3718      	adds	r7, #24
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 800696e:	b580      	push	{r7, lr}
 8006970:	b086      	sub	sp, #24
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if (ef_id == NULL) {
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d102      	bne.n	8006986 <osEventFlagsGet+0x18>
    rflags = 0U;
 8006980:	2300      	movs	r3, #0
 8006982:	617b      	str	r3, [r7, #20]
 8006984:	e00f      	b.n	80069a6 <osEventFlagsGet+0x38>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006986:	f3ef 8305 	mrs	r3, IPSR
 800698a:	60fb      	str	r3, [r7, #12]
  return(result);
 800698c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800698e:	2b00      	cmp	r3, #0
 8006990:	d004      	beq.n	800699c <osEventFlagsGet+0x2e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8006992:	6938      	ldr	r0, [r7, #16]
 8006994:	f000 fc58 	bl	8007248 <xEventGroupGetBitsFromISR>
 8006998:	6178      	str	r0, [r7, #20]
 800699a:	e004      	b.n	80069a6 <osEventFlagsGet+0x38>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 800699c:	2100      	movs	r1, #0
 800699e:	6938      	ldr	r0, [r7, #16]
 80069a0:	f000 fc04 	bl	80071ac <xEventGroupClearBits>
 80069a4:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80069a6:	697b      	ldr	r3, [r7, #20]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3718      	adds	r7, #24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <osEventFlagsWait>:

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b08c      	sub	sp, #48	@ 0x30
 80069b4:	af02      	add	r7, sp, #8
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
 80069bc:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d003      	beq.n	80069d0 <osEventFlagsWait+0x20>
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80069ce:	d303      	bcc.n	80069d8 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 80069d0:	f06f 0303 	mvn.w	r3, #3
 80069d4:	61fb      	str	r3, [r7, #28]
 80069d6:	e04b      	b.n	8006a70 <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069d8:	f3ef 8305 	mrs	r3, IPSR
 80069dc:	617b      	str	r3, [r7, #20]
  return(result);
 80069de:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d003      	beq.n	80069ec <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 80069e4:	f06f 0305 	mvn.w	r3, #5
 80069e8:	61fb      	str	r3, [r7, #28]
 80069ea:	e041      	b.n	8006a70 <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f003 0301 	and.w	r3, r3, #1
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d002      	beq.n	80069fc <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 80069f6:	2301      	movs	r3, #1
 80069f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80069fa:	e001      	b.n	8006a00 <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 80069fc:	2300      	movs	r3, #0
 80069fe:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f003 0302 	and.w	r3, r3, #2
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d002      	beq.n	8006a10 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	623b      	str	r3, [r7, #32]
 8006a0e:	e001      	b.n	8006a14 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 8006a10:	2301      	movs	r3, #1
 8006a12:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	9300      	str	r3, [sp, #0]
 8006a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1a:	6a3a      	ldr	r2, [r7, #32]
 8006a1c:	68b9      	ldr	r1, [r7, #8]
 8006a1e:	69b8      	ldr	r0, [r7, #24]
 8006a20:	f000 faf2 	bl	8007008 <xEventGroupWaitBits>
 8006a24:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f003 0301 	and.w	r3, r3, #1
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d010      	beq.n	8006a52 <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	4013      	ands	r3, r2
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d019      	beq.n	8006a70 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d003      	beq.n	8006a4a <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 8006a42:	f06f 0301 	mvn.w	r3, #1
 8006a46:	61fb      	str	r3, [r7, #28]
 8006a48:	e012      	b.n	8006a70 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8006a4a:	f06f 0302 	mvn.w	r3, #2
 8006a4e:	61fb      	str	r3, [r7, #28]
 8006a50:	e00e      	b.n	8006a70 <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	4013      	ands	r3, r2
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d109      	bne.n	8006a70 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d003      	beq.n	8006a6a <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 8006a62:	f06f 0301 	mvn.w	r3, #1
 8006a66:	61fb      	str	r3, [r7, #28]
 8006a68:	e002      	b.n	8006a70 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8006a6a:	f06f 0302 	mvn.w	r3, #2
 8006a6e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8006a70:	69fb      	ldr	r3, [r7, #28]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3728      	adds	r7, #40	@ 0x28
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b088      	sub	sp, #32
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006a82:	2300      	movs	r3, #0
 8006a84:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a86:	f3ef 8305 	mrs	r3, IPSR
 8006a8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a8c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d174      	bne.n	8006b7c <osMutexNew+0x102>
    if (attr != NULL) {
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d003      	beq.n	8006aa0 <osMutexNew+0x26>
      type = attr->attr_bits;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	61bb      	str	r3, [r7, #24]
 8006a9e:	e001      	b.n	8006aa4 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d002      	beq.n	8006ab4 <osMutexNew+0x3a>
      rmtx = 1U;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	617b      	str	r3, [r7, #20]
 8006ab2:	e001      	b.n	8006ab8 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	f003 0308 	and.w	r3, r3, #8
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d15c      	bne.n	8006b7c <osMutexNew+0x102>
      mem = -1;
 8006ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ac6:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d015      	beq.n	8006afa <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d006      	beq.n	8006ae4 <osMutexNew+0x6a>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	2b4f      	cmp	r3, #79	@ 0x4f
 8006adc:	d902      	bls.n	8006ae4 <osMutexNew+0x6a>
          mem = 1;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	613b      	str	r3, [r7, #16]
 8006ae2:	e00c      	b.n	8006afe <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d108      	bne.n	8006afe <osMutexNew+0x84>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d104      	bne.n	8006afe <osMutexNew+0x84>
            mem = 0;
 8006af4:	2300      	movs	r3, #0
 8006af6:	613b      	str	r3, [r7, #16]
 8006af8:	e001      	b.n	8006afe <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006afa:	2300      	movs	r3, #0
 8006afc:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d112      	bne.n	8006b2a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d007      	beq.n	8006b1a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	4619      	mov	r1, r3
 8006b10:	2004      	movs	r0, #4
 8006b12:	f000 fec4 	bl	800789e <xQueueCreateMutexStatic>
 8006b16:	61f8      	str	r0, [r7, #28]
 8006b18:	e016      	b.n	8006b48 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	4619      	mov	r1, r3
 8006b20:	2001      	movs	r0, #1
 8006b22:	f000 febc 	bl	800789e <xQueueCreateMutexStatic>
 8006b26:	61f8      	str	r0, [r7, #28]
 8006b28:	e00e      	b.n	8006b48 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d10b      	bne.n	8006b48 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d004      	beq.n	8006b40 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006b36:	2004      	movs	r0, #4
 8006b38:	f000 fe99 	bl	800786e <xQueueCreateMutex>
 8006b3c:	61f8      	str	r0, [r7, #28]
 8006b3e:	e003      	b.n	8006b48 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006b40:	2001      	movs	r0, #1
 8006b42:	f000 fe94 	bl	800786e <xQueueCreateMutex>
 8006b46:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00c      	beq.n	8006b68 <osMutexNew+0xee>
        if (attr != NULL) {
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d003      	beq.n	8006b5c <osMutexNew+0xe2>
          name = attr->name;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	60fb      	str	r3, [r7, #12]
 8006b5a:	e001      	b.n	8006b60 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006b60:	68f9      	ldr	r1, [r7, #12]
 8006b62:	69f8      	ldr	r0, [r7, #28]
 8006b64:	f001 fc5e 	bl	8008424 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d006      	beq.n	8006b7c <osMutexNew+0x102>
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d003      	beq.n	8006b7c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	f043 0301 	orr.w	r3, r3, #1
 8006b7a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006b7c:	69fb      	ldr	r3, [r7, #28]
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3720      	adds	r7, #32
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b086      	sub	sp, #24
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
 8006b8e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f023 0301 	bic.w	r3, r3, #1
 8006b96:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f003 0301 	and.w	r3, r3, #1
 8006b9e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ba4:	f3ef 8305 	mrs	r3, IPSR
 8006ba8:	60bb      	str	r3, [r7, #8]
  return(result);
 8006baa:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d003      	beq.n	8006bb8 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8006bb0:	f06f 0305 	mvn.w	r3, #5
 8006bb4:	617b      	str	r3, [r7, #20]
 8006bb6:	e02c      	b.n	8006c12 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d103      	bne.n	8006bc6 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8006bbe:	f06f 0303 	mvn.w	r3, #3
 8006bc2:	617b      	str	r3, [r7, #20]
 8006bc4:	e025      	b.n	8006c12 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d011      	beq.n	8006bf0 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006bcc:	6839      	ldr	r1, [r7, #0]
 8006bce:	6938      	ldr	r0, [r7, #16]
 8006bd0:	f000 feb5 	bl	800793e <xQueueTakeMutexRecursive>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d01b      	beq.n	8006c12 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d003      	beq.n	8006be8 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8006be0:	f06f 0301 	mvn.w	r3, #1
 8006be4:	617b      	str	r3, [r7, #20]
 8006be6:	e014      	b.n	8006c12 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006be8:	f06f 0302 	mvn.w	r3, #2
 8006bec:	617b      	str	r3, [r7, #20]
 8006bee:	e010      	b.n	8006c12 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006bf0:	6839      	ldr	r1, [r7, #0]
 8006bf2:	6938      	ldr	r0, [r7, #16]
 8006bf4:	f001 f95c 	bl	8007eb0 <xQueueSemaphoreTake>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d009      	beq.n	8006c12 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d003      	beq.n	8006c0c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006c04:	f06f 0301 	mvn.w	r3, #1
 8006c08:	617b      	str	r3, [r7, #20]
 8006c0a:	e002      	b.n	8006c12 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006c0c:	f06f 0302 	mvn.w	r3, #2
 8006c10:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006c12:	697b      	ldr	r3, [r7, #20]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3718      	adds	r7, #24
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b086      	sub	sp, #24
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f023 0301 	bic.w	r3, r3, #1
 8006c2a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006c34:	2300      	movs	r3, #0
 8006c36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c38:	f3ef 8305 	mrs	r3, IPSR
 8006c3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c3e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d003      	beq.n	8006c4c <osMutexRelease+0x30>
    stat = osErrorISR;
 8006c44:	f06f 0305 	mvn.w	r3, #5
 8006c48:	617b      	str	r3, [r7, #20]
 8006c4a:	e01f      	b.n	8006c8c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d103      	bne.n	8006c5a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006c52:	f06f 0303 	mvn.w	r3, #3
 8006c56:	617b      	str	r3, [r7, #20]
 8006c58:	e018      	b.n	8006c8c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d009      	beq.n	8006c74 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006c60:	6938      	ldr	r0, [r7, #16]
 8006c62:	f000 fe37 	bl	80078d4 <xQueueGiveMutexRecursive>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d00f      	beq.n	8006c8c <osMutexRelease+0x70>
        stat = osErrorResource;
 8006c6c:	f06f 0302 	mvn.w	r3, #2
 8006c70:	617b      	str	r3, [r7, #20]
 8006c72:	e00b      	b.n	8006c8c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006c74:	2300      	movs	r3, #0
 8006c76:	2200      	movs	r2, #0
 8006c78:	2100      	movs	r1, #0
 8006c7a:	6938      	ldr	r0, [r7, #16]
 8006c7c:	f000 fe96 	bl	80079ac <xQueueGenericSend>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d002      	beq.n	8006c8c <osMutexRelease+0x70>
        stat = osErrorResource;
 8006c86:	f06f 0302 	mvn.w	r3, #2
 8006c8a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006c8c:	697b      	ldr	r3, [r7, #20]
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3718      	adds	r7, #24
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b08a      	sub	sp, #40	@ 0x28
 8006c9a:	af02      	add	r7, sp, #8
 8006c9c:	60f8      	str	r0, [r7, #12]
 8006c9e:	60b9      	str	r1, [r7, #8]
 8006ca0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ca6:	f3ef 8305 	mrs	r3, IPSR
 8006caa:	613b      	str	r3, [r7, #16]
  return(result);
 8006cac:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d15f      	bne.n	8006d72 <osMessageQueueNew+0xdc>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d05c      	beq.n	8006d72 <osMessageQueueNew+0xdc>
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d059      	beq.n	8006d72 <osMessageQueueNew+0xdc>
    mem = -1;
 8006cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8006cc2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d029      	beq.n	8006d1e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d012      	beq.n	8006cf8 <osMessageQueueNew+0x62>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	2b4f      	cmp	r3, #79	@ 0x4f
 8006cd8:	d90e      	bls.n	8006cf8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00a      	beq.n	8006cf8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	695a      	ldr	r2, [r3, #20]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	68b9      	ldr	r1, [r7, #8]
 8006cea:	fb01 f303 	mul.w	r3, r1, r3
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d302      	bcc.n	8006cf8 <osMessageQueueNew+0x62>
        mem = 1;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	61bb      	str	r3, [r7, #24]
 8006cf6:	e014      	b.n	8006d22 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d110      	bne.n	8006d22 <osMessageQueueNew+0x8c>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d10c      	bne.n	8006d22 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d108      	bne.n	8006d22 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d104      	bne.n	8006d22 <osMessageQueueNew+0x8c>
          mem = 0;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	61bb      	str	r3, [r7, #24]
 8006d1c:	e001      	b.n	8006d22 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d10b      	bne.n	8006d40 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	691a      	ldr	r2, [r3, #16]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	2100      	movs	r1, #0
 8006d32:	9100      	str	r1, [sp, #0]
 8006d34:	68b9      	ldr	r1, [r7, #8]
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f000 fca4 	bl	8007684 <xQueueGenericCreateStatic>
 8006d3c:	61f8      	str	r0, [r7, #28]
 8006d3e:	e008      	b.n	8006d52 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d105      	bne.n	8006d52 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006d46:	2200      	movs	r2, #0
 8006d48:	68b9      	ldr	r1, [r7, #8]
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f000 fd17 	bl	800777e <xQueueGenericCreate>
 8006d50:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00c      	beq.n	8006d72 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d003      	beq.n	8006d66 <osMessageQueueNew+0xd0>
        name = attr->name;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	617b      	str	r3, [r7, #20]
 8006d64:	e001      	b.n	8006d6a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006d66:	2300      	movs	r3, #0
 8006d68:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006d6a:	6979      	ldr	r1, [r7, #20]
 8006d6c:	69f8      	ldr	r0, [r7, #28]
 8006d6e:	f001 fb59 	bl	8008424 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006d72:	69fb      	ldr	r3, [r7, #28]
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3720      	adds	r7, #32
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b088      	sub	sp, #32
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	603b      	str	r3, [r7, #0]
 8006d88:	4613      	mov	r3, r2
 8006d8a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006d90:	2300      	movs	r3, #0
 8006d92:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d94:	f3ef 8305 	mrs	r3, IPSR
 8006d98:	617b      	str	r3, [r7, #20]
  return(result);
 8006d9a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d028      	beq.n	8006df2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d005      	beq.n	8006db2 <osMessageQueuePut+0x36>
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <osMessageQueuePut+0x36>
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d003      	beq.n	8006dba <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006db2:	f06f 0303 	mvn.w	r3, #3
 8006db6:	61fb      	str	r3, [r7, #28]
 8006db8:	e038      	b.n	8006e2c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006dbe:	f107 0210 	add.w	r2, r7, #16
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	68b9      	ldr	r1, [r7, #8]
 8006dc6:	69b8      	ldr	r0, [r7, #24]
 8006dc8:	f000 fef2 	bl	8007bb0 <xQueueGenericSendFromISR>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d003      	beq.n	8006dda <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006dd2:	f06f 0302 	mvn.w	r3, #2
 8006dd6:	61fb      	str	r3, [r7, #28]
 8006dd8:	e028      	b.n	8006e2c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d025      	beq.n	8006e2c <osMessageQueuePut+0xb0>
 8006de0:	4b15      	ldr	r3, [pc, #84]	@ (8006e38 <osMessageQueuePut+0xbc>)
 8006de2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006de6:	601a      	str	r2, [r3, #0]
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	e01c      	b.n	8006e2c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d002      	beq.n	8006dfe <osMessageQueuePut+0x82>
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d103      	bne.n	8006e06 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006dfe:	f06f 0303 	mvn.w	r3, #3
 8006e02:	61fb      	str	r3, [r7, #28]
 8006e04:	e012      	b.n	8006e2c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006e06:	2300      	movs	r3, #0
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	68b9      	ldr	r1, [r7, #8]
 8006e0c:	69b8      	ldr	r0, [r7, #24]
 8006e0e:	f000 fdcd 	bl	80079ac <xQueueGenericSend>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d009      	beq.n	8006e2c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d003      	beq.n	8006e26 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006e1e:	f06f 0301 	mvn.w	r3, #1
 8006e22:	61fb      	str	r3, [r7, #28]
 8006e24:	e002      	b.n	8006e2c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006e26:	f06f 0302 	mvn.w	r3, #2
 8006e2a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006e2c:	69fb      	ldr	r3, [r7, #28]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3720      	adds	r7, #32
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	e000ed04 	.word	0xe000ed04

08006e3c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b088      	sub	sp, #32
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]
 8006e48:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e52:	f3ef 8305 	mrs	r3, IPSR
 8006e56:	617b      	str	r3, [r7, #20]
  return(result);
 8006e58:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d028      	beq.n	8006eb0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d005      	beq.n	8006e70 <osMessageQueueGet+0x34>
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d002      	beq.n	8006e70 <osMessageQueueGet+0x34>
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d003      	beq.n	8006e78 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006e70:	f06f 0303 	mvn.w	r3, #3
 8006e74:	61fb      	str	r3, [r7, #28]
 8006e76:	e037      	b.n	8006ee8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006e7c:	f107 0310 	add.w	r3, r7, #16
 8006e80:	461a      	mov	r2, r3
 8006e82:	68b9      	ldr	r1, [r7, #8]
 8006e84:	69b8      	ldr	r0, [r7, #24]
 8006e86:	f001 f923 	bl	80080d0 <xQueueReceiveFromISR>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d003      	beq.n	8006e98 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006e90:	f06f 0302 	mvn.w	r3, #2
 8006e94:	61fb      	str	r3, [r7, #28]
 8006e96:	e027      	b.n	8006ee8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d024      	beq.n	8006ee8 <osMessageQueueGet+0xac>
 8006e9e:	4b15      	ldr	r3, [pc, #84]	@ (8006ef4 <osMessageQueueGet+0xb8>)
 8006ea0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ea4:	601a      	str	r2, [r3, #0]
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	f3bf 8f6f 	isb	sy
 8006eae:	e01b      	b.n	8006ee8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d002      	beq.n	8006ebc <osMessageQueueGet+0x80>
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d103      	bne.n	8006ec4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006ebc:	f06f 0303 	mvn.w	r3, #3
 8006ec0:	61fb      	str	r3, [r7, #28]
 8006ec2:	e011      	b.n	8006ee8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006ec4:	683a      	ldr	r2, [r7, #0]
 8006ec6:	68b9      	ldr	r1, [r7, #8]
 8006ec8:	69b8      	ldr	r0, [r7, #24]
 8006eca:	f000 ff0f 	bl	8007cec <xQueueReceive>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d009      	beq.n	8006ee8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006eda:	f06f 0301 	mvn.w	r3, #1
 8006ede:	61fb      	str	r3, [r7, #28]
 8006ee0:	e002      	b.n	8006ee8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006ee2:	f06f 0302 	mvn.w	r3, #2
 8006ee6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006ee8:	69fb      	ldr	r3, [r7, #28]
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3720      	adds	r7, #32
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	e000ed04 	.word	0xe000ed04

08006ef8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4a07      	ldr	r2, [pc, #28]	@ (8006f24 <vApplicationGetIdleTaskMemory+0x2c>)
 8006f08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	4a06      	ldr	r2, [pc, #24]	@ (8006f28 <vApplicationGetIdleTaskMemory+0x30>)
 8006f0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2280      	movs	r2, #128	@ 0x80
 8006f14:	601a      	str	r2, [r3, #0]
}
 8006f16:	bf00      	nop
 8006f18:	3714      	adds	r7, #20
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	2000071c 	.word	0x2000071c
 8006f28:	20000778 	.word	0x20000778

08006f2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	4a07      	ldr	r2, [pc, #28]	@ (8006f58 <vApplicationGetTimerTaskMemory+0x2c>)
 8006f3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	4a06      	ldr	r2, [pc, #24]	@ (8006f5c <vApplicationGetTimerTaskMemory+0x30>)
 8006f42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006f4a:	601a      	str	r2, [r3, #0]
}
 8006f4c:	bf00      	nop
 8006f4e:	3714      	adds	r7, #20
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr
 8006f58:	20000978 	.word	0x20000978
 8006f5c:	200009d4 	.word	0x200009d4

08006f60 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d10b      	bne.n	8006f86 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f72:	f383 8811 	msr	BASEPRI, r3
 8006f76:	f3bf 8f6f 	isb	sy
 8006f7a:	f3bf 8f4f 	dsb	sy
 8006f7e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006f80:	bf00      	nop
 8006f82:	bf00      	nop
 8006f84:	e7fd      	b.n	8006f82 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8006f86:	2320      	movs	r3, #32
 8006f88:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	2b20      	cmp	r3, #32
 8006f8e:	d00b      	beq.n	8006fa8 <xEventGroupCreateStatic+0x48>
	__asm volatile
 8006f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f94:	f383 8811 	msr	BASEPRI, r3
 8006f98:	f3bf 8f6f 	isb	sy
 8006f9c:	f3bf 8f4f 	dsb	sy
 8006fa0:	60fb      	str	r3, [r7, #12]
}
 8006fa2:	bf00      	nop
 8006fa4:	bf00      	nop
 8006fa6:	e7fd      	b.n	8006fa4 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00a      	beq.n	8006fc8 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	3304      	adds	r3, #4
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f000 fa43 	bl	8007448 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8006fc8:	697b      	ldr	r3, [r7, #20]
	}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3718      	adds	r7, #24
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b082      	sub	sp, #8
 8006fd6:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8006fd8:	2020      	movs	r0, #32
 8006fda:	f003 f927 	bl	800a22c <pvPortMalloc>
 8006fde:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00a      	beq.n	8006ffc <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	3304      	adds	r3, #4
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f000 fa29 	bl	8007448 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8006ffc:	687b      	ldr	r3, [r7, #4]
	}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3708      	adds	r7, #8
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
	...

08007008 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b090      	sub	sp, #64	@ 0x40
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	607a      	str	r2, [r7, #4]
 8007014:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800701a:	2300      	movs	r3, #0
 800701c:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800701e:	2300      	movs	r3, #0
 8007020:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d10b      	bne.n	8007040 <xEventGroupWaitBits+0x38>
	__asm volatile
 8007028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800702c:	f383 8811 	msr	BASEPRI, r3
 8007030:	f3bf 8f6f 	isb	sy
 8007034:	f3bf 8f4f 	dsb	sy
 8007038:	623b      	str	r3, [r7, #32]
}
 800703a:	bf00      	nop
 800703c:	bf00      	nop
 800703e:	e7fd      	b.n	800703c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007046:	d30b      	bcc.n	8007060 <xEventGroupWaitBits+0x58>
	__asm volatile
 8007048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800704c:	f383 8811 	msr	BASEPRI, r3
 8007050:	f3bf 8f6f 	isb	sy
 8007054:	f3bf 8f4f 	dsb	sy
 8007058:	61fb      	str	r3, [r7, #28]
}
 800705a:	bf00      	nop
 800705c:	bf00      	nop
 800705e:	e7fd      	b.n	800705c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d10b      	bne.n	800707e <xEventGroupWaitBits+0x76>
	__asm volatile
 8007066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800706a:	f383 8811 	msr	BASEPRI, r3
 800706e:	f3bf 8f6f 	isb	sy
 8007072:	f3bf 8f4f 	dsb	sy
 8007076:	61bb      	str	r3, [r7, #24]
}
 8007078:	bf00      	nop
 800707a:	bf00      	nop
 800707c:	e7fd      	b.n	800707a <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800707e:	f002 f90b 	bl	8009298 <xTaskGetSchedulerState>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d102      	bne.n	800708e <xEventGroupWaitBits+0x86>
 8007088:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800708a:	2b00      	cmp	r3, #0
 800708c:	d101      	bne.n	8007092 <xEventGroupWaitBits+0x8a>
 800708e:	2301      	movs	r3, #1
 8007090:	e000      	b.n	8007094 <xEventGroupWaitBits+0x8c>
 8007092:	2300      	movs	r3, #0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d10b      	bne.n	80070b0 <xEventGroupWaitBits+0xa8>
	__asm volatile
 8007098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800709c:	f383 8811 	msr	BASEPRI, r3
 80070a0:	f3bf 8f6f 	isb	sy
 80070a4:	f3bf 8f4f 	dsb	sy
 80070a8:	617b      	str	r3, [r7, #20]
}
 80070aa:	bf00      	nop
 80070ac:	bf00      	nop
 80070ae:	e7fd      	b.n	80070ac <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 80070b0:	f001 fc5a 	bl	8008968 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80070b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80070ba:	683a      	ldr	r2, [r7, #0]
 80070bc:	68b9      	ldr	r1, [r7, #8]
 80070be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80070c0:	f000 f98c 	bl	80073dc <prvTestWaitCondition>
 80070c4:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 80070c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00e      	beq.n	80070ea <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80070cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80070d0:	2300      	movs	r3, #0
 80070d2:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d028      	beq.n	800712c <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80070da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	43db      	mvns	r3, r3
 80070e2:	401a      	ands	r2, r3
 80070e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070e6:	601a      	str	r2, [r3, #0]
 80070e8:	e020      	b.n	800712c <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80070ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d104      	bne.n	80070fa <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80070f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 80070f4:	2301      	movs	r3, #1
 80070f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80070f8:	e018      	b.n	800712c <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d003      	beq.n	8007108 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8007100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007102:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007106:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d003      	beq.n	8007116 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800710e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007110:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007114:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8007116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007118:	1d18      	adds	r0, r3, #4
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800711e:	4313      	orrs	r3, r2
 8007120:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007122:	4619      	mov	r1, r3
 8007124:	f001 fe1a 	bl	8008d5c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8007128:	2300      	movs	r3, #0
 800712a:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800712c:	f001 fc2a 	bl	8008984 <xTaskResumeAll>
 8007130:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8007132:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007134:	2b00      	cmp	r3, #0
 8007136:	d031      	beq.n	800719c <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8007138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713a:	2b00      	cmp	r3, #0
 800713c:	d107      	bne.n	800714e <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800713e:	4b1a      	ldr	r3, [pc, #104]	@ (80071a8 <xEventGroupWaitBits+0x1a0>)
 8007140:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007144:	601a      	str	r2, [r3, #0]
 8007146:	f3bf 8f4f 	dsb	sy
 800714a:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800714e:	f002 fa1d 	bl	800958c <uxTaskResetEventItemValue>
 8007152:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8007154:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800715a:	2b00      	cmp	r3, #0
 800715c:	d11a      	bne.n	8007194 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800715e:	f002 ff43 	bl	8009fe8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8007162:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8007168:	683a      	ldr	r2, [r7, #0]
 800716a:	68b9      	ldr	r1, [r7, #8]
 800716c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800716e:	f000 f935 	bl	80073dc <prvTestWaitCondition>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d009      	beq.n	800718c <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d006      	beq.n	800718c <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800717e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	43db      	mvns	r3, r3
 8007186:	401a      	ands	r2, r3
 8007188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800718a:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800718c:	2301      	movs	r3, #1
 800718e:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8007190:	f002 ff5c 	bl	800a04c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8007194:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007196:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800719a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800719c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3740      	adds	r7, #64	@ 0x40
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	e000ed04 	.word	0xe000ed04

080071ac <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b086      	sub	sp, #24
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d10b      	bne.n	80071d8 <xEventGroupClearBits+0x2c>
	__asm volatile
 80071c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c4:	f383 8811 	msr	BASEPRI, r3
 80071c8:	f3bf 8f6f 	isb	sy
 80071cc:	f3bf 8f4f 	dsb	sy
 80071d0:	60fb      	str	r3, [r7, #12]
}
 80071d2:	bf00      	nop
 80071d4:	bf00      	nop
 80071d6:	e7fd      	b.n	80071d4 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80071de:	d30b      	bcc.n	80071f8 <xEventGroupClearBits+0x4c>
	__asm volatile
 80071e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e4:	f383 8811 	msr	BASEPRI, r3
 80071e8:	f3bf 8f6f 	isb	sy
 80071ec:	f3bf 8f4f 	dsb	sy
 80071f0:	60bb      	str	r3, [r7, #8]
}
 80071f2:	bf00      	nop
 80071f4:	bf00      	nop
 80071f6:	e7fd      	b.n	80071f4 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80071f8:	f002 fef6 	bl	8009fe8 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	43db      	mvns	r3, r3
 800720a:	401a      	ands	r2, r3
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8007210:	f002 ff1c 	bl	800a04c <vPortExitCritical>

	return uxReturn;
 8007214:	693b      	ldr	r3, [r7, #16]
}
 8007216:	4618      	mov	r0, r3
 8007218:	3718      	adds	r7, #24
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
	...

08007220 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800722a:	2300      	movs	r3, #0
 800722c:	683a      	ldr	r2, [r7, #0]
 800722e:	6879      	ldr	r1, [r7, #4]
 8007230:	4804      	ldr	r0, [pc, #16]	@ (8007244 <xEventGroupClearBitsFromISR+0x24>)
 8007232:	f002 fd85 	bl	8009d40 <xTimerPendFunctionCallFromISR>
 8007236:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8007238:	68fb      	ldr	r3, [r7, #12]
	}
 800723a:	4618      	mov	r0, r3
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	080073c3 	.word	0x080073c3

08007248 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8007248:	b480      	push	{r7}
 800724a:	b089      	sub	sp, #36	@ 0x24
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007254:	f3ef 8211 	mrs	r2, BASEPRI
 8007258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800725c:	f383 8811 	msr	BASEPRI, r3
 8007260:	f3bf 8f6f 	isb	sy
 8007264:	f3bf 8f4f 	dsb	sy
 8007268:	60fa      	str	r2, [r7, #12]
 800726a:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800726c:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800726e:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	617b      	str	r3, [r7, #20]
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007280:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8007282:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8007284:	4618      	mov	r0, r3
 8007286:	3724      	adds	r7, #36	@ 0x24
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b08e      	sub	sp, #56	@ 0x38
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800729a:	2300      	movs	r3, #0
 800729c:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 80072a2:	2300      	movs	r3, #0
 80072a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d10b      	bne.n	80072c4 <xEventGroupSetBits+0x34>
	__asm volatile
 80072ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b0:	f383 8811 	msr	BASEPRI, r3
 80072b4:	f3bf 8f6f 	isb	sy
 80072b8:	f3bf 8f4f 	dsb	sy
 80072bc:	613b      	str	r3, [r7, #16]
}
 80072be:	bf00      	nop
 80072c0:	bf00      	nop
 80072c2:	e7fd      	b.n	80072c0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80072ca:	d30b      	bcc.n	80072e4 <xEventGroupSetBits+0x54>
	__asm volatile
 80072cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d0:	f383 8811 	msr	BASEPRI, r3
 80072d4:	f3bf 8f6f 	isb	sy
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	60fb      	str	r3, [r7, #12]
}
 80072de:	bf00      	nop
 80072e0:	bf00      	nop
 80072e2:	e7fd      	b.n	80072e0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80072e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072e6:	3304      	adds	r3, #4
 80072e8:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ec:	3308      	adds	r3, #8
 80072ee:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80072f0:	f001 fb3a 	bl	8008968 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80072f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80072fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	431a      	orrs	r2, r3
 8007302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007304:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8007306:	e03c      	b.n	8007382 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8007308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800730e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8007314:	2300      	movs	r3, #0
 8007316:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800731e:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007326:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800732e:	2b00      	cmp	r3, #0
 8007330:	d108      	bne.n	8007344 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8007332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	4013      	ands	r3, r2
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00b      	beq.n	8007356 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800733e:	2301      	movs	r3, #1
 8007340:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007342:	e008      	b.n	8007356 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8007344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	4013      	ands	r3, r2
 800734c:	69ba      	ldr	r2, [r7, #24]
 800734e:	429a      	cmp	r2, r3
 8007350:	d101      	bne.n	8007356 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8007352:	2301      	movs	r3, #1
 8007354:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8007356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007358:	2b00      	cmp	r3, #0
 800735a:	d010      	beq.n	800737e <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d003      	beq.n	800736e <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8007366:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	4313      	orrs	r3, r2
 800736c:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800736e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007376:	4619      	mov	r1, r3
 8007378:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800737a:	f001 fdbd 	bl	8008ef8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8007382:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007384:	6a3b      	ldr	r3, [r7, #32]
 8007386:	429a      	cmp	r2, r3
 8007388:	d1be      	bne.n	8007308 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800738a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007390:	43db      	mvns	r3, r3
 8007392:	401a      	ands	r2, r3
 8007394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007396:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8007398:	f001 faf4 	bl	8008984 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800739c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800739e:	681b      	ldr	r3, [r3, #0]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3738      	adds	r7, #56	@ 0x38
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80073b2:	6839      	ldr	r1, [r7, #0]
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f7ff ff6b 	bl	8007290 <xEventGroupSetBits>
}
 80073ba:	bf00      	nop
 80073bc:	3708      	adds	r7, #8
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b082      	sub	sp, #8
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
 80073ca:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80073cc:	6839      	ldr	r1, [r7, #0]
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f7ff feec 	bl	80071ac <xEventGroupClearBits>
}
 80073d4:	bf00      	nop
 80073d6:	3708      	adds	r7, #8
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80073dc:	b480      	push	{r7}
 80073de:	b087      	sub	sp, #28
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80073e8:	2300      	movs	r3, #0
 80073ea:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d107      	bne.n	8007402 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	4013      	ands	r3, r2
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00a      	beq.n	8007412 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80073fc:	2301      	movs	r3, #1
 80073fe:	617b      	str	r3, [r7, #20]
 8007400:	e007      	b.n	8007412 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	4013      	ands	r3, r2
 8007408:	68ba      	ldr	r2, [r7, #8]
 800740a:	429a      	cmp	r2, r3
 800740c:	d101      	bne.n	8007412 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800740e:	2301      	movs	r3, #1
 8007410:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8007412:	697b      	ldr	r3, [r7, #20]
}
 8007414:	4618      	mov	r0, r3
 8007416:	371c      	adds	r7, #28
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	68ba      	ldr	r2, [r7, #8]
 8007430:	68f9      	ldr	r1, [r7, #12]
 8007432:	4804      	ldr	r0, [pc, #16]	@ (8007444 <xEventGroupSetBitsFromISR+0x24>)
 8007434:	f002 fc84 	bl	8009d40 <xTimerPendFunctionCallFromISR>
 8007438:	6178      	str	r0, [r7, #20]

		return xReturn;
 800743a:	697b      	ldr	r3, [r7, #20]
	}
 800743c:	4618      	mov	r0, r3
 800743e:	3718      	adds	r7, #24
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	080073a9 	.word	0x080073a9

08007448 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f103 0208 	add.w	r2, r3, #8
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f04f 32ff 	mov.w	r2, #4294967295
 8007460:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f103 0208 	add.w	r2, r3, #8
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f103 0208 	add.w	r2, r3, #8
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800747c:	bf00      	nop
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007496:	bf00      	nop
 8007498:	370c      	adds	r7, #12
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr

080074a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80074a2:	b480      	push	{r7}
 80074a4:	b085      	sub	sp, #20
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
 80074aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	689a      	ldr	r2, [r3, #8]
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	683a      	ldr	r2, [r7, #0]
 80074c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	683a      	ldr	r2, [r7, #0]
 80074cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	1c5a      	adds	r2, r3, #1
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	601a      	str	r2, [r3, #0]
}
 80074de:	bf00      	nop
 80074e0:	3714      	adds	r7, #20
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr

080074ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80074ea:	b480      	push	{r7}
 80074ec:	b085      	sub	sp, #20
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
 80074f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007500:	d103      	bne.n	800750a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	60fb      	str	r3, [r7, #12]
 8007508:	e00c      	b.n	8007524 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	3308      	adds	r3, #8
 800750e:	60fb      	str	r3, [r7, #12]
 8007510:	e002      	b.n	8007518 <vListInsert+0x2e>
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	60fb      	str	r3, [r7, #12]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68ba      	ldr	r2, [r7, #8]
 8007520:	429a      	cmp	r2, r3
 8007522:	d2f6      	bcs.n	8007512 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	685a      	ldr	r2, [r3, #4]
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	683a      	ldr	r2, [r7, #0]
 8007532:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	683a      	ldr	r2, [r7, #0]
 800753e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	1c5a      	adds	r2, r3, #1
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	601a      	str	r2, [r3, #0]
}
 8007550:	bf00      	nop
 8007552:	3714      	adds	r7, #20
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	6892      	ldr	r2, [r2, #8]
 8007572:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	6852      	ldr	r2, [r2, #4]
 800757c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	429a      	cmp	r2, r3
 8007586:	d103      	bne.n	8007590 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	689a      	ldr	r2, [r3, #8]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	1e5a      	subs	r2, r3, #1
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3714      	adds	r7, #20
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10b      	bne.n	80075dc <xQueueGenericReset+0x2c>
	__asm volatile
 80075c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c8:	f383 8811 	msr	BASEPRI, r3
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f3bf 8f4f 	dsb	sy
 80075d4:	60bb      	str	r3, [r7, #8]
}
 80075d6:	bf00      	nop
 80075d8:	bf00      	nop
 80075da:	e7fd      	b.n	80075d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80075dc:	f002 fd04 	bl	8009fe8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075e8:	68f9      	ldr	r1, [r7, #12]
 80075ea:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80075ec:	fb01 f303 	mul.w	r3, r1, r3
 80075f0:	441a      	add	r2, r3
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800760c:	3b01      	subs	r3, #1
 800760e:	68f9      	ldr	r1, [r7, #12]
 8007610:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007612:	fb01 f303 	mul.w	r3, r1, r3
 8007616:	441a      	add	r2, r3
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	22ff      	movs	r2, #255	@ 0xff
 8007620:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	22ff      	movs	r2, #255	@ 0xff
 8007628:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d114      	bne.n	800765c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d01a      	beq.n	8007670 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	3310      	adds	r3, #16
 800763e:	4618      	mov	r0, r3
 8007640:	f001 fbf6 	bl	8008e30 <xTaskRemoveFromEventList>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d012      	beq.n	8007670 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800764a:	4b0d      	ldr	r3, [pc, #52]	@ (8007680 <xQueueGenericReset+0xd0>)
 800764c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007650:	601a      	str	r2, [r3, #0]
 8007652:	f3bf 8f4f 	dsb	sy
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	e009      	b.n	8007670 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	3310      	adds	r3, #16
 8007660:	4618      	mov	r0, r3
 8007662:	f7ff fef1 	bl	8007448 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	3324      	adds	r3, #36	@ 0x24
 800766a:	4618      	mov	r0, r3
 800766c:	f7ff feec 	bl	8007448 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007670:	f002 fcec 	bl	800a04c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007674:	2301      	movs	r3, #1
}
 8007676:	4618      	mov	r0, r3
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	e000ed04 	.word	0xe000ed04

08007684 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007684:	b580      	push	{r7, lr}
 8007686:	b08e      	sub	sp, #56	@ 0x38
 8007688:	af02      	add	r7, sp, #8
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]
 8007690:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10b      	bne.n	80076b0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800769c:	f383 8811 	msr	BASEPRI, r3
 80076a0:	f3bf 8f6f 	isb	sy
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80076aa:	bf00      	nop
 80076ac:	bf00      	nop
 80076ae:	e7fd      	b.n	80076ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d10b      	bne.n	80076ce <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80076b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ba:	f383 8811 	msr	BASEPRI, r3
 80076be:	f3bf 8f6f 	isb	sy
 80076c2:	f3bf 8f4f 	dsb	sy
 80076c6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80076c8:	bf00      	nop
 80076ca:	bf00      	nop
 80076cc:	e7fd      	b.n	80076ca <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d002      	beq.n	80076da <xQueueGenericCreateStatic+0x56>
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d001      	beq.n	80076de <xQueueGenericCreateStatic+0x5a>
 80076da:	2301      	movs	r3, #1
 80076dc:	e000      	b.n	80076e0 <xQueueGenericCreateStatic+0x5c>
 80076de:	2300      	movs	r3, #0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d10b      	bne.n	80076fc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80076e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e8:	f383 8811 	msr	BASEPRI, r3
 80076ec:	f3bf 8f6f 	isb	sy
 80076f0:	f3bf 8f4f 	dsb	sy
 80076f4:	623b      	str	r3, [r7, #32]
}
 80076f6:	bf00      	nop
 80076f8:	bf00      	nop
 80076fa:	e7fd      	b.n	80076f8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d102      	bne.n	8007708 <xQueueGenericCreateStatic+0x84>
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d101      	bne.n	800770c <xQueueGenericCreateStatic+0x88>
 8007708:	2301      	movs	r3, #1
 800770a:	e000      	b.n	800770e <xQueueGenericCreateStatic+0x8a>
 800770c:	2300      	movs	r3, #0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d10b      	bne.n	800772a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007716:	f383 8811 	msr	BASEPRI, r3
 800771a:	f3bf 8f6f 	isb	sy
 800771e:	f3bf 8f4f 	dsb	sy
 8007722:	61fb      	str	r3, [r7, #28]
}
 8007724:	bf00      	nop
 8007726:	bf00      	nop
 8007728:	e7fd      	b.n	8007726 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800772a:	2350      	movs	r3, #80	@ 0x50
 800772c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	2b50      	cmp	r3, #80	@ 0x50
 8007732:	d00b      	beq.n	800774c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007738:	f383 8811 	msr	BASEPRI, r3
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	f3bf 8f4f 	dsb	sy
 8007744:	61bb      	str	r3, [r7, #24]
}
 8007746:	bf00      	nop
 8007748:	bf00      	nop
 800774a:	e7fd      	b.n	8007748 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800774c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00d      	beq.n	8007774 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800775a:	2201      	movs	r2, #1
 800775c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007760:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007766:	9300      	str	r3, [sp, #0]
 8007768:	4613      	mov	r3, r2
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	68b9      	ldr	r1, [r7, #8]
 800776e:	68f8      	ldr	r0, [r7, #12]
 8007770:	f000 f840 	bl	80077f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007776:	4618      	mov	r0, r3
 8007778:	3730      	adds	r7, #48	@ 0x30
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800777e:	b580      	push	{r7, lr}
 8007780:	b08a      	sub	sp, #40	@ 0x28
 8007782:	af02      	add	r7, sp, #8
 8007784:	60f8      	str	r0, [r7, #12]
 8007786:	60b9      	str	r1, [r7, #8]
 8007788:	4613      	mov	r3, r2
 800778a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d10b      	bne.n	80077aa <xQueueGenericCreate+0x2c>
	__asm volatile
 8007792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007796:	f383 8811 	msr	BASEPRI, r3
 800779a:	f3bf 8f6f 	isb	sy
 800779e:	f3bf 8f4f 	dsb	sy
 80077a2:	613b      	str	r3, [r7, #16]
}
 80077a4:	bf00      	nop
 80077a6:	bf00      	nop
 80077a8:	e7fd      	b.n	80077a6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	68ba      	ldr	r2, [r7, #8]
 80077ae:	fb02 f303 	mul.w	r3, r2, r3
 80077b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	3350      	adds	r3, #80	@ 0x50
 80077b8:	4618      	mov	r0, r3
 80077ba:	f002 fd37 	bl	800a22c <pvPortMalloc>
 80077be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d011      	beq.n	80077ea <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	3350      	adds	r3, #80	@ 0x50
 80077ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80077d8:	79fa      	ldrb	r2, [r7, #7]
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	9300      	str	r3, [sp, #0]
 80077de:	4613      	mov	r3, r2
 80077e0:	697a      	ldr	r2, [r7, #20]
 80077e2:	68b9      	ldr	r1, [r7, #8]
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f000 f805 	bl	80077f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80077ea:	69bb      	ldr	r3, [r7, #24]
	}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3720      	adds	r7, #32
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
 8007800:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d103      	bne.n	8007810 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	69ba      	ldr	r2, [r7, #24]
 800780c:	601a      	str	r2, [r3, #0]
 800780e:	e002      	b.n	8007816 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007822:	2101      	movs	r1, #1
 8007824:	69b8      	ldr	r0, [r7, #24]
 8007826:	f7ff fec3 	bl	80075b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	78fa      	ldrb	r2, [r7, #3]
 800782e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007832:	bf00      	nop
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800783a:	b580      	push	{r7, lr}
 800783c:	b082      	sub	sp, #8
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00e      	beq.n	8007866 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800785a:	2300      	movs	r3, #0
 800785c:	2200      	movs	r2, #0
 800785e:	2100      	movs	r1, #0
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 f8a3 	bl	80079ac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007866:	bf00      	nop
 8007868:	3708      	adds	r7, #8
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800786e:	b580      	push	{r7, lr}
 8007870:	b086      	sub	sp, #24
 8007872:	af00      	add	r7, sp, #0
 8007874:	4603      	mov	r3, r0
 8007876:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007878:	2301      	movs	r3, #1
 800787a:	617b      	str	r3, [r7, #20]
 800787c:	2300      	movs	r3, #0
 800787e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007880:	79fb      	ldrb	r3, [r7, #7]
 8007882:	461a      	mov	r2, r3
 8007884:	6939      	ldr	r1, [r7, #16]
 8007886:	6978      	ldr	r0, [r7, #20]
 8007888:	f7ff ff79 	bl	800777e <xQueueGenericCreate>
 800788c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	f7ff ffd3 	bl	800783a <prvInitialiseMutex>

		return xNewQueue;
 8007894:	68fb      	ldr	r3, [r7, #12]
	}
 8007896:	4618      	mov	r0, r3
 8007898:	3718      	adds	r7, #24
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b088      	sub	sp, #32
 80078a2:	af02      	add	r7, sp, #8
 80078a4:	4603      	mov	r3, r0
 80078a6:	6039      	str	r1, [r7, #0]
 80078a8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80078aa:	2301      	movs	r3, #1
 80078ac:	617b      	str	r3, [r7, #20]
 80078ae:	2300      	movs	r3, #0
 80078b0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80078b2:	79fb      	ldrb	r3, [r7, #7]
 80078b4:	9300      	str	r3, [sp, #0]
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	2200      	movs	r2, #0
 80078ba:	6939      	ldr	r1, [r7, #16]
 80078bc:	6978      	ldr	r0, [r7, #20]
 80078be:	f7ff fee1 	bl	8007684 <xQueueGenericCreateStatic>
 80078c2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80078c4:	68f8      	ldr	r0, [r7, #12]
 80078c6:	f7ff ffb8 	bl	800783a <prvInitialiseMutex>

		return xNewQueue;
 80078ca:	68fb      	ldr	r3, [r7, #12]
	}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3718      	adds	r7, #24
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80078d4:	b590      	push	{r4, r7, lr}
 80078d6:	b087      	sub	sp, #28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d10b      	bne.n	80078fe <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80078e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ea:	f383 8811 	msr	BASEPRI, r3
 80078ee:	f3bf 8f6f 	isb	sy
 80078f2:	f3bf 8f4f 	dsb	sy
 80078f6:	60fb      	str	r3, [r7, #12]
}
 80078f8:	bf00      	nop
 80078fa:	bf00      	nop
 80078fc:	e7fd      	b.n	80078fa <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	689c      	ldr	r4, [r3, #8]
 8007902:	f001 fcb9 	bl	8009278 <xTaskGetCurrentTaskHandle>
 8007906:	4603      	mov	r3, r0
 8007908:	429c      	cmp	r4, r3
 800790a:	d111      	bne.n	8007930 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	1e5a      	subs	r2, r3, #1
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d105      	bne.n	800792a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800791e:	2300      	movs	r3, #0
 8007920:	2200      	movs	r2, #0
 8007922:	2100      	movs	r1, #0
 8007924:	6938      	ldr	r0, [r7, #16]
 8007926:	f000 f841 	bl	80079ac <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800792a:	2301      	movs	r3, #1
 800792c:	617b      	str	r3, [r7, #20]
 800792e:	e001      	b.n	8007934 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007930:	2300      	movs	r3, #0
 8007932:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007934:	697b      	ldr	r3, [r7, #20]
	}
 8007936:	4618      	mov	r0, r3
 8007938:	371c      	adds	r7, #28
 800793a:	46bd      	mov	sp, r7
 800793c:	bd90      	pop	{r4, r7, pc}

0800793e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800793e:	b590      	push	{r4, r7, lr}
 8007940:	b087      	sub	sp, #28
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
 8007946:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d10b      	bne.n	800796a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8007952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007956:	f383 8811 	msr	BASEPRI, r3
 800795a:	f3bf 8f6f 	isb	sy
 800795e:	f3bf 8f4f 	dsb	sy
 8007962:	60fb      	str	r3, [r7, #12]
}
 8007964:	bf00      	nop
 8007966:	bf00      	nop
 8007968:	e7fd      	b.n	8007966 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	689c      	ldr	r4, [r3, #8]
 800796e:	f001 fc83 	bl	8009278 <xTaskGetCurrentTaskHandle>
 8007972:	4603      	mov	r3, r0
 8007974:	429c      	cmp	r4, r3
 8007976:	d107      	bne.n	8007988 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	1c5a      	adds	r2, r3, #1
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007982:	2301      	movs	r3, #1
 8007984:	617b      	str	r3, [r7, #20]
 8007986:	e00c      	b.n	80079a2 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007988:	6839      	ldr	r1, [r7, #0]
 800798a:	6938      	ldr	r0, [r7, #16]
 800798c:	f000 fa90 	bl	8007eb0 <xQueueSemaphoreTake>
 8007990:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d004      	beq.n	80079a2 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	1c5a      	adds	r2, r3, #1
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80079a2:	697b      	ldr	r3, [r7, #20]
	}
 80079a4:	4618      	mov	r0, r3
 80079a6:	371c      	adds	r7, #28
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd90      	pop	{r4, r7, pc}

080079ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b08e      	sub	sp, #56	@ 0x38
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	607a      	str	r2, [r7, #4]
 80079b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80079ba:	2300      	movs	r3, #0
 80079bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80079c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d10b      	bne.n	80079e0 <xQueueGenericSend+0x34>
	__asm volatile
 80079c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079cc:	f383 8811 	msr	BASEPRI, r3
 80079d0:	f3bf 8f6f 	isb	sy
 80079d4:	f3bf 8f4f 	dsb	sy
 80079d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80079da:	bf00      	nop
 80079dc:	bf00      	nop
 80079de:	e7fd      	b.n	80079dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d103      	bne.n	80079ee <xQueueGenericSend+0x42>
 80079e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d101      	bne.n	80079f2 <xQueueGenericSend+0x46>
 80079ee:	2301      	movs	r3, #1
 80079f0:	e000      	b.n	80079f4 <xQueueGenericSend+0x48>
 80079f2:	2300      	movs	r3, #0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d10b      	bne.n	8007a10 <xQueueGenericSend+0x64>
	__asm volatile
 80079f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079fc:	f383 8811 	msr	BASEPRI, r3
 8007a00:	f3bf 8f6f 	isb	sy
 8007a04:	f3bf 8f4f 	dsb	sy
 8007a08:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007a0a:	bf00      	nop
 8007a0c:	bf00      	nop
 8007a0e:	e7fd      	b.n	8007a0c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d103      	bne.n	8007a1e <xQueueGenericSend+0x72>
 8007a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d101      	bne.n	8007a22 <xQueueGenericSend+0x76>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e000      	b.n	8007a24 <xQueueGenericSend+0x78>
 8007a22:	2300      	movs	r3, #0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10b      	bne.n	8007a40 <xQueueGenericSend+0x94>
	__asm volatile
 8007a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a2c:	f383 8811 	msr	BASEPRI, r3
 8007a30:	f3bf 8f6f 	isb	sy
 8007a34:	f3bf 8f4f 	dsb	sy
 8007a38:	623b      	str	r3, [r7, #32]
}
 8007a3a:	bf00      	nop
 8007a3c:	bf00      	nop
 8007a3e:	e7fd      	b.n	8007a3c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a40:	f001 fc2a 	bl	8009298 <xTaskGetSchedulerState>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d102      	bne.n	8007a50 <xQueueGenericSend+0xa4>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d101      	bne.n	8007a54 <xQueueGenericSend+0xa8>
 8007a50:	2301      	movs	r3, #1
 8007a52:	e000      	b.n	8007a56 <xQueueGenericSend+0xaa>
 8007a54:	2300      	movs	r3, #0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d10b      	bne.n	8007a72 <xQueueGenericSend+0xc6>
	__asm volatile
 8007a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a5e:	f383 8811 	msr	BASEPRI, r3
 8007a62:	f3bf 8f6f 	isb	sy
 8007a66:	f3bf 8f4f 	dsb	sy
 8007a6a:	61fb      	str	r3, [r7, #28]
}
 8007a6c:	bf00      	nop
 8007a6e:	bf00      	nop
 8007a70:	e7fd      	b.n	8007a6e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a72:	f002 fab9 	bl	8009fe8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d302      	bcc.n	8007a88 <xQueueGenericSend+0xdc>
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d129      	bne.n	8007adc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a88:	683a      	ldr	r2, [r7, #0]
 8007a8a:	68b9      	ldr	r1, [r7, #8]
 8007a8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007a8e:	f000 fbb9 	bl	8008204 <prvCopyDataToQueue>
 8007a92:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d010      	beq.n	8007abe <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a9e:	3324      	adds	r3, #36	@ 0x24
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f001 f9c5 	bl	8008e30 <xTaskRemoveFromEventList>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d013      	beq.n	8007ad4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007aac:	4b3f      	ldr	r3, [pc, #252]	@ (8007bac <xQueueGenericSend+0x200>)
 8007aae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ab2:	601a      	str	r2, [r3, #0]
 8007ab4:	f3bf 8f4f 	dsb	sy
 8007ab8:	f3bf 8f6f 	isb	sy
 8007abc:	e00a      	b.n	8007ad4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d007      	beq.n	8007ad4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007ac4:	4b39      	ldr	r3, [pc, #228]	@ (8007bac <xQueueGenericSend+0x200>)
 8007ac6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007aca:	601a      	str	r2, [r3, #0]
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007ad4:	f002 faba 	bl	800a04c <vPortExitCritical>
				return pdPASS;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e063      	b.n	8007ba4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d103      	bne.n	8007aea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ae2:	f002 fab3 	bl	800a04c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	e05c      	b.n	8007ba4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d106      	bne.n	8007afe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007af0:	f107 0314 	add.w	r3, r7, #20
 8007af4:	4618      	mov	r0, r3
 8007af6:	f001 fa63 	bl	8008fc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007afa:	2301      	movs	r3, #1
 8007afc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007afe:	f002 faa5 	bl	800a04c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b02:	f000 ff31 	bl	8008968 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b06:	f002 fa6f 	bl	8009fe8 <vPortEnterCritical>
 8007b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b10:	b25b      	sxtb	r3, r3
 8007b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b16:	d103      	bne.n	8007b20 <xQueueGenericSend+0x174>
 8007b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b26:	b25b      	sxtb	r3, r3
 8007b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b2c:	d103      	bne.n	8007b36 <xQueueGenericSend+0x18a>
 8007b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b36:	f002 fa89 	bl	800a04c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b3a:	1d3a      	adds	r2, r7, #4
 8007b3c:	f107 0314 	add.w	r3, r7, #20
 8007b40:	4611      	mov	r1, r2
 8007b42:	4618      	mov	r0, r3
 8007b44:	f001 fa52 	bl	8008fec <xTaskCheckForTimeOut>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d124      	bne.n	8007b98 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007b4e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b50:	f000 fc50 	bl	80083f4 <prvIsQueueFull>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d018      	beq.n	8007b8c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b5c:	3310      	adds	r3, #16
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	4611      	mov	r1, r2
 8007b62:	4618      	mov	r0, r3
 8007b64:	f001 f8d4 	bl	8008d10 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007b68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b6a:	f000 fbdb 	bl	8008324 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007b6e:	f000 ff09 	bl	8008984 <xTaskResumeAll>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f47f af7c 	bne.w	8007a72 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8007bac <xQueueGenericSend+0x200>)
 8007b7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b80:	601a      	str	r2, [r3, #0]
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	f3bf 8f6f 	isb	sy
 8007b8a:	e772      	b.n	8007a72 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007b8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b8e:	f000 fbc9 	bl	8008324 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b92:	f000 fef7 	bl	8008984 <xTaskResumeAll>
 8007b96:	e76c      	b.n	8007a72 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007b98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b9a:	f000 fbc3 	bl	8008324 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b9e:	f000 fef1 	bl	8008984 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007ba2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3738      	adds	r7, #56	@ 0x38
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	e000ed04 	.word	0xe000ed04

08007bb0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b090      	sub	sp, #64	@ 0x40
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	607a      	str	r2, [r7, #4]
 8007bbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d10b      	bne.n	8007be0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bcc:	f383 8811 	msr	BASEPRI, r3
 8007bd0:	f3bf 8f6f 	isb	sy
 8007bd4:	f3bf 8f4f 	dsb	sy
 8007bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007bda:	bf00      	nop
 8007bdc:	bf00      	nop
 8007bde:	e7fd      	b.n	8007bdc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d103      	bne.n	8007bee <xQueueGenericSendFromISR+0x3e>
 8007be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d101      	bne.n	8007bf2 <xQueueGenericSendFromISR+0x42>
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e000      	b.n	8007bf4 <xQueueGenericSendFromISR+0x44>
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d10b      	bne.n	8007c10 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bfc:	f383 8811 	msr	BASEPRI, r3
 8007c00:	f3bf 8f6f 	isb	sy
 8007c04:	f3bf 8f4f 	dsb	sy
 8007c08:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007c0a:	bf00      	nop
 8007c0c:	bf00      	nop
 8007c0e:	e7fd      	b.n	8007c0c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	2b02      	cmp	r3, #2
 8007c14:	d103      	bne.n	8007c1e <xQueueGenericSendFromISR+0x6e>
 8007c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d101      	bne.n	8007c22 <xQueueGenericSendFromISR+0x72>
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e000      	b.n	8007c24 <xQueueGenericSendFromISR+0x74>
 8007c22:	2300      	movs	r3, #0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d10b      	bne.n	8007c40 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c2c:	f383 8811 	msr	BASEPRI, r3
 8007c30:	f3bf 8f6f 	isb	sy
 8007c34:	f3bf 8f4f 	dsb	sy
 8007c38:	623b      	str	r3, [r7, #32]
}
 8007c3a:	bf00      	nop
 8007c3c:	bf00      	nop
 8007c3e:	e7fd      	b.n	8007c3c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c40:	f002 fab2 	bl	800a1a8 <vPortValidateInterruptPriority>
	__asm volatile
 8007c44:	f3ef 8211 	mrs	r2, BASEPRI
 8007c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c4c:	f383 8811 	msr	BASEPRI, r3
 8007c50:	f3bf 8f6f 	isb	sy
 8007c54:	f3bf 8f4f 	dsb	sy
 8007c58:	61fa      	str	r2, [r7, #28]
 8007c5a:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8007c5c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c5e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d302      	bcc.n	8007c72 <xQueueGenericSendFromISR+0xc2>
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d12f      	bne.n	8007cd2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c74:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c78:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c82:	683a      	ldr	r2, [r7, #0]
 8007c84:	68b9      	ldr	r1, [r7, #8]
 8007c86:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007c88:	f000 fabc 	bl	8008204 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007c8c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c94:	d112      	bne.n	8007cbc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d016      	beq.n	8007ccc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca0:	3324      	adds	r3, #36	@ 0x24
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f001 f8c4 	bl	8008e30 <xTaskRemoveFromEventList>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00e      	beq.n	8007ccc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d00b      	beq.n	8007ccc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	601a      	str	r2, [r3, #0]
 8007cba:	e007      	b.n	8007ccc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007cbc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	b25a      	sxtb	r2, r3
 8007cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007cd0:	e001      	b.n	8007cd6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cd8:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	f383 8811 	msr	BASEPRI, r3
}
 8007ce0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3740      	adds	r7, #64	@ 0x40
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b08c      	sub	sp, #48	@ 0x30
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d10b      	bne.n	8007d1e <xQueueReceive+0x32>
	__asm volatile
 8007d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d0a:	f383 8811 	msr	BASEPRI, r3
 8007d0e:	f3bf 8f6f 	isb	sy
 8007d12:	f3bf 8f4f 	dsb	sy
 8007d16:	623b      	str	r3, [r7, #32]
}
 8007d18:	bf00      	nop
 8007d1a:	bf00      	nop
 8007d1c:	e7fd      	b.n	8007d1a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d103      	bne.n	8007d2c <xQueueReceive+0x40>
 8007d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d101      	bne.n	8007d30 <xQueueReceive+0x44>
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e000      	b.n	8007d32 <xQueueReceive+0x46>
 8007d30:	2300      	movs	r3, #0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d10b      	bne.n	8007d4e <xQueueReceive+0x62>
	__asm volatile
 8007d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d3a:	f383 8811 	msr	BASEPRI, r3
 8007d3e:	f3bf 8f6f 	isb	sy
 8007d42:	f3bf 8f4f 	dsb	sy
 8007d46:	61fb      	str	r3, [r7, #28]
}
 8007d48:	bf00      	nop
 8007d4a:	bf00      	nop
 8007d4c:	e7fd      	b.n	8007d4a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d4e:	f001 faa3 	bl	8009298 <xTaskGetSchedulerState>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d102      	bne.n	8007d5e <xQueueReceive+0x72>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d101      	bne.n	8007d62 <xQueueReceive+0x76>
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e000      	b.n	8007d64 <xQueueReceive+0x78>
 8007d62:	2300      	movs	r3, #0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d10b      	bne.n	8007d80 <xQueueReceive+0x94>
	__asm volatile
 8007d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d6c:	f383 8811 	msr	BASEPRI, r3
 8007d70:	f3bf 8f6f 	isb	sy
 8007d74:	f3bf 8f4f 	dsb	sy
 8007d78:	61bb      	str	r3, [r7, #24]
}
 8007d7a:	bf00      	nop
 8007d7c:	bf00      	nop
 8007d7e:	e7fd      	b.n	8007d7c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d80:	f002 f932 	bl	8009fe8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d88:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d01f      	beq.n	8007dd0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d90:	68b9      	ldr	r1, [r7, #8]
 8007d92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d94:	f000 faa0 	bl	80082d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d9a:	1e5a      	subs	r2, r3, #1
 8007d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d9e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00f      	beq.n	8007dc8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007daa:	3310      	adds	r3, #16
 8007dac:	4618      	mov	r0, r3
 8007dae:	f001 f83f 	bl	8008e30 <xTaskRemoveFromEventList>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d007      	beq.n	8007dc8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007db8:	4b3c      	ldr	r3, [pc, #240]	@ (8007eac <xQueueReceive+0x1c0>)
 8007dba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dbe:	601a      	str	r2, [r3, #0]
 8007dc0:	f3bf 8f4f 	dsb	sy
 8007dc4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007dc8:	f002 f940 	bl	800a04c <vPortExitCritical>
				return pdPASS;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e069      	b.n	8007ea4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d103      	bne.n	8007dde <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007dd6:	f002 f939 	bl	800a04c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	e062      	b.n	8007ea4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d106      	bne.n	8007df2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007de4:	f107 0310 	add.w	r3, r7, #16
 8007de8:	4618      	mov	r0, r3
 8007dea:	f001 f8e9 	bl	8008fc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007dee:	2301      	movs	r3, #1
 8007df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007df2:	f002 f92b 	bl	800a04c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007df6:	f000 fdb7 	bl	8008968 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007dfa:	f002 f8f5 	bl	8009fe8 <vPortEnterCritical>
 8007dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e04:	b25b      	sxtb	r3, r3
 8007e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e0a:	d103      	bne.n	8007e14 <xQueueReceive+0x128>
 8007e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e1a:	b25b      	sxtb	r3, r3
 8007e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e20:	d103      	bne.n	8007e2a <xQueueReceive+0x13e>
 8007e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e2a:	f002 f90f 	bl	800a04c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e2e:	1d3a      	adds	r2, r7, #4
 8007e30:	f107 0310 	add.w	r3, r7, #16
 8007e34:	4611      	mov	r1, r2
 8007e36:	4618      	mov	r0, r3
 8007e38:	f001 f8d8 	bl	8008fec <xTaskCheckForTimeOut>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d123      	bne.n	8007e8a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e44:	f000 fac0 	bl	80083c8 <prvIsQueueEmpty>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d017      	beq.n	8007e7e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e50:	3324      	adds	r3, #36	@ 0x24
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	4611      	mov	r1, r2
 8007e56:	4618      	mov	r0, r3
 8007e58:	f000 ff5a 	bl	8008d10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e5e:	f000 fa61 	bl	8008324 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007e62:	f000 fd8f 	bl	8008984 <xTaskResumeAll>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d189      	bne.n	8007d80 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8007eac <xQueueReceive+0x1c0>)
 8007e6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e72:	601a      	str	r2, [r3, #0]
 8007e74:	f3bf 8f4f 	dsb	sy
 8007e78:	f3bf 8f6f 	isb	sy
 8007e7c:	e780      	b.n	8007d80 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007e7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e80:	f000 fa50 	bl	8008324 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e84:	f000 fd7e 	bl	8008984 <xTaskResumeAll>
 8007e88:	e77a      	b.n	8007d80 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007e8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e8c:	f000 fa4a 	bl	8008324 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e90:	f000 fd78 	bl	8008984 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e96:	f000 fa97 	bl	80083c8 <prvIsQueueEmpty>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	f43f af6f 	beq.w	8007d80 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007ea2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3730      	adds	r7, #48	@ 0x30
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	e000ed04 	.word	0xe000ed04

08007eb0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b08e      	sub	sp, #56	@ 0x38
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d10b      	bne.n	8007ee4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed0:	f383 8811 	msr	BASEPRI, r3
 8007ed4:	f3bf 8f6f 	isb	sy
 8007ed8:	f3bf 8f4f 	dsb	sy
 8007edc:	623b      	str	r3, [r7, #32]
}
 8007ede:	bf00      	nop
 8007ee0:	bf00      	nop
 8007ee2:	e7fd      	b.n	8007ee0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d00b      	beq.n	8007f04 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef0:	f383 8811 	msr	BASEPRI, r3
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	f3bf 8f4f 	dsb	sy
 8007efc:	61fb      	str	r3, [r7, #28]
}
 8007efe:	bf00      	nop
 8007f00:	bf00      	nop
 8007f02:	e7fd      	b.n	8007f00 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f04:	f001 f9c8 	bl	8009298 <xTaskGetSchedulerState>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d102      	bne.n	8007f14 <xQueueSemaphoreTake+0x64>
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d101      	bne.n	8007f18 <xQueueSemaphoreTake+0x68>
 8007f14:	2301      	movs	r3, #1
 8007f16:	e000      	b.n	8007f1a <xQueueSemaphoreTake+0x6a>
 8007f18:	2300      	movs	r3, #0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d10b      	bne.n	8007f36 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f22:	f383 8811 	msr	BASEPRI, r3
 8007f26:	f3bf 8f6f 	isb	sy
 8007f2a:	f3bf 8f4f 	dsb	sy
 8007f2e:	61bb      	str	r3, [r7, #24]
}
 8007f30:	bf00      	nop
 8007f32:	bf00      	nop
 8007f34:	e7fd      	b.n	8007f32 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f36:	f002 f857 	bl	8009fe8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f3e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d024      	beq.n	8007f90 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f48:	1e5a      	subs	r2, r3, #1
 8007f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f4c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d104      	bne.n	8007f60 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007f56:	f001 fb31 	bl	80095bc <pvTaskIncrementMutexHeldCount>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f5e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00f      	beq.n	8007f88 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f6a:	3310      	adds	r3, #16
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f000 ff5f 	bl	8008e30 <xTaskRemoveFromEventList>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d007      	beq.n	8007f88 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007f78:	4b54      	ldr	r3, [pc, #336]	@ (80080cc <xQueueSemaphoreTake+0x21c>)
 8007f7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f7e:	601a      	str	r2, [r3, #0]
 8007f80:	f3bf 8f4f 	dsb	sy
 8007f84:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007f88:	f002 f860 	bl	800a04c <vPortExitCritical>
				return pdPASS;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e098      	b.n	80080c2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d112      	bne.n	8007fbc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00b      	beq.n	8007fb4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fa0:	f383 8811 	msr	BASEPRI, r3
 8007fa4:	f3bf 8f6f 	isb	sy
 8007fa8:	f3bf 8f4f 	dsb	sy
 8007fac:	617b      	str	r3, [r7, #20]
}
 8007fae:	bf00      	nop
 8007fb0:	bf00      	nop
 8007fb2:	e7fd      	b.n	8007fb0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007fb4:	f002 f84a 	bl	800a04c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	e082      	b.n	80080c2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d106      	bne.n	8007fd0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007fc2:	f107 030c 	add.w	r3, r7, #12
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f000 fffa 	bl	8008fc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007fd0:	f002 f83c 	bl	800a04c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007fd4:	f000 fcc8 	bl	8008968 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007fd8:	f002 f806 	bl	8009fe8 <vPortEnterCritical>
 8007fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fde:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007fe2:	b25b      	sxtb	r3, r3
 8007fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe8:	d103      	bne.n	8007ff2 <xQueueSemaphoreTake+0x142>
 8007fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ff4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ff8:	b25b      	sxtb	r3, r3
 8007ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ffe:	d103      	bne.n	8008008 <xQueueSemaphoreTake+0x158>
 8008000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008002:	2200      	movs	r2, #0
 8008004:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008008:	f002 f820 	bl	800a04c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800800c:	463a      	mov	r2, r7
 800800e:	f107 030c 	add.w	r3, r7, #12
 8008012:	4611      	mov	r1, r2
 8008014:	4618      	mov	r0, r3
 8008016:	f000 ffe9 	bl	8008fec <xTaskCheckForTimeOut>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d132      	bne.n	8008086 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008020:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008022:	f000 f9d1 	bl	80083c8 <prvIsQueueEmpty>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d026      	beq.n	800807a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800802c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d109      	bne.n	8008048 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008034:	f001 ffd8 	bl	8009fe8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	4618      	mov	r0, r3
 800803e:	f001 f949 	bl	80092d4 <xTaskPriorityInherit>
 8008042:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008044:	f002 f802 	bl	800a04c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800804a:	3324      	adds	r3, #36	@ 0x24
 800804c:	683a      	ldr	r2, [r7, #0]
 800804e:	4611      	mov	r1, r2
 8008050:	4618      	mov	r0, r3
 8008052:	f000 fe5d 	bl	8008d10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008056:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008058:	f000 f964 	bl	8008324 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800805c:	f000 fc92 	bl	8008984 <xTaskResumeAll>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	f47f af67 	bne.w	8007f36 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008068:	4b18      	ldr	r3, [pc, #96]	@ (80080cc <xQueueSemaphoreTake+0x21c>)
 800806a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800806e:	601a      	str	r2, [r3, #0]
 8008070:	f3bf 8f4f 	dsb	sy
 8008074:	f3bf 8f6f 	isb	sy
 8008078:	e75d      	b.n	8007f36 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800807a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800807c:	f000 f952 	bl	8008324 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008080:	f000 fc80 	bl	8008984 <xTaskResumeAll>
 8008084:	e757      	b.n	8007f36 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008086:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008088:	f000 f94c 	bl	8008324 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800808c:	f000 fc7a 	bl	8008984 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008090:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008092:	f000 f999 	bl	80083c8 <prvIsQueueEmpty>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	f43f af4c 	beq.w	8007f36 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800809e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00d      	beq.n	80080c0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80080a4:	f001 ffa0 	bl	8009fe8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80080a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80080aa:	f000 f893 	bl	80081d4 <prvGetDisinheritPriorityAfterTimeout>
 80080ae:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80080b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80080b6:	4618      	mov	r0, r3
 80080b8:	f001 f9e4 	bl	8009484 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80080bc:	f001 ffc6 	bl	800a04c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80080c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3738      	adds	r7, #56	@ 0x38
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	e000ed04 	.word	0xe000ed04

080080d0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b08e      	sub	sp, #56	@ 0x38
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80080e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d10b      	bne.n	80080fe <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80080e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ea:	f383 8811 	msr	BASEPRI, r3
 80080ee:	f3bf 8f6f 	isb	sy
 80080f2:	f3bf 8f4f 	dsb	sy
 80080f6:	623b      	str	r3, [r7, #32]
}
 80080f8:	bf00      	nop
 80080fa:	bf00      	nop
 80080fc:	e7fd      	b.n	80080fa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d103      	bne.n	800810c <xQueueReceiveFromISR+0x3c>
 8008104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008108:	2b00      	cmp	r3, #0
 800810a:	d101      	bne.n	8008110 <xQueueReceiveFromISR+0x40>
 800810c:	2301      	movs	r3, #1
 800810e:	e000      	b.n	8008112 <xQueueReceiveFromISR+0x42>
 8008110:	2300      	movs	r3, #0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d10b      	bne.n	800812e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8008116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800811a:	f383 8811 	msr	BASEPRI, r3
 800811e:	f3bf 8f6f 	isb	sy
 8008122:	f3bf 8f4f 	dsb	sy
 8008126:	61fb      	str	r3, [r7, #28]
}
 8008128:	bf00      	nop
 800812a:	bf00      	nop
 800812c:	e7fd      	b.n	800812a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800812e:	f002 f83b 	bl	800a1a8 <vPortValidateInterruptPriority>
	__asm volatile
 8008132:	f3ef 8211 	mrs	r2, BASEPRI
 8008136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800813a:	f383 8811 	msr	BASEPRI, r3
 800813e:	f3bf 8f6f 	isb	sy
 8008142:	f3bf 8f4f 	dsb	sy
 8008146:	61ba      	str	r2, [r7, #24]
 8008148:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800814a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800814c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800814e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008152:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008156:	2b00      	cmp	r3, #0
 8008158:	d02f      	beq.n	80081ba <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800815a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800815c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008160:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008164:	68b9      	ldr	r1, [r7, #8]
 8008166:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008168:	f000 f8b6 	bl	80082d8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800816c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800816e:	1e5a      	subs	r2, r3, #1
 8008170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008172:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008174:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800817c:	d112      	bne.n	80081a4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800817e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d016      	beq.n	80081b4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008188:	3310      	adds	r3, #16
 800818a:	4618      	mov	r0, r3
 800818c:	f000 fe50 	bl	8008e30 <xTaskRemoveFromEventList>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00e      	beq.n	80081b4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00b      	beq.n	80081b4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	601a      	str	r2, [r3, #0]
 80081a2:	e007      	b.n	80081b4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80081a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80081a8:	3301      	adds	r3, #1
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	b25a      	sxtb	r2, r3
 80081ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80081b4:	2301      	movs	r3, #1
 80081b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80081b8:	e001      	b.n	80081be <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80081ba:	2300      	movs	r3, #0
 80081bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80081be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081c0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	f383 8811 	msr	BASEPRI, r3
}
 80081c8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3738      	adds	r7, #56	@ 0x38
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d006      	beq.n	80081f2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80081ee:	60fb      	str	r3, [r7, #12]
 80081f0:	e001      	b.n	80081f6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80081f2:	2300      	movs	r3, #0
 80081f4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80081f6:	68fb      	ldr	r3, [r7, #12]
	}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3714      	adds	r7, #20
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008210:	2300      	movs	r3, #0
 8008212:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008218:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800821e:	2b00      	cmp	r3, #0
 8008220:	d10d      	bne.n	800823e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d14d      	bne.n	80082c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	4618      	mov	r0, r3
 8008230:	f001 f8b8 	bl	80093a4 <xTaskPriorityDisinherit>
 8008234:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2200      	movs	r2, #0
 800823a:	609a      	str	r2, [r3, #8]
 800823c:	e043      	b.n	80082c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d119      	bne.n	8008278 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6858      	ldr	r0, [r3, #4]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800824c:	461a      	mov	r2, r3
 800824e:	68b9      	ldr	r1, [r7, #8]
 8008250:	f002 fa44 	bl	800a6dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	685a      	ldr	r2, [r3, #4]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800825c:	441a      	add	r2, r3
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	685a      	ldr	r2, [r3, #4]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	429a      	cmp	r2, r3
 800826c:	d32b      	bcc.n	80082c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	605a      	str	r2, [r3, #4]
 8008276:	e026      	b.n	80082c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	68d8      	ldr	r0, [r3, #12]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008280:	461a      	mov	r2, r3
 8008282:	68b9      	ldr	r1, [r7, #8]
 8008284:	f002 fa2a 	bl	800a6dc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	68da      	ldr	r2, [r3, #12]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008290:	425b      	negs	r3, r3
 8008292:	441a      	add	r2, r3
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	68da      	ldr	r2, [r3, #12]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d207      	bcs.n	80082b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	689a      	ldr	r2, [r3, #8]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ac:	425b      	negs	r3, r3
 80082ae:	441a      	add	r2, r3
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	d105      	bne.n	80082c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d002      	beq.n	80082c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	3b01      	subs	r3, #1
 80082c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	1c5a      	adds	r2, r3, #1
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80082ce:	697b      	ldr	r3, [r7, #20]
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3718      	adds	r7, #24
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d018      	beq.n	800831c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	68da      	ldr	r2, [r3, #12]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082f2:	441a      	add	r2, r3
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	68da      	ldr	r2, [r3, #12]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	429a      	cmp	r2, r3
 8008302:	d303      	bcc.n	800830c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	68d9      	ldr	r1, [r3, #12]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008314:	461a      	mov	r2, r3
 8008316:	6838      	ldr	r0, [r7, #0]
 8008318:	f002 f9e0 	bl	800a6dc <memcpy>
	}
}
 800831c:	bf00      	nop
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800832c:	f001 fe5c 	bl	8009fe8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008336:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008338:	e011      	b.n	800835e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800833e:	2b00      	cmp	r3, #0
 8008340:	d012      	beq.n	8008368 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	3324      	adds	r3, #36	@ 0x24
 8008346:	4618      	mov	r0, r3
 8008348:	f000 fd72 	bl	8008e30 <xTaskRemoveFromEventList>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d001      	beq.n	8008356 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008352:	f000 feaf 	bl	80090b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008356:	7bfb      	ldrb	r3, [r7, #15]
 8008358:	3b01      	subs	r3, #1
 800835a:	b2db      	uxtb	r3, r3
 800835c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800835e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008362:	2b00      	cmp	r3, #0
 8008364:	dce9      	bgt.n	800833a <prvUnlockQueue+0x16>
 8008366:	e000      	b.n	800836a <prvUnlockQueue+0x46>
					break;
 8008368:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	22ff      	movs	r2, #255	@ 0xff
 800836e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008372:	f001 fe6b 	bl	800a04c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008376:	f001 fe37 	bl	8009fe8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008380:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008382:	e011      	b.n	80083a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d012      	beq.n	80083b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	3310      	adds	r3, #16
 8008390:	4618      	mov	r0, r3
 8008392:	f000 fd4d 	bl	8008e30 <xTaskRemoveFromEventList>
 8008396:	4603      	mov	r3, r0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d001      	beq.n	80083a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800839c:	f000 fe8a 	bl	80090b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80083a0:	7bbb      	ldrb	r3, [r7, #14]
 80083a2:	3b01      	subs	r3, #1
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80083a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	dce9      	bgt.n	8008384 <prvUnlockQueue+0x60>
 80083b0:	e000      	b.n	80083b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80083b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	22ff      	movs	r2, #255	@ 0xff
 80083b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80083bc:	f001 fe46 	bl	800a04c <vPortExitCritical>
}
 80083c0:	bf00      	nop
 80083c2:	3710      	adds	r7, #16
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80083d0:	f001 fe0a 	bl	8009fe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d102      	bne.n	80083e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80083dc:	2301      	movs	r3, #1
 80083de:	60fb      	str	r3, [r7, #12]
 80083e0:	e001      	b.n	80083e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80083e2:	2300      	movs	r3, #0
 80083e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083e6:	f001 fe31 	bl	800a04c <vPortExitCritical>

	return xReturn;
 80083ea:	68fb      	ldr	r3, [r7, #12]
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3710      	adds	r7, #16
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80083fc:	f001 fdf4 	bl	8009fe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008408:	429a      	cmp	r2, r3
 800840a:	d102      	bne.n	8008412 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800840c:	2301      	movs	r3, #1
 800840e:	60fb      	str	r3, [r7, #12]
 8008410:	e001      	b.n	8008416 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008412:	2300      	movs	r3, #0
 8008414:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008416:	f001 fe19 	bl	800a04c <vPortExitCritical>

	return xReturn;
 800841a:	68fb      	ldr	r3, [r7, #12]
}
 800841c:	4618      	mov	r0, r3
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800842e:	2300      	movs	r3, #0
 8008430:	60fb      	str	r3, [r7, #12]
 8008432:	e014      	b.n	800845e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008434:	4a0f      	ldr	r2, [pc, #60]	@ (8008474 <vQueueAddToRegistry+0x50>)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d10b      	bne.n	8008458 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008440:	490c      	ldr	r1, [pc, #48]	@ (8008474 <vQueueAddToRegistry+0x50>)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	683a      	ldr	r2, [r7, #0]
 8008446:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800844a:	4a0a      	ldr	r2, [pc, #40]	@ (8008474 <vQueueAddToRegistry+0x50>)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	00db      	lsls	r3, r3, #3
 8008450:	4413      	add	r3, r2
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008456:	e006      	b.n	8008466 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	3301      	adds	r3, #1
 800845c:	60fb      	str	r3, [r7, #12]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2b07      	cmp	r3, #7
 8008462:	d9e7      	bls.n	8008434 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008464:	bf00      	nop
 8008466:	bf00      	nop
 8008468:	3714      	adds	r7, #20
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr
 8008472:	bf00      	nop
 8008474:	20000dd4 	.word	0x20000dd4

08008478 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008478:	b580      	push	{r7, lr}
 800847a:	b086      	sub	sp, #24
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008488:	f001 fdae 	bl	8009fe8 <vPortEnterCritical>
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008492:	b25b      	sxtb	r3, r3
 8008494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008498:	d103      	bne.n	80084a2 <vQueueWaitForMessageRestricted+0x2a>
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	2200      	movs	r2, #0
 800849e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084a8:	b25b      	sxtb	r3, r3
 80084aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ae:	d103      	bne.n	80084b8 <vQueueWaitForMessageRestricted+0x40>
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80084b8:	f001 fdc8 	bl	800a04c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d106      	bne.n	80084d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	3324      	adds	r3, #36	@ 0x24
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	68b9      	ldr	r1, [r7, #8]
 80084cc:	4618      	mov	r0, r3
 80084ce:	f000 fc83 	bl	8008dd8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80084d2:	6978      	ldr	r0, [r7, #20]
 80084d4:	f7ff ff26 	bl	8008324 <prvUnlockQueue>
	}
 80084d8:	bf00      	nop
 80084da:	3718      	adds	r7, #24
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b08e      	sub	sp, #56	@ 0x38
 80084e4:	af04      	add	r7, sp, #16
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
 80084ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80084ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d10b      	bne.n	800850c <xTaskCreateStatic+0x2c>
	__asm volatile
 80084f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084f8:	f383 8811 	msr	BASEPRI, r3
 80084fc:	f3bf 8f6f 	isb	sy
 8008500:	f3bf 8f4f 	dsb	sy
 8008504:	623b      	str	r3, [r7, #32]
}
 8008506:	bf00      	nop
 8008508:	bf00      	nop
 800850a:	e7fd      	b.n	8008508 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800850c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800850e:	2b00      	cmp	r3, #0
 8008510:	d10b      	bne.n	800852a <xTaskCreateStatic+0x4a>
	__asm volatile
 8008512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008516:	f383 8811 	msr	BASEPRI, r3
 800851a:	f3bf 8f6f 	isb	sy
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	61fb      	str	r3, [r7, #28]
}
 8008524:	bf00      	nop
 8008526:	bf00      	nop
 8008528:	e7fd      	b.n	8008526 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800852a:	235c      	movs	r3, #92	@ 0x5c
 800852c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	2b5c      	cmp	r3, #92	@ 0x5c
 8008532:	d00b      	beq.n	800854c <xTaskCreateStatic+0x6c>
	__asm volatile
 8008534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008538:	f383 8811 	msr	BASEPRI, r3
 800853c:	f3bf 8f6f 	isb	sy
 8008540:	f3bf 8f4f 	dsb	sy
 8008544:	61bb      	str	r3, [r7, #24]
}
 8008546:	bf00      	nop
 8008548:	bf00      	nop
 800854a:	e7fd      	b.n	8008548 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800854c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800854e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008550:	2b00      	cmp	r3, #0
 8008552:	d01e      	beq.n	8008592 <xTaskCreateStatic+0xb2>
 8008554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008556:	2b00      	cmp	r3, #0
 8008558:	d01b      	beq.n	8008592 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800855a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800855c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800855e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008560:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008562:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008566:	2202      	movs	r2, #2
 8008568:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800856c:	2300      	movs	r3, #0
 800856e:	9303      	str	r3, [sp, #12]
 8008570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008572:	9302      	str	r3, [sp, #8]
 8008574:	f107 0314 	add.w	r3, r7, #20
 8008578:	9301      	str	r3, [sp, #4]
 800857a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800857c:	9300      	str	r3, [sp, #0]
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	68b9      	ldr	r1, [r7, #8]
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	f000 f850 	bl	800862a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800858a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800858c:	f000 f8de 	bl	800874c <prvAddNewTaskToReadyList>
 8008590:	e001      	b.n	8008596 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008592:	2300      	movs	r3, #0
 8008594:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008596:	697b      	ldr	r3, [r7, #20]
	}
 8008598:	4618      	mov	r0, r3
 800859a:	3728      	adds	r7, #40	@ 0x28
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b08c      	sub	sp, #48	@ 0x30
 80085a4:	af04      	add	r7, sp, #16
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	603b      	str	r3, [r7, #0]
 80085ac:	4613      	mov	r3, r2
 80085ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80085b0:	88fb      	ldrh	r3, [r7, #6]
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	4618      	mov	r0, r3
 80085b6:	f001 fe39 	bl	800a22c <pvPortMalloc>
 80085ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00e      	beq.n	80085e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80085c2:	205c      	movs	r0, #92	@ 0x5c
 80085c4:	f001 fe32 	bl	800a22c <pvPortMalloc>
 80085c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d003      	beq.n	80085d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	697a      	ldr	r2, [r7, #20]
 80085d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80085d6:	e005      	b.n	80085e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80085d8:	6978      	ldr	r0, [r7, #20]
 80085da:	f001 fef5 	bl	800a3c8 <vPortFree>
 80085de:	e001      	b.n	80085e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80085e0:	2300      	movs	r3, #0
 80085e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d017      	beq.n	800861a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	2200      	movs	r2, #0
 80085ee:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80085f2:	88fa      	ldrh	r2, [r7, #6]
 80085f4:	2300      	movs	r3, #0
 80085f6:	9303      	str	r3, [sp, #12]
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	9302      	str	r3, [sp, #8]
 80085fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085fe:	9301      	str	r3, [sp, #4]
 8008600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008602:	9300      	str	r3, [sp, #0]
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	68b9      	ldr	r1, [r7, #8]
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f000 f80e 	bl	800862a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800860e:	69f8      	ldr	r0, [r7, #28]
 8008610:	f000 f89c 	bl	800874c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008614:	2301      	movs	r3, #1
 8008616:	61bb      	str	r3, [r7, #24]
 8008618:	e002      	b.n	8008620 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800861a:	f04f 33ff 	mov.w	r3, #4294967295
 800861e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008620:	69bb      	ldr	r3, [r7, #24]
	}
 8008622:	4618      	mov	r0, r3
 8008624:	3720      	adds	r7, #32
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}

0800862a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800862a:	b580      	push	{r7, lr}
 800862c:	b088      	sub	sp, #32
 800862e:	af00      	add	r7, sp, #0
 8008630:	60f8      	str	r0, [r7, #12]
 8008632:	60b9      	str	r1, [r7, #8]
 8008634:	607a      	str	r2, [r7, #4]
 8008636:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800863a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	461a      	mov	r2, r3
 8008642:	21a5      	movs	r1, #165	@ 0xa5
 8008644:	f002 f816 	bl	800a674 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800864a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008652:	3b01      	subs	r3, #1
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	4413      	add	r3, r2
 8008658:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	f023 0307 	bic.w	r3, r3, #7
 8008660:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008662:	69bb      	ldr	r3, [r7, #24]
 8008664:	f003 0307 	and.w	r3, r3, #7
 8008668:	2b00      	cmp	r3, #0
 800866a:	d00b      	beq.n	8008684 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800866c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008670:	f383 8811 	msr	BASEPRI, r3
 8008674:	f3bf 8f6f 	isb	sy
 8008678:	f3bf 8f4f 	dsb	sy
 800867c:	617b      	str	r3, [r7, #20]
}
 800867e:	bf00      	nop
 8008680:	bf00      	nop
 8008682:	e7fd      	b.n	8008680 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d01f      	beq.n	80086ca <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800868a:	2300      	movs	r3, #0
 800868c:	61fb      	str	r3, [r7, #28]
 800868e:	e012      	b.n	80086b6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008690:	68ba      	ldr	r2, [r7, #8]
 8008692:	69fb      	ldr	r3, [r7, #28]
 8008694:	4413      	add	r3, r2
 8008696:	7819      	ldrb	r1, [r3, #0]
 8008698:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	4413      	add	r3, r2
 800869e:	3334      	adds	r3, #52	@ 0x34
 80086a0:	460a      	mov	r2, r1
 80086a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80086a4:	68ba      	ldr	r2, [r7, #8]
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	4413      	add	r3, r2
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d006      	beq.n	80086be <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	3301      	adds	r3, #1
 80086b4:	61fb      	str	r3, [r7, #28]
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	2b0f      	cmp	r3, #15
 80086ba:	d9e9      	bls.n	8008690 <prvInitialiseNewTask+0x66>
 80086bc:	e000      	b.n	80086c0 <prvInitialiseNewTask+0x96>
			{
				break;
 80086be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80086c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c2:	2200      	movs	r2, #0
 80086c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80086c8:	e003      	b.n	80086d2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80086ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086cc:	2200      	movs	r2, #0
 80086ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80086d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086d4:	2b37      	cmp	r3, #55	@ 0x37
 80086d6:	d901      	bls.n	80086dc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80086d8:	2337      	movs	r3, #55	@ 0x37
 80086da:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80086dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80086e0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80086e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80086e6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80086e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ea:	2200      	movs	r2, #0
 80086ec:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80086ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f0:	3304      	adds	r3, #4
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7fe fec8 	bl	8007488 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80086f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086fa:	3318      	adds	r3, #24
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7fe fec3 	bl	8007488 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008704:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008706:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800870a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800870e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008710:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008714:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008716:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800871a:	2200      	movs	r2, #0
 800871c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800871e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008720:	2200      	movs	r2, #0
 8008722:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008726:	683a      	ldr	r2, [r7, #0]
 8008728:	68f9      	ldr	r1, [r7, #12]
 800872a:	69b8      	ldr	r0, [r7, #24]
 800872c:	f001 fb28 	bl	8009d80 <pxPortInitialiseStack>
 8008730:	4602      	mov	r2, r0
 8008732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008734:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008738:	2b00      	cmp	r3, #0
 800873a:	d002      	beq.n	8008742 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800873c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800873e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008740:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008742:	bf00      	nop
 8008744:	3720      	adds	r7, #32
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
	...

0800874c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008754:	f001 fc48 	bl	8009fe8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008758:	4b2d      	ldr	r3, [pc, #180]	@ (8008810 <prvAddNewTaskToReadyList+0xc4>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	3301      	adds	r3, #1
 800875e:	4a2c      	ldr	r2, [pc, #176]	@ (8008810 <prvAddNewTaskToReadyList+0xc4>)
 8008760:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008762:	4b2c      	ldr	r3, [pc, #176]	@ (8008814 <prvAddNewTaskToReadyList+0xc8>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d109      	bne.n	800877e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800876a:	4a2a      	ldr	r2, [pc, #168]	@ (8008814 <prvAddNewTaskToReadyList+0xc8>)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008770:	4b27      	ldr	r3, [pc, #156]	@ (8008810 <prvAddNewTaskToReadyList+0xc4>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2b01      	cmp	r3, #1
 8008776:	d110      	bne.n	800879a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008778:	f000 fcc0 	bl	80090fc <prvInitialiseTaskLists>
 800877c:	e00d      	b.n	800879a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800877e:	4b26      	ldr	r3, [pc, #152]	@ (8008818 <prvAddNewTaskToReadyList+0xcc>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d109      	bne.n	800879a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008786:	4b23      	ldr	r3, [pc, #140]	@ (8008814 <prvAddNewTaskToReadyList+0xc8>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008790:	429a      	cmp	r2, r3
 8008792:	d802      	bhi.n	800879a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008794:	4a1f      	ldr	r2, [pc, #124]	@ (8008814 <prvAddNewTaskToReadyList+0xc8>)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800879a:	4b20      	ldr	r3, [pc, #128]	@ (800881c <prvAddNewTaskToReadyList+0xd0>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	3301      	adds	r3, #1
 80087a0:	4a1e      	ldr	r2, [pc, #120]	@ (800881c <prvAddNewTaskToReadyList+0xd0>)
 80087a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80087a4:	4b1d      	ldr	r3, [pc, #116]	@ (800881c <prvAddNewTaskToReadyList+0xd0>)
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087b0:	4b1b      	ldr	r3, [pc, #108]	@ (8008820 <prvAddNewTaskToReadyList+0xd4>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d903      	bls.n	80087c0 <prvAddNewTaskToReadyList+0x74>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087bc:	4a18      	ldr	r2, [pc, #96]	@ (8008820 <prvAddNewTaskToReadyList+0xd4>)
 80087be:	6013      	str	r3, [r2, #0]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087c4:	4613      	mov	r3, r2
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	4413      	add	r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	4a15      	ldr	r2, [pc, #84]	@ (8008824 <prvAddNewTaskToReadyList+0xd8>)
 80087ce:	441a      	add	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	3304      	adds	r3, #4
 80087d4:	4619      	mov	r1, r3
 80087d6:	4610      	mov	r0, r2
 80087d8:	f7fe fe63 	bl	80074a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80087dc:	f001 fc36 	bl	800a04c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80087e0:	4b0d      	ldr	r3, [pc, #52]	@ (8008818 <prvAddNewTaskToReadyList+0xcc>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00e      	beq.n	8008806 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80087e8:	4b0a      	ldr	r3, [pc, #40]	@ (8008814 <prvAddNewTaskToReadyList+0xc8>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d207      	bcs.n	8008806 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80087f6:	4b0c      	ldr	r3, [pc, #48]	@ (8008828 <prvAddNewTaskToReadyList+0xdc>)
 80087f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087fc:	601a      	str	r2, [r3, #0]
 80087fe:	f3bf 8f4f 	dsb	sy
 8008802:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008806:	bf00      	nop
 8008808:	3708      	adds	r7, #8
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	200012e8 	.word	0x200012e8
 8008814:	20000e14 	.word	0x20000e14
 8008818:	200012f4 	.word	0x200012f4
 800881c:	20001304 	.word	0x20001304
 8008820:	200012f0 	.word	0x200012f0
 8008824:	20000e18 	.word	0x20000e18
 8008828:	e000ed04 	.word	0xe000ed04

0800882c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008834:	2300      	movs	r3, #0
 8008836:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d018      	beq.n	8008870 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800883e:	4b14      	ldr	r3, [pc, #80]	@ (8008890 <vTaskDelay+0x64>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d00b      	beq.n	800885e <vTaskDelay+0x32>
	__asm volatile
 8008846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800884a:	f383 8811 	msr	BASEPRI, r3
 800884e:	f3bf 8f6f 	isb	sy
 8008852:	f3bf 8f4f 	dsb	sy
 8008856:	60bb      	str	r3, [r7, #8]
}
 8008858:	bf00      	nop
 800885a:	bf00      	nop
 800885c:	e7fd      	b.n	800885a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800885e:	f000 f883 	bl	8008968 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008862:	2100      	movs	r1, #0
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 febd 	bl	80095e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800886a:	f000 f88b 	bl	8008984 <xTaskResumeAll>
 800886e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d107      	bne.n	8008886 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008876:	4b07      	ldr	r3, [pc, #28]	@ (8008894 <vTaskDelay+0x68>)
 8008878:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800887c:	601a      	str	r2, [r3, #0]
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008886:	bf00      	nop
 8008888:	3710      	adds	r7, #16
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	20001310 	.word	0x20001310
 8008894:	e000ed04 	.word	0xe000ed04

08008898 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b08a      	sub	sp, #40	@ 0x28
 800889c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800889e:	2300      	movs	r3, #0
 80088a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80088a2:	2300      	movs	r3, #0
 80088a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80088a6:	463a      	mov	r2, r7
 80088a8:	1d39      	adds	r1, r7, #4
 80088aa:	f107 0308 	add.w	r3, r7, #8
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fe fb22 	bl	8006ef8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80088b4:	6839      	ldr	r1, [r7, #0]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	68ba      	ldr	r2, [r7, #8]
 80088ba:	9202      	str	r2, [sp, #8]
 80088bc:	9301      	str	r3, [sp, #4]
 80088be:	2300      	movs	r3, #0
 80088c0:	9300      	str	r3, [sp, #0]
 80088c2:	2300      	movs	r3, #0
 80088c4:	460a      	mov	r2, r1
 80088c6:	4922      	ldr	r1, [pc, #136]	@ (8008950 <vTaskStartScheduler+0xb8>)
 80088c8:	4822      	ldr	r0, [pc, #136]	@ (8008954 <vTaskStartScheduler+0xbc>)
 80088ca:	f7ff fe09 	bl	80084e0 <xTaskCreateStatic>
 80088ce:	4603      	mov	r3, r0
 80088d0:	4a21      	ldr	r2, [pc, #132]	@ (8008958 <vTaskStartScheduler+0xc0>)
 80088d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80088d4:	4b20      	ldr	r3, [pc, #128]	@ (8008958 <vTaskStartScheduler+0xc0>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d002      	beq.n	80088e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80088dc:	2301      	movs	r3, #1
 80088de:	617b      	str	r3, [r7, #20]
 80088e0:	e001      	b.n	80088e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80088e2:	2300      	movs	r3, #0
 80088e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d102      	bne.n	80088f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80088ec:	f000 fece 	bl	800968c <xTimerCreateTimerTask>
 80088f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d116      	bne.n	8008926 <vTaskStartScheduler+0x8e>
	__asm volatile
 80088f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088fc:	f383 8811 	msr	BASEPRI, r3
 8008900:	f3bf 8f6f 	isb	sy
 8008904:	f3bf 8f4f 	dsb	sy
 8008908:	613b      	str	r3, [r7, #16]
}
 800890a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800890c:	4b13      	ldr	r3, [pc, #76]	@ (800895c <vTaskStartScheduler+0xc4>)
 800890e:	f04f 32ff 	mov.w	r2, #4294967295
 8008912:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008914:	4b12      	ldr	r3, [pc, #72]	@ (8008960 <vTaskStartScheduler+0xc8>)
 8008916:	2201      	movs	r2, #1
 8008918:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800891a:	4b12      	ldr	r3, [pc, #72]	@ (8008964 <vTaskStartScheduler+0xcc>)
 800891c:	2200      	movs	r2, #0
 800891e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008920:	f001 fabe 	bl	8009ea0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008924:	e00f      	b.n	8008946 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800892c:	d10b      	bne.n	8008946 <vTaskStartScheduler+0xae>
	__asm volatile
 800892e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008932:	f383 8811 	msr	BASEPRI, r3
 8008936:	f3bf 8f6f 	isb	sy
 800893a:	f3bf 8f4f 	dsb	sy
 800893e:	60fb      	str	r3, [r7, #12]
}
 8008940:	bf00      	nop
 8008942:	bf00      	nop
 8008944:	e7fd      	b.n	8008942 <vTaskStartScheduler+0xaa>
}
 8008946:	bf00      	nop
 8008948:	3718      	adds	r7, #24
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	0800b190 	.word	0x0800b190
 8008954:	080090cd 	.word	0x080090cd
 8008958:	2000130c 	.word	0x2000130c
 800895c:	20001308 	.word	0x20001308
 8008960:	200012f4 	.word	0x200012f4
 8008964:	200012ec 	.word	0x200012ec

08008968 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008968:	b480      	push	{r7}
 800896a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800896c:	4b04      	ldr	r3, [pc, #16]	@ (8008980 <vTaskSuspendAll+0x18>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	3301      	adds	r3, #1
 8008972:	4a03      	ldr	r2, [pc, #12]	@ (8008980 <vTaskSuspendAll+0x18>)
 8008974:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008976:	bf00      	nop
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr
 8008980:	20001310 	.word	0x20001310

08008984 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800898a:	2300      	movs	r3, #0
 800898c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800898e:	2300      	movs	r3, #0
 8008990:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008992:	4b42      	ldr	r3, [pc, #264]	@ (8008a9c <xTaskResumeAll+0x118>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d10b      	bne.n	80089b2 <xTaskResumeAll+0x2e>
	__asm volatile
 800899a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800899e:	f383 8811 	msr	BASEPRI, r3
 80089a2:	f3bf 8f6f 	isb	sy
 80089a6:	f3bf 8f4f 	dsb	sy
 80089aa:	603b      	str	r3, [r7, #0]
}
 80089ac:	bf00      	nop
 80089ae:	bf00      	nop
 80089b0:	e7fd      	b.n	80089ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80089b2:	f001 fb19 	bl	8009fe8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80089b6:	4b39      	ldr	r3, [pc, #228]	@ (8008a9c <xTaskResumeAll+0x118>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	3b01      	subs	r3, #1
 80089bc:	4a37      	ldr	r2, [pc, #220]	@ (8008a9c <xTaskResumeAll+0x118>)
 80089be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089c0:	4b36      	ldr	r3, [pc, #216]	@ (8008a9c <xTaskResumeAll+0x118>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d162      	bne.n	8008a8e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80089c8:	4b35      	ldr	r3, [pc, #212]	@ (8008aa0 <xTaskResumeAll+0x11c>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d05e      	beq.n	8008a8e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089d0:	e02f      	b.n	8008a32 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089d2:	4b34      	ldr	r3, [pc, #208]	@ (8008aa4 <xTaskResumeAll+0x120>)
 80089d4:	68db      	ldr	r3, [r3, #12]
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	3318      	adds	r3, #24
 80089de:	4618      	mov	r0, r3
 80089e0:	f7fe fdbc 	bl	800755c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	3304      	adds	r3, #4
 80089e8:	4618      	mov	r0, r3
 80089ea:	f7fe fdb7 	bl	800755c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089f2:	4b2d      	ldr	r3, [pc, #180]	@ (8008aa8 <xTaskResumeAll+0x124>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d903      	bls.n	8008a02 <xTaskResumeAll+0x7e>
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089fe:	4a2a      	ldr	r2, [pc, #168]	@ (8008aa8 <xTaskResumeAll+0x124>)
 8008a00:	6013      	str	r3, [r2, #0]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a06:	4613      	mov	r3, r2
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	4413      	add	r3, r2
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	4a27      	ldr	r2, [pc, #156]	@ (8008aac <xTaskResumeAll+0x128>)
 8008a10:	441a      	add	r2, r3
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	3304      	adds	r3, #4
 8008a16:	4619      	mov	r1, r3
 8008a18:	4610      	mov	r0, r2
 8008a1a:	f7fe fd42 	bl	80074a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a22:	4b23      	ldr	r3, [pc, #140]	@ (8008ab0 <xTaskResumeAll+0x12c>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d302      	bcc.n	8008a32 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008a2c:	4b21      	ldr	r3, [pc, #132]	@ (8008ab4 <xTaskResumeAll+0x130>)
 8008a2e:	2201      	movs	r2, #1
 8008a30:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a32:	4b1c      	ldr	r3, [pc, #112]	@ (8008aa4 <xTaskResumeAll+0x120>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d1cb      	bne.n	80089d2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d001      	beq.n	8008a44 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008a40:	f000 fbfa 	bl	8009238 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008a44:	4b1c      	ldr	r3, [pc, #112]	@ (8008ab8 <xTaskResumeAll+0x134>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d010      	beq.n	8008a72 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008a50:	f000 f846 	bl	8008ae0 <xTaskIncrementTick>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d002      	beq.n	8008a60 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008a5a:	4b16      	ldr	r3, [pc, #88]	@ (8008ab4 <xTaskResumeAll+0x130>)
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	3b01      	subs	r3, #1
 8008a64:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d1f1      	bne.n	8008a50 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008a6c:	4b12      	ldr	r3, [pc, #72]	@ (8008ab8 <xTaskResumeAll+0x134>)
 8008a6e:	2200      	movs	r2, #0
 8008a70:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a72:	4b10      	ldr	r3, [pc, #64]	@ (8008ab4 <xTaskResumeAll+0x130>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d009      	beq.n	8008a8e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8008abc <xTaskResumeAll+0x138>)
 8008a80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a84:	601a      	str	r2, [r3, #0]
 8008a86:	f3bf 8f4f 	dsb	sy
 8008a8a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a8e:	f001 fadd 	bl	800a04c <vPortExitCritical>

	return xAlreadyYielded;
 8008a92:	68bb      	ldr	r3, [r7, #8]
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3710      	adds	r7, #16
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	20001310 	.word	0x20001310
 8008aa0:	200012e8 	.word	0x200012e8
 8008aa4:	200012a8 	.word	0x200012a8
 8008aa8:	200012f0 	.word	0x200012f0
 8008aac:	20000e18 	.word	0x20000e18
 8008ab0:	20000e14 	.word	0x20000e14
 8008ab4:	200012fc 	.word	0x200012fc
 8008ab8:	200012f8 	.word	0x200012f8
 8008abc:	e000ed04 	.word	0xe000ed04

08008ac0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b083      	sub	sp, #12
 8008ac4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008ac6:	4b05      	ldr	r3, [pc, #20]	@ (8008adc <xTaskGetTickCount+0x1c>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008acc:	687b      	ldr	r3, [r7, #4]
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	370c      	adds	r7, #12
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr
 8008ada:	bf00      	nop
 8008adc:	200012ec 	.word	0x200012ec

08008ae0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b086      	sub	sp, #24
 8008ae4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008aea:	4b4f      	ldr	r3, [pc, #316]	@ (8008c28 <xTaskIncrementTick+0x148>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	f040 8090 	bne.w	8008c14 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008af4:	4b4d      	ldr	r3, [pc, #308]	@ (8008c2c <xTaskIncrementTick+0x14c>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	3301      	adds	r3, #1
 8008afa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008afc:	4a4b      	ldr	r2, [pc, #300]	@ (8008c2c <xTaskIncrementTick+0x14c>)
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d121      	bne.n	8008b4c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008b08:	4b49      	ldr	r3, [pc, #292]	@ (8008c30 <xTaskIncrementTick+0x150>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d00b      	beq.n	8008b2a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b16:	f383 8811 	msr	BASEPRI, r3
 8008b1a:	f3bf 8f6f 	isb	sy
 8008b1e:	f3bf 8f4f 	dsb	sy
 8008b22:	603b      	str	r3, [r7, #0]
}
 8008b24:	bf00      	nop
 8008b26:	bf00      	nop
 8008b28:	e7fd      	b.n	8008b26 <xTaskIncrementTick+0x46>
 8008b2a:	4b41      	ldr	r3, [pc, #260]	@ (8008c30 <xTaskIncrementTick+0x150>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	60fb      	str	r3, [r7, #12]
 8008b30:	4b40      	ldr	r3, [pc, #256]	@ (8008c34 <xTaskIncrementTick+0x154>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a3e      	ldr	r2, [pc, #248]	@ (8008c30 <xTaskIncrementTick+0x150>)
 8008b36:	6013      	str	r3, [r2, #0]
 8008b38:	4a3e      	ldr	r2, [pc, #248]	@ (8008c34 <xTaskIncrementTick+0x154>)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6013      	str	r3, [r2, #0]
 8008b3e:	4b3e      	ldr	r3, [pc, #248]	@ (8008c38 <xTaskIncrementTick+0x158>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	3301      	adds	r3, #1
 8008b44:	4a3c      	ldr	r2, [pc, #240]	@ (8008c38 <xTaskIncrementTick+0x158>)
 8008b46:	6013      	str	r3, [r2, #0]
 8008b48:	f000 fb76 	bl	8009238 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008b4c:	4b3b      	ldr	r3, [pc, #236]	@ (8008c3c <xTaskIncrementTick+0x15c>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	693a      	ldr	r2, [r7, #16]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d349      	bcc.n	8008bea <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b56:	4b36      	ldr	r3, [pc, #216]	@ (8008c30 <xTaskIncrementTick+0x150>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d104      	bne.n	8008b6a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b60:	4b36      	ldr	r3, [pc, #216]	@ (8008c3c <xTaskIncrementTick+0x15c>)
 8008b62:	f04f 32ff 	mov.w	r2, #4294967295
 8008b66:	601a      	str	r2, [r3, #0]
					break;
 8008b68:	e03f      	b.n	8008bea <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b6a:	4b31      	ldr	r3, [pc, #196]	@ (8008c30 <xTaskIncrementTick+0x150>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	68db      	ldr	r3, [r3, #12]
 8008b70:	68db      	ldr	r3, [r3, #12]
 8008b72:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b7a:	693a      	ldr	r2, [r7, #16]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d203      	bcs.n	8008b8a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b82:	4a2e      	ldr	r2, [pc, #184]	@ (8008c3c <xTaskIncrementTick+0x15c>)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b88:	e02f      	b.n	8008bea <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	3304      	adds	r3, #4
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7fe fce4 	bl	800755c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d004      	beq.n	8008ba6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	3318      	adds	r3, #24
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f7fe fcdb 	bl	800755c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008baa:	4b25      	ldr	r3, [pc, #148]	@ (8008c40 <xTaskIncrementTick+0x160>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d903      	bls.n	8008bba <xTaskIncrementTick+0xda>
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bb6:	4a22      	ldr	r2, [pc, #136]	@ (8008c40 <xTaskIncrementTick+0x160>)
 8008bb8:	6013      	str	r3, [r2, #0]
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	4413      	add	r3, r2
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	4a1f      	ldr	r2, [pc, #124]	@ (8008c44 <xTaskIncrementTick+0x164>)
 8008bc8:	441a      	add	r2, r3
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	3304      	adds	r3, #4
 8008bce:	4619      	mov	r1, r3
 8008bd0:	4610      	mov	r0, r2
 8008bd2:	f7fe fc66 	bl	80074a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bda:	4b1b      	ldr	r3, [pc, #108]	@ (8008c48 <xTaskIncrementTick+0x168>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d3b8      	bcc.n	8008b56 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008be4:	2301      	movs	r3, #1
 8008be6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008be8:	e7b5      	b.n	8008b56 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008bea:	4b17      	ldr	r3, [pc, #92]	@ (8008c48 <xTaskIncrementTick+0x168>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bf0:	4914      	ldr	r1, [pc, #80]	@ (8008c44 <xTaskIncrementTick+0x164>)
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	4413      	add	r3, r2
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	440b      	add	r3, r1
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d901      	bls.n	8008c06 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008c02:	2301      	movs	r3, #1
 8008c04:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008c06:	4b11      	ldr	r3, [pc, #68]	@ (8008c4c <xTaskIncrementTick+0x16c>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d007      	beq.n	8008c1e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	617b      	str	r3, [r7, #20]
 8008c12:	e004      	b.n	8008c1e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008c14:	4b0e      	ldr	r3, [pc, #56]	@ (8008c50 <xTaskIncrementTick+0x170>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	3301      	adds	r3, #1
 8008c1a:	4a0d      	ldr	r2, [pc, #52]	@ (8008c50 <xTaskIncrementTick+0x170>)
 8008c1c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008c1e:	697b      	ldr	r3, [r7, #20]
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3718      	adds	r7, #24
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	20001310 	.word	0x20001310
 8008c2c:	200012ec 	.word	0x200012ec
 8008c30:	200012a0 	.word	0x200012a0
 8008c34:	200012a4 	.word	0x200012a4
 8008c38:	20001300 	.word	0x20001300
 8008c3c:	20001308 	.word	0x20001308
 8008c40:	200012f0 	.word	0x200012f0
 8008c44:	20000e18 	.word	0x20000e18
 8008c48:	20000e14 	.word	0x20000e14
 8008c4c:	200012fc 	.word	0x200012fc
 8008c50:	200012f8 	.word	0x200012f8

08008c54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c5a:	4b28      	ldr	r3, [pc, #160]	@ (8008cfc <vTaskSwitchContext+0xa8>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d003      	beq.n	8008c6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c62:	4b27      	ldr	r3, [pc, #156]	@ (8008d00 <vTaskSwitchContext+0xac>)
 8008c64:	2201      	movs	r2, #1
 8008c66:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c68:	e042      	b.n	8008cf0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008c6a:	4b25      	ldr	r3, [pc, #148]	@ (8008d00 <vTaskSwitchContext+0xac>)
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c70:	4b24      	ldr	r3, [pc, #144]	@ (8008d04 <vTaskSwitchContext+0xb0>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	60fb      	str	r3, [r7, #12]
 8008c76:	e011      	b.n	8008c9c <vTaskSwitchContext+0x48>
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d10b      	bne.n	8008c96 <vTaskSwitchContext+0x42>
	__asm volatile
 8008c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c82:	f383 8811 	msr	BASEPRI, r3
 8008c86:	f3bf 8f6f 	isb	sy
 8008c8a:	f3bf 8f4f 	dsb	sy
 8008c8e:	607b      	str	r3, [r7, #4]
}
 8008c90:	bf00      	nop
 8008c92:	bf00      	nop
 8008c94:	e7fd      	b.n	8008c92 <vTaskSwitchContext+0x3e>
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	3b01      	subs	r3, #1
 8008c9a:	60fb      	str	r3, [r7, #12]
 8008c9c:	491a      	ldr	r1, [pc, #104]	@ (8008d08 <vTaskSwitchContext+0xb4>)
 8008c9e:	68fa      	ldr	r2, [r7, #12]
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	4413      	add	r3, r2
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	440b      	add	r3, r1
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d0e3      	beq.n	8008c78 <vTaskSwitchContext+0x24>
 8008cb0:	68fa      	ldr	r2, [r7, #12]
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	4413      	add	r3, r2
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	4a13      	ldr	r2, [pc, #76]	@ (8008d08 <vTaskSwitchContext+0xb4>)
 8008cbc:	4413      	add	r3, r2
 8008cbe:	60bb      	str	r3, [r7, #8]
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	685a      	ldr	r2, [r3, #4]
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	605a      	str	r2, [r3, #4]
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	685a      	ldr	r2, [r3, #4]
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	3308      	adds	r3, #8
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d104      	bne.n	8008ce0 <vTaskSwitchContext+0x8c>
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	685a      	ldr	r2, [r3, #4]
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	605a      	str	r2, [r3, #4]
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	68db      	ldr	r3, [r3, #12]
 8008ce6:	4a09      	ldr	r2, [pc, #36]	@ (8008d0c <vTaskSwitchContext+0xb8>)
 8008ce8:	6013      	str	r3, [r2, #0]
 8008cea:	4a06      	ldr	r2, [pc, #24]	@ (8008d04 <vTaskSwitchContext+0xb0>)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6013      	str	r3, [r2, #0]
}
 8008cf0:	bf00      	nop
 8008cf2:	3714      	adds	r7, #20
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr
 8008cfc:	20001310 	.word	0x20001310
 8008d00:	200012fc 	.word	0x200012fc
 8008d04:	200012f0 	.word	0x200012f0
 8008d08:	20000e18 	.word	0x20000e18
 8008d0c:	20000e14 	.word	0x20000e14

08008d10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d10b      	bne.n	8008d38 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d24:	f383 8811 	msr	BASEPRI, r3
 8008d28:	f3bf 8f6f 	isb	sy
 8008d2c:	f3bf 8f4f 	dsb	sy
 8008d30:	60fb      	str	r3, [r7, #12]
}
 8008d32:	bf00      	nop
 8008d34:	bf00      	nop
 8008d36:	e7fd      	b.n	8008d34 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d38:	4b07      	ldr	r3, [pc, #28]	@ (8008d58 <vTaskPlaceOnEventList+0x48>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	3318      	adds	r3, #24
 8008d3e:	4619      	mov	r1, r3
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f7fe fbd2 	bl	80074ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d46:	2101      	movs	r1, #1
 8008d48:	6838      	ldr	r0, [r7, #0]
 8008d4a:	f000 fc4b 	bl	80095e4 <prvAddCurrentTaskToDelayedList>
}
 8008d4e:	bf00      	nop
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	20000e14 	.word	0x20000e14

08008d5c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b086      	sub	sp, #24
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d10b      	bne.n	8008d86 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8008d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d72:	f383 8811 	msr	BASEPRI, r3
 8008d76:	f3bf 8f6f 	isb	sy
 8008d7a:	f3bf 8f4f 	dsb	sy
 8008d7e:	617b      	str	r3, [r7, #20]
}
 8008d80:	bf00      	nop
 8008d82:	bf00      	nop
 8008d84:	e7fd      	b.n	8008d82 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8008d86:	4b12      	ldr	r3, [pc, #72]	@ (8008dd0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d10b      	bne.n	8008da6 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8008d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d92:	f383 8811 	msr	BASEPRI, r3
 8008d96:	f3bf 8f6f 	isb	sy
 8008d9a:	f3bf 8f4f 	dsb	sy
 8008d9e:	613b      	str	r3, [r7, #16]
}
 8008da0:	bf00      	nop
 8008da2:	bf00      	nop
 8008da4:	e7fd      	b.n	8008da2 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008da6:	4b0b      	ldr	r3, [pc, #44]	@ (8008dd4 <vTaskPlaceOnUnorderedEventList+0x78>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	68ba      	ldr	r2, [r7, #8]
 8008dac:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8008db0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008db2:	4b08      	ldr	r3, [pc, #32]	@ (8008dd4 <vTaskPlaceOnUnorderedEventList+0x78>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	3318      	adds	r3, #24
 8008db8:	4619      	mov	r1, r3
 8008dba:	68f8      	ldr	r0, [r7, #12]
 8008dbc:	f7fe fb71 	bl	80074a2 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008dc0:	2101      	movs	r1, #1
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 fc0e 	bl	80095e4 <prvAddCurrentTaskToDelayedList>
}
 8008dc8:	bf00      	nop
 8008dca:	3718      	adds	r7, #24
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	20001310 	.word	0x20001310
 8008dd4:	20000e14 	.word	0x20000e14

08008dd8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b086      	sub	sp, #24
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	60b9      	str	r1, [r7, #8]
 8008de2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d10b      	bne.n	8008e02 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dee:	f383 8811 	msr	BASEPRI, r3
 8008df2:	f3bf 8f6f 	isb	sy
 8008df6:	f3bf 8f4f 	dsb	sy
 8008dfa:	617b      	str	r3, [r7, #20]
}
 8008dfc:	bf00      	nop
 8008dfe:	bf00      	nop
 8008e00:	e7fd      	b.n	8008dfe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e02:	4b0a      	ldr	r3, [pc, #40]	@ (8008e2c <vTaskPlaceOnEventListRestricted+0x54>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	3318      	adds	r3, #24
 8008e08:	4619      	mov	r1, r3
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	f7fe fb49 	bl	80074a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d002      	beq.n	8008e1c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008e16:	f04f 33ff 	mov.w	r3, #4294967295
 8008e1a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008e1c:	6879      	ldr	r1, [r7, #4]
 8008e1e:	68b8      	ldr	r0, [r7, #8]
 8008e20:	f000 fbe0 	bl	80095e4 <prvAddCurrentTaskToDelayedList>
	}
 8008e24:	bf00      	nop
 8008e26:	3718      	adds	r7, #24
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	20000e14 	.word	0x20000e14

08008e30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b086      	sub	sp, #24
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d10b      	bne.n	8008e5e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e4a:	f383 8811 	msr	BASEPRI, r3
 8008e4e:	f3bf 8f6f 	isb	sy
 8008e52:	f3bf 8f4f 	dsb	sy
 8008e56:	60fb      	str	r3, [r7, #12]
}
 8008e58:	bf00      	nop
 8008e5a:	bf00      	nop
 8008e5c:	e7fd      	b.n	8008e5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	3318      	adds	r3, #24
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7fe fb7a 	bl	800755c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e68:	4b1d      	ldr	r3, [pc, #116]	@ (8008ee0 <xTaskRemoveFromEventList+0xb0>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d11d      	bne.n	8008eac <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	3304      	adds	r3, #4
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7fe fb71 	bl	800755c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e7e:	4b19      	ldr	r3, [pc, #100]	@ (8008ee4 <xTaskRemoveFromEventList+0xb4>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d903      	bls.n	8008e8e <xTaskRemoveFromEventList+0x5e>
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e8a:	4a16      	ldr	r2, [pc, #88]	@ (8008ee4 <xTaskRemoveFromEventList+0xb4>)
 8008e8c:	6013      	str	r3, [r2, #0]
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e92:	4613      	mov	r3, r2
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	4413      	add	r3, r2
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	4a13      	ldr	r2, [pc, #76]	@ (8008ee8 <xTaskRemoveFromEventList+0xb8>)
 8008e9c:	441a      	add	r2, r3
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	3304      	adds	r3, #4
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	4610      	mov	r0, r2
 8008ea6:	f7fe fafc 	bl	80074a2 <vListInsertEnd>
 8008eaa:	e005      	b.n	8008eb8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	3318      	adds	r3, #24
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	480e      	ldr	r0, [pc, #56]	@ (8008eec <xTaskRemoveFromEventList+0xbc>)
 8008eb4:	f7fe faf5 	bl	80074a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8008ef0 <xTaskRemoveFromEventList+0xc0>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d905      	bls.n	8008ed2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008eca:	4b0a      	ldr	r3, [pc, #40]	@ (8008ef4 <xTaskRemoveFromEventList+0xc4>)
 8008ecc:	2201      	movs	r2, #1
 8008ece:	601a      	str	r2, [r3, #0]
 8008ed0:	e001      	b.n	8008ed6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008ed6:	697b      	ldr	r3, [r7, #20]
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3718      	adds	r7, #24
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	20001310 	.word	0x20001310
 8008ee4:	200012f0 	.word	0x200012f0
 8008ee8:	20000e18 	.word	0x20000e18
 8008eec:	200012a8 	.word	0x200012a8
 8008ef0:	20000e14 	.word	0x20000e14
 8008ef4:	200012fc 	.word	0x200012fc

08008ef8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b086      	sub	sp, #24
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8008f02:	4b2a      	ldr	r3, [pc, #168]	@ (8008fac <vTaskRemoveFromUnorderedEventList+0xb4>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d10b      	bne.n	8008f22 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 8008f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f0e:	f383 8811 	msr	BASEPRI, r3
 8008f12:	f3bf 8f6f 	isb	sy
 8008f16:	f3bf 8f4f 	dsb	sy
 8008f1a:	613b      	str	r3, [r7, #16]
}
 8008f1c:	bf00      	nop
 8008f1e:	bf00      	nop
 8008f20:	e7fd      	b.n	8008f1e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d10b      	bne.n	8008f50 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 8008f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f3c:	f383 8811 	msr	BASEPRI, r3
 8008f40:	f3bf 8f6f 	isb	sy
 8008f44:	f3bf 8f4f 	dsb	sy
 8008f48:	60fb      	str	r3, [r7, #12]
}
 8008f4a:	bf00      	nop
 8008f4c:	bf00      	nop
 8008f4e:	e7fd      	b.n	8008f4c <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f7fe fb03 	bl	800755c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	3304      	adds	r3, #4
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f7fe fafe 	bl	800755c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f64:	4b12      	ldr	r3, [pc, #72]	@ (8008fb0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d903      	bls.n	8008f74 <vTaskRemoveFromUnorderedEventList+0x7c>
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f70:	4a0f      	ldr	r2, [pc, #60]	@ (8008fb0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8008f72:	6013      	str	r3, [r2, #0]
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f78:	4613      	mov	r3, r2
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	4413      	add	r3, r2
 8008f7e:	009b      	lsls	r3, r3, #2
 8008f80:	4a0c      	ldr	r2, [pc, #48]	@ (8008fb4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8008f82:	441a      	add	r2, r3
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	3304      	adds	r3, #4
 8008f88:	4619      	mov	r1, r3
 8008f8a:	4610      	mov	r0, r2
 8008f8c:	f7fe fa89 	bl	80074a2 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f94:	4b08      	ldr	r3, [pc, #32]	@ (8008fb8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d902      	bls.n	8008fa4 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8008f9e:	4b07      	ldr	r3, [pc, #28]	@ (8008fbc <vTaskRemoveFromUnorderedEventList+0xc4>)
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	601a      	str	r2, [r3, #0]
	}
}
 8008fa4:	bf00      	nop
 8008fa6:	3718      	adds	r7, #24
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	20001310 	.word	0x20001310
 8008fb0:	200012f0 	.word	0x200012f0
 8008fb4:	20000e18 	.word	0x20000e18
 8008fb8:	20000e14 	.word	0x20000e14
 8008fbc:	200012fc 	.word	0x200012fc

08008fc0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b083      	sub	sp, #12
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008fc8:	4b06      	ldr	r3, [pc, #24]	@ (8008fe4 <vTaskInternalSetTimeOutState+0x24>)
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008fd0:	4b05      	ldr	r3, [pc, #20]	@ (8008fe8 <vTaskInternalSetTimeOutState+0x28>)
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	605a      	str	r2, [r3, #4]
}
 8008fd8:	bf00      	nop
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr
 8008fe4:	20001300 	.word	0x20001300
 8008fe8:	200012ec 	.word	0x200012ec

08008fec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b088      	sub	sp, #32
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d10b      	bne.n	8009014 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009000:	f383 8811 	msr	BASEPRI, r3
 8009004:	f3bf 8f6f 	isb	sy
 8009008:	f3bf 8f4f 	dsb	sy
 800900c:	613b      	str	r3, [r7, #16]
}
 800900e:	bf00      	nop
 8009010:	bf00      	nop
 8009012:	e7fd      	b.n	8009010 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d10b      	bne.n	8009032 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800901a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800901e:	f383 8811 	msr	BASEPRI, r3
 8009022:	f3bf 8f6f 	isb	sy
 8009026:	f3bf 8f4f 	dsb	sy
 800902a:	60fb      	str	r3, [r7, #12]
}
 800902c:	bf00      	nop
 800902e:	bf00      	nop
 8009030:	e7fd      	b.n	800902e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009032:	f000 ffd9 	bl	8009fe8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009036:	4b1d      	ldr	r3, [pc, #116]	@ (80090ac <xTaskCheckForTimeOut+0xc0>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	69ba      	ldr	r2, [r7, #24]
 8009042:	1ad3      	subs	r3, r2, r3
 8009044:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800904e:	d102      	bne.n	8009056 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009050:	2300      	movs	r3, #0
 8009052:	61fb      	str	r3, [r7, #28]
 8009054:	e023      	b.n	800909e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	4b15      	ldr	r3, [pc, #84]	@ (80090b0 <xTaskCheckForTimeOut+0xc4>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	429a      	cmp	r2, r3
 8009060:	d007      	beq.n	8009072 <xTaskCheckForTimeOut+0x86>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	69ba      	ldr	r2, [r7, #24]
 8009068:	429a      	cmp	r2, r3
 800906a:	d302      	bcc.n	8009072 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800906c:	2301      	movs	r3, #1
 800906e:	61fb      	str	r3, [r7, #28]
 8009070:	e015      	b.n	800909e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	697a      	ldr	r2, [r7, #20]
 8009078:	429a      	cmp	r2, r3
 800907a:	d20b      	bcs.n	8009094 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	1ad2      	subs	r2, r2, r3
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f7ff ff99 	bl	8008fc0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800908e:	2300      	movs	r3, #0
 8009090:	61fb      	str	r3, [r7, #28]
 8009092:	e004      	b.n	800909e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	2200      	movs	r2, #0
 8009098:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800909a:	2301      	movs	r3, #1
 800909c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800909e:	f000 ffd5 	bl	800a04c <vPortExitCritical>

	return xReturn;
 80090a2:	69fb      	ldr	r3, [r7, #28]
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3720      	adds	r7, #32
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	200012ec 	.word	0x200012ec
 80090b0:	20001300 	.word	0x20001300

080090b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80090b4:	b480      	push	{r7}
 80090b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80090b8:	4b03      	ldr	r3, [pc, #12]	@ (80090c8 <vTaskMissedYield+0x14>)
 80090ba:	2201      	movs	r2, #1
 80090bc:	601a      	str	r2, [r3, #0]
}
 80090be:	bf00      	nop
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr
 80090c8:	200012fc 	.word	0x200012fc

080090cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80090d4:	f000 f852 	bl	800917c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80090d8:	4b06      	ldr	r3, [pc, #24]	@ (80090f4 <prvIdleTask+0x28>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d9f9      	bls.n	80090d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80090e0:	4b05      	ldr	r3, [pc, #20]	@ (80090f8 <prvIdleTask+0x2c>)
 80090e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090e6:	601a      	str	r2, [r3, #0]
 80090e8:	f3bf 8f4f 	dsb	sy
 80090ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80090f0:	e7f0      	b.n	80090d4 <prvIdleTask+0x8>
 80090f2:	bf00      	nop
 80090f4:	20000e18 	.word	0x20000e18
 80090f8:	e000ed04 	.word	0xe000ed04

080090fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009102:	2300      	movs	r3, #0
 8009104:	607b      	str	r3, [r7, #4]
 8009106:	e00c      	b.n	8009122 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	4613      	mov	r3, r2
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	4413      	add	r3, r2
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	4a12      	ldr	r2, [pc, #72]	@ (800915c <prvInitialiseTaskLists+0x60>)
 8009114:	4413      	add	r3, r2
 8009116:	4618      	mov	r0, r3
 8009118:	f7fe f996 	bl	8007448 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	3301      	adds	r3, #1
 8009120:	607b      	str	r3, [r7, #4]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2b37      	cmp	r3, #55	@ 0x37
 8009126:	d9ef      	bls.n	8009108 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009128:	480d      	ldr	r0, [pc, #52]	@ (8009160 <prvInitialiseTaskLists+0x64>)
 800912a:	f7fe f98d 	bl	8007448 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800912e:	480d      	ldr	r0, [pc, #52]	@ (8009164 <prvInitialiseTaskLists+0x68>)
 8009130:	f7fe f98a 	bl	8007448 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009134:	480c      	ldr	r0, [pc, #48]	@ (8009168 <prvInitialiseTaskLists+0x6c>)
 8009136:	f7fe f987 	bl	8007448 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800913a:	480c      	ldr	r0, [pc, #48]	@ (800916c <prvInitialiseTaskLists+0x70>)
 800913c:	f7fe f984 	bl	8007448 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009140:	480b      	ldr	r0, [pc, #44]	@ (8009170 <prvInitialiseTaskLists+0x74>)
 8009142:	f7fe f981 	bl	8007448 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009146:	4b0b      	ldr	r3, [pc, #44]	@ (8009174 <prvInitialiseTaskLists+0x78>)
 8009148:	4a05      	ldr	r2, [pc, #20]	@ (8009160 <prvInitialiseTaskLists+0x64>)
 800914a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800914c:	4b0a      	ldr	r3, [pc, #40]	@ (8009178 <prvInitialiseTaskLists+0x7c>)
 800914e:	4a05      	ldr	r2, [pc, #20]	@ (8009164 <prvInitialiseTaskLists+0x68>)
 8009150:	601a      	str	r2, [r3, #0]
}
 8009152:	bf00      	nop
 8009154:	3708      	adds	r7, #8
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
 800915a:	bf00      	nop
 800915c:	20000e18 	.word	0x20000e18
 8009160:	20001278 	.word	0x20001278
 8009164:	2000128c 	.word	0x2000128c
 8009168:	200012a8 	.word	0x200012a8
 800916c:	200012bc 	.word	0x200012bc
 8009170:	200012d4 	.word	0x200012d4
 8009174:	200012a0 	.word	0x200012a0
 8009178:	200012a4 	.word	0x200012a4

0800917c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009182:	e019      	b.n	80091b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009184:	f000 ff30 	bl	8009fe8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009188:	4b10      	ldr	r3, [pc, #64]	@ (80091cc <prvCheckTasksWaitingTermination+0x50>)
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	3304      	adds	r3, #4
 8009194:	4618      	mov	r0, r3
 8009196:	f7fe f9e1 	bl	800755c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800919a:	4b0d      	ldr	r3, [pc, #52]	@ (80091d0 <prvCheckTasksWaitingTermination+0x54>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	3b01      	subs	r3, #1
 80091a0:	4a0b      	ldr	r2, [pc, #44]	@ (80091d0 <prvCheckTasksWaitingTermination+0x54>)
 80091a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80091a4:	4b0b      	ldr	r3, [pc, #44]	@ (80091d4 <prvCheckTasksWaitingTermination+0x58>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	3b01      	subs	r3, #1
 80091aa:	4a0a      	ldr	r2, [pc, #40]	@ (80091d4 <prvCheckTasksWaitingTermination+0x58>)
 80091ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80091ae:	f000 ff4d 	bl	800a04c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 f810 	bl	80091d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80091b8:	4b06      	ldr	r3, [pc, #24]	@ (80091d4 <prvCheckTasksWaitingTermination+0x58>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1e1      	bne.n	8009184 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80091c0:	bf00      	nop
 80091c2:	bf00      	nop
 80091c4:	3708      	adds	r7, #8
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	200012bc 	.word	0x200012bc
 80091d0:	200012e8 	.word	0x200012e8
 80091d4:	200012d0 	.word	0x200012d0

080091d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d108      	bne.n	80091fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091ee:	4618      	mov	r0, r3
 80091f0:	f001 f8ea 	bl	800a3c8 <vPortFree>
				vPortFree( pxTCB );
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f001 f8e7 	bl	800a3c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80091fa:	e019      	b.n	8009230 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009202:	2b01      	cmp	r3, #1
 8009204:	d103      	bne.n	800920e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f001 f8de 	bl	800a3c8 <vPortFree>
	}
 800920c:	e010      	b.n	8009230 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009214:	2b02      	cmp	r3, #2
 8009216:	d00b      	beq.n	8009230 <prvDeleteTCB+0x58>
	__asm volatile
 8009218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800921c:	f383 8811 	msr	BASEPRI, r3
 8009220:	f3bf 8f6f 	isb	sy
 8009224:	f3bf 8f4f 	dsb	sy
 8009228:	60fb      	str	r3, [r7, #12]
}
 800922a:	bf00      	nop
 800922c:	bf00      	nop
 800922e:	e7fd      	b.n	800922c <prvDeleteTCB+0x54>
	}
 8009230:	bf00      	nop
 8009232:	3710      	adds	r7, #16
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009238:	b480      	push	{r7}
 800923a:	b083      	sub	sp, #12
 800923c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800923e:	4b0c      	ldr	r3, [pc, #48]	@ (8009270 <prvResetNextTaskUnblockTime+0x38>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d104      	bne.n	8009252 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009248:	4b0a      	ldr	r3, [pc, #40]	@ (8009274 <prvResetNextTaskUnblockTime+0x3c>)
 800924a:	f04f 32ff 	mov.w	r2, #4294967295
 800924e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009250:	e008      	b.n	8009264 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009252:	4b07      	ldr	r3, [pc, #28]	@ (8009270 <prvResetNextTaskUnblockTime+0x38>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	4a04      	ldr	r2, [pc, #16]	@ (8009274 <prvResetNextTaskUnblockTime+0x3c>)
 8009262:	6013      	str	r3, [r2, #0]
}
 8009264:	bf00      	nop
 8009266:	370c      	adds	r7, #12
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr
 8009270:	200012a0 	.word	0x200012a0
 8009274:	20001308 	.word	0x20001308

08009278 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800927e:	4b05      	ldr	r3, [pc, #20]	@ (8009294 <xTaskGetCurrentTaskHandle+0x1c>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009284:	687b      	ldr	r3, [r7, #4]
	}
 8009286:	4618      	mov	r0, r3
 8009288:	370c      	adds	r7, #12
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr
 8009292:	bf00      	nop
 8009294:	20000e14 	.word	0x20000e14

08009298 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800929e:	4b0b      	ldr	r3, [pc, #44]	@ (80092cc <xTaskGetSchedulerState+0x34>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d102      	bne.n	80092ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80092a6:	2301      	movs	r3, #1
 80092a8:	607b      	str	r3, [r7, #4]
 80092aa:	e008      	b.n	80092be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092ac:	4b08      	ldr	r3, [pc, #32]	@ (80092d0 <xTaskGetSchedulerState+0x38>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d102      	bne.n	80092ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80092b4:	2302      	movs	r3, #2
 80092b6:	607b      	str	r3, [r7, #4]
 80092b8:	e001      	b.n	80092be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80092ba:	2300      	movs	r3, #0
 80092bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80092be:	687b      	ldr	r3, [r7, #4]
	}
 80092c0:	4618      	mov	r0, r3
 80092c2:	370c      	adds	r7, #12
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr
 80092cc:	200012f4 	.word	0x200012f4
 80092d0:	20001310 	.word	0x20001310

080092d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80092e0:	2300      	movs	r3, #0
 80092e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d051      	beq.n	800938e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092ee:	4b2a      	ldr	r3, [pc, #168]	@ (8009398 <xTaskPriorityInherit+0xc4>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d241      	bcs.n	800937c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	699b      	ldr	r3, [r3, #24]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	db06      	blt.n	800930e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009300:	4b25      	ldr	r3, [pc, #148]	@ (8009398 <xTaskPriorityInherit+0xc4>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009306:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	6959      	ldr	r1, [r3, #20]
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009316:	4613      	mov	r3, r2
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	4413      	add	r3, r2
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	4a1f      	ldr	r2, [pc, #124]	@ (800939c <xTaskPriorityInherit+0xc8>)
 8009320:	4413      	add	r3, r2
 8009322:	4299      	cmp	r1, r3
 8009324:	d122      	bne.n	800936c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	3304      	adds	r3, #4
 800932a:	4618      	mov	r0, r3
 800932c:	f7fe f916 	bl	800755c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009330:	4b19      	ldr	r3, [pc, #100]	@ (8009398 <xTaskPriorityInherit+0xc4>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800933e:	4b18      	ldr	r3, [pc, #96]	@ (80093a0 <xTaskPriorityInherit+0xcc>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	429a      	cmp	r2, r3
 8009344:	d903      	bls.n	800934e <xTaskPriorityInherit+0x7a>
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800934a:	4a15      	ldr	r2, [pc, #84]	@ (80093a0 <xTaskPriorityInherit+0xcc>)
 800934c:	6013      	str	r3, [r2, #0]
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009352:	4613      	mov	r3, r2
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	4413      	add	r3, r2
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	4a10      	ldr	r2, [pc, #64]	@ (800939c <xTaskPriorityInherit+0xc8>)
 800935c:	441a      	add	r2, r3
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	3304      	adds	r3, #4
 8009362:	4619      	mov	r1, r3
 8009364:	4610      	mov	r0, r2
 8009366:	f7fe f89c 	bl	80074a2 <vListInsertEnd>
 800936a:	e004      	b.n	8009376 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800936c:	4b0a      	ldr	r3, [pc, #40]	@ (8009398 <xTaskPriorityInherit+0xc4>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009376:	2301      	movs	r3, #1
 8009378:	60fb      	str	r3, [r7, #12]
 800937a:	e008      	b.n	800938e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009380:	4b05      	ldr	r3, [pc, #20]	@ (8009398 <xTaskPriorityInherit+0xc4>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009386:	429a      	cmp	r2, r3
 8009388:	d201      	bcs.n	800938e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800938a:	2301      	movs	r3, #1
 800938c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800938e:	68fb      	ldr	r3, [r7, #12]
	}
 8009390:	4618      	mov	r0, r3
 8009392:	3710      	adds	r7, #16
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	20000e14 	.word	0x20000e14
 800939c:	20000e18 	.word	0x20000e18
 80093a0:	200012f0 	.word	0x200012f0

080093a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b086      	sub	sp, #24
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80093b0:	2300      	movs	r3, #0
 80093b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d058      	beq.n	800946c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80093ba:	4b2f      	ldr	r3, [pc, #188]	@ (8009478 <xTaskPriorityDisinherit+0xd4>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	693a      	ldr	r2, [r7, #16]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d00b      	beq.n	80093dc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80093c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093c8:	f383 8811 	msr	BASEPRI, r3
 80093cc:	f3bf 8f6f 	isb	sy
 80093d0:	f3bf 8f4f 	dsb	sy
 80093d4:	60fb      	str	r3, [r7, #12]
}
 80093d6:	bf00      	nop
 80093d8:	bf00      	nop
 80093da:	e7fd      	b.n	80093d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d10b      	bne.n	80093fc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80093e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093e8:	f383 8811 	msr	BASEPRI, r3
 80093ec:	f3bf 8f6f 	isb	sy
 80093f0:	f3bf 8f4f 	dsb	sy
 80093f4:	60bb      	str	r3, [r7, #8]
}
 80093f6:	bf00      	nop
 80093f8:	bf00      	nop
 80093fa:	e7fd      	b.n	80093f8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009400:	1e5a      	subs	r2, r3, #1
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800940e:	429a      	cmp	r2, r3
 8009410:	d02c      	beq.n	800946c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009416:	2b00      	cmp	r3, #0
 8009418:	d128      	bne.n	800946c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	3304      	adds	r3, #4
 800941e:	4618      	mov	r0, r3
 8009420:	f7fe f89c 	bl	800755c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009430:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800943c:	4b0f      	ldr	r3, [pc, #60]	@ (800947c <xTaskPriorityDisinherit+0xd8>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	429a      	cmp	r2, r3
 8009442:	d903      	bls.n	800944c <xTaskPriorityDisinherit+0xa8>
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009448:	4a0c      	ldr	r2, [pc, #48]	@ (800947c <xTaskPriorityDisinherit+0xd8>)
 800944a:	6013      	str	r3, [r2, #0]
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009450:	4613      	mov	r3, r2
 8009452:	009b      	lsls	r3, r3, #2
 8009454:	4413      	add	r3, r2
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	4a09      	ldr	r2, [pc, #36]	@ (8009480 <xTaskPriorityDisinherit+0xdc>)
 800945a:	441a      	add	r2, r3
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	3304      	adds	r3, #4
 8009460:	4619      	mov	r1, r3
 8009462:	4610      	mov	r0, r2
 8009464:	f7fe f81d 	bl	80074a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009468:	2301      	movs	r3, #1
 800946a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800946c:	697b      	ldr	r3, [r7, #20]
	}
 800946e:	4618      	mov	r0, r3
 8009470:	3718      	adds	r7, #24
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	20000e14 	.word	0x20000e14
 800947c:	200012f0 	.word	0x200012f0
 8009480:	20000e18 	.word	0x20000e18

08009484 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009484:	b580      	push	{r7, lr}
 8009486:	b088      	sub	sp, #32
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009492:	2301      	movs	r3, #1
 8009494:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d06c      	beq.n	8009576 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800949c:	69bb      	ldr	r3, [r7, #24]
 800949e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d10b      	bne.n	80094bc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80094a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094a8:	f383 8811 	msr	BASEPRI, r3
 80094ac:	f3bf 8f6f 	isb	sy
 80094b0:	f3bf 8f4f 	dsb	sy
 80094b4:	60fb      	str	r3, [r7, #12]
}
 80094b6:	bf00      	nop
 80094b8:	bf00      	nop
 80094ba:	e7fd      	b.n	80094b8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094c0:	683a      	ldr	r2, [r7, #0]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d902      	bls.n	80094cc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	61fb      	str	r3, [r7, #28]
 80094ca:	e002      	b.n	80094d2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094d0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80094d2:	69bb      	ldr	r3, [r7, #24]
 80094d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094d6:	69fa      	ldr	r2, [r7, #28]
 80094d8:	429a      	cmp	r2, r3
 80094da:	d04c      	beq.n	8009576 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80094dc:	69bb      	ldr	r3, [r7, #24]
 80094de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094e0:	697a      	ldr	r2, [r7, #20]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d147      	bne.n	8009576 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80094e6:	4b26      	ldr	r3, [pc, #152]	@ (8009580 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	69ba      	ldr	r2, [r7, #24]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d10b      	bne.n	8009508 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80094f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094f4:	f383 8811 	msr	BASEPRI, r3
 80094f8:	f3bf 8f6f 	isb	sy
 80094fc:	f3bf 8f4f 	dsb	sy
 8009500:	60bb      	str	r3, [r7, #8]
}
 8009502:	bf00      	nop
 8009504:	bf00      	nop
 8009506:	e7fd      	b.n	8009504 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009508:	69bb      	ldr	r3, [r7, #24]
 800950a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800950c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800950e:	69bb      	ldr	r3, [r7, #24]
 8009510:	69fa      	ldr	r2, [r7, #28]
 8009512:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009514:	69bb      	ldr	r3, [r7, #24]
 8009516:	699b      	ldr	r3, [r3, #24]
 8009518:	2b00      	cmp	r3, #0
 800951a:	db04      	blt.n	8009526 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800951c:	69fb      	ldr	r3, [r7, #28]
 800951e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	6959      	ldr	r1, [r3, #20]
 800952a:	693a      	ldr	r2, [r7, #16]
 800952c:	4613      	mov	r3, r2
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	4413      	add	r3, r2
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	4a13      	ldr	r2, [pc, #76]	@ (8009584 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009536:	4413      	add	r3, r2
 8009538:	4299      	cmp	r1, r3
 800953a:	d11c      	bne.n	8009576 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800953c:	69bb      	ldr	r3, [r7, #24]
 800953e:	3304      	adds	r3, #4
 8009540:	4618      	mov	r0, r3
 8009542:	f7fe f80b 	bl	800755c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800954a:	4b0f      	ldr	r3, [pc, #60]	@ (8009588 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	429a      	cmp	r2, r3
 8009550:	d903      	bls.n	800955a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8009552:	69bb      	ldr	r3, [r7, #24]
 8009554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009556:	4a0c      	ldr	r2, [pc, #48]	@ (8009588 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009558:	6013      	str	r3, [r2, #0]
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800955e:	4613      	mov	r3, r2
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	4413      	add	r3, r2
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	4a07      	ldr	r2, [pc, #28]	@ (8009584 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009568:	441a      	add	r2, r3
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	3304      	adds	r3, #4
 800956e:	4619      	mov	r1, r3
 8009570:	4610      	mov	r0, r2
 8009572:	f7fd ff96 	bl	80074a2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009576:	bf00      	nop
 8009578:	3720      	adds	r7, #32
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	20000e14 	.word	0x20000e14
 8009584:	20000e18 	.word	0x20000e18
 8009588:	200012f0 	.word	0x200012f0

0800958c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8009592:	4b09      	ldr	r3, [pc, #36]	@ (80095b8 <uxTaskResetEventItemValue+0x2c>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	699b      	ldr	r3, [r3, #24]
 8009598:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800959a:	4b07      	ldr	r3, [pc, #28]	@ (80095b8 <uxTaskResetEventItemValue+0x2c>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095a0:	4b05      	ldr	r3, [pc, #20]	@ (80095b8 <uxTaskResetEventItemValue+0x2c>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 80095a8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80095aa:	687b      	ldr	r3, [r7, #4]
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr
 80095b8:	20000e14 	.word	0x20000e14

080095bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80095bc:	b480      	push	{r7}
 80095be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80095c0:	4b07      	ldr	r3, [pc, #28]	@ (80095e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d004      	beq.n	80095d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80095c8:	4b05      	ldr	r3, [pc, #20]	@ (80095e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80095ce:	3201      	adds	r2, #1
 80095d0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80095d2:	4b03      	ldr	r3, [pc, #12]	@ (80095e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80095d4:	681b      	ldr	r3, [r3, #0]
	}
 80095d6:	4618      	mov	r0, r3
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr
 80095e0:	20000e14 	.word	0x20000e14

080095e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80095ee:	4b21      	ldr	r3, [pc, #132]	@ (8009674 <prvAddCurrentTaskToDelayedList+0x90>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095f4:	4b20      	ldr	r3, [pc, #128]	@ (8009678 <prvAddCurrentTaskToDelayedList+0x94>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	3304      	adds	r3, #4
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7fd ffae 	bl	800755c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009606:	d10a      	bne.n	800961e <prvAddCurrentTaskToDelayedList+0x3a>
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d007      	beq.n	800961e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800960e:	4b1a      	ldr	r3, [pc, #104]	@ (8009678 <prvAddCurrentTaskToDelayedList+0x94>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	3304      	adds	r3, #4
 8009614:	4619      	mov	r1, r3
 8009616:	4819      	ldr	r0, [pc, #100]	@ (800967c <prvAddCurrentTaskToDelayedList+0x98>)
 8009618:	f7fd ff43 	bl	80074a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800961c:	e026      	b.n	800966c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800961e:	68fa      	ldr	r2, [r7, #12]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4413      	add	r3, r2
 8009624:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009626:	4b14      	ldr	r3, [pc, #80]	@ (8009678 <prvAddCurrentTaskToDelayedList+0x94>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	68ba      	ldr	r2, [r7, #8]
 800962c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800962e:	68ba      	ldr	r2, [r7, #8]
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	429a      	cmp	r2, r3
 8009634:	d209      	bcs.n	800964a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009636:	4b12      	ldr	r3, [pc, #72]	@ (8009680 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	4b0f      	ldr	r3, [pc, #60]	@ (8009678 <prvAddCurrentTaskToDelayedList+0x94>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	3304      	adds	r3, #4
 8009640:	4619      	mov	r1, r3
 8009642:	4610      	mov	r0, r2
 8009644:	f7fd ff51 	bl	80074ea <vListInsert>
}
 8009648:	e010      	b.n	800966c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800964a:	4b0e      	ldr	r3, [pc, #56]	@ (8009684 <prvAddCurrentTaskToDelayedList+0xa0>)
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	4b0a      	ldr	r3, [pc, #40]	@ (8009678 <prvAddCurrentTaskToDelayedList+0x94>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	3304      	adds	r3, #4
 8009654:	4619      	mov	r1, r3
 8009656:	4610      	mov	r0, r2
 8009658:	f7fd ff47 	bl	80074ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800965c:	4b0a      	ldr	r3, [pc, #40]	@ (8009688 <prvAddCurrentTaskToDelayedList+0xa4>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	68ba      	ldr	r2, [r7, #8]
 8009662:	429a      	cmp	r2, r3
 8009664:	d202      	bcs.n	800966c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009666:	4a08      	ldr	r2, [pc, #32]	@ (8009688 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	6013      	str	r3, [r2, #0]
}
 800966c:	bf00      	nop
 800966e:	3710      	adds	r7, #16
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}
 8009674:	200012ec 	.word	0x200012ec
 8009678:	20000e14 	.word	0x20000e14
 800967c:	200012d4 	.word	0x200012d4
 8009680:	200012a4 	.word	0x200012a4
 8009684:	200012a0 	.word	0x200012a0
 8009688:	20001308 	.word	0x20001308

0800968c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b08a      	sub	sp, #40	@ 0x28
 8009690:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009692:	2300      	movs	r3, #0
 8009694:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009696:	f000 fb13 	bl	8009cc0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800969a:	4b1d      	ldr	r3, [pc, #116]	@ (8009710 <xTimerCreateTimerTask+0x84>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d021      	beq.n	80096e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80096a2:	2300      	movs	r3, #0
 80096a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80096a6:	2300      	movs	r3, #0
 80096a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80096aa:	1d3a      	adds	r2, r7, #4
 80096ac:	f107 0108 	add.w	r1, r7, #8
 80096b0:	f107 030c 	add.w	r3, r7, #12
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7fd fc39 	bl	8006f2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80096ba:	6879      	ldr	r1, [r7, #4]
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	68fa      	ldr	r2, [r7, #12]
 80096c0:	9202      	str	r2, [sp, #8]
 80096c2:	9301      	str	r3, [sp, #4]
 80096c4:	2302      	movs	r3, #2
 80096c6:	9300      	str	r3, [sp, #0]
 80096c8:	2300      	movs	r3, #0
 80096ca:	460a      	mov	r2, r1
 80096cc:	4911      	ldr	r1, [pc, #68]	@ (8009714 <xTimerCreateTimerTask+0x88>)
 80096ce:	4812      	ldr	r0, [pc, #72]	@ (8009718 <xTimerCreateTimerTask+0x8c>)
 80096d0:	f7fe ff06 	bl	80084e0 <xTaskCreateStatic>
 80096d4:	4603      	mov	r3, r0
 80096d6:	4a11      	ldr	r2, [pc, #68]	@ (800971c <xTimerCreateTimerTask+0x90>)
 80096d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80096da:	4b10      	ldr	r3, [pc, #64]	@ (800971c <xTimerCreateTimerTask+0x90>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d001      	beq.n	80096e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80096e2:	2301      	movs	r3, #1
 80096e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d10b      	bne.n	8009704 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80096ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096f0:	f383 8811 	msr	BASEPRI, r3
 80096f4:	f3bf 8f6f 	isb	sy
 80096f8:	f3bf 8f4f 	dsb	sy
 80096fc:	613b      	str	r3, [r7, #16]
}
 80096fe:	bf00      	nop
 8009700:	bf00      	nop
 8009702:	e7fd      	b.n	8009700 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009704:	697b      	ldr	r3, [r7, #20]
}
 8009706:	4618      	mov	r0, r3
 8009708:	3718      	adds	r7, #24
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	20001344 	.word	0x20001344
 8009714:	0800b198 	.word	0x0800b198
 8009718:	08009859 	.word	0x08009859
 800971c:	20001348 	.word	0x20001348

08009720 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b08a      	sub	sp, #40	@ 0x28
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]
 800972c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800972e:	2300      	movs	r3, #0
 8009730:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d10b      	bne.n	8009750 <xTimerGenericCommand+0x30>
	__asm volatile
 8009738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800973c:	f383 8811 	msr	BASEPRI, r3
 8009740:	f3bf 8f6f 	isb	sy
 8009744:	f3bf 8f4f 	dsb	sy
 8009748:	623b      	str	r3, [r7, #32]
}
 800974a:	bf00      	nop
 800974c:	bf00      	nop
 800974e:	e7fd      	b.n	800974c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009750:	4b19      	ldr	r3, [pc, #100]	@ (80097b8 <xTimerGenericCommand+0x98>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d02a      	beq.n	80097ae <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	2b05      	cmp	r3, #5
 8009768:	dc18      	bgt.n	800979c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800976a:	f7ff fd95 	bl	8009298 <xTaskGetSchedulerState>
 800976e:	4603      	mov	r3, r0
 8009770:	2b02      	cmp	r3, #2
 8009772:	d109      	bne.n	8009788 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009774:	4b10      	ldr	r3, [pc, #64]	@ (80097b8 <xTimerGenericCommand+0x98>)
 8009776:	6818      	ldr	r0, [r3, #0]
 8009778:	f107 0110 	add.w	r1, r7, #16
 800977c:	2300      	movs	r3, #0
 800977e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009780:	f7fe f914 	bl	80079ac <xQueueGenericSend>
 8009784:	6278      	str	r0, [r7, #36]	@ 0x24
 8009786:	e012      	b.n	80097ae <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009788:	4b0b      	ldr	r3, [pc, #44]	@ (80097b8 <xTimerGenericCommand+0x98>)
 800978a:	6818      	ldr	r0, [r3, #0]
 800978c:	f107 0110 	add.w	r1, r7, #16
 8009790:	2300      	movs	r3, #0
 8009792:	2200      	movs	r2, #0
 8009794:	f7fe f90a 	bl	80079ac <xQueueGenericSend>
 8009798:	6278      	str	r0, [r7, #36]	@ 0x24
 800979a:	e008      	b.n	80097ae <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800979c:	4b06      	ldr	r3, [pc, #24]	@ (80097b8 <xTimerGenericCommand+0x98>)
 800979e:	6818      	ldr	r0, [r3, #0]
 80097a0:	f107 0110 	add.w	r1, r7, #16
 80097a4:	2300      	movs	r3, #0
 80097a6:	683a      	ldr	r2, [r7, #0]
 80097a8:	f7fe fa02 	bl	8007bb0 <xQueueGenericSendFromISR>
 80097ac:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80097ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3728      	adds	r7, #40	@ 0x28
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	20001344 	.word	0x20001344

080097bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b088      	sub	sp, #32
 80097c0:	af02      	add	r7, sp, #8
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097c6:	4b23      	ldr	r3, [pc, #140]	@ (8009854 <prvProcessExpiredTimer+0x98>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	3304      	adds	r3, #4
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7fd fec1 	bl	800755c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80097e0:	f003 0304 	and.w	r3, r3, #4
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d023      	beq.n	8009830 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	699a      	ldr	r2, [r3, #24]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	18d1      	adds	r1, r2, r3
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	683a      	ldr	r2, [r7, #0]
 80097f4:	6978      	ldr	r0, [r7, #20]
 80097f6:	f000 f8d5 	bl	80099a4 <prvInsertTimerInActiveList>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d020      	beq.n	8009842 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009800:	2300      	movs	r3, #0
 8009802:	9300      	str	r3, [sp, #0]
 8009804:	2300      	movs	r3, #0
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	2100      	movs	r1, #0
 800980a:	6978      	ldr	r0, [r7, #20]
 800980c:	f7ff ff88 	bl	8009720 <xTimerGenericCommand>
 8009810:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d114      	bne.n	8009842 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800981c:	f383 8811 	msr	BASEPRI, r3
 8009820:	f3bf 8f6f 	isb	sy
 8009824:	f3bf 8f4f 	dsb	sy
 8009828:	60fb      	str	r3, [r7, #12]
}
 800982a:	bf00      	nop
 800982c:	bf00      	nop
 800982e:	e7fd      	b.n	800982c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009836:	f023 0301 	bic.w	r3, r3, #1
 800983a:	b2da      	uxtb	r2, r3
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	6a1b      	ldr	r3, [r3, #32]
 8009846:	6978      	ldr	r0, [r7, #20]
 8009848:	4798      	blx	r3
}
 800984a:	bf00      	nop
 800984c:	3718      	adds	r7, #24
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	2000133c 	.word	0x2000133c

08009858 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009860:	f107 0308 	add.w	r3, r7, #8
 8009864:	4618      	mov	r0, r3
 8009866:	f000 f859 	bl	800991c <prvGetNextExpireTime>
 800986a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	4619      	mov	r1, r3
 8009870:	68f8      	ldr	r0, [r7, #12]
 8009872:	f000 f805 	bl	8009880 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009876:	f000 f8d7 	bl	8009a28 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800987a:	bf00      	nop
 800987c:	e7f0      	b.n	8009860 <prvTimerTask+0x8>
	...

08009880 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800988a:	f7ff f86d 	bl	8008968 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800988e:	f107 0308 	add.w	r3, r7, #8
 8009892:	4618      	mov	r0, r3
 8009894:	f000 f866 	bl	8009964 <prvSampleTimeNow>
 8009898:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d130      	bne.n	8009902 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d10a      	bne.n	80098bc <prvProcessTimerOrBlockTask+0x3c>
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d806      	bhi.n	80098bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80098ae:	f7ff f869 	bl	8008984 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80098b2:	68f9      	ldr	r1, [r7, #12]
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f7ff ff81 	bl	80097bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80098ba:	e024      	b.n	8009906 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d008      	beq.n	80098d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80098c2:	4b13      	ldr	r3, [pc, #76]	@ (8009910 <prvProcessTimerOrBlockTask+0x90>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d101      	bne.n	80098d0 <prvProcessTimerOrBlockTask+0x50>
 80098cc:	2301      	movs	r3, #1
 80098ce:	e000      	b.n	80098d2 <prvProcessTimerOrBlockTask+0x52>
 80098d0:	2300      	movs	r3, #0
 80098d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80098d4:	4b0f      	ldr	r3, [pc, #60]	@ (8009914 <prvProcessTimerOrBlockTask+0x94>)
 80098d6:	6818      	ldr	r0, [r3, #0]
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	1ad3      	subs	r3, r2, r3
 80098de:	683a      	ldr	r2, [r7, #0]
 80098e0:	4619      	mov	r1, r3
 80098e2:	f7fe fdc9 	bl	8008478 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80098e6:	f7ff f84d 	bl	8008984 <xTaskResumeAll>
 80098ea:	4603      	mov	r3, r0
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d10a      	bne.n	8009906 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80098f0:	4b09      	ldr	r3, [pc, #36]	@ (8009918 <prvProcessTimerOrBlockTask+0x98>)
 80098f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098f6:	601a      	str	r2, [r3, #0]
 80098f8:	f3bf 8f4f 	dsb	sy
 80098fc:	f3bf 8f6f 	isb	sy
}
 8009900:	e001      	b.n	8009906 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009902:	f7ff f83f 	bl	8008984 <xTaskResumeAll>
}
 8009906:	bf00      	nop
 8009908:	3710      	adds	r7, #16
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	20001340 	.word	0x20001340
 8009914:	20001344 	.word	0x20001344
 8009918:	e000ed04 	.word	0xe000ed04

0800991c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800991c:	b480      	push	{r7}
 800991e:	b085      	sub	sp, #20
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009924:	4b0e      	ldr	r3, [pc, #56]	@ (8009960 <prvGetNextExpireTime+0x44>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d101      	bne.n	8009932 <prvGetNextExpireTime+0x16>
 800992e:	2201      	movs	r2, #1
 8009930:	e000      	b.n	8009934 <prvGetNextExpireTime+0x18>
 8009932:	2200      	movs	r2, #0
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d105      	bne.n	800994c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009940:	4b07      	ldr	r3, [pc, #28]	@ (8009960 <prvGetNextExpireTime+0x44>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	68db      	ldr	r3, [r3, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	60fb      	str	r3, [r7, #12]
 800994a:	e001      	b.n	8009950 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800994c:	2300      	movs	r3, #0
 800994e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009950:	68fb      	ldr	r3, [r7, #12]
}
 8009952:	4618      	mov	r0, r3
 8009954:	3714      	adds	r7, #20
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr
 800995e:	bf00      	nop
 8009960:	2000133c 	.word	0x2000133c

08009964 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800996c:	f7ff f8a8 	bl	8008ac0 <xTaskGetTickCount>
 8009970:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009972:	4b0b      	ldr	r3, [pc, #44]	@ (80099a0 <prvSampleTimeNow+0x3c>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	68fa      	ldr	r2, [r7, #12]
 8009978:	429a      	cmp	r2, r3
 800997a:	d205      	bcs.n	8009988 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800997c:	f000 f93a 	bl	8009bf4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2201      	movs	r2, #1
 8009984:	601a      	str	r2, [r3, #0]
 8009986:	e002      	b.n	800998e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2200      	movs	r2, #0
 800998c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800998e:	4a04      	ldr	r2, [pc, #16]	@ (80099a0 <prvSampleTimeNow+0x3c>)
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009994:	68fb      	ldr	r3, [r7, #12]
}
 8009996:	4618      	mov	r0, r3
 8009998:	3710      	adds	r7, #16
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
 800999e:	bf00      	nop
 80099a0:	2000134c 	.word	0x2000134c

080099a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b086      	sub	sp, #24
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	607a      	str	r2, [r7, #4]
 80099b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80099b2:	2300      	movs	r3, #0
 80099b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	68ba      	ldr	r2, [r7, #8]
 80099ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	68fa      	ldr	r2, [r7, #12]
 80099c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80099c2:	68ba      	ldr	r2, [r7, #8]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d812      	bhi.n	80099f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	1ad2      	subs	r2, r2, r3
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	699b      	ldr	r3, [r3, #24]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d302      	bcc.n	80099de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80099d8:	2301      	movs	r3, #1
 80099da:	617b      	str	r3, [r7, #20]
 80099dc:	e01b      	b.n	8009a16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80099de:	4b10      	ldr	r3, [pc, #64]	@ (8009a20 <prvInsertTimerInActiveList+0x7c>)
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	3304      	adds	r3, #4
 80099e6:	4619      	mov	r1, r3
 80099e8:	4610      	mov	r0, r2
 80099ea:	f7fd fd7e 	bl	80074ea <vListInsert>
 80099ee:	e012      	b.n	8009a16 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d206      	bcs.n	8009a06 <prvInsertTimerInActiveList+0x62>
 80099f8:	68ba      	ldr	r2, [r7, #8]
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d302      	bcc.n	8009a06 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009a00:	2301      	movs	r3, #1
 8009a02:	617b      	str	r3, [r7, #20]
 8009a04:	e007      	b.n	8009a16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a06:	4b07      	ldr	r3, [pc, #28]	@ (8009a24 <prvInsertTimerInActiveList+0x80>)
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	3304      	adds	r3, #4
 8009a0e:	4619      	mov	r1, r3
 8009a10:	4610      	mov	r0, r2
 8009a12:	f7fd fd6a 	bl	80074ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009a16:	697b      	ldr	r3, [r7, #20]
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3718      	adds	r7, #24
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}
 8009a20:	20001340 	.word	0x20001340
 8009a24:	2000133c 	.word	0x2000133c

08009a28 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b08e      	sub	sp, #56	@ 0x38
 8009a2c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a2e:	e0ce      	b.n	8009bce <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	da19      	bge.n	8009a6a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009a36:	1d3b      	adds	r3, r7, #4
 8009a38:	3304      	adds	r3, #4
 8009a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d10b      	bne.n	8009a5a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a46:	f383 8811 	msr	BASEPRI, r3
 8009a4a:	f3bf 8f6f 	isb	sy
 8009a4e:	f3bf 8f4f 	dsb	sy
 8009a52:	61fb      	str	r3, [r7, #28]
}
 8009a54:	bf00      	nop
 8009a56:	bf00      	nop
 8009a58:	e7fd      	b.n	8009a56 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a60:	6850      	ldr	r0, [r2, #4]
 8009a62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a64:	6892      	ldr	r2, [r2, #8]
 8009a66:	4611      	mov	r1, r2
 8009a68:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	f2c0 80ae 	blt.w	8009bce <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a78:	695b      	ldr	r3, [r3, #20]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d004      	beq.n	8009a88 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a80:	3304      	adds	r3, #4
 8009a82:	4618      	mov	r0, r3
 8009a84:	f7fd fd6a 	bl	800755c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a88:	463b      	mov	r3, r7
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7ff ff6a 	bl	8009964 <prvSampleTimeNow>
 8009a90:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2b09      	cmp	r3, #9
 8009a96:	f200 8097 	bhi.w	8009bc8 <prvProcessReceivedCommands+0x1a0>
 8009a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8009aa0 <prvProcessReceivedCommands+0x78>)
 8009a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa0:	08009ac9 	.word	0x08009ac9
 8009aa4:	08009ac9 	.word	0x08009ac9
 8009aa8:	08009ac9 	.word	0x08009ac9
 8009aac:	08009b3f 	.word	0x08009b3f
 8009ab0:	08009b53 	.word	0x08009b53
 8009ab4:	08009b9f 	.word	0x08009b9f
 8009ab8:	08009ac9 	.word	0x08009ac9
 8009abc:	08009ac9 	.word	0x08009ac9
 8009ac0:	08009b3f 	.word	0x08009b3f
 8009ac4:	08009b53 	.word	0x08009b53
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ace:	f043 0301 	orr.w	r3, r3, #1
 8009ad2:	b2da      	uxtb	r2, r3
 8009ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ad6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009ada:	68ba      	ldr	r2, [r7, #8]
 8009adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ade:	699b      	ldr	r3, [r3, #24]
 8009ae0:	18d1      	adds	r1, r2, r3
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ae6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ae8:	f7ff ff5c 	bl	80099a4 <prvInsertTimerInActiveList>
 8009aec:	4603      	mov	r3, r0
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d06c      	beq.n	8009bcc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009af4:	6a1b      	ldr	r3, [r3, #32]
 8009af6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009af8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009afc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b00:	f003 0304 	and.w	r3, r3, #4
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d061      	beq.n	8009bcc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009b08:	68ba      	ldr	r2, [r7, #8]
 8009b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b0c:	699b      	ldr	r3, [r3, #24]
 8009b0e:	441a      	add	r2, r3
 8009b10:	2300      	movs	r3, #0
 8009b12:	9300      	str	r3, [sp, #0]
 8009b14:	2300      	movs	r3, #0
 8009b16:	2100      	movs	r1, #0
 8009b18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b1a:	f7ff fe01 	bl	8009720 <xTimerGenericCommand>
 8009b1e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009b20:	6a3b      	ldr	r3, [r7, #32]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d152      	bne.n	8009bcc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b2a:	f383 8811 	msr	BASEPRI, r3
 8009b2e:	f3bf 8f6f 	isb	sy
 8009b32:	f3bf 8f4f 	dsb	sy
 8009b36:	61bb      	str	r3, [r7, #24]
}
 8009b38:	bf00      	nop
 8009b3a:	bf00      	nop
 8009b3c:	e7fd      	b.n	8009b3a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b44:	f023 0301 	bic.w	r3, r3, #1
 8009b48:	b2da      	uxtb	r2, r3
 8009b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b4c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009b50:	e03d      	b.n	8009bce <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b58:	f043 0301 	orr.w	r3, r3, #1
 8009b5c:	b2da      	uxtb	r2, r3
 8009b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b60:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009b64:	68ba      	ldr	r2, [r7, #8]
 8009b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b68:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b6c:	699b      	ldr	r3, [r3, #24]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d10b      	bne.n	8009b8a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b76:	f383 8811 	msr	BASEPRI, r3
 8009b7a:	f3bf 8f6f 	isb	sy
 8009b7e:	f3bf 8f4f 	dsb	sy
 8009b82:	617b      	str	r3, [r7, #20]
}
 8009b84:	bf00      	nop
 8009b86:	bf00      	nop
 8009b88:	e7fd      	b.n	8009b86 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b8c:	699a      	ldr	r2, [r3, #24]
 8009b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b90:	18d1      	adds	r1, r2, r3
 8009b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b98:	f7ff ff04 	bl	80099a4 <prvInsertTimerInActiveList>
					break;
 8009b9c:	e017      	b.n	8009bce <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ba0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ba4:	f003 0302 	and.w	r3, r3, #2
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d103      	bne.n	8009bb4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009bac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bae:	f000 fc0b 	bl	800a3c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009bb2:	e00c      	b.n	8009bce <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bb6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009bba:	f023 0301 	bic.w	r3, r3, #1
 8009bbe:	b2da      	uxtb	r2, r3
 8009bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009bc6:	e002      	b.n	8009bce <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009bc8:	bf00      	nop
 8009bca:	e000      	b.n	8009bce <prvProcessReceivedCommands+0x1a6>
					break;
 8009bcc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009bce:	4b08      	ldr	r3, [pc, #32]	@ (8009bf0 <prvProcessReceivedCommands+0x1c8>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	1d39      	adds	r1, r7, #4
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f7fe f888 	bl	8007cec <xQueueReceive>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	f47f af26 	bne.w	8009a30 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009be4:	bf00      	nop
 8009be6:	bf00      	nop
 8009be8:	3730      	adds	r7, #48	@ 0x30
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	20001344 	.word	0x20001344

08009bf4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b088      	sub	sp, #32
 8009bf8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009bfa:	e049      	b.n	8009c90 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009bfc:	4b2e      	ldr	r3, [pc, #184]	@ (8009cb8 <prvSwitchTimerLists+0xc4>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c06:	4b2c      	ldr	r3, [pc, #176]	@ (8009cb8 <prvSwitchTimerLists+0xc4>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	68db      	ldr	r3, [r3, #12]
 8009c0c:	68db      	ldr	r3, [r3, #12]
 8009c0e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	3304      	adds	r3, #4
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7fd fca1 	bl	800755c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	6a1b      	ldr	r3, [r3, #32]
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c28:	f003 0304 	and.w	r3, r3, #4
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d02f      	beq.n	8009c90 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	699b      	ldr	r3, [r3, #24]
 8009c34:	693a      	ldr	r2, [r7, #16]
 8009c36:	4413      	add	r3, r2
 8009c38:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009c3a:	68ba      	ldr	r2, [r7, #8]
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d90e      	bls.n	8009c60 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	68ba      	ldr	r2, [r7, #8]
 8009c46:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	68fa      	ldr	r2, [r7, #12]
 8009c4c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8009cb8 <prvSwitchTimerLists+0xc4>)
 8009c50:	681a      	ldr	r2, [r3, #0]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	3304      	adds	r3, #4
 8009c56:	4619      	mov	r1, r3
 8009c58:	4610      	mov	r0, r2
 8009c5a:	f7fd fc46 	bl	80074ea <vListInsert>
 8009c5e:	e017      	b.n	8009c90 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c60:	2300      	movs	r3, #0
 8009c62:	9300      	str	r3, [sp, #0]
 8009c64:	2300      	movs	r3, #0
 8009c66:	693a      	ldr	r2, [r7, #16]
 8009c68:	2100      	movs	r1, #0
 8009c6a:	68f8      	ldr	r0, [r7, #12]
 8009c6c:	f7ff fd58 	bl	8009720 <xTimerGenericCommand>
 8009c70:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d10b      	bne.n	8009c90 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c7c:	f383 8811 	msr	BASEPRI, r3
 8009c80:	f3bf 8f6f 	isb	sy
 8009c84:	f3bf 8f4f 	dsb	sy
 8009c88:	603b      	str	r3, [r7, #0]
}
 8009c8a:	bf00      	nop
 8009c8c:	bf00      	nop
 8009c8e:	e7fd      	b.n	8009c8c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c90:	4b09      	ldr	r3, [pc, #36]	@ (8009cb8 <prvSwitchTimerLists+0xc4>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d1b0      	bne.n	8009bfc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009c9a:	4b07      	ldr	r3, [pc, #28]	@ (8009cb8 <prvSwitchTimerLists+0xc4>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009ca0:	4b06      	ldr	r3, [pc, #24]	@ (8009cbc <prvSwitchTimerLists+0xc8>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a04      	ldr	r2, [pc, #16]	@ (8009cb8 <prvSwitchTimerLists+0xc4>)
 8009ca6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009ca8:	4a04      	ldr	r2, [pc, #16]	@ (8009cbc <prvSwitchTimerLists+0xc8>)
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	6013      	str	r3, [r2, #0]
}
 8009cae:	bf00      	nop
 8009cb0:	3718      	adds	r7, #24
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	2000133c 	.word	0x2000133c
 8009cbc:	20001340 	.word	0x20001340

08009cc0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009cc6:	f000 f98f 	bl	8009fe8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009cca:	4b15      	ldr	r3, [pc, #84]	@ (8009d20 <prvCheckForValidListAndQueue+0x60>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d120      	bne.n	8009d14 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009cd2:	4814      	ldr	r0, [pc, #80]	@ (8009d24 <prvCheckForValidListAndQueue+0x64>)
 8009cd4:	f7fd fbb8 	bl	8007448 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009cd8:	4813      	ldr	r0, [pc, #76]	@ (8009d28 <prvCheckForValidListAndQueue+0x68>)
 8009cda:	f7fd fbb5 	bl	8007448 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009cde:	4b13      	ldr	r3, [pc, #76]	@ (8009d2c <prvCheckForValidListAndQueue+0x6c>)
 8009ce0:	4a10      	ldr	r2, [pc, #64]	@ (8009d24 <prvCheckForValidListAndQueue+0x64>)
 8009ce2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009ce4:	4b12      	ldr	r3, [pc, #72]	@ (8009d30 <prvCheckForValidListAndQueue+0x70>)
 8009ce6:	4a10      	ldr	r2, [pc, #64]	@ (8009d28 <prvCheckForValidListAndQueue+0x68>)
 8009ce8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009cea:	2300      	movs	r3, #0
 8009cec:	9300      	str	r3, [sp, #0]
 8009cee:	4b11      	ldr	r3, [pc, #68]	@ (8009d34 <prvCheckForValidListAndQueue+0x74>)
 8009cf0:	4a11      	ldr	r2, [pc, #68]	@ (8009d38 <prvCheckForValidListAndQueue+0x78>)
 8009cf2:	2110      	movs	r1, #16
 8009cf4:	200a      	movs	r0, #10
 8009cf6:	f7fd fcc5 	bl	8007684 <xQueueGenericCreateStatic>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	4a08      	ldr	r2, [pc, #32]	@ (8009d20 <prvCheckForValidListAndQueue+0x60>)
 8009cfe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009d00:	4b07      	ldr	r3, [pc, #28]	@ (8009d20 <prvCheckForValidListAndQueue+0x60>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d005      	beq.n	8009d14 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009d08:	4b05      	ldr	r3, [pc, #20]	@ (8009d20 <prvCheckForValidListAndQueue+0x60>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	490b      	ldr	r1, [pc, #44]	@ (8009d3c <prvCheckForValidListAndQueue+0x7c>)
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7fe fb88 	bl	8008424 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d14:	f000 f99a 	bl	800a04c <vPortExitCritical>
}
 8009d18:	bf00      	nop
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	20001344 	.word	0x20001344
 8009d24:	20001314 	.word	0x20001314
 8009d28:	20001328 	.word	0x20001328
 8009d2c:	2000133c 	.word	0x2000133c
 8009d30:	20001340 	.word	0x20001340
 8009d34:	200013f0 	.word	0x200013f0
 8009d38:	20001350 	.word	0x20001350
 8009d3c:	0800b1a0 	.word	0x0800b1a0

08009d40 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b08a      	sub	sp, #40	@ 0x28
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	60f8      	str	r0, [r7, #12]
 8009d48:	60b9      	str	r1, [r7, #8]
 8009d4a:	607a      	str	r2, [r7, #4]
 8009d4c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8009d4e:	f06f 0301 	mvn.w	r3, #1
 8009d52:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009d60:	4b06      	ldr	r3, [pc, #24]	@ (8009d7c <xTimerPendFunctionCallFromISR+0x3c>)
 8009d62:	6818      	ldr	r0, [r3, #0]
 8009d64:	f107 0114 	add.w	r1, r7, #20
 8009d68:	2300      	movs	r3, #0
 8009d6a:	683a      	ldr	r2, [r7, #0]
 8009d6c:	f7fd ff20 	bl	8007bb0 <xQueueGenericSendFromISR>
 8009d70:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8009d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3728      	adds	r7, #40	@ 0x28
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	20001344 	.word	0x20001344

08009d80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009d80:	b480      	push	{r7}
 8009d82:	b085      	sub	sp, #20
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	60b9      	str	r1, [r7, #8]
 8009d8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	3b04      	subs	r3, #4
 8009d90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009d98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	3b04      	subs	r3, #4
 8009d9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	f023 0201 	bic.w	r2, r3, #1
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	3b04      	subs	r3, #4
 8009dae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009db0:	4a0c      	ldr	r2, [pc, #48]	@ (8009de4 <pxPortInitialiseStack+0x64>)
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	3b14      	subs	r3, #20
 8009dba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	3b04      	subs	r3, #4
 8009dc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f06f 0202 	mvn.w	r2, #2
 8009dce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	3b20      	subs	r3, #32
 8009dd4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3714      	adds	r7, #20
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr
 8009de4:	08009de9 	.word	0x08009de9

08009de8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009de8:	b480      	push	{r7}
 8009dea:	b085      	sub	sp, #20
 8009dec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009dee:	2300      	movs	r3, #0
 8009df0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009df2:	4b13      	ldr	r3, [pc, #76]	@ (8009e40 <prvTaskExitError+0x58>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dfa:	d00b      	beq.n	8009e14 <prvTaskExitError+0x2c>
	__asm volatile
 8009dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e00:	f383 8811 	msr	BASEPRI, r3
 8009e04:	f3bf 8f6f 	isb	sy
 8009e08:	f3bf 8f4f 	dsb	sy
 8009e0c:	60fb      	str	r3, [r7, #12]
}
 8009e0e:	bf00      	nop
 8009e10:	bf00      	nop
 8009e12:	e7fd      	b.n	8009e10 <prvTaskExitError+0x28>
	__asm volatile
 8009e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e18:	f383 8811 	msr	BASEPRI, r3
 8009e1c:	f3bf 8f6f 	isb	sy
 8009e20:	f3bf 8f4f 	dsb	sy
 8009e24:	60bb      	str	r3, [r7, #8]
}
 8009e26:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009e28:	bf00      	nop
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d0fc      	beq.n	8009e2a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009e30:	bf00      	nop
 8009e32:	bf00      	nop
 8009e34:	3714      	adds	r7, #20
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr
 8009e3e:	bf00      	nop
 8009e40:	20000020 	.word	0x20000020
	...

08009e50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009e50:	4b07      	ldr	r3, [pc, #28]	@ (8009e70 <pxCurrentTCBConst2>)
 8009e52:	6819      	ldr	r1, [r3, #0]
 8009e54:	6808      	ldr	r0, [r1, #0]
 8009e56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e5a:	f380 8809 	msr	PSP, r0
 8009e5e:	f3bf 8f6f 	isb	sy
 8009e62:	f04f 0000 	mov.w	r0, #0
 8009e66:	f380 8811 	msr	BASEPRI, r0
 8009e6a:	4770      	bx	lr
 8009e6c:	f3af 8000 	nop.w

08009e70 <pxCurrentTCBConst2>:
 8009e70:	20000e14 	.word	0x20000e14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009e74:	bf00      	nop
 8009e76:	bf00      	nop

08009e78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009e78:	4808      	ldr	r0, [pc, #32]	@ (8009e9c <prvPortStartFirstTask+0x24>)
 8009e7a:	6800      	ldr	r0, [r0, #0]
 8009e7c:	6800      	ldr	r0, [r0, #0]
 8009e7e:	f380 8808 	msr	MSP, r0
 8009e82:	f04f 0000 	mov.w	r0, #0
 8009e86:	f380 8814 	msr	CONTROL, r0
 8009e8a:	b662      	cpsie	i
 8009e8c:	b661      	cpsie	f
 8009e8e:	f3bf 8f4f 	dsb	sy
 8009e92:	f3bf 8f6f 	isb	sy
 8009e96:	df00      	svc	0
 8009e98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009e9a:	bf00      	nop
 8009e9c:	e000ed08 	.word	0xe000ed08

08009ea0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b086      	sub	sp, #24
 8009ea4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009ea6:	4b47      	ldr	r3, [pc, #284]	@ (8009fc4 <xPortStartScheduler+0x124>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a47      	ldr	r2, [pc, #284]	@ (8009fc8 <xPortStartScheduler+0x128>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d10b      	bne.n	8009ec8 <xPortStartScheduler+0x28>
	__asm volatile
 8009eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eb4:	f383 8811 	msr	BASEPRI, r3
 8009eb8:	f3bf 8f6f 	isb	sy
 8009ebc:	f3bf 8f4f 	dsb	sy
 8009ec0:	60fb      	str	r3, [r7, #12]
}
 8009ec2:	bf00      	nop
 8009ec4:	bf00      	nop
 8009ec6:	e7fd      	b.n	8009ec4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009ec8:	4b3e      	ldr	r3, [pc, #248]	@ (8009fc4 <xPortStartScheduler+0x124>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a3f      	ldr	r2, [pc, #252]	@ (8009fcc <xPortStartScheduler+0x12c>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d10b      	bne.n	8009eea <xPortStartScheduler+0x4a>
	__asm volatile
 8009ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ed6:	f383 8811 	msr	BASEPRI, r3
 8009eda:	f3bf 8f6f 	isb	sy
 8009ede:	f3bf 8f4f 	dsb	sy
 8009ee2:	613b      	str	r3, [r7, #16]
}
 8009ee4:	bf00      	nop
 8009ee6:	bf00      	nop
 8009ee8:	e7fd      	b.n	8009ee6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009eea:	4b39      	ldr	r3, [pc, #228]	@ (8009fd0 <xPortStartScheduler+0x130>)
 8009eec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	b2db      	uxtb	r3, r3
 8009ef4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	22ff      	movs	r2, #255	@ 0xff
 8009efa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	b2db      	uxtb	r3, r3
 8009f02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009f04:	78fb      	ldrb	r3, [r7, #3]
 8009f06:	b2db      	uxtb	r3, r3
 8009f08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009f0c:	b2da      	uxtb	r2, r3
 8009f0e:	4b31      	ldr	r3, [pc, #196]	@ (8009fd4 <xPortStartScheduler+0x134>)
 8009f10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009f12:	4b31      	ldr	r3, [pc, #196]	@ (8009fd8 <xPortStartScheduler+0x138>)
 8009f14:	2207      	movs	r2, #7
 8009f16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f18:	e009      	b.n	8009f2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009f1a:	4b2f      	ldr	r3, [pc, #188]	@ (8009fd8 <xPortStartScheduler+0x138>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	3b01      	subs	r3, #1
 8009f20:	4a2d      	ldr	r2, [pc, #180]	@ (8009fd8 <xPortStartScheduler+0x138>)
 8009f22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009f24:	78fb      	ldrb	r3, [r7, #3]
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	005b      	lsls	r3, r3, #1
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f2e:	78fb      	ldrb	r3, [r7, #3]
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f36:	2b80      	cmp	r3, #128	@ 0x80
 8009f38:	d0ef      	beq.n	8009f1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009f3a:	4b27      	ldr	r3, [pc, #156]	@ (8009fd8 <xPortStartScheduler+0x138>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f1c3 0307 	rsb	r3, r3, #7
 8009f42:	2b04      	cmp	r3, #4
 8009f44:	d00b      	beq.n	8009f5e <xPortStartScheduler+0xbe>
	__asm volatile
 8009f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f4a:	f383 8811 	msr	BASEPRI, r3
 8009f4e:	f3bf 8f6f 	isb	sy
 8009f52:	f3bf 8f4f 	dsb	sy
 8009f56:	60bb      	str	r3, [r7, #8]
}
 8009f58:	bf00      	nop
 8009f5a:	bf00      	nop
 8009f5c:	e7fd      	b.n	8009f5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009f5e:	4b1e      	ldr	r3, [pc, #120]	@ (8009fd8 <xPortStartScheduler+0x138>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	021b      	lsls	r3, r3, #8
 8009f64:	4a1c      	ldr	r2, [pc, #112]	@ (8009fd8 <xPortStartScheduler+0x138>)
 8009f66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009f68:	4b1b      	ldr	r3, [pc, #108]	@ (8009fd8 <xPortStartScheduler+0x138>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009f70:	4a19      	ldr	r2, [pc, #100]	@ (8009fd8 <xPortStartScheduler+0x138>)
 8009f72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	b2da      	uxtb	r2, r3
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009f7c:	4b17      	ldr	r3, [pc, #92]	@ (8009fdc <xPortStartScheduler+0x13c>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a16      	ldr	r2, [pc, #88]	@ (8009fdc <xPortStartScheduler+0x13c>)
 8009f82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009f86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009f88:	4b14      	ldr	r3, [pc, #80]	@ (8009fdc <xPortStartScheduler+0x13c>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a13      	ldr	r2, [pc, #76]	@ (8009fdc <xPortStartScheduler+0x13c>)
 8009f8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009f92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009f94:	f000 f8da 	bl	800a14c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009f98:	4b11      	ldr	r3, [pc, #68]	@ (8009fe0 <xPortStartScheduler+0x140>)
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009f9e:	f000 f8f9 	bl	800a194 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009fa2:	4b10      	ldr	r3, [pc, #64]	@ (8009fe4 <xPortStartScheduler+0x144>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4a0f      	ldr	r2, [pc, #60]	@ (8009fe4 <xPortStartScheduler+0x144>)
 8009fa8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009fac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009fae:	f7ff ff63 	bl	8009e78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009fb2:	f7fe fe4f 	bl	8008c54 <vTaskSwitchContext>
	prvTaskExitError();
 8009fb6:	f7ff ff17 	bl	8009de8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3718      	adds	r7, #24
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}
 8009fc4:	e000ed00 	.word	0xe000ed00
 8009fc8:	410fc271 	.word	0x410fc271
 8009fcc:	410fc270 	.word	0x410fc270
 8009fd0:	e000e400 	.word	0xe000e400
 8009fd4:	20001440 	.word	0x20001440
 8009fd8:	20001444 	.word	0x20001444
 8009fdc:	e000ed20 	.word	0xe000ed20
 8009fe0:	20000020 	.word	0x20000020
 8009fe4:	e000ef34 	.word	0xe000ef34

08009fe8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b083      	sub	sp, #12
 8009fec:	af00      	add	r7, sp, #0
	__asm volatile
 8009fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ff2:	f383 8811 	msr	BASEPRI, r3
 8009ff6:	f3bf 8f6f 	isb	sy
 8009ffa:	f3bf 8f4f 	dsb	sy
 8009ffe:	607b      	str	r3, [r7, #4]
}
 800a000:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a002:	4b10      	ldr	r3, [pc, #64]	@ (800a044 <vPortEnterCritical+0x5c>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	3301      	adds	r3, #1
 800a008:	4a0e      	ldr	r2, [pc, #56]	@ (800a044 <vPortEnterCritical+0x5c>)
 800a00a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a00c:	4b0d      	ldr	r3, [pc, #52]	@ (800a044 <vPortEnterCritical+0x5c>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	2b01      	cmp	r3, #1
 800a012:	d110      	bne.n	800a036 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a014:	4b0c      	ldr	r3, [pc, #48]	@ (800a048 <vPortEnterCritical+0x60>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d00b      	beq.n	800a036 <vPortEnterCritical+0x4e>
	__asm volatile
 800a01e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a022:	f383 8811 	msr	BASEPRI, r3
 800a026:	f3bf 8f6f 	isb	sy
 800a02a:	f3bf 8f4f 	dsb	sy
 800a02e:	603b      	str	r3, [r7, #0]
}
 800a030:	bf00      	nop
 800a032:	bf00      	nop
 800a034:	e7fd      	b.n	800a032 <vPortEnterCritical+0x4a>
	}
}
 800a036:	bf00      	nop
 800a038:	370c      	adds	r7, #12
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr
 800a042:	bf00      	nop
 800a044:	20000020 	.word	0x20000020
 800a048:	e000ed04 	.word	0xe000ed04

0800a04c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a04c:	b480      	push	{r7}
 800a04e:	b083      	sub	sp, #12
 800a050:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a052:	4b12      	ldr	r3, [pc, #72]	@ (800a09c <vPortExitCritical+0x50>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d10b      	bne.n	800a072 <vPortExitCritical+0x26>
	__asm volatile
 800a05a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a05e:	f383 8811 	msr	BASEPRI, r3
 800a062:	f3bf 8f6f 	isb	sy
 800a066:	f3bf 8f4f 	dsb	sy
 800a06a:	607b      	str	r3, [r7, #4]
}
 800a06c:	bf00      	nop
 800a06e:	bf00      	nop
 800a070:	e7fd      	b.n	800a06e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a072:	4b0a      	ldr	r3, [pc, #40]	@ (800a09c <vPortExitCritical+0x50>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	3b01      	subs	r3, #1
 800a078:	4a08      	ldr	r2, [pc, #32]	@ (800a09c <vPortExitCritical+0x50>)
 800a07a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a07c:	4b07      	ldr	r3, [pc, #28]	@ (800a09c <vPortExitCritical+0x50>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d105      	bne.n	800a090 <vPortExitCritical+0x44>
 800a084:	2300      	movs	r3, #0
 800a086:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	f383 8811 	msr	BASEPRI, r3
}
 800a08e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a090:	bf00      	nop
 800a092:	370c      	adds	r7, #12
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr
 800a09c:	20000020 	.word	0x20000020

0800a0a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a0a0:	f3ef 8009 	mrs	r0, PSP
 800a0a4:	f3bf 8f6f 	isb	sy
 800a0a8:	4b15      	ldr	r3, [pc, #84]	@ (800a100 <pxCurrentTCBConst>)
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	f01e 0f10 	tst.w	lr, #16
 800a0b0:	bf08      	it	eq
 800a0b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a0b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ba:	6010      	str	r0, [r2, #0]
 800a0bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a0c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a0c4:	f380 8811 	msr	BASEPRI, r0
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	f3bf 8f6f 	isb	sy
 800a0d0:	f7fe fdc0 	bl	8008c54 <vTaskSwitchContext>
 800a0d4:	f04f 0000 	mov.w	r0, #0
 800a0d8:	f380 8811 	msr	BASEPRI, r0
 800a0dc:	bc09      	pop	{r0, r3}
 800a0de:	6819      	ldr	r1, [r3, #0]
 800a0e0:	6808      	ldr	r0, [r1, #0]
 800a0e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0e6:	f01e 0f10 	tst.w	lr, #16
 800a0ea:	bf08      	it	eq
 800a0ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a0f0:	f380 8809 	msr	PSP, r0
 800a0f4:	f3bf 8f6f 	isb	sy
 800a0f8:	4770      	bx	lr
 800a0fa:	bf00      	nop
 800a0fc:	f3af 8000 	nop.w

0800a100 <pxCurrentTCBConst>:
 800a100:	20000e14 	.word	0x20000e14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a104:	bf00      	nop
 800a106:	bf00      	nop

0800a108 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
	__asm volatile
 800a10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a112:	f383 8811 	msr	BASEPRI, r3
 800a116:	f3bf 8f6f 	isb	sy
 800a11a:	f3bf 8f4f 	dsb	sy
 800a11e:	607b      	str	r3, [r7, #4]
}
 800a120:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a122:	f7fe fcdd 	bl	8008ae0 <xTaskIncrementTick>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d003      	beq.n	800a134 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a12c:	4b06      	ldr	r3, [pc, #24]	@ (800a148 <xPortSysTickHandler+0x40>)
 800a12e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a132:	601a      	str	r2, [r3, #0]
 800a134:	2300      	movs	r3, #0
 800a136:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	f383 8811 	msr	BASEPRI, r3
}
 800a13e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a140:	bf00      	nop
 800a142:	3708      	adds	r7, #8
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}
 800a148:	e000ed04 	.word	0xe000ed04

0800a14c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a14c:	b480      	push	{r7}
 800a14e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a150:	4b0b      	ldr	r3, [pc, #44]	@ (800a180 <vPortSetupTimerInterrupt+0x34>)
 800a152:	2200      	movs	r2, #0
 800a154:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a156:	4b0b      	ldr	r3, [pc, #44]	@ (800a184 <vPortSetupTimerInterrupt+0x38>)
 800a158:	2200      	movs	r2, #0
 800a15a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a15c:	4b0a      	ldr	r3, [pc, #40]	@ (800a188 <vPortSetupTimerInterrupt+0x3c>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a0a      	ldr	r2, [pc, #40]	@ (800a18c <vPortSetupTimerInterrupt+0x40>)
 800a162:	fba2 2303 	umull	r2, r3, r2, r3
 800a166:	099b      	lsrs	r3, r3, #6
 800a168:	4a09      	ldr	r2, [pc, #36]	@ (800a190 <vPortSetupTimerInterrupt+0x44>)
 800a16a:	3b01      	subs	r3, #1
 800a16c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a16e:	4b04      	ldr	r3, [pc, #16]	@ (800a180 <vPortSetupTimerInterrupt+0x34>)
 800a170:	2207      	movs	r2, #7
 800a172:	601a      	str	r2, [r3, #0]
}
 800a174:	bf00      	nop
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr
 800a17e:	bf00      	nop
 800a180:	e000e010 	.word	0xe000e010
 800a184:	e000e018 	.word	0xe000e018
 800a188:	20000014 	.word	0x20000014
 800a18c:	10624dd3 	.word	0x10624dd3
 800a190:	e000e014 	.word	0xe000e014

0800a194 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a194:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a1a4 <vPortEnableVFP+0x10>
 800a198:	6801      	ldr	r1, [r0, #0]
 800a19a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a19e:	6001      	str	r1, [r0, #0]
 800a1a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a1a2:	bf00      	nop
 800a1a4:	e000ed88 	.word	0xe000ed88

0800a1a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b085      	sub	sp, #20
 800a1ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a1ae:	f3ef 8305 	mrs	r3, IPSR
 800a1b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2b0f      	cmp	r3, #15
 800a1b8:	d915      	bls.n	800a1e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a1ba:	4a18      	ldr	r2, [pc, #96]	@ (800a21c <vPortValidateInterruptPriority+0x74>)
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	4413      	add	r3, r2
 800a1c0:	781b      	ldrb	r3, [r3, #0]
 800a1c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a1c4:	4b16      	ldr	r3, [pc, #88]	@ (800a220 <vPortValidateInterruptPriority+0x78>)
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	7afa      	ldrb	r2, [r7, #11]
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d20b      	bcs.n	800a1e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a1ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1d2:	f383 8811 	msr	BASEPRI, r3
 800a1d6:	f3bf 8f6f 	isb	sy
 800a1da:	f3bf 8f4f 	dsb	sy
 800a1de:	607b      	str	r3, [r7, #4]
}
 800a1e0:	bf00      	nop
 800a1e2:	bf00      	nop
 800a1e4:	e7fd      	b.n	800a1e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a1e6:	4b0f      	ldr	r3, [pc, #60]	@ (800a224 <vPortValidateInterruptPriority+0x7c>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a1ee:	4b0e      	ldr	r3, [pc, #56]	@ (800a228 <vPortValidateInterruptPriority+0x80>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d90b      	bls.n	800a20e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1fa:	f383 8811 	msr	BASEPRI, r3
 800a1fe:	f3bf 8f6f 	isb	sy
 800a202:	f3bf 8f4f 	dsb	sy
 800a206:	603b      	str	r3, [r7, #0]
}
 800a208:	bf00      	nop
 800a20a:	bf00      	nop
 800a20c:	e7fd      	b.n	800a20a <vPortValidateInterruptPriority+0x62>
	}
 800a20e:	bf00      	nop
 800a210:	3714      	adds	r7, #20
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr
 800a21a:	bf00      	nop
 800a21c:	e000e3f0 	.word	0xe000e3f0
 800a220:	20001440 	.word	0x20001440
 800a224:	e000ed0c 	.word	0xe000ed0c
 800a228:	20001444 	.word	0x20001444

0800a22c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b08a      	sub	sp, #40	@ 0x28
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a234:	2300      	movs	r3, #0
 800a236:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a238:	f7fe fb96 	bl	8008968 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a23c:	4b5c      	ldr	r3, [pc, #368]	@ (800a3b0 <pvPortMalloc+0x184>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d101      	bne.n	800a248 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a244:	f000 f924 	bl	800a490 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a248:	4b5a      	ldr	r3, [pc, #360]	@ (800a3b4 <pvPortMalloc+0x188>)
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	4013      	ands	r3, r2
 800a250:	2b00      	cmp	r3, #0
 800a252:	f040 8095 	bne.w	800a380 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d01e      	beq.n	800a29a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a25c:	2208      	movs	r2, #8
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	4413      	add	r3, r2
 800a262:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f003 0307 	and.w	r3, r3, #7
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d015      	beq.n	800a29a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f023 0307 	bic.w	r3, r3, #7
 800a274:	3308      	adds	r3, #8
 800a276:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f003 0307 	and.w	r3, r3, #7
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d00b      	beq.n	800a29a <pvPortMalloc+0x6e>
	__asm volatile
 800a282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a286:	f383 8811 	msr	BASEPRI, r3
 800a28a:	f3bf 8f6f 	isb	sy
 800a28e:	f3bf 8f4f 	dsb	sy
 800a292:	617b      	str	r3, [r7, #20]
}
 800a294:	bf00      	nop
 800a296:	bf00      	nop
 800a298:	e7fd      	b.n	800a296 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d06f      	beq.n	800a380 <pvPortMalloc+0x154>
 800a2a0:	4b45      	ldr	r3, [pc, #276]	@ (800a3b8 <pvPortMalloc+0x18c>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d86a      	bhi.n	800a380 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a2aa:	4b44      	ldr	r3, [pc, #272]	@ (800a3bc <pvPortMalloc+0x190>)
 800a2ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a2ae:	4b43      	ldr	r3, [pc, #268]	@ (800a3bc <pvPortMalloc+0x190>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a2b4:	e004      	b.n	800a2c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d903      	bls.n	800a2d2 <pvPortMalloc+0xa6>
 800a2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d1f1      	bne.n	800a2b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a2d2:	4b37      	ldr	r3, [pc, #220]	@ (800a3b0 <pvPortMalloc+0x184>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d051      	beq.n	800a380 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a2dc:	6a3b      	ldr	r3, [r7, #32]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	2208      	movs	r2, #8
 800a2e2:	4413      	add	r3, r2
 800a2e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e8:	681a      	ldr	r2, [r3, #0]
 800a2ea:	6a3b      	ldr	r3, [r7, #32]
 800a2ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2f0:	685a      	ldr	r2, [r3, #4]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	1ad2      	subs	r2, r2, r3
 800a2f6:	2308      	movs	r3, #8
 800a2f8:	005b      	lsls	r3, r3, #1
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d920      	bls.n	800a340 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a2fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	4413      	add	r3, r2
 800a304:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a306:	69bb      	ldr	r3, [r7, #24]
 800a308:	f003 0307 	and.w	r3, r3, #7
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d00b      	beq.n	800a328 <pvPortMalloc+0xfc>
	__asm volatile
 800a310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a314:	f383 8811 	msr	BASEPRI, r3
 800a318:	f3bf 8f6f 	isb	sy
 800a31c:	f3bf 8f4f 	dsb	sy
 800a320:	613b      	str	r3, [r7, #16]
}
 800a322:	bf00      	nop
 800a324:	bf00      	nop
 800a326:	e7fd      	b.n	800a324 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a32a:	685a      	ldr	r2, [r3, #4]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	1ad2      	subs	r2, r2, r3
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a33a:	69b8      	ldr	r0, [r7, #24]
 800a33c:	f000 f90a 	bl	800a554 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a340:	4b1d      	ldr	r3, [pc, #116]	@ (800a3b8 <pvPortMalloc+0x18c>)
 800a342:	681a      	ldr	r2, [r3, #0]
 800a344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	1ad3      	subs	r3, r2, r3
 800a34a:	4a1b      	ldr	r2, [pc, #108]	@ (800a3b8 <pvPortMalloc+0x18c>)
 800a34c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a34e:	4b1a      	ldr	r3, [pc, #104]	@ (800a3b8 <pvPortMalloc+0x18c>)
 800a350:	681a      	ldr	r2, [r3, #0]
 800a352:	4b1b      	ldr	r3, [pc, #108]	@ (800a3c0 <pvPortMalloc+0x194>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	429a      	cmp	r2, r3
 800a358:	d203      	bcs.n	800a362 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a35a:	4b17      	ldr	r3, [pc, #92]	@ (800a3b8 <pvPortMalloc+0x18c>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4a18      	ldr	r2, [pc, #96]	@ (800a3c0 <pvPortMalloc+0x194>)
 800a360:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a364:	685a      	ldr	r2, [r3, #4]
 800a366:	4b13      	ldr	r3, [pc, #76]	@ (800a3b4 <pvPortMalloc+0x188>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	431a      	orrs	r2, r3
 800a36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a36e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a372:	2200      	movs	r2, #0
 800a374:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a376:	4b13      	ldr	r3, [pc, #76]	@ (800a3c4 <pvPortMalloc+0x198>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	3301      	adds	r3, #1
 800a37c:	4a11      	ldr	r2, [pc, #68]	@ (800a3c4 <pvPortMalloc+0x198>)
 800a37e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a380:	f7fe fb00 	bl	8008984 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a384:	69fb      	ldr	r3, [r7, #28]
 800a386:	f003 0307 	and.w	r3, r3, #7
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d00b      	beq.n	800a3a6 <pvPortMalloc+0x17a>
	__asm volatile
 800a38e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a392:	f383 8811 	msr	BASEPRI, r3
 800a396:	f3bf 8f6f 	isb	sy
 800a39a:	f3bf 8f4f 	dsb	sy
 800a39e:	60fb      	str	r3, [r7, #12]
}
 800a3a0:	bf00      	nop
 800a3a2:	bf00      	nop
 800a3a4:	e7fd      	b.n	800a3a2 <pvPortMalloc+0x176>
	return pvReturn;
 800a3a6:	69fb      	ldr	r3, [r7, #28]
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3728      	adds	r7, #40	@ 0x28
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}
 800a3b0:	20005050 	.word	0x20005050
 800a3b4:	20005064 	.word	0x20005064
 800a3b8:	20005054 	.word	0x20005054
 800a3bc:	20005048 	.word	0x20005048
 800a3c0:	20005058 	.word	0x20005058
 800a3c4:	2000505c 	.word	0x2000505c

0800a3c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b086      	sub	sp, #24
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d04f      	beq.n	800a47a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a3da:	2308      	movs	r3, #8
 800a3dc:	425b      	negs	r3, r3
 800a3de:	697a      	ldr	r2, [r7, #20]
 800a3e0:	4413      	add	r3, r2
 800a3e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	685a      	ldr	r2, [r3, #4]
 800a3ec:	4b25      	ldr	r3, [pc, #148]	@ (800a484 <vPortFree+0xbc>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4013      	ands	r3, r2
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d10b      	bne.n	800a40e <vPortFree+0x46>
	__asm volatile
 800a3f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3fa:	f383 8811 	msr	BASEPRI, r3
 800a3fe:	f3bf 8f6f 	isb	sy
 800a402:	f3bf 8f4f 	dsb	sy
 800a406:	60fb      	str	r3, [r7, #12]
}
 800a408:	bf00      	nop
 800a40a:	bf00      	nop
 800a40c:	e7fd      	b.n	800a40a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d00b      	beq.n	800a42e <vPortFree+0x66>
	__asm volatile
 800a416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a41a:	f383 8811 	msr	BASEPRI, r3
 800a41e:	f3bf 8f6f 	isb	sy
 800a422:	f3bf 8f4f 	dsb	sy
 800a426:	60bb      	str	r3, [r7, #8]
}
 800a428:	bf00      	nop
 800a42a:	bf00      	nop
 800a42c:	e7fd      	b.n	800a42a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	685a      	ldr	r2, [r3, #4]
 800a432:	4b14      	ldr	r3, [pc, #80]	@ (800a484 <vPortFree+0xbc>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4013      	ands	r3, r2
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d01e      	beq.n	800a47a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d11a      	bne.n	800a47a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	685a      	ldr	r2, [r3, #4]
 800a448:	4b0e      	ldr	r3, [pc, #56]	@ (800a484 <vPortFree+0xbc>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	43db      	mvns	r3, r3
 800a44e:	401a      	ands	r2, r3
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a454:	f7fe fa88 	bl	8008968 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	685a      	ldr	r2, [r3, #4]
 800a45c:	4b0a      	ldr	r3, [pc, #40]	@ (800a488 <vPortFree+0xc0>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4413      	add	r3, r2
 800a462:	4a09      	ldr	r2, [pc, #36]	@ (800a488 <vPortFree+0xc0>)
 800a464:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a466:	6938      	ldr	r0, [r7, #16]
 800a468:	f000 f874 	bl	800a554 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a46c:	4b07      	ldr	r3, [pc, #28]	@ (800a48c <vPortFree+0xc4>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	3301      	adds	r3, #1
 800a472:	4a06      	ldr	r2, [pc, #24]	@ (800a48c <vPortFree+0xc4>)
 800a474:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a476:	f7fe fa85 	bl	8008984 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a47a:	bf00      	nop
 800a47c:	3718      	adds	r7, #24
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	20005064 	.word	0x20005064
 800a488:	20005054 	.word	0x20005054
 800a48c:	20005060 	.word	0x20005060

0800a490 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a490:	b480      	push	{r7}
 800a492:	b085      	sub	sp, #20
 800a494:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a496:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a49a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a49c:	4b27      	ldr	r3, [pc, #156]	@ (800a53c <prvHeapInit+0xac>)
 800a49e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f003 0307 	and.w	r3, r3, #7
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d00c      	beq.n	800a4c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	3307      	adds	r3, #7
 800a4ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f023 0307 	bic.w	r3, r3, #7
 800a4b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a4b8:	68ba      	ldr	r2, [r7, #8]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	1ad3      	subs	r3, r2, r3
 800a4be:	4a1f      	ldr	r2, [pc, #124]	@ (800a53c <prvHeapInit+0xac>)
 800a4c0:	4413      	add	r3, r2
 800a4c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a4c8:	4a1d      	ldr	r2, [pc, #116]	@ (800a540 <prvHeapInit+0xb0>)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a4ce:	4b1c      	ldr	r3, [pc, #112]	@ (800a540 <prvHeapInit+0xb0>)
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	68ba      	ldr	r2, [r7, #8]
 800a4d8:	4413      	add	r3, r2
 800a4da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a4dc:	2208      	movs	r2, #8
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	1a9b      	subs	r3, r3, r2
 800a4e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f023 0307 	bic.w	r3, r3, #7
 800a4ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	4a15      	ldr	r2, [pc, #84]	@ (800a544 <prvHeapInit+0xb4>)
 800a4f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a4f2:	4b14      	ldr	r3, [pc, #80]	@ (800a544 <prvHeapInit+0xb4>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a4fa:	4b12      	ldr	r3, [pc, #72]	@ (800a544 <prvHeapInit+0xb4>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	2200      	movs	r2, #0
 800a500:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	68fa      	ldr	r2, [r7, #12]
 800a50a:	1ad2      	subs	r2, r2, r3
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a510:	4b0c      	ldr	r3, [pc, #48]	@ (800a544 <prvHeapInit+0xb4>)
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	4a0a      	ldr	r2, [pc, #40]	@ (800a548 <prvHeapInit+0xb8>)
 800a51e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	4a09      	ldr	r2, [pc, #36]	@ (800a54c <prvHeapInit+0xbc>)
 800a526:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a528:	4b09      	ldr	r3, [pc, #36]	@ (800a550 <prvHeapInit+0xc0>)
 800a52a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a52e:	601a      	str	r2, [r3, #0]
}
 800a530:	bf00      	nop
 800a532:	3714      	adds	r7, #20
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr
 800a53c:	20001448 	.word	0x20001448
 800a540:	20005048 	.word	0x20005048
 800a544:	20005050 	.word	0x20005050
 800a548:	20005058 	.word	0x20005058
 800a54c:	20005054 	.word	0x20005054
 800a550:	20005064 	.word	0x20005064

0800a554 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a554:	b480      	push	{r7}
 800a556:	b085      	sub	sp, #20
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a55c:	4b28      	ldr	r3, [pc, #160]	@ (800a600 <prvInsertBlockIntoFreeList+0xac>)
 800a55e:	60fb      	str	r3, [r7, #12]
 800a560:	e002      	b.n	800a568 <prvInsertBlockIntoFreeList+0x14>
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	60fb      	str	r3, [r7, #12]
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	687a      	ldr	r2, [r7, #4]
 800a56e:	429a      	cmp	r2, r3
 800a570:	d8f7      	bhi.n	800a562 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	68ba      	ldr	r2, [r7, #8]
 800a57c:	4413      	add	r3, r2
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	429a      	cmp	r2, r3
 800a582:	d108      	bne.n	800a596 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	685a      	ldr	r2, [r3, #4]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	441a      	add	r2, r3
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	68ba      	ldr	r2, [r7, #8]
 800a5a0:	441a      	add	r2, r3
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d118      	bne.n	800a5dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	4b15      	ldr	r3, [pc, #84]	@ (800a604 <prvInsertBlockIntoFreeList+0xb0>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d00d      	beq.n	800a5d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	685a      	ldr	r2, [r3, #4]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	441a      	add	r2, r3
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	681a      	ldr	r2, [r3, #0]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	601a      	str	r2, [r3, #0]
 800a5d0:	e008      	b.n	800a5e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a5d2:	4b0c      	ldr	r3, [pc, #48]	@ (800a604 <prvInsertBlockIntoFreeList+0xb0>)
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	601a      	str	r2, [r3, #0]
 800a5da:	e003      	b.n	800a5e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a5e4:	68fa      	ldr	r2, [r7, #12]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d002      	beq.n	800a5f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5f2:	bf00      	nop
 800a5f4:	3714      	adds	r7, #20
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr
 800a5fe:	bf00      	nop
 800a600:	20005048 	.word	0x20005048
 800a604:	20005050 	.word	0x20005050

0800a608 <sniprintf>:
 800a608:	b40c      	push	{r2, r3}
 800a60a:	b530      	push	{r4, r5, lr}
 800a60c:	4b18      	ldr	r3, [pc, #96]	@ (800a670 <sniprintf+0x68>)
 800a60e:	1e0c      	subs	r4, r1, #0
 800a610:	681d      	ldr	r5, [r3, #0]
 800a612:	b09d      	sub	sp, #116	@ 0x74
 800a614:	da08      	bge.n	800a628 <sniprintf+0x20>
 800a616:	238b      	movs	r3, #139	@ 0x8b
 800a618:	602b      	str	r3, [r5, #0]
 800a61a:	f04f 30ff 	mov.w	r0, #4294967295
 800a61e:	b01d      	add	sp, #116	@ 0x74
 800a620:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a624:	b002      	add	sp, #8
 800a626:	4770      	bx	lr
 800a628:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a62c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a630:	f04f 0300 	mov.w	r3, #0
 800a634:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a636:	bf14      	ite	ne
 800a638:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a63c:	4623      	moveq	r3, r4
 800a63e:	9304      	str	r3, [sp, #16]
 800a640:	9307      	str	r3, [sp, #28]
 800a642:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a646:	9002      	str	r0, [sp, #8]
 800a648:	9006      	str	r0, [sp, #24]
 800a64a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a64e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a650:	ab21      	add	r3, sp, #132	@ 0x84
 800a652:	a902      	add	r1, sp, #8
 800a654:	4628      	mov	r0, r5
 800a656:	9301      	str	r3, [sp, #4]
 800a658:	f000 f9a2 	bl	800a9a0 <_svfiprintf_r>
 800a65c:	1c43      	adds	r3, r0, #1
 800a65e:	bfbc      	itt	lt
 800a660:	238b      	movlt	r3, #139	@ 0x8b
 800a662:	602b      	strlt	r3, [r5, #0]
 800a664:	2c00      	cmp	r4, #0
 800a666:	d0da      	beq.n	800a61e <sniprintf+0x16>
 800a668:	9b02      	ldr	r3, [sp, #8]
 800a66a:	2200      	movs	r2, #0
 800a66c:	701a      	strb	r2, [r3, #0]
 800a66e:	e7d6      	b.n	800a61e <sniprintf+0x16>
 800a670:	20000024 	.word	0x20000024

0800a674 <memset>:
 800a674:	4402      	add	r2, r0
 800a676:	4603      	mov	r3, r0
 800a678:	4293      	cmp	r3, r2
 800a67a:	d100      	bne.n	800a67e <memset+0xa>
 800a67c:	4770      	bx	lr
 800a67e:	f803 1b01 	strb.w	r1, [r3], #1
 800a682:	e7f9      	b.n	800a678 <memset+0x4>

0800a684 <__errno>:
 800a684:	4b01      	ldr	r3, [pc, #4]	@ (800a68c <__errno+0x8>)
 800a686:	6818      	ldr	r0, [r3, #0]
 800a688:	4770      	bx	lr
 800a68a:	bf00      	nop
 800a68c:	20000024 	.word	0x20000024

0800a690 <__libc_init_array>:
 800a690:	b570      	push	{r4, r5, r6, lr}
 800a692:	4d0d      	ldr	r5, [pc, #52]	@ (800a6c8 <__libc_init_array+0x38>)
 800a694:	4c0d      	ldr	r4, [pc, #52]	@ (800a6cc <__libc_init_array+0x3c>)
 800a696:	1b64      	subs	r4, r4, r5
 800a698:	10a4      	asrs	r4, r4, #2
 800a69a:	2600      	movs	r6, #0
 800a69c:	42a6      	cmp	r6, r4
 800a69e:	d109      	bne.n	800a6b4 <__libc_init_array+0x24>
 800a6a0:	4d0b      	ldr	r5, [pc, #44]	@ (800a6d0 <__libc_init_array+0x40>)
 800a6a2:	4c0c      	ldr	r4, [pc, #48]	@ (800a6d4 <__libc_init_array+0x44>)
 800a6a4:	f000 fc64 	bl	800af70 <_init>
 800a6a8:	1b64      	subs	r4, r4, r5
 800a6aa:	10a4      	asrs	r4, r4, #2
 800a6ac:	2600      	movs	r6, #0
 800a6ae:	42a6      	cmp	r6, r4
 800a6b0:	d105      	bne.n	800a6be <__libc_init_array+0x2e>
 800a6b2:	bd70      	pop	{r4, r5, r6, pc}
 800a6b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6b8:	4798      	blx	r3
 800a6ba:	3601      	adds	r6, #1
 800a6bc:	e7ee      	b.n	800a69c <__libc_init_array+0xc>
 800a6be:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6c2:	4798      	blx	r3
 800a6c4:	3601      	adds	r6, #1
 800a6c6:	e7f2      	b.n	800a6ae <__libc_init_array+0x1e>
 800a6c8:	0800b474 	.word	0x0800b474
 800a6cc:	0800b474 	.word	0x0800b474
 800a6d0:	0800b474 	.word	0x0800b474
 800a6d4:	0800b478 	.word	0x0800b478

0800a6d8 <__retarget_lock_acquire_recursive>:
 800a6d8:	4770      	bx	lr

0800a6da <__retarget_lock_release_recursive>:
 800a6da:	4770      	bx	lr

0800a6dc <memcpy>:
 800a6dc:	440a      	add	r2, r1
 800a6de:	4291      	cmp	r1, r2
 800a6e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a6e4:	d100      	bne.n	800a6e8 <memcpy+0xc>
 800a6e6:	4770      	bx	lr
 800a6e8:	b510      	push	{r4, lr}
 800a6ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6f2:	4291      	cmp	r1, r2
 800a6f4:	d1f9      	bne.n	800a6ea <memcpy+0xe>
 800a6f6:	bd10      	pop	{r4, pc}

0800a6f8 <_free_r>:
 800a6f8:	b538      	push	{r3, r4, r5, lr}
 800a6fa:	4605      	mov	r5, r0
 800a6fc:	2900      	cmp	r1, #0
 800a6fe:	d041      	beq.n	800a784 <_free_r+0x8c>
 800a700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a704:	1f0c      	subs	r4, r1, #4
 800a706:	2b00      	cmp	r3, #0
 800a708:	bfb8      	it	lt
 800a70a:	18e4      	addlt	r4, r4, r3
 800a70c:	f000 f8e0 	bl	800a8d0 <__malloc_lock>
 800a710:	4a1d      	ldr	r2, [pc, #116]	@ (800a788 <_free_r+0x90>)
 800a712:	6813      	ldr	r3, [r2, #0]
 800a714:	b933      	cbnz	r3, 800a724 <_free_r+0x2c>
 800a716:	6063      	str	r3, [r4, #4]
 800a718:	6014      	str	r4, [r2, #0]
 800a71a:	4628      	mov	r0, r5
 800a71c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a720:	f000 b8dc 	b.w	800a8dc <__malloc_unlock>
 800a724:	42a3      	cmp	r3, r4
 800a726:	d908      	bls.n	800a73a <_free_r+0x42>
 800a728:	6820      	ldr	r0, [r4, #0]
 800a72a:	1821      	adds	r1, r4, r0
 800a72c:	428b      	cmp	r3, r1
 800a72e:	bf01      	itttt	eq
 800a730:	6819      	ldreq	r1, [r3, #0]
 800a732:	685b      	ldreq	r3, [r3, #4]
 800a734:	1809      	addeq	r1, r1, r0
 800a736:	6021      	streq	r1, [r4, #0]
 800a738:	e7ed      	b.n	800a716 <_free_r+0x1e>
 800a73a:	461a      	mov	r2, r3
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	b10b      	cbz	r3, 800a744 <_free_r+0x4c>
 800a740:	42a3      	cmp	r3, r4
 800a742:	d9fa      	bls.n	800a73a <_free_r+0x42>
 800a744:	6811      	ldr	r1, [r2, #0]
 800a746:	1850      	adds	r0, r2, r1
 800a748:	42a0      	cmp	r0, r4
 800a74a:	d10b      	bne.n	800a764 <_free_r+0x6c>
 800a74c:	6820      	ldr	r0, [r4, #0]
 800a74e:	4401      	add	r1, r0
 800a750:	1850      	adds	r0, r2, r1
 800a752:	4283      	cmp	r3, r0
 800a754:	6011      	str	r1, [r2, #0]
 800a756:	d1e0      	bne.n	800a71a <_free_r+0x22>
 800a758:	6818      	ldr	r0, [r3, #0]
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	6053      	str	r3, [r2, #4]
 800a75e:	4408      	add	r0, r1
 800a760:	6010      	str	r0, [r2, #0]
 800a762:	e7da      	b.n	800a71a <_free_r+0x22>
 800a764:	d902      	bls.n	800a76c <_free_r+0x74>
 800a766:	230c      	movs	r3, #12
 800a768:	602b      	str	r3, [r5, #0]
 800a76a:	e7d6      	b.n	800a71a <_free_r+0x22>
 800a76c:	6820      	ldr	r0, [r4, #0]
 800a76e:	1821      	adds	r1, r4, r0
 800a770:	428b      	cmp	r3, r1
 800a772:	bf04      	itt	eq
 800a774:	6819      	ldreq	r1, [r3, #0]
 800a776:	685b      	ldreq	r3, [r3, #4]
 800a778:	6063      	str	r3, [r4, #4]
 800a77a:	bf04      	itt	eq
 800a77c:	1809      	addeq	r1, r1, r0
 800a77e:	6021      	streq	r1, [r4, #0]
 800a780:	6054      	str	r4, [r2, #4]
 800a782:	e7ca      	b.n	800a71a <_free_r+0x22>
 800a784:	bd38      	pop	{r3, r4, r5, pc}
 800a786:	bf00      	nop
 800a788:	200051ac 	.word	0x200051ac

0800a78c <sbrk_aligned>:
 800a78c:	b570      	push	{r4, r5, r6, lr}
 800a78e:	4e0f      	ldr	r6, [pc, #60]	@ (800a7cc <sbrk_aligned+0x40>)
 800a790:	460c      	mov	r4, r1
 800a792:	6831      	ldr	r1, [r6, #0]
 800a794:	4605      	mov	r5, r0
 800a796:	b911      	cbnz	r1, 800a79e <sbrk_aligned+0x12>
 800a798:	f000 fba4 	bl	800aee4 <_sbrk_r>
 800a79c:	6030      	str	r0, [r6, #0]
 800a79e:	4621      	mov	r1, r4
 800a7a0:	4628      	mov	r0, r5
 800a7a2:	f000 fb9f 	bl	800aee4 <_sbrk_r>
 800a7a6:	1c43      	adds	r3, r0, #1
 800a7a8:	d103      	bne.n	800a7b2 <sbrk_aligned+0x26>
 800a7aa:	f04f 34ff 	mov.w	r4, #4294967295
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	bd70      	pop	{r4, r5, r6, pc}
 800a7b2:	1cc4      	adds	r4, r0, #3
 800a7b4:	f024 0403 	bic.w	r4, r4, #3
 800a7b8:	42a0      	cmp	r0, r4
 800a7ba:	d0f8      	beq.n	800a7ae <sbrk_aligned+0x22>
 800a7bc:	1a21      	subs	r1, r4, r0
 800a7be:	4628      	mov	r0, r5
 800a7c0:	f000 fb90 	bl	800aee4 <_sbrk_r>
 800a7c4:	3001      	adds	r0, #1
 800a7c6:	d1f2      	bne.n	800a7ae <sbrk_aligned+0x22>
 800a7c8:	e7ef      	b.n	800a7aa <sbrk_aligned+0x1e>
 800a7ca:	bf00      	nop
 800a7cc:	200051a8 	.word	0x200051a8

0800a7d0 <_malloc_r>:
 800a7d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7d4:	1ccd      	adds	r5, r1, #3
 800a7d6:	f025 0503 	bic.w	r5, r5, #3
 800a7da:	3508      	adds	r5, #8
 800a7dc:	2d0c      	cmp	r5, #12
 800a7de:	bf38      	it	cc
 800a7e0:	250c      	movcc	r5, #12
 800a7e2:	2d00      	cmp	r5, #0
 800a7e4:	4606      	mov	r6, r0
 800a7e6:	db01      	blt.n	800a7ec <_malloc_r+0x1c>
 800a7e8:	42a9      	cmp	r1, r5
 800a7ea:	d904      	bls.n	800a7f6 <_malloc_r+0x26>
 800a7ec:	230c      	movs	r3, #12
 800a7ee:	6033      	str	r3, [r6, #0]
 800a7f0:	2000      	movs	r0, #0
 800a7f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a8cc <_malloc_r+0xfc>
 800a7fa:	f000 f869 	bl	800a8d0 <__malloc_lock>
 800a7fe:	f8d8 3000 	ldr.w	r3, [r8]
 800a802:	461c      	mov	r4, r3
 800a804:	bb44      	cbnz	r4, 800a858 <_malloc_r+0x88>
 800a806:	4629      	mov	r1, r5
 800a808:	4630      	mov	r0, r6
 800a80a:	f7ff ffbf 	bl	800a78c <sbrk_aligned>
 800a80e:	1c43      	adds	r3, r0, #1
 800a810:	4604      	mov	r4, r0
 800a812:	d158      	bne.n	800a8c6 <_malloc_r+0xf6>
 800a814:	f8d8 4000 	ldr.w	r4, [r8]
 800a818:	4627      	mov	r7, r4
 800a81a:	2f00      	cmp	r7, #0
 800a81c:	d143      	bne.n	800a8a6 <_malloc_r+0xd6>
 800a81e:	2c00      	cmp	r4, #0
 800a820:	d04b      	beq.n	800a8ba <_malloc_r+0xea>
 800a822:	6823      	ldr	r3, [r4, #0]
 800a824:	4639      	mov	r1, r7
 800a826:	4630      	mov	r0, r6
 800a828:	eb04 0903 	add.w	r9, r4, r3
 800a82c:	f000 fb5a 	bl	800aee4 <_sbrk_r>
 800a830:	4581      	cmp	r9, r0
 800a832:	d142      	bne.n	800a8ba <_malloc_r+0xea>
 800a834:	6821      	ldr	r1, [r4, #0]
 800a836:	1a6d      	subs	r5, r5, r1
 800a838:	4629      	mov	r1, r5
 800a83a:	4630      	mov	r0, r6
 800a83c:	f7ff ffa6 	bl	800a78c <sbrk_aligned>
 800a840:	3001      	adds	r0, #1
 800a842:	d03a      	beq.n	800a8ba <_malloc_r+0xea>
 800a844:	6823      	ldr	r3, [r4, #0]
 800a846:	442b      	add	r3, r5
 800a848:	6023      	str	r3, [r4, #0]
 800a84a:	f8d8 3000 	ldr.w	r3, [r8]
 800a84e:	685a      	ldr	r2, [r3, #4]
 800a850:	bb62      	cbnz	r2, 800a8ac <_malloc_r+0xdc>
 800a852:	f8c8 7000 	str.w	r7, [r8]
 800a856:	e00f      	b.n	800a878 <_malloc_r+0xa8>
 800a858:	6822      	ldr	r2, [r4, #0]
 800a85a:	1b52      	subs	r2, r2, r5
 800a85c:	d420      	bmi.n	800a8a0 <_malloc_r+0xd0>
 800a85e:	2a0b      	cmp	r2, #11
 800a860:	d917      	bls.n	800a892 <_malloc_r+0xc2>
 800a862:	1961      	adds	r1, r4, r5
 800a864:	42a3      	cmp	r3, r4
 800a866:	6025      	str	r5, [r4, #0]
 800a868:	bf18      	it	ne
 800a86a:	6059      	strne	r1, [r3, #4]
 800a86c:	6863      	ldr	r3, [r4, #4]
 800a86e:	bf08      	it	eq
 800a870:	f8c8 1000 	streq.w	r1, [r8]
 800a874:	5162      	str	r2, [r4, r5]
 800a876:	604b      	str	r3, [r1, #4]
 800a878:	4630      	mov	r0, r6
 800a87a:	f000 f82f 	bl	800a8dc <__malloc_unlock>
 800a87e:	f104 000b 	add.w	r0, r4, #11
 800a882:	1d23      	adds	r3, r4, #4
 800a884:	f020 0007 	bic.w	r0, r0, #7
 800a888:	1ac2      	subs	r2, r0, r3
 800a88a:	bf1c      	itt	ne
 800a88c:	1a1b      	subne	r3, r3, r0
 800a88e:	50a3      	strne	r3, [r4, r2]
 800a890:	e7af      	b.n	800a7f2 <_malloc_r+0x22>
 800a892:	6862      	ldr	r2, [r4, #4]
 800a894:	42a3      	cmp	r3, r4
 800a896:	bf0c      	ite	eq
 800a898:	f8c8 2000 	streq.w	r2, [r8]
 800a89c:	605a      	strne	r2, [r3, #4]
 800a89e:	e7eb      	b.n	800a878 <_malloc_r+0xa8>
 800a8a0:	4623      	mov	r3, r4
 800a8a2:	6864      	ldr	r4, [r4, #4]
 800a8a4:	e7ae      	b.n	800a804 <_malloc_r+0x34>
 800a8a6:	463c      	mov	r4, r7
 800a8a8:	687f      	ldr	r7, [r7, #4]
 800a8aa:	e7b6      	b.n	800a81a <_malloc_r+0x4a>
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	42a3      	cmp	r3, r4
 800a8b2:	d1fb      	bne.n	800a8ac <_malloc_r+0xdc>
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	6053      	str	r3, [r2, #4]
 800a8b8:	e7de      	b.n	800a878 <_malloc_r+0xa8>
 800a8ba:	230c      	movs	r3, #12
 800a8bc:	6033      	str	r3, [r6, #0]
 800a8be:	4630      	mov	r0, r6
 800a8c0:	f000 f80c 	bl	800a8dc <__malloc_unlock>
 800a8c4:	e794      	b.n	800a7f0 <_malloc_r+0x20>
 800a8c6:	6005      	str	r5, [r0, #0]
 800a8c8:	e7d6      	b.n	800a878 <_malloc_r+0xa8>
 800a8ca:	bf00      	nop
 800a8cc:	200051ac 	.word	0x200051ac

0800a8d0 <__malloc_lock>:
 800a8d0:	4801      	ldr	r0, [pc, #4]	@ (800a8d8 <__malloc_lock+0x8>)
 800a8d2:	f7ff bf01 	b.w	800a6d8 <__retarget_lock_acquire_recursive>
 800a8d6:	bf00      	nop
 800a8d8:	200051a4 	.word	0x200051a4

0800a8dc <__malloc_unlock>:
 800a8dc:	4801      	ldr	r0, [pc, #4]	@ (800a8e4 <__malloc_unlock+0x8>)
 800a8de:	f7ff befc 	b.w	800a6da <__retarget_lock_release_recursive>
 800a8e2:	bf00      	nop
 800a8e4:	200051a4 	.word	0x200051a4

0800a8e8 <__ssputs_r>:
 800a8e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8ec:	688e      	ldr	r6, [r1, #8]
 800a8ee:	461f      	mov	r7, r3
 800a8f0:	42be      	cmp	r6, r7
 800a8f2:	680b      	ldr	r3, [r1, #0]
 800a8f4:	4682      	mov	sl, r0
 800a8f6:	460c      	mov	r4, r1
 800a8f8:	4690      	mov	r8, r2
 800a8fa:	d82d      	bhi.n	800a958 <__ssputs_r+0x70>
 800a8fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a900:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a904:	d026      	beq.n	800a954 <__ssputs_r+0x6c>
 800a906:	6965      	ldr	r5, [r4, #20]
 800a908:	6909      	ldr	r1, [r1, #16]
 800a90a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a90e:	eba3 0901 	sub.w	r9, r3, r1
 800a912:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a916:	1c7b      	adds	r3, r7, #1
 800a918:	444b      	add	r3, r9
 800a91a:	106d      	asrs	r5, r5, #1
 800a91c:	429d      	cmp	r5, r3
 800a91e:	bf38      	it	cc
 800a920:	461d      	movcc	r5, r3
 800a922:	0553      	lsls	r3, r2, #21
 800a924:	d527      	bpl.n	800a976 <__ssputs_r+0x8e>
 800a926:	4629      	mov	r1, r5
 800a928:	f7ff ff52 	bl	800a7d0 <_malloc_r>
 800a92c:	4606      	mov	r6, r0
 800a92e:	b360      	cbz	r0, 800a98a <__ssputs_r+0xa2>
 800a930:	6921      	ldr	r1, [r4, #16]
 800a932:	464a      	mov	r2, r9
 800a934:	f7ff fed2 	bl	800a6dc <memcpy>
 800a938:	89a3      	ldrh	r3, [r4, #12]
 800a93a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a93e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a942:	81a3      	strh	r3, [r4, #12]
 800a944:	6126      	str	r6, [r4, #16]
 800a946:	6165      	str	r5, [r4, #20]
 800a948:	444e      	add	r6, r9
 800a94a:	eba5 0509 	sub.w	r5, r5, r9
 800a94e:	6026      	str	r6, [r4, #0]
 800a950:	60a5      	str	r5, [r4, #8]
 800a952:	463e      	mov	r6, r7
 800a954:	42be      	cmp	r6, r7
 800a956:	d900      	bls.n	800a95a <__ssputs_r+0x72>
 800a958:	463e      	mov	r6, r7
 800a95a:	6820      	ldr	r0, [r4, #0]
 800a95c:	4632      	mov	r2, r6
 800a95e:	4641      	mov	r1, r8
 800a960:	f000 faa6 	bl	800aeb0 <memmove>
 800a964:	68a3      	ldr	r3, [r4, #8]
 800a966:	1b9b      	subs	r3, r3, r6
 800a968:	60a3      	str	r3, [r4, #8]
 800a96a:	6823      	ldr	r3, [r4, #0]
 800a96c:	4433      	add	r3, r6
 800a96e:	6023      	str	r3, [r4, #0]
 800a970:	2000      	movs	r0, #0
 800a972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a976:	462a      	mov	r2, r5
 800a978:	f000 fac4 	bl	800af04 <_realloc_r>
 800a97c:	4606      	mov	r6, r0
 800a97e:	2800      	cmp	r0, #0
 800a980:	d1e0      	bne.n	800a944 <__ssputs_r+0x5c>
 800a982:	6921      	ldr	r1, [r4, #16]
 800a984:	4650      	mov	r0, sl
 800a986:	f7ff feb7 	bl	800a6f8 <_free_r>
 800a98a:	230c      	movs	r3, #12
 800a98c:	f8ca 3000 	str.w	r3, [sl]
 800a990:	89a3      	ldrh	r3, [r4, #12]
 800a992:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a996:	81a3      	strh	r3, [r4, #12]
 800a998:	f04f 30ff 	mov.w	r0, #4294967295
 800a99c:	e7e9      	b.n	800a972 <__ssputs_r+0x8a>
	...

0800a9a0 <_svfiprintf_r>:
 800a9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9a4:	4698      	mov	r8, r3
 800a9a6:	898b      	ldrh	r3, [r1, #12]
 800a9a8:	061b      	lsls	r3, r3, #24
 800a9aa:	b09d      	sub	sp, #116	@ 0x74
 800a9ac:	4607      	mov	r7, r0
 800a9ae:	460d      	mov	r5, r1
 800a9b0:	4614      	mov	r4, r2
 800a9b2:	d510      	bpl.n	800a9d6 <_svfiprintf_r+0x36>
 800a9b4:	690b      	ldr	r3, [r1, #16]
 800a9b6:	b973      	cbnz	r3, 800a9d6 <_svfiprintf_r+0x36>
 800a9b8:	2140      	movs	r1, #64	@ 0x40
 800a9ba:	f7ff ff09 	bl	800a7d0 <_malloc_r>
 800a9be:	6028      	str	r0, [r5, #0]
 800a9c0:	6128      	str	r0, [r5, #16]
 800a9c2:	b930      	cbnz	r0, 800a9d2 <_svfiprintf_r+0x32>
 800a9c4:	230c      	movs	r3, #12
 800a9c6:	603b      	str	r3, [r7, #0]
 800a9c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9cc:	b01d      	add	sp, #116	@ 0x74
 800a9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9d2:	2340      	movs	r3, #64	@ 0x40
 800a9d4:	616b      	str	r3, [r5, #20]
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9da:	2320      	movs	r3, #32
 800a9dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a9e0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9e4:	2330      	movs	r3, #48	@ 0x30
 800a9e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ab84 <_svfiprintf_r+0x1e4>
 800a9ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a9ee:	f04f 0901 	mov.w	r9, #1
 800a9f2:	4623      	mov	r3, r4
 800a9f4:	469a      	mov	sl, r3
 800a9f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9fa:	b10a      	cbz	r2, 800aa00 <_svfiprintf_r+0x60>
 800a9fc:	2a25      	cmp	r2, #37	@ 0x25
 800a9fe:	d1f9      	bne.n	800a9f4 <_svfiprintf_r+0x54>
 800aa00:	ebba 0b04 	subs.w	fp, sl, r4
 800aa04:	d00b      	beq.n	800aa1e <_svfiprintf_r+0x7e>
 800aa06:	465b      	mov	r3, fp
 800aa08:	4622      	mov	r2, r4
 800aa0a:	4629      	mov	r1, r5
 800aa0c:	4638      	mov	r0, r7
 800aa0e:	f7ff ff6b 	bl	800a8e8 <__ssputs_r>
 800aa12:	3001      	adds	r0, #1
 800aa14:	f000 80a7 	beq.w	800ab66 <_svfiprintf_r+0x1c6>
 800aa18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa1a:	445a      	add	r2, fp
 800aa1c:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa1e:	f89a 3000 	ldrb.w	r3, [sl]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	f000 809f 	beq.w	800ab66 <_svfiprintf_r+0x1c6>
 800aa28:	2300      	movs	r3, #0
 800aa2a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa32:	f10a 0a01 	add.w	sl, sl, #1
 800aa36:	9304      	str	r3, [sp, #16]
 800aa38:	9307      	str	r3, [sp, #28]
 800aa3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa3e:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa40:	4654      	mov	r4, sl
 800aa42:	2205      	movs	r2, #5
 800aa44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa48:	484e      	ldr	r0, [pc, #312]	@ (800ab84 <_svfiprintf_r+0x1e4>)
 800aa4a:	f7f5 fbe1 	bl	8000210 <memchr>
 800aa4e:	9a04      	ldr	r2, [sp, #16]
 800aa50:	b9d8      	cbnz	r0, 800aa8a <_svfiprintf_r+0xea>
 800aa52:	06d0      	lsls	r0, r2, #27
 800aa54:	bf44      	itt	mi
 800aa56:	2320      	movmi	r3, #32
 800aa58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa5c:	0711      	lsls	r1, r2, #28
 800aa5e:	bf44      	itt	mi
 800aa60:	232b      	movmi	r3, #43	@ 0x2b
 800aa62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa66:	f89a 3000 	ldrb.w	r3, [sl]
 800aa6a:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa6c:	d015      	beq.n	800aa9a <_svfiprintf_r+0xfa>
 800aa6e:	9a07      	ldr	r2, [sp, #28]
 800aa70:	4654      	mov	r4, sl
 800aa72:	2000      	movs	r0, #0
 800aa74:	f04f 0c0a 	mov.w	ip, #10
 800aa78:	4621      	mov	r1, r4
 800aa7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa7e:	3b30      	subs	r3, #48	@ 0x30
 800aa80:	2b09      	cmp	r3, #9
 800aa82:	d94b      	bls.n	800ab1c <_svfiprintf_r+0x17c>
 800aa84:	b1b0      	cbz	r0, 800aab4 <_svfiprintf_r+0x114>
 800aa86:	9207      	str	r2, [sp, #28]
 800aa88:	e014      	b.n	800aab4 <_svfiprintf_r+0x114>
 800aa8a:	eba0 0308 	sub.w	r3, r0, r8
 800aa8e:	fa09 f303 	lsl.w	r3, r9, r3
 800aa92:	4313      	orrs	r3, r2
 800aa94:	9304      	str	r3, [sp, #16]
 800aa96:	46a2      	mov	sl, r4
 800aa98:	e7d2      	b.n	800aa40 <_svfiprintf_r+0xa0>
 800aa9a:	9b03      	ldr	r3, [sp, #12]
 800aa9c:	1d19      	adds	r1, r3, #4
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	9103      	str	r1, [sp, #12]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	bfbb      	ittet	lt
 800aaa6:	425b      	neglt	r3, r3
 800aaa8:	f042 0202 	orrlt.w	r2, r2, #2
 800aaac:	9307      	strge	r3, [sp, #28]
 800aaae:	9307      	strlt	r3, [sp, #28]
 800aab0:	bfb8      	it	lt
 800aab2:	9204      	strlt	r2, [sp, #16]
 800aab4:	7823      	ldrb	r3, [r4, #0]
 800aab6:	2b2e      	cmp	r3, #46	@ 0x2e
 800aab8:	d10a      	bne.n	800aad0 <_svfiprintf_r+0x130>
 800aaba:	7863      	ldrb	r3, [r4, #1]
 800aabc:	2b2a      	cmp	r3, #42	@ 0x2a
 800aabe:	d132      	bne.n	800ab26 <_svfiprintf_r+0x186>
 800aac0:	9b03      	ldr	r3, [sp, #12]
 800aac2:	1d1a      	adds	r2, r3, #4
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	9203      	str	r2, [sp, #12]
 800aac8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aacc:	3402      	adds	r4, #2
 800aace:	9305      	str	r3, [sp, #20]
 800aad0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ab94 <_svfiprintf_r+0x1f4>
 800aad4:	7821      	ldrb	r1, [r4, #0]
 800aad6:	2203      	movs	r2, #3
 800aad8:	4650      	mov	r0, sl
 800aada:	f7f5 fb99 	bl	8000210 <memchr>
 800aade:	b138      	cbz	r0, 800aaf0 <_svfiprintf_r+0x150>
 800aae0:	9b04      	ldr	r3, [sp, #16]
 800aae2:	eba0 000a 	sub.w	r0, r0, sl
 800aae6:	2240      	movs	r2, #64	@ 0x40
 800aae8:	4082      	lsls	r2, r0
 800aaea:	4313      	orrs	r3, r2
 800aaec:	3401      	adds	r4, #1
 800aaee:	9304      	str	r3, [sp, #16]
 800aaf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaf4:	4824      	ldr	r0, [pc, #144]	@ (800ab88 <_svfiprintf_r+0x1e8>)
 800aaf6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aafa:	2206      	movs	r2, #6
 800aafc:	f7f5 fb88 	bl	8000210 <memchr>
 800ab00:	2800      	cmp	r0, #0
 800ab02:	d036      	beq.n	800ab72 <_svfiprintf_r+0x1d2>
 800ab04:	4b21      	ldr	r3, [pc, #132]	@ (800ab8c <_svfiprintf_r+0x1ec>)
 800ab06:	bb1b      	cbnz	r3, 800ab50 <_svfiprintf_r+0x1b0>
 800ab08:	9b03      	ldr	r3, [sp, #12]
 800ab0a:	3307      	adds	r3, #7
 800ab0c:	f023 0307 	bic.w	r3, r3, #7
 800ab10:	3308      	adds	r3, #8
 800ab12:	9303      	str	r3, [sp, #12]
 800ab14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab16:	4433      	add	r3, r6
 800ab18:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab1a:	e76a      	b.n	800a9f2 <_svfiprintf_r+0x52>
 800ab1c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab20:	460c      	mov	r4, r1
 800ab22:	2001      	movs	r0, #1
 800ab24:	e7a8      	b.n	800aa78 <_svfiprintf_r+0xd8>
 800ab26:	2300      	movs	r3, #0
 800ab28:	3401      	adds	r4, #1
 800ab2a:	9305      	str	r3, [sp, #20]
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	f04f 0c0a 	mov.w	ip, #10
 800ab32:	4620      	mov	r0, r4
 800ab34:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab38:	3a30      	subs	r2, #48	@ 0x30
 800ab3a:	2a09      	cmp	r2, #9
 800ab3c:	d903      	bls.n	800ab46 <_svfiprintf_r+0x1a6>
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d0c6      	beq.n	800aad0 <_svfiprintf_r+0x130>
 800ab42:	9105      	str	r1, [sp, #20]
 800ab44:	e7c4      	b.n	800aad0 <_svfiprintf_r+0x130>
 800ab46:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab4a:	4604      	mov	r4, r0
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	e7f0      	b.n	800ab32 <_svfiprintf_r+0x192>
 800ab50:	ab03      	add	r3, sp, #12
 800ab52:	9300      	str	r3, [sp, #0]
 800ab54:	462a      	mov	r2, r5
 800ab56:	4b0e      	ldr	r3, [pc, #56]	@ (800ab90 <_svfiprintf_r+0x1f0>)
 800ab58:	a904      	add	r1, sp, #16
 800ab5a:	4638      	mov	r0, r7
 800ab5c:	f3af 8000 	nop.w
 800ab60:	1c42      	adds	r2, r0, #1
 800ab62:	4606      	mov	r6, r0
 800ab64:	d1d6      	bne.n	800ab14 <_svfiprintf_r+0x174>
 800ab66:	89ab      	ldrh	r3, [r5, #12]
 800ab68:	065b      	lsls	r3, r3, #25
 800ab6a:	f53f af2d 	bmi.w	800a9c8 <_svfiprintf_r+0x28>
 800ab6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab70:	e72c      	b.n	800a9cc <_svfiprintf_r+0x2c>
 800ab72:	ab03      	add	r3, sp, #12
 800ab74:	9300      	str	r3, [sp, #0]
 800ab76:	462a      	mov	r2, r5
 800ab78:	4b05      	ldr	r3, [pc, #20]	@ (800ab90 <_svfiprintf_r+0x1f0>)
 800ab7a:	a904      	add	r1, sp, #16
 800ab7c:	4638      	mov	r0, r7
 800ab7e:	f000 f879 	bl	800ac74 <_printf_i>
 800ab82:	e7ed      	b.n	800ab60 <_svfiprintf_r+0x1c0>
 800ab84:	0800b438 	.word	0x0800b438
 800ab88:	0800b442 	.word	0x0800b442
 800ab8c:	00000000 	.word	0x00000000
 800ab90:	0800a8e9 	.word	0x0800a8e9
 800ab94:	0800b43e 	.word	0x0800b43e

0800ab98 <_printf_common>:
 800ab98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab9c:	4616      	mov	r6, r2
 800ab9e:	4698      	mov	r8, r3
 800aba0:	688a      	ldr	r2, [r1, #8]
 800aba2:	690b      	ldr	r3, [r1, #16]
 800aba4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aba8:	4293      	cmp	r3, r2
 800abaa:	bfb8      	it	lt
 800abac:	4613      	movlt	r3, r2
 800abae:	6033      	str	r3, [r6, #0]
 800abb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800abb4:	4607      	mov	r7, r0
 800abb6:	460c      	mov	r4, r1
 800abb8:	b10a      	cbz	r2, 800abbe <_printf_common+0x26>
 800abba:	3301      	adds	r3, #1
 800abbc:	6033      	str	r3, [r6, #0]
 800abbe:	6823      	ldr	r3, [r4, #0]
 800abc0:	0699      	lsls	r1, r3, #26
 800abc2:	bf42      	ittt	mi
 800abc4:	6833      	ldrmi	r3, [r6, #0]
 800abc6:	3302      	addmi	r3, #2
 800abc8:	6033      	strmi	r3, [r6, #0]
 800abca:	6825      	ldr	r5, [r4, #0]
 800abcc:	f015 0506 	ands.w	r5, r5, #6
 800abd0:	d106      	bne.n	800abe0 <_printf_common+0x48>
 800abd2:	f104 0a19 	add.w	sl, r4, #25
 800abd6:	68e3      	ldr	r3, [r4, #12]
 800abd8:	6832      	ldr	r2, [r6, #0]
 800abda:	1a9b      	subs	r3, r3, r2
 800abdc:	42ab      	cmp	r3, r5
 800abde:	dc26      	bgt.n	800ac2e <_printf_common+0x96>
 800abe0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800abe4:	6822      	ldr	r2, [r4, #0]
 800abe6:	3b00      	subs	r3, #0
 800abe8:	bf18      	it	ne
 800abea:	2301      	movne	r3, #1
 800abec:	0692      	lsls	r2, r2, #26
 800abee:	d42b      	bmi.n	800ac48 <_printf_common+0xb0>
 800abf0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800abf4:	4641      	mov	r1, r8
 800abf6:	4638      	mov	r0, r7
 800abf8:	47c8      	blx	r9
 800abfa:	3001      	adds	r0, #1
 800abfc:	d01e      	beq.n	800ac3c <_printf_common+0xa4>
 800abfe:	6823      	ldr	r3, [r4, #0]
 800ac00:	6922      	ldr	r2, [r4, #16]
 800ac02:	f003 0306 	and.w	r3, r3, #6
 800ac06:	2b04      	cmp	r3, #4
 800ac08:	bf02      	ittt	eq
 800ac0a:	68e5      	ldreq	r5, [r4, #12]
 800ac0c:	6833      	ldreq	r3, [r6, #0]
 800ac0e:	1aed      	subeq	r5, r5, r3
 800ac10:	68a3      	ldr	r3, [r4, #8]
 800ac12:	bf0c      	ite	eq
 800ac14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac18:	2500      	movne	r5, #0
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	bfc4      	itt	gt
 800ac1e:	1a9b      	subgt	r3, r3, r2
 800ac20:	18ed      	addgt	r5, r5, r3
 800ac22:	2600      	movs	r6, #0
 800ac24:	341a      	adds	r4, #26
 800ac26:	42b5      	cmp	r5, r6
 800ac28:	d11a      	bne.n	800ac60 <_printf_common+0xc8>
 800ac2a:	2000      	movs	r0, #0
 800ac2c:	e008      	b.n	800ac40 <_printf_common+0xa8>
 800ac2e:	2301      	movs	r3, #1
 800ac30:	4652      	mov	r2, sl
 800ac32:	4641      	mov	r1, r8
 800ac34:	4638      	mov	r0, r7
 800ac36:	47c8      	blx	r9
 800ac38:	3001      	adds	r0, #1
 800ac3a:	d103      	bne.n	800ac44 <_printf_common+0xac>
 800ac3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac44:	3501      	adds	r5, #1
 800ac46:	e7c6      	b.n	800abd6 <_printf_common+0x3e>
 800ac48:	18e1      	adds	r1, r4, r3
 800ac4a:	1c5a      	adds	r2, r3, #1
 800ac4c:	2030      	movs	r0, #48	@ 0x30
 800ac4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ac52:	4422      	add	r2, r4
 800ac54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ac58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ac5c:	3302      	adds	r3, #2
 800ac5e:	e7c7      	b.n	800abf0 <_printf_common+0x58>
 800ac60:	2301      	movs	r3, #1
 800ac62:	4622      	mov	r2, r4
 800ac64:	4641      	mov	r1, r8
 800ac66:	4638      	mov	r0, r7
 800ac68:	47c8      	blx	r9
 800ac6a:	3001      	adds	r0, #1
 800ac6c:	d0e6      	beq.n	800ac3c <_printf_common+0xa4>
 800ac6e:	3601      	adds	r6, #1
 800ac70:	e7d9      	b.n	800ac26 <_printf_common+0x8e>
	...

0800ac74 <_printf_i>:
 800ac74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac78:	7e0f      	ldrb	r7, [r1, #24]
 800ac7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ac7c:	2f78      	cmp	r7, #120	@ 0x78
 800ac7e:	4691      	mov	r9, r2
 800ac80:	4680      	mov	r8, r0
 800ac82:	460c      	mov	r4, r1
 800ac84:	469a      	mov	sl, r3
 800ac86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ac8a:	d807      	bhi.n	800ac9c <_printf_i+0x28>
 800ac8c:	2f62      	cmp	r7, #98	@ 0x62
 800ac8e:	d80a      	bhi.n	800aca6 <_printf_i+0x32>
 800ac90:	2f00      	cmp	r7, #0
 800ac92:	f000 80d1 	beq.w	800ae38 <_printf_i+0x1c4>
 800ac96:	2f58      	cmp	r7, #88	@ 0x58
 800ac98:	f000 80b8 	beq.w	800ae0c <_printf_i+0x198>
 800ac9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aca0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aca4:	e03a      	b.n	800ad1c <_printf_i+0xa8>
 800aca6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800acaa:	2b15      	cmp	r3, #21
 800acac:	d8f6      	bhi.n	800ac9c <_printf_i+0x28>
 800acae:	a101      	add	r1, pc, #4	@ (adr r1, 800acb4 <_printf_i+0x40>)
 800acb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800acb4:	0800ad0d 	.word	0x0800ad0d
 800acb8:	0800ad21 	.word	0x0800ad21
 800acbc:	0800ac9d 	.word	0x0800ac9d
 800acc0:	0800ac9d 	.word	0x0800ac9d
 800acc4:	0800ac9d 	.word	0x0800ac9d
 800acc8:	0800ac9d 	.word	0x0800ac9d
 800accc:	0800ad21 	.word	0x0800ad21
 800acd0:	0800ac9d 	.word	0x0800ac9d
 800acd4:	0800ac9d 	.word	0x0800ac9d
 800acd8:	0800ac9d 	.word	0x0800ac9d
 800acdc:	0800ac9d 	.word	0x0800ac9d
 800ace0:	0800ae1f 	.word	0x0800ae1f
 800ace4:	0800ad4b 	.word	0x0800ad4b
 800ace8:	0800add9 	.word	0x0800add9
 800acec:	0800ac9d 	.word	0x0800ac9d
 800acf0:	0800ac9d 	.word	0x0800ac9d
 800acf4:	0800ae41 	.word	0x0800ae41
 800acf8:	0800ac9d 	.word	0x0800ac9d
 800acfc:	0800ad4b 	.word	0x0800ad4b
 800ad00:	0800ac9d 	.word	0x0800ac9d
 800ad04:	0800ac9d 	.word	0x0800ac9d
 800ad08:	0800ade1 	.word	0x0800ade1
 800ad0c:	6833      	ldr	r3, [r6, #0]
 800ad0e:	1d1a      	adds	r2, r3, #4
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	6032      	str	r2, [r6, #0]
 800ad14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	e09c      	b.n	800ae5a <_printf_i+0x1e6>
 800ad20:	6833      	ldr	r3, [r6, #0]
 800ad22:	6820      	ldr	r0, [r4, #0]
 800ad24:	1d19      	adds	r1, r3, #4
 800ad26:	6031      	str	r1, [r6, #0]
 800ad28:	0606      	lsls	r6, r0, #24
 800ad2a:	d501      	bpl.n	800ad30 <_printf_i+0xbc>
 800ad2c:	681d      	ldr	r5, [r3, #0]
 800ad2e:	e003      	b.n	800ad38 <_printf_i+0xc4>
 800ad30:	0645      	lsls	r5, r0, #25
 800ad32:	d5fb      	bpl.n	800ad2c <_printf_i+0xb8>
 800ad34:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ad38:	2d00      	cmp	r5, #0
 800ad3a:	da03      	bge.n	800ad44 <_printf_i+0xd0>
 800ad3c:	232d      	movs	r3, #45	@ 0x2d
 800ad3e:	426d      	negs	r5, r5
 800ad40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad44:	4858      	ldr	r0, [pc, #352]	@ (800aea8 <_printf_i+0x234>)
 800ad46:	230a      	movs	r3, #10
 800ad48:	e011      	b.n	800ad6e <_printf_i+0xfa>
 800ad4a:	6821      	ldr	r1, [r4, #0]
 800ad4c:	6833      	ldr	r3, [r6, #0]
 800ad4e:	0608      	lsls	r0, r1, #24
 800ad50:	f853 5b04 	ldr.w	r5, [r3], #4
 800ad54:	d402      	bmi.n	800ad5c <_printf_i+0xe8>
 800ad56:	0649      	lsls	r1, r1, #25
 800ad58:	bf48      	it	mi
 800ad5a:	b2ad      	uxthmi	r5, r5
 800ad5c:	2f6f      	cmp	r7, #111	@ 0x6f
 800ad5e:	4852      	ldr	r0, [pc, #328]	@ (800aea8 <_printf_i+0x234>)
 800ad60:	6033      	str	r3, [r6, #0]
 800ad62:	bf14      	ite	ne
 800ad64:	230a      	movne	r3, #10
 800ad66:	2308      	moveq	r3, #8
 800ad68:	2100      	movs	r1, #0
 800ad6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ad6e:	6866      	ldr	r6, [r4, #4]
 800ad70:	60a6      	str	r6, [r4, #8]
 800ad72:	2e00      	cmp	r6, #0
 800ad74:	db05      	blt.n	800ad82 <_printf_i+0x10e>
 800ad76:	6821      	ldr	r1, [r4, #0]
 800ad78:	432e      	orrs	r6, r5
 800ad7a:	f021 0104 	bic.w	r1, r1, #4
 800ad7e:	6021      	str	r1, [r4, #0]
 800ad80:	d04b      	beq.n	800ae1a <_printf_i+0x1a6>
 800ad82:	4616      	mov	r6, r2
 800ad84:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad88:	fb03 5711 	mls	r7, r3, r1, r5
 800ad8c:	5dc7      	ldrb	r7, [r0, r7]
 800ad8e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ad92:	462f      	mov	r7, r5
 800ad94:	42bb      	cmp	r3, r7
 800ad96:	460d      	mov	r5, r1
 800ad98:	d9f4      	bls.n	800ad84 <_printf_i+0x110>
 800ad9a:	2b08      	cmp	r3, #8
 800ad9c:	d10b      	bne.n	800adb6 <_printf_i+0x142>
 800ad9e:	6823      	ldr	r3, [r4, #0]
 800ada0:	07df      	lsls	r7, r3, #31
 800ada2:	d508      	bpl.n	800adb6 <_printf_i+0x142>
 800ada4:	6923      	ldr	r3, [r4, #16]
 800ada6:	6861      	ldr	r1, [r4, #4]
 800ada8:	4299      	cmp	r1, r3
 800adaa:	bfde      	ittt	le
 800adac:	2330      	movle	r3, #48	@ 0x30
 800adae:	f806 3c01 	strble.w	r3, [r6, #-1]
 800adb2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800adb6:	1b92      	subs	r2, r2, r6
 800adb8:	6122      	str	r2, [r4, #16]
 800adba:	f8cd a000 	str.w	sl, [sp]
 800adbe:	464b      	mov	r3, r9
 800adc0:	aa03      	add	r2, sp, #12
 800adc2:	4621      	mov	r1, r4
 800adc4:	4640      	mov	r0, r8
 800adc6:	f7ff fee7 	bl	800ab98 <_printf_common>
 800adca:	3001      	adds	r0, #1
 800adcc:	d14a      	bne.n	800ae64 <_printf_i+0x1f0>
 800adce:	f04f 30ff 	mov.w	r0, #4294967295
 800add2:	b004      	add	sp, #16
 800add4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800add8:	6823      	ldr	r3, [r4, #0]
 800adda:	f043 0320 	orr.w	r3, r3, #32
 800adde:	6023      	str	r3, [r4, #0]
 800ade0:	4832      	ldr	r0, [pc, #200]	@ (800aeac <_printf_i+0x238>)
 800ade2:	2778      	movs	r7, #120	@ 0x78
 800ade4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ade8:	6823      	ldr	r3, [r4, #0]
 800adea:	6831      	ldr	r1, [r6, #0]
 800adec:	061f      	lsls	r7, r3, #24
 800adee:	f851 5b04 	ldr.w	r5, [r1], #4
 800adf2:	d402      	bmi.n	800adfa <_printf_i+0x186>
 800adf4:	065f      	lsls	r7, r3, #25
 800adf6:	bf48      	it	mi
 800adf8:	b2ad      	uxthmi	r5, r5
 800adfa:	6031      	str	r1, [r6, #0]
 800adfc:	07d9      	lsls	r1, r3, #31
 800adfe:	bf44      	itt	mi
 800ae00:	f043 0320 	orrmi.w	r3, r3, #32
 800ae04:	6023      	strmi	r3, [r4, #0]
 800ae06:	b11d      	cbz	r5, 800ae10 <_printf_i+0x19c>
 800ae08:	2310      	movs	r3, #16
 800ae0a:	e7ad      	b.n	800ad68 <_printf_i+0xf4>
 800ae0c:	4826      	ldr	r0, [pc, #152]	@ (800aea8 <_printf_i+0x234>)
 800ae0e:	e7e9      	b.n	800ade4 <_printf_i+0x170>
 800ae10:	6823      	ldr	r3, [r4, #0]
 800ae12:	f023 0320 	bic.w	r3, r3, #32
 800ae16:	6023      	str	r3, [r4, #0]
 800ae18:	e7f6      	b.n	800ae08 <_printf_i+0x194>
 800ae1a:	4616      	mov	r6, r2
 800ae1c:	e7bd      	b.n	800ad9a <_printf_i+0x126>
 800ae1e:	6833      	ldr	r3, [r6, #0]
 800ae20:	6825      	ldr	r5, [r4, #0]
 800ae22:	6961      	ldr	r1, [r4, #20]
 800ae24:	1d18      	adds	r0, r3, #4
 800ae26:	6030      	str	r0, [r6, #0]
 800ae28:	062e      	lsls	r6, r5, #24
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	d501      	bpl.n	800ae32 <_printf_i+0x1be>
 800ae2e:	6019      	str	r1, [r3, #0]
 800ae30:	e002      	b.n	800ae38 <_printf_i+0x1c4>
 800ae32:	0668      	lsls	r0, r5, #25
 800ae34:	d5fb      	bpl.n	800ae2e <_printf_i+0x1ba>
 800ae36:	8019      	strh	r1, [r3, #0]
 800ae38:	2300      	movs	r3, #0
 800ae3a:	6123      	str	r3, [r4, #16]
 800ae3c:	4616      	mov	r6, r2
 800ae3e:	e7bc      	b.n	800adba <_printf_i+0x146>
 800ae40:	6833      	ldr	r3, [r6, #0]
 800ae42:	1d1a      	adds	r2, r3, #4
 800ae44:	6032      	str	r2, [r6, #0]
 800ae46:	681e      	ldr	r6, [r3, #0]
 800ae48:	6862      	ldr	r2, [r4, #4]
 800ae4a:	2100      	movs	r1, #0
 800ae4c:	4630      	mov	r0, r6
 800ae4e:	f7f5 f9df 	bl	8000210 <memchr>
 800ae52:	b108      	cbz	r0, 800ae58 <_printf_i+0x1e4>
 800ae54:	1b80      	subs	r0, r0, r6
 800ae56:	6060      	str	r0, [r4, #4]
 800ae58:	6863      	ldr	r3, [r4, #4]
 800ae5a:	6123      	str	r3, [r4, #16]
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae62:	e7aa      	b.n	800adba <_printf_i+0x146>
 800ae64:	6923      	ldr	r3, [r4, #16]
 800ae66:	4632      	mov	r2, r6
 800ae68:	4649      	mov	r1, r9
 800ae6a:	4640      	mov	r0, r8
 800ae6c:	47d0      	blx	sl
 800ae6e:	3001      	adds	r0, #1
 800ae70:	d0ad      	beq.n	800adce <_printf_i+0x15a>
 800ae72:	6823      	ldr	r3, [r4, #0]
 800ae74:	079b      	lsls	r3, r3, #30
 800ae76:	d413      	bmi.n	800aea0 <_printf_i+0x22c>
 800ae78:	68e0      	ldr	r0, [r4, #12]
 800ae7a:	9b03      	ldr	r3, [sp, #12]
 800ae7c:	4298      	cmp	r0, r3
 800ae7e:	bfb8      	it	lt
 800ae80:	4618      	movlt	r0, r3
 800ae82:	e7a6      	b.n	800add2 <_printf_i+0x15e>
 800ae84:	2301      	movs	r3, #1
 800ae86:	4632      	mov	r2, r6
 800ae88:	4649      	mov	r1, r9
 800ae8a:	4640      	mov	r0, r8
 800ae8c:	47d0      	blx	sl
 800ae8e:	3001      	adds	r0, #1
 800ae90:	d09d      	beq.n	800adce <_printf_i+0x15a>
 800ae92:	3501      	adds	r5, #1
 800ae94:	68e3      	ldr	r3, [r4, #12]
 800ae96:	9903      	ldr	r1, [sp, #12]
 800ae98:	1a5b      	subs	r3, r3, r1
 800ae9a:	42ab      	cmp	r3, r5
 800ae9c:	dcf2      	bgt.n	800ae84 <_printf_i+0x210>
 800ae9e:	e7eb      	b.n	800ae78 <_printf_i+0x204>
 800aea0:	2500      	movs	r5, #0
 800aea2:	f104 0619 	add.w	r6, r4, #25
 800aea6:	e7f5      	b.n	800ae94 <_printf_i+0x220>
 800aea8:	0800b449 	.word	0x0800b449
 800aeac:	0800b45a 	.word	0x0800b45a

0800aeb0 <memmove>:
 800aeb0:	4288      	cmp	r0, r1
 800aeb2:	b510      	push	{r4, lr}
 800aeb4:	eb01 0402 	add.w	r4, r1, r2
 800aeb8:	d902      	bls.n	800aec0 <memmove+0x10>
 800aeba:	4284      	cmp	r4, r0
 800aebc:	4623      	mov	r3, r4
 800aebe:	d807      	bhi.n	800aed0 <memmove+0x20>
 800aec0:	1e43      	subs	r3, r0, #1
 800aec2:	42a1      	cmp	r1, r4
 800aec4:	d008      	beq.n	800aed8 <memmove+0x28>
 800aec6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aeca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aece:	e7f8      	b.n	800aec2 <memmove+0x12>
 800aed0:	4402      	add	r2, r0
 800aed2:	4601      	mov	r1, r0
 800aed4:	428a      	cmp	r2, r1
 800aed6:	d100      	bne.n	800aeda <memmove+0x2a>
 800aed8:	bd10      	pop	{r4, pc}
 800aeda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aede:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aee2:	e7f7      	b.n	800aed4 <memmove+0x24>

0800aee4 <_sbrk_r>:
 800aee4:	b538      	push	{r3, r4, r5, lr}
 800aee6:	4d06      	ldr	r5, [pc, #24]	@ (800af00 <_sbrk_r+0x1c>)
 800aee8:	2300      	movs	r3, #0
 800aeea:	4604      	mov	r4, r0
 800aeec:	4608      	mov	r0, r1
 800aeee:	602b      	str	r3, [r5, #0]
 800aef0:	f7f6 fef8 	bl	8001ce4 <_sbrk>
 800aef4:	1c43      	adds	r3, r0, #1
 800aef6:	d102      	bne.n	800aefe <_sbrk_r+0x1a>
 800aef8:	682b      	ldr	r3, [r5, #0]
 800aefa:	b103      	cbz	r3, 800aefe <_sbrk_r+0x1a>
 800aefc:	6023      	str	r3, [r4, #0]
 800aefe:	bd38      	pop	{r3, r4, r5, pc}
 800af00:	200051a0 	.word	0x200051a0

0800af04 <_realloc_r>:
 800af04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af08:	4607      	mov	r7, r0
 800af0a:	4614      	mov	r4, r2
 800af0c:	460d      	mov	r5, r1
 800af0e:	b921      	cbnz	r1, 800af1a <_realloc_r+0x16>
 800af10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af14:	4611      	mov	r1, r2
 800af16:	f7ff bc5b 	b.w	800a7d0 <_malloc_r>
 800af1a:	b92a      	cbnz	r2, 800af28 <_realloc_r+0x24>
 800af1c:	f7ff fbec 	bl	800a6f8 <_free_r>
 800af20:	4625      	mov	r5, r4
 800af22:	4628      	mov	r0, r5
 800af24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af28:	f000 f81a 	bl	800af60 <_malloc_usable_size_r>
 800af2c:	4284      	cmp	r4, r0
 800af2e:	4606      	mov	r6, r0
 800af30:	d802      	bhi.n	800af38 <_realloc_r+0x34>
 800af32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800af36:	d8f4      	bhi.n	800af22 <_realloc_r+0x1e>
 800af38:	4621      	mov	r1, r4
 800af3a:	4638      	mov	r0, r7
 800af3c:	f7ff fc48 	bl	800a7d0 <_malloc_r>
 800af40:	4680      	mov	r8, r0
 800af42:	b908      	cbnz	r0, 800af48 <_realloc_r+0x44>
 800af44:	4645      	mov	r5, r8
 800af46:	e7ec      	b.n	800af22 <_realloc_r+0x1e>
 800af48:	42b4      	cmp	r4, r6
 800af4a:	4622      	mov	r2, r4
 800af4c:	4629      	mov	r1, r5
 800af4e:	bf28      	it	cs
 800af50:	4632      	movcs	r2, r6
 800af52:	f7ff fbc3 	bl	800a6dc <memcpy>
 800af56:	4629      	mov	r1, r5
 800af58:	4638      	mov	r0, r7
 800af5a:	f7ff fbcd 	bl	800a6f8 <_free_r>
 800af5e:	e7f1      	b.n	800af44 <_realloc_r+0x40>

0800af60 <_malloc_usable_size_r>:
 800af60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af64:	1f18      	subs	r0, r3, #4
 800af66:	2b00      	cmp	r3, #0
 800af68:	bfbc      	itt	lt
 800af6a:	580b      	ldrlt	r3, [r1, r0]
 800af6c:	18c0      	addlt	r0, r0, r3
 800af6e:	4770      	bx	lr

0800af70 <_init>:
 800af70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af72:	bf00      	nop
 800af74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af76:	bc08      	pop	{r3}
 800af78:	469e      	mov	lr, r3
 800af7a:	4770      	bx	lr

0800af7c <_fini>:
 800af7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af7e:	bf00      	nop
 800af80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af82:	bc08      	pop	{r3}
 800af84:	469e      	mov	lr, r3
 800af86:	4770      	bx	lr
