
Master1_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f68  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08009138  08009138  0000a138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800955c  0800955c  0000b06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800955c  0800955c  0000a55c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009564  08009564  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009564  08009564  0000a564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009568  08009568  0000a568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800956c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005088  2000006c  080095d8  0000b06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200050f4  080095d8  0000b0f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dca7  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004836  00000000  00000000  00028d43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019b8  00000000  00000000  0002d580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013d5  00000000  00000000  0002ef38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026026  00000000  00000000  0003030d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f08c  00000000  00000000  00056333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000deaa5  00000000  00000000  000753bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00153e64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007054  00000000  00000000  00153ea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0015aefc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009120 	.word	0x08009120

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08009120 	.word	0x08009120

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <encoder_update>:
void encoder_init(void) {
    ticks = 0;
    steps = 0;
}

void encoder_update(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
    static int16_t last = 0;
    int16_t current = __HAL_TIM_GET_COUNTER(&htim4); // no mutex required, not a ressource, just a register read
 80005e2:	4b39      	ldr	r3, [pc, #228]	@ (80006c8 <encoder_update+0xec>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005e8:	817b      	strh	r3, [r7, #10]
    int16_t delta = current - last;
 80005ea:	897a      	ldrh	r2, [r7, #10]
 80005ec:	4b37      	ldr	r3, [pc, #220]	@ (80006cc <encoder_update+0xf0>)
 80005ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	b29b      	uxth	r3, r3
 80005f8:	81fb      	strh	r3, [r7, #14]
    last = current;
 80005fa:	4a34      	ldr	r2, [pc, #208]	@ (80006cc <encoder_update+0xf0>)
 80005fc:	897b      	ldrh	r3, [r7, #10]
 80005fe:	8013      	strh	r3, [r2, #0]

    // Inversion du sens si nécessaire
    if (is_reversed)
 8000600:	4b33      	ldr	r3, [pc, #204]	@ (80006d0 <encoder_update+0xf4>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d003      	beq.n	8000610 <encoder_update+0x34>
        delta = -delta;
 8000608:	89fb      	ldrh	r3, [r7, #14]
 800060a:	425b      	negs	r3, r3
 800060c:	b29b      	uxth	r3, r3
 800060e:	81fb      	strh	r3, [r7, #14]

    ticks += delta;
 8000610:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000614:	4b2f      	ldr	r3, [pc, #188]	@ (80006d4 <encoder_update+0xf8>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4413      	add	r3, r2
 800061a:	4a2e      	ldr	r2, [pc, #184]	@ (80006d4 <encoder_update+0xf8>)
 800061c:	6013      	str	r3, [r2, #0]
    int16_t new_steps = (int16_t)(ticks / 4);
 800061e:	4b2d      	ldr	r3, [pc, #180]	@ (80006d4 <encoder_update+0xf8>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	da00      	bge.n	8000628 <encoder_update+0x4c>
 8000626:	3303      	adds	r3, #3
 8000628:	109b      	asrs	r3, r3, #2
 800062a:	81bb      	strh	r3, [r7, #12]

    taskENTER_CRITICAL();
 800062c:	f007 fdb4 	bl	8008198 <vPortEnterCritical>
    if (is_cyclic) {
 8000630:	4b29      	ldr	r3, [pc, #164]	@ (80006d8 <encoder_update+0xfc>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d02a      	beq.n	800068e <encoder_update+0xb2>
    	 int32_t range = max - min + 1;
 8000638:	4b28      	ldr	r3, [pc, #160]	@ (80006dc <encoder_update+0x100>)
 800063a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800063e:	461a      	mov	r2, r3
 8000640:	4b27      	ldr	r3, [pc, #156]	@ (80006e0 <encoder_update+0x104>)
 8000642:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000646:	1ad3      	subs	r3, r2, r3
 8000648:	3301      	adds	r3, #1
 800064a:	607b      	str	r3, [r7, #4]
    	 steps = ((new_steps - min) % range + range) % range + min;
 800064c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000650:	4a23      	ldr	r2, [pc, #140]	@ (80006e0 <encoder_update+0x104>)
 8000652:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000656:	1a9b      	subs	r3, r3, r2
 8000658:	687a      	ldr	r2, [r7, #4]
 800065a:	fb93 f2f2 	sdiv	r2, r3, r2
 800065e:	6879      	ldr	r1, [r7, #4]
 8000660:	fb01 f202 	mul.w	r2, r1, r2
 8000664:	1a9a      	subs	r2, r3, r2
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	fb93 f2f2 	sdiv	r2, r3, r2
 8000670:	6879      	ldr	r1, [r7, #4]
 8000672:	fb01 f202 	mul.w	r2, r1, r2
 8000676:	1a9b      	subs	r3, r3, r2
 8000678:	b29a      	uxth	r2, r3
 800067a:	4b19      	ldr	r3, [pc, #100]	@ (80006e0 <encoder_update+0x104>)
 800067c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000680:	b29b      	uxth	r3, r3
 8000682:	4413      	add	r3, r2
 8000684:	b29b      	uxth	r3, r3
 8000686:	b21a      	sxth	r2, r3
 8000688:	4b16      	ldr	r3, [pc, #88]	@ (80006e4 <encoder_update+0x108>)
 800068a:	801a      	strh	r2, [r3, #0]
 800068c:	e016      	b.n	80006bc <encoder_update+0xe0>
    } else {
        if (new_steps < min) new_steps = min;
 800068e:	4b14      	ldr	r3, [pc, #80]	@ (80006e0 <encoder_update+0x104>)
 8000690:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000694:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000698:	429a      	cmp	r2, r3
 800069a:	da02      	bge.n	80006a2 <encoder_update+0xc6>
 800069c:	4b10      	ldr	r3, [pc, #64]	@ (80006e0 <encoder_update+0x104>)
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	81bb      	strh	r3, [r7, #12]
        if (new_steps > max) new_steps = max;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	@ (80006dc <encoder_update+0x100>)
 80006a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006a8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	dd02      	ble.n	80006b6 <encoder_update+0xda>
 80006b0:	4b0a      	ldr	r3, [pc, #40]	@ (80006dc <encoder_update+0x100>)
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	81bb      	strh	r3, [r7, #12]
        steps = new_steps;
 80006b6:	4a0b      	ldr	r2, [pc, #44]	@ (80006e4 <encoder_update+0x108>)
 80006b8:	89bb      	ldrh	r3, [r7, #12]
 80006ba:	8013      	strh	r3, [r2, #0]
    }
    taskEXIT_CRITICAL();
 80006bc:	f007 fd9e 	bl	80081fc <vPortExitCritical>
}
 80006c0:	bf00      	nop
 80006c2:	3710      	adds	r7, #16
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	200000e4 	.word	0x200000e4
 80006cc:	20000092 	.word	0x20000092
 80006d0:	20000090 	.word	0x20000090
 80006d4:	20000088 	.word	0x20000088
 80006d8:	20000002 	.word	0x20000002
 80006dc:	20000000 	.word	0x20000000
 80006e0:	2000008e 	.word	0x2000008e
 80006e4:	2000008c 	.word	0x2000008c

080006e8 <encoder_get_steps>:

int32_t encoder_get_ticks(void) {
    return ticks;
}

int16_t encoder_get_steps(void) {
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
    return steps;
 80006ec:	4b03      	ldr	r3, [pc, #12]	@ (80006fc <encoder_get_steps+0x14>)
 80006ee:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	2000008c 	.word	0x2000008c

08000700 <encoder_set_min>:

void encoder_set_min(int16_t min_val) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	80fb      	strh	r3, [r7, #6]
	taskENTER_CRITICAL();
 800070a:	f007 fd45 	bl	8008198 <vPortEnterCritical>
    min = min_val;
 800070e:	4a04      	ldr	r2, [pc, #16]	@ (8000720 <encoder_set_min+0x20>)
 8000710:	88fb      	ldrh	r3, [r7, #6]
 8000712:	8013      	strh	r3, [r2, #0]
    taskEXIT_CRITICAL();
 8000714:	f007 fd72 	bl	80081fc <vPortExitCritical>
}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	2000008e 	.word	0x2000008e

08000724 <encoder_set_max>:

void encoder_set_max(int16_t max_val) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	80fb      	strh	r3, [r7, #6]
	taskENTER_CRITICAL();
 800072e:	f007 fd33 	bl	8008198 <vPortEnterCritical>
    max = max_val;
 8000732:	4a04      	ldr	r2, [pc, #16]	@ (8000744 <encoder_set_max+0x20>)
 8000734:	88fb      	ldrh	r3, [r7, #6]
 8000736:	8013      	strh	r3, [r2, #0]
    taskEXIT_CRITICAL();
 8000738:	f007 fd60 	bl	80081fc <vPortExitCritical>
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000000 	.word	0x20000000

08000748 <encoder_reset_position>:

void encoder_reset_position(void) {
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	taskENTER_CRITICAL();
 800074c:	f007 fd24 	bl	8008198 <vPortEnterCritical>
    ticks = 0;
 8000750:	4b04      	ldr	r3, [pc, #16]	@ (8000764 <encoder_reset_position+0x1c>)
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
    steps = 0;
 8000756:	4b04      	ldr	r3, [pc, #16]	@ (8000768 <encoder_reset_position+0x20>)
 8000758:	2200      	movs	r2, #0
 800075a:	801a      	strh	r2, [r3, #0]
    taskEXIT_CRITICAL();
 800075c:	f007 fd4e 	bl	80081fc <vPortExitCritical>
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000088 	.word	0x20000088
 8000768:	2000008c 	.word	0x2000008c

0800076c <encoder_button_update>:

void encoder_set_direction(bool reverse) {
    is_reversed = reverse;
}

void encoder_button_update(void) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
	static bool last_state = true;
	bool current = HAL_GPIO_ReadPin(ENC_BUTT_GPIO_Port, ENC_BUTT_Pin) == GPIO_PIN_RESET;
 8000772:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000776:	4815      	ldr	r0, [pc, #84]	@ (80007cc <encoder_button_update+0x60>)
 8000778:	f001 fdb2 	bl	80022e0 <HAL_GPIO_ReadPin>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	bf0c      	ite	eq
 8000782:	2301      	moveq	r3, #1
 8000784:	2300      	movne	r3, #0
 8000786:	71fb      	strb	r3, [r7, #7]
	if (current && !last_state) {
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d011      	beq.n	80007b2 <encoder_button_update+0x46>
 800078e:	4b10      	ldr	r3, [pc, #64]	@ (80007d0 <encoder_button_update+0x64>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	f083 0301 	eor.w	r3, r3, #1
 8000796:	b2db      	uxtb	r3, r3
 8000798:	2b00      	cmp	r3, #0
 800079a:	d00a      	beq.n	80007b2 <encoder_button_update+0x46>
		last_state = true;
 800079c:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <encoder_button_update+0x64>)
 800079e:	2201      	movs	r2, #1
 80007a0:	701a      	strb	r2, [r3, #0]
		taskENTER_CRITICAL();
 80007a2:	f007 fcf9 	bl	8008198 <vPortEnterCritical>
		button = true;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	@ (80007d4 <encoder_button_update+0x68>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	701a      	strb	r2, [r3, #0]
		taskEXIT_CRITICAL();
 80007ac:	f007 fd26 	bl	80081fc <vPortExitCritical>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
		osDelay(50);
	} else {
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
	}*/
}
 80007b0:	e008      	b.n	80007c4 <encoder_button_update+0x58>
	} else if (!current) {
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	f083 0301 	eor.w	r3, r3, #1
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d002      	beq.n	80007c4 <encoder_button_update+0x58>
		last_state = false;
 80007be:	4b04      	ldr	r3, [pc, #16]	@ (80007d0 <encoder_button_update+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40020c00 	.word	0x40020c00
 80007d0:	20000003 	.word	0x20000003
 80007d4:	20000091 	.word	0x20000091

080007d8 <encoder_get_button>:

bool encoder_get_button(void) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	if (button) {
 80007dc:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <encoder_get_button+0x2c>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d008      	beq.n	80007f8 <encoder_get_button+0x20>
		taskENTER_CRITICAL();
 80007e6:	f007 fcd7 	bl	8008198 <vPortEnterCritical>
		button = false;
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <encoder_get_button+0x2c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	701a      	strb	r2, [r3, #0]
		taskEXIT_CRITICAL();
 80007f0:	f007 fd04 	bl	80081fc <vPortExitCritical>
		/*HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
		osDelay(50);
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);*/

		return true;
 80007f4:	2301      	movs	r3, #1
 80007f6:	e002      	b.n	80007fe <encoder_get_button+0x26>
	}

	return button;
 80007f8:	4b02      	ldr	r3, [pc, #8]	@ (8000804 <encoder_get_button+0x2c>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	b2db      	uxtb	r3, r3
}
 80007fe:	4618      	mov	r0, r3
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000091 	.word	0x20000091

08000808 <encoder_set_step>:

void encoder_set_step(int16_t step) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	80fb      	strh	r3, [r7, #6]
	taskENTER_CRITICAL();
 8000812:	f007 fcc1 	bl	8008198 <vPortEnterCritical>
	steps = step;
 8000816:	4a07      	ldr	r2, [pc, #28]	@ (8000834 <encoder_set_step+0x2c>)
 8000818:	88fb      	ldrh	r3, [r7, #6]
 800081a:	8013      	strh	r3, [r2, #0]
	ticks = step*4;
 800081c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	4a05      	ldr	r2, [pc, #20]	@ (8000838 <encoder_set_step+0x30>)
 8000824:	6013      	str	r3, [r2, #0]
	taskEXIT_CRITICAL();
 8000826:	f007 fce9 	bl	80081fc <vPortExitCritical>
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	2000008c 	.word	0x2000008c
 8000838:	20000088 	.word	0x20000088

0800083c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of mpuMode */
  mpuModeHandle = osMutexNew(&mpuMode_attributes);
 8000840:	4833      	ldr	r0, [pc, #204]	@ (8000910 <MX_FREERTOS_Init+0xd4>)
 8000842:	f004 fba4 	bl	8004f8e <osMutexNew>
 8000846:	4603      	mov	r3, r0
 8000848:	4a32      	ldr	r2, [pc, #200]	@ (8000914 <MX_FREERTOS_Init+0xd8>)
 800084a:	6013      	str	r3, [r2, #0]

  /* creation of convMode */
  convModeHandle = osMutexNew(&convMode_attributes);
 800084c:	4832      	ldr	r0, [pc, #200]	@ (8000918 <MX_FREERTOS_Init+0xdc>)
 800084e:	f004 fb9e 	bl	8004f8e <osMutexNew>
 8000852:	4603      	mov	r3, r0
 8000854:	4a31      	ldr	r2, [pc, #196]	@ (800091c <MX_FREERTOS_Init+0xe0>)
 8000856:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000858:	4a31      	ldr	r2, [pc, #196]	@ (8000920 <MX_FREERTOS_Init+0xe4>)
 800085a:	2100      	movs	r1, #0
 800085c:	4831      	ldr	r0, [pc, #196]	@ (8000924 <MX_FREERTOS_Init+0xe8>)
 800085e:	f004 f9b1 	bl	8004bc4 <osThreadNew>
 8000862:	4603      	mov	r3, r0
 8000864:	4a30      	ldr	r2, [pc, #192]	@ (8000928 <MX_FREERTOS_Init+0xec>)
 8000866:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(encoder, NULL, &encoderTask_attributes);
 8000868:	4a30      	ldr	r2, [pc, #192]	@ (800092c <MX_FREERTOS_Init+0xf0>)
 800086a:	2100      	movs	r1, #0
 800086c:	4830      	ldr	r0, [pc, #192]	@ (8000930 <MX_FREERTOS_Init+0xf4>)
 800086e:	f004 f9a9 	bl	8004bc4 <osThreadNew>
 8000872:	4603      	mov	r3, r0
 8000874:	4a2f      	ldr	r2, [pc, #188]	@ (8000934 <MX_FREERTOS_Init+0xf8>)
 8000876:	6013      	str	r3, [r2, #0]

  /* creation of SM_Task */
  SM_TaskHandle = osThreadNew(StateMachine, NULL, &SM_Task_attributes);
 8000878:	4a2f      	ldr	r2, [pc, #188]	@ (8000938 <MX_FREERTOS_Init+0xfc>)
 800087a:	2100      	movs	r1, #0
 800087c:	482f      	ldr	r0, [pc, #188]	@ (800093c <MX_FREERTOS_Init+0x100>)
 800087e:	f004 f9a1 	bl	8004bc4 <osThreadNew>
 8000882:	4603      	mov	r3, r0
 8000884:	4a2e      	ldr	r2, [pc, #184]	@ (8000940 <MX_FREERTOS_Init+0x104>)
 8000886:	6013      	str	r3, [r2, #0]

  /* creation of ledsTask */
  ledsTaskHandle = osThreadNew(leds, NULL, &ledsTask_attributes);
 8000888:	4a2e      	ldr	r2, [pc, #184]	@ (8000944 <MX_FREERTOS_Init+0x108>)
 800088a:	2100      	movs	r1, #0
 800088c:	482e      	ldr	r0, [pc, #184]	@ (8000948 <MX_FREERTOS_Init+0x10c>)
 800088e:	f004 f999 	bl	8004bc4 <osThreadNew>
 8000892:	4603      	mov	r3, r0
 8000894:	4a2d      	ldr	r2, [pc, #180]	@ (800094c <MX_FREERTOS_Init+0x110>)
 8000896:	6013      	str	r3, [r2, #0]

  /* creation of infoFuncTask */
  infoFuncTaskHandle = osThreadNew(infoFunc, NULL, &infoFuncTask_attributes);
 8000898:	4a2d      	ldr	r2, [pc, #180]	@ (8000950 <MX_FREERTOS_Init+0x114>)
 800089a:	2100      	movs	r1, #0
 800089c:	482d      	ldr	r0, [pc, #180]	@ (8000954 <MX_FREERTOS_Init+0x118>)
 800089e:	f004 f991 	bl	8004bc4 <osThreadNew>
 80008a2:	4603      	mov	r3, r0
 80008a4:	4a2c      	ldr	r2, [pc, #176]	@ (8000958 <MX_FREERTOS_Init+0x11c>)
 80008a6:	6013      	str	r3, [r2, #0]

  /* creation of sensFuncTask */
  sensFuncTaskHandle = osThreadNew(sensFunc, NULL, &sensFuncTask_attributes);
 80008a8:	4a2c      	ldr	r2, [pc, #176]	@ (800095c <MX_FREERTOS_Init+0x120>)
 80008aa:	2100      	movs	r1, #0
 80008ac:	482c      	ldr	r0, [pc, #176]	@ (8000960 <MX_FREERTOS_Init+0x124>)
 80008ae:	f004 f989 	bl	8004bc4 <osThreadNew>
 80008b2:	4603      	mov	r3, r0
 80008b4:	4a2b      	ldr	r2, [pc, #172]	@ (8000964 <MX_FREERTOS_Init+0x128>)
 80008b6:	6013      	str	r3, [r2, #0]

  /* creation of convFuncTask */
  convFuncTaskHandle = osThreadNew(convFunc, NULL, &convFuncTask_attributes);
 80008b8:	4a2b      	ldr	r2, [pc, #172]	@ (8000968 <MX_FREERTOS_Init+0x12c>)
 80008ba:	2100      	movs	r1, #0
 80008bc:	482b      	ldr	r0, [pc, #172]	@ (800096c <MX_FREERTOS_Init+0x130>)
 80008be:	f004 f981 	bl	8004bc4 <osThreadNew>
 80008c2:	4603      	mov	r3, r0
 80008c4:	4a2a      	ldr	r2, [pc, #168]	@ (8000970 <MX_FREERTOS_Init+0x134>)
 80008c6:	6013      	str	r3, [r2, #0]

  /* creation of actFuncTask */
  actFuncTaskHandle = osThreadNew(actFunc, NULL, &actFuncTask_attributes);
 80008c8:	4a2a      	ldr	r2, [pc, #168]	@ (8000974 <MX_FREERTOS_Init+0x138>)
 80008ca:	2100      	movs	r1, #0
 80008cc:	482a      	ldr	r0, [pc, #168]	@ (8000978 <MX_FREERTOS_Init+0x13c>)
 80008ce:	f004 f979 	bl	8004bc4 <osThreadNew>
 80008d2:	4603      	mov	r3, r0
 80008d4:	4a29      	ldr	r2, [pc, #164]	@ (800097c <MX_FREERTOS_Init+0x140>)
 80008d6:	6013      	str	r3, [r2, #0]

  /* creation of mpuFuncTask */
  mpuFuncTaskHandle = osThreadNew(mpuFunc, NULL, &mpuFuncTask_attributes);
 80008d8:	4a29      	ldr	r2, [pc, #164]	@ (8000980 <MX_FREERTOS_Init+0x144>)
 80008da:	2100      	movs	r1, #0
 80008dc:	4829      	ldr	r0, [pc, #164]	@ (8000984 <MX_FREERTOS_Init+0x148>)
 80008de:	f004 f971 	bl	8004bc4 <osThreadNew>
 80008e2:	4603      	mov	r3, r0
 80008e4:	4a28      	ldr	r2, [pc, #160]	@ (8000988 <MX_FREERTOS_Init+0x14c>)
 80008e6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of smEvent */
  smEventHandle = osEventFlagsNew(&smEvent_attributes);
 80008e8:	4828      	ldr	r0, [pc, #160]	@ (800098c <MX_FREERTOS_Init+0x150>)
 80008ea:	f004 fa18 	bl	8004d1e <osEventFlagsNew>
 80008ee:	4603      	mov	r3, r0
 80008f0:	4a27      	ldr	r2, [pc, #156]	@ (8000990 <MX_FREERTOS_Init+0x154>)
 80008f2:	6013      	str	r3, [r2, #0]

  /* creation of funcEvent */
  funcEventHandle = osEventFlagsNew(&funcEvent_attributes);
 80008f4:	4827      	ldr	r0, [pc, #156]	@ (8000994 <MX_FREERTOS_Init+0x158>)
 80008f6:	f004 fa12 	bl	8004d1e <osEventFlagsNew>
 80008fa:	4603      	mov	r3, r0
 80008fc:	4a26      	ldr	r2, [pc, #152]	@ (8000998 <MX_FREERTOS_Init+0x15c>)
 80008fe:	6013      	str	r3, [r2, #0]

  /* creation of ledEvent */
  ledEventHandle = osEventFlagsNew(&ledEvent_attributes);
 8000900:	4826      	ldr	r0, [pc, #152]	@ (800099c <MX_FREERTOS_Init+0x160>)
 8000902:	f004 fa0c 	bl	8004d1e <osEventFlagsNew>
 8000906:	4603      	mov	r3, r0
 8000908:	4a25      	ldr	r2, [pc, #148]	@ (80009a0 <MX_FREERTOS_Init+0x164>)
 800090a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	080094c0 	.word	0x080094c0
 8000914:	200000bc 	.word	0x200000bc
 8000918:	080094d0 	.word	0x080094d0
 800091c:	200000c0 	.word	0x200000c0
 8000920:	0800937c 	.word	0x0800937c
 8000924:	080009a5 	.word	0x080009a5
 8000928:	20000098 	.word	0x20000098
 800092c:	080093a0 	.word	0x080093a0
 8000930:	080009b5 	.word	0x080009b5
 8000934:	2000009c 	.word	0x2000009c
 8000938:	080093c4 	.word	0x080093c4
 800093c:	080009d1 	.word	0x080009d1
 8000940:	200000a0 	.word	0x200000a0
 8000944:	080093e8 	.word	0x080093e8
 8000948:	08000bf1 	.word	0x08000bf1
 800094c:	200000a4 	.word	0x200000a4
 8000950:	0800940c 	.word	0x0800940c
 8000954:	08000c89 	.word	0x08000c89
 8000958:	200000a8 	.word	0x200000a8
 800095c:	08009430 	.word	0x08009430
 8000960:	08000d09 	.word	0x08000d09
 8000964:	200000ac 	.word	0x200000ac
 8000968:	08009454 	.word	0x08009454
 800096c:	08000df9 	.word	0x08000df9
 8000970:	200000b0 	.word	0x200000b0
 8000974:	08009478 	.word	0x08009478
 8000978:	08000f35 	.word	0x08000f35
 800097c:	200000b4 	.word	0x200000b4
 8000980:	0800949c 	.word	0x0800949c
 8000984:	080010bd 	.word	0x080010bd
 8000988:	200000b8 	.word	0x200000b8
 800098c:	080094e0 	.word	0x080094e0
 8000990:	200000c4 	.word	0x200000c4
 8000994:	080094f0 	.word	0x080094f0
 8000998:	200000c8 	.word	0x200000c8
 800099c:	08009500 	.word	0x08009500
 80009a0:	200000cc 	.word	0x200000cc

080009a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009ac:	2001      	movs	r0, #1
 80009ae:	f004 f99b 	bl	8004ce8 <osDelay>
 80009b2:	e7fb      	b.n	80009ac <StartDefaultTask+0x8>

080009b4 <encoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder */
void encoder(void *argument)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoder */
  /* Infinite loop */
  for(;;)
  {
		encoder_update();
 80009bc:	f7ff fe0e 	bl	80005dc <encoder_update>
		encoder_button_update();
 80009c0:	f7ff fed4 	bl	800076c <encoder_button_update>

		osDelay(10);  // 100 Hz
 80009c4:	200a      	movs	r0, #10
 80009c6:	f004 f98f 	bl	8004ce8 <osDelay>
		encoder_update();
 80009ca:	bf00      	nop
 80009cc:	e7f6      	b.n	80009bc <encoder+0x8>
	...

080009d0 <StateMachine>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StateMachine */
void StateMachine(void *argument)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	@ 0x28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  static bool FIF = false;
  static int16_t last_step = -1;  // Rendue statique pour garder la valeur entre les appels

  for(;;)
  {
    uint32_t flags = osEventFlagsGet(smEventHandle);
 80009d8:	4b7f      	ldr	r3, [pc, #508]	@ (8000bd8 <StateMachine+0x208>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4618      	mov	r0, r3
 80009de:	f004 fa50 	bl	8004e82 <osEventFlagsGet>
 80009e2:	60f8      	str	r0, [r7, #12]

    if (!(flags & FLAG_SM_OFF))  // tant que menu actif
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	f040 80ec 	bne.w	8000bc8 <StateMachine+0x1f8>
    {
      if (!FIF) {
 80009f0:	4b7a      	ldr	r3, [pc, #488]	@ (8000bdc <StateMachine+0x20c>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	f083 0301 	eor.w	r3, r3, #1
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d04c      	beq.n	8000a98 <StateMachine+0xc8>
        if (last_step >= 0) {
 80009fe:	4b78      	ldr	r3, [pc, #480]	@ (8000be0 <StateMachine+0x210>)
 8000a00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	db05      	blt.n	8000a14 <StateMachine+0x44>
          encoder_set_step(last_step);  // Revenir à la dernière position connue
 8000a08:	4b75      	ldr	r3, [pc, #468]	@ (8000be0 <StateMachine+0x210>)
 8000a0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fefa 	bl	8000808 <encoder_set_step>
        }

        encoder_set_min(0);
 8000a14:	2000      	movs	r0, #0
 8000a16:	f7ff fe73 	bl	8000700 <encoder_set_min>
        encoder_set_max(4);
 8000a1a:	2004      	movs	r0, #4
 8000a1c:	f7ff fe82 	bl	8000724 <encoder_set_max>

        const menu_state_t *entry = NULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	@ 0x24
        for (int i = 0; menu_state[i].text != NULL; i++) {
 8000a24:	2300      	movs	r3, #0
 8000a26:	623b      	str	r3, [r7, #32]
 8000a28:	e01a      	b.n	8000a60 <StateMachine+0x90>
          if (menu_state[i].step == last_step) {
 8000a2a:	496e      	ldr	r1, [pc, #440]	@ (8000be4 <StateMachine+0x214>)
 8000a2c:	6a3a      	ldr	r2, [r7, #32]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	4413      	add	r3, r2
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	440b      	add	r3, r1
 8000a38:	3302      	adds	r3, #2
 8000a3a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000a3e:	4b68      	ldr	r3, [pc, #416]	@ (8000be0 <StateMachine+0x210>)
 8000a40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d108      	bne.n	8000a5a <StateMachine+0x8a>
            entry = &menu_state[i];
 8000a48:	6a3a      	ldr	r2, [r7, #32]
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	4413      	add	r3, r2
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	4a64      	ldr	r2, [pc, #400]	@ (8000be4 <StateMachine+0x214>)
 8000a54:	4413      	add	r3, r2
 8000a56:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000a58:	e00d      	b.n	8000a76 <StateMachine+0xa6>
        for (int i = 0; menu_state[i].text != NULL; i++) {
 8000a5a:	6a3b      	ldr	r3, [r7, #32]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	623b      	str	r3, [r7, #32]
 8000a60:	4960      	ldr	r1, [pc, #384]	@ (8000be4 <StateMachine+0x214>)
 8000a62:	6a3a      	ldr	r2, [r7, #32]
 8000a64:	4613      	mov	r3, r2
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	4413      	add	r3, r2
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	440b      	add	r3, r1
 8000a6e:	3308      	adds	r3, #8
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d1d9      	bne.n	8000a2a <StateMachine+0x5a>
          }
        }

        if (entry != NULL) {
 8000a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d00a      	beq.n	8000a92 <StateMachine+0xc2>
          clearLCD();
 8000a7c:	f000 fd44 	bl	8001508 <clearLCD>
          setCursor(0, 0);
 8000a80:	2100      	movs	r1, #0
 8000a82:	2000      	movs	r0, #0
 8000a84:	f000 fdb6 	bl	80015f4 <setCursor>
          writeLCD(entry->text);  // Réafficher le texte correspondant
 8000a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 fd45 	bl	800151c <writeLCD>
        }

        FIF = true;  // On a fait le setup d'entrée
 8000a92:	4b52      	ldr	r3, [pc, #328]	@ (8000bdc <StateMachine+0x20c>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	701a      	strb	r2, [r3, #0]
      }

      osEventFlagsSet(ledEventHandle, FLAG_LED1);  // Clignotement menu actif
 8000a98:	4b53      	ldr	r3, [pc, #332]	@ (8000be8 <StateMachine+0x218>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f004 f97c 	bl	8004d9c <osEventFlagsSet>

      int16_t step = encoder_get_steps();
 8000aa4:	f7ff fe20 	bl	80006e8 <encoder_get_steps>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	817b      	strh	r3, [r7, #10]
      bool button = encoder_get_button();
 8000aac:	f7ff fe94 	bl	80007d8 <encoder_get_button>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	727b      	strb	r3, [r7, #9]

      if (step != last_step)
 8000ab4:	4b4a      	ldr	r3, [pc, #296]	@ (8000be0 <StateMachine+0x210>)
 8000ab6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aba:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d03a      	beq.n	8000b38 <StateMachine+0x168>
      {
        const menu_state_t *entry = NULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
        for (int i = 0; menu_state[i].text != NULL; i++) {
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61bb      	str	r3, [r7, #24]
 8000aca:	e019      	b.n	8000b00 <StateMachine+0x130>
          if (menu_state[i].step == step) {
 8000acc:	4945      	ldr	r1, [pc, #276]	@ (8000be4 <StateMachine+0x214>)
 8000ace:	69ba      	ldr	r2, [r7, #24]
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	4413      	add	r3, r2
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	440b      	add	r3, r1
 8000ada:	3302      	adds	r3, #2
 8000adc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ae0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d108      	bne.n	8000afa <StateMachine+0x12a>
            entry = &menu_state[i];
 8000ae8:	69ba      	ldr	r2, [r7, #24]
 8000aea:	4613      	mov	r3, r2
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	4413      	add	r3, r2
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	4a3c      	ldr	r2, [pc, #240]	@ (8000be4 <StateMachine+0x214>)
 8000af4:	4413      	add	r3, r2
 8000af6:	61fb      	str	r3, [r7, #28]
            break;
 8000af8:	e00d      	b.n	8000b16 <StateMachine+0x146>
        for (int i = 0; menu_state[i].text != NULL; i++) {
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	3301      	adds	r3, #1
 8000afe:	61bb      	str	r3, [r7, #24]
 8000b00:	4938      	ldr	r1, [pc, #224]	@ (8000be4 <StateMachine+0x214>)
 8000b02:	69ba      	ldr	r2, [r7, #24]
 8000b04:	4613      	mov	r3, r2
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	4413      	add	r3, r2
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	440b      	add	r3, r1
 8000b0e:	3308      	adds	r3, #8
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d1da      	bne.n	8000acc <StateMachine+0xfc>
          }
        }

        if (entry != NULL) {
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d00d      	beq.n	8000b38 <StateMachine+0x168>
          clearLCD();
 8000b1c:	f000 fcf4 	bl	8001508 <clearLCD>
          setCursor(0, 0);
 8000b20:	2100      	movs	r1, #0
 8000b22:	2000      	movs	r0, #0
 8000b24:	f000 fd66 	bl	80015f4 <setCursor>
          writeLCD(entry->text);
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f000 fcf5 	bl	800151c <writeLCD>
          last_step = step;
 8000b32:	4a2b      	ldr	r2, [pc, #172]	@ (8000be0 <StateMachine+0x210>)
 8000b34:	897b      	ldrh	r3, [r7, #10]
 8000b36:	8013      	strh	r3, [r2, #0]
        }
      }

      if (button)
 8000b38:	7a7b      	ldrb	r3, [r7, #9]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d047      	beq.n	8000bce <StateMachine+0x1fe>
      {
        osEventFlagsSet(ledEventHandle, FLAG_LED2);
 8000b3e:	4b2a      	ldr	r3, [pc, #168]	@ (8000be8 <StateMachine+0x218>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2102      	movs	r1, #2
 8000b44:	4618      	mov	r0, r3
 8000b46:	f004 f929 	bl	8004d9c <osEventFlagsSet>

        const menu_state_t *entry = NULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]
        for (int i = 0; menu_state[i].text != NULL; i++) {
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	e019      	b.n	8000b88 <StateMachine+0x1b8>
          if (menu_state[i].step == step) {
 8000b54:	4923      	ldr	r1, [pc, #140]	@ (8000be4 <StateMachine+0x214>)
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	4613      	mov	r3, r2
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	4413      	add	r3, r2
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	440b      	add	r3, r1
 8000b62:	3302      	adds	r3, #2
 8000b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b68:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d108      	bne.n	8000b82 <StateMachine+0x1b2>
            entry = &menu_state[i];
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	4613      	mov	r3, r2
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	4413      	add	r3, r2
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	4a1a      	ldr	r2, [pc, #104]	@ (8000be4 <StateMachine+0x214>)
 8000b7c:	4413      	add	r3, r2
 8000b7e:	617b      	str	r3, [r7, #20]
            break;
 8000b80:	e00d      	b.n	8000b9e <StateMachine+0x1ce>
        for (int i = 0; menu_state[i].text != NULL; i++) {
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	3301      	adds	r3, #1
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	4916      	ldr	r1, [pc, #88]	@ (8000be4 <StateMachine+0x214>)
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	4413      	add	r3, r2
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	440b      	add	r3, r1
 8000b96:	3308      	adds	r3, #8
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d1da      	bne.n	8000b54 <StateMachine+0x184>
          }
        }

        if (entry != NULL) {
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d014      	beq.n	8000bce <StateMachine+0x1fe>
          osEventFlagsSet(funcEventHandle, entry->flag); // set task flag
 8000ba4:	4b11      	ldr	r3, [pc, #68]	@ (8000bec <StateMachine+0x21c>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	889b      	ldrh	r3, [r3, #4]
 8000bac:	4619      	mov	r1, r3
 8000bae:	4610      	mov	r0, r2
 8000bb0:	f004 f8f4 	bl	8004d9c <osEventFlagsSet>
          osEventFlagsSet(smEventHandle, FLAG_SM_OFF);   // exit statemachine
 8000bb4:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <StateMachine+0x208>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2101      	movs	r1, #1
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f004 f8ee 	bl	8004d9c <osEventFlagsSet>
          FIF = false;  // Réinitialise pour le prochain retour dans le menu
 8000bc0:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <StateMachine+0x20c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	701a      	strb	r2, [r3, #0]
 8000bc6:	e002      	b.n	8000bce <StateMachine+0x1fe>
        }
      }
    }
    else
    {
      osDelay(100);  // Repos hors mode menu
 8000bc8:	2064      	movs	r0, #100	@ 0x64
 8000bca:	f004 f88d 	bl	8004ce8 <osDelay>
    }

    osDelay(20); // 50 Hz
 8000bce:	2014      	movs	r0, #20
 8000bd0:	f004 f88a 	bl	8004ce8 <osDelay>
  {
 8000bd4:	e700      	b.n	80009d8 <StateMachine+0x8>
 8000bd6:	bf00      	nop
 8000bd8:	200000c4 	.word	0x200000c4
 8000bdc:	200000d0 	.word	0x200000d0
 8000be0:	20000004 	.word	0x20000004
 8000be4:	08009334 	.word	0x08009334
 8000be8:	200000cc 	.word	0x200000cc
 8000bec:	200000c8 	.word	0x200000c8

08000bf0 <leds>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_leds */
void leds(void *argument)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN leds */
  /* Infinite loop */
  for(;;)
  {
	  uint32_t flags = osEventFlagsWait(ledEventHandle, FLAG_LED1|FLAG_LED2|FLAG_LED3, osFlagsWaitAny, osWaitForever);
 8000bf8:	4b21      	ldr	r3, [pc, #132]	@ (8000c80 <leds+0x90>)
 8000bfa:	6818      	ldr	r0, [r3, #0]
 8000bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000c00:	2200      	movs	r2, #0
 8000c02:	2107      	movs	r1, #7
 8000c04:	f004 f95e 	bl	8004ec4 <osEventFlagsWait>
 8000c08:	60f8      	str	r0, [r7, #12]

	  if (flags & FLAG_LED1) {
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d00c      	beq.n	8000c2e <leds+0x3e>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000c14:	2201      	movs	r2, #1
 8000c16:	2101      	movs	r1, #1
 8000c18:	481a      	ldr	r0, [pc, #104]	@ (8000c84 <leds+0x94>)
 8000c1a:	f001 fb79 	bl	8002310 <HAL_GPIO_WritePin>
		osDelay(50);
 8000c1e:	2032      	movs	r0, #50	@ 0x32
 8000c20:	f004 f862 	bl	8004ce8 <osDelay>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2101      	movs	r1, #1
 8000c28:	4816      	ldr	r0, [pc, #88]	@ (8000c84 <leds+0x94>)
 8000c2a:	f001 fb71 	bl	8002310 <HAL_GPIO_WritePin>

	  }

	  if (flags & FLAG_LED2) {
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f003 0302 	and.w	r3, r3, #2
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d00c      	beq.n	8000c52 <leds+0x62>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	2180      	movs	r1, #128	@ 0x80
 8000c3c:	4811      	ldr	r0, [pc, #68]	@ (8000c84 <leds+0x94>)
 8000c3e:	f001 fb67 	bl	8002310 <HAL_GPIO_WritePin>
		osDelay(50);
 8000c42:	2032      	movs	r0, #50	@ 0x32
 8000c44:	f004 f850 	bl	8004ce8 <osDelay>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2180      	movs	r1, #128	@ 0x80
 8000c4c:	480d      	ldr	r0, [pc, #52]	@ (8000c84 <leds+0x94>)
 8000c4e:	f001 fb5f 	bl	8002310 <HAL_GPIO_WritePin>

	  }

	  if (flags & FLAG_LED3) {
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	f003 0304 	and.w	r3, r3, #4
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d00c      	beq.n	8000c76 <leds+0x86>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	2180      	movs	r1, #128	@ 0x80
 8000c60:	4808      	ldr	r0, [pc, #32]	@ (8000c84 <leds+0x94>)
 8000c62:	f001 fb55 	bl	8002310 <HAL_GPIO_WritePin>
		osDelay(50);
 8000c66:	2032      	movs	r0, #50	@ 0x32
 8000c68:	f004 f83e 	bl	8004ce8 <osDelay>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2180      	movs	r1, #128	@ 0x80
 8000c70:	4804      	ldr	r0, [pc, #16]	@ (8000c84 <leds+0x94>)
 8000c72:	f001 fb4d 	bl	8002310 <HAL_GPIO_WritePin>
	  }
		osDelay(50);
 8000c76:	2032      	movs	r0, #50	@ 0x32
 8000c78:	f004 f836 	bl	8004ce8 <osDelay>
  {
 8000c7c:	e7bc      	b.n	8000bf8 <leds+0x8>
 8000c7e:	bf00      	nop
 8000c80:	200000cc 	.word	0x200000cc
 8000c84:	40020400 	.word	0x40020400

08000c88 <infoFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_infoFunc */
void infoFunc(void *argument)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN infoFunc */
  static bool FIF = false; // first in function
  /* Infinite loop */
  for(;;)
  {
	  uint32_t flags = osEventFlagsGet(funcEventHandle);
 8000c90:	4b19      	ldr	r3, [pc, #100]	@ (8000cf8 <infoFunc+0x70>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f004 f8f4 	bl	8004e82 <osEventFlagsGet>
 8000c9a:	60f8      	str	r0, [r7, #12]

	  if (flags & FLAG_INFO) {
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d0f4      	beq.n	8000c90 <infoFunc+0x8>
		  if (!FIF) {
 8000ca6:	4b15      	ldr	r3, [pc, #84]	@ (8000cfc <infoFunc+0x74>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	f083 0301 	eor.w	r3, r3, #1
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d013      	beq.n	8000cdc <infoFunc+0x54>
			  clearLCD();
 8000cb4:	f000 fc28 	bl	8001508 <clearLCD>
			  setCursor(0, 0);
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f000 fc9a 	bl	80015f4 <setCursor>
			  writeLCD("Julien NAVEZ");
 8000cc0:	480f      	ldr	r0, [pc, #60]	@ (8000d00 <infoFunc+0x78>)
 8000cc2:	f000 fc2b 	bl	800151c <writeLCD>
			  setCursor(0, 1);
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f000 fc93 	bl	80015f4 <setCursor>
			  writeLCD("Nattan PAPIER");
 8000cce:	480d      	ldr	r0, [pc, #52]	@ (8000d04 <infoFunc+0x7c>)
 8000cd0:	f000 fc24 	bl	800151c <writeLCD>

			  FIF = true;
 8000cd4:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <infoFunc+0x74>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]
 8000cda:	e7d9      	b.n	8000c90 <infoFunc+0x8>
		  } else {
			  bool button = encoder_get_button();
 8000cdc:	f7ff fd7c 	bl	80007d8 <encoder_get_button>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	72fb      	strb	r3, [r7, #11]

			  if (button) {
 8000ce4:	7afb      	ldrb	r3, [r7, #11]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d0d2      	beq.n	8000c90 <infoFunc+0x8>
				  exitFunc();
 8000cea:	f000 fa83 	bl	80011f4 <exitFunc>
				  FIF = false;
 8000cee:	4b03      	ldr	r3, [pc, #12]	@ (8000cfc <infoFunc+0x74>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	701a      	strb	r2, [r3, #0]
  {
 8000cf4:	e7cc      	b.n	8000c90 <infoFunc+0x8>
 8000cf6:	bf00      	nop
 8000cf8:	200000c8 	.word	0x200000c8
 8000cfc:	200000d1 	.word	0x200000d1
 8000d00:	0800921c 	.word	0x0800921c
 8000d04:	0800922c 	.word	0x0800922c

08000d08 <sensFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensFunc */
void sensFunc(void *argument)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensFunc */
  int16_t step = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	82fb      	strh	r3, [r7, #22]
  /* Infinite loop */
  for(;;)
  {
	  uint32_t flags = osEventFlagsGet(funcEventHandle);
 8000d14:	4b30      	ldr	r3, [pc, #192]	@ (8000dd8 <sensFunc+0xd0>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f004 f8b2 	bl	8004e82 <osEventFlagsGet>
 8000d1e:	6138      	str	r0, [r7, #16]

	  if (flags & FLAG_SENSOR) {
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d0f4      	beq.n	8000d14 <sensFunc+0xc>
		  encoder_set_min(0);
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f7ff fce8 	bl	8000700 <encoder_set_min>
		  encoder_set_max(2);
 8000d30:	2002      	movs	r0, #2
 8000d32:	f7ff fcf7 	bl	8000724 <encoder_set_max>

		  step = encoder_get_steps();
 8000d36:	f7ff fcd7 	bl	80006e8 <encoder_get_steps>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	82fb      	strh	r3, [r7, #22]

		  clearLCD();
 8000d3e:	f000 fbe3 	bl	8001508 <clearLCD>
		  if (step == 0) {
 8000d42:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d11a      	bne.n	8000d80 <sensFunc+0x78>
			  setCursor(0, 0);
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f000 fc51 	bl	80015f4 <setCursor>
			  writeLCD("ax");
 8000d52:	4822      	ldr	r0, [pc, #136]	@ (8000ddc <sensFunc+0xd4>)
 8000d54:	f000 fbe2 	bl	800151c <writeLCD>
			  writeLCD("0.000");
 8000d58:	4821      	ldr	r0, [pc, #132]	@ (8000de0 <sensFunc+0xd8>)
 8000d5a:	f000 fbdf 	bl	800151c <writeLCD>
			  writeLCD(" ay");
 8000d5e:	4821      	ldr	r0, [pc, #132]	@ (8000de4 <sensFunc+0xdc>)
 8000d60:	f000 fbdc 	bl	800151c <writeLCD>
			  writeLCD("0.000");
 8000d64:	481e      	ldr	r0, [pc, #120]	@ (8000de0 <sensFunc+0xd8>)
 8000d66:	f000 fbd9 	bl	800151c <writeLCD>

			  setCursor(0, 1);
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f000 fc41 	bl	80015f4 <setCursor>
			  writeLCD("az");
 8000d72:	481d      	ldr	r0, [pc, #116]	@ (8000de8 <sensFunc+0xe0>)
 8000d74:	f000 fbd2 	bl	800151c <writeLCD>
			  writeLCD("0.000");
 8000d78:	4819      	ldr	r0, [pc, #100]	@ (8000de0 <sensFunc+0xd8>)
 8000d7a:	f000 fbcf 	bl	800151c <writeLCD>
 8000d7e:	e01d      	b.n	8000dbc <sensFunc+0xb4>
		  } else if (step == 1) {
 8000d80:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d119      	bne.n	8000dbc <sensFunc+0xb4>
			  setCursor(0, 0);
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f000 fc32 	bl	80015f4 <setCursor>
			  writeLCD("gx");
 8000d90:	4816      	ldr	r0, [pc, #88]	@ (8000dec <sensFunc+0xe4>)
 8000d92:	f000 fbc3 	bl	800151c <writeLCD>
			  writeLCD("0.000");
 8000d96:	4812      	ldr	r0, [pc, #72]	@ (8000de0 <sensFunc+0xd8>)
 8000d98:	f000 fbc0 	bl	800151c <writeLCD>
			  writeLCD(" gy");
 8000d9c:	4814      	ldr	r0, [pc, #80]	@ (8000df0 <sensFunc+0xe8>)
 8000d9e:	f000 fbbd 	bl	800151c <writeLCD>
			  writeLCD("0.000");
 8000da2:	480f      	ldr	r0, [pc, #60]	@ (8000de0 <sensFunc+0xd8>)
 8000da4:	f000 fbba 	bl	800151c <writeLCD>

			  setCursor(0, 1);
 8000da8:	2101      	movs	r1, #1
 8000daa:	2000      	movs	r0, #0
 8000dac:	f000 fc22 	bl	80015f4 <setCursor>
			  writeLCD("gz");
 8000db0:	4810      	ldr	r0, [pc, #64]	@ (8000df4 <sensFunc+0xec>)
 8000db2:	f000 fbb3 	bl	800151c <writeLCD>
			  writeLCD("0.000");
 8000db6:	480a      	ldr	r0, [pc, #40]	@ (8000de0 <sensFunc+0xd8>)
 8000db8:	f000 fbb0 	bl	800151c <writeLCD>
		  }

		  bool button = encoder_get_button();
 8000dbc:	f7ff fd0c 	bl	80007d8 <encoder_get_button>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	73fb      	strb	r3, [r7, #15]

		  if (button) {
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <sensFunc+0xc6>
			  exitFunc();
 8000dca:	f000 fa13 	bl	80011f4 <exitFunc>
		  }

		  osDelay(200);
 8000dce:	20c8      	movs	r0, #200	@ 0xc8
 8000dd0:	f003 ff8a 	bl	8004ce8 <osDelay>
  {
 8000dd4:	e79e      	b.n	8000d14 <sensFunc+0xc>
 8000dd6:	bf00      	nop
 8000dd8:	200000c8 	.word	0x200000c8
 8000ddc:	0800923c 	.word	0x0800923c
 8000de0:	08009240 	.word	0x08009240
 8000de4:	08009248 	.word	0x08009248
 8000de8:	0800924c 	.word	0x0800924c
 8000dec:	08009250 	.word	0x08009250
 8000df0:	08009254 	.word	0x08009254
 8000df4:	08009258 	.word	0x08009258

08000df8 <convFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_convFunc */
void convFunc(void *argument)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN convFunc */
  static bool FIF = false; // first in function
  static int16_t step = 0;
  static int16_t last_step = -1;
  char *mode[] = {
 8000e00:	4a43      	ldr	r2, [pc, #268]	@ (8000f10 <convFunc+0x118>)
 8000e02:	f107 0308 	add.w	r3, r7, #8
 8000e06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e0a:	e883 0003 	stmia.w	r3, {r0, r1}
		  "MANUAL"
  };
  /* Infinite loop */
  for(;;)
  {
	  uint32_t flags = osEventFlagsGet(funcEventHandle);
 8000e0e:	4b41      	ldr	r3, [pc, #260]	@ (8000f14 <convFunc+0x11c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f004 f835 	bl	8004e82 <osEventFlagsGet>
 8000e18:	6178      	str	r0, [r7, #20]

	  if (flags & FLAG_CONV) {
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	f003 0304 	and.w	r3, r3, #4
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d070      	beq.n	8000f06 <convFunc+0x10e>
		  encoder_set_min(0);
 8000e24:	2000      	movs	r0, #0
 8000e26:	f7ff fc6b 	bl	8000700 <encoder_set_min>
		  encoder_set_max(1);
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	f7ff fc7a 	bl	8000724 <encoder_set_max>

		  if (!FIF) {
 8000e30:	4b39      	ldr	r3, [pc, #228]	@ (8000f18 <convFunc+0x120>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	f083 0301 	eor.w	r3, r3, #1
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d016      	beq.n	8000e6c <convFunc+0x74>
			  clearLCD();
 8000e3e:	f000 fb63 	bl	8001508 <clearLCD>
			  setCursor(0, 0);
 8000e42:	2100      	movs	r1, #0
 8000e44:	2000      	movs	r0, #0
 8000e46:	f000 fbd5 	bl	80015f4 <setCursor>
			  writeLCD("Mode:");
 8000e4a:	4834      	ldr	r0, [pc, #208]	@ (8000f1c <convFunc+0x124>)
 8000e4c:	f000 fb66 	bl	800151c <writeLCD>

			  FIF = true;
 8000e50:	4b31      	ldr	r3, [pc, #196]	@ (8000f18 <convFunc+0x120>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	701a      	strb	r2, [r3, #0]
			  encoder_set_step(step);
 8000e56:	4b32      	ldr	r3, [pc, #200]	@ (8000f20 <convFunc+0x128>)
 8000e58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fcd3 	bl	8000808 <encoder_set_step>
			  last_step = -1;
 8000e62:	4b30      	ldr	r3, [pc, #192]	@ (8000f24 <convFunc+0x12c>)
 8000e64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e68:	801a      	strh	r2, [r3, #0]
 8000e6a:	e04c      	b.n	8000f06 <convFunc+0x10e>
		  } else {
			  step = encoder_get_steps();
 8000e6c:	f7ff fc3c 	bl	80006e8 <encoder_get_steps>
 8000e70:	4603      	mov	r3, r0
 8000e72:	461a      	mov	r2, r3
 8000e74:	4b2a      	ldr	r3, [pc, #168]	@ (8000f20 <convFunc+0x128>)
 8000e76:	801a      	strh	r2, [r3, #0]

			  if(step != last_step) {
 8000e78:	4b29      	ldr	r3, [pc, #164]	@ (8000f20 <convFunc+0x128>)
 8000e7a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e7e:	4b29      	ldr	r3, [pc, #164]	@ (8000f24 <convFunc+0x12c>)
 8000e80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d032      	beq.n	8000eee <convFunc+0xf6>
				  last_step = step;
 8000e88:	4b25      	ldr	r3, [pc, #148]	@ (8000f20 <convFunc+0x128>)
 8000e8a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e8e:	4b25      	ldr	r3, [pc, #148]	@ (8000f24 <convFunc+0x12c>)
 8000e90:	801a      	strh	r2, [r3, #0]

				  setCursor(0, 1);
 8000e92:	2101      	movs	r1, #1
 8000e94:	2000      	movs	r0, #0
 8000e96:	f000 fbad 	bl	80015f4 <setCursor>
				  writeLCD("                ");
 8000e9a:	4823      	ldr	r0, [pc, #140]	@ (8000f28 <convFunc+0x130>)
 8000e9c:	f000 fb3e 	bl	800151c <writeLCD>
				  setCursor(0, 1);
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f000 fba6 	bl	80015f4 <setCursor>

				  if (step < sizeof(mode)) {
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f20 <convFunc+0x128>)
 8000eaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	2b07      	cmp	r3, #7
 8000eb2:	d80a      	bhi.n	8000eca <convFunc+0xd2>
					  writeLCD(mode[step]);
 8000eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f20 <convFunc+0x128>)
 8000eb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	3318      	adds	r3, #24
 8000ebe:	443b      	add	r3, r7
 8000ec0:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 fb29 	bl	800151c <writeLCD>
				  }

				  osMutexAcquire(convModeHandle, osWaitForever);
 8000eca:	4b18      	ldr	r3, [pc, #96]	@ (8000f2c <convFunc+0x134>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f004 f8e1 	bl	800509a <osMutexAcquire>

				  // TODO change mode

				  conv_mode = (uint8_t) step;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <convFunc+0x128>)
 8000eda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	4b13      	ldr	r3, [pc, #76]	@ (8000f30 <convFunc+0x138>)
 8000ee2:	701a      	strb	r2, [r3, #0]

				  osMutexRelease(convModeHandle);
 8000ee4:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <convFunc+0x134>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f004 f921 	bl	8005130 <osMutexRelease>
			  }

			  bool button = encoder_get_button();
 8000eee:	f7ff fc73 	bl	80007d8 <encoder_get_button>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	74fb      	strb	r3, [r7, #19]

			  if (button) {
 8000ef6:	7cfb      	ldrb	r3, [r7, #19]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d004      	beq.n	8000f06 <convFunc+0x10e>
				  exitFunc();
 8000efc:	f000 f97a 	bl	80011f4 <exitFunc>
				  FIF = false;
 8000f00:	4b05      	ldr	r3, [pc, #20]	@ (8000f18 <convFunc+0x120>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
			  }
		  }
	  }

	  osDelay(1);
 8000f06:	2001      	movs	r0, #1
 8000f08:	f003 feee 	bl	8004ce8 <osDelay>
  {
 8000f0c:	e77f      	b.n	8000e0e <convFunc+0x16>
 8000f0e:	bf00      	nop
 8000f10:	08009288 	.word	0x08009288
 8000f14:	200000c8 	.word	0x200000c8
 8000f18:	200000d2 	.word	0x200000d2
 8000f1c:	0800925c 	.word	0x0800925c
 8000f20:	200000d4 	.word	0x200000d4
 8000f24:	20000006 	.word	0x20000006
 8000f28:	08009264 	.word	0x08009264
 8000f2c:	200000c0 	.word	0x200000c0
 8000f30:	20000094 	.word	0x20000094

08000f34 <actFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_actFunc */
void actFunc(void *argument)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	@ 0x28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN actFunc */
  static bool FIF = false; // first in function
  char *mode[] = {
 8000f3c:	4a51      	ldr	r2, [pc, #324]	@ (8001084 <actFunc+0x150>)
 8000f3e:	f107 0318 	add.w	r3, r7, #24
 8000f42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f46:	e883 0003 	stmia.w	r3, {r0, r1}
  static int16_t step = 0;
  static int16_t last_step = -1;
  /* Infinite loop */
  for(;;)
  {
	  uint32_t flags = osEventFlagsGet(funcEventHandle);
 8000f4a:	4b4f      	ldr	r3, [pc, #316]	@ (8001088 <actFunc+0x154>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f003 ff97 	bl	8004e82 <osEventFlagsGet>
 8000f54:	6278      	str	r0, [r7, #36]	@ 0x24

	  if (flags & FLAG_ACT) {
 8000f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f58:	f003 0308 	and.w	r3, r3, #8
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	f000 808d 	beq.w	800107c <actFunc+0x148>
		  if (!FIF) {
 8000f62:	4b4a      	ldr	r3, [pc, #296]	@ (800108c <actFunc+0x158>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	f083 0301 	eor.w	r3, r3, #1
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d024      	beq.n	8000fba <actFunc+0x86>
			  clearLCD();
 8000f70:	f000 faca 	bl	8001508 <clearLCD>
			  setCursor(0, 0);
 8000f74:	2100      	movs	r1, #0
 8000f76:	2000      	movs	r0, #0
 8000f78:	f000 fb3c 	bl	80015f4 <setCursor>
			  writeLCD("VM QYF-740  ");
 8000f7c:	4844      	ldr	r0, [pc, #272]	@ (8001090 <actFunc+0x15c>)
 8000f7e:	f000 facd 	bl	800151c <writeLCD>
			  if (conv_mode >= 0 && conv_mode < sizeof(mode)) {
 8000f82:	4b44      	ldr	r3, [pc, #272]	@ (8001094 <actFunc+0x160>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b07      	cmp	r3, #7
 8000f88:	d809      	bhi.n	8000f9e <actFunc+0x6a>
				  writeLCD(mode[conv_mode]);
 8000f8a:	4b42      	ldr	r3, [pc, #264]	@ (8001094 <actFunc+0x160>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	3328      	adds	r3, #40	@ 0x28
 8000f92:	443b      	add	r3, r7
 8000f94:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 fabf 	bl	800151c <writeLCD>
			  }

			  FIF = true;
 8000f9e:	4b3b      	ldr	r3, [pc, #236]	@ (800108c <actFunc+0x158>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	701a      	strb	r2, [r3, #0]
			  encoder_set_step(step);
 8000fa4:	4b3c      	ldr	r3, [pc, #240]	@ (8001098 <actFunc+0x164>)
 8000fa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fc2c 	bl	8000808 <encoder_set_step>
			  last_step = -1;
 8000fb0:	4b3a      	ldr	r3, [pc, #232]	@ (800109c <actFunc+0x168>)
 8000fb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fb6:	801a      	strh	r2, [r3, #0]
 8000fb8:	e060      	b.n	800107c <actFunc+0x148>
		  } else {
			  osMutexAcquire(convModeHandle, osWaitForever);
 8000fba:	4b39      	ldr	r3, [pc, #228]	@ (80010a0 <actFunc+0x16c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f004 f869 	bl	800509a <osMutexAcquire>
			  if (conv_mode == 0) {
 8000fc8:	4b32      	ldr	r3, [pc, #200]	@ (8001094 <actFunc+0x160>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d10d      	bne.n	8000fec <actFunc+0xb8>
				  setCursor(0, 1);
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f000 fb0e 	bl	80015f4 <setCursor>
				  writeLCD("Setpoint: ");
 8000fd8:	4832      	ldr	r0, [pc, #200]	@ (80010a4 <actFunc+0x170>)
 8000fda:	f000 fa9f 	bl	800151c <writeLCD>
				  writeLCD("69"); // auto setpoint variable
 8000fde:	4832      	ldr	r0, [pc, #200]	@ (80010a8 <actFunc+0x174>)
 8000fe0:	f000 fa9c 	bl	800151c <writeLCD>
				  writeLCD(" %");
 8000fe4:	4831      	ldr	r0, [pc, #196]	@ (80010ac <actFunc+0x178>)
 8000fe6:	f000 fa99 	bl	800151c <writeLCD>
 8000fea:	e034      	b.n	8001056 <actFunc+0x122>
			  } else if (conv_mode == 1) {
 8000fec:	4b29      	ldr	r3, [pc, #164]	@ (8001094 <actFunc+0x160>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d130      	bne.n	8001056 <actFunc+0x122>
				  encoder_set_min(0);
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f7ff fb83 	bl	8000700 <encoder_set_min>
				  encoder_set_max(100);
 8000ffa:	2064      	movs	r0, #100	@ 0x64
 8000ffc:	f7ff fb92 	bl	8000724 <encoder_set_max>

				  step = encoder_get_steps();
 8001000:	f7ff fb72 	bl	80006e8 <encoder_get_steps>
 8001004:	4603      	mov	r3, r0
 8001006:	461a      	mov	r2, r3
 8001008:	4b23      	ldr	r3, [pc, #140]	@ (8001098 <actFunc+0x164>)
 800100a:	801a      	strh	r2, [r3, #0]

				  if (step != last_step) {
 800100c:	4b22      	ldr	r3, [pc, #136]	@ (8001098 <actFunc+0x164>)
 800100e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001012:	4b22      	ldr	r3, [pc, #136]	@ (800109c <actFunc+0x168>)
 8001014:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001018:	429a      	cmp	r2, r3
 800101a:	d01c      	beq.n	8001056 <actFunc+0x122>
					  last_step = step;
 800101c:	4b1e      	ldr	r3, [pc, #120]	@ (8001098 <actFunc+0x164>)
 800101e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001022:	4b1e      	ldr	r3, [pc, #120]	@ (800109c <actFunc+0x168>)
 8001024:	801a      	strh	r2, [r3, #0]
					  setCursor(0, 1);
 8001026:	2101      	movs	r1, #1
 8001028:	2000      	movs	r0, #0
 800102a:	f000 fae3 	bl	80015f4 <setCursor>
					  writeLCD("PWM: ");
 800102e:	4820      	ldr	r0, [pc, #128]	@ (80010b0 <actFunc+0x17c>)
 8001030:	f000 fa74 	bl	800151c <writeLCD>

					  char buffer[16];
					  snprintf(buffer, sizeof(buffer), "%d", step);
 8001034:	4b18      	ldr	r3, [pc, #96]	@ (8001098 <actFunc+0x164>)
 8001036:	f9b3 3000 	ldrsh.w	r3, [r3]
 800103a:	f107 0008 	add.w	r0, r7, #8
 800103e:	4a1d      	ldr	r2, [pc, #116]	@ (80010b4 <actFunc+0x180>)
 8001040:	2110      	movs	r1, #16
 8001042:	f007 fbb9 	bl	80087b8 <sniprintf>

					  writeLCD(buffer);
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	4618      	mov	r0, r3
 800104c:	f000 fa66 	bl	800151c <writeLCD>
					  writeLCD("%   ");
 8001050:	4819      	ldr	r0, [pc, #100]	@ (80010b8 <actFunc+0x184>)
 8001052:	f000 fa63 	bl	800151c <writeLCD>
				  }
			  }

			  osMutexRelease(convModeHandle);
 8001056:	4b12      	ldr	r3, [pc, #72]	@ (80010a0 <actFunc+0x16c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f004 f868 	bl	8005130 <osMutexRelease>

			  bool button = encoder_get_button();
 8001060:	f7ff fbba 	bl	80007d8 <encoder_get_button>
 8001064:	4603      	mov	r3, r0
 8001066:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

			  if (button) {
 800106a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800106e:	2b00      	cmp	r3, #0
 8001070:	d004      	beq.n	800107c <actFunc+0x148>
				  exitFunc();
 8001072:	f000 f8bf 	bl	80011f4 <exitFunc>
				  FIF = false;
 8001076:	4b05      	ldr	r3, [pc, #20]	@ (800108c <actFunc+0x158>)
 8001078:	2200      	movs	r2, #0
 800107a:	701a      	strb	r2, [r3, #0]
			  }
		  }
	  }

	  osDelay(1);
 800107c:	2001      	movs	r0, #1
 800107e:	f003 fe33 	bl	8004ce8 <osDelay>
  {
 8001082:	e762      	b.n	8000f4a <actFunc+0x16>
 8001084:	080092cc 	.word	0x080092cc
 8001088:	200000c8 	.word	0x200000c8
 800108c:	200000d6 	.word	0x200000d6
 8001090:	08009290 	.word	0x08009290
 8001094:	20000094 	.word	0x20000094
 8001098:	200000d8 	.word	0x200000d8
 800109c:	20000008 	.word	0x20000008
 80010a0:	200000c0 	.word	0x200000c0
 80010a4:	080092a0 	.word	0x080092a0
 80010a8:	080092ac 	.word	0x080092ac
 80010ac:	080092b0 	.word	0x080092b0
 80010b0:	080092b4 	.word	0x080092b4
 80010b4:	080092bc 	.word	0x080092bc
 80010b8:	080092c0 	.word	0x080092c0

080010bc <mpuFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_mpuFunc */
void mpuFunc(void *argument)
{
 80010bc:	b590      	push	{r4, r7, lr}
 80010be:	b089      	sub	sp, #36	@ 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN mpuFunc */
	static bool FIF = false; // first in function
	static int16_t step = 0;
	static int16_t last_step = -1;
	char *mode[] = {
 80010c4:	4b42      	ldr	r3, [pc, #264]	@ (80011d0 <mpuFunc+0x114>)
 80010c6:	f107 0408 	add.w	r4, r7, #8
 80010ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  "Threshold"
	};
	/* Infinite loop */
	for(;;)
	{
	  uint32_t flags = osEventFlagsGet(funcEventHandle);
 80010d0:	4b40      	ldr	r3, [pc, #256]	@ (80011d4 <mpuFunc+0x118>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f003 fed4 	bl	8004e82 <osEventFlagsGet>
 80010da:	61f8      	str	r0, [r7, #28]

	  if (flags & FLAG_MPU) {
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f003 0310 	and.w	r3, r3, #16
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d070      	beq.n	80011c8 <mpuFunc+0x10c>
		  encoder_set_min(0);
 80010e6:	2000      	movs	r0, #0
 80010e8:	f7ff fb0a 	bl	8000700 <encoder_set_min>
		  encoder_set_max(3);
 80010ec:	2003      	movs	r0, #3
 80010ee:	f7ff fb19 	bl	8000724 <encoder_set_max>

		  if (!FIF) {
 80010f2:	4b39      	ldr	r3, [pc, #228]	@ (80011d8 <mpuFunc+0x11c>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	f083 0301 	eor.w	r3, r3, #1
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d016      	beq.n	800112e <mpuFunc+0x72>
			  clearLCD();
 8001100:	f000 fa02 	bl	8001508 <clearLCD>
			  setCursor(0, 0);
 8001104:	2100      	movs	r1, #0
 8001106:	2000      	movs	r0, #0
 8001108:	f000 fa74 	bl	80015f4 <setCursor>
			  writeLCD("MPU Mode:");
 800110c:	4833      	ldr	r0, [pc, #204]	@ (80011dc <mpuFunc+0x120>)
 800110e:	f000 fa05 	bl	800151c <writeLCD>

			  FIF = true;
 8001112:	4b31      	ldr	r3, [pc, #196]	@ (80011d8 <mpuFunc+0x11c>)
 8001114:	2201      	movs	r2, #1
 8001116:	701a      	strb	r2, [r3, #0]
			  encoder_set_step(step);
 8001118:	4b31      	ldr	r3, [pc, #196]	@ (80011e0 <mpuFunc+0x124>)
 800111a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fb72 	bl	8000808 <encoder_set_step>
			  last_step = -1;
 8001124:	4b2f      	ldr	r3, [pc, #188]	@ (80011e4 <mpuFunc+0x128>)
 8001126:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800112a:	801a      	strh	r2, [r3, #0]
 800112c:	e04c      	b.n	80011c8 <mpuFunc+0x10c>
		  } else {
			  step = encoder_get_steps();
 800112e:	f7ff fadb 	bl	80006e8 <encoder_get_steps>
 8001132:	4603      	mov	r3, r0
 8001134:	461a      	mov	r2, r3
 8001136:	4b2a      	ldr	r3, [pc, #168]	@ (80011e0 <mpuFunc+0x124>)
 8001138:	801a      	strh	r2, [r3, #0]

			  if(step != last_step) {
 800113a:	4b29      	ldr	r3, [pc, #164]	@ (80011e0 <mpuFunc+0x124>)
 800113c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001140:	4b28      	ldr	r3, [pc, #160]	@ (80011e4 <mpuFunc+0x128>)
 8001142:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001146:	429a      	cmp	r2, r3
 8001148:	d032      	beq.n	80011b0 <mpuFunc+0xf4>
				  last_step = step;
 800114a:	4b25      	ldr	r3, [pc, #148]	@ (80011e0 <mpuFunc+0x124>)
 800114c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001150:	4b24      	ldr	r3, [pc, #144]	@ (80011e4 <mpuFunc+0x128>)
 8001152:	801a      	strh	r2, [r3, #0]

				  setCursor(0, 1);
 8001154:	2101      	movs	r1, #1
 8001156:	2000      	movs	r0, #0
 8001158:	f000 fa4c 	bl	80015f4 <setCursor>
				  writeLCD("                ");
 800115c:	4822      	ldr	r0, [pc, #136]	@ (80011e8 <mpuFunc+0x12c>)
 800115e:	f000 f9dd 	bl	800151c <writeLCD>
				  setCursor(0, 1);
 8001162:	2101      	movs	r1, #1
 8001164:	2000      	movs	r0, #0
 8001166:	f000 fa45 	bl	80015f4 <setCursor>

				  if (step < sizeof(mode)) {
 800116a:	4b1d      	ldr	r3, [pc, #116]	@ (80011e0 <mpuFunc+0x124>)
 800116c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001170:	b29b      	uxth	r3, r3
 8001172:	2b0f      	cmp	r3, #15
 8001174:	d80a      	bhi.n	800118c <mpuFunc+0xd0>
					  writeLCD(mode[step]);
 8001176:	4b1a      	ldr	r3, [pc, #104]	@ (80011e0 <mpuFunc+0x124>)
 8001178:	f9b3 3000 	ldrsh.w	r3, [r3]
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	3320      	adds	r3, #32
 8001180:	443b      	add	r3, r7
 8001182:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8001186:	4618      	mov	r0, r3
 8001188:	f000 f9c8 	bl	800151c <writeLCD>
				  }

				  osMutexAcquire(mpuModeHandle, osWaitForever);
 800118c:	4b17      	ldr	r3, [pc, #92]	@ (80011ec <mpuFunc+0x130>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f04f 31ff 	mov.w	r1, #4294967295
 8001194:	4618      	mov	r0, r3
 8001196:	f003 ff80 	bl	800509a <osMutexAcquire>

				  // TODO change mode

				  mpu_mode = (uint8_t) step;
 800119a:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <mpuFunc+0x124>)
 800119c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	4b13      	ldr	r3, [pc, #76]	@ (80011f0 <mpuFunc+0x134>)
 80011a4:	701a      	strb	r2, [r3, #0]

				  osMutexRelease(mpuModeHandle);
 80011a6:	4b11      	ldr	r3, [pc, #68]	@ (80011ec <mpuFunc+0x130>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f003 ffc0 	bl	8005130 <osMutexRelease>
			  }

			  bool button = encoder_get_button();
 80011b0:	f7ff fb12 	bl	80007d8 <encoder_get_button>
 80011b4:	4603      	mov	r3, r0
 80011b6:	76fb      	strb	r3, [r7, #27]

			  if (button) {
 80011b8:	7efb      	ldrb	r3, [r7, #27]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d004      	beq.n	80011c8 <mpuFunc+0x10c>
				  exitFunc();
 80011be:	f000 f819 	bl	80011f4 <exitFunc>
				  FIF = false;
 80011c2:	4b05      	ldr	r3, [pc, #20]	@ (80011d8 <mpuFunc+0x11c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
			  }
		  }
	  }

	  osDelay(1);
 80011c8:	2001      	movs	r0, #1
 80011ca:	f003 fd8d 	bl	8004ce8 <osDelay>
	{
 80011ce:	e77f      	b.n	80010d0 <mpuFunc+0x14>
 80011d0:	0800930c 	.word	0x0800930c
 80011d4:	200000c8 	.word	0x200000c8
 80011d8:	200000da 	.word	0x200000da
 80011dc:	080092d4 	.word	0x080092d4
 80011e0:	200000dc 	.word	0x200000dc
 80011e4:	2000000a 	.word	0x2000000a
 80011e8:	08009264 	.word	0x08009264
 80011ec:	200000bc 	.word	0x200000bc
 80011f0:	20000095 	.word	0x20000095

080011f4 <exitFunc>:
  /* USER CODE END mpuFunc */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void exitFunc(void) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	encoder_reset_position();
 80011f8:	f7ff faa6 	bl	8000748 <encoder_reset_position>

	if (funcEventHandle != NULL) {
 80011fc:	4b16      	ldr	r3, [pc, #88]	@ (8001258 <exitFunc+0x64>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d01d      	beq.n	8001240 <exitFunc+0x4c>
		osEventFlagsClear(funcEventHandle, FLAG_INFO);
 8001204:	4b14      	ldr	r3, [pc, #80]	@ (8001258 <exitFunc+0x64>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2101      	movs	r1, #1
 800120a:	4618      	mov	r0, r3
 800120c:	f003 fe08 	bl	8004e20 <osEventFlagsClear>
		osEventFlagsClear(funcEventHandle, FLAG_SENSOR);
 8001210:	4b11      	ldr	r3, [pc, #68]	@ (8001258 <exitFunc+0x64>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2102      	movs	r1, #2
 8001216:	4618      	mov	r0, r3
 8001218:	f003 fe02 	bl	8004e20 <osEventFlagsClear>
		osEventFlagsClear(funcEventHandle, FLAG_CONV);
 800121c:	4b0e      	ldr	r3, [pc, #56]	@ (8001258 <exitFunc+0x64>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2104      	movs	r1, #4
 8001222:	4618      	mov	r0, r3
 8001224:	f003 fdfc 	bl	8004e20 <osEventFlagsClear>
		osEventFlagsClear(funcEventHandle, FLAG_ACT);
 8001228:	4b0b      	ldr	r3, [pc, #44]	@ (8001258 <exitFunc+0x64>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2108      	movs	r1, #8
 800122e:	4618      	mov	r0, r3
 8001230:	f003 fdf6 	bl	8004e20 <osEventFlagsClear>
		osEventFlagsClear(funcEventHandle, FLAG_MPU);
 8001234:	4b08      	ldr	r3, [pc, #32]	@ (8001258 <exitFunc+0x64>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2110      	movs	r1, #16
 800123a:	4618      	mov	r0, r3
 800123c:	f003 fdf0 	bl	8004e20 <osEventFlagsClear>
	}
		//osEventFlagsSet(funcEventHandle, 0xFFFFFFFF);


	if (smEventHandle != NULL)
 8001240:	4b06      	ldr	r3, [pc, #24]	@ (800125c <exitFunc+0x68>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d005      	beq.n	8001254 <exitFunc+0x60>
		osEventFlagsClear(smEventHandle, FLAG_SM_OFF);
 8001248:	4b04      	ldr	r3, [pc, #16]	@ (800125c <exitFunc+0x68>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2101      	movs	r1, #1
 800124e:	4618      	mov	r0, r3
 8001250:	f003 fde6 	bl	8004e20 <osEventFlagsClear>
}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200000c8 	.word	0x200000c8
 800125c:	200000c4 	.word	0x200000c4

08001260 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08c      	sub	sp, #48	@ 0x30
 8001264:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	61bb      	str	r3, [r7, #24]
 800127a:	4b5c      	ldr	r3, [pc, #368]	@ (80013ec <MX_GPIO_Init+0x18c>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	4a5b      	ldr	r2, [pc, #364]	@ (80013ec <MX_GPIO_Init+0x18c>)
 8001280:	f043 0304 	orr.w	r3, r3, #4
 8001284:	6313      	str	r3, [r2, #48]	@ 0x30
 8001286:	4b59      	ldr	r3, [pc, #356]	@ (80013ec <MX_GPIO_Init+0x18c>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	61bb      	str	r3, [r7, #24]
 8001290:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	4b55      	ldr	r3, [pc, #340]	@ (80013ec <MX_GPIO_Init+0x18c>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	4a54      	ldr	r2, [pc, #336]	@ (80013ec <MX_GPIO_Init+0x18c>)
 800129c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a2:	4b52      	ldr	r3, [pc, #328]	@ (80013ec <MX_GPIO_Init+0x18c>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012aa:	617b      	str	r3, [r7, #20]
 80012ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	4b4e      	ldr	r3, [pc, #312]	@ (80013ec <MX_GPIO_Init+0x18c>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	4a4d      	ldr	r2, [pc, #308]	@ (80013ec <MX_GPIO_Init+0x18c>)
 80012b8:	f043 0302 	orr.w	r3, r3, #2
 80012bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012be:	4b4b      	ldr	r3, [pc, #300]	@ (80013ec <MX_GPIO_Init+0x18c>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b47      	ldr	r3, [pc, #284]	@ (80013ec <MX_GPIO_Init+0x18c>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	4a46      	ldr	r2, [pc, #280]	@ (80013ec <MX_GPIO_Init+0x18c>)
 80012d4:	f043 0308 	orr.w	r3, r3, #8
 80012d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012da:	4b44      	ldr	r3, [pc, #272]	@ (80013ec <MX_GPIO_Init+0x18c>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	4b40      	ldr	r3, [pc, #256]	@ (80013ec <MX_GPIO_Init+0x18c>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	4a3f      	ldr	r2, [pc, #252]	@ (80013ec <MX_GPIO_Init+0x18c>)
 80012f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f6:	4b3d      	ldr	r3, [pc, #244]	@ (80013ec <MX_GPIO_Init+0x18c>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	4b39      	ldr	r3, [pc, #228]	@ (80013ec <MX_GPIO_Init+0x18c>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	4a38      	ldr	r2, [pc, #224]	@ (80013ec <MX_GPIO_Init+0x18c>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6313      	str	r3, [r2, #48]	@ 0x30
 8001312:	4b36      	ldr	r3, [pc, #216]	@ (80013ec <MX_GPIO_Init+0x18c>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001324:	4832      	ldr	r0, [pc, #200]	@ (80013f0 <MX_GPIO_Init+0x190>)
 8001326:	f000 fff3 	bl	8002310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	2140      	movs	r1, #64	@ 0x40
 800132e:	4831      	ldr	r0, [pc, #196]	@ (80013f4 <MX_GPIO_Init+0x194>)
 8001330:	f000 ffee 	bl	8002310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_RS_Pin|LCD_E_Pin|LCD_D4_Pin|LCD_D5_Pin
 8001334:	2200      	movs	r2, #0
 8001336:	21fc      	movs	r1, #252	@ 0xfc
 8001338:	482f      	ldr	r0, [pc, #188]	@ (80013f8 <MX_GPIO_Init+0x198>)
 800133a:	f000 ffe9 	bl	8002310 <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800133e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001344:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001348:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800134e:	f107 031c 	add.w	r3, r7, #28
 8001352:	4619      	mov	r1, r3
 8001354:	4829      	ldr	r0, [pc, #164]	@ (80013fc <MX_GPIO_Init+0x19c>)
 8001356:	f000 fe2f 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800135a:	f244 0381 	movw	r3, #16513	@ 0x4081
 800135e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001360:	2301      	movs	r3, #1
 8001362:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2300      	movs	r3, #0
 800136a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	4619      	mov	r1, r3
 8001372:	481f      	ldr	r0, [pc, #124]	@ (80013f0 <MX_GPIO_Init+0x190>)
 8001374:	f000 fe20 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_BUTT_Pin */
  GPIO_InitStruct.Pin = ENC_BUTT_Pin;
 8001378:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800137c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001382:	2301      	movs	r3, #1
 8001384:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ENC_BUTT_GPIO_Port, &GPIO_InitStruct);
 8001386:	f107 031c 	add.w	r3, r7, #28
 800138a:	4619      	mov	r1, r3
 800138c:	481a      	ldr	r0, [pc, #104]	@ (80013f8 <MX_GPIO_Init+0x198>)
 800138e:	f000 fe13 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001392:	2340      	movs	r3, #64	@ 0x40
 8001394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001396:	2301      	movs	r3, #1
 8001398:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	4619      	mov	r1, r3
 80013a8:	4812      	ldr	r0, [pc, #72]	@ (80013f4 <MX_GPIO_Init+0x194>)
 80013aa:	f000 fe05 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80013ae:	2380      	movs	r3, #128	@ 0x80
 80013b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b2:	2300      	movs	r3, #0
 80013b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013ba:	f107 031c 	add.w	r3, r7, #28
 80013be:	4619      	mov	r1, r3
 80013c0:	480c      	ldr	r0, [pc, #48]	@ (80013f4 <MX_GPIO_Init+0x194>)
 80013c2:	f000 fdf9 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_E_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_E_Pin|LCD_D4_Pin|LCD_D5_Pin
 80013c6:	23fc      	movs	r3, #252	@ 0xfc
 80013c8:	61fb      	str	r3, [r7, #28]
                          |LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ca:	2301      	movs	r3, #1
 80013cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013ce:	2302      	movs	r3, #2
 80013d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	2300      	movs	r3, #0
 80013d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d6:	f107 031c 	add.w	r3, r7, #28
 80013da:	4619      	mov	r1, r3
 80013dc:	4806      	ldr	r0, [pc, #24]	@ (80013f8 <MX_GPIO_Init+0x198>)
 80013de:	f000 fdeb 	bl	8001fb8 <HAL_GPIO_Init>

}
 80013e2:	bf00      	nop
 80013e4:	3730      	adds	r7, #48	@ 0x30
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40020400 	.word	0x40020400
 80013f4:	40021800 	.word	0x40021800
 80013f8:	40020c00 	.word	0x40020c00
 80013fc:	40020800 	.word	0x40020800

08001400 <fallingEdge>:
#define SET_IF(expr)  ((expr) ? GPIO_PIN_SET : GPIO_PIN_RESET)
char display_settings;

//Sending falling edge signal to EPin for waking up LCD
static void fallingEdge(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIO_PORT, E_Pin, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	2108      	movs	r1, #8
 8001408:	4808      	ldr	r0, [pc, #32]	@ (800142c <fallingEdge+0x2c>)
 800140a:	f000 ff81 	bl	8002310 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PORT, E_Pin, GPIO_PIN_SET);
 800140e:	2201      	movs	r2, #1
 8001410:	2108      	movs	r1, #8
 8001412:	4806      	ldr	r0, [pc, #24]	@ (800142c <fallingEdge+0x2c>)
 8001414:	f000 ff7c 	bl	8002310 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PORT, E_Pin, GPIO_PIN_RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	2108      	movs	r1, #8
 800141c:	4803      	ldr	r0, [pc, #12]	@ (800142c <fallingEdge+0x2c>)
 800141e:	f000 ff77 	bl	8002310 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001422:	2001      	movs	r0, #1
 8001424:	f000 fc92 	bl	8001d4c <HAL_Delay>
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40020c00 	.word	0x40020c00

08001430 <send4Bits>:

#ifndef LCD8Bit
	static void send4Bits(char data)
	{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(GPIO_PORT, DATA5_Pin, SET_IF(data&0x01));
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	f003 0301 	and.w	r3, r3, #1
 8001440:	b2db      	uxtb	r3, r3
 8001442:	461a      	mov	r2, r3
 8001444:	2110      	movs	r1, #16
 8001446:	4815      	ldr	r0, [pc, #84]	@ (800149c <send4Bits+0x6c>)
 8001448:	f000 ff62 	bl	8002310 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_PORT, DATA6_Pin, SET_IF(data&0x02));
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	105b      	asrs	r3, r3, #1
 8001450:	b2db      	uxtb	r3, r3
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	b2db      	uxtb	r3, r3
 8001458:	461a      	mov	r2, r3
 800145a:	2120      	movs	r1, #32
 800145c:	480f      	ldr	r0, [pc, #60]	@ (800149c <send4Bits+0x6c>)
 800145e:	f000 ff57 	bl	8002310 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_PORT, DATA7_Pin, SET_IF(data&0x04));
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	109b      	asrs	r3, r3, #2
 8001466:	b2db      	uxtb	r3, r3
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	b2db      	uxtb	r3, r3
 800146e:	461a      	mov	r2, r3
 8001470:	2140      	movs	r1, #64	@ 0x40
 8001472:	480a      	ldr	r0, [pc, #40]	@ (800149c <send4Bits+0x6c>)
 8001474:	f000 ff4c 	bl	8002310 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_PORT, DATA8_Pin, SET_IF(data&0x08));
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	10db      	asrs	r3, r3, #3
 800147c:	b2db      	uxtb	r3, r3
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	b2db      	uxtb	r3, r3
 8001484:	461a      	mov	r2, r3
 8001486:	2180      	movs	r1, #128	@ 0x80
 8001488:	4804      	ldr	r0, [pc, #16]	@ (800149c <send4Bits+0x6c>)
 800148a:	f000 ff41 	bl	8002310 <HAL_GPIO_WritePin>

		fallingEdge();
 800148e:	f7ff ffb7 	bl	8001400 <fallingEdge>
	}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40020c00 	.word	0x40020c00

080014a0 <sendCommand>:
		fallingEdge();
	}
#endif

static void sendCommand(char cmd)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
	#ifdef LCD8Bit
    	HAL_GPIO_WritePin(GPIO_PORT, RS_Pin, GPIO_PIN_RESET);
		send8Bits(cmd);
	#else
	    HAL_GPIO_WritePin(GPIO_PORT, RS_Pin, GPIO_PIN_RESET);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2104      	movs	r1, #4
 80014ae:	4808      	ldr	r0, [pc, #32]	@ (80014d0 <sendCommand+0x30>)
 80014b0:	f000 ff2e 	bl	8002310 <HAL_GPIO_WritePin>
		send4Bits(cmd >> 4);
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	091b      	lsrs	r3, r3, #4
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ffb8 	bl	8001430 <send4Bits>
		send4Bits(cmd);
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff ffb4 	bl	8001430 <send4Bits>
	#endif
}
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40020c00 	.word	0x40020c00

080014d4 <sendData>:

static void sendData(char data)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
	#ifdef LCD8Bit
    	HAL_GPIO_WritePin(GPIO_PORT, RS_Pin, GPIO_PIN_SET);
		send8Bits(data);
	#else
	    HAL_GPIO_WritePin(GPIO_PORT, RS_Pin, GPIO_PIN_SET);
 80014de:	2201      	movs	r2, #1
 80014e0:	2104      	movs	r1, #4
 80014e2:	4808      	ldr	r0, [pc, #32]	@ (8001504 <sendData+0x30>)
 80014e4:	f000 ff14 	bl	8002310 <HAL_GPIO_WritePin>
		send4Bits(data >> 4);
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	091b      	lsrs	r3, r3, #4
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff ff9e 	bl	8001430 <send4Bits>
		send4Bits(data);
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff ff9a 	bl	8001430 <send4Bits>
	#endif
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40020c00 	.word	0x40020c00

08001508 <clearLCD>:

void clearLCD(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	sendCommand(LCD_CLEARDISPLAY);
 800150c:	2001      	movs	r0, #1
 800150e:	f7ff ffc7 	bl	80014a0 <sendCommand>
	HAL_Delay(5);
 8001512:	2005      	movs	r0, #5
 8001514:	f000 fc1a 	bl	8001d4c <HAL_Delay>
}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}

0800151c <writeLCD>:
{
	sendData(c);
}

void writeLCD (char *str)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
	for(; *str != 0; ++str)
 8001524:	e007      	b.n	8001536 <writeLCD+0x1a>
	{
		sendData(*str);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff ffd2 	bl	80014d4 <sendData>
	for(; *str != 0; ++str)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3301      	adds	r3, #1
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f3      	bne.n	8001526 <writeLCD+0xa>
	}
}
 800153e:	bf00      	nop
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <initLCD>:

void initLCD(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIO_PORT, E_Pin,  	 GPIO_PIN_RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	2108      	movs	r1, #8
 8001550:	4826      	ldr	r0, [pc, #152]	@ (80015ec <initLCD+0xa4>)
 8001552:	f000 fedd 	bl	8002310 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PORT, RS_Pin, 	 GPIO_PIN_RESET);
 8001556:	2200      	movs	r2, #0
 8001558:	2104      	movs	r1, #4
 800155a:	4824      	ldr	r0, [pc, #144]	@ (80015ec <initLCD+0xa4>)
 800155c:	f000 fed8 	bl	8002310 <HAL_GPIO_WritePin>

	HAL_Delay(50);
 8001560:	2032      	movs	r0, #50	@ 0x32
 8001562:	f000 fbf3 	bl	8001d4c <HAL_Delay>
		HAL_Delay(5);
		sendCommand(LCD_FUNCTIONSET | display_settings);
		HAL_Delay(5);

	#else
		display_settings = LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS;
 8001566:	4b22      	ldr	r3, [pc, #136]	@ (80015f0 <initLCD+0xa8>)
 8001568:	2208      	movs	r2, #8
 800156a:	701a      	strb	r2, [r3, #0]
		send4Bits(0x03);
		HAL_Delay(2);
		send4Bits(0x02);
		HAL_Delay(2);*/

		send4Bits(0x03);
 800156c:	2003      	movs	r0, #3
 800156e:	f7ff ff5f 	bl	8001430 <send4Bits>
		HAL_Delay(10);
 8001572:	200a      	movs	r0, #10
 8001574:	f000 fbea 	bl	8001d4c <HAL_Delay>
		send4Bits(0x03);
 8001578:	2003      	movs	r0, #3
 800157a:	f7ff ff59 	bl	8001430 <send4Bits>
		HAL_Delay(10);
 800157e:	200a      	movs	r0, #10
 8001580:	f000 fbe4 	bl	8001d4c <HAL_Delay>
		send4Bits(0x03);
 8001584:	2003      	movs	r0, #3
 8001586:	f7ff ff53 	bl	8001430 <send4Bits>
		HAL_Delay(10);
 800158a:	200a      	movs	r0, #10
 800158c:	f000 fbde 	bl	8001d4c <HAL_Delay>
		send4Bits(0x02);
 8001590:	2002      	movs	r0, #2
 8001592:	f7ff ff4d 	bl	8001430 <send4Bits>
		HAL_Delay(10);
 8001596:	200a      	movs	r0, #10
 8001598:	f000 fbd8 	bl	8001d4c <HAL_Delay>
	#endif
		sendCommand(LCD_FUNCTIONSET | display_settings);
 800159c:	4b14      	ldr	r3, [pc, #80]	@ (80015f0 <initLCD+0xa8>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	f043 0320 	orr.w	r3, r3, #32
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff ff7a 	bl	80014a0 <sendCommand>
		display_settings = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80015ac:	4b10      	ldr	r3, [pc, #64]	@ (80015f0 <initLCD+0xa8>)
 80015ae:	2204      	movs	r2, #4
 80015b0:	701a      	strb	r2, [r3, #0]
		sendCommand(LCD_DISPLAYCONTROL | display_settings);
 80015b2:	4b0f      	ldr	r3, [pc, #60]	@ (80015f0 <initLCD+0xa8>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	f043 0308 	orr.w	r3, r3, #8
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff6f 	bl	80014a0 <sendCommand>
		HAL_Delay(2);
 80015c2:	2002      	movs	r0, #2
 80015c4:	f000 fbc2 	bl	8001d4c <HAL_Delay>

		clearLCD();
 80015c8:	f7ff ff9e 	bl	8001508 <clearLCD>
		display_settings =  LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80015cc:	4b08      	ldr	r3, [pc, #32]	@ (80015f0 <initLCD+0xa8>)
 80015ce:	2202      	movs	r2, #2
 80015d0:	701a      	strb	r2, [r3, #0]
		sendCommand(LCD_ENTRYMODESET | display_settings);
 80015d2:	4b07      	ldr	r3, [pc, #28]	@ (80015f0 <initLCD+0xa8>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	f043 0304 	orr.w	r3, r3, #4
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff5f 	bl	80014a0 <sendCommand>
		HAL_Delay(2);
 80015e2:	2002      	movs	r0, #2
 80015e4:	f000 fbb2 	bl	8001d4c <HAL_Delay>
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40020c00 	.word	0x40020c00
 80015f0:	200000de 	.word	0x200000de

080015f4 <setCursor>:


void setCursor(char x, char y)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	460a      	mov	r2, r1
 80015fe:	71fb      	strb	r3, [r7, #7]
 8001600:	4613      	mov	r3, r2
 8001602:	71bb      	strb	r3, [r7, #6]
	uint8_t base = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	73fb      	strb	r3, [r7, #15]

	if(y == 1)
 8001608:	79bb      	ldrb	r3, [r7, #6]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d102      	bne.n	8001614 <setCursor+0x20>
	{
		base = 0x40;
 800160e:	2340      	movs	r3, #64	@ 0x40
 8001610:	73fb      	strb	r3, [r7, #15]
 8001612:	e001      	b.n	8001618 <setCursor+0x24>
	}
	else
	{
		base = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	73fb      	strb	r3, [r7, #15]
	}

	sendCommand( 0x80 | (base + x));
 8001618:	7bfa      	ldrb	r2, [r7, #15]
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	4413      	add	r3, r2
 800161e:	b2db      	uxtb	r3, r3
 8001620:	b25b      	sxtb	r3, r3
 8001622:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001626:	b25b      	sxtb	r3, r3
 8001628:	b2db      	uxtb	r3, r3
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff ff38 	bl	80014a0 <sendCommand>
}
 8001630:	bf00      	nop
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800163c:	f000 fb14 	bl	8001c68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001640:	f000 f81c 	bl	800167c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001644:	f7ff fe0c 	bl	8001260 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001648:	f000 f9d4 	bl	80019f4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800164c:	f000 fa44 	bl	8001ad8 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM4_Init();
 8001650:	f000 f92c 	bl	80018ac <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // easier to wire
 8001654:	213c      	movs	r1, #60	@ 0x3c
 8001656:	4808      	ldr	r0, [pc, #32]	@ (8001678 <main+0x40>)
 8001658:	f002 f966 	bl	8003928 <HAL_TIM_Encoder_Start>

  HAL_Delay(100);
 800165c:	2064      	movs	r0, #100	@ 0x64
 800165e:	f000 fb75 	bl	8001d4c <HAL_Delay>
  initLCD();
 8001662:	f7ff ff71 	bl	8001548 <initLCD>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001666:	f003 fa63 	bl	8004b30 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800166a:	f7ff f8e7 	bl	800083c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800166e:	f003 fa83 	bl	8004b78 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001672:	bf00      	nop
 8001674:	e7fd      	b.n	8001672 <main+0x3a>
 8001676:	bf00      	nop
 8001678:	200000e4 	.word	0x200000e4

0800167c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b094      	sub	sp, #80	@ 0x50
 8001680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001682:	f107 031c 	add.w	r3, r7, #28
 8001686:	2234      	movs	r2, #52	@ 0x34
 8001688:	2100      	movs	r1, #0
 800168a:	4618      	mov	r0, r3
 800168c:	f007 f8ca 	bl	8008824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001690:	f107 0308 	add.w	r3, r7, #8
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a0:	2300      	movs	r3, #0
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	4b29      	ldr	r3, [pc, #164]	@ (800174c <SystemClock_Config+0xd0>)
 80016a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a8:	4a28      	ldr	r2, [pc, #160]	@ (800174c <SystemClock_Config+0xd0>)
 80016aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80016b0:	4b26      	ldr	r3, [pc, #152]	@ (800174c <SystemClock_Config+0xd0>)
 80016b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016bc:	2300      	movs	r3, #0
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	4b23      	ldr	r3, [pc, #140]	@ (8001750 <SystemClock_Config+0xd4>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a22      	ldr	r2, [pc, #136]	@ (8001750 <SystemClock_Config+0xd4>)
 80016c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016ca:	6013      	str	r3, [r2, #0]
 80016cc:	4b20      	ldr	r3, [pc, #128]	@ (8001750 <SystemClock_Config+0xd4>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016d4:	603b      	str	r3, [r7, #0]
 80016d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016d8:	2301      	movs	r3, #1
 80016da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016dc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80016e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e2:	2302      	movs	r3, #2
 80016e4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016ec:	2304      	movs	r3, #4
 80016ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016f0:	23a8      	movs	r3, #168	@ 0xa8
 80016f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016f4:	2302      	movs	r3, #2
 80016f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016f8:	2307      	movs	r3, #7
 80016fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016fc:	2302      	movs	r3, #2
 80016fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001700:	f107 031c 	add.w	r3, r7, #28
 8001704:	4618      	mov	r0, r3
 8001706:	f001 fdcb 	bl	80032a0 <HAL_RCC_OscConfig>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001710:	f000 f820 	bl	8001754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001714:	230f      	movs	r3, #15
 8001716:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001718:	2302      	movs	r3, #2
 800171a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800171c:	2300      	movs	r3, #0
 800171e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001720:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001724:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001726:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800172a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800172c:	f107 0308 	add.w	r3, r7, #8
 8001730:	2105      	movs	r1, #5
 8001732:	4618      	mov	r0, r3
 8001734:	f000 ff40 	bl	80025b8 <HAL_RCC_ClockConfig>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800173e:	f000 f809 	bl	8001754 <Error_Handler>
  }
}
 8001742:	bf00      	nop
 8001744:	3750      	adds	r7, #80	@ 0x50
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800
 8001750:	40007000 	.word	0x40007000

08001754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001758:	b672      	cpsid	i
}
 800175a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <Error_Handler+0x8>

08001760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	4b12      	ldr	r3, [pc, #72]	@ (80017b4 <HAL_MspInit+0x54>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800176e:	4a11      	ldr	r2, [pc, #68]	@ (80017b4 <HAL_MspInit+0x54>)
 8001770:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001774:	6453      	str	r3, [r2, #68]	@ 0x44
 8001776:	4b0f      	ldr	r3, [pc, #60]	@ (80017b4 <HAL_MspInit+0x54>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	603b      	str	r3, [r7, #0]
 8001786:	4b0b      	ldr	r3, [pc, #44]	@ (80017b4 <HAL_MspInit+0x54>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	4a0a      	ldr	r2, [pc, #40]	@ (80017b4 <HAL_MspInit+0x54>)
 800178c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001790:	6413      	str	r3, [r2, #64]	@ 0x40
 8001792:	4b08      	ldr	r3, [pc, #32]	@ (80017b4 <HAL_MspInit+0x54>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800179a:	603b      	str	r3, [r7, #0]
 800179c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	210f      	movs	r1, #15
 80017a2:	f06f 0001 	mvn.w	r0, #1
 80017a6:	f000 fbd0 	bl	8001f4a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800

080017b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <NMI_Handler+0x4>

080017c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c4:	bf00      	nop
 80017c6:	e7fd      	b.n	80017c4 <HardFault_Handler+0x4>

080017c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017cc:	bf00      	nop
 80017ce:	e7fd      	b.n	80017cc <MemManage_Handler+0x4>

080017d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d4:	bf00      	nop
 80017d6:	e7fd      	b.n	80017d4 <BusFault_Handler+0x4>

080017d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017dc:	bf00      	nop
 80017de:	e7fd      	b.n	80017dc <UsageFault_Handler+0x4>

080017e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f2:	f000 fa8b 	bl	8001d0c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80017f6:	f005 fe27 	bl	8007448 <xTaskGetSchedulerState>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d001      	beq.n	8001804 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001800:	f006 fd5a 	bl	80082b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}

08001808 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800180c:	4802      	ldr	r0, [pc, #8]	@ (8001818 <TIM4_IRQHandler+0x10>)
 800180e:	f002 f919 	bl	8003a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200000e4 	.word	0x200000e4

0800181c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001824:	4a14      	ldr	r2, [pc, #80]	@ (8001878 <_sbrk+0x5c>)
 8001826:	4b15      	ldr	r3, [pc, #84]	@ (800187c <_sbrk+0x60>)
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001830:	4b13      	ldr	r3, [pc, #76]	@ (8001880 <_sbrk+0x64>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d102      	bne.n	800183e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001838:	4b11      	ldr	r3, [pc, #68]	@ (8001880 <_sbrk+0x64>)
 800183a:	4a12      	ldr	r2, [pc, #72]	@ (8001884 <_sbrk+0x68>)
 800183c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800183e:	4b10      	ldr	r3, [pc, #64]	@ (8001880 <_sbrk+0x64>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	429a      	cmp	r2, r3
 800184a:	d207      	bcs.n	800185c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800184c:	f006 fff2 	bl	8008834 <__errno>
 8001850:	4603      	mov	r3, r0
 8001852:	220c      	movs	r2, #12
 8001854:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
 800185a:	e009      	b.n	8001870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800185c:	4b08      	ldr	r3, [pc, #32]	@ (8001880 <_sbrk+0x64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001862:	4b07      	ldr	r3, [pc, #28]	@ (8001880 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	4a05      	ldr	r2, [pc, #20]	@ (8001880 <_sbrk+0x64>)
 800186c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800186e:	68fb      	ldr	r3, [r7, #12]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20020000 	.word	0x20020000
 800187c:	00000400 	.word	0x00000400
 8001880:	200000e0 	.word	0x200000e0
 8001884:	200050f8 	.word	0x200050f8

08001888 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800188c:	4b06      	ldr	r3, [pc, #24]	@ (80018a8 <SystemInit+0x20>)
 800188e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001892:	4a05      	ldr	r2, [pc, #20]	@ (80018a8 <SystemInit+0x20>)
 8001894:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001898:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08c      	sub	sp, #48	@ 0x30
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018b2:	f107 030c 	add.w	r3, r7, #12
 80018b6:	2224      	movs	r2, #36	@ 0x24
 80018b8:	2100      	movs	r1, #0
 80018ba:	4618      	mov	r0, r3
 80018bc:	f006 ffb2 	bl	8008824 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018c8:	4b20      	ldr	r3, [pc, #128]	@ (800194c <MX_TIM4_Init+0xa0>)
 80018ca:	4a21      	ldr	r2, [pc, #132]	@ (8001950 <MX_TIM4_Init+0xa4>)
 80018cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80018ce:	4b1f      	ldr	r3, [pc, #124]	@ (800194c <MX_TIM4_Init+0xa0>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d4:	4b1d      	ldr	r3, [pc, #116]	@ (800194c <MX_TIM4_Init+0xa0>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80018da:	4b1c      	ldr	r3, [pc, #112]	@ (800194c <MX_TIM4_Init+0xa0>)
 80018dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018e0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e2:	4b1a      	ldr	r3, [pc, #104]	@ (800194c <MX_TIM4_Init+0xa0>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e8:	4b18      	ldr	r3, [pc, #96]	@ (800194c <MX_TIM4_Init+0xa0>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018ee:	2303      	movs	r3, #3
 80018f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80018f2:	2302      	movs	r3, #2
 80018f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018f6:	2301      	movs	r3, #1
 80018f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001902:	2302      	movs	r3, #2
 8001904:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001906:	2301      	movs	r3, #1
 8001908:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800190a:	2300      	movs	r3, #0
 800190c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001912:	f107 030c 	add.w	r3, r7, #12
 8001916:	4619      	mov	r1, r3
 8001918:	480c      	ldr	r0, [pc, #48]	@ (800194c <MX_TIM4_Init+0xa0>)
 800191a:	f001 ff5f 	bl	80037dc <HAL_TIM_Encoder_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001924:	f7ff ff16 	bl	8001754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001928:	2300      	movs	r3, #0
 800192a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192c:	2300      	movs	r3, #0
 800192e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	4619      	mov	r1, r3
 8001934:	4805      	ldr	r0, [pc, #20]	@ (800194c <MX_TIM4_Init+0xa0>)
 8001936:	f002 fa73 	bl	8003e20 <HAL_TIMEx_MasterConfigSynchronization>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001940:	f7ff ff08 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001944:	bf00      	nop
 8001946:	3730      	adds	r7, #48	@ 0x30
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	200000e4 	.word	0x200000e4
 8001950:	40000800 	.word	0x40000800

08001954 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	@ 0x28
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a1d      	ldr	r2, [pc, #116]	@ (80019e8 <HAL_TIM_Encoder_MspInit+0x94>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d134      	bne.n	80019e0 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	4b1c      	ldr	r3, [pc, #112]	@ (80019ec <HAL_TIM_Encoder_MspInit+0x98>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197e:	4a1b      	ldr	r2, [pc, #108]	@ (80019ec <HAL_TIM_Encoder_MspInit+0x98>)
 8001980:	f043 0304 	orr.w	r3, r3, #4
 8001984:	6413      	str	r3, [r2, #64]	@ 0x40
 8001986:	4b19      	ldr	r3, [pc, #100]	@ (80019ec <HAL_TIM_Encoder_MspInit+0x98>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	4b15      	ldr	r3, [pc, #84]	@ (80019ec <HAL_TIM_Encoder_MspInit+0x98>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	4a14      	ldr	r2, [pc, #80]	@ (80019ec <HAL_TIM_Encoder_MspInit+0x98>)
 800199c:	f043 0308 	orr.w	r3, r3, #8
 80019a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a2:	4b12      	ldr	r3, [pc, #72]	@ (80019ec <HAL_TIM_Encoder_MspInit+0x98>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80019ae:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80019b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019bc:	2300      	movs	r3, #0
 80019be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80019c0:	2302      	movs	r3, #2
 80019c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	4619      	mov	r1, r3
 80019ca:	4809      	ldr	r0, [pc, #36]	@ (80019f0 <HAL_TIM_Encoder_MspInit+0x9c>)
 80019cc:	f000 faf4 	bl	8001fb8 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80019d0:	2200      	movs	r2, #0
 80019d2:	2105      	movs	r1, #5
 80019d4:	201e      	movs	r0, #30
 80019d6:	f000 fab8 	bl	8001f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80019da:	201e      	movs	r0, #30
 80019dc:	f000 fad1 	bl	8001f82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80019e0:	bf00      	nop
 80019e2:	3728      	adds	r7, #40	@ 0x28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40000800 	.word	0x40000800
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40020c00 	.word	0x40020c00

080019f4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019f8:	4b11      	ldr	r3, [pc, #68]	@ (8001a40 <MX_USART3_UART_Init+0x4c>)
 80019fa:	4a12      	ldr	r2, [pc, #72]	@ (8001a44 <MX_USART3_UART_Init+0x50>)
 80019fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019fe:	4b10      	ldr	r3, [pc, #64]	@ (8001a40 <MX_USART3_UART_Init+0x4c>)
 8001a00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a06:	4b0e      	ldr	r3, [pc, #56]	@ (8001a40 <MX_USART3_UART_Init+0x4c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a40 <MX_USART3_UART_Init+0x4c>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a12:	4b0b      	ldr	r3, [pc, #44]	@ (8001a40 <MX_USART3_UART_Init+0x4c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a18:	4b09      	ldr	r3, [pc, #36]	@ (8001a40 <MX_USART3_UART_Init+0x4c>)
 8001a1a:	220c      	movs	r2, #12
 8001a1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a1e:	4b08      	ldr	r3, [pc, #32]	@ (8001a40 <MX_USART3_UART_Init+0x4c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a24:	4b06      	ldr	r3, [pc, #24]	@ (8001a40 <MX_USART3_UART_Init+0x4c>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a2a:	4805      	ldr	r0, [pc, #20]	@ (8001a40 <MX_USART3_UART_Init+0x4c>)
 8001a2c:	f002 fa88 	bl	8003f40 <HAL_UART_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a36:	f7ff fe8d 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	2000012c 	.word	0x2000012c
 8001a44:	40004800 	.word	0x40004800

08001a48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08a      	sub	sp, #40	@ 0x28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a19      	ldr	r2, [pc, #100]	@ (8001acc <HAL_UART_MspInit+0x84>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d12c      	bne.n	8001ac4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	4b18      	ldr	r3, [pc, #96]	@ (8001ad0 <HAL_UART_MspInit+0x88>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a72:	4a17      	ldr	r2, [pc, #92]	@ (8001ad0 <HAL_UART_MspInit+0x88>)
 8001a74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ad0 <HAL_UART_MspInit+0x88>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	4b11      	ldr	r3, [pc, #68]	@ (8001ad0 <HAL_UART_MspInit+0x88>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	4a10      	ldr	r2, [pc, #64]	@ (8001ad0 <HAL_UART_MspInit+0x88>)
 8001a90:	f043 0308 	orr.w	r3, r3, #8
 8001a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a96:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad0 <HAL_UART_MspInit+0x88>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001aa2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ab4:	2307      	movs	r3, #7
 8001ab6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	4619      	mov	r1, r3
 8001abe:	4805      	ldr	r0, [pc, #20]	@ (8001ad4 <HAL_UART_MspInit+0x8c>)
 8001ac0:	f000 fa7a 	bl	8001fb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	3728      	adds	r7, #40	@ 0x28
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40004800 	.word	0x40004800
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40020c00 	.word	0x40020c00

08001ad8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001adc:	4b14      	ldr	r3, [pc, #80]	@ (8001b30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ade:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001ae2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001ae4:	4b12      	ldr	r3, [pc, #72]	@ (8001b30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ae6:	2206      	movs	r2, #6
 8001ae8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001aea:	4b11      	ldr	r3, [pc, #68]	@ (8001b30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001aec:	2202      	movs	r2, #2
 8001aee:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001af0:	4b0f      	ldr	r3, [pc, #60]	@ (8001b30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001af6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001af8:	2202      	movs	r2, #2
 8001afa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001afc:	4b0c      	ldr	r3, [pc, #48]	@ (8001b30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001b02:	4b0b      	ldr	r3, [pc, #44]	@ (8001b30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001b08:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001b0e:	4b08      	ldr	r3, [pc, #32]	@ (8001b30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b10:	2201      	movs	r2, #1
 8001b12:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001b14:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001b1a:	4805      	ldr	r0, [pc, #20]	@ (8001b30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b1c:	f000 fc11 	bl	8002342 <HAL_PCD_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001b26:	f7ff fe15 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000174 	.word	0x20000174

08001b34 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b0a0      	sub	sp, #128	@ 0x80
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b4c:	f107 0310 	add.w	r3, r7, #16
 8001b50:	225c      	movs	r2, #92	@ 0x5c
 8001b52:	2100      	movs	r1, #0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f006 fe65 	bl	8008824 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b62:	d14e      	bne.n	8001c02 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001b64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b68:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b6e:	f107 0310 	add.w	r3, r7, #16
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 fe3a 	bl	80027ec <HAL_RCCEx_PeriphCLKConfig>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8001b7e:	f7ff fde9 	bl	8001754 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	4b21      	ldr	r3, [pc, #132]	@ (8001c0c <HAL_PCD_MspInit+0xd8>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	4a20      	ldr	r2, [pc, #128]	@ (8001c0c <HAL_PCD_MspInit+0xd8>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b92:	4b1e      	ldr	r3, [pc, #120]	@ (8001c0c <HAL_PCD_MspInit+0xd8>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001b9e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001ba2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bac:	2303      	movs	r3, #3
 8001bae:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001bb0:	230a      	movs	r3, #10
 8001bb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4815      	ldr	r0, [pc, #84]	@ (8001c10 <HAL_PCD_MspInit+0xdc>)
 8001bbc:	f000 f9fc 	bl	8001fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001bc0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bc4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001bce:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	480e      	ldr	r0, [pc, #56]	@ (8001c10 <HAL_PCD_MspInit+0xdc>)
 8001bd6:	f000 f9ef 	bl	8001fb8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001bda:	4b0c      	ldr	r3, [pc, #48]	@ (8001c0c <HAL_PCD_MspInit+0xd8>)
 8001bdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bde:	4a0b      	ldr	r2, [pc, #44]	@ (8001c0c <HAL_PCD_MspInit+0xd8>)
 8001be0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001be4:	6353      	str	r3, [r2, #52]	@ 0x34
 8001be6:	2300      	movs	r3, #0
 8001be8:	60bb      	str	r3, [r7, #8]
 8001bea:	4b08      	ldr	r3, [pc, #32]	@ (8001c0c <HAL_PCD_MspInit+0xd8>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bee:	4a07      	ldr	r2, [pc, #28]	@ (8001c0c <HAL_PCD_MspInit+0xd8>)
 8001bf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bf6:	4b05      	ldr	r3, [pc, #20]	@ (8001c0c <HAL_PCD_MspInit+0xd8>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001c02:	bf00      	nop
 8001c04:	3780      	adds	r7, #128	@ 0x80
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40020000 	.word	0x40020000

08001c14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c4c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c18:	f7ff fe36 	bl	8001888 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c1c:	480c      	ldr	r0, [pc, #48]	@ (8001c50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c1e:	490d      	ldr	r1, [pc, #52]	@ (8001c54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c20:	4a0d      	ldr	r2, [pc, #52]	@ (8001c58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c24:	e002      	b.n	8001c2c <LoopCopyDataInit>

08001c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c2a:	3304      	adds	r3, #4

08001c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c30:	d3f9      	bcc.n	8001c26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c32:	4a0a      	ldr	r2, [pc, #40]	@ (8001c5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c34:	4c0a      	ldr	r4, [pc, #40]	@ (8001c60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c38:	e001      	b.n	8001c3e <LoopFillZerobss>

08001c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c3c:	3204      	adds	r2, #4

08001c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c40:	d3fb      	bcc.n	8001c3a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001c42:	f006 fdfd 	bl	8008840 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c46:	f7ff fcf7 	bl	8001638 <main>
  bx  lr    
 8001c4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c54:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001c58:	0800956c 	.word	0x0800956c
  ldr r2, =_sbss
 8001c5c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001c60:	200050f4 	.word	0x200050f4

08001c64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c64:	e7fe      	b.n	8001c64 <ADC_IRQHandler>
	...

08001c68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca8 <HAL_Init+0x40>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a0d      	ldr	r2, [pc, #52]	@ (8001ca8 <HAL_Init+0x40>)
 8001c72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca8 <HAL_Init+0x40>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca8 <HAL_Init+0x40>)
 8001c7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c84:	4b08      	ldr	r3, [pc, #32]	@ (8001ca8 <HAL_Init+0x40>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a07      	ldr	r2, [pc, #28]	@ (8001ca8 <HAL_Init+0x40>)
 8001c8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c90:	2003      	movs	r0, #3
 8001c92:	f000 f94f 	bl	8001f34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c96:	200f      	movs	r0, #15
 8001c98:	f000 f808 	bl	8001cac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c9c:	f7ff fd60 	bl	8001760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40023c00 	.word	0x40023c00

08001cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cb4:	4b12      	ldr	r3, [pc, #72]	@ (8001d00 <HAL_InitTick+0x54>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4b12      	ldr	r3, [pc, #72]	@ (8001d04 <HAL_InitTick+0x58>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 f967 	bl	8001f9e <HAL_SYSTICK_Config>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e00e      	b.n	8001cf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b0f      	cmp	r3, #15
 8001cde:	d80a      	bhi.n	8001cf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce8:	f000 f92f 	bl	8001f4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cec:	4a06      	ldr	r2, [pc, #24]	@ (8001d08 <HAL_InitTick+0x5c>)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	e000      	b.n	8001cf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	2000000c 	.word	0x2000000c
 8001d04:	20000014 	.word	0x20000014
 8001d08:	20000010 	.word	0x20000010

08001d0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d10:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <HAL_IncTick+0x20>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	461a      	mov	r2, r3
 8001d16:	4b06      	ldr	r3, [pc, #24]	@ (8001d30 <HAL_IncTick+0x24>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	4a04      	ldr	r2, [pc, #16]	@ (8001d30 <HAL_IncTick+0x24>)
 8001d1e:	6013      	str	r3, [r2, #0]
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	20000014 	.word	0x20000014
 8001d30:	20000658 	.word	0x20000658

08001d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return uwTick;
 8001d38:	4b03      	ldr	r3, [pc, #12]	@ (8001d48 <HAL_GetTick+0x14>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20000658 	.word	0x20000658

08001d4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d54:	f7ff ffee 	bl	8001d34 <HAL_GetTick>
 8001d58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d64:	d005      	beq.n	8001d72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d66:	4b0a      	ldr	r3, [pc, #40]	@ (8001d90 <HAL_Delay+0x44>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4413      	add	r3, r2
 8001d70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d72:	bf00      	nop
 8001d74:	f7ff ffde 	bl	8001d34 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d8f7      	bhi.n	8001d74 <HAL_Delay+0x28>
  {
  }
}
 8001d84:	bf00      	nop
 8001d86:	bf00      	nop
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000014 	.word	0x20000014

08001d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da4:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001db0:	4013      	ands	r3, r2
 8001db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dc6:	4a04      	ldr	r2, [pc, #16]	@ (8001dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	60d3      	str	r3, [r2, #12]
}
 8001dcc:	bf00      	nop
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de0:	4b04      	ldr	r3, [pc, #16]	@ (8001df4 <__NVIC_GetPriorityGrouping+0x18>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	f003 0307 	and.w	r3, r3, #7
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	db0b      	blt.n	8001e22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	f003 021f 	and.w	r2, r3, #31
 8001e10:	4907      	ldr	r1, [pc, #28]	@ (8001e30 <__NVIC_EnableIRQ+0x38>)
 8001e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e16:	095b      	lsrs	r3, r3, #5
 8001e18:	2001      	movs	r0, #1
 8001e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	e000e100 	.word	0xe000e100

08001e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	6039      	str	r1, [r7, #0]
 8001e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	db0a      	blt.n	8001e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	490c      	ldr	r1, [pc, #48]	@ (8001e80 <__NVIC_SetPriority+0x4c>)
 8001e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e52:	0112      	lsls	r2, r2, #4
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	440b      	add	r3, r1
 8001e58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e5c:	e00a      	b.n	8001e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	4908      	ldr	r1, [pc, #32]	@ (8001e84 <__NVIC_SetPriority+0x50>)
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	3b04      	subs	r3, #4
 8001e6c:	0112      	lsls	r2, r2, #4
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	440b      	add	r3, r1
 8001e72:	761a      	strb	r2, [r3, #24]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000e100 	.word	0xe000e100
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b089      	sub	sp, #36	@ 0x24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	bf28      	it	cs
 8001ea6:	2304      	movcs	r3, #4
 8001ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3304      	adds	r3, #4
 8001eae:	2b06      	cmp	r3, #6
 8001eb0:	d902      	bls.n	8001eb8 <NVIC_EncodePriority+0x30>
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3b03      	subs	r3, #3
 8001eb6:	e000      	b.n	8001eba <NVIC_EncodePriority+0x32>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43da      	mvns	r2, r3
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	401a      	ands	r2, r3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eda:	43d9      	mvns	r1, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee0:	4313      	orrs	r3, r2
         );
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3724      	adds	r7, #36	@ 0x24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
	...

08001ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f00:	d301      	bcc.n	8001f06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f02:	2301      	movs	r3, #1
 8001f04:	e00f      	b.n	8001f26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f06:	4a0a      	ldr	r2, [pc, #40]	@ (8001f30 <SysTick_Config+0x40>)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f0e:	210f      	movs	r1, #15
 8001f10:	f04f 30ff 	mov.w	r0, #4294967295
 8001f14:	f7ff ff8e 	bl	8001e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f18:	4b05      	ldr	r3, [pc, #20]	@ (8001f30 <SysTick_Config+0x40>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f1e:	4b04      	ldr	r3, [pc, #16]	@ (8001f30 <SysTick_Config+0x40>)
 8001f20:	2207      	movs	r2, #7
 8001f22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	e000e010 	.word	0xe000e010

08001f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7ff ff29 	bl	8001d94 <__NVIC_SetPriorityGrouping>
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b086      	sub	sp, #24
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	4603      	mov	r3, r0
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
 8001f56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f5c:	f7ff ff3e 	bl	8001ddc <__NVIC_GetPriorityGrouping>
 8001f60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	68b9      	ldr	r1, [r7, #8]
 8001f66:	6978      	ldr	r0, [r7, #20]
 8001f68:	f7ff ff8e 	bl	8001e88 <NVIC_EncodePriority>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f72:	4611      	mov	r1, r2
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff5d 	bl	8001e34 <__NVIC_SetPriority>
}
 8001f7a:	bf00      	nop
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	4603      	mov	r3, r0
 8001f8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff ff31 	bl	8001df8 <__NVIC_EnableIRQ>
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff ffa2 	bl	8001ef0 <SysTick_Config>
 8001fac:	4603      	mov	r3, r0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b089      	sub	sp, #36	@ 0x24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61fb      	str	r3, [r7, #28]
 8001fd2:	e165      	b.n	80022a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	f040 8154 	bne.w	800229a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d005      	beq.n	800200a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002006:	2b02      	cmp	r3, #2
 8002008:	d130      	bne.n	800206c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	2203      	movs	r2, #3
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4013      	ands	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4313      	orrs	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002040:	2201      	movs	r2, #1
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4013      	ands	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	091b      	lsrs	r3, r3, #4
 8002056:	f003 0201 	and.w	r2, r3, #1
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4313      	orrs	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 0303 	and.w	r3, r3, #3
 8002074:	2b03      	cmp	r3, #3
 8002076:	d017      	beq.n	80020a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	2203      	movs	r2, #3
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 0303 	and.w	r3, r3, #3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d123      	bne.n	80020fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	08da      	lsrs	r2, r3, #3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3208      	adds	r2, #8
 80020bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	220f      	movs	r2, #15
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	691a      	ldr	r2, [r3, #16]
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	08da      	lsrs	r2, r3, #3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	3208      	adds	r2, #8
 80020f6:	69b9      	ldr	r1, [r7, #24]
 80020f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	2203      	movs	r2, #3
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 0203 	and.w	r2, r3, #3
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 80ae 	beq.w	800229a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	4b5d      	ldr	r3, [pc, #372]	@ (80022b8 <HAL_GPIO_Init+0x300>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002146:	4a5c      	ldr	r2, [pc, #368]	@ (80022b8 <HAL_GPIO_Init+0x300>)
 8002148:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800214c:	6453      	str	r3, [r2, #68]	@ 0x44
 800214e:	4b5a      	ldr	r3, [pc, #360]	@ (80022b8 <HAL_GPIO_Init+0x300>)
 8002150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002152:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800215a:	4a58      	ldr	r2, [pc, #352]	@ (80022bc <HAL_GPIO_Init+0x304>)
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	089b      	lsrs	r3, r3, #2
 8002160:	3302      	adds	r3, #2
 8002162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	220f      	movs	r2, #15
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43db      	mvns	r3, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4013      	ands	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a4f      	ldr	r2, [pc, #316]	@ (80022c0 <HAL_GPIO_Init+0x308>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d025      	beq.n	80021d2 <HAL_GPIO_Init+0x21a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a4e      	ldr	r2, [pc, #312]	@ (80022c4 <HAL_GPIO_Init+0x30c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d01f      	beq.n	80021ce <HAL_GPIO_Init+0x216>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a4d      	ldr	r2, [pc, #308]	@ (80022c8 <HAL_GPIO_Init+0x310>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d019      	beq.n	80021ca <HAL_GPIO_Init+0x212>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a4c      	ldr	r2, [pc, #304]	@ (80022cc <HAL_GPIO_Init+0x314>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d013      	beq.n	80021c6 <HAL_GPIO_Init+0x20e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a4b      	ldr	r2, [pc, #300]	@ (80022d0 <HAL_GPIO_Init+0x318>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d00d      	beq.n	80021c2 <HAL_GPIO_Init+0x20a>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a4a      	ldr	r2, [pc, #296]	@ (80022d4 <HAL_GPIO_Init+0x31c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d007      	beq.n	80021be <HAL_GPIO_Init+0x206>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a49      	ldr	r2, [pc, #292]	@ (80022d8 <HAL_GPIO_Init+0x320>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d101      	bne.n	80021ba <HAL_GPIO_Init+0x202>
 80021b6:	2306      	movs	r3, #6
 80021b8:	e00c      	b.n	80021d4 <HAL_GPIO_Init+0x21c>
 80021ba:	2307      	movs	r3, #7
 80021bc:	e00a      	b.n	80021d4 <HAL_GPIO_Init+0x21c>
 80021be:	2305      	movs	r3, #5
 80021c0:	e008      	b.n	80021d4 <HAL_GPIO_Init+0x21c>
 80021c2:	2304      	movs	r3, #4
 80021c4:	e006      	b.n	80021d4 <HAL_GPIO_Init+0x21c>
 80021c6:	2303      	movs	r3, #3
 80021c8:	e004      	b.n	80021d4 <HAL_GPIO_Init+0x21c>
 80021ca:	2302      	movs	r3, #2
 80021cc:	e002      	b.n	80021d4 <HAL_GPIO_Init+0x21c>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <HAL_GPIO_Init+0x21c>
 80021d2:	2300      	movs	r3, #0
 80021d4:	69fa      	ldr	r2, [r7, #28]
 80021d6:	f002 0203 	and.w	r2, r2, #3
 80021da:	0092      	lsls	r2, r2, #2
 80021dc:	4093      	lsls	r3, r2
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021e4:	4935      	ldr	r1, [pc, #212]	@ (80022bc <HAL_GPIO_Init+0x304>)
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	089b      	lsrs	r3, r3, #2
 80021ea:	3302      	adds	r3, #2
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021f2:	4b3a      	ldr	r3, [pc, #232]	@ (80022dc <HAL_GPIO_Init+0x324>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	43db      	mvns	r3, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4013      	ands	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002216:	4a31      	ldr	r2, [pc, #196]	@ (80022dc <HAL_GPIO_Init+0x324>)
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800221c:	4b2f      	ldr	r3, [pc, #188]	@ (80022dc <HAL_GPIO_Init+0x324>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	43db      	mvns	r3, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002240:	4a26      	ldr	r2, [pc, #152]	@ (80022dc <HAL_GPIO_Init+0x324>)
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002246:	4b25      	ldr	r3, [pc, #148]	@ (80022dc <HAL_GPIO_Init+0x324>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800226a:	4a1c      	ldr	r2, [pc, #112]	@ (80022dc <HAL_GPIO_Init+0x324>)
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002270:	4b1a      	ldr	r3, [pc, #104]	@ (80022dc <HAL_GPIO_Init+0x324>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	43db      	mvns	r3, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4013      	ands	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002294:	4a11      	ldr	r2, [pc, #68]	@ (80022dc <HAL_GPIO_Init+0x324>)
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3301      	adds	r3, #1
 800229e:	61fb      	str	r3, [r7, #28]
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	2b0f      	cmp	r3, #15
 80022a4:	f67f ae96 	bls.w	8001fd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022a8:	bf00      	nop
 80022aa:	bf00      	nop
 80022ac:	3724      	adds	r7, #36	@ 0x24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40013800 	.word	0x40013800
 80022c0:	40020000 	.word	0x40020000
 80022c4:	40020400 	.word	0x40020400
 80022c8:	40020800 	.word	0x40020800
 80022cc:	40020c00 	.word	0x40020c00
 80022d0:	40021000 	.word	0x40021000
 80022d4:	40021400 	.word	0x40021400
 80022d8:	40021800 	.word	0x40021800
 80022dc:	40013c00 	.word	0x40013c00

080022e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	460b      	mov	r3, r1
 80022ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691a      	ldr	r2, [r3, #16]
 80022f0:	887b      	ldrh	r3, [r7, #2]
 80022f2:	4013      	ands	r3, r2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d002      	beq.n	80022fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022f8:	2301      	movs	r3, #1
 80022fa:	73fb      	strb	r3, [r7, #15]
 80022fc:	e001      	b.n	8002302 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022fe:	2300      	movs	r3, #0
 8002300:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002302:	7bfb      	ldrb	r3, [r7, #15]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	460b      	mov	r3, r1
 800231a:	807b      	strh	r3, [r7, #2]
 800231c:	4613      	mov	r3, r2
 800231e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002320:	787b      	ldrb	r3, [r7, #1]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002326:	887a      	ldrh	r2, [r7, #2]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800232c:	e003      	b.n	8002336 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800232e:	887b      	ldrh	r3, [r7, #2]
 8002330:	041a      	lsls	r2, r3, #16
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	619a      	str	r2, [r3, #24]
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b086      	sub	sp, #24
 8002346:	af02      	add	r7, sp, #8
 8002348:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e108      	b.n	8002566 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d106      	bne.n	8002374 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff fbe0 	bl	8001b34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2203      	movs	r2, #3
 8002378:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002382:	d102      	bne.n	800238a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f002 f8fe 	bl	8004590 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6818      	ldr	r0, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	7c1a      	ldrb	r2, [r3, #16]
 800239c:	f88d 2000 	strb.w	r2, [sp]
 80023a0:	3304      	adds	r3, #4
 80023a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023a4:	f002 f890 	bl	80044c8 <USB_CoreInit>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d005      	beq.n	80023ba <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2202      	movs	r2, #2
 80023b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e0d5      	b.n	8002566 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2100      	movs	r1, #0
 80023c0:	4618      	mov	r0, r3
 80023c2:	f002 f8f6 	bl	80045b2 <USB_SetCurrentMode>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2202      	movs	r2, #2
 80023d0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e0c6      	b.n	8002566 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023d8:	2300      	movs	r3, #0
 80023da:	73fb      	strb	r3, [r7, #15]
 80023dc:	e04a      	b.n	8002474 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023de:	7bfa      	ldrb	r2, [r7, #15]
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	4613      	mov	r3, r2
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	4413      	add	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	440b      	add	r3, r1
 80023ec:	3315      	adds	r3, #21
 80023ee:	2201      	movs	r2, #1
 80023f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023f2:	7bfa      	ldrb	r2, [r7, #15]
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	4413      	add	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	440b      	add	r3, r1
 8002400:	3314      	adds	r3, #20
 8002402:	7bfa      	ldrb	r2, [r7, #15]
 8002404:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002406:	7bfa      	ldrb	r2, [r7, #15]
 8002408:	7bfb      	ldrb	r3, [r7, #15]
 800240a:	b298      	uxth	r0, r3
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	4413      	add	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	332e      	adds	r3, #46	@ 0x2e
 800241a:	4602      	mov	r2, r0
 800241c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800241e:	7bfa      	ldrb	r2, [r7, #15]
 8002420:	6879      	ldr	r1, [r7, #4]
 8002422:	4613      	mov	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	4413      	add	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	440b      	add	r3, r1
 800242c:	3318      	adds	r3, #24
 800242e:	2200      	movs	r2, #0
 8002430:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002432:	7bfa      	ldrb	r2, [r7, #15]
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	4613      	mov	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	4413      	add	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	440b      	add	r3, r1
 8002440:	331c      	adds	r3, #28
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002446:	7bfa      	ldrb	r2, [r7, #15]
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	4413      	add	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	440b      	add	r3, r1
 8002454:	3320      	adds	r3, #32
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800245a:	7bfa      	ldrb	r2, [r7, #15]
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	4413      	add	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	3324      	adds	r3, #36	@ 0x24
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800246e:	7bfb      	ldrb	r3, [r7, #15]
 8002470:	3301      	adds	r3, #1
 8002472:	73fb      	strb	r3, [r7, #15]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	791b      	ldrb	r3, [r3, #4]
 8002478:	7bfa      	ldrb	r2, [r7, #15]
 800247a:	429a      	cmp	r2, r3
 800247c:	d3af      	bcc.n	80023de <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800247e:	2300      	movs	r3, #0
 8002480:	73fb      	strb	r3, [r7, #15]
 8002482:	e044      	b.n	800250e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002484:	7bfa      	ldrb	r2, [r7, #15]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	4413      	add	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002496:	2200      	movs	r2, #0
 8002498:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800249a:	7bfa      	ldrb	r2, [r7, #15]
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	4413      	add	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	440b      	add	r3, r1
 80024a8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80024ac:	7bfa      	ldrb	r2, [r7, #15]
 80024ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024b0:	7bfa      	ldrb	r2, [r7, #15]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	4413      	add	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80024c2:	2200      	movs	r2, #0
 80024c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024c6:	7bfa      	ldrb	r2, [r7, #15]
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	4613      	mov	r3, r2
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	4413      	add	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	440b      	add	r3, r1
 80024d4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024dc:	7bfa      	ldrb	r2, [r7, #15]
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	4413      	add	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024f2:	7bfa      	ldrb	r2, [r7, #15]
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	4613      	mov	r3, r2
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	4413      	add	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	440b      	add	r3, r1
 8002500:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002508:	7bfb      	ldrb	r3, [r7, #15]
 800250a:	3301      	adds	r3, #1
 800250c:	73fb      	strb	r3, [r7, #15]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	791b      	ldrb	r3, [r3, #4]
 8002512:	7bfa      	ldrb	r2, [r7, #15]
 8002514:	429a      	cmp	r2, r3
 8002516:	d3b5      	bcc.n	8002484 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6818      	ldr	r0, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	7c1a      	ldrb	r2, [r3, #16]
 8002520:	f88d 2000 	strb.w	r2, [sp]
 8002524:	3304      	adds	r3, #4
 8002526:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002528:	f002 f890 	bl	800464c <USB_DevInit>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d005      	beq.n	800253e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2202      	movs	r2, #2
 8002536:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e013      	b.n	8002566 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	7b1b      	ldrb	r3, [r3, #12]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d102      	bne.n	800255a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 f80a 	bl	800256e <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f002 fa4b 	bl	80049fa <USB_DevDisconnect>

  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800256e:	b480      	push	{r7}
 8002570:	b085      	sub	sp, #20
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800259c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025a0:	f043 0303 	orr.w	r3, r3, #3
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
	...

080025b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0cc      	b.n	8002766 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025cc:	4b68      	ldr	r3, [pc, #416]	@ (8002770 <HAL_RCC_ClockConfig+0x1b8>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 030f 	and.w	r3, r3, #15
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d90c      	bls.n	80025f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025da:	4b65      	ldr	r3, [pc, #404]	@ (8002770 <HAL_RCC_ClockConfig+0x1b8>)
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e2:	4b63      	ldr	r3, [pc, #396]	@ (8002770 <HAL_RCC_ClockConfig+0x1b8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d001      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e0b8      	b.n	8002766 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d020      	beq.n	8002642 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b00      	cmp	r3, #0
 800260a:	d005      	beq.n	8002618 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800260c:	4b59      	ldr	r3, [pc, #356]	@ (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	4a58      	ldr	r2, [pc, #352]	@ (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002616:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0308 	and.w	r3, r3, #8
 8002620:	2b00      	cmp	r3, #0
 8002622:	d005      	beq.n	8002630 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002624:	4b53      	ldr	r3, [pc, #332]	@ (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	4a52      	ldr	r2, [pc, #328]	@ (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800262e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002630:	4b50      	ldr	r3, [pc, #320]	@ (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	494d      	ldr	r1, [pc, #308]	@ (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 800263e:	4313      	orrs	r3, r2
 8002640:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d044      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d107      	bne.n	8002666 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002656:	4b47      	ldr	r3, [pc, #284]	@ (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d119      	bne.n	8002696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e07f      	b.n	8002766 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b02      	cmp	r3, #2
 800266c:	d003      	beq.n	8002676 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002672:	2b03      	cmp	r3, #3
 8002674:	d107      	bne.n	8002686 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002676:	4b3f      	ldr	r3, [pc, #252]	@ (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d109      	bne.n	8002696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e06f      	b.n	8002766 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002686:	4b3b      	ldr	r3, [pc, #236]	@ (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e067      	b.n	8002766 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002696:	4b37      	ldr	r3, [pc, #220]	@ (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f023 0203 	bic.w	r2, r3, #3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	4934      	ldr	r1, [pc, #208]	@ (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026a8:	f7ff fb44 	bl	8001d34 <HAL_GetTick>
 80026ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ae:	e00a      	b.n	80026c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b0:	f7ff fb40 	bl	8001d34 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026be:	4293      	cmp	r3, r2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e04f      	b.n	8002766 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c6:	4b2b      	ldr	r3, [pc, #172]	@ (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 020c 	and.w	r2, r3, #12
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d1eb      	bne.n	80026b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026d8:	4b25      	ldr	r3, [pc, #148]	@ (8002770 <HAL_RCC_ClockConfig+0x1b8>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 030f 	and.w	r3, r3, #15
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d20c      	bcs.n	8002700 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e6:	4b22      	ldr	r3, [pc, #136]	@ (8002770 <HAL_RCC_ClockConfig+0x1b8>)
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ee:	4b20      	ldr	r3, [pc, #128]	@ (8002770 <HAL_RCC_ClockConfig+0x1b8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d001      	beq.n	8002700 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e032      	b.n	8002766 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	d008      	beq.n	800271e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800270c:	4b19      	ldr	r3, [pc, #100]	@ (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4916      	ldr	r1, [pc, #88]	@ (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 800271a:	4313      	orrs	r3, r2
 800271c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	2b00      	cmp	r3, #0
 8002728:	d009      	beq.n	800273e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800272a:	4b12      	ldr	r3, [pc, #72]	@ (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	490e      	ldr	r1, [pc, #56]	@ (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 800273a:	4313      	orrs	r3, r2
 800273c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800273e:	f000 fb7f 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
 8002742:	4602      	mov	r2, r0
 8002744:	4b0b      	ldr	r3, [pc, #44]	@ (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	091b      	lsrs	r3, r3, #4
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	490a      	ldr	r1, [pc, #40]	@ (8002778 <HAL_RCC_ClockConfig+0x1c0>)
 8002750:	5ccb      	ldrb	r3, [r1, r3]
 8002752:	fa22 f303 	lsr.w	r3, r2, r3
 8002756:	4a09      	ldr	r2, [pc, #36]	@ (800277c <HAL_RCC_ClockConfig+0x1c4>)
 8002758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800275a:	4b09      	ldr	r3, [pc, #36]	@ (8002780 <HAL_RCC_ClockConfig+0x1c8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff faa4 	bl	8001cac <HAL_InitTick>

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40023c00 	.word	0x40023c00
 8002774:	40023800 	.word	0x40023800
 8002778:	08009510 	.word	0x08009510
 800277c:	2000000c 	.word	0x2000000c
 8002780:	20000010 	.word	0x20000010

08002784 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002788:	4b03      	ldr	r3, [pc, #12]	@ (8002798 <HAL_RCC_GetHCLKFreq+0x14>)
 800278a:	681b      	ldr	r3, [r3, #0]
}
 800278c:	4618      	mov	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	2000000c 	.word	0x2000000c

0800279c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027a0:	f7ff fff0 	bl	8002784 <HAL_RCC_GetHCLKFreq>
 80027a4:	4602      	mov	r2, r0
 80027a6:	4b05      	ldr	r3, [pc, #20]	@ (80027bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	0a9b      	lsrs	r3, r3, #10
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	4903      	ldr	r1, [pc, #12]	@ (80027c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027b2:	5ccb      	ldrb	r3, [r1, r3]
 80027b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40023800 	.word	0x40023800
 80027c0:	08009520 	.word	0x08009520

080027c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027c8:	f7ff ffdc 	bl	8002784 <HAL_RCC_GetHCLKFreq>
 80027cc:	4602      	mov	r2, r0
 80027ce:	4b05      	ldr	r3, [pc, #20]	@ (80027e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	0b5b      	lsrs	r3, r3, #13
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	4903      	ldr	r1, [pc, #12]	@ (80027e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027da:	5ccb      	ldrb	r3, [r1, r3]
 80027dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40023800 	.word	0x40023800
 80027e8:	08009520 	.word	0x08009520

080027ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08c      	sub	sp, #48	@ 0x30
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002808:	2300      	movs	r3, #0
 800280a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800280c:	2300      	movs	r3, #0
 800280e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	d010      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002824:	4b6f      	ldr	r3, [pc, #444]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002826:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800282a:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002832:	496c      	ldr	r1, [pc, #432]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002834:	4313      	orrs	r3, r2
 8002836:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002842:	2301      	movs	r3, #1
 8002844:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d010      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002852:	4b64      	ldr	r3, [pc, #400]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002854:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002858:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002860:	4960      	ldr	r1, [pc, #384]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002870:	2301      	movs	r3, #1
 8002872:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b00      	cmp	r3, #0
 800287e:	d017      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002880:	4b58      	ldr	r3, [pc, #352]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002882:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002886:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288e:	4955      	ldr	r1, [pc, #340]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800289e:	d101      	bne.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80028a0:	2301      	movs	r3, #1
 80028a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80028ac:	2301      	movs	r3, #1
 80028ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d017      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028bc:	4b49      	ldr	r3, [pc, #292]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028c2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ca:	4946      	ldr	r1, [pc, #280]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028da:	d101      	bne.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80028dc:	2301      	movs	r3, #1
 80028de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80028e8:	2301      	movs	r3, #1
 80028ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0320 	and.w	r3, r3, #32
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 808a 	beq.w	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	60bb      	str	r3, [r7, #8]
 80028fe:	4b39      	ldr	r3, [pc, #228]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002902:	4a38      	ldr	r2, [pc, #224]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002908:	6413      	str	r3, [r2, #64]	@ 0x40
 800290a:	4b36      	ldr	r3, [pc, #216]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002912:	60bb      	str	r3, [r7, #8]
 8002914:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002916:	4b34      	ldr	r3, [pc, #208]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a33      	ldr	r2, [pc, #204]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800291c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002920:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002922:	f7ff fa07 	bl	8001d34 <HAL_GetTick>
 8002926:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002928:	e008      	b.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800292a:	f7ff fa03 	bl	8001d34 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d901      	bls.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e278      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800293c:	4b2a      	ldr	r3, [pc, #168]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0f0      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002948:	4b26      	ldr	r3, [pc, #152]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800294a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800294c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002950:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d02f      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002960:	6a3a      	ldr	r2, [r7, #32]
 8002962:	429a      	cmp	r2, r3
 8002964:	d028      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002966:	4b1f      	ldr	r3, [pc, #124]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800296e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002970:	4b1e      	ldr	r3, [pc, #120]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002972:	2201      	movs	r2, #1
 8002974:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002976:	4b1d      	ldr	r3, [pc, #116]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800297c:	4a19      	ldr	r2, [pc, #100]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800297e:	6a3b      	ldr	r3, [r7, #32]
 8002980:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002982:	4b18      	ldr	r3, [pc, #96]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b01      	cmp	r3, #1
 800298c:	d114      	bne.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800298e:	f7ff f9d1 	bl	8001d34 <HAL_GetTick>
 8002992:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002994:	e00a      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002996:	f7ff f9cd 	bl	8001d34 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d901      	bls.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e240      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ac:	4b0d      	ldr	r3, [pc, #52]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0ee      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80029c4:	d114      	bne.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80029c6:	4b07      	ldr	r3, [pc, #28]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80029d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029da:	4902      	ldr	r1, [pc, #8]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	608b      	str	r3, [r1, #8]
 80029e0:	e00c      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x210>
 80029e2:	bf00      	nop
 80029e4:	40023800 	.word	0x40023800
 80029e8:	40007000 	.word	0x40007000
 80029ec:	42470e40 	.word	0x42470e40
 80029f0:	4b4a      	ldr	r3, [pc, #296]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	4a49      	ldr	r2, [pc, #292]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029f6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80029fa:	6093      	str	r3, [r2, #8]
 80029fc:	4b47      	ldr	r3, [pc, #284]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a08:	4944      	ldr	r1, [pc, #272]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0310 	and.w	r3, r3, #16
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d004      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8002a20:	4b3f      	ldr	r3, [pc, #252]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002a22:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00a      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002a30:	4b3a      	ldr	r3, [pc, #232]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a36:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a3e:	4937      	ldr	r1, [pc, #220]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a52:	4b32      	ldr	r3, [pc, #200]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a58:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a60:	492e      	ldr	r1, [pc, #184]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d011      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a74:	4b29      	ldr	r3, [pc, #164]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a7a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a82:	4926      	ldr	r1, [pc, #152]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a92:	d101      	bne.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002a94:	2301      	movs	r3, #1
 8002a96:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00a      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002aaa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab2:	491a      	ldr	r1, [pc, #104]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d011      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002ac6:	4b15      	ldr	r3, [pc, #84]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002acc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ad4:	4911      	ldr	r1, [pc, #68]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ae0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ae4:	d101      	bne.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d005      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002af8:	f040 80ff 	bne.w	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002afc:	4b09      	ldr	r3, [pc, #36]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b02:	f7ff f917 	bl	8001d34 <HAL_GetTick>
 8002b06:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b08:	e00e      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b0a:	f7ff f913 	bl	8001d34 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d907      	bls.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e188      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	424711e0 	.word	0x424711e0
 8002b24:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b28:	4b7e      	ldr	r3, [pc, #504]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1ea      	bne.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d009      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d028      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d124      	bne.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002b5c:	4b71      	ldr	r3, [pc, #452]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b62:	0c1b      	lsrs	r3, r3, #16
 8002b64:	f003 0303 	and.w	r3, r3, #3
 8002b68:	3301      	adds	r3, #1
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b6e:	4b6d      	ldr	r3, [pc, #436]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b74:	0e1b      	lsrs	r3, r3, #24
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	019b      	lsls	r3, r3, #6
 8002b86:	431a      	orrs	r2, r3
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	085b      	lsrs	r3, r3, #1
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	041b      	lsls	r3, r3, #16
 8002b90:	431a      	orrs	r2, r3
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	061b      	lsls	r3, r3, #24
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	071b      	lsls	r3, r3, #28
 8002b9e:	4961      	ldr	r1, [pc, #388]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d004      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bba:	d00a      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d035      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bcc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bd0:	d130      	bne.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002bd2:	4b54      	ldr	r3, [pc, #336]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bd8:	0c1b      	lsrs	r3, r3, #16
 8002bda:	f003 0303 	and.w	r3, r3, #3
 8002bde:	3301      	adds	r3, #1
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002be4:	4b4f      	ldr	r3, [pc, #316]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002be6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bea:	0f1b      	lsrs	r3, r3, #28
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	019b      	lsls	r3, r3, #6
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	085b      	lsrs	r3, r3, #1
 8002c02:	3b01      	subs	r3, #1
 8002c04:	041b      	lsls	r3, r3, #16
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	061b      	lsls	r3, r3, #24
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	071b      	lsls	r3, r3, #28
 8002c14:	4943      	ldr	r1, [pc, #268]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c1c:	4b41      	ldr	r3, [pc, #260]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c22:	f023 021f 	bic.w	r2, r3, #31
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	493d      	ldr	r1, [pc, #244]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d029      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c48:	d124      	bne.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002c4a:	4b36      	ldr	r3, [pc, #216]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c50:	0c1b      	lsrs	r3, r3, #16
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	3301      	adds	r3, #1
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c5c:	4b31      	ldr	r3, [pc, #196]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c62:	0f1b      	lsrs	r3, r3, #28
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	019b      	lsls	r3, r3, #6
 8002c74:	431a      	orrs	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	085b      	lsrs	r3, r3, #1
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	041b      	lsls	r3, r3, #16
 8002c80:	431a      	orrs	r2, r3
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	061b      	lsls	r3, r3, #24
 8002c86:	431a      	orrs	r2, r3
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	071b      	lsls	r3, r3, #28
 8002c8c:	4925      	ldr	r1, [pc, #148]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d016      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	019b      	lsls	r3, r3, #6
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	085b      	lsrs	r3, r3, #1
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	041b      	lsls	r3, r3, #16
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	061b      	lsls	r3, r3, #24
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	071b      	lsls	r3, r3, #28
 8002cc6:	4917      	ldr	r1, [pc, #92]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002cce:	4b16      	ldr	r3, [pc, #88]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002cd4:	f7ff f82e 	bl	8001d34 <HAL_GetTick>
 8002cd8:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002cdc:	f7ff f82a 	bl	8001d34 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e09f      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cee:	4b0d      	ldr	r3, [pc, #52]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0f0      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8002cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	f040 8095 	bne.w	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002d02:	4b0a      	ldr	r3, [pc, #40]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d08:	f7ff f814 	bl	8001d34 <HAL_GetTick>
 8002d0c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d0e:	e00f      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d10:	f7ff f810 	bl	8001d34 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d908      	bls.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e085      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002d22:	bf00      	nop
 8002d24:	40023800 	.word	0x40023800
 8002d28:	42470068 	.word	0x42470068
 8002d2c:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d30:	4b41      	ldr	r3, [pc, #260]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d3c:	d0e8      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0304 	and.w	r3, r3, #4
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d009      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d02b      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d127      	bne.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002d66:	4b34      	ldr	r3, [pc, #208]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d6c:	0c1b      	lsrs	r3, r3, #16
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	3301      	adds	r3, #1
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	699a      	ldr	r2, [r3, #24]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	019b      	lsls	r3, r3, #6
 8002d82:	431a      	orrs	r2, r3
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	085b      	lsrs	r3, r3, #1
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	041b      	lsls	r3, r3, #16
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d92:	061b      	lsls	r3, r3, #24
 8002d94:	4928      	ldr	r1, [pc, #160]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002d9c:	4b26      	ldr	r3, [pc, #152]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002da2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002daa:	3b01      	subs	r3, #1
 8002dac:	021b      	lsls	r3, r3, #8
 8002dae:	4922      	ldr	r1, [pc, #136]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d01d      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002dca:	d118      	bne.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002dcc:	4b1a      	ldr	r3, [pc, #104]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dd2:	0e1b      	lsrs	r3, r3, #24
 8002dd4:	f003 030f 	and.w	r3, r3, #15
 8002dd8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699a      	ldr	r2, [r3, #24]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	019b      	lsls	r3, r3, #6
 8002de4:	431a      	orrs	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	085b      	lsrs	r3, r3, #1
 8002dec:	3b01      	subs	r3, #1
 8002dee:	041b      	lsls	r3, r3, #16
 8002df0:	431a      	orrs	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	061b      	lsls	r3, r3, #24
 8002df6:	4910      	ldr	r1, [pc, #64]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002e00:	2201      	movs	r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e04:	f7fe ff96 	bl	8001d34 <HAL_GetTick>
 8002e08:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e0c:	f7fe ff92 	bl	8001d34 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e007      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e1e:	4b06      	ldr	r3, [pc, #24]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e2a:	d1ef      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3730      	adds	r7, #48	@ 0x30
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	42470070 	.word	0x42470070

08002e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e44:	b0ae      	sub	sp, #184	@ 0xb8
 8002e46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e66:	4bcb      	ldr	r3, [pc, #812]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 030c 	and.w	r3, r3, #12
 8002e6e:	2b0c      	cmp	r3, #12
 8002e70:	f200 8206 	bhi.w	8003280 <HAL_RCC_GetSysClockFreq+0x440>
 8002e74:	a201      	add	r2, pc, #4	@ (adr r2, 8002e7c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7a:	bf00      	nop
 8002e7c:	08002eb1 	.word	0x08002eb1
 8002e80:	08003281 	.word	0x08003281
 8002e84:	08003281 	.word	0x08003281
 8002e88:	08003281 	.word	0x08003281
 8002e8c:	08002eb9 	.word	0x08002eb9
 8002e90:	08003281 	.word	0x08003281
 8002e94:	08003281 	.word	0x08003281
 8002e98:	08003281 	.word	0x08003281
 8002e9c:	08002ec1 	.word	0x08002ec1
 8002ea0:	08003281 	.word	0x08003281
 8002ea4:	08003281 	.word	0x08003281
 8002ea8:	08003281 	.word	0x08003281
 8002eac:	080030b1 	.word	0x080030b1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002eb0:	4bb9      	ldr	r3, [pc, #740]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x358>)
 8002eb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002eb6:	e1e7      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eb8:	4bb8      	ldr	r3, [pc, #736]	@ (800319c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002eba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002ebe:	e1e3      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ec0:	4bb4      	ldr	r3, [pc, #720]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ec8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ecc:	4bb1      	ldr	r3, [pc, #708]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d071      	beq.n	8002fbc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ed8:	4bae      	ldr	r3, [pc, #696]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	099b      	lsrs	r3, r3, #6
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ee4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002ee8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ef0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002efa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002efe:	4622      	mov	r2, r4
 8002f00:	462b      	mov	r3, r5
 8002f02:	f04f 0000 	mov.w	r0, #0
 8002f06:	f04f 0100 	mov.w	r1, #0
 8002f0a:	0159      	lsls	r1, r3, #5
 8002f0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f10:	0150      	lsls	r0, r2, #5
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	4621      	mov	r1, r4
 8002f18:	1a51      	subs	r1, r2, r1
 8002f1a:	6439      	str	r1, [r7, #64]	@ 0x40
 8002f1c:	4629      	mov	r1, r5
 8002f1e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f22:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f24:	f04f 0200 	mov.w	r2, #0
 8002f28:	f04f 0300 	mov.w	r3, #0
 8002f2c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002f30:	4649      	mov	r1, r9
 8002f32:	018b      	lsls	r3, r1, #6
 8002f34:	4641      	mov	r1, r8
 8002f36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f3a:	4641      	mov	r1, r8
 8002f3c:	018a      	lsls	r2, r1, #6
 8002f3e:	4641      	mov	r1, r8
 8002f40:	1a51      	subs	r1, r2, r1
 8002f42:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002f44:	4649      	mov	r1, r9
 8002f46:	eb63 0301 	sbc.w	r3, r3, r1
 8002f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002f58:	4649      	mov	r1, r9
 8002f5a:	00cb      	lsls	r3, r1, #3
 8002f5c:	4641      	mov	r1, r8
 8002f5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f62:	4641      	mov	r1, r8
 8002f64:	00ca      	lsls	r2, r1, #3
 8002f66:	4610      	mov	r0, r2
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	4622      	mov	r2, r4
 8002f6e:	189b      	adds	r3, r3, r2
 8002f70:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f72:	462b      	mov	r3, r5
 8002f74:	460a      	mov	r2, r1
 8002f76:	eb42 0303 	adc.w	r3, r2, r3
 8002f7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f88:	4629      	mov	r1, r5
 8002f8a:	024b      	lsls	r3, r1, #9
 8002f8c:	4621      	mov	r1, r4
 8002f8e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f92:	4621      	mov	r1, r4
 8002f94:	024a      	lsls	r2, r1, #9
 8002f96:	4610      	mov	r0, r2
 8002f98:	4619      	mov	r1, r3
 8002f9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002fa4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002fa8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002fac:	f7fd f980 	bl	80002b0 <__aeabi_uldivmod>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002fba:	e067      	b.n	800308c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fbc:	4b75      	ldr	r3, [pc, #468]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	099b      	lsrs	r3, r3, #6
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002fc8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002fcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fd4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002fda:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002fde:	4622      	mov	r2, r4
 8002fe0:	462b      	mov	r3, r5
 8002fe2:	f04f 0000 	mov.w	r0, #0
 8002fe6:	f04f 0100 	mov.w	r1, #0
 8002fea:	0159      	lsls	r1, r3, #5
 8002fec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ff0:	0150      	lsls	r0, r2, #5
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	4621      	mov	r1, r4
 8002ff8:	1a51      	subs	r1, r2, r1
 8002ffa:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002ffc:	4629      	mov	r1, r5
 8002ffe:	eb63 0301 	sbc.w	r3, r3, r1
 8003002:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003010:	4649      	mov	r1, r9
 8003012:	018b      	lsls	r3, r1, #6
 8003014:	4641      	mov	r1, r8
 8003016:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800301a:	4641      	mov	r1, r8
 800301c:	018a      	lsls	r2, r1, #6
 800301e:	4641      	mov	r1, r8
 8003020:	ebb2 0a01 	subs.w	sl, r2, r1
 8003024:	4649      	mov	r1, r9
 8003026:	eb63 0b01 	sbc.w	fp, r3, r1
 800302a:	f04f 0200 	mov.w	r2, #0
 800302e:	f04f 0300 	mov.w	r3, #0
 8003032:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003036:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800303a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800303e:	4692      	mov	sl, r2
 8003040:	469b      	mov	fp, r3
 8003042:	4623      	mov	r3, r4
 8003044:	eb1a 0303 	adds.w	r3, sl, r3
 8003048:	623b      	str	r3, [r7, #32]
 800304a:	462b      	mov	r3, r5
 800304c:	eb4b 0303 	adc.w	r3, fp, r3
 8003050:	627b      	str	r3, [r7, #36]	@ 0x24
 8003052:	f04f 0200 	mov.w	r2, #0
 8003056:	f04f 0300 	mov.w	r3, #0
 800305a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800305e:	4629      	mov	r1, r5
 8003060:	028b      	lsls	r3, r1, #10
 8003062:	4621      	mov	r1, r4
 8003064:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003068:	4621      	mov	r1, r4
 800306a:	028a      	lsls	r2, r1, #10
 800306c:	4610      	mov	r0, r2
 800306e:	4619      	mov	r1, r3
 8003070:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003074:	2200      	movs	r2, #0
 8003076:	673b      	str	r3, [r7, #112]	@ 0x70
 8003078:	677a      	str	r2, [r7, #116]	@ 0x74
 800307a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800307e:	f7fd f917 	bl	80002b0 <__aeabi_uldivmod>
 8003082:	4602      	mov	r2, r0
 8003084:	460b      	mov	r3, r1
 8003086:	4613      	mov	r3, r2
 8003088:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800308c:	4b41      	ldr	r3, [pc, #260]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x354>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	0c1b      	lsrs	r3, r3, #16
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	3301      	adds	r3, #1
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800309e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80030a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80030a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80030ae:	e0eb      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030b0:	4b38      	ldr	r3, [pc, #224]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x354>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030bc:	4b35      	ldr	r3, [pc, #212]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x354>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d06b      	beq.n	80031a0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030c8:	4b32      	ldr	r3, [pc, #200]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x354>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	099b      	lsrs	r3, r3, #6
 80030ce:	2200      	movs	r2, #0
 80030d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80030d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80030d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030da:	663b      	str	r3, [r7, #96]	@ 0x60
 80030dc:	2300      	movs	r3, #0
 80030de:	667b      	str	r3, [r7, #100]	@ 0x64
 80030e0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80030e4:	4622      	mov	r2, r4
 80030e6:	462b      	mov	r3, r5
 80030e8:	f04f 0000 	mov.w	r0, #0
 80030ec:	f04f 0100 	mov.w	r1, #0
 80030f0:	0159      	lsls	r1, r3, #5
 80030f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030f6:	0150      	lsls	r0, r2, #5
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4621      	mov	r1, r4
 80030fe:	1a51      	subs	r1, r2, r1
 8003100:	61b9      	str	r1, [r7, #24]
 8003102:	4629      	mov	r1, r5
 8003104:	eb63 0301 	sbc.w	r3, r3, r1
 8003108:	61fb      	str	r3, [r7, #28]
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003116:	4659      	mov	r1, fp
 8003118:	018b      	lsls	r3, r1, #6
 800311a:	4651      	mov	r1, sl
 800311c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003120:	4651      	mov	r1, sl
 8003122:	018a      	lsls	r2, r1, #6
 8003124:	4651      	mov	r1, sl
 8003126:	ebb2 0801 	subs.w	r8, r2, r1
 800312a:	4659      	mov	r1, fp
 800312c:	eb63 0901 	sbc.w	r9, r3, r1
 8003130:	f04f 0200 	mov.w	r2, #0
 8003134:	f04f 0300 	mov.w	r3, #0
 8003138:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800313c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003140:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003144:	4690      	mov	r8, r2
 8003146:	4699      	mov	r9, r3
 8003148:	4623      	mov	r3, r4
 800314a:	eb18 0303 	adds.w	r3, r8, r3
 800314e:	613b      	str	r3, [r7, #16]
 8003150:	462b      	mov	r3, r5
 8003152:	eb49 0303 	adc.w	r3, r9, r3
 8003156:	617b      	str	r3, [r7, #20]
 8003158:	f04f 0200 	mov.w	r2, #0
 800315c:	f04f 0300 	mov.w	r3, #0
 8003160:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003164:	4629      	mov	r1, r5
 8003166:	024b      	lsls	r3, r1, #9
 8003168:	4621      	mov	r1, r4
 800316a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800316e:	4621      	mov	r1, r4
 8003170:	024a      	lsls	r2, r1, #9
 8003172:	4610      	mov	r0, r2
 8003174:	4619      	mov	r1, r3
 8003176:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800317a:	2200      	movs	r2, #0
 800317c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800317e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003180:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003184:	f7fd f894 	bl	80002b0 <__aeabi_uldivmod>
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	4613      	mov	r3, r2
 800318e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003192:	e065      	b.n	8003260 <HAL_RCC_GetSysClockFreq+0x420>
 8003194:	40023800 	.word	0x40023800
 8003198:	00f42400 	.word	0x00f42400
 800319c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031a0:	4b3d      	ldr	r3, [pc, #244]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x458>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	099b      	lsrs	r3, r3, #6
 80031a6:	2200      	movs	r2, #0
 80031a8:	4618      	mov	r0, r3
 80031aa:	4611      	mov	r1, r2
 80031ac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80031b2:	2300      	movs	r3, #0
 80031b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80031b6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80031ba:	4642      	mov	r2, r8
 80031bc:	464b      	mov	r3, r9
 80031be:	f04f 0000 	mov.w	r0, #0
 80031c2:	f04f 0100 	mov.w	r1, #0
 80031c6:	0159      	lsls	r1, r3, #5
 80031c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031cc:	0150      	lsls	r0, r2, #5
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	4641      	mov	r1, r8
 80031d4:	1a51      	subs	r1, r2, r1
 80031d6:	60b9      	str	r1, [r7, #8]
 80031d8:	4649      	mov	r1, r9
 80031da:	eb63 0301 	sbc.w	r3, r3, r1
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	f04f 0200 	mov.w	r2, #0
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80031ec:	4659      	mov	r1, fp
 80031ee:	018b      	lsls	r3, r1, #6
 80031f0:	4651      	mov	r1, sl
 80031f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031f6:	4651      	mov	r1, sl
 80031f8:	018a      	lsls	r2, r1, #6
 80031fa:	4651      	mov	r1, sl
 80031fc:	1a54      	subs	r4, r2, r1
 80031fe:	4659      	mov	r1, fp
 8003200:	eb63 0501 	sbc.w	r5, r3, r1
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	f04f 0300 	mov.w	r3, #0
 800320c:	00eb      	lsls	r3, r5, #3
 800320e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003212:	00e2      	lsls	r2, r4, #3
 8003214:	4614      	mov	r4, r2
 8003216:	461d      	mov	r5, r3
 8003218:	4643      	mov	r3, r8
 800321a:	18e3      	adds	r3, r4, r3
 800321c:	603b      	str	r3, [r7, #0]
 800321e:	464b      	mov	r3, r9
 8003220:	eb45 0303 	adc.w	r3, r5, r3
 8003224:	607b      	str	r3, [r7, #4]
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	f04f 0300 	mov.w	r3, #0
 800322e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003232:	4629      	mov	r1, r5
 8003234:	028b      	lsls	r3, r1, #10
 8003236:	4621      	mov	r1, r4
 8003238:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800323c:	4621      	mov	r1, r4
 800323e:	028a      	lsls	r2, r1, #10
 8003240:	4610      	mov	r0, r2
 8003242:	4619      	mov	r1, r3
 8003244:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003248:	2200      	movs	r2, #0
 800324a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800324c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800324e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003252:	f7fd f82d 	bl	80002b0 <__aeabi_uldivmod>
 8003256:	4602      	mov	r2, r0
 8003258:	460b      	mov	r3, r1
 800325a:	4613      	mov	r3, r2
 800325c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003260:	4b0d      	ldr	r3, [pc, #52]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x458>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	0f1b      	lsrs	r3, r3, #28
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800326e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003272:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003276:	fbb2 f3f3 	udiv	r3, r2, r3
 800327a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800327e:	e003      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003280:	4b06      	ldr	r3, [pc, #24]	@ (800329c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003282:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003286:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003288:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800328c:	4618      	mov	r0, r3
 800328e:	37b8      	adds	r7, #184	@ 0xb8
 8003290:	46bd      	mov	sp, r7
 8003292:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003296:	bf00      	nop
 8003298:	40023800 	.word	0x40023800
 800329c:	00f42400 	.word	0x00f42400

080032a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e28d      	b.n	80037ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 8083 	beq.w	80033c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80032c0:	4b94      	ldr	r3, [pc, #592]	@ (8003514 <HAL_RCC_OscConfig+0x274>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 030c 	and.w	r3, r3, #12
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d019      	beq.n	8003300 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80032cc:	4b91      	ldr	r3, [pc, #580]	@ (8003514 <HAL_RCC_OscConfig+0x274>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 030c 	and.w	r3, r3, #12
        || \
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d106      	bne.n	80032e6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80032d8:	4b8e      	ldr	r3, [pc, #568]	@ (8003514 <HAL_RCC_OscConfig+0x274>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032e4:	d00c      	beq.n	8003300 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032e6:	4b8b      	ldr	r3, [pc, #556]	@ (8003514 <HAL_RCC_OscConfig+0x274>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80032ee:	2b0c      	cmp	r3, #12
 80032f0:	d112      	bne.n	8003318 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032f2:	4b88      	ldr	r3, [pc, #544]	@ (8003514 <HAL_RCC_OscConfig+0x274>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032fe:	d10b      	bne.n	8003318 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003300:	4b84      	ldr	r3, [pc, #528]	@ (8003514 <HAL_RCC_OscConfig+0x274>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d05b      	beq.n	80033c4 <HAL_RCC_OscConfig+0x124>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d157      	bne.n	80033c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e25a      	b.n	80037ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003320:	d106      	bne.n	8003330 <HAL_RCC_OscConfig+0x90>
 8003322:	4b7c      	ldr	r3, [pc, #496]	@ (8003514 <HAL_RCC_OscConfig+0x274>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a7b      	ldr	r2, [pc, #492]	@ (8003514 <HAL_RCC_OscConfig+0x274>)
 8003328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	e01d      	b.n	800336c <HAL_RCC_OscConfig+0xcc>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003338:	d10c      	bne.n	8003354 <HAL_RCC_OscConfig+0xb4>
 800333a:	4b76      	ldr	r3, [pc, #472]	@ (8003514 <HAL_RCC_OscConfig+0x274>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a75      	ldr	r2, [pc, #468]	@ (8003514 <HAL_RCC_OscConfig+0x274>)
 8003340:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	4b73      	ldr	r3, [pc, #460]	@ (8003514 <HAL_RCC_OscConfig+0x274>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a72      	ldr	r2, [pc, #456]	@ (8003514 <HAL_RCC_OscConfig+0x274>)
 800334c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	e00b      	b.n	800336c <HAL_RCC_OscConfig+0xcc>
 8003354:	4b6f      	ldr	r3, [pc, #444]	@ (8003514 <HAL_RCC_OscConfig+0x274>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a6e      	ldr	r2, [pc, #440]	@ (8003514 <HAL_RCC_OscConfig+0x274>)
 800335a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800335e:	6013      	str	r3, [r2, #0]
 8003360:	4b6c      	ldr	r3, [pc, #432]	@ (8003514 <HAL_RCC_OscConfig+0x274>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a6b      	ldr	r2, [pc, #428]	@ (8003514 <HAL_RCC_OscConfig+0x274>)
 8003366:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800336a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d013      	beq.n	800339c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003374:	f7fe fcde 	bl	8001d34 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800337c:	f7fe fcda 	bl	8001d34 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b64      	cmp	r3, #100	@ 0x64
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e21f      	b.n	80037ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800338e:	4b61      	ldr	r3, [pc, #388]	@ (8003514 <HAL_RCC_OscConfig+0x274>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0f0      	beq.n	800337c <HAL_RCC_OscConfig+0xdc>
 800339a:	e014      	b.n	80033c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339c:	f7fe fcca 	bl	8001d34 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033a4:	f7fe fcc6 	bl	8001d34 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b64      	cmp	r3, #100	@ 0x64
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e20b      	b.n	80037ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033b6:	4b57      	ldr	r3, [pc, #348]	@ (8003514 <HAL_RCC_OscConfig+0x274>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1f0      	bne.n	80033a4 <HAL_RCC_OscConfig+0x104>
 80033c2:	e000      	b.n	80033c6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d06f      	beq.n	80034b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80033d2:	4b50      	ldr	r3, [pc, #320]	@ (8003514 <HAL_RCC_OscConfig+0x274>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 030c 	and.w	r3, r3, #12
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d017      	beq.n	800340e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80033de:	4b4d      	ldr	r3, [pc, #308]	@ (8003514 <HAL_RCC_OscConfig+0x274>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 030c 	and.w	r3, r3, #12
        || \
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d105      	bne.n	80033f6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80033ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003514 <HAL_RCC_OscConfig+0x274>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00b      	beq.n	800340e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033f6:	4b47      	ldr	r3, [pc, #284]	@ (8003514 <HAL_RCC_OscConfig+0x274>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80033fe:	2b0c      	cmp	r3, #12
 8003400:	d11c      	bne.n	800343c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003402:	4b44      	ldr	r3, [pc, #272]	@ (8003514 <HAL_RCC_OscConfig+0x274>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d116      	bne.n	800343c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800340e:	4b41      	ldr	r3, [pc, #260]	@ (8003514 <HAL_RCC_OscConfig+0x274>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d005      	beq.n	8003426 <HAL_RCC_OscConfig+0x186>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d001      	beq.n	8003426 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e1d3      	b.n	80037ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003426:	4b3b      	ldr	r3, [pc, #236]	@ (8003514 <HAL_RCC_OscConfig+0x274>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	4937      	ldr	r1, [pc, #220]	@ (8003514 <HAL_RCC_OscConfig+0x274>)
 8003436:	4313      	orrs	r3, r2
 8003438:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800343a:	e03a      	b.n	80034b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d020      	beq.n	8003486 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003444:	4b34      	ldr	r3, [pc, #208]	@ (8003518 <HAL_RCC_OscConfig+0x278>)
 8003446:	2201      	movs	r2, #1
 8003448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344a:	f7fe fc73 	bl	8001d34 <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003450:	e008      	b.n	8003464 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003452:	f7fe fc6f 	bl	8001d34 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e1b4      	b.n	80037ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003464:	4b2b      	ldr	r3, [pc, #172]	@ (8003514 <HAL_RCC_OscConfig+0x274>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0f0      	beq.n	8003452 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003470:	4b28      	ldr	r3, [pc, #160]	@ (8003514 <HAL_RCC_OscConfig+0x274>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	4925      	ldr	r1, [pc, #148]	@ (8003514 <HAL_RCC_OscConfig+0x274>)
 8003480:	4313      	orrs	r3, r2
 8003482:	600b      	str	r3, [r1, #0]
 8003484:	e015      	b.n	80034b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003486:	4b24      	ldr	r3, [pc, #144]	@ (8003518 <HAL_RCC_OscConfig+0x278>)
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348c:	f7fe fc52 	bl	8001d34 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003494:	f7fe fc4e 	bl	8001d34 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e193      	b.n	80037ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003514 <HAL_RCC_OscConfig+0x274>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f0      	bne.n	8003494 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d036      	beq.n	800352c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d016      	beq.n	80034f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034c6:	4b15      	ldr	r3, [pc, #84]	@ (800351c <HAL_RCC_OscConfig+0x27c>)
 80034c8:	2201      	movs	r2, #1
 80034ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034cc:	f7fe fc32 	bl	8001d34 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034d4:	f7fe fc2e 	bl	8001d34 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e173      	b.n	80037ce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003514 <HAL_RCC_OscConfig+0x274>)
 80034e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0f0      	beq.n	80034d4 <HAL_RCC_OscConfig+0x234>
 80034f2:	e01b      	b.n	800352c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034f4:	4b09      	ldr	r3, [pc, #36]	@ (800351c <HAL_RCC_OscConfig+0x27c>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fa:	f7fe fc1b 	bl	8001d34 <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003500:	e00e      	b.n	8003520 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003502:	f7fe fc17 	bl	8001d34 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d907      	bls.n	8003520 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e15c      	b.n	80037ce <HAL_RCC_OscConfig+0x52e>
 8003514:	40023800 	.word	0x40023800
 8003518:	42470000 	.word	0x42470000
 800351c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003520:	4b8a      	ldr	r3, [pc, #552]	@ (800374c <HAL_RCC_OscConfig+0x4ac>)
 8003522:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1ea      	bne.n	8003502 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 8097 	beq.w	8003668 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800353a:	2300      	movs	r3, #0
 800353c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800353e:	4b83      	ldr	r3, [pc, #524]	@ (800374c <HAL_RCC_OscConfig+0x4ac>)
 8003540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10f      	bne.n	800356a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800354a:	2300      	movs	r3, #0
 800354c:	60bb      	str	r3, [r7, #8]
 800354e:	4b7f      	ldr	r3, [pc, #508]	@ (800374c <HAL_RCC_OscConfig+0x4ac>)
 8003550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003552:	4a7e      	ldr	r2, [pc, #504]	@ (800374c <HAL_RCC_OscConfig+0x4ac>)
 8003554:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003558:	6413      	str	r3, [r2, #64]	@ 0x40
 800355a:	4b7c      	ldr	r3, [pc, #496]	@ (800374c <HAL_RCC_OscConfig+0x4ac>)
 800355c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003562:	60bb      	str	r3, [r7, #8]
 8003564:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003566:	2301      	movs	r3, #1
 8003568:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800356a:	4b79      	ldr	r3, [pc, #484]	@ (8003750 <HAL_RCC_OscConfig+0x4b0>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003572:	2b00      	cmp	r3, #0
 8003574:	d118      	bne.n	80035a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003576:	4b76      	ldr	r3, [pc, #472]	@ (8003750 <HAL_RCC_OscConfig+0x4b0>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a75      	ldr	r2, [pc, #468]	@ (8003750 <HAL_RCC_OscConfig+0x4b0>)
 800357c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003582:	f7fe fbd7 	bl	8001d34 <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003588:	e008      	b.n	800359c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800358a:	f7fe fbd3 	bl	8001d34 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e118      	b.n	80037ce <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800359c:	4b6c      	ldr	r3, [pc, #432]	@ (8003750 <HAL_RCC_OscConfig+0x4b0>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0f0      	beq.n	800358a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d106      	bne.n	80035be <HAL_RCC_OscConfig+0x31e>
 80035b0:	4b66      	ldr	r3, [pc, #408]	@ (800374c <HAL_RCC_OscConfig+0x4ac>)
 80035b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035b4:	4a65      	ldr	r2, [pc, #404]	@ (800374c <HAL_RCC_OscConfig+0x4ac>)
 80035b6:	f043 0301 	orr.w	r3, r3, #1
 80035ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80035bc:	e01c      	b.n	80035f8 <HAL_RCC_OscConfig+0x358>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	2b05      	cmp	r3, #5
 80035c4:	d10c      	bne.n	80035e0 <HAL_RCC_OscConfig+0x340>
 80035c6:	4b61      	ldr	r3, [pc, #388]	@ (800374c <HAL_RCC_OscConfig+0x4ac>)
 80035c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ca:	4a60      	ldr	r2, [pc, #384]	@ (800374c <HAL_RCC_OscConfig+0x4ac>)
 80035cc:	f043 0304 	orr.w	r3, r3, #4
 80035d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80035d2:	4b5e      	ldr	r3, [pc, #376]	@ (800374c <HAL_RCC_OscConfig+0x4ac>)
 80035d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035d6:	4a5d      	ldr	r2, [pc, #372]	@ (800374c <HAL_RCC_OscConfig+0x4ac>)
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80035de:	e00b      	b.n	80035f8 <HAL_RCC_OscConfig+0x358>
 80035e0:	4b5a      	ldr	r3, [pc, #360]	@ (800374c <HAL_RCC_OscConfig+0x4ac>)
 80035e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e4:	4a59      	ldr	r2, [pc, #356]	@ (800374c <HAL_RCC_OscConfig+0x4ac>)
 80035e6:	f023 0301 	bic.w	r3, r3, #1
 80035ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80035ec:	4b57      	ldr	r3, [pc, #348]	@ (800374c <HAL_RCC_OscConfig+0x4ac>)
 80035ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035f0:	4a56      	ldr	r2, [pc, #344]	@ (800374c <HAL_RCC_OscConfig+0x4ac>)
 80035f2:	f023 0304 	bic.w	r3, r3, #4
 80035f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d015      	beq.n	800362c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003600:	f7fe fb98 	bl	8001d34 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003606:	e00a      	b.n	800361e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003608:	f7fe fb94 	bl	8001d34 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003616:	4293      	cmp	r3, r2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e0d7      	b.n	80037ce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800361e:	4b4b      	ldr	r3, [pc, #300]	@ (800374c <HAL_RCC_OscConfig+0x4ac>)
 8003620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0ee      	beq.n	8003608 <HAL_RCC_OscConfig+0x368>
 800362a:	e014      	b.n	8003656 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362c:	f7fe fb82 	bl	8001d34 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003632:	e00a      	b.n	800364a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003634:	f7fe fb7e 	bl	8001d34 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003642:	4293      	cmp	r3, r2
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e0c1      	b.n	80037ce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800364a:	4b40      	ldr	r3, [pc, #256]	@ (800374c <HAL_RCC_OscConfig+0x4ac>)
 800364c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1ee      	bne.n	8003634 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003656:	7dfb      	ldrb	r3, [r7, #23]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d105      	bne.n	8003668 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800365c:	4b3b      	ldr	r3, [pc, #236]	@ (800374c <HAL_RCC_OscConfig+0x4ac>)
 800365e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003660:	4a3a      	ldr	r2, [pc, #232]	@ (800374c <HAL_RCC_OscConfig+0x4ac>)
 8003662:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003666:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 80ad 	beq.w	80037cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003672:	4b36      	ldr	r3, [pc, #216]	@ (800374c <HAL_RCC_OscConfig+0x4ac>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 030c 	and.w	r3, r3, #12
 800367a:	2b08      	cmp	r3, #8
 800367c:	d060      	beq.n	8003740 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	2b02      	cmp	r3, #2
 8003684:	d145      	bne.n	8003712 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003686:	4b33      	ldr	r3, [pc, #204]	@ (8003754 <HAL_RCC_OscConfig+0x4b4>)
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368c:	f7fe fb52 	bl	8001d34 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003694:	f7fe fb4e 	bl	8001d34 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e093      	b.n	80037ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a6:	4b29      	ldr	r3, [pc, #164]	@ (800374c <HAL_RCC_OscConfig+0x4ac>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1f0      	bne.n	8003694 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	69da      	ldr	r2, [r3, #28]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c0:	019b      	lsls	r3, r3, #6
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c8:	085b      	lsrs	r3, r3, #1
 80036ca:	3b01      	subs	r3, #1
 80036cc:	041b      	lsls	r3, r3, #16
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d4:	061b      	lsls	r3, r3, #24
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036dc:	071b      	lsls	r3, r3, #28
 80036de:	491b      	ldr	r1, [pc, #108]	@ (800374c <HAL_RCC_OscConfig+0x4ac>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003754 <HAL_RCC_OscConfig+0x4b4>)
 80036e6:	2201      	movs	r2, #1
 80036e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ea:	f7fe fb23 	bl	8001d34 <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f2:	f7fe fb1f 	bl	8001d34 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e064      	b.n	80037ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003704:	4b11      	ldr	r3, [pc, #68]	@ (800374c <HAL_RCC_OscConfig+0x4ac>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d0f0      	beq.n	80036f2 <HAL_RCC_OscConfig+0x452>
 8003710:	e05c      	b.n	80037cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003712:	4b10      	ldr	r3, [pc, #64]	@ (8003754 <HAL_RCC_OscConfig+0x4b4>)
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003718:	f7fe fb0c 	bl	8001d34 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003720:	f7fe fb08 	bl	8001d34 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e04d      	b.n	80037ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003732:	4b06      	ldr	r3, [pc, #24]	@ (800374c <HAL_RCC_OscConfig+0x4ac>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1f0      	bne.n	8003720 <HAL_RCC_OscConfig+0x480>
 800373e:	e045      	b.n	80037cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d107      	bne.n	8003758 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e040      	b.n	80037ce <HAL_RCC_OscConfig+0x52e>
 800374c:	40023800 	.word	0x40023800
 8003750:	40007000 	.word	0x40007000
 8003754:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003758:	4b1f      	ldr	r3, [pc, #124]	@ (80037d8 <HAL_RCC_OscConfig+0x538>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d030      	beq.n	80037c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003770:	429a      	cmp	r2, r3
 8003772:	d129      	bne.n	80037c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800377e:	429a      	cmp	r2, r3
 8003780:	d122      	bne.n	80037c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003788:	4013      	ands	r3, r2
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800378e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003790:	4293      	cmp	r3, r2
 8003792:	d119      	bne.n	80037c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800379e:	085b      	lsrs	r3, r3, #1
 80037a0:	3b01      	subs	r3, #1
 80037a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d10f      	bne.n	80037c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d107      	bne.n	80037c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d001      	beq.n	80037cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e000      	b.n	80037ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3718      	adds	r7, #24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	40023800 	.word	0x40023800

080037dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e097      	b.n	8003920 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d106      	bne.n	800380a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f7fe f8a5 	bl	8001954 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2202      	movs	r2, #2
 800380e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6812      	ldr	r2, [r2, #0]
 800381c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003820:	f023 0307 	bic.w	r3, r3, #7
 8003824:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	3304      	adds	r3, #4
 800382e:	4619      	mov	r1, r3
 8003830:	4610      	mov	r0, r2
 8003832:	f000 fa29 	bl	8003c88 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	4313      	orrs	r3, r2
 8003856:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800385e:	f023 0303 	bic.w	r3, r3, #3
 8003862:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	021b      	lsls	r3, r3, #8
 800386e:	4313      	orrs	r3, r2
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	4313      	orrs	r3, r2
 8003874:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800387c:	f023 030c 	bic.w	r3, r3, #12
 8003880:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003888:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800388c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	68da      	ldr	r2, [r3, #12]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	021b      	lsls	r3, r3, #8
 8003898:	4313      	orrs	r3, r2
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	4313      	orrs	r3, r2
 800389e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	011a      	lsls	r2, r3, #4
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	031b      	lsls	r3, r3, #12
 80038ac:	4313      	orrs	r3, r2
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80038ba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80038c2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	011b      	lsls	r3, r3, #4
 80038ce:	4313      	orrs	r3, r2
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3718      	adds	r7, #24
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003938:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003940:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003948:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003950:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d110      	bne.n	800397a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003958:	7bfb      	ldrb	r3, [r7, #15]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d102      	bne.n	8003964 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800395e:	7b7b      	ldrb	r3, [r7, #13]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d001      	beq.n	8003968 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e069      	b.n	8003a3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2202      	movs	r2, #2
 800396c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2202      	movs	r2, #2
 8003974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003978:	e031      	b.n	80039de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2b04      	cmp	r3, #4
 800397e:	d110      	bne.n	80039a2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003980:	7bbb      	ldrb	r3, [r7, #14]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d102      	bne.n	800398c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003986:	7b3b      	ldrb	r3, [r7, #12]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d001      	beq.n	8003990 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e055      	b.n	8003a3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2202      	movs	r2, #2
 8003994:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039a0:	e01d      	b.n	80039de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80039a2:	7bfb      	ldrb	r3, [r7, #15]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d108      	bne.n	80039ba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80039a8:	7bbb      	ldrb	r3, [r7, #14]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d105      	bne.n	80039ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80039ae:	7b7b      	ldrb	r3, [r7, #13]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d102      	bne.n	80039ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80039b4:	7b3b      	ldrb	r3, [r7, #12]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d001      	beq.n	80039be <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e03e      	b.n	8003a3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2202      	movs	r2, #2
 80039c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2202      	movs	r2, #2
 80039ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2202      	movs	r2, #2
 80039d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2202      	movs	r2, #2
 80039da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <HAL_TIM_Encoder_Start+0xc4>
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	d008      	beq.n	80039fc <HAL_TIM_Encoder_Start+0xd4>
 80039ea:	e00f      	b.n	8003a0c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2201      	movs	r2, #1
 80039f2:	2100      	movs	r1, #0
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 f9ed 	bl	8003dd4 <TIM_CCxChannelCmd>
      break;
 80039fa:	e016      	b.n	8003a2a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2201      	movs	r2, #1
 8003a02:	2104      	movs	r1, #4
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 f9e5 	bl	8003dd4 <TIM_CCxChannelCmd>
      break;
 8003a0a:	e00e      	b.n	8003a2a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2201      	movs	r2, #1
 8003a12:	2100      	movs	r1, #0
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 f9dd 	bl	8003dd4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	2104      	movs	r1, #4
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 f9d6 	bl	8003dd4 <TIM_CCxChannelCmd>
      break;
 8003a28:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f042 0201 	orr.w	r2, r2, #1
 8003a38:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d020      	beq.n	8003aa8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d01b      	beq.n	8003aa8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f06f 0202 	mvn.w	r2, #2
 8003a78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f8dc 	bl	8003c4c <HAL_TIM_IC_CaptureCallback>
 8003a94:	e005      	b.n	8003aa2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f8ce 	bl	8003c38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f8df 	bl	8003c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	f003 0304 	and.w	r3, r3, #4
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d020      	beq.n	8003af4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d01b      	beq.n	8003af4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f06f 0204 	mvn.w	r2, #4
 8003ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2202      	movs	r2, #2
 8003aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f8b6 	bl	8003c4c <HAL_TIM_IC_CaptureCallback>
 8003ae0:	e005      	b.n	8003aee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f8a8 	bl	8003c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f8b9 	bl	8003c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d020      	beq.n	8003b40 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f003 0308 	and.w	r3, r3, #8
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d01b      	beq.n	8003b40 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f06f 0208 	mvn.w	r2, #8
 8003b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2204      	movs	r2, #4
 8003b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f890 	bl	8003c4c <HAL_TIM_IC_CaptureCallback>
 8003b2c:	e005      	b.n	8003b3a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f882 	bl	8003c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f893 	bl	8003c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f003 0310 	and.w	r3, r3, #16
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d020      	beq.n	8003b8c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f003 0310 	and.w	r3, r3, #16
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d01b      	beq.n	8003b8c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f06f 0210 	mvn.w	r2, #16
 8003b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2208      	movs	r2, #8
 8003b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f86a 	bl	8003c4c <HAL_TIM_IC_CaptureCallback>
 8003b78:	e005      	b.n	8003b86 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f85c 	bl	8003c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 f86d 	bl	8003c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00c      	beq.n	8003bb0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d007      	beq.n	8003bb0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f06f 0201 	mvn.w	r2, #1
 8003ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f83a 	bl	8003c24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00c      	beq.n	8003bd4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d007      	beq.n	8003bd4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f9ac 	bl	8003f2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00c      	beq.n	8003bf8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d007      	beq.n	8003bf8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f83e 	bl	8003c74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	f003 0320 	and.w	r3, r3, #32
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00c      	beq.n	8003c1c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f003 0320 	and.w	r3, r3, #32
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d007      	beq.n	8003c1c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f06f 0220 	mvn.w	r2, #32
 8003c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f97e 	bl	8003f18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c1c:	bf00      	nop
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a43      	ldr	r2, [pc, #268]	@ (8003da8 <TIM_Base_SetConfig+0x120>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d013      	beq.n	8003cc8 <TIM_Base_SetConfig+0x40>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ca6:	d00f      	beq.n	8003cc8 <TIM_Base_SetConfig+0x40>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a40      	ldr	r2, [pc, #256]	@ (8003dac <TIM_Base_SetConfig+0x124>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d00b      	beq.n	8003cc8 <TIM_Base_SetConfig+0x40>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a3f      	ldr	r2, [pc, #252]	@ (8003db0 <TIM_Base_SetConfig+0x128>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d007      	beq.n	8003cc8 <TIM_Base_SetConfig+0x40>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a3e      	ldr	r2, [pc, #248]	@ (8003db4 <TIM_Base_SetConfig+0x12c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d003      	beq.n	8003cc8 <TIM_Base_SetConfig+0x40>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a3d      	ldr	r2, [pc, #244]	@ (8003db8 <TIM_Base_SetConfig+0x130>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d108      	bne.n	8003cda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a32      	ldr	r2, [pc, #200]	@ (8003da8 <TIM_Base_SetConfig+0x120>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d02b      	beq.n	8003d3a <TIM_Base_SetConfig+0xb2>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ce8:	d027      	beq.n	8003d3a <TIM_Base_SetConfig+0xb2>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a2f      	ldr	r2, [pc, #188]	@ (8003dac <TIM_Base_SetConfig+0x124>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d023      	beq.n	8003d3a <TIM_Base_SetConfig+0xb2>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a2e      	ldr	r2, [pc, #184]	@ (8003db0 <TIM_Base_SetConfig+0x128>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d01f      	beq.n	8003d3a <TIM_Base_SetConfig+0xb2>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a2d      	ldr	r2, [pc, #180]	@ (8003db4 <TIM_Base_SetConfig+0x12c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d01b      	beq.n	8003d3a <TIM_Base_SetConfig+0xb2>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a2c      	ldr	r2, [pc, #176]	@ (8003db8 <TIM_Base_SetConfig+0x130>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d017      	beq.n	8003d3a <TIM_Base_SetConfig+0xb2>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a2b      	ldr	r2, [pc, #172]	@ (8003dbc <TIM_Base_SetConfig+0x134>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d013      	beq.n	8003d3a <TIM_Base_SetConfig+0xb2>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a2a      	ldr	r2, [pc, #168]	@ (8003dc0 <TIM_Base_SetConfig+0x138>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d00f      	beq.n	8003d3a <TIM_Base_SetConfig+0xb2>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a29      	ldr	r2, [pc, #164]	@ (8003dc4 <TIM_Base_SetConfig+0x13c>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d00b      	beq.n	8003d3a <TIM_Base_SetConfig+0xb2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a28      	ldr	r2, [pc, #160]	@ (8003dc8 <TIM_Base_SetConfig+0x140>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d007      	beq.n	8003d3a <TIM_Base_SetConfig+0xb2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a27      	ldr	r2, [pc, #156]	@ (8003dcc <TIM_Base_SetConfig+0x144>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d003      	beq.n	8003d3a <TIM_Base_SetConfig+0xb2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a26      	ldr	r2, [pc, #152]	@ (8003dd0 <TIM_Base_SetConfig+0x148>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d108      	bne.n	8003d4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	689a      	ldr	r2, [r3, #8]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a0e      	ldr	r2, [pc, #56]	@ (8003da8 <TIM_Base_SetConfig+0x120>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d003      	beq.n	8003d7a <TIM_Base_SetConfig+0xf2>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a10      	ldr	r2, [pc, #64]	@ (8003db8 <TIM_Base_SetConfig+0x130>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d103      	bne.n	8003d82 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	691a      	ldr	r2, [r3, #16]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f043 0204 	orr.w	r2, r3, #4
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	601a      	str	r2, [r3, #0]
}
 8003d9a:	bf00      	nop
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	40010000 	.word	0x40010000
 8003dac:	40000400 	.word	0x40000400
 8003db0:	40000800 	.word	0x40000800
 8003db4:	40000c00 	.word	0x40000c00
 8003db8:	40010400 	.word	0x40010400
 8003dbc:	40014000 	.word	0x40014000
 8003dc0:	40014400 	.word	0x40014400
 8003dc4:	40014800 	.word	0x40014800
 8003dc8:	40001800 	.word	0x40001800
 8003dcc:	40001c00 	.word	0x40001c00
 8003dd0:	40002000 	.word	0x40002000

08003dd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b087      	sub	sp, #28
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	f003 031f 	and.w	r3, r3, #31
 8003de6:	2201      	movs	r2, #1
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6a1a      	ldr	r2, [r3, #32]
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	43db      	mvns	r3, r3
 8003df6:	401a      	ands	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a1a      	ldr	r2, [r3, #32]
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	f003 031f 	and.w	r3, r3, #31
 8003e06:	6879      	ldr	r1, [r7, #4]
 8003e08:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	621a      	str	r2, [r3, #32]
}
 8003e12:	bf00      	nop
 8003e14:	371c      	adds	r7, #28
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
	...

08003e20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d101      	bne.n	8003e38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e34:	2302      	movs	r3, #2
 8003e36:	e05a      	b.n	8003eee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a21      	ldr	r2, [pc, #132]	@ (8003efc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d022      	beq.n	8003ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e84:	d01d      	beq.n	8003ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a1d      	ldr	r2, [pc, #116]	@ (8003f00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d018      	beq.n	8003ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a1b      	ldr	r2, [pc, #108]	@ (8003f04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d013      	beq.n	8003ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a1a      	ldr	r2, [pc, #104]	@ (8003f08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d00e      	beq.n	8003ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a18      	ldr	r2, [pc, #96]	@ (8003f0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d009      	beq.n	8003ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a17      	ldr	r2, [pc, #92]	@ (8003f10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d004      	beq.n	8003ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a15      	ldr	r2, [pc, #84]	@ (8003f14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d10c      	bne.n	8003edc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ec8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	40010000 	.word	0x40010000
 8003f00:	40000400 	.word	0x40000400
 8003f04:	40000800 	.word	0x40000800
 8003f08:	40000c00 	.word	0x40000c00
 8003f0c:	40010400 	.word	0x40010400
 8003f10:	40014000 	.word	0x40014000
 8003f14:	40001800 	.word	0x40001800

08003f18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e042      	b.n	8003fd8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d106      	bne.n	8003f6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7fd fd6e 	bl	8001a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2224      	movs	r2, #36	@ 0x24
 8003f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68da      	ldr	r2, [r3, #12]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f82b 	bl	8003fe0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	691a      	ldr	r2, [r3, #16]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	695a      	ldr	r2, [r3, #20]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fa8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68da      	ldr	r2, [r3, #12]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fe4:	b0c0      	sub	sp, #256	@ 0x100
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ffc:	68d9      	ldr	r1, [r3, #12]
 8003ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	ea40 0301 	orr.w	r3, r0, r1
 8004008:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800400a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	431a      	orrs	r2, r3
 8004018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	431a      	orrs	r2, r3
 8004020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	4313      	orrs	r3, r2
 8004028:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800402c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004038:	f021 010c 	bic.w	r1, r1, #12
 800403c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004046:	430b      	orrs	r3, r1
 8004048:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800404a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800405a:	6999      	ldr	r1, [r3, #24]
 800405c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	ea40 0301 	orr.w	r3, r0, r1
 8004066:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	4b8f      	ldr	r3, [pc, #572]	@ (80042ac <UART_SetConfig+0x2cc>)
 8004070:	429a      	cmp	r2, r3
 8004072:	d005      	beq.n	8004080 <UART_SetConfig+0xa0>
 8004074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	4b8d      	ldr	r3, [pc, #564]	@ (80042b0 <UART_SetConfig+0x2d0>)
 800407c:	429a      	cmp	r2, r3
 800407e:	d104      	bne.n	800408a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004080:	f7fe fba0 	bl	80027c4 <HAL_RCC_GetPCLK2Freq>
 8004084:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004088:	e003      	b.n	8004092 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800408a:	f7fe fb87 	bl	800279c <HAL_RCC_GetPCLK1Freq>
 800408e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004096:	69db      	ldr	r3, [r3, #28]
 8004098:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800409c:	f040 810c 	bne.w	80042b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040a4:	2200      	movs	r2, #0
 80040a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80040aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80040ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80040b2:	4622      	mov	r2, r4
 80040b4:	462b      	mov	r3, r5
 80040b6:	1891      	adds	r1, r2, r2
 80040b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80040ba:	415b      	adcs	r3, r3
 80040bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80040c2:	4621      	mov	r1, r4
 80040c4:	eb12 0801 	adds.w	r8, r2, r1
 80040c8:	4629      	mov	r1, r5
 80040ca:	eb43 0901 	adc.w	r9, r3, r1
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	f04f 0300 	mov.w	r3, #0
 80040d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040e2:	4690      	mov	r8, r2
 80040e4:	4699      	mov	r9, r3
 80040e6:	4623      	mov	r3, r4
 80040e8:	eb18 0303 	adds.w	r3, r8, r3
 80040ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80040f0:	462b      	mov	r3, r5
 80040f2:	eb49 0303 	adc.w	r3, r9, r3
 80040f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80040fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004106:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800410a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800410e:	460b      	mov	r3, r1
 8004110:	18db      	adds	r3, r3, r3
 8004112:	653b      	str	r3, [r7, #80]	@ 0x50
 8004114:	4613      	mov	r3, r2
 8004116:	eb42 0303 	adc.w	r3, r2, r3
 800411a:	657b      	str	r3, [r7, #84]	@ 0x54
 800411c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004120:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004124:	f7fc f8c4 	bl	80002b0 <__aeabi_uldivmod>
 8004128:	4602      	mov	r2, r0
 800412a:	460b      	mov	r3, r1
 800412c:	4b61      	ldr	r3, [pc, #388]	@ (80042b4 <UART_SetConfig+0x2d4>)
 800412e:	fba3 2302 	umull	r2, r3, r3, r2
 8004132:	095b      	lsrs	r3, r3, #5
 8004134:	011c      	lsls	r4, r3, #4
 8004136:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800413a:	2200      	movs	r2, #0
 800413c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004140:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004144:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004148:	4642      	mov	r2, r8
 800414a:	464b      	mov	r3, r9
 800414c:	1891      	adds	r1, r2, r2
 800414e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004150:	415b      	adcs	r3, r3
 8004152:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004154:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004158:	4641      	mov	r1, r8
 800415a:	eb12 0a01 	adds.w	sl, r2, r1
 800415e:	4649      	mov	r1, r9
 8004160:	eb43 0b01 	adc.w	fp, r3, r1
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	f04f 0300 	mov.w	r3, #0
 800416c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004170:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004174:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004178:	4692      	mov	sl, r2
 800417a:	469b      	mov	fp, r3
 800417c:	4643      	mov	r3, r8
 800417e:	eb1a 0303 	adds.w	r3, sl, r3
 8004182:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004186:	464b      	mov	r3, r9
 8004188:	eb4b 0303 	adc.w	r3, fp, r3
 800418c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800419c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80041a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80041a4:	460b      	mov	r3, r1
 80041a6:	18db      	adds	r3, r3, r3
 80041a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80041aa:	4613      	mov	r3, r2
 80041ac:	eb42 0303 	adc.w	r3, r2, r3
 80041b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80041b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80041b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80041ba:	f7fc f879 	bl	80002b0 <__aeabi_uldivmod>
 80041be:	4602      	mov	r2, r0
 80041c0:	460b      	mov	r3, r1
 80041c2:	4611      	mov	r1, r2
 80041c4:	4b3b      	ldr	r3, [pc, #236]	@ (80042b4 <UART_SetConfig+0x2d4>)
 80041c6:	fba3 2301 	umull	r2, r3, r3, r1
 80041ca:	095b      	lsrs	r3, r3, #5
 80041cc:	2264      	movs	r2, #100	@ 0x64
 80041ce:	fb02 f303 	mul.w	r3, r2, r3
 80041d2:	1acb      	subs	r3, r1, r3
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80041da:	4b36      	ldr	r3, [pc, #216]	@ (80042b4 <UART_SetConfig+0x2d4>)
 80041dc:	fba3 2302 	umull	r2, r3, r3, r2
 80041e0:	095b      	lsrs	r3, r3, #5
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80041e8:	441c      	add	r4, r3
 80041ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041ee:	2200      	movs	r2, #0
 80041f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80041f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80041f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80041fc:	4642      	mov	r2, r8
 80041fe:	464b      	mov	r3, r9
 8004200:	1891      	adds	r1, r2, r2
 8004202:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004204:	415b      	adcs	r3, r3
 8004206:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004208:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800420c:	4641      	mov	r1, r8
 800420e:	1851      	adds	r1, r2, r1
 8004210:	6339      	str	r1, [r7, #48]	@ 0x30
 8004212:	4649      	mov	r1, r9
 8004214:	414b      	adcs	r3, r1
 8004216:	637b      	str	r3, [r7, #52]	@ 0x34
 8004218:	f04f 0200 	mov.w	r2, #0
 800421c:	f04f 0300 	mov.w	r3, #0
 8004220:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004224:	4659      	mov	r1, fp
 8004226:	00cb      	lsls	r3, r1, #3
 8004228:	4651      	mov	r1, sl
 800422a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800422e:	4651      	mov	r1, sl
 8004230:	00ca      	lsls	r2, r1, #3
 8004232:	4610      	mov	r0, r2
 8004234:	4619      	mov	r1, r3
 8004236:	4603      	mov	r3, r0
 8004238:	4642      	mov	r2, r8
 800423a:	189b      	adds	r3, r3, r2
 800423c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004240:	464b      	mov	r3, r9
 8004242:	460a      	mov	r2, r1
 8004244:	eb42 0303 	adc.w	r3, r2, r3
 8004248:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800424c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004258:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800425c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004260:	460b      	mov	r3, r1
 8004262:	18db      	adds	r3, r3, r3
 8004264:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004266:	4613      	mov	r3, r2
 8004268:	eb42 0303 	adc.w	r3, r2, r3
 800426c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800426e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004272:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004276:	f7fc f81b 	bl	80002b0 <__aeabi_uldivmod>
 800427a:	4602      	mov	r2, r0
 800427c:	460b      	mov	r3, r1
 800427e:	4b0d      	ldr	r3, [pc, #52]	@ (80042b4 <UART_SetConfig+0x2d4>)
 8004280:	fba3 1302 	umull	r1, r3, r3, r2
 8004284:	095b      	lsrs	r3, r3, #5
 8004286:	2164      	movs	r1, #100	@ 0x64
 8004288:	fb01 f303 	mul.w	r3, r1, r3
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	3332      	adds	r3, #50	@ 0x32
 8004292:	4a08      	ldr	r2, [pc, #32]	@ (80042b4 <UART_SetConfig+0x2d4>)
 8004294:	fba2 2303 	umull	r2, r3, r2, r3
 8004298:	095b      	lsrs	r3, r3, #5
 800429a:	f003 0207 	and.w	r2, r3, #7
 800429e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4422      	add	r2, r4
 80042a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042a8:	e106      	b.n	80044b8 <UART_SetConfig+0x4d8>
 80042aa:	bf00      	nop
 80042ac:	40011000 	.word	0x40011000
 80042b0:	40011400 	.word	0x40011400
 80042b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042bc:	2200      	movs	r2, #0
 80042be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80042c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80042c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80042ca:	4642      	mov	r2, r8
 80042cc:	464b      	mov	r3, r9
 80042ce:	1891      	adds	r1, r2, r2
 80042d0:	6239      	str	r1, [r7, #32]
 80042d2:	415b      	adcs	r3, r3
 80042d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80042d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042da:	4641      	mov	r1, r8
 80042dc:	1854      	adds	r4, r2, r1
 80042de:	4649      	mov	r1, r9
 80042e0:	eb43 0501 	adc.w	r5, r3, r1
 80042e4:	f04f 0200 	mov.w	r2, #0
 80042e8:	f04f 0300 	mov.w	r3, #0
 80042ec:	00eb      	lsls	r3, r5, #3
 80042ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042f2:	00e2      	lsls	r2, r4, #3
 80042f4:	4614      	mov	r4, r2
 80042f6:	461d      	mov	r5, r3
 80042f8:	4643      	mov	r3, r8
 80042fa:	18e3      	adds	r3, r4, r3
 80042fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004300:	464b      	mov	r3, r9
 8004302:	eb45 0303 	adc.w	r3, r5, r3
 8004306:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800430a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004316:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800431a:	f04f 0200 	mov.w	r2, #0
 800431e:	f04f 0300 	mov.w	r3, #0
 8004322:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004326:	4629      	mov	r1, r5
 8004328:	008b      	lsls	r3, r1, #2
 800432a:	4621      	mov	r1, r4
 800432c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004330:	4621      	mov	r1, r4
 8004332:	008a      	lsls	r2, r1, #2
 8004334:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004338:	f7fb ffba 	bl	80002b0 <__aeabi_uldivmod>
 800433c:	4602      	mov	r2, r0
 800433e:	460b      	mov	r3, r1
 8004340:	4b60      	ldr	r3, [pc, #384]	@ (80044c4 <UART_SetConfig+0x4e4>)
 8004342:	fba3 2302 	umull	r2, r3, r3, r2
 8004346:	095b      	lsrs	r3, r3, #5
 8004348:	011c      	lsls	r4, r3, #4
 800434a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800434e:	2200      	movs	r2, #0
 8004350:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004354:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004358:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800435c:	4642      	mov	r2, r8
 800435e:	464b      	mov	r3, r9
 8004360:	1891      	adds	r1, r2, r2
 8004362:	61b9      	str	r1, [r7, #24]
 8004364:	415b      	adcs	r3, r3
 8004366:	61fb      	str	r3, [r7, #28]
 8004368:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800436c:	4641      	mov	r1, r8
 800436e:	1851      	adds	r1, r2, r1
 8004370:	6139      	str	r1, [r7, #16]
 8004372:	4649      	mov	r1, r9
 8004374:	414b      	adcs	r3, r1
 8004376:	617b      	str	r3, [r7, #20]
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004384:	4659      	mov	r1, fp
 8004386:	00cb      	lsls	r3, r1, #3
 8004388:	4651      	mov	r1, sl
 800438a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800438e:	4651      	mov	r1, sl
 8004390:	00ca      	lsls	r2, r1, #3
 8004392:	4610      	mov	r0, r2
 8004394:	4619      	mov	r1, r3
 8004396:	4603      	mov	r3, r0
 8004398:	4642      	mov	r2, r8
 800439a:	189b      	adds	r3, r3, r2
 800439c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043a0:	464b      	mov	r3, r9
 80043a2:	460a      	mov	r2, r1
 80043a4:	eb42 0303 	adc.w	r3, r2, r3
 80043a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80043b8:	f04f 0200 	mov.w	r2, #0
 80043bc:	f04f 0300 	mov.w	r3, #0
 80043c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80043c4:	4649      	mov	r1, r9
 80043c6:	008b      	lsls	r3, r1, #2
 80043c8:	4641      	mov	r1, r8
 80043ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043ce:	4641      	mov	r1, r8
 80043d0:	008a      	lsls	r2, r1, #2
 80043d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80043d6:	f7fb ff6b 	bl	80002b0 <__aeabi_uldivmod>
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	4611      	mov	r1, r2
 80043e0:	4b38      	ldr	r3, [pc, #224]	@ (80044c4 <UART_SetConfig+0x4e4>)
 80043e2:	fba3 2301 	umull	r2, r3, r3, r1
 80043e6:	095b      	lsrs	r3, r3, #5
 80043e8:	2264      	movs	r2, #100	@ 0x64
 80043ea:	fb02 f303 	mul.w	r3, r2, r3
 80043ee:	1acb      	subs	r3, r1, r3
 80043f0:	011b      	lsls	r3, r3, #4
 80043f2:	3332      	adds	r3, #50	@ 0x32
 80043f4:	4a33      	ldr	r2, [pc, #204]	@ (80044c4 <UART_SetConfig+0x4e4>)
 80043f6:	fba2 2303 	umull	r2, r3, r2, r3
 80043fa:	095b      	lsrs	r3, r3, #5
 80043fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004400:	441c      	add	r4, r3
 8004402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004406:	2200      	movs	r2, #0
 8004408:	673b      	str	r3, [r7, #112]	@ 0x70
 800440a:	677a      	str	r2, [r7, #116]	@ 0x74
 800440c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004410:	4642      	mov	r2, r8
 8004412:	464b      	mov	r3, r9
 8004414:	1891      	adds	r1, r2, r2
 8004416:	60b9      	str	r1, [r7, #8]
 8004418:	415b      	adcs	r3, r3
 800441a:	60fb      	str	r3, [r7, #12]
 800441c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004420:	4641      	mov	r1, r8
 8004422:	1851      	adds	r1, r2, r1
 8004424:	6039      	str	r1, [r7, #0]
 8004426:	4649      	mov	r1, r9
 8004428:	414b      	adcs	r3, r1
 800442a:	607b      	str	r3, [r7, #4]
 800442c:	f04f 0200 	mov.w	r2, #0
 8004430:	f04f 0300 	mov.w	r3, #0
 8004434:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004438:	4659      	mov	r1, fp
 800443a:	00cb      	lsls	r3, r1, #3
 800443c:	4651      	mov	r1, sl
 800443e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004442:	4651      	mov	r1, sl
 8004444:	00ca      	lsls	r2, r1, #3
 8004446:	4610      	mov	r0, r2
 8004448:	4619      	mov	r1, r3
 800444a:	4603      	mov	r3, r0
 800444c:	4642      	mov	r2, r8
 800444e:	189b      	adds	r3, r3, r2
 8004450:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004452:	464b      	mov	r3, r9
 8004454:	460a      	mov	r2, r1
 8004456:	eb42 0303 	adc.w	r3, r2, r3
 800445a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800445c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	663b      	str	r3, [r7, #96]	@ 0x60
 8004466:	667a      	str	r2, [r7, #100]	@ 0x64
 8004468:	f04f 0200 	mov.w	r2, #0
 800446c:	f04f 0300 	mov.w	r3, #0
 8004470:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004474:	4649      	mov	r1, r9
 8004476:	008b      	lsls	r3, r1, #2
 8004478:	4641      	mov	r1, r8
 800447a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800447e:	4641      	mov	r1, r8
 8004480:	008a      	lsls	r2, r1, #2
 8004482:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004486:	f7fb ff13 	bl	80002b0 <__aeabi_uldivmod>
 800448a:	4602      	mov	r2, r0
 800448c:	460b      	mov	r3, r1
 800448e:	4b0d      	ldr	r3, [pc, #52]	@ (80044c4 <UART_SetConfig+0x4e4>)
 8004490:	fba3 1302 	umull	r1, r3, r3, r2
 8004494:	095b      	lsrs	r3, r3, #5
 8004496:	2164      	movs	r1, #100	@ 0x64
 8004498:	fb01 f303 	mul.w	r3, r1, r3
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	011b      	lsls	r3, r3, #4
 80044a0:	3332      	adds	r3, #50	@ 0x32
 80044a2:	4a08      	ldr	r2, [pc, #32]	@ (80044c4 <UART_SetConfig+0x4e4>)
 80044a4:	fba2 2303 	umull	r2, r3, r2, r3
 80044a8:	095b      	lsrs	r3, r3, #5
 80044aa:	f003 020f 	and.w	r2, r3, #15
 80044ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4422      	add	r2, r4
 80044b6:	609a      	str	r2, [r3, #8]
}
 80044b8:	bf00      	nop
 80044ba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80044be:	46bd      	mov	sp, r7
 80044c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044c4:	51eb851f 	.word	0x51eb851f

080044c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044c8:	b084      	sub	sp, #16
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b084      	sub	sp, #16
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	f107 001c 	add.w	r0, r7, #28
 80044d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044da:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d123      	bne.n	800452a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80044f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800450a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800450e:	2b01      	cmp	r3, #1
 8004510:	d105      	bne.n	800451e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 fa9a 	bl	8004a58 <USB_CoreReset>
 8004524:	4603      	mov	r3, r0
 8004526:	73fb      	strb	r3, [r7, #15]
 8004528:	e01b      	b.n	8004562 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 fa8e 	bl	8004a58 <USB_CoreReset>
 800453c:	4603      	mov	r3, r0
 800453e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004540:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004544:	2b00      	cmp	r3, #0
 8004546:	d106      	bne.n	8004556 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800454c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	639a      	str	r2, [r3, #56]	@ 0x38
 8004554:	e005      	b.n	8004562 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800455a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004562:	7fbb      	ldrb	r3, [r7, #30]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d10b      	bne.n	8004580 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f043 0206 	orr.w	r2, r3, #6
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f043 0220 	orr.w	r2, r3, #32
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004580:	7bfb      	ldrb	r3, [r7, #15]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800458c:	b004      	add	sp, #16
 800458e:	4770      	bx	lr

08004590 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f023 0201 	bic.w	r2, r3, #1
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b084      	sub	sp, #16
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
 80045ba:	460b      	mov	r3, r1
 80045bc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80045be:	2300      	movs	r3, #0
 80045c0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045ce:	78fb      	ldrb	r3, [r7, #3]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d115      	bne.n	8004600 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80045e0:	200a      	movs	r0, #10
 80045e2:	f7fd fbb3 	bl	8001d4c <HAL_Delay>
      ms += 10U;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	330a      	adds	r3, #10
 80045ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 fa25 	bl	8004a3c <USB_GetMode>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d01e      	beq.n	8004636 <USB_SetCurrentMode+0x84>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2bc7      	cmp	r3, #199	@ 0xc7
 80045fc:	d9f0      	bls.n	80045e0 <USB_SetCurrentMode+0x2e>
 80045fe:	e01a      	b.n	8004636 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004600:	78fb      	ldrb	r3, [r7, #3]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d115      	bne.n	8004632 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004612:	200a      	movs	r0, #10
 8004614:	f7fd fb9a 	bl	8001d4c <HAL_Delay>
      ms += 10U;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	330a      	adds	r3, #10
 800461c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fa0c 	bl	8004a3c <USB_GetMode>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d005      	beq.n	8004636 <USB_SetCurrentMode+0x84>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2bc7      	cmp	r3, #199	@ 0xc7
 800462e:	d9f0      	bls.n	8004612 <USB_SetCurrentMode+0x60>
 8004630:	e001      	b.n	8004636 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e005      	b.n	8004642 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2bc8      	cmp	r3, #200	@ 0xc8
 800463a:	d101      	bne.n	8004640 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e000      	b.n	8004642 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
	...

0800464c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800464c:	b084      	sub	sp, #16
 800464e:	b580      	push	{r7, lr}
 8004650:	b086      	sub	sp, #24
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
 8004656:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800465a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800465e:	2300      	movs	r3, #0
 8004660:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004666:	2300      	movs	r3, #0
 8004668:	613b      	str	r3, [r7, #16]
 800466a:	e009      	b.n	8004680 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	3340      	adds	r3, #64	@ 0x40
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	2200      	movs	r2, #0
 8004678:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	3301      	adds	r3, #1
 800467e:	613b      	str	r3, [r7, #16]
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	2b0e      	cmp	r3, #14
 8004684:	d9f2      	bls.n	800466c <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004686:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800468a:	2b00      	cmp	r3, #0
 800468c:	d11c      	bne.n	80046c8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800469c:	f043 0302 	orr.w	r3, r3, #2
 80046a0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	e005      	b.n	80046d4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046cc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80046da:	461a      	mov	r2, r3
 80046dc:	2300      	movs	r3, #0
 80046de:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046e0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d10d      	bne.n	8004704 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80046e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d104      	bne.n	80046fa <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80046f0:	2100      	movs	r1, #0
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f968 	bl	80049c8 <USB_SetDevSpeed>
 80046f8:	e008      	b.n	800470c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80046fa:	2101      	movs	r1, #1
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 f963 	bl	80049c8 <USB_SetDevSpeed>
 8004702:	e003      	b.n	800470c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004704:	2103      	movs	r1, #3
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f95e 	bl	80049c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800470c:	2110      	movs	r1, #16
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f8fa 	bl	8004908 <USB_FlushTxFifo>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f924 	bl	800496c <USB_FlushRxFifo>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004734:	461a      	mov	r2, r3
 8004736:	2300      	movs	r3, #0
 8004738:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004740:	461a      	mov	r2, r3
 8004742:	2300      	movs	r3, #0
 8004744:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800474c:	461a      	mov	r2, r3
 800474e:	2300      	movs	r3, #0
 8004750:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004752:	2300      	movs	r3, #0
 8004754:	613b      	str	r3, [r7, #16]
 8004756:	e043      	b.n	80047e0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	015a      	lsls	r2, r3, #5
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	4413      	add	r3, r2
 8004760:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800476a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800476e:	d118      	bne.n	80047a2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10a      	bne.n	800478c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	015a      	lsls	r2, r3, #5
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4413      	add	r3, r2
 800477e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004782:	461a      	mov	r2, r3
 8004784:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004788:	6013      	str	r3, [r2, #0]
 800478a:	e013      	b.n	80047b4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	015a      	lsls	r2, r3, #5
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4413      	add	r3, r2
 8004794:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004798:	461a      	mov	r2, r3
 800479a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800479e:	6013      	str	r3, [r2, #0]
 80047a0:	e008      	b.n	80047b4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	015a      	lsls	r2, r3, #5
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047ae:	461a      	mov	r2, r3
 80047b0:	2300      	movs	r3, #0
 80047b2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	015a      	lsls	r2, r3, #5
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4413      	add	r3, r2
 80047bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047c0:	461a      	mov	r2, r3
 80047c2:	2300      	movs	r3, #0
 80047c4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	015a      	lsls	r2, r3, #5
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	4413      	add	r3, r2
 80047ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047d2:	461a      	mov	r2, r3
 80047d4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80047d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	3301      	adds	r3, #1
 80047de:	613b      	str	r3, [r7, #16]
 80047e0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80047e4:	461a      	mov	r2, r3
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d3b5      	bcc.n	8004758 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047ec:	2300      	movs	r3, #0
 80047ee:	613b      	str	r3, [r7, #16]
 80047f0:	e043      	b.n	800487a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	015a      	lsls	r2, r3, #5
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	4413      	add	r3, r2
 80047fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004804:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004808:	d118      	bne.n	800483c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10a      	bne.n	8004826 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4413      	add	r3, r2
 8004818:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800481c:	461a      	mov	r2, r3
 800481e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	e013      	b.n	800484e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	015a      	lsls	r2, r3, #5
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	4413      	add	r3, r2
 800482e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004832:	461a      	mov	r2, r3
 8004834:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004838:	6013      	str	r3, [r2, #0]
 800483a:	e008      	b.n	800484e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004848:	461a      	mov	r2, r3
 800484a:	2300      	movs	r3, #0
 800484c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	015a      	lsls	r2, r3, #5
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	4413      	add	r3, r2
 8004856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800485a:	461a      	mov	r2, r3
 800485c:	2300      	movs	r3, #0
 800485e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	015a      	lsls	r2, r3, #5
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4413      	add	r3, r2
 8004868:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800486c:	461a      	mov	r2, r3
 800486e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004872:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	3301      	adds	r3, #1
 8004878:	613b      	str	r3, [r7, #16]
 800487a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800487e:	461a      	mov	r2, r3
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	4293      	cmp	r3, r2
 8004884:	d3b5      	bcc.n	80047f2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004894:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004898:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80048a6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80048a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d105      	bne.n	80048bc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	f043 0210 	orr.w	r2, r3, #16
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	699a      	ldr	r2, [r3, #24]
 80048c0:	4b10      	ldr	r3, [pc, #64]	@ (8004904 <USB_DevInit+0x2b8>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80048c8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d005      	beq.n	80048dc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	f043 0208 	orr.w	r2, r3, #8
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80048dc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d107      	bne.n	80048f4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80048ec:	f043 0304 	orr.w	r3, r3, #4
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80048f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3718      	adds	r7, #24
 80048fa:	46bd      	mov	sp, r7
 80048fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004900:	b004      	add	sp, #16
 8004902:	4770      	bx	lr
 8004904:	803c3800 	.word	0x803c3800

08004908 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004912:	2300      	movs	r3, #0
 8004914:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	3301      	adds	r3, #1
 800491a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004922:	d901      	bls.n	8004928 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e01b      	b.n	8004960 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	2b00      	cmp	r3, #0
 800492e:	daf2      	bge.n	8004916 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004930:	2300      	movs	r3, #0
 8004932:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	019b      	lsls	r3, r3, #6
 8004938:	f043 0220 	orr.w	r2, r3, #32
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	3301      	adds	r3, #1
 8004944:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800494c:	d901      	bls.n	8004952 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e006      	b.n	8004960 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	f003 0320 	and.w	r3, r3, #32
 800495a:	2b20      	cmp	r3, #32
 800495c:	d0f0      	beq.n	8004940 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004974:	2300      	movs	r3, #0
 8004976:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	3301      	adds	r3, #1
 800497c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004984:	d901      	bls.n	800498a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e018      	b.n	80049bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	2b00      	cmp	r3, #0
 8004990:	daf2      	bge.n	8004978 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004992:	2300      	movs	r3, #0
 8004994:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2210      	movs	r2, #16
 800499a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	3301      	adds	r3, #1
 80049a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049a8:	d901      	bls.n	80049ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e006      	b.n	80049bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	f003 0310 	and.w	r3, r3, #16
 80049b6:	2b10      	cmp	r3, #16
 80049b8:	d0f0      	beq.n	800499c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3714      	adds	r7, #20
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	460b      	mov	r3, r1
 80049d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	78fb      	ldrb	r3, [r7, #3]
 80049e2:	68f9      	ldr	r1, [r7, #12]
 80049e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049e8:	4313      	orrs	r3, r2
 80049ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3714      	adds	r7, #20
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80049fa:	b480      	push	{r7}
 80049fc:	b085      	sub	sp, #20
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004a14:	f023 0303 	bic.w	r3, r3, #3
 8004a18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a28:	f043 0302 	orr.w	r3, r3, #2
 8004a2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3714      	adds	r7, #20
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	f003 0301 	and.w	r3, r3, #1
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a60:	2300      	movs	r3, #0
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	3301      	adds	r3, #1
 8004a68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a70:	d901      	bls.n	8004a76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e022      	b.n	8004abc <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	daf2      	bge.n	8004a64 <USB_CoreReset+0xc>

  count = 10U;
 8004a7e:	230a      	movs	r3, #10
 8004a80:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8004a82:	e002      	b.n	8004a8a <USB_CoreReset+0x32>
  {
    count--;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	3b01      	subs	r3, #1
 8004a88:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1f9      	bne.n	8004a84 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	f043 0201 	orr.w	r2, r3, #1
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004aa8:	d901      	bls.n	8004aae <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e006      	b.n	8004abc <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d0f0      	beq.n	8004a9c <USB_CoreReset+0x44>

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <__NVIC_SetPriority>:
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	4603      	mov	r3, r0
 8004ad0:	6039      	str	r1, [r7, #0]
 8004ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	db0a      	blt.n	8004af2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	490c      	ldr	r1, [pc, #48]	@ (8004b14 <__NVIC_SetPriority+0x4c>)
 8004ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ae6:	0112      	lsls	r2, r2, #4
 8004ae8:	b2d2      	uxtb	r2, r2
 8004aea:	440b      	add	r3, r1
 8004aec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004af0:	e00a      	b.n	8004b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	4908      	ldr	r1, [pc, #32]	@ (8004b18 <__NVIC_SetPriority+0x50>)
 8004af8:	79fb      	ldrb	r3, [r7, #7]
 8004afa:	f003 030f 	and.w	r3, r3, #15
 8004afe:	3b04      	subs	r3, #4
 8004b00:	0112      	lsls	r2, r2, #4
 8004b02:	b2d2      	uxtb	r2, r2
 8004b04:	440b      	add	r3, r1
 8004b06:	761a      	strb	r2, [r3, #24]
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr
 8004b14:	e000e100 	.word	0xe000e100
 8004b18:	e000ed00 	.word	0xe000ed00

08004b1c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004b20:	2100      	movs	r1, #0
 8004b22:	f06f 0004 	mvn.w	r0, #4
 8004b26:	f7ff ffcf 	bl	8004ac8 <__NVIC_SetPriority>
#endif
}
 8004b2a:	bf00      	nop
 8004b2c:	bd80      	pop	{r7, pc}
	...

08004b30 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b36:	f3ef 8305 	mrs	r3, IPSR
 8004b3a:	603b      	str	r3, [r7, #0]
  return(result);
 8004b3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004b42:	f06f 0305 	mvn.w	r3, #5
 8004b46:	607b      	str	r3, [r7, #4]
 8004b48:	e00c      	b.n	8004b64 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b74 <osKernelInitialize+0x44>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d105      	bne.n	8004b5e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004b52:	4b08      	ldr	r3, [pc, #32]	@ (8004b74 <osKernelInitialize+0x44>)
 8004b54:	2201      	movs	r2, #1
 8004b56:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	607b      	str	r3, [r7, #4]
 8004b5c:	e002      	b.n	8004b64 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004b64:	687b      	ldr	r3, [r7, #4]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	2000065c 	.word	0x2000065c

08004b78 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b7e:	f3ef 8305 	mrs	r3, IPSR
 8004b82:	603b      	str	r3, [r7, #0]
  return(result);
 8004b84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d003      	beq.n	8004b92 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004b8a:	f06f 0305 	mvn.w	r3, #5
 8004b8e:	607b      	str	r3, [r7, #4]
 8004b90:	e010      	b.n	8004bb4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004b92:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc0 <osKernelStart+0x48>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d109      	bne.n	8004bae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004b9a:	f7ff ffbf 	bl	8004b1c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004b9e:	4b08      	ldr	r3, [pc, #32]	@ (8004bc0 <osKernelStart+0x48>)
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004ba4:	f001 ff50 	bl	8006a48 <vTaskStartScheduler>
      stat = osOK;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	607b      	str	r3, [r7, #4]
 8004bac:	e002      	b.n	8004bb4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004bae:	f04f 33ff 	mov.w	r3, #4294967295
 8004bb2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004bb4:	687b      	ldr	r3, [r7, #4]
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	2000065c 	.word	0x2000065c

08004bc4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b08e      	sub	sp, #56	@ 0x38
 8004bc8:	af04      	add	r7, sp, #16
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bd4:	f3ef 8305 	mrs	r3, IPSR
 8004bd8:	617b      	str	r3, [r7, #20]
  return(result);
 8004bda:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d17e      	bne.n	8004cde <osThreadNew+0x11a>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d07b      	beq.n	8004cde <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004be6:	2380      	movs	r3, #128	@ 0x80
 8004be8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004bea:	2318      	movs	r3, #24
 8004bec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8004bf6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d045      	beq.n	8004c8a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <osThreadNew+0x48>
        name = attr->name;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d002      	beq.n	8004c1a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d008      	beq.n	8004c32 <osThreadNew+0x6e>
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	2b38      	cmp	r3, #56	@ 0x38
 8004c24:	d805      	bhi.n	8004c32 <osThreadNew+0x6e>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <osThreadNew+0x72>
        return (NULL);
 8004c32:	2300      	movs	r3, #0
 8004c34:	e054      	b.n	8004ce0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	089b      	lsrs	r3, r3, #2
 8004c44:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00e      	beq.n	8004c6c <osThreadNew+0xa8>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	2b5b      	cmp	r3, #91	@ 0x5b
 8004c54:	d90a      	bls.n	8004c6c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d006      	beq.n	8004c6c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d002      	beq.n	8004c6c <osThreadNew+0xa8>
        mem = 1;
 8004c66:	2301      	movs	r3, #1
 8004c68:	61bb      	str	r3, [r7, #24]
 8004c6a:	e010      	b.n	8004c8e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10c      	bne.n	8004c8e <osThreadNew+0xca>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d108      	bne.n	8004c8e <osThreadNew+0xca>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d104      	bne.n	8004c8e <osThreadNew+0xca>
          mem = 0;
 8004c84:	2300      	movs	r3, #0
 8004c86:	61bb      	str	r3, [r7, #24]
 8004c88:	e001      	b.n	8004c8e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d110      	bne.n	8004cb6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c9c:	9202      	str	r2, [sp, #8]
 8004c9e:	9301      	str	r3, [sp, #4]
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	6a3a      	ldr	r2, [r7, #32]
 8004ca8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f001 fcf0 	bl	8006690 <xTaskCreateStatic>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	613b      	str	r3, [r7, #16]
 8004cb4:	e013      	b.n	8004cde <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d110      	bne.n	8004cde <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	f107 0310 	add.w	r3, r7, #16
 8004cc4:	9301      	str	r3, [sp, #4]
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f001 fd3e 	bl	8006750 <xTaskCreate>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d001      	beq.n	8004cde <osThreadNew+0x11a>
            hTask = NULL;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004cde:	693b      	ldr	r3, [r7, #16]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3728      	adds	r7, #40	@ 0x28
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cf0:	f3ef 8305 	mrs	r3, IPSR
 8004cf4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004cf6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <osDelay+0x1c>
    stat = osErrorISR;
 8004cfc:	f06f 0305 	mvn.w	r3, #5
 8004d00:	60fb      	str	r3, [r7, #12]
 8004d02:	e007      	b.n	8004d14 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004d04:	2300      	movs	r3, #0
 8004d06:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d002      	beq.n	8004d14 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f001 fe64 	bl	80069dc <vTaskDelay>
    }
  }

  return (stat);
 8004d14:	68fb      	ldr	r3, [r7, #12]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b086      	sub	sp, #24
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8004d26:	2300      	movs	r3, #0
 8004d28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d2a:	f3ef 8305 	mrs	r3, IPSR
 8004d2e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d30:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d12d      	bne.n	8004d92 <osEventFlagsNew+0x74>
    mem = -1;
 8004d36:	f04f 33ff 	mov.w	r3, #4294967295
 8004d3a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d015      	beq.n	8004d6e <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d006      	beq.n	8004d58 <osEventFlagsNew+0x3a>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	2b1f      	cmp	r3, #31
 8004d50:	d902      	bls.n	8004d58 <osEventFlagsNew+0x3a>
        mem = 1;
 8004d52:	2301      	movs	r3, #1
 8004d54:	613b      	str	r3, [r7, #16]
 8004d56:	e00c      	b.n	8004d72 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d108      	bne.n	8004d72 <osEventFlagsNew+0x54>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d104      	bne.n	8004d72 <osEventFlagsNew+0x54>
          mem = 0;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	613b      	str	r3, [r7, #16]
 8004d6c:	e001      	b.n	8004d72 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d106      	bne.n	8004d86 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f000 fa49 	bl	8005214 <xEventGroupCreateStatic>
 8004d82:	6178      	str	r0, [r7, #20]
 8004d84:	e005      	b.n	8004d92 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d102      	bne.n	8004d92 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8004d8c:	f000 fa7b 	bl	8005286 <xEventGroupCreate>
 8004d90:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8004d92:	697b      	ldr	r3, [r7, #20]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3718      	adds	r7, #24
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d003      	beq.n	8004db8 <osEventFlagsSet+0x1c>
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004db6:	d303      	bcc.n	8004dc0 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8004db8:	f06f 0303 	mvn.w	r3, #3
 8004dbc:	617b      	str	r3, [r7, #20]
 8004dbe:	e028      	b.n	8004e12 <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dc0:	f3ef 8305 	mrs	r3, IPSR
 8004dc4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d01d      	beq.n	8004e08 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8004dd0:	f107 0308 	add.w	r3, r7, #8
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	6839      	ldr	r1, [r7, #0]
 8004dd8:	6938      	ldr	r0, [r7, #16]
 8004dda:	f000 fc7b 	bl	80056d4 <xEventGroupSetBitsFromISR>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d103      	bne.n	8004dec <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 8004de4:	f06f 0302 	mvn.w	r3, #2
 8004de8:	617b      	str	r3, [r7, #20]
 8004dea:	e012      	b.n	8004e12 <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00d      	beq.n	8004e12 <osEventFlagsSet+0x76>
 8004df6:	4b09      	ldr	r3, [pc, #36]	@ (8004e1c <osEventFlagsSet+0x80>)
 8004df8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	f3bf 8f6f 	isb	sy
 8004e06:	e004      	b.n	8004e12 <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8004e08:	6839      	ldr	r1, [r7, #0]
 8004e0a:	6938      	ldr	r0, [r7, #16]
 8004e0c:	f000 fb9a 	bl	8005544 <xEventGroupSetBits>
 8004e10:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8004e12:	697b      	ldr	r3, [r7, #20]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3718      	adds	r7, #24
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	e000ed04 	.word	0xe000ed04

08004e20 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d003      	beq.n	8004e3c <osEventFlagsClear+0x1c>
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e3a:	d303      	bcc.n	8004e44 <osEventFlagsClear+0x24>
    rflags = (uint32_t)osErrorParameter;
 8004e3c:	f06f 0303 	mvn.w	r3, #3
 8004e40:	617b      	str	r3, [r7, #20]
 8004e42:	e019      	b.n	8004e78 <osEventFlagsClear+0x58>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e44:	f3ef 8305 	mrs	r3, IPSR
 8004e48:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00e      	beq.n	8004e6e <osEventFlagsClear+0x4e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8004e50:	6938      	ldr	r0, [r7, #16]
 8004e52:	f000 fb53 	bl	80054fc <xEventGroupGetBitsFromISR>
 8004e56:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8004e58:	6839      	ldr	r1, [r7, #0]
 8004e5a:	6938      	ldr	r0, [r7, #16]
 8004e5c:	f000 fb3a 	bl	80054d4 <xEventGroupClearBitsFromISR>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d108      	bne.n	8004e78 <osEventFlagsClear+0x58>
      rflags = (uint32_t)osErrorResource;
 8004e66:	f06f 0302 	mvn.w	r3, #2
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	e004      	b.n	8004e78 <osEventFlagsClear+0x58>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8004e6e:	6839      	ldr	r1, [r7, #0]
 8004e70:	6938      	ldr	r0, [r7, #16]
 8004e72:	f000 faf5 	bl	8005460 <xEventGroupClearBits>
 8004e76:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8004e78:	697b      	ldr	r3, [r7, #20]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3718      	adds	r7, #24
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b086      	sub	sp, #24
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if (ef_id == NULL) {
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d102      	bne.n	8004e9a <osEventFlagsGet+0x18>
    rflags = 0U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	617b      	str	r3, [r7, #20]
 8004e98:	e00f      	b.n	8004eba <osEventFlagsGet+0x38>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e9a:	f3ef 8305 	mrs	r3, IPSR
 8004e9e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d004      	beq.n	8004eb0 <osEventFlagsGet+0x2e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8004ea6:	6938      	ldr	r0, [r7, #16]
 8004ea8:	f000 fb28 	bl	80054fc <xEventGroupGetBitsFromISR>
 8004eac:	6178      	str	r0, [r7, #20]
 8004eae:	e004      	b.n	8004eba <osEventFlagsGet+0x38>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	6938      	ldr	r0, [r7, #16]
 8004eb4:	f000 fad4 	bl	8005460 <xEventGroupClearBits>
 8004eb8:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8004eba:	697b      	ldr	r3, [r7, #20]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3718      	adds	r7, #24
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <osEventFlagsWait>:

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b08c      	sub	sp, #48	@ 0x30
 8004ec8:	af02      	add	r7, sp, #8
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
 8004ed0:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <osEventFlagsWait+0x20>
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ee2:	d303      	bcc.n	8004eec <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8004ee4:	f06f 0303 	mvn.w	r3, #3
 8004ee8:	61fb      	str	r3, [r7, #28]
 8004eea:	e04b      	b.n	8004f84 <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004eec:	f3ef 8305 	mrs	r3, IPSR
 8004ef0:	617b      	str	r3, [r7, #20]
  return(result);
 8004ef2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d003      	beq.n	8004f00 <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 8004ef8:	f06f 0305 	mvn.w	r3, #5
 8004efc:	61fb      	str	r3, [r7, #28]
 8004efe:	e041      	b.n	8004f84 <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d002      	beq.n	8004f10 <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f0e:	e001      	b.n	8004f14 <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 8004f10:	2300      	movs	r3, #0
 8004f12:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d002      	beq.n	8004f24 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	623b      	str	r3, [r7, #32]
 8004f22:	e001      	b.n	8004f28 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 8004f24:	2301      	movs	r3, #1
 8004f26:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2e:	6a3a      	ldr	r2, [r7, #32]
 8004f30:	68b9      	ldr	r1, [r7, #8]
 8004f32:	69b8      	ldr	r0, [r7, #24]
 8004f34:	f000 f9c2 	bl	80052bc <xEventGroupWaitBits>
 8004f38:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d010      	beq.n	8004f66 <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	4013      	ands	r3, r2
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d019      	beq.n	8004f84 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 8004f56:	f06f 0301 	mvn.w	r3, #1
 8004f5a:	61fb      	str	r3, [r7, #28]
 8004f5c:	e012      	b.n	8004f84 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004f5e:	f06f 0302 	mvn.w	r3, #2
 8004f62:	61fb      	str	r3, [r7, #28]
 8004f64:	e00e      	b.n	8004f84 <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d109      	bne.n	8004f84 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 8004f76:	f06f 0301 	mvn.w	r3, #1
 8004f7a:	61fb      	str	r3, [r7, #28]
 8004f7c:	e002      	b.n	8004f84 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004f7e:	f06f 0302 	mvn.w	r3, #2
 8004f82:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8004f84:	69fb      	ldr	r3, [r7, #28]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3728      	adds	r7, #40	@ 0x28
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b088      	sub	sp, #32
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004f96:	2300      	movs	r3, #0
 8004f98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f9a:	f3ef 8305 	mrs	r3, IPSR
 8004f9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fa0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d174      	bne.n	8005090 <osMutexNew+0x102>
    if (attr != NULL) {
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d003      	beq.n	8004fb4 <osMutexNew+0x26>
      type = attr->attr_bits;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	61bb      	str	r3, [r7, #24]
 8004fb2:	e001      	b.n	8004fb8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d002      	beq.n	8004fc8 <osMutexNew+0x3a>
      rmtx = 1U;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	617b      	str	r3, [r7, #20]
 8004fc6:	e001      	b.n	8004fcc <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	f003 0308 	and.w	r3, r3, #8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d15c      	bne.n	8005090 <osMutexNew+0x102>
      mem = -1;
 8004fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8004fda:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d015      	beq.n	800500e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d006      	beq.n	8004ff8 <osMutexNew+0x6a>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	2b4f      	cmp	r3, #79	@ 0x4f
 8004ff0:	d902      	bls.n	8004ff8 <osMutexNew+0x6a>
          mem = 1;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	613b      	str	r3, [r7, #16]
 8004ff6:	e00c      	b.n	8005012 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d108      	bne.n	8005012 <osMutexNew+0x84>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d104      	bne.n	8005012 <osMutexNew+0x84>
            mem = 0;
 8005008:	2300      	movs	r3, #0
 800500a:	613b      	str	r3, [r7, #16]
 800500c:	e001      	b.n	8005012 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800500e:	2300      	movs	r3, #0
 8005010:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d112      	bne.n	800503e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d007      	beq.n	800502e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	4619      	mov	r1, r3
 8005024:	2004      	movs	r0, #4
 8005026:	f000 fd94 	bl	8005b52 <xQueueCreateMutexStatic>
 800502a:	61f8      	str	r0, [r7, #28]
 800502c:	e016      	b.n	800505c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	4619      	mov	r1, r3
 8005034:	2001      	movs	r0, #1
 8005036:	f000 fd8c 	bl	8005b52 <xQueueCreateMutexStatic>
 800503a:	61f8      	str	r0, [r7, #28]
 800503c:	e00e      	b.n	800505c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10b      	bne.n	800505c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d004      	beq.n	8005054 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800504a:	2004      	movs	r0, #4
 800504c:	f000 fd69 	bl	8005b22 <xQueueCreateMutex>
 8005050:	61f8      	str	r0, [r7, #28]
 8005052:	e003      	b.n	800505c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005054:	2001      	movs	r0, #1
 8005056:	f000 fd64 	bl	8005b22 <xQueueCreateMutex>
 800505a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00c      	beq.n	800507c <osMutexNew+0xee>
        if (attr != NULL) {
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d003      	beq.n	8005070 <osMutexNew+0xe2>
          name = attr->name;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	60fb      	str	r3, [r7, #12]
 800506e:	e001      	b.n	8005074 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005070:	2300      	movs	r3, #0
 8005072:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005074:	68f9      	ldr	r1, [r7, #12]
 8005076:	69f8      	ldr	r0, [r7, #28]
 8005078:	f001 faac 	bl	80065d4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d006      	beq.n	8005090 <osMutexNew+0x102>
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d003      	beq.n	8005090 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	f043 0301 	orr.w	r3, r3, #1
 800508e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005090:	69fb      	ldr	r3, [r7, #28]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3720      	adds	r7, #32
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800509a:	b580      	push	{r7, lr}
 800509c:	b086      	sub	sp, #24
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f023 0301 	bic.w	r3, r3, #1
 80050aa:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80050b4:	2300      	movs	r3, #0
 80050b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050b8:	f3ef 8305 	mrs	r3, IPSR
 80050bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80050be:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d003      	beq.n	80050cc <osMutexAcquire+0x32>
    stat = osErrorISR;
 80050c4:	f06f 0305 	mvn.w	r3, #5
 80050c8:	617b      	str	r3, [r7, #20]
 80050ca:	e02c      	b.n	8005126 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d103      	bne.n	80050da <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80050d2:	f06f 0303 	mvn.w	r3, #3
 80050d6:	617b      	str	r3, [r7, #20]
 80050d8:	e025      	b.n	8005126 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d011      	beq.n	8005104 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80050e0:	6839      	ldr	r1, [r7, #0]
 80050e2:	6938      	ldr	r0, [r7, #16]
 80050e4:	f000 fd85 	bl	8005bf2 <xQueueTakeMutexRecursive>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d01b      	beq.n	8005126 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d003      	beq.n	80050fc <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80050f4:	f06f 0301 	mvn.w	r3, #1
 80050f8:	617b      	str	r3, [r7, #20]
 80050fa:	e014      	b.n	8005126 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80050fc:	f06f 0302 	mvn.w	r3, #2
 8005100:	617b      	str	r3, [r7, #20]
 8005102:	e010      	b.n	8005126 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005104:	6839      	ldr	r1, [r7, #0]
 8005106:	6938      	ldr	r0, [r7, #16]
 8005108:	f001 f82c 	bl	8006164 <xQueueSemaphoreTake>
 800510c:	4603      	mov	r3, r0
 800510e:	2b01      	cmp	r3, #1
 8005110:	d009      	beq.n	8005126 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d003      	beq.n	8005120 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005118:	f06f 0301 	mvn.w	r3, #1
 800511c:	617b      	str	r3, [r7, #20]
 800511e:	e002      	b.n	8005126 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005120:	f06f 0302 	mvn.w	r3, #2
 8005124:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005126:	697b      	ldr	r3, [r7, #20]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3718      	adds	r7, #24
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f023 0301 	bic.w	r3, r3, #1
 800513e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005148:	2300      	movs	r3, #0
 800514a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800514c:	f3ef 8305 	mrs	r3, IPSR
 8005150:	60bb      	str	r3, [r7, #8]
  return(result);
 8005152:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005154:	2b00      	cmp	r3, #0
 8005156:	d003      	beq.n	8005160 <osMutexRelease+0x30>
    stat = osErrorISR;
 8005158:	f06f 0305 	mvn.w	r3, #5
 800515c:	617b      	str	r3, [r7, #20]
 800515e:	e01f      	b.n	80051a0 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d103      	bne.n	800516e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005166:	f06f 0303 	mvn.w	r3, #3
 800516a:	617b      	str	r3, [r7, #20]
 800516c:	e018      	b.n	80051a0 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d009      	beq.n	8005188 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005174:	6938      	ldr	r0, [r7, #16]
 8005176:	f000 fd07 	bl	8005b88 <xQueueGiveMutexRecursive>
 800517a:	4603      	mov	r3, r0
 800517c:	2b01      	cmp	r3, #1
 800517e:	d00f      	beq.n	80051a0 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005180:	f06f 0302 	mvn.w	r3, #2
 8005184:	617b      	str	r3, [r7, #20]
 8005186:	e00b      	b.n	80051a0 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005188:	2300      	movs	r3, #0
 800518a:	2200      	movs	r2, #0
 800518c:	2100      	movs	r1, #0
 800518e:	6938      	ldr	r0, [r7, #16]
 8005190:	f000 fd66 	bl	8005c60 <xQueueGenericSend>
 8005194:	4603      	mov	r3, r0
 8005196:	2b01      	cmp	r3, #1
 8005198:	d002      	beq.n	80051a0 <osMutexRelease+0x70>
        stat = osErrorResource;
 800519a:	f06f 0302 	mvn.w	r3, #2
 800519e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80051a0:	697b      	ldr	r3, [r7, #20]
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3718      	adds	r7, #24
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
	...

080051ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	4a07      	ldr	r2, [pc, #28]	@ (80051d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80051bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	4a06      	ldr	r2, [pc, #24]	@ (80051dc <vApplicationGetIdleTaskMemory+0x30>)
 80051c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2280      	movs	r2, #128	@ 0x80
 80051c8:	601a      	str	r2, [r3, #0]
}
 80051ca:	bf00      	nop
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	20000660 	.word	0x20000660
 80051dc:	200006bc 	.word	0x200006bc

080051e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	4a07      	ldr	r2, [pc, #28]	@ (800520c <vApplicationGetTimerTaskMemory+0x2c>)
 80051f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	4a06      	ldr	r2, [pc, #24]	@ (8005210 <vApplicationGetTimerTaskMemory+0x30>)
 80051f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80051fe:	601a      	str	r2, [r3, #0]
}
 8005200:	bf00      	nop
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	200008bc 	.word	0x200008bc
 8005210:	20000918 	.word	0x20000918

08005214 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8005214:	b580      	push	{r7, lr}
 8005216:	b086      	sub	sp, #24
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10b      	bne.n	800523a <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005226:	f383 8811 	msr	BASEPRI, r3
 800522a:	f3bf 8f6f 	isb	sy
 800522e:	f3bf 8f4f 	dsb	sy
 8005232:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005234:	bf00      	nop
 8005236:	bf00      	nop
 8005238:	e7fd      	b.n	8005236 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800523a:	2320      	movs	r3, #32
 800523c:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	2b20      	cmp	r3, #32
 8005242:	d00b      	beq.n	800525c <xEventGroupCreateStatic+0x48>
	__asm volatile
 8005244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	60fb      	str	r3, [r7, #12]
}
 8005256:	bf00      	nop
 8005258:	bf00      	nop
 800525a:	e7fd      	b.n	8005258 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00a      	beq.n	800527c <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	2200      	movs	r2, #0
 800526a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	3304      	adds	r3, #4
 8005270:	4618      	mov	r0, r3
 8005272:	f000 fa43 	bl	80056fc <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	2201      	movs	r2, #1
 800527a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800527c:	697b      	ldr	r3, [r7, #20]
	}
 800527e:	4618      	mov	r0, r3
 8005280:	3718      	adds	r7, #24
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005286:	b580      	push	{r7, lr}
 8005288:	b082      	sub	sp, #8
 800528a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800528c:	2020      	movs	r0, #32
 800528e:	f003 f8a5 	bl	80083dc <pvPortMalloc>
 8005292:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00a      	beq.n	80052b0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	3304      	adds	r3, #4
 80052a4:	4618      	mov	r0, r3
 80052a6:	f000 fa29 	bl	80056fc <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80052b0:	687b      	ldr	r3, [r7, #4]
	}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
	...

080052bc <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b090      	sub	sp, #64	@ 0x40
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
 80052c8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80052ce:	2300      	movs	r3, #0
 80052d0:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80052d2:	2300      	movs	r3, #0
 80052d4:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10b      	bne.n	80052f4 <xEventGroupWaitBits+0x38>
	__asm volatile
 80052dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	623b      	str	r3, [r7, #32]
}
 80052ee:	bf00      	nop
 80052f0:	bf00      	nop
 80052f2:	e7fd      	b.n	80052f0 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052fa:	d30b      	bcc.n	8005314 <xEventGroupWaitBits+0x58>
	__asm volatile
 80052fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005300:	f383 8811 	msr	BASEPRI, r3
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	61fb      	str	r3, [r7, #28]
}
 800530e:	bf00      	nop
 8005310:	bf00      	nop
 8005312:	e7fd      	b.n	8005310 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10b      	bne.n	8005332 <xEventGroupWaitBits+0x76>
	__asm volatile
 800531a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800531e:	f383 8811 	msr	BASEPRI, r3
 8005322:	f3bf 8f6f 	isb	sy
 8005326:	f3bf 8f4f 	dsb	sy
 800532a:	61bb      	str	r3, [r7, #24]
}
 800532c:	bf00      	nop
 800532e:	bf00      	nop
 8005330:	e7fd      	b.n	800532e <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005332:	f002 f889 	bl	8007448 <xTaskGetSchedulerState>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d102      	bne.n	8005342 <xEventGroupWaitBits+0x86>
 800533c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <xEventGroupWaitBits+0x8a>
 8005342:	2301      	movs	r3, #1
 8005344:	e000      	b.n	8005348 <xEventGroupWaitBits+0x8c>
 8005346:	2300      	movs	r3, #0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10b      	bne.n	8005364 <xEventGroupWaitBits+0xa8>
	__asm volatile
 800534c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005350:	f383 8811 	msr	BASEPRI, r3
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	617b      	str	r3, [r7, #20]
}
 800535e:	bf00      	nop
 8005360:	bf00      	nop
 8005362:	e7fd      	b.n	8005360 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 8005364:	f001 fbd8 	bl	8006b18 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8005368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	68b9      	ldr	r1, [r7, #8]
 8005372:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005374:	f000 f98c 	bl	8005690 <prvTestWaitCondition>
 8005378:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800537a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00e      	beq.n	800539e <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8005380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005382:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8005384:	2300      	movs	r3, #0
 8005386:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d028      	beq.n	80053e0 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800538e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	43db      	mvns	r3, r3
 8005396:	401a      	ands	r2, r3
 8005398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	e020      	b.n	80053e0 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800539e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d104      	bne.n	80053ae <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80053a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 80053a8:	2301      	movs	r3, #1
 80053aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80053ac:	e018      	b.n	80053e0 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80053b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053ba:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80053c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80053c8:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80053ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053cc:	1d18      	adds	r0, r3, #4
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053d2:	4313      	orrs	r3, r2
 80053d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053d6:	4619      	mov	r1, r3
 80053d8:	f001 fd98 	bl	8006f0c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80053dc:	2300      	movs	r3, #0
 80053de:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80053e0:	f001 fba8 	bl	8006b34 <xTaskResumeAll>
 80053e4:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80053e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d031      	beq.n	8005450 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 80053ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d107      	bne.n	8005402 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 80053f2:	4b1a      	ldr	r3, [pc, #104]	@ (800545c <xEventGroupWaitBits+0x1a0>)
 80053f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	f3bf 8f4f 	dsb	sy
 80053fe:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8005402:	f002 f99b 	bl	800773c <uxTaskResetEventItemValue>
 8005406:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8005408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800540a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d11a      	bne.n	8005448 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 8005412:	f002 fec1 	bl	8008198 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8005416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800541c:	683a      	ldr	r2, [r7, #0]
 800541e:	68b9      	ldr	r1, [r7, #8]
 8005420:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005422:	f000 f935 	bl	8005690 <prvTestWaitCondition>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d009      	beq.n	8005440 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d006      	beq.n	8005440 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	43db      	mvns	r3, r3
 800543a:	401a      	ands	r2, r3
 800543c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800543e:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8005440:	2301      	movs	r3, #1
 8005442:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8005444:	f002 feda 	bl	80081fc <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800544a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800544e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8005450:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005452:	4618      	mov	r0, r3
 8005454:	3740      	adds	r7, #64	@ 0x40
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	e000ed04 	.word	0xe000ed04

08005460 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10b      	bne.n	800548c <xEventGroupClearBits+0x2c>
	__asm volatile
 8005474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005478:	f383 8811 	msr	BASEPRI, r3
 800547c:	f3bf 8f6f 	isb	sy
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	60fb      	str	r3, [r7, #12]
}
 8005486:	bf00      	nop
 8005488:	bf00      	nop
 800548a:	e7fd      	b.n	8005488 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005492:	d30b      	bcc.n	80054ac <xEventGroupClearBits+0x4c>
	__asm volatile
 8005494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	60bb      	str	r3, [r7, #8]
}
 80054a6:	bf00      	nop
 80054a8:	bf00      	nop
 80054aa:	e7fd      	b.n	80054a8 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80054ac:	f002 fe74 	bl	8008198 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	43db      	mvns	r3, r3
 80054be:	401a      	ands	r2, r3
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80054c4:	f002 fe9a 	bl	80081fc <vPortExitCritical>

	return uxReturn;
 80054c8:	693b      	ldr	r3, [r7, #16]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3718      	adds	r7, #24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
	...

080054d4 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80054de:	2300      	movs	r3, #0
 80054e0:	683a      	ldr	r2, [r7, #0]
 80054e2:	6879      	ldr	r1, [r7, #4]
 80054e4:	4804      	ldr	r0, [pc, #16]	@ (80054f8 <xEventGroupClearBitsFromISR+0x24>)
 80054e6:	f002 fd03 	bl	8007ef0 <xTimerPendFunctionCallFromISR>
 80054ea:	60f8      	str	r0, [r7, #12]

		return xReturn;
 80054ec:	68fb      	ldr	r3, [r7, #12]
	}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	08005677 	.word	0x08005677

080054fc <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 80054fc:	b480      	push	{r7}
 80054fe:	b089      	sub	sp, #36	@ 0x24
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005508:	f3ef 8211 	mrs	r2, BASEPRI
 800550c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005510:	f383 8811 	msr	BASEPRI, r3
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	60fa      	str	r2, [r7, #12]
 800551e:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005520:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005522:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	617b      	str	r3, [r7, #20]
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005534:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8005536:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8005538:	4618      	mov	r0, r3
 800553a:	3724      	adds	r7, #36	@ 0x24
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b08e      	sub	sp, #56	@ 0x38
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800554e:	2300      	movs	r3, #0
 8005550:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8005556:	2300      	movs	r3, #0
 8005558:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10b      	bne.n	8005578 <xEventGroupSetBits+0x34>
	__asm volatile
 8005560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005564:	f383 8811 	msr	BASEPRI, r3
 8005568:	f3bf 8f6f 	isb	sy
 800556c:	f3bf 8f4f 	dsb	sy
 8005570:	613b      	str	r3, [r7, #16]
}
 8005572:	bf00      	nop
 8005574:	bf00      	nop
 8005576:	e7fd      	b.n	8005574 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800557e:	d30b      	bcc.n	8005598 <xEventGroupSetBits+0x54>
	__asm volatile
 8005580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005584:	f383 8811 	msr	BASEPRI, r3
 8005588:	f3bf 8f6f 	isb	sy
 800558c:	f3bf 8f4f 	dsb	sy
 8005590:	60fb      	str	r3, [r7, #12]
}
 8005592:	bf00      	nop
 8005594:	bf00      	nop
 8005596:	e7fd      	b.n	8005594 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8005598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800559a:	3304      	adds	r3, #4
 800559c:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800559e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a0:	3308      	adds	r3, #8
 80055a2:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80055a4:	f001 fab8 	bl	8006b18 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80055a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80055ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	431a      	orrs	r2, r3
 80055b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b8:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80055ba:	e03c      	b.n	8005636 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 80055bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80055c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80055c8:	2300      	movs	r3, #0
 80055ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80055d2:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80055da:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d108      	bne.n	80055f8 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80055e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	4013      	ands	r3, r2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00b      	beq.n	800560a <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 80055f2:	2301      	movs	r3, #1
 80055f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055f6:	e008      	b.n	800560a <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80055f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	4013      	ands	r3, r2
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	429a      	cmp	r2, r3
 8005604:	d101      	bne.n	800560a <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8005606:	2301      	movs	r3, #1
 8005608:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800560a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800560c:	2b00      	cmp	r3, #0
 800560e:	d010      	beq.n	8005632 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800561a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	4313      	orrs	r3, r2
 8005620:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800562a:	4619      	mov	r1, r3
 800562c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800562e:	f001 fd3b 	bl	80070a8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8005636:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005638:	6a3b      	ldr	r3, [r7, #32]
 800563a:	429a      	cmp	r2, r3
 800563c:	d1be      	bne.n	80055bc <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800563e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005644:	43db      	mvns	r3, r3
 8005646:	401a      	ands	r2, r3
 8005648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800564a:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800564c:	f001 fa72 	bl	8006b34 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8005650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005652:	681b      	ldr	r3, [r3, #0]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3738      	adds	r7, #56	@ 0x38
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8005666:	6839      	ldr	r1, [r7, #0]
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f7ff ff6b 	bl	8005544 <xEventGroupSetBits>
}
 800566e:	bf00      	nop
 8005670:	3708      	adds	r7, #8
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b082      	sub	sp, #8
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
 800567e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8005680:	6839      	ldr	r1, [r7, #0]
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7ff feec 	bl	8005460 <xEventGroupClearBits>
}
 8005688:	bf00      	nop
 800568a:	3708      	adds	r7, #8
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8005690:	b480      	push	{r7}
 8005692:	b087      	sub	sp, #28
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800569c:	2300      	movs	r3, #0
 800569e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d107      	bne.n	80056b6 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	4013      	ands	r3, r2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00a      	beq.n	80056c6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80056b0:	2301      	movs	r3, #1
 80056b2:	617b      	str	r3, [r7, #20]
 80056b4:	e007      	b.n	80056c6 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	4013      	ands	r3, r2
 80056bc:	68ba      	ldr	r2, [r7, #8]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d101      	bne.n	80056c6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80056c2:	2301      	movs	r3, #1
 80056c4:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80056c6:	697b      	ldr	r3, [r7, #20]
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	371c      	adds	r7, #28
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b086      	sub	sp, #24
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	68f9      	ldr	r1, [r7, #12]
 80056e6:	4804      	ldr	r0, [pc, #16]	@ (80056f8 <xEventGroupSetBitsFromISR+0x24>)
 80056e8:	f002 fc02 	bl	8007ef0 <xTimerPendFunctionCallFromISR>
 80056ec:	6178      	str	r0, [r7, #20]

		return xReturn;
 80056ee:	697b      	ldr	r3, [r7, #20]
	}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3718      	adds	r7, #24
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	0800565d 	.word	0x0800565d

080056fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f103 0208 	add.w	r2, r3, #8
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f04f 32ff 	mov.w	r2, #4294967295
 8005714:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f103 0208 	add.w	r2, r3, #8
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f103 0208 	add.w	r2, r3, #8
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800574a:	bf00      	nop
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005756:	b480      	push	{r7}
 8005758:	b085      	sub	sp, #20
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
 800575e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	689a      	ldr	r2, [r3, #8]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	1c5a      	adds	r2, r3, #1
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	601a      	str	r2, [r3, #0]
}
 8005792:	bf00      	nop
 8005794:	3714      	adds	r7, #20
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800579e:	b480      	push	{r7}
 80057a0:	b085      	sub	sp, #20
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
 80057a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b4:	d103      	bne.n	80057be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	e00c      	b.n	80057d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	3308      	adds	r3, #8
 80057c2:	60fb      	str	r3, [r7, #12]
 80057c4:	e002      	b.n	80057cc <vListInsert+0x2e>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	60fb      	str	r3, [r7, #12]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d2f6      	bcs.n	80057c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	683a      	ldr	r2, [r7, #0]
 80057f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	1c5a      	adds	r2, r3, #1
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	601a      	str	r2, [r3, #0]
}
 8005804:	bf00      	nop
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	6892      	ldr	r2, [r2, #8]
 8005826:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	6852      	ldr	r2, [r2, #4]
 8005830:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	429a      	cmp	r2, r3
 800583a:	d103      	bne.n	8005844 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689a      	ldr	r2, [r3, #8]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	1e5a      	subs	r2, r3, #1
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10b      	bne.n	8005890 <xQueueGenericReset+0x2c>
	__asm volatile
 8005878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800587c:	f383 8811 	msr	BASEPRI, r3
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	60bb      	str	r3, [r7, #8]
}
 800588a:	bf00      	nop
 800588c:	bf00      	nop
 800588e:	e7fd      	b.n	800588c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005890:	f002 fc82 	bl	8008198 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800589c:	68f9      	ldr	r1, [r7, #12]
 800589e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80058a0:	fb01 f303 	mul.w	r3, r1, r3
 80058a4:	441a      	add	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058c0:	3b01      	subs	r3, #1
 80058c2:	68f9      	ldr	r1, [r7, #12]
 80058c4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80058c6:	fb01 f303 	mul.w	r3, r1, r3
 80058ca:	441a      	add	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	22ff      	movs	r2, #255	@ 0xff
 80058d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	22ff      	movs	r2, #255	@ 0xff
 80058dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d114      	bne.n	8005910 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d01a      	beq.n	8005924 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	3310      	adds	r3, #16
 80058f2:	4618      	mov	r0, r3
 80058f4:	f001 fb74 	bl	8006fe0 <xTaskRemoveFromEventList>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d012      	beq.n	8005924 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80058fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005934 <xQueueGenericReset+0xd0>)
 8005900:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005904:	601a      	str	r2, [r3, #0]
 8005906:	f3bf 8f4f 	dsb	sy
 800590a:	f3bf 8f6f 	isb	sy
 800590e:	e009      	b.n	8005924 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	3310      	adds	r3, #16
 8005914:	4618      	mov	r0, r3
 8005916:	f7ff fef1 	bl	80056fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	3324      	adds	r3, #36	@ 0x24
 800591e:	4618      	mov	r0, r3
 8005920:	f7ff feec 	bl	80056fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005924:	f002 fc6a 	bl	80081fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005928:	2301      	movs	r3, #1
}
 800592a:	4618      	mov	r0, r3
 800592c:	3710      	adds	r7, #16
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	e000ed04 	.word	0xe000ed04

08005938 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005938:	b580      	push	{r7, lr}
 800593a:	b08e      	sub	sp, #56	@ 0x38
 800593c:	af02      	add	r7, sp, #8
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
 8005944:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10b      	bne.n	8005964 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800594c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005950:	f383 8811 	msr	BASEPRI, r3
 8005954:	f3bf 8f6f 	isb	sy
 8005958:	f3bf 8f4f 	dsb	sy
 800595c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800595e:	bf00      	nop
 8005960:	bf00      	nop
 8005962:	e7fd      	b.n	8005960 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d10b      	bne.n	8005982 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800596a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800596e:	f383 8811 	msr	BASEPRI, r3
 8005972:	f3bf 8f6f 	isb	sy
 8005976:	f3bf 8f4f 	dsb	sy
 800597a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800597c:	bf00      	nop
 800597e:	bf00      	nop
 8005980:	e7fd      	b.n	800597e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d002      	beq.n	800598e <xQueueGenericCreateStatic+0x56>
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <xQueueGenericCreateStatic+0x5a>
 800598e:	2301      	movs	r3, #1
 8005990:	e000      	b.n	8005994 <xQueueGenericCreateStatic+0x5c>
 8005992:	2300      	movs	r3, #0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10b      	bne.n	80059b0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800599c:	f383 8811 	msr	BASEPRI, r3
 80059a0:	f3bf 8f6f 	isb	sy
 80059a4:	f3bf 8f4f 	dsb	sy
 80059a8:	623b      	str	r3, [r7, #32]
}
 80059aa:	bf00      	nop
 80059ac:	bf00      	nop
 80059ae:	e7fd      	b.n	80059ac <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d102      	bne.n	80059bc <xQueueGenericCreateStatic+0x84>
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d101      	bne.n	80059c0 <xQueueGenericCreateStatic+0x88>
 80059bc:	2301      	movs	r3, #1
 80059be:	e000      	b.n	80059c2 <xQueueGenericCreateStatic+0x8a>
 80059c0:	2300      	movs	r3, #0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10b      	bne.n	80059de <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80059c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ca:	f383 8811 	msr	BASEPRI, r3
 80059ce:	f3bf 8f6f 	isb	sy
 80059d2:	f3bf 8f4f 	dsb	sy
 80059d6:	61fb      	str	r3, [r7, #28]
}
 80059d8:	bf00      	nop
 80059da:	bf00      	nop
 80059dc:	e7fd      	b.n	80059da <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80059de:	2350      	movs	r3, #80	@ 0x50
 80059e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	2b50      	cmp	r3, #80	@ 0x50
 80059e6:	d00b      	beq.n	8005a00 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80059e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ec:	f383 8811 	msr	BASEPRI, r3
 80059f0:	f3bf 8f6f 	isb	sy
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	61bb      	str	r3, [r7, #24]
}
 80059fa:	bf00      	nop
 80059fc:	bf00      	nop
 80059fe:	e7fd      	b.n	80059fc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005a00:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00d      	beq.n	8005a28 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a14:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a1a:	9300      	str	r3, [sp, #0]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	68b9      	ldr	r1, [r7, #8]
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f000 f840 	bl	8005aa8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3730      	adds	r7, #48	@ 0x30
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b08a      	sub	sp, #40	@ 0x28
 8005a36:	af02      	add	r7, sp, #8
 8005a38:	60f8      	str	r0, [r7, #12]
 8005a3a:	60b9      	str	r1, [r7, #8]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10b      	bne.n	8005a5e <xQueueGenericCreate+0x2c>
	__asm volatile
 8005a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a4a:	f383 8811 	msr	BASEPRI, r3
 8005a4e:	f3bf 8f6f 	isb	sy
 8005a52:	f3bf 8f4f 	dsb	sy
 8005a56:	613b      	str	r3, [r7, #16]
}
 8005a58:	bf00      	nop
 8005a5a:	bf00      	nop
 8005a5c:	e7fd      	b.n	8005a5a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	fb02 f303 	mul.w	r3, r2, r3
 8005a66:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	3350      	adds	r3, #80	@ 0x50
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f002 fcb5 	bl	80083dc <pvPortMalloc>
 8005a72:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d011      	beq.n	8005a9e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	3350      	adds	r3, #80	@ 0x50
 8005a82:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a8c:	79fa      	ldrb	r2, [r7, #7]
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	4613      	mov	r3, r2
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	68b9      	ldr	r1, [r7, #8]
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 f805 	bl	8005aa8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a9e:	69bb      	ldr	r3, [r7, #24]
	}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3720      	adds	r7, #32
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
 8005ab4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d103      	bne.n	8005ac4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	69ba      	ldr	r2, [r7, #24]
 8005ac0:	601a      	str	r2, [r3, #0]
 8005ac2:	e002      	b.n	8005aca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005ad6:	2101      	movs	r1, #1
 8005ad8:	69b8      	ldr	r0, [r7, #24]
 8005ada:	f7ff fec3 	bl	8005864 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	78fa      	ldrb	r2, [r7, #3]
 8005ae2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005ae6:	bf00      	nop
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b082      	sub	sp, #8
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00e      	beq.n	8005b1a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005b0e:	2300      	movs	r3, #0
 8005b10:	2200      	movs	r2, #0
 8005b12:	2100      	movs	r1, #0
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 f8a3 	bl	8005c60 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005b1a:	bf00      	nop
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b086      	sub	sp, #24
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	4603      	mov	r3, r0
 8005b2a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	617b      	str	r3, [r7, #20]
 8005b30:	2300      	movs	r3, #0
 8005b32:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005b34:	79fb      	ldrb	r3, [r7, #7]
 8005b36:	461a      	mov	r2, r3
 8005b38:	6939      	ldr	r1, [r7, #16]
 8005b3a:	6978      	ldr	r0, [r7, #20]
 8005b3c:	f7ff ff79 	bl	8005a32 <xQueueGenericCreate>
 8005b40:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f7ff ffd3 	bl	8005aee <prvInitialiseMutex>

		return xNewQueue;
 8005b48:	68fb      	ldr	r3, [r7, #12]
	}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3718      	adds	r7, #24
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b088      	sub	sp, #32
 8005b56:	af02      	add	r7, sp, #8
 8005b58:	4603      	mov	r3, r0
 8005b5a:	6039      	str	r1, [r7, #0]
 8005b5c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	617b      	str	r3, [r7, #20]
 8005b62:	2300      	movs	r3, #0
 8005b64:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005b66:	79fb      	ldrb	r3, [r7, #7]
 8005b68:	9300      	str	r3, [sp, #0]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	6939      	ldr	r1, [r7, #16]
 8005b70:	6978      	ldr	r0, [r7, #20]
 8005b72:	f7ff fee1 	bl	8005938 <xQueueGenericCreateStatic>
 8005b76:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f7ff ffb8 	bl	8005aee <prvInitialiseMutex>

		return xNewQueue;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
	}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3718      	adds	r7, #24
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005b88:	b590      	push	{r4, r7, lr}
 8005b8a:	b087      	sub	sp, #28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10b      	bne.n	8005bb2 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8005b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b9e:	f383 8811 	msr	BASEPRI, r3
 8005ba2:	f3bf 8f6f 	isb	sy
 8005ba6:	f3bf 8f4f 	dsb	sy
 8005baa:	60fb      	str	r3, [r7, #12]
}
 8005bac:	bf00      	nop
 8005bae:	bf00      	nop
 8005bb0:	e7fd      	b.n	8005bae <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	689c      	ldr	r4, [r3, #8]
 8005bb6:	f001 fc37 	bl	8007428 <xTaskGetCurrentTaskHandle>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	429c      	cmp	r4, r3
 8005bbe:	d111      	bne.n	8005be4 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	1e5a      	subs	r2, r3, #1
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d105      	bne.n	8005bde <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	6938      	ldr	r0, [r7, #16]
 8005bda:	f000 f841 	bl	8005c60 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005bde:	2301      	movs	r3, #1
 8005be0:	617b      	str	r3, [r7, #20]
 8005be2:	e001      	b.n	8005be8 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005be4:	2300      	movs	r3, #0
 8005be6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005be8:	697b      	ldr	r3, [r7, #20]
	}
 8005bea:	4618      	mov	r0, r3
 8005bec:	371c      	adds	r7, #28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd90      	pop	{r4, r7, pc}

08005bf2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005bf2:	b590      	push	{r4, r7, lr}
 8005bf4:	b087      	sub	sp, #28
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
 8005bfa:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10b      	bne.n	8005c1e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8005c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c0a:	f383 8811 	msr	BASEPRI, r3
 8005c0e:	f3bf 8f6f 	isb	sy
 8005c12:	f3bf 8f4f 	dsb	sy
 8005c16:	60fb      	str	r3, [r7, #12]
}
 8005c18:	bf00      	nop
 8005c1a:	bf00      	nop
 8005c1c:	e7fd      	b.n	8005c1a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	689c      	ldr	r4, [r3, #8]
 8005c22:	f001 fc01 	bl	8007428 <xTaskGetCurrentTaskHandle>
 8005c26:	4603      	mov	r3, r0
 8005c28:	429c      	cmp	r4, r3
 8005c2a:	d107      	bne.n	8005c3c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	1c5a      	adds	r2, r3, #1
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005c36:	2301      	movs	r3, #1
 8005c38:	617b      	str	r3, [r7, #20]
 8005c3a:	e00c      	b.n	8005c56 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005c3c:	6839      	ldr	r1, [r7, #0]
 8005c3e:	6938      	ldr	r0, [r7, #16]
 8005c40:	f000 fa90 	bl	8006164 <xQueueSemaphoreTake>
 8005c44:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d004      	beq.n	8005c56 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	1c5a      	adds	r2, r3, #1
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005c56:	697b      	ldr	r3, [r7, #20]
	}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	371c      	adds	r7, #28
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd90      	pop	{r4, r7, pc}

08005c60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b08e      	sub	sp, #56	@ 0x38
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
 8005c6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10b      	bne.n	8005c94 <xQueueGenericSend+0x34>
	__asm volatile
 8005c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c80:	f383 8811 	msr	BASEPRI, r3
 8005c84:	f3bf 8f6f 	isb	sy
 8005c88:	f3bf 8f4f 	dsb	sy
 8005c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005c8e:	bf00      	nop
 8005c90:	bf00      	nop
 8005c92:	e7fd      	b.n	8005c90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d103      	bne.n	8005ca2 <xQueueGenericSend+0x42>
 8005c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <xQueueGenericSend+0x46>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e000      	b.n	8005ca8 <xQueueGenericSend+0x48>
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d10b      	bne.n	8005cc4 <xQueueGenericSend+0x64>
	__asm volatile
 8005cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb0:	f383 8811 	msr	BASEPRI, r3
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005cbe:	bf00      	nop
 8005cc0:	bf00      	nop
 8005cc2:	e7fd      	b.n	8005cc0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d103      	bne.n	8005cd2 <xQueueGenericSend+0x72>
 8005cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d101      	bne.n	8005cd6 <xQueueGenericSend+0x76>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e000      	b.n	8005cd8 <xQueueGenericSend+0x78>
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d10b      	bne.n	8005cf4 <xQueueGenericSend+0x94>
	__asm volatile
 8005cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce0:	f383 8811 	msr	BASEPRI, r3
 8005ce4:	f3bf 8f6f 	isb	sy
 8005ce8:	f3bf 8f4f 	dsb	sy
 8005cec:	623b      	str	r3, [r7, #32]
}
 8005cee:	bf00      	nop
 8005cf0:	bf00      	nop
 8005cf2:	e7fd      	b.n	8005cf0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cf4:	f001 fba8 	bl	8007448 <xTaskGetSchedulerState>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d102      	bne.n	8005d04 <xQueueGenericSend+0xa4>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d101      	bne.n	8005d08 <xQueueGenericSend+0xa8>
 8005d04:	2301      	movs	r3, #1
 8005d06:	e000      	b.n	8005d0a <xQueueGenericSend+0xaa>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10b      	bne.n	8005d26 <xQueueGenericSend+0xc6>
	__asm volatile
 8005d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d12:	f383 8811 	msr	BASEPRI, r3
 8005d16:	f3bf 8f6f 	isb	sy
 8005d1a:	f3bf 8f4f 	dsb	sy
 8005d1e:	61fb      	str	r3, [r7, #28]
}
 8005d20:	bf00      	nop
 8005d22:	bf00      	nop
 8005d24:	e7fd      	b.n	8005d22 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d26:	f002 fa37 	bl	8008198 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d302      	bcc.n	8005d3c <xQueueGenericSend+0xdc>
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d129      	bne.n	8005d90 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d3c:	683a      	ldr	r2, [r7, #0]
 8005d3e:	68b9      	ldr	r1, [r7, #8]
 8005d40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d42:	f000 fb37 	bl	80063b4 <prvCopyDataToQueue>
 8005d46:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d010      	beq.n	8005d72 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d52:	3324      	adds	r3, #36	@ 0x24
 8005d54:	4618      	mov	r0, r3
 8005d56:	f001 f943 	bl	8006fe0 <xTaskRemoveFromEventList>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d013      	beq.n	8005d88 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d60:	4b3f      	ldr	r3, [pc, #252]	@ (8005e60 <xQueueGenericSend+0x200>)
 8005d62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	e00a      	b.n	8005d88 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d007      	beq.n	8005d88 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d78:	4b39      	ldr	r3, [pc, #228]	@ (8005e60 <xQueueGenericSend+0x200>)
 8005d7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d7e:	601a      	str	r2, [r3, #0]
 8005d80:	f3bf 8f4f 	dsb	sy
 8005d84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005d88:	f002 fa38 	bl	80081fc <vPortExitCritical>
				return pdPASS;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e063      	b.n	8005e58 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d103      	bne.n	8005d9e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d96:	f002 fa31 	bl	80081fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	e05c      	b.n	8005e58 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d106      	bne.n	8005db2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005da4:	f107 0314 	add.w	r3, r7, #20
 8005da8:	4618      	mov	r0, r3
 8005daa:	f001 f9e1 	bl	8007170 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005dae:	2301      	movs	r3, #1
 8005db0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005db2:	f002 fa23 	bl	80081fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005db6:	f000 feaf 	bl	8006b18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005dba:	f002 f9ed 	bl	8008198 <vPortEnterCritical>
 8005dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005dc4:	b25b      	sxtb	r3, r3
 8005dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dca:	d103      	bne.n	8005dd4 <xQueueGenericSend+0x174>
 8005dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005dda:	b25b      	sxtb	r3, r3
 8005ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de0:	d103      	bne.n	8005dea <xQueueGenericSend+0x18a>
 8005de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005dea:	f002 fa07 	bl	80081fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005dee:	1d3a      	adds	r2, r7, #4
 8005df0:	f107 0314 	add.w	r3, r7, #20
 8005df4:	4611      	mov	r1, r2
 8005df6:	4618      	mov	r0, r3
 8005df8:	f001 f9d0 	bl	800719c <xTaskCheckForTimeOut>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d124      	bne.n	8005e4c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005e02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e04:	f000 fbce 	bl	80065a4 <prvIsQueueFull>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d018      	beq.n	8005e40 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e10:	3310      	adds	r3, #16
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	4611      	mov	r1, r2
 8005e16:	4618      	mov	r0, r3
 8005e18:	f001 f852 	bl	8006ec0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005e1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e1e:	f000 fb59 	bl	80064d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005e22:	f000 fe87 	bl	8006b34 <xTaskResumeAll>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f47f af7c 	bne.w	8005d26 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8005e60 <xQueueGenericSend+0x200>)
 8005e30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e34:	601a      	str	r2, [r3, #0]
 8005e36:	f3bf 8f4f 	dsb	sy
 8005e3a:	f3bf 8f6f 	isb	sy
 8005e3e:	e772      	b.n	8005d26 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005e40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e42:	f000 fb47 	bl	80064d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e46:	f000 fe75 	bl	8006b34 <xTaskResumeAll>
 8005e4a:	e76c      	b.n	8005d26 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005e4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e4e:	f000 fb41 	bl	80064d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e52:	f000 fe6f 	bl	8006b34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005e56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3738      	adds	r7, #56	@ 0x38
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	e000ed04 	.word	0xe000ed04

08005e64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b090      	sub	sp, #64	@ 0x40
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
 8005e70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10b      	bne.n	8005e94 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e80:	f383 8811 	msr	BASEPRI, r3
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005e8e:	bf00      	nop
 8005e90:	bf00      	nop
 8005e92:	e7fd      	b.n	8005e90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d103      	bne.n	8005ea2 <xQueueGenericSendFromISR+0x3e>
 8005e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <xQueueGenericSendFromISR+0x42>
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e000      	b.n	8005ea8 <xQueueGenericSendFromISR+0x44>
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10b      	bne.n	8005ec4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb0:	f383 8811 	msr	BASEPRI, r3
 8005eb4:	f3bf 8f6f 	isb	sy
 8005eb8:	f3bf 8f4f 	dsb	sy
 8005ebc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005ebe:	bf00      	nop
 8005ec0:	bf00      	nop
 8005ec2:	e7fd      	b.n	8005ec0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d103      	bne.n	8005ed2 <xQueueGenericSendFromISR+0x6e>
 8005eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d101      	bne.n	8005ed6 <xQueueGenericSendFromISR+0x72>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e000      	b.n	8005ed8 <xQueueGenericSendFromISR+0x74>
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10b      	bne.n	8005ef4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee0:	f383 8811 	msr	BASEPRI, r3
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	623b      	str	r3, [r7, #32]
}
 8005eee:	bf00      	nop
 8005ef0:	bf00      	nop
 8005ef2:	e7fd      	b.n	8005ef0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ef4:	f002 fa30 	bl	8008358 <vPortValidateInterruptPriority>
	__asm volatile
 8005ef8:	f3ef 8211 	mrs	r2, BASEPRI
 8005efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f00:	f383 8811 	msr	BASEPRI, r3
 8005f04:	f3bf 8f6f 	isb	sy
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	61fa      	str	r2, [r7, #28]
 8005f0e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8005f10:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f12:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d302      	bcc.n	8005f26 <xQueueGenericSendFromISR+0xc2>
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d12f      	bne.n	8005f86 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f36:	683a      	ldr	r2, [r7, #0]
 8005f38:	68b9      	ldr	r1, [r7, #8]
 8005f3a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005f3c:	f000 fa3a 	bl	80063b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f40:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f48:	d112      	bne.n	8005f70 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d016      	beq.n	8005f80 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f54:	3324      	adds	r3, #36	@ 0x24
 8005f56:	4618      	mov	r0, r3
 8005f58:	f001 f842 	bl	8006fe0 <xTaskRemoveFromEventList>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00e      	beq.n	8005f80 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00b      	beq.n	8005f80 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	601a      	str	r2, [r3, #0]
 8005f6e:	e007      	b.n	8005f80 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005f74:	3301      	adds	r3, #1
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	b25a      	sxtb	r2, r3
 8005f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005f80:	2301      	movs	r3, #1
 8005f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005f84:	e001      	b.n	8005f8a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f86:	2300      	movs	r3, #0
 8005f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f8c:	617b      	str	r3, [r7, #20]
	__asm volatile
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f383 8811 	msr	BASEPRI, r3
}
 8005f94:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3740      	adds	r7, #64	@ 0x40
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b08c      	sub	sp, #48	@ 0x30
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005fac:	2300      	movs	r3, #0
 8005fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10b      	bne.n	8005fd2 <xQueueReceive+0x32>
	__asm volatile
 8005fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	623b      	str	r3, [r7, #32]
}
 8005fcc:	bf00      	nop
 8005fce:	bf00      	nop
 8005fd0:	e7fd      	b.n	8005fce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d103      	bne.n	8005fe0 <xQueueReceive+0x40>
 8005fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d101      	bne.n	8005fe4 <xQueueReceive+0x44>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e000      	b.n	8005fe6 <xQueueReceive+0x46>
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10b      	bne.n	8006002 <xQueueReceive+0x62>
	__asm volatile
 8005fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fee:	f383 8811 	msr	BASEPRI, r3
 8005ff2:	f3bf 8f6f 	isb	sy
 8005ff6:	f3bf 8f4f 	dsb	sy
 8005ffa:	61fb      	str	r3, [r7, #28]
}
 8005ffc:	bf00      	nop
 8005ffe:	bf00      	nop
 8006000:	e7fd      	b.n	8005ffe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006002:	f001 fa21 	bl	8007448 <xTaskGetSchedulerState>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d102      	bne.n	8006012 <xQueueReceive+0x72>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d101      	bne.n	8006016 <xQueueReceive+0x76>
 8006012:	2301      	movs	r3, #1
 8006014:	e000      	b.n	8006018 <xQueueReceive+0x78>
 8006016:	2300      	movs	r3, #0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10b      	bne.n	8006034 <xQueueReceive+0x94>
	__asm volatile
 800601c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006020:	f383 8811 	msr	BASEPRI, r3
 8006024:	f3bf 8f6f 	isb	sy
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	61bb      	str	r3, [r7, #24]
}
 800602e:	bf00      	nop
 8006030:	bf00      	nop
 8006032:	e7fd      	b.n	8006030 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006034:	f002 f8b0 	bl	8008198 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800603a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800603c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800603e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006040:	2b00      	cmp	r3, #0
 8006042:	d01f      	beq.n	8006084 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006044:	68b9      	ldr	r1, [r7, #8]
 8006046:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006048:	f000 fa1e 	bl	8006488 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800604c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604e:	1e5a      	subs	r2, r3, #1
 8006050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006052:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00f      	beq.n	800607c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800605c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800605e:	3310      	adds	r3, #16
 8006060:	4618      	mov	r0, r3
 8006062:	f000 ffbd 	bl	8006fe0 <xTaskRemoveFromEventList>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d007      	beq.n	800607c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800606c:	4b3c      	ldr	r3, [pc, #240]	@ (8006160 <xQueueReceive+0x1c0>)
 800606e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	f3bf 8f4f 	dsb	sy
 8006078:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800607c:	f002 f8be 	bl	80081fc <vPortExitCritical>
				return pdPASS;
 8006080:	2301      	movs	r3, #1
 8006082:	e069      	b.n	8006158 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d103      	bne.n	8006092 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800608a:	f002 f8b7 	bl	80081fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800608e:	2300      	movs	r3, #0
 8006090:	e062      	b.n	8006158 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006094:	2b00      	cmp	r3, #0
 8006096:	d106      	bne.n	80060a6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006098:	f107 0310 	add.w	r3, r7, #16
 800609c:	4618      	mov	r0, r3
 800609e:	f001 f867 	bl	8007170 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060a2:	2301      	movs	r3, #1
 80060a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060a6:	f002 f8a9 	bl	80081fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80060aa:	f000 fd35 	bl	8006b18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060ae:	f002 f873 	bl	8008198 <vPortEnterCritical>
 80060b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80060b8:	b25b      	sxtb	r3, r3
 80060ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060be:	d103      	bne.n	80060c8 <xQueueReceive+0x128>
 80060c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060ce:	b25b      	sxtb	r3, r3
 80060d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d4:	d103      	bne.n	80060de <xQueueReceive+0x13e>
 80060d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060de:	f002 f88d 	bl	80081fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060e2:	1d3a      	adds	r2, r7, #4
 80060e4:	f107 0310 	add.w	r3, r7, #16
 80060e8:	4611      	mov	r1, r2
 80060ea:	4618      	mov	r0, r3
 80060ec:	f001 f856 	bl	800719c <xTaskCheckForTimeOut>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d123      	bne.n	800613e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060f8:	f000 fa3e 	bl	8006578 <prvIsQueueEmpty>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d017      	beq.n	8006132 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006104:	3324      	adds	r3, #36	@ 0x24
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	4611      	mov	r1, r2
 800610a:	4618      	mov	r0, r3
 800610c:	f000 fed8 	bl	8006ec0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006110:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006112:	f000 f9df 	bl	80064d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006116:	f000 fd0d 	bl	8006b34 <xTaskResumeAll>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d189      	bne.n	8006034 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006120:	4b0f      	ldr	r3, [pc, #60]	@ (8006160 <xQueueReceive+0x1c0>)
 8006122:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006126:	601a      	str	r2, [r3, #0]
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	e780      	b.n	8006034 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006132:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006134:	f000 f9ce 	bl	80064d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006138:	f000 fcfc 	bl	8006b34 <xTaskResumeAll>
 800613c:	e77a      	b.n	8006034 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800613e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006140:	f000 f9c8 	bl	80064d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006144:	f000 fcf6 	bl	8006b34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006148:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800614a:	f000 fa15 	bl	8006578 <prvIsQueueEmpty>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	f43f af6f 	beq.w	8006034 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006156:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006158:	4618      	mov	r0, r3
 800615a:	3730      	adds	r7, #48	@ 0x30
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	e000ed04 	.word	0xe000ed04

08006164 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b08e      	sub	sp, #56	@ 0x38
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800616e:	2300      	movs	r3, #0
 8006170:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006176:	2300      	movs	r3, #0
 8006178:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800617a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800617c:	2b00      	cmp	r3, #0
 800617e:	d10b      	bne.n	8006198 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006184:	f383 8811 	msr	BASEPRI, r3
 8006188:	f3bf 8f6f 	isb	sy
 800618c:	f3bf 8f4f 	dsb	sy
 8006190:	623b      	str	r3, [r7, #32]
}
 8006192:	bf00      	nop
 8006194:	bf00      	nop
 8006196:	e7fd      	b.n	8006194 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800619a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00b      	beq.n	80061b8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80061a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a4:	f383 8811 	msr	BASEPRI, r3
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	f3bf 8f4f 	dsb	sy
 80061b0:	61fb      	str	r3, [r7, #28]
}
 80061b2:	bf00      	nop
 80061b4:	bf00      	nop
 80061b6:	e7fd      	b.n	80061b4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061b8:	f001 f946 	bl	8007448 <xTaskGetSchedulerState>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d102      	bne.n	80061c8 <xQueueSemaphoreTake+0x64>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d101      	bne.n	80061cc <xQueueSemaphoreTake+0x68>
 80061c8:	2301      	movs	r3, #1
 80061ca:	e000      	b.n	80061ce <xQueueSemaphoreTake+0x6a>
 80061cc:	2300      	movs	r3, #0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10b      	bne.n	80061ea <xQueueSemaphoreTake+0x86>
	__asm volatile
 80061d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d6:	f383 8811 	msr	BASEPRI, r3
 80061da:	f3bf 8f6f 	isb	sy
 80061de:	f3bf 8f4f 	dsb	sy
 80061e2:	61bb      	str	r3, [r7, #24]
}
 80061e4:	bf00      	nop
 80061e6:	bf00      	nop
 80061e8:	e7fd      	b.n	80061e6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061ea:	f001 ffd5 	bl	8008198 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80061ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80061f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d024      	beq.n	8006244 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80061fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061fc:	1e5a      	subs	r2, r3, #1
 80061fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006200:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d104      	bne.n	8006214 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800620a:	f001 faaf 	bl	800776c <pvTaskIncrementMutexHeldCount>
 800620e:	4602      	mov	r2, r0
 8006210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006212:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00f      	beq.n	800623c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800621c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800621e:	3310      	adds	r3, #16
 8006220:	4618      	mov	r0, r3
 8006222:	f000 fedd 	bl	8006fe0 <xTaskRemoveFromEventList>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d007      	beq.n	800623c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800622c:	4b54      	ldr	r3, [pc, #336]	@ (8006380 <xQueueSemaphoreTake+0x21c>)
 800622e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800623c:	f001 ffde 	bl	80081fc <vPortExitCritical>
				return pdPASS;
 8006240:	2301      	movs	r3, #1
 8006242:	e098      	b.n	8006376 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d112      	bne.n	8006270 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800624a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00b      	beq.n	8006268 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006254:	f383 8811 	msr	BASEPRI, r3
 8006258:	f3bf 8f6f 	isb	sy
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	617b      	str	r3, [r7, #20]
}
 8006262:	bf00      	nop
 8006264:	bf00      	nop
 8006266:	e7fd      	b.n	8006264 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006268:	f001 ffc8 	bl	80081fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800626c:	2300      	movs	r3, #0
 800626e:	e082      	b.n	8006376 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006272:	2b00      	cmp	r3, #0
 8006274:	d106      	bne.n	8006284 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006276:	f107 030c 	add.w	r3, r7, #12
 800627a:	4618      	mov	r0, r3
 800627c:	f000 ff78 	bl	8007170 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006280:	2301      	movs	r3, #1
 8006282:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006284:	f001 ffba 	bl	80081fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006288:	f000 fc46 	bl	8006b18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800628c:	f001 ff84 	bl	8008198 <vPortEnterCritical>
 8006290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006292:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006296:	b25b      	sxtb	r3, r3
 8006298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800629c:	d103      	bne.n	80062a6 <xQueueSemaphoreTake+0x142>
 800629e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062ac:	b25b      	sxtb	r3, r3
 80062ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b2:	d103      	bne.n	80062bc <xQueueSemaphoreTake+0x158>
 80062b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062bc:	f001 ff9e 	bl	80081fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062c0:	463a      	mov	r2, r7
 80062c2:	f107 030c 	add.w	r3, r7, #12
 80062c6:	4611      	mov	r1, r2
 80062c8:	4618      	mov	r0, r3
 80062ca:	f000 ff67 	bl	800719c <xTaskCheckForTimeOut>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d132      	bne.n	800633a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80062d6:	f000 f94f 	bl	8006578 <prvIsQueueEmpty>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d026      	beq.n	800632e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d109      	bne.n	80062fc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80062e8:	f001 ff56 	bl	8008198 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80062ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	4618      	mov	r0, r3
 80062f2:	f001 f8c7 	bl	8007484 <xTaskPriorityInherit>
 80062f6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80062f8:	f001 ff80 	bl	80081fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062fe:	3324      	adds	r3, #36	@ 0x24
 8006300:	683a      	ldr	r2, [r7, #0]
 8006302:	4611      	mov	r1, r2
 8006304:	4618      	mov	r0, r3
 8006306:	f000 fddb 	bl	8006ec0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800630a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800630c:	f000 f8e2 	bl	80064d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006310:	f000 fc10 	bl	8006b34 <xTaskResumeAll>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	f47f af67 	bne.w	80061ea <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800631c:	4b18      	ldr	r3, [pc, #96]	@ (8006380 <xQueueSemaphoreTake+0x21c>)
 800631e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006322:	601a      	str	r2, [r3, #0]
 8006324:	f3bf 8f4f 	dsb	sy
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	e75d      	b.n	80061ea <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800632e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006330:	f000 f8d0 	bl	80064d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006334:	f000 fbfe 	bl	8006b34 <xTaskResumeAll>
 8006338:	e757      	b.n	80061ea <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800633a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800633c:	f000 f8ca 	bl	80064d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006340:	f000 fbf8 	bl	8006b34 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006344:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006346:	f000 f917 	bl	8006578 <prvIsQueueEmpty>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	f43f af4c 	beq.w	80061ea <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00d      	beq.n	8006374 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006358:	f001 ff1e 	bl	8008198 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800635c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800635e:	f000 f811 	bl	8006384 <prvGetDisinheritPriorityAfterTimeout>
 8006362:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800636a:	4618      	mov	r0, r3
 800636c:	f001 f962 	bl	8007634 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006370:	f001 ff44 	bl	80081fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006374:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006376:	4618      	mov	r0, r3
 8006378:	3738      	adds	r7, #56	@ 0x38
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	e000ed04 	.word	0xe000ed04

08006384 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006390:	2b00      	cmp	r3, #0
 8006392:	d006      	beq.n	80063a2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800639e:	60fb      	str	r3, [r7, #12]
 80063a0:	e001      	b.n	80063a6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80063a2:	2300      	movs	r3, #0
 80063a4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80063a6:	68fb      	ldr	r3, [r7, #12]
	}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3714      	adds	r7, #20
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80063c0:	2300      	movs	r3, #0
 80063c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10d      	bne.n	80063ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d14d      	bne.n	8006476 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	4618      	mov	r0, r3
 80063e0:	f001 f8b8 	bl	8007554 <xTaskPriorityDisinherit>
 80063e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	609a      	str	r2, [r3, #8]
 80063ec:	e043      	b.n	8006476 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d119      	bne.n	8006428 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6858      	ldr	r0, [r3, #4]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063fc:	461a      	mov	r2, r3
 80063fe:	68b9      	ldr	r1, [r7, #8]
 8006400:	f002 fa44 	bl	800888c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	685a      	ldr	r2, [r3, #4]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800640c:	441a      	add	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	429a      	cmp	r2, r3
 800641c:	d32b      	bcc.n	8006476 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	605a      	str	r2, [r3, #4]
 8006426:	e026      	b.n	8006476 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	68d8      	ldr	r0, [r3, #12]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006430:	461a      	mov	r2, r3
 8006432:	68b9      	ldr	r1, [r7, #8]
 8006434:	f002 fa2a 	bl	800888c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	68da      	ldr	r2, [r3, #12]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006440:	425b      	negs	r3, r3
 8006442:	441a      	add	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	68da      	ldr	r2, [r3, #12]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	429a      	cmp	r2, r3
 8006452:	d207      	bcs.n	8006464 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	689a      	ldr	r2, [r3, #8]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800645c:	425b      	negs	r3, r3
 800645e:	441a      	add	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b02      	cmp	r3, #2
 8006468:	d105      	bne.n	8006476 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d002      	beq.n	8006476 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	3b01      	subs	r3, #1
 8006474:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	1c5a      	adds	r2, r3, #1
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800647e:	697b      	ldr	r3, [r7, #20]
}
 8006480:	4618      	mov	r0, r3
 8006482:	3718      	adds	r7, #24
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006496:	2b00      	cmp	r3, #0
 8006498:	d018      	beq.n	80064cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	68da      	ldr	r2, [r3, #12]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a2:	441a      	add	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	68da      	ldr	r2, [r3, #12]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d303      	bcc.n	80064bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	68d9      	ldr	r1, [r3, #12]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c4:	461a      	mov	r2, r3
 80064c6:	6838      	ldr	r0, [r7, #0]
 80064c8:	f002 f9e0 	bl	800888c <memcpy>
	}
}
 80064cc:	bf00      	nop
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80064dc:	f001 fe5c 	bl	8008198 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064e8:	e011      	b.n	800650e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d012      	beq.n	8006518 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	3324      	adds	r3, #36	@ 0x24
 80064f6:	4618      	mov	r0, r3
 80064f8:	f000 fd72 	bl	8006fe0 <xTaskRemoveFromEventList>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d001      	beq.n	8006506 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006502:	f000 feaf 	bl	8007264 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006506:	7bfb      	ldrb	r3, [r7, #15]
 8006508:	3b01      	subs	r3, #1
 800650a:	b2db      	uxtb	r3, r3
 800650c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800650e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006512:	2b00      	cmp	r3, #0
 8006514:	dce9      	bgt.n	80064ea <prvUnlockQueue+0x16>
 8006516:	e000      	b.n	800651a <prvUnlockQueue+0x46>
					break;
 8006518:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	22ff      	movs	r2, #255	@ 0xff
 800651e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006522:	f001 fe6b 	bl	80081fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006526:	f001 fe37 	bl	8008198 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006530:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006532:	e011      	b.n	8006558 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d012      	beq.n	8006562 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	3310      	adds	r3, #16
 8006540:	4618      	mov	r0, r3
 8006542:	f000 fd4d 	bl	8006fe0 <xTaskRemoveFromEventList>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d001      	beq.n	8006550 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800654c:	f000 fe8a 	bl	8007264 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006550:	7bbb      	ldrb	r3, [r7, #14]
 8006552:	3b01      	subs	r3, #1
 8006554:	b2db      	uxtb	r3, r3
 8006556:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006558:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800655c:	2b00      	cmp	r3, #0
 800655e:	dce9      	bgt.n	8006534 <prvUnlockQueue+0x60>
 8006560:	e000      	b.n	8006564 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006562:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	22ff      	movs	r2, #255	@ 0xff
 8006568:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800656c:	f001 fe46 	bl	80081fc <vPortExitCritical>
}
 8006570:	bf00      	nop
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006580:	f001 fe0a 	bl	8008198 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006588:	2b00      	cmp	r3, #0
 800658a:	d102      	bne.n	8006592 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800658c:	2301      	movs	r3, #1
 800658e:	60fb      	str	r3, [r7, #12]
 8006590:	e001      	b.n	8006596 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006592:	2300      	movs	r3, #0
 8006594:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006596:	f001 fe31 	bl	80081fc <vPortExitCritical>

	return xReturn;
 800659a:	68fb      	ldr	r3, [r7, #12]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065ac:	f001 fdf4 	bl	8008198 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d102      	bne.n	80065c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80065bc:	2301      	movs	r3, #1
 80065be:	60fb      	str	r3, [r7, #12]
 80065c0:	e001      	b.n	80065c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80065c2:	2300      	movs	r3, #0
 80065c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065c6:	f001 fe19 	bl	80081fc <vPortExitCritical>

	return xReturn;
 80065ca:	68fb      	ldr	r3, [r7, #12]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065de:	2300      	movs	r3, #0
 80065e0:	60fb      	str	r3, [r7, #12]
 80065e2:	e014      	b.n	800660e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80065e4:	4a0f      	ldr	r2, [pc, #60]	@ (8006624 <vQueueAddToRegistry+0x50>)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d10b      	bne.n	8006608 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80065f0:	490c      	ldr	r1, [pc, #48]	@ (8006624 <vQueueAddToRegistry+0x50>)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	683a      	ldr	r2, [r7, #0]
 80065f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80065fa:	4a0a      	ldr	r2, [pc, #40]	@ (8006624 <vQueueAddToRegistry+0x50>)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	00db      	lsls	r3, r3, #3
 8006600:	4413      	add	r3, r2
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006606:	e006      	b.n	8006616 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	3301      	adds	r3, #1
 800660c:	60fb      	str	r3, [r7, #12]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2b07      	cmp	r3, #7
 8006612:	d9e7      	bls.n	80065e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006614:	bf00      	nop
 8006616:	bf00      	nop
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	20000d18 	.word	0x20000d18

08006628 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006638:	f001 fdae 	bl	8008198 <vPortEnterCritical>
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006642:	b25b      	sxtb	r3, r3
 8006644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006648:	d103      	bne.n	8006652 <vQueueWaitForMessageRestricted+0x2a>
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006658:	b25b      	sxtb	r3, r3
 800665a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665e:	d103      	bne.n	8006668 <vQueueWaitForMessageRestricted+0x40>
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006668:	f001 fdc8 	bl	80081fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006670:	2b00      	cmp	r3, #0
 8006672:	d106      	bne.n	8006682 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	3324      	adds	r3, #36	@ 0x24
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	68b9      	ldr	r1, [r7, #8]
 800667c:	4618      	mov	r0, r3
 800667e:	f000 fc83 	bl	8006f88 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006682:	6978      	ldr	r0, [r7, #20]
 8006684:	f7ff ff26 	bl	80064d4 <prvUnlockQueue>
	}
 8006688:	bf00      	nop
 800668a:	3718      	adds	r7, #24
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006690:	b580      	push	{r7, lr}
 8006692:	b08e      	sub	sp, #56	@ 0x38
 8006694:	af04      	add	r7, sp, #16
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
 800669c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800669e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d10b      	bne.n	80066bc <xTaskCreateStatic+0x2c>
	__asm volatile
 80066a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a8:	f383 8811 	msr	BASEPRI, r3
 80066ac:	f3bf 8f6f 	isb	sy
 80066b0:	f3bf 8f4f 	dsb	sy
 80066b4:	623b      	str	r3, [r7, #32]
}
 80066b6:	bf00      	nop
 80066b8:	bf00      	nop
 80066ba:	e7fd      	b.n	80066b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80066bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10b      	bne.n	80066da <xTaskCreateStatic+0x4a>
	__asm volatile
 80066c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c6:	f383 8811 	msr	BASEPRI, r3
 80066ca:	f3bf 8f6f 	isb	sy
 80066ce:	f3bf 8f4f 	dsb	sy
 80066d2:	61fb      	str	r3, [r7, #28]
}
 80066d4:	bf00      	nop
 80066d6:	bf00      	nop
 80066d8:	e7fd      	b.n	80066d6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80066da:	235c      	movs	r3, #92	@ 0x5c
 80066dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	2b5c      	cmp	r3, #92	@ 0x5c
 80066e2:	d00b      	beq.n	80066fc <xTaskCreateStatic+0x6c>
	__asm volatile
 80066e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e8:	f383 8811 	msr	BASEPRI, r3
 80066ec:	f3bf 8f6f 	isb	sy
 80066f0:	f3bf 8f4f 	dsb	sy
 80066f4:	61bb      	str	r3, [r7, #24]
}
 80066f6:	bf00      	nop
 80066f8:	bf00      	nop
 80066fa:	e7fd      	b.n	80066f8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80066fc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80066fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006700:	2b00      	cmp	r3, #0
 8006702:	d01e      	beq.n	8006742 <xTaskCreateStatic+0xb2>
 8006704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006706:	2b00      	cmp	r3, #0
 8006708:	d01b      	beq.n	8006742 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800670a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800670c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800670e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006710:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006712:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006716:	2202      	movs	r2, #2
 8006718:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800671c:	2300      	movs	r3, #0
 800671e:	9303      	str	r3, [sp, #12]
 8006720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006722:	9302      	str	r3, [sp, #8]
 8006724:	f107 0314 	add.w	r3, r7, #20
 8006728:	9301      	str	r3, [sp, #4]
 800672a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800672c:	9300      	str	r3, [sp, #0]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	68b9      	ldr	r1, [r7, #8]
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f000 f850 	bl	80067da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800673a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800673c:	f000 f8de 	bl	80068fc <prvAddNewTaskToReadyList>
 8006740:	e001      	b.n	8006746 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006742:	2300      	movs	r3, #0
 8006744:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006746:	697b      	ldr	r3, [r7, #20]
	}
 8006748:	4618      	mov	r0, r3
 800674a:	3728      	adds	r7, #40	@ 0x28
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006750:	b580      	push	{r7, lr}
 8006752:	b08c      	sub	sp, #48	@ 0x30
 8006754:	af04      	add	r7, sp, #16
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	603b      	str	r3, [r7, #0]
 800675c:	4613      	mov	r3, r2
 800675e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006760:	88fb      	ldrh	r3, [r7, #6]
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	4618      	mov	r0, r3
 8006766:	f001 fe39 	bl	80083dc <pvPortMalloc>
 800676a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00e      	beq.n	8006790 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006772:	205c      	movs	r0, #92	@ 0x5c
 8006774:	f001 fe32 	bl	80083dc <pvPortMalloc>
 8006778:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d003      	beq.n	8006788 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	631a      	str	r2, [r3, #48]	@ 0x30
 8006786:	e005      	b.n	8006794 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006788:	6978      	ldr	r0, [r7, #20]
 800678a:	f001 fef5 	bl	8008578 <vPortFree>
 800678e:	e001      	b.n	8006794 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006790:	2300      	movs	r3, #0
 8006792:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d017      	beq.n	80067ca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80067a2:	88fa      	ldrh	r2, [r7, #6]
 80067a4:	2300      	movs	r3, #0
 80067a6:	9303      	str	r3, [sp, #12]
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	9302      	str	r3, [sp, #8]
 80067ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ae:	9301      	str	r3, [sp, #4]
 80067b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b2:	9300      	str	r3, [sp, #0]
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	68b9      	ldr	r1, [r7, #8]
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f000 f80e 	bl	80067da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067be:	69f8      	ldr	r0, [r7, #28]
 80067c0:	f000 f89c 	bl	80068fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80067c4:	2301      	movs	r3, #1
 80067c6:	61bb      	str	r3, [r7, #24]
 80067c8:	e002      	b.n	80067d0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80067ca:	f04f 33ff 	mov.w	r3, #4294967295
 80067ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80067d0:	69bb      	ldr	r3, [r7, #24]
	}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3720      	adds	r7, #32
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b088      	sub	sp, #32
 80067de:	af00      	add	r7, sp, #0
 80067e0:	60f8      	str	r0, [r7, #12]
 80067e2:	60b9      	str	r1, [r7, #8]
 80067e4:	607a      	str	r2, [r7, #4]
 80067e6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80067e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ea:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	461a      	mov	r2, r3
 80067f2:	21a5      	movs	r1, #165	@ 0xa5
 80067f4:	f002 f816 	bl	8008824 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80067f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006802:	3b01      	subs	r3, #1
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	4413      	add	r3, r2
 8006808:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	f023 0307 	bic.w	r3, r3, #7
 8006810:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	f003 0307 	and.w	r3, r3, #7
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00b      	beq.n	8006834 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800681c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006820:	f383 8811 	msr	BASEPRI, r3
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	617b      	str	r3, [r7, #20]
}
 800682e:	bf00      	nop
 8006830:	bf00      	nop
 8006832:	e7fd      	b.n	8006830 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d01f      	beq.n	800687a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800683a:	2300      	movs	r3, #0
 800683c:	61fb      	str	r3, [r7, #28]
 800683e:	e012      	b.n	8006866 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	4413      	add	r3, r2
 8006846:	7819      	ldrb	r1, [r3, #0]
 8006848:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	4413      	add	r3, r2
 800684e:	3334      	adds	r3, #52	@ 0x34
 8006850:	460a      	mov	r2, r1
 8006852:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006854:	68ba      	ldr	r2, [r7, #8]
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	4413      	add	r3, r2
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d006      	beq.n	800686e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	3301      	adds	r3, #1
 8006864:	61fb      	str	r3, [r7, #28]
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	2b0f      	cmp	r3, #15
 800686a:	d9e9      	bls.n	8006840 <prvInitialiseNewTask+0x66>
 800686c:	e000      	b.n	8006870 <prvInitialiseNewTask+0x96>
			{
				break;
 800686e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006872:	2200      	movs	r2, #0
 8006874:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006878:	e003      	b.n	8006882 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800687a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687c:	2200      	movs	r2, #0
 800687e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006884:	2b37      	cmp	r3, #55	@ 0x37
 8006886:	d901      	bls.n	800688c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006888:	2337      	movs	r3, #55	@ 0x37
 800688a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800688c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006890:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006894:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006896:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689a:	2200      	movs	r2, #0
 800689c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800689e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a0:	3304      	adds	r3, #4
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7fe ff4a 	bl	800573c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80068a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068aa:	3318      	adds	r3, #24
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7fe ff45 	bl	800573c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80068b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ba:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80068be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80068c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068c6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80068c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ca:	2200      	movs	r2, #0
 80068cc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80068ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	68f9      	ldr	r1, [r7, #12]
 80068da:	69b8      	ldr	r0, [r7, #24]
 80068dc:	f001 fb28 	bl	8007f30 <pxPortInitialiseStack>
 80068e0:	4602      	mov	r2, r0
 80068e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80068e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d002      	beq.n	80068f2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80068ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068f2:	bf00      	nop
 80068f4:	3720      	adds	r7, #32
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
	...

080068fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006904:	f001 fc48 	bl	8008198 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006908:	4b2d      	ldr	r3, [pc, #180]	@ (80069c0 <prvAddNewTaskToReadyList+0xc4>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	3301      	adds	r3, #1
 800690e:	4a2c      	ldr	r2, [pc, #176]	@ (80069c0 <prvAddNewTaskToReadyList+0xc4>)
 8006910:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006912:	4b2c      	ldr	r3, [pc, #176]	@ (80069c4 <prvAddNewTaskToReadyList+0xc8>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d109      	bne.n	800692e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800691a:	4a2a      	ldr	r2, [pc, #168]	@ (80069c4 <prvAddNewTaskToReadyList+0xc8>)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006920:	4b27      	ldr	r3, [pc, #156]	@ (80069c0 <prvAddNewTaskToReadyList+0xc4>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d110      	bne.n	800694a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006928:	f000 fcc0 	bl	80072ac <prvInitialiseTaskLists>
 800692c:	e00d      	b.n	800694a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800692e:	4b26      	ldr	r3, [pc, #152]	@ (80069c8 <prvAddNewTaskToReadyList+0xcc>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d109      	bne.n	800694a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006936:	4b23      	ldr	r3, [pc, #140]	@ (80069c4 <prvAddNewTaskToReadyList+0xc8>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006940:	429a      	cmp	r2, r3
 8006942:	d802      	bhi.n	800694a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006944:	4a1f      	ldr	r2, [pc, #124]	@ (80069c4 <prvAddNewTaskToReadyList+0xc8>)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800694a:	4b20      	ldr	r3, [pc, #128]	@ (80069cc <prvAddNewTaskToReadyList+0xd0>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	3301      	adds	r3, #1
 8006950:	4a1e      	ldr	r2, [pc, #120]	@ (80069cc <prvAddNewTaskToReadyList+0xd0>)
 8006952:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006954:	4b1d      	ldr	r3, [pc, #116]	@ (80069cc <prvAddNewTaskToReadyList+0xd0>)
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006960:	4b1b      	ldr	r3, [pc, #108]	@ (80069d0 <prvAddNewTaskToReadyList+0xd4>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	429a      	cmp	r2, r3
 8006966:	d903      	bls.n	8006970 <prvAddNewTaskToReadyList+0x74>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800696c:	4a18      	ldr	r2, [pc, #96]	@ (80069d0 <prvAddNewTaskToReadyList+0xd4>)
 800696e:	6013      	str	r3, [r2, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006974:	4613      	mov	r3, r2
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	4413      	add	r3, r2
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4a15      	ldr	r2, [pc, #84]	@ (80069d4 <prvAddNewTaskToReadyList+0xd8>)
 800697e:	441a      	add	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	3304      	adds	r3, #4
 8006984:	4619      	mov	r1, r3
 8006986:	4610      	mov	r0, r2
 8006988:	f7fe fee5 	bl	8005756 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800698c:	f001 fc36 	bl	80081fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006990:	4b0d      	ldr	r3, [pc, #52]	@ (80069c8 <prvAddNewTaskToReadyList+0xcc>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00e      	beq.n	80069b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006998:	4b0a      	ldr	r3, [pc, #40]	@ (80069c4 <prvAddNewTaskToReadyList+0xc8>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d207      	bcs.n	80069b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80069a6:	4b0c      	ldr	r3, [pc, #48]	@ (80069d8 <prvAddNewTaskToReadyList+0xdc>)
 80069a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069ac:	601a      	str	r2, [r3, #0]
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069b6:	bf00      	nop
 80069b8:	3708      	adds	r7, #8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	2000122c 	.word	0x2000122c
 80069c4:	20000d58 	.word	0x20000d58
 80069c8:	20001238 	.word	0x20001238
 80069cc:	20001248 	.word	0x20001248
 80069d0:	20001234 	.word	0x20001234
 80069d4:	20000d5c 	.word	0x20000d5c
 80069d8:	e000ed04 	.word	0xe000ed04

080069dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80069e4:	2300      	movs	r3, #0
 80069e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d018      	beq.n	8006a20 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80069ee:	4b14      	ldr	r3, [pc, #80]	@ (8006a40 <vTaskDelay+0x64>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00b      	beq.n	8006a0e <vTaskDelay+0x32>
	__asm volatile
 80069f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069fa:	f383 8811 	msr	BASEPRI, r3
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	f3bf 8f4f 	dsb	sy
 8006a06:	60bb      	str	r3, [r7, #8]
}
 8006a08:	bf00      	nop
 8006a0a:	bf00      	nop
 8006a0c:	e7fd      	b.n	8006a0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006a0e:	f000 f883 	bl	8006b18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a12:	2100      	movs	r1, #0
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 febd 	bl	8007794 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006a1a:	f000 f88b 	bl	8006b34 <xTaskResumeAll>
 8006a1e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d107      	bne.n	8006a36 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006a26:	4b07      	ldr	r3, [pc, #28]	@ (8006a44 <vTaskDelay+0x68>)
 8006a28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a2c:	601a      	str	r2, [r3, #0]
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a36:	bf00      	nop
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	20001254 	.word	0x20001254
 8006a44:	e000ed04 	.word	0xe000ed04

08006a48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b08a      	sub	sp, #40	@ 0x28
 8006a4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a52:	2300      	movs	r3, #0
 8006a54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a56:	463a      	mov	r2, r7
 8006a58:	1d39      	adds	r1, r7, #4
 8006a5a:	f107 0308 	add.w	r3, r7, #8
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7fe fba4 	bl	80051ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a64:	6839      	ldr	r1, [r7, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	9202      	str	r2, [sp, #8]
 8006a6c:	9301      	str	r3, [sp, #4]
 8006a6e:	2300      	movs	r3, #0
 8006a70:	9300      	str	r3, [sp, #0]
 8006a72:	2300      	movs	r3, #0
 8006a74:	460a      	mov	r2, r1
 8006a76:	4922      	ldr	r1, [pc, #136]	@ (8006b00 <vTaskStartScheduler+0xb8>)
 8006a78:	4822      	ldr	r0, [pc, #136]	@ (8006b04 <vTaskStartScheduler+0xbc>)
 8006a7a:	f7ff fe09 	bl	8006690 <xTaskCreateStatic>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	4a21      	ldr	r2, [pc, #132]	@ (8006b08 <vTaskStartScheduler+0xc0>)
 8006a82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006a84:	4b20      	ldr	r3, [pc, #128]	@ (8006b08 <vTaskStartScheduler+0xc0>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d002      	beq.n	8006a92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	617b      	str	r3, [r7, #20]
 8006a90:	e001      	b.n	8006a96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006a92:	2300      	movs	r3, #0
 8006a94:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d102      	bne.n	8006aa2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006a9c:	f000 fece 	bl	800783c <xTimerCreateTimerTask>
 8006aa0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d116      	bne.n	8006ad6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aac:	f383 8811 	msr	BASEPRI, r3
 8006ab0:	f3bf 8f6f 	isb	sy
 8006ab4:	f3bf 8f4f 	dsb	sy
 8006ab8:	613b      	str	r3, [r7, #16]
}
 8006aba:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006abc:	4b13      	ldr	r3, [pc, #76]	@ (8006b0c <vTaskStartScheduler+0xc4>)
 8006abe:	f04f 32ff 	mov.w	r2, #4294967295
 8006ac2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ac4:	4b12      	ldr	r3, [pc, #72]	@ (8006b10 <vTaskStartScheduler+0xc8>)
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006aca:	4b12      	ldr	r3, [pc, #72]	@ (8006b14 <vTaskStartScheduler+0xcc>)
 8006acc:	2200      	movs	r2, #0
 8006ace:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006ad0:	f001 fabe 	bl	8008050 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006ad4:	e00f      	b.n	8006af6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006adc:	d10b      	bne.n	8006af6 <vTaskStartScheduler+0xae>
	__asm volatile
 8006ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	60fb      	str	r3, [r7, #12]
}
 8006af0:	bf00      	nop
 8006af2:	bf00      	nop
 8006af4:	e7fd      	b.n	8006af2 <vTaskStartScheduler+0xaa>
}
 8006af6:	bf00      	nop
 8006af8:	3718      	adds	r7, #24
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	0800931c 	.word	0x0800931c
 8006b04:	0800727d 	.word	0x0800727d
 8006b08:	20001250 	.word	0x20001250
 8006b0c:	2000124c 	.word	0x2000124c
 8006b10:	20001238 	.word	0x20001238
 8006b14:	20001230 	.word	0x20001230

08006b18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b18:	b480      	push	{r7}
 8006b1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006b1c:	4b04      	ldr	r3, [pc, #16]	@ (8006b30 <vTaskSuspendAll+0x18>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	3301      	adds	r3, #1
 8006b22:	4a03      	ldr	r2, [pc, #12]	@ (8006b30 <vTaskSuspendAll+0x18>)
 8006b24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006b26:	bf00      	nop
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr
 8006b30:	20001254 	.word	0x20001254

08006b34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b42:	4b42      	ldr	r3, [pc, #264]	@ (8006c4c <xTaskResumeAll+0x118>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10b      	bne.n	8006b62 <xTaskResumeAll+0x2e>
	__asm volatile
 8006b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b4e:	f383 8811 	msr	BASEPRI, r3
 8006b52:	f3bf 8f6f 	isb	sy
 8006b56:	f3bf 8f4f 	dsb	sy
 8006b5a:	603b      	str	r3, [r7, #0]
}
 8006b5c:	bf00      	nop
 8006b5e:	bf00      	nop
 8006b60:	e7fd      	b.n	8006b5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b62:	f001 fb19 	bl	8008198 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b66:	4b39      	ldr	r3, [pc, #228]	@ (8006c4c <xTaskResumeAll+0x118>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	4a37      	ldr	r2, [pc, #220]	@ (8006c4c <xTaskResumeAll+0x118>)
 8006b6e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b70:	4b36      	ldr	r3, [pc, #216]	@ (8006c4c <xTaskResumeAll+0x118>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d162      	bne.n	8006c3e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b78:	4b35      	ldr	r3, [pc, #212]	@ (8006c50 <xTaskResumeAll+0x11c>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d05e      	beq.n	8006c3e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b80:	e02f      	b.n	8006be2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b82:	4b34      	ldr	r3, [pc, #208]	@ (8006c54 <xTaskResumeAll+0x120>)
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	3318      	adds	r3, #24
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7fe fe3e 	bl	8005810 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	3304      	adds	r3, #4
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7fe fe39 	bl	8005810 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ba2:	4b2d      	ldr	r3, [pc, #180]	@ (8006c58 <xTaskResumeAll+0x124>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d903      	bls.n	8006bb2 <xTaskResumeAll+0x7e>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bae:	4a2a      	ldr	r2, [pc, #168]	@ (8006c58 <xTaskResumeAll+0x124>)
 8006bb0:	6013      	str	r3, [r2, #0]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	4413      	add	r3, r2
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	4a27      	ldr	r2, [pc, #156]	@ (8006c5c <xTaskResumeAll+0x128>)
 8006bc0:	441a      	add	r2, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	3304      	adds	r3, #4
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	4610      	mov	r0, r2
 8006bca:	f7fe fdc4 	bl	8005756 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bd2:	4b23      	ldr	r3, [pc, #140]	@ (8006c60 <xTaskResumeAll+0x12c>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d302      	bcc.n	8006be2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006bdc:	4b21      	ldr	r3, [pc, #132]	@ (8006c64 <xTaskResumeAll+0x130>)
 8006bde:	2201      	movs	r2, #1
 8006be0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006be2:	4b1c      	ldr	r3, [pc, #112]	@ (8006c54 <xTaskResumeAll+0x120>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1cb      	bne.n	8006b82 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d001      	beq.n	8006bf4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006bf0:	f000 fbfa 	bl	80073e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006bf4:	4b1c      	ldr	r3, [pc, #112]	@ (8006c68 <xTaskResumeAll+0x134>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d010      	beq.n	8006c22 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006c00:	f000 f846 	bl	8006c90 <xTaskIncrementTick>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d002      	beq.n	8006c10 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006c0a:	4b16      	ldr	r3, [pc, #88]	@ (8006c64 <xTaskResumeAll+0x130>)
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	3b01      	subs	r3, #1
 8006c14:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1f1      	bne.n	8006c00 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006c1c:	4b12      	ldr	r3, [pc, #72]	@ (8006c68 <xTaskResumeAll+0x134>)
 8006c1e:	2200      	movs	r2, #0
 8006c20:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c22:	4b10      	ldr	r3, [pc, #64]	@ (8006c64 <xTaskResumeAll+0x130>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d009      	beq.n	8006c3e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8006c6c <xTaskResumeAll+0x138>)
 8006c30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c34:	601a      	str	r2, [r3, #0]
 8006c36:	f3bf 8f4f 	dsb	sy
 8006c3a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c3e:	f001 fadd 	bl	80081fc <vPortExitCritical>

	return xAlreadyYielded;
 8006c42:	68bb      	ldr	r3, [r7, #8]
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	20001254 	.word	0x20001254
 8006c50:	2000122c 	.word	0x2000122c
 8006c54:	200011ec 	.word	0x200011ec
 8006c58:	20001234 	.word	0x20001234
 8006c5c:	20000d5c 	.word	0x20000d5c
 8006c60:	20000d58 	.word	0x20000d58
 8006c64:	20001240 	.word	0x20001240
 8006c68:	2000123c 	.word	0x2000123c
 8006c6c:	e000ed04 	.word	0xe000ed04

08006c70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006c76:	4b05      	ldr	r3, [pc, #20]	@ (8006c8c <xTaskGetTickCount+0x1c>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006c7c:	687b      	ldr	r3, [r7, #4]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	370c      	adds	r7, #12
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	20001230 	.word	0x20001230

08006c90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b086      	sub	sp, #24
 8006c94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006c96:	2300      	movs	r3, #0
 8006c98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c9a:	4b4f      	ldr	r3, [pc, #316]	@ (8006dd8 <xTaskIncrementTick+0x148>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	f040 8090 	bne.w	8006dc4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ca4:	4b4d      	ldr	r3, [pc, #308]	@ (8006ddc <xTaskIncrementTick+0x14c>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006cac:	4a4b      	ldr	r2, [pc, #300]	@ (8006ddc <xTaskIncrementTick+0x14c>)
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d121      	bne.n	8006cfc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006cb8:	4b49      	ldr	r3, [pc, #292]	@ (8006de0 <xTaskIncrementTick+0x150>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00b      	beq.n	8006cda <xTaskIncrementTick+0x4a>
	__asm volatile
 8006cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc6:	f383 8811 	msr	BASEPRI, r3
 8006cca:	f3bf 8f6f 	isb	sy
 8006cce:	f3bf 8f4f 	dsb	sy
 8006cd2:	603b      	str	r3, [r7, #0]
}
 8006cd4:	bf00      	nop
 8006cd6:	bf00      	nop
 8006cd8:	e7fd      	b.n	8006cd6 <xTaskIncrementTick+0x46>
 8006cda:	4b41      	ldr	r3, [pc, #260]	@ (8006de0 <xTaskIncrementTick+0x150>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	60fb      	str	r3, [r7, #12]
 8006ce0:	4b40      	ldr	r3, [pc, #256]	@ (8006de4 <xTaskIncrementTick+0x154>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a3e      	ldr	r2, [pc, #248]	@ (8006de0 <xTaskIncrementTick+0x150>)
 8006ce6:	6013      	str	r3, [r2, #0]
 8006ce8:	4a3e      	ldr	r2, [pc, #248]	@ (8006de4 <xTaskIncrementTick+0x154>)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6013      	str	r3, [r2, #0]
 8006cee:	4b3e      	ldr	r3, [pc, #248]	@ (8006de8 <xTaskIncrementTick+0x158>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	4a3c      	ldr	r2, [pc, #240]	@ (8006de8 <xTaskIncrementTick+0x158>)
 8006cf6:	6013      	str	r3, [r2, #0]
 8006cf8:	f000 fb76 	bl	80073e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006cfc:	4b3b      	ldr	r3, [pc, #236]	@ (8006dec <xTaskIncrementTick+0x15c>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	693a      	ldr	r2, [r7, #16]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d349      	bcc.n	8006d9a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d06:	4b36      	ldr	r3, [pc, #216]	@ (8006de0 <xTaskIncrementTick+0x150>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d104      	bne.n	8006d1a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d10:	4b36      	ldr	r3, [pc, #216]	@ (8006dec <xTaskIncrementTick+0x15c>)
 8006d12:	f04f 32ff 	mov.w	r2, #4294967295
 8006d16:	601a      	str	r2, [r3, #0]
					break;
 8006d18:	e03f      	b.n	8006d9a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d1a:	4b31      	ldr	r3, [pc, #196]	@ (8006de0 <xTaskIncrementTick+0x150>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d203      	bcs.n	8006d3a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d32:	4a2e      	ldr	r2, [pc, #184]	@ (8006dec <xTaskIncrementTick+0x15c>)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006d38:	e02f      	b.n	8006d9a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	3304      	adds	r3, #4
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7fe fd66 	bl	8005810 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d004      	beq.n	8006d56 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	3318      	adds	r3, #24
 8006d50:	4618      	mov	r0, r3
 8006d52:	f7fe fd5d 	bl	8005810 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d5a:	4b25      	ldr	r3, [pc, #148]	@ (8006df0 <xTaskIncrementTick+0x160>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d903      	bls.n	8006d6a <xTaskIncrementTick+0xda>
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d66:	4a22      	ldr	r2, [pc, #136]	@ (8006df0 <xTaskIncrementTick+0x160>)
 8006d68:	6013      	str	r3, [r2, #0]
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d6e:	4613      	mov	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4413      	add	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4a1f      	ldr	r2, [pc, #124]	@ (8006df4 <xTaskIncrementTick+0x164>)
 8006d78:	441a      	add	r2, r3
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	3304      	adds	r3, #4
 8006d7e:	4619      	mov	r1, r3
 8006d80:	4610      	mov	r0, r2
 8006d82:	f7fe fce8 	bl	8005756 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8006df8 <xTaskIncrementTick+0x168>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d3b8      	bcc.n	8006d06 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006d94:	2301      	movs	r3, #1
 8006d96:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d98:	e7b5      	b.n	8006d06 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d9a:	4b17      	ldr	r3, [pc, #92]	@ (8006df8 <xTaskIncrementTick+0x168>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006da0:	4914      	ldr	r1, [pc, #80]	@ (8006df4 <xTaskIncrementTick+0x164>)
 8006da2:	4613      	mov	r3, r2
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	4413      	add	r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	440b      	add	r3, r1
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d901      	bls.n	8006db6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006db2:	2301      	movs	r3, #1
 8006db4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006db6:	4b11      	ldr	r3, [pc, #68]	@ (8006dfc <xTaskIncrementTick+0x16c>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d007      	beq.n	8006dce <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	617b      	str	r3, [r7, #20]
 8006dc2:	e004      	b.n	8006dce <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8006e00 <xTaskIncrementTick+0x170>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	4a0d      	ldr	r2, [pc, #52]	@ (8006e00 <xTaskIncrementTick+0x170>)
 8006dcc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006dce:	697b      	ldr	r3, [r7, #20]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3718      	adds	r7, #24
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	20001254 	.word	0x20001254
 8006ddc:	20001230 	.word	0x20001230
 8006de0:	200011e4 	.word	0x200011e4
 8006de4:	200011e8 	.word	0x200011e8
 8006de8:	20001244 	.word	0x20001244
 8006dec:	2000124c 	.word	0x2000124c
 8006df0:	20001234 	.word	0x20001234
 8006df4:	20000d5c 	.word	0x20000d5c
 8006df8:	20000d58 	.word	0x20000d58
 8006dfc:	20001240 	.word	0x20001240
 8006e00:	2000123c 	.word	0x2000123c

08006e04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e0a:	4b28      	ldr	r3, [pc, #160]	@ (8006eac <vTaskSwitchContext+0xa8>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d003      	beq.n	8006e1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e12:	4b27      	ldr	r3, [pc, #156]	@ (8006eb0 <vTaskSwitchContext+0xac>)
 8006e14:	2201      	movs	r2, #1
 8006e16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006e18:	e042      	b.n	8006ea0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006e1a:	4b25      	ldr	r3, [pc, #148]	@ (8006eb0 <vTaskSwitchContext+0xac>)
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e20:	4b24      	ldr	r3, [pc, #144]	@ (8006eb4 <vTaskSwitchContext+0xb0>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	60fb      	str	r3, [r7, #12]
 8006e26:	e011      	b.n	8006e4c <vTaskSwitchContext+0x48>
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10b      	bne.n	8006e46 <vTaskSwitchContext+0x42>
	__asm volatile
 8006e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e32:	f383 8811 	msr	BASEPRI, r3
 8006e36:	f3bf 8f6f 	isb	sy
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	607b      	str	r3, [r7, #4]
}
 8006e40:	bf00      	nop
 8006e42:	bf00      	nop
 8006e44:	e7fd      	b.n	8006e42 <vTaskSwitchContext+0x3e>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	60fb      	str	r3, [r7, #12]
 8006e4c:	491a      	ldr	r1, [pc, #104]	@ (8006eb8 <vTaskSwitchContext+0xb4>)
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	4613      	mov	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4413      	add	r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	440b      	add	r3, r1
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d0e3      	beq.n	8006e28 <vTaskSwitchContext+0x24>
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	4613      	mov	r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	4413      	add	r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	4a13      	ldr	r2, [pc, #76]	@ (8006eb8 <vTaskSwitchContext+0xb4>)
 8006e6c:	4413      	add	r3, r2
 8006e6e:	60bb      	str	r3, [r7, #8]
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	685a      	ldr	r2, [r3, #4]
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	605a      	str	r2, [r3, #4]
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	3308      	adds	r3, #8
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d104      	bne.n	8006e90 <vTaskSwitchContext+0x8c>
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	685a      	ldr	r2, [r3, #4]
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	605a      	str	r2, [r3, #4]
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	4a09      	ldr	r2, [pc, #36]	@ (8006ebc <vTaskSwitchContext+0xb8>)
 8006e98:	6013      	str	r3, [r2, #0]
 8006e9a:	4a06      	ldr	r2, [pc, #24]	@ (8006eb4 <vTaskSwitchContext+0xb0>)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6013      	str	r3, [r2, #0]
}
 8006ea0:	bf00      	nop
 8006ea2:	3714      	adds	r7, #20
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr
 8006eac:	20001254 	.word	0x20001254
 8006eb0:	20001240 	.word	0x20001240
 8006eb4:	20001234 	.word	0x20001234
 8006eb8:	20000d5c 	.word	0x20000d5c
 8006ebc:	20000d58 	.word	0x20000d58

08006ec0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d10b      	bne.n	8006ee8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ed4:	f383 8811 	msr	BASEPRI, r3
 8006ed8:	f3bf 8f6f 	isb	sy
 8006edc:	f3bf 8f4f 	dsb	sy
 8006ee0:	60fb      	str	r3, [r7, #12]
}
 8006ee2:	bf00      	nop
 8006ee4:	bf00      	nop
 8006ee6:	e7fd      	b.n	8006ee4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ee8:	4b07      	ldr	r3, [pc, #28]	@ (8006f08 <vTaskPlaceOnEventList+0x48>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	3318      	adds	r3, #24
 8006eee:	4619      	mov	r1, r3
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f7fe fc54 	bl	800579e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ef6:	2101      	movs	r1, #1
 8006ef8:	6838      	ldr	r0, [r7, #0]
 8006efa:	f000 fc4b 	bl	8007794 <prvAddCurrentTaskToDelayedList>
}
 8006efe:	bf00      	nop
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	20000d58 	.word	0x20000d58

08006f0c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b086      	sub	sp, #24
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10b      	bne.n	8006f36 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8006f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f22:	f383 8811 	msr	BASEPRI, r3
 8006f26:	f3bf 8f6f 	isb	sy
 8006f2a:	f3bf 8f4f 	dsb	sy
 8006f2e:	617b      	str	r3, [r7, #20]
}
 8006f30:	bf00      	nop
 8006f32:	bf00      	nop
 8006f34:	e7fd      	b.n	8006f32 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8006f36:	4b12      	ldr	r3, [pc, #72]	@ (8006f80 <vTaskPlaceOnUnorderedEventList+0x74>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d10b      	bne.n	8006f56 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8006f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f42:	f383 8811 	msr	BASEPRI, r3
 8006f46:	f3bf 8f6f 	isb	sy
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	613b      	str	r3, [r7, #16]
}
 8006f50:	bf00      	nop
 8006f52:	bf00      	nop
 8006f54:	e7fd      	b.n	8006f52 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006f56:	4b0b      	ldr	r3, [pc, #44]	@ (8006f84 <vTaskPlaceOnUnorderedEventList+0x78>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006f60:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f62:	4b08      	ldr	r3, [pc, #32]	@ (8006f84 <vTaskPlaceOnUnorderedEventList+0x78>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	3318      	adds	r3, #24
 8006f68:	4619      	mov	r1, r3
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f7fe fbf3 	bl	8005756 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f70:	2101      	movs	r1, #1
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 fc0e 	bl	8007794 <prvAddCurrentTaskToDelayedList>
}
 8006f78:	bf00      	nop
 8006f7a:	3718      	adds	r7, #24
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	20001254 	.word	0x20001254
 8006f84:	20000d58 	.word	0x20000d58

08006f88 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b086      	sub	sp, #24
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10b      	bne.n	8006fb2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f9e:	f383 8811 	msr	BASEPRI, r3
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	f3bf 8f4f 	dsb	sy
 8006faa:	617b      	str	r3, [r7, #20]
}
 8006fac:	bf00      	nop
 8006fae:	bf00      	nop
 8006fb0:	e7fd      	b.n	8006fae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8006fdc <vTaskPlaceOnEventListRestricted+0x54>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	3318      	adds	r3, #24
 8006fb8:	4619      	mov	r1, r3
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f7fe fbcb 	bl	8005756 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d002      	beq.n	8006fcc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8006fca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006fcc:	6879      	ldr	r1, [r7, #4]
 8006fce:	68b8      	ldr	r0, [r7, #8]
 8006fd0:	f000 fbe0 	bl	8007794 <prvAddCurrentTaskToDelayedList>
	}
 8006fd4:	bf00      	nop
 8006fd6:	3718      	adds	r7, #24
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	20000d58 	.word	0x20000d58

08006fe0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10b      	bne.n	800700e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ffa:	f383 8811 	msr	BASEPRI, r3
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	f3bf 8f4f 	dsb	sy
 8007006:	60fb      	str	r3, [r7, #12]
}
 8007008:	bf00      	nop
 800700a:	bf00      	nop
 800700c:	e7fd      	b.n	800700a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	3318      	adds	r3, #24
 8007012:	4618      	mov	r0, r3
 8007014:	f7fe fbfc 	bl	8005810 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007018:	4b1d      	ldr	r3, [pc, #116]	@ (8007090 <xTaskRemoveFromEventList+0xb0>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d11d      	bne.n	800705c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	3304      	adds	r3, #4
 8007024:	4618      	mov	r0, r3
 8007026:	f7fe fbf3 	bl	8005810 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800702e:	4b19      	ldr	r3, [pc, #100]	@ (8007094 <xTaskRemoveFromEventList+0xb4>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	429a      	cmp	r2, r3
 8007034:	d903      	bls.n	800703e <xTaskRemoveFromEventList+0x5e>
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800703a:	4a16      	ldr	r2, [pc, #88]	@ (8007094 <xTaskRemoveFromEventList+0xb4>)
 800703c:	6013      	str	r3, [r2, #0]
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007042:	4613      	mov	r3, r2
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	4413      	add	r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	4a13      	ldr	r2, [pc, #76]	@ (8007098 <xTaskRemoveFromEventList+0xb8>)
 800704c:	441a      	add	r2, r3
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	3304      	adds	r3, #4
 8007052:	4619      	mov	r1, r3
 8007054:	4610      	mov	r0, r2
 8007056:	f7fe fb7e 	bl	8005756 <vListInsertEnd>
 800705a:	e005      	b.n	8007068 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	3318      	adds	r3, #24
 8007060:	4619      	mov	r1, r3
 8007062:	480e      	ldr	r0, [pc, #56]	@ (800709c <xTaskRemoveFromEventList+0xbc>)
 8007064:	f7fe fb77 	bl	8005756 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800706c:	4b0c      	ldr	r3, [pc, #48]	@ (80070a0 <xTaskRemoveFromEventList+0xc0>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007072:	429a      	cmp	r2, r3
 8007074:	d905      	bls.n	8007082 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007076:	2301      	movs	r3, #1
 8007078:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800707a:	4b0a      	ldr	r3, [pc, #40]	@ (80070a4 <xTaskRemoveFromEventList+0xc4>)
 800707c:	2201      	movs	r2, #1
 800707e:	601a      	str	r2, [r3, #0]
 8007080:	e001      	b.n	8007086 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007082:	2300      	movs	r3, #0
 8007084:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007086:	697b      	ldr	r3, [r7, #20]
}
 8007088:	4618      	mov	r0, r3
 800708a:	3718      	adds	r7, #24
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	20001254 	.word	0x20001254
 8007094:	20001234 	.word	0x20001234
 8007098:	20000d5c 	.word	0x20000d5c
 800709c:	200011ec 	.word	0x200011ec
 80070a0:	20000d58 	.word	0x20000d58
 80070a4:	20001240 	.word	0x20001240

080070a8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b086      	sub	sp, #24
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80070b2:	4b2a      	ldr	r3, [pc, #168]	@ (800715c <vTaskRemoveFromUnorderedEventList+0xb4>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10b      	bne.n	80070d2 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 80070ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070be:	f383 8811 	msr	BASEPRI, r3
 80070c2:	f3bf 8f6f 	isb	sy
 80070c6:	f3bf 8f4f 	dsb	sy
 80070ca:	613b      	str	r3, [r7, #16]
}
 80070cc:	bf00      	nop
 80070ce:	bf00      	nop
 80070d0:	e7fd      	b.n	80070ce <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10b      	bne.n	8007100 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 80070e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ec:	f383 8811 	msr	BASEPRI, r3
 80070f0:	f3bf 8f6f 	isb	sy
 80070f4:	f3bf 8f4f 	dsb	sy
 80070f8:	60fb      	str	r3, [r7, #12]
}
 80070fa:	bf00      	nop
 80070fc:	bf00      	nop
 80070fe:	e7fd      	b.n	80070fc <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f7fe fb85 	bl	8005810 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	3304      	adds	r3, #4
 800710a:	4618      	mov	r0, r3
 800710c:	f7fe fb80 	bl	8005810 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007114:	4b12      	ldr	r3, [pc, #72]	@ (8007160 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	429a      	cmp	r2, r3
 800711a:	d903      	bls.n	8007124 <vTaskRemoveFromUnorderedEventList+0x7c>
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007120:	4a0f      	ldr	r2, [pc, #60]	@ (8007160 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8007122:	6013      	str	r3, [r2, #0]
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007128:	4613      	mov	r3, r2
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	4413      	add	r3, r2
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4a0c      	ldr	r2, [pc, #48]	@ (8007164 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8007132:	441a      	add	r2, r3
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	3304      	adds	r3, #4
 8007138:	4619      	mov	r1, r3
 800713a:	4610      	mov	r0, r2
 800713c:	f7fe fb0b 	bl	8005756 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007144:	4b08      	ldr	r3, [pc, #32]	@ (8007168 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800714a:	429a      	cmp	r2, r3
 800714c:	d902      	bls.n	8007154 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800714e:	4b07      	ldr	r3, [pc, #28]	@ (800716c <vTaskRemoveFromUnorderedEventList+0xc4>)
 8007150:	2201      	movs	r2, #1
 8007152:	601a      	str	r2, [r3, #0]
	}
}
 8007154:	bf00      	nop
 8007156:	3718      	adds	r7, #24
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}
 800715c:	20001254 	.word	0x20001254
 8007160:	20001234 	.word	0x20001234
 8007164:	20000d5c 	.word	0x20000d5c
 8007168:	20000d58 	.word	0x20000d58
 800716c:	20001240 	.word	0x20001240

08007170 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007178:	4b06      	ldr	r3, [pc, #24]	@ (8007194 <vTaskInternalSetTimeOutState+0x24>)
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007180:	4b05      	ldr	r3, [pc, #20]	@ (8007198 <vTaskInternalSetTimeOutState+0x28>)
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	605a      	str	r2, [r3, #4]
}
 8007188:	bf00      	nop
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr
 8007194:	20001244 	.word	0x20001244
 8007198:	20001230 	.word	0x20001230

0800719c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b088      	sub	sp, #32
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d10b      	bne.n	80071c4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80071ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b0:	f383 8811 	msr	BASEPRI, r3
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	613b      	str	r3, [r7, #16]
}
 80071be:	bf00      	nop
 80071c0:	bf00      	nop
 80071c2:	e7fd      	b.n	80071c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10b      	bne.n	80071e2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80071ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ce:	f383 8811 	msr	BASEPRI, r3
 80071d2:	f3bf 8f6f 	isb	sy
 80071d6:	f3bf 8f4f 	dsb	sy
 80071da:	60fb      	str	r3, [r7, #12]
}
 80071dc:	bf00      	nop
 80071de:	bf00      	nop
 80071e0:	e7fd      	b.n	80071de <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80071e2:	f000 ffd9 	bl	8008198 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80071e6:	4b1d      	ldr	r3, [pc, #116]	@ (800725c <xTaskCheckForTimeOut+0xc0>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	69ba      	ldr	r2, [r7, #24]
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071fe:	d102      	bne.n	8007206 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007200:	2300      	movs	r3, #0
 8007202:	61fb      	str	r3, [r7, #28]
 8007204:	e023      	b.n	800724e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	4b15      	ldr	r3, [pc, #84]	@ (8007260 <xTaskCheckForTimeOut+0xc4>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	429a      	cmp	r2, r3
 8007210:	d007      	beq.n	8007222 <xTaskCheckForTimeOut+0x86>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	69ba      	ldr	r2, [r7, #24]
 8007218:	429a      	cmp	r2, r3
 800721a:	d302      	bcc.n	8007222 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800721c:	2301      	movs	r3, #1
 800721e:	61fb      	str	r3, [r7, #28]
 8007220:	e015      	b.n	800724e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	697a      	ldr	r2, [r7, #20]
 8007228:	429a      	cmp	r2, r3
 800722a:	d20b      	bcs.n	8007244 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	1ad2      	subs	r2, r2, r3
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f7ff ff99 	bl	8007170 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800723e:	2300      	movs	r3, #0
 8007240:	61fb      	str	r3, [r7, #28]
 8007242:	e004      	b.n	800724e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	2200      	movs	r2, #0
 8007248:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800724a:	2301      	movs	r3, #1
 800724c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800724e:	f000 ffd5 	bl	80081fc <vPortExitCritical>

	return xReturn;
 8007252:	69fb      	ldr	r3, [r7, #28]
}
 8007254:	4618      	mov	r0, r3
 8007256:	3720      	adds	r7, #32
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}
 800725c:	20001230 	.word	0x20001230
 8007260:	20001244 	.word	0x20001244

08007264 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007264:	b480      	push	{r7}
 8007266:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007268:	4b03      	ldr	r3, [pc, #12]	@ (8007278 <vTaskMissedYield+0x14>)
 800726a:	2201      	movs	r2, #1
 800726c:	601a      	str	r2, [r3, #0]
}
 800726e:	bf00      	nop
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr
 8007278:	20001240 	.word	0x20001240

0800727c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007284:	f000 f852 	bl	800732c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007288:	4b06      	ldr	r3, [pc, #24]	@ (80072a4 <prvIdleTask+0x28>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2b01      	cmp	r3, #1
 800728e:	d9f9      	bls.n	8007284 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007290:	4b05      	ldr	r3, [pc, #20]	@ (80072a8 <prvIdleTask+0x2c>)
 8007292:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007296:	601a      	str	r2, [r3, #0]
 8007298:	f3bf 8f4f 	dsb	sy
 800729c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80072a0:	e7f0      	b.n	8007284 <prvIdleTask+0x8>
 80072a2:	bf00      	nop
 80072a4:	20000d5c 	.word	0x20000d5c
 80072a8:	e000ed04 	.word	0xe000ed04

080072ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072b2:	2300      	movs	r3, #0
 80072b4:	607b      	str	r3, [r7, #4]
 80072b6:	e00c      	b.n	80072d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	4613      	mov	r3, r2
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	4413      	add	r3, r2
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	4a12      	ldr	r2, [pc, #72]	@ (800730c <prvInitialiseTaskLists+0x60>)
 80072c4:	4413      	add	r3, r2
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7fe fa18 	bl	80056fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	3301      	adds	r3, #1
 80072d0:	607b      	str	r3, [r7, #4]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2b37      	cmp	r3, #55	@ 0x37
 80072d6:	d9ef      	bls.n	80072b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80072d8:	480d      	ldr	r0, [pc, #52]	@ (8007310 <prvInitialiseTaskLists+0x64>)
 80072da:	f7fe fa0f 	bl	80056fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80072de:	480d      	ldr	r0, [pc, #52]	@ (8007314 <prvInitialiseTaskLists+0x68>)
 80072e0:	f7fe fa0c 	bl	80056fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80072e4:	480c      	ldr	r0, [pc, #48]	@ (8007318 <prvInitialiseTaskLists+0x6c>)
 80072e6:	f7fe fa09 	bl	80056fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80072ea:	480c      	ldr	r0, [pc, #48]	@ (800731c <prvInitialiseTaskLists+0x70>)
 80072ec:	f7fe fa06 	bl	80056fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80072f0:	480b      	ldr	r0, [pc, #44]	@ (8007320 <prvInitialiseTaskLists+0x74>)
 80072f2:	f7fe fa03 	bl	80056fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80072f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007324 <prvInitialiseTaskLists+0x78>)
 80072f8:	4a05      	ldr	r2, [pc, #20]	@ (8007310 <prvInitialiseTaskLists+0x64>)
 80072fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80072fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007328 <prvInitialiseTaskLists+0x7c>)
 80072fe:	4a05      	ldr	r2, [pc, #20]	@ (8007314 <prvInitialiseTaskLists+0x68>)
 8007300:	601a      	str	r2, [r3, #0]
}
 8007302:	bf00      	nop
 8007304:	3708      	adds	r7, #8
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	20000d5c 	.word	0x20000d5c
 8007310:	200011bc 	.word	0x200011bc
 8007314:	200011d0 	.word	0x200011d0
 8007318:	200011ec 	.word	0x200011ec
 800731c:	20001200 	.word	0x20001200
 8007320:	20001218 	.word	0x20001218
 8007324:	200011e4 	.word	0x200011e4
 8007328:	200011e8 	.word	0x200011e8

0800732c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007332:	e019      	b.n	8007368 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007334:	f000 ff30 	bl	8008198 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007338:	4b10      	ldr	r3, [pc, #64]	@ (800737c <prvCheckTasksWaitingTermination+0x50>)
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	3304      	adds	r3, #4
 8007344:	4618      	mov	r0, r3
 8007346:	f7fe fa63 	bl	8005810 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800734a:	4b0d      	ldr	r3, [pc, #52]	@ (8007380 <prvCheckTasksWaitingTermination+0x54>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	3b01      	subs	r3, #1
 8007350:	4a0b      	ldr	r2, [pc, #44]	@ (8007380 <prvCheckTasksWaitingTermination+0x54>)
 8007352:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007354:	4b0b      	ldr	r3, [pc, #44]	@ (8007384 <prvCheckTasksWaitingTermination+0x58>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	3b01      	subs	r3, #1
 800735a:	4a0a      	ldr	r2, [pc, #40]	@ (8007384 <prvCheckTasksWaitingTermination+0x58>)
 800735c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800735e:	f000 ff4d 	bl	80081fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f810 	bl	8007388 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007368:	4b06      	ldr	r3, [pc, #24]	@ (8007384 <prvCheckTasksWaitingTermination+0x58>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d1e1      	bne.n	8007334 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007370:	bf00      	nop
 8007372:	bf00      	nop
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	20001200 	.word	0x20001200
 8007380:	2000122c 	.word	0x2000122c
 8007384:	20001214 	.word	0x20001214

08007388 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007396:	2b00      	cmp	r3, #0
 8007398:	d108      	bne.n	80073ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800739e:	4618      	mov	r0, r3
 80073a0:	f001 f8ea 	bl	8008578 <vPortFree>
				vPortFree( pxTCB );
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f001 f8e7 	bl	8008578 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80073aa:	e019      	b.n	80073e0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d103      	bne.n	80073be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f001 f8de 	bl	8008578 <vPortFree>
	}
 80073bc:	e010      	b.n	80073e0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d00b      	beq.n	80073e0 <prvDeleteTCB+0x58>
	__asm volatile
 80073c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073cc:	f383 8811 	msr	BASEPRI, r3
 80073d0:	f3bf 8f6f 	isb	sy
 80073d4:	f3bf 8f4f 	dsb	sy
 80073d8:	60fb      	str	r3, [r7, #12]
}
 80073da:	bf00      	nop
 80073dc:	bf00      	nop
 80073de:	e7fd      	b.n	80073dc <prvDeleteTCB+0x54>
	}
 80073e0:	bf00      	nop
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073ee:	4b0c      	ldr	r3, [pc, #48]	@ (8007420 <prvResetNextTaskUnblockTime+0x38>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d104      	bne.n	8007402 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80073f8:	4b0a      	ldr	r3, [pc, #40]	@ (8007424 <prvResetNextTaskUnblockTime+0x3c>)
 80073fa:	f04f 32ff 	mov.w	r2, #4294967295
 80073fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007400:	e008      	b.n	8007414 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007402:	4b07      	ldr	r3, [pc, #28]	@ (8007420 <prvResetNextTaskUnblockTime+0x38>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	4a04      	ldr	r2, [pc, #16]	@ (8007424 <prvResetNextTaskUnblockTime+0x3c>)
 8007412:	6013      	str	r3, [r2, #0]
}
 8007414:	bf00      	nop
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr
 8007420:	200011e4 	.word	0x200011e4
 8007424:	2000124c 	.word	0x2000124c

08007428 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800742e:	4b05      	ldr	r3, [pc, #20]	@ (8007444 <xTaskGetCurrentTaskHandle+0x1c>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007434:	687b      	ldr	r3, [r7, #4]
	}
 8007436:	4618      	mov	r0, r3
 8007438:	370c      	adds	r7, #12
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	20000d58 	.word	0x20000d58

08007448 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800744e:	4b0b      	ldr	r3, [pc, #44]	@ (800747c <xTaskGetSchedulerState+0x34>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d102      	bne.n	800745c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007456:	2301      	movs	r3, #1
 8007458:	607b      	str	r3, [r7, #4]
 800745a:	e008      	b.n	800746e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800745c:	4b08      	ldr	r3, [pc, #32]	@ (8007480 <xTaskGetSchedulerState+0x38>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d102      	bne.n	800746a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007464:	2302      	movs	r3, #2
 8007466:	607b      	str	r3, [r7, #4]
 8007468:	e001      	b.n	800746e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800746a:	2300      	movs	r3, #0
 800746c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800746e:	687b      	ldr	r3, [r7, #4]
	}
 8007470:	4618      	mov	r0, r3
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	20001238 	.word	0x20001238
 8007480:	20001254 	.word	0x20001254

08007484 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007490:	2300      	movs	r3, #0
 8007492:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d051      	beq.n	800753e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800749e:	4b2a      	ldr	r3, [pc, #168]	@ (8007548 <xTaskPriorityInherit+0xc4>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d241      	bcs.n	800752c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	db06      	blt.n	80074be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074b0:	4b25      	ldr	r3, [pc, #148]	@ (8007548 <xTaskPriorityInherit+0xc4>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	6959      	ldr	r1, [r3, #20]
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074c6:	4613      	mov	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	4413      	add	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	4a1f      	ldr	r2, [pc, #124]	@ (800754c <xTaskPriorityInherit+0xc8>)
 80074d0:	4413      	add	r3, r2
 80074d2:	4299      	cmp	r1, r3
 80074d4:	d122      	bne.n	800751c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	3304      	adds	r3, #4
 80074da:	4618      	mov	r0, r3
 80074dc:	f7fe f998 	bl	8005810 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80074e0:	4b19      	ldr	r3, [pc, #100]	@ (8007548 <xTaskPriorityInherit+0xc4>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074ee:	4b18      	ldr	r3, [pc, #96]	@ (8007550 <xTaskPriorityInherit+0xcc>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d903      	bls.n	80074fe <xTaskPriorityInherit+0x7a>
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074fa:	4a15      	ldr	r2, [pc, #84]	@ (8007550 <xTaskPriorityInherit+0xcc>)
 80074fc:	6013      	str	r3, [r2, #0]
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007502:	4613      	mov	r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	4413      	add	r3, r2
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4a10      	ldr	r2, [pc, #64]	@ (800754c <xTaskPriorityInherit+0xc8>)
 800750c:	441a      	add	r2, r3
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	3304      	adds	r3, #4
 8007512:	4619      	mov	r1, r3
 8007514:	4610      	mov	r0, r2
 8007516:	f7fe f91e 	bl	8005756 <vListInsertEnd>
 800751a:	e004      	b.n	8007526 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800751c:	4b0a      	ldr	r3, [pc, #40]	@ (8007548 <xTaskPriorityInherit+0xc4>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007526:	2301      	movs	r3, #1
 8007528:	60fb      	str	r3, [r7, #12]
 800752a:	e008      	b.n	800753e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007530:	4b05      	ldr	r3, [pc, #20]	@ (8007548 <xTaskPriorityInherit+0xc4>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007536:	429a      	cmp	r2, r3
 8007538:	d201      	bcs.n	800753e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800753a:	2301      	movs	r3, #1
 800753c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800753e:	68fb      	ldr	r3, [r7, #12]
	}
 8007540:	4618      	mov	r0, r3
 8007542:	3710      	adds	r7, #16
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	20000d58 	.word	0x20000d58
 800754c:	20000d5c 	.word	0x20000d5c
 8007550:	20001234 	.word	0x20001234

08007554 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007554:	b580      	push	{r7, lr}
 8007556:	b086      	sub	sp, #24
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007560:	2300      	movs	r3, #0
 8007562:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d058      	beq.n	800761c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800756a:	4b2f      	ldr	r3, [pc, #188]	@ (8007628 <xTaskPriorityDisinherit+0xd4>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	693a      	ldr	r2, [r7, #16]
 8007570:	429a      	cmp	r2, r3
 8007572:	d00b      	beq.n	800758c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007578:	f383 8811 	msr	BASEPRI, r3
 800757c:	f3bf 8f6f 	isb	sy
 8007580:	f3bf 8f4f 	dsb	sy
 8007584:	60fb      	str	r3, [r7, #12]
}
 8007586:	bf00      	nop
 8007588:	bf00      	nop
 800758a:	e7fd      	b.n	8007588 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007590:	2b00      	cmp	r3, #0
 8007592:	d10b      	bne.n	80075ac <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007598:	f383 8811 	msr	BASEPRI, r3
 800759c:	f3bf 8f6f 	isb	sy
 80075a0:	f3bf 8f4f 	dsb	sy
 80075a4:	60bb      	str	r3, [r7, #8]
}
 80075a6:	bf00      	nop
 80075a8:	bf00      	nop
 80075aa:	e7fd      	b.n	80075a8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075b0:	1e5a      	subs	r2, r3, #1
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075be:	429a      	cmp	r2, r3
 80075c0:	d02c      	beq.n	800761c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d128      	bne.n	800761c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	3304      	adds	r3, #4
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7fe f91e 	bl	8005810 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075ec:	4b0f      	ldr	r3, [pc, #60]	@ (800762c <xTaskPriorityDisinherit+0xd8>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d903      	bls.n	80075fc <xTaskPriorityDisinherit+0xa8>
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f8:	4a0c      	ldr	r2, [pc, #48]	@ (800762c <xTaskPriorityDisinherit+0xd8>)
 80075fa:	6013      	str	r3, [r2, #0]
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007600:	4613      	mov	r3, r2
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	4413      	add	r3, r2
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	4a09      	ldr	r2, [pc, #36]	@ (8007630 <xTaskPriorityDisinherit+0xdc>)
 800760a:	441a      	add	r2, r3
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	3304      	adds	r3, #4
 8007610:	4619      	mov	r1, r3
 8007612:	4610      	mov	r0, r2
 8007614:	f7fe f89f 	bl	8005756 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007618:	2301      	movs	r3, #1
 800761a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800761c:	697b      	ldr	r3, [r7, #20]
	}
 800761e:	4618      	mov	r0, r3
 8007620:	3718      	adds	r7, #24
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	20000d58 	.word	0x20000d58
 800762c:	20001234 	.word	0x20001234
 8007630:	20000d5c 	.word	0x20000d5c

08007634 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007634:	b580      	push	{r7, lr}
 8007636:	b088      	sub	sp, #32
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007642:	2301      	movs	r3, #1
 8007644:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d06c      	beq.n	8007726 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007650:	2b00      	cmp	r3, #0
 8007652:	d10b      	bne.n	800766c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007658:	f383 8811 	msr	BASEPRI, r3
 800765c:	f3bf 8f6f 	isb	sy
 8007660:	f3bf 8f4f 	dsb	sy
 8007664:	60fb      	str	r3, [r7, #12]
}
 8007666:	bf00      	nop
 8007668:	bf00      	nop
 800766a:	e7fd      	b.n	8007668 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007670:	683a      	ldr	r2, [r7, #0]
 8007672:	429a      	cmp	r2, r3
 8007674:	d902      	bls.n	800767c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	61fb      	str	r3, [r7, #28]
 800767a:	e002      	b.n	8007682 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007680:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007686:	69fa      	ldr	r2, [r7, #28]
 8007688:	429a      	cmp	r2, r3
 800768a:	d04c      	beq.n	8007726 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007690:	697a      	ldr	r2, [r7, #20]
 8007692:	429a      	cmp	r2, r3
 8007694:	d147      	bne.n	8007726 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007696:	4b26      	ldr	r3, [pc, #152]	@ (8007730 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	69ba      	ldr	r2, [r7, #24]
 800769c:	429a      	cmp	r2, r3
 800769e:	d10b      	bne.n	80076b8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80076a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a4:	f383 8811 	msr	BASEPRI, r3
 80076a8:	f3bf 8f6f 	isb	sy
 80076ac:	f3bf 8f4f 	dsb	sy
 80076b0:	60bb      	str	r3, [r7, #8]
}
 80076b2:	bf00      	nop
 80076b4:	bf00      	nop
 80076b6:	e7fd      	b.n	80076b4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076bc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	69fa      	ldr	r2, [r7, #28]
 80076c2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	699b      	ldr	r3, [r3, #24]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	db04      	blt.n	80076d6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	6959      	ldr	r1, [r3, #20]
 80076da:	693a      	ldr	r2, [r7, #16]
 80076dc:	4613      	mov	r3, r2
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	4413      	add	r3, r2
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	4a13      	ldr	r2, [pc, #76]	@ (8007734 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80076e6:	4413      	add	r3, r2
 80076e8:	4299      	cmp	r1, r3
 80076ea:	d11c      	bne.n	8007726 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	3304      	adds	r3, #4
 80076f0:	4618      	mov	r0, r3
 80076f2:	f7fe f88d 	bl	8005810 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076fa:	4b0f      	ldr	r3, [pc, #60]	@ (8007738 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d903      	bls.n	800770a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007706:	4a0c      	ldr	r2, [pc, #48]	@ (8007738 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007708:	6013      	str	r3, [r2, #0]
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800770e:	4613      	mov	r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	4413      	add	r3, r2
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4a07      	ldr	r2, [pc, #28]	@ (8007734 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007718:	441a      	add	r2, r3
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	3304      	adds	r3, #4
 800771e:	4619      	mov	r1, r3
 8007720:	4610      	mov	r0, r2
 8007722:	f7fe f818 	bl	8005756 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007726:	bf00      	nop
 8007728:	3720      	adds	r7, #32
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	20000d58 	.word	0x20000d58
 8007734:	20000d5c 	.word	0x20000d5c
 8007738:	20001234 	.word	0x20001234

0800773c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8007742:	4b09      	ldr	r3, [pc, #36]	@ (8007768 <uxTaskResetEventItemValue+0x2c>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	699b      	ldr	r3, [r3, #24]
 8007748:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800774a:	4b07      	ldr	r3, [pc, #28]	@ (8007768 <uxTaskResetEventItemValue+0x2c>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007750:	4b05      	ldr	r3, [pc, #20]	@ (8007768 <uxTaskResetEventItemValue+0x2c>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8007758:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800775a:	687b      	ldr	r3, [r7, #4]
}
 800775c:	4618      	mov	r0, r3
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr
 8007768:	20000d58 	.word	0x20000d58

0800776c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800776c:	b480      	push	{r7}
 800776e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007770:	4b07      	ldr	r3, [pc, #28]	@ (8007790 <pvTaskIncrementMutexHeldCount+0x24>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d004      	beq.n	8007782 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007778:	4b05      	ldr	r3, [pc, #20]	@ (8007790 <pvTaskIncrementMutexHeldCount+0x24>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800777e:	3201      	adds	r2, #1
 8007780:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007782:	4b03      	ldr	r3, [pc, #12]	@ (8007790 <pvTaskIncrementMutexHeldCount+0x24>)
 8007784:	681b      	ldr	r3, [r3, #0]
	}
 8007786:	4618      	mov	r0, r3
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr
 8007790:	20000d58 	.word	0x20000d58

08007794 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800779e:	4b21      	ldr	r3, [pc, #132]	@ (8007824 <prvAddCurrentTaskToDelayedList+0x90>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077a4:	4b20      	ldr	r3, [pc, #128]	@ (8007828 <prvAddCurrentTaskToDelayedList+0x94>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	3304      	adds	r3, #4
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7fe f830 	bl	8005810 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b6:	d10a      	bne.n	80077ce <prvAddCurrentTaskToDelayedList+0x3a>
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d007      	beq.n	80077ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077be:	4b1a      	ldr	r3, [pc, #104]	@ (8007828 <prvAddCurrentTaskToDelayedList+0x94>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	3304      	adds	r3, #4
 80077c4:	4619      	mov	r1, r3
 80077c6:	4819      	ldr	r0, [pc, #100]	@ (800782c <prvAddCurrentTaskToDelayedList+0x98>)
 80077c8:	f7fd ffc5 	bl	8005756 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80077cc:	e026      	b.n	800781c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4413      	add	r3, r2
 80077d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80077d6:	4b14      	ldr	r3, [pc, #80]	@ (8007828 <prvAddCurrentTaskToDelayedList+0x94>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80077de:	68ba      	ldr	r2, [r7, #8]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d209      	bcs.n	80077fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077e6:	4b12      	ldr	r3, [pc, #72]	@ (8007830 <prvAddCurrentTaskToDelayedList+0x9c>)
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	4b0f      	ldr	r3, [pc, #60]	@ (8007828 <prvAddCurrentTaskToDelayedList+0x94>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	3304      	adds	r3, #4
 80077f0:	4619      	mov	r1, r3
 80077f2:	4610      	mov	r0, r2
 80077f4:	f7fd ffd3 	bl	800579e <vListInsert>
}
 80077f8:	e010      	b.n	800781c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077fa:	4b0e      	ldr	r3, [pc, #56]	@ (8007834 <prvAddCurrentTaskToDelayedList+0xa0>)
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	4b0a      	ldr	r3, [pc, #40]	@ (8007828 <prvAddCurrentTaskToDelayedList+0x94>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	3304      	adds	r3, #4
 8007804:	4619      	mov	r1, r3
 8007806:	4610      	mov	r0, r2
 8007808:	f7fd ffc9 	bl	800579e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800780c:	4b0a      	ldr	r3, [pc, #40]	@ (8007838 <prvAddCurrentTaskToDelayedList+0xa4>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	68ba      	ldr	r2, [r7, #8]
 8007812:	429a      	cmp	r2, r3
 8007814:	d202      	bcs.n	800781c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007816:	4a08      	ldr	r2, [pc, #32]	@ (8007838 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	6013      	str	r3, [r2, #0]
}
 800781c:	bf00      	nop
 800781e:	3710      	adds	r7, #16
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	20001230 	.word	0x20001230
 8007828:	20000d58 	.word	0x20000d58
 800782c:	20001218 	.word	0x20001218
 8007830:	200011e8 	.word	0x200011e8
 8007834:	200011e4 	.word	0x200011e4
 8007838:	2000124c 	.word	0x2000124c

0800783c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b08a      	sub	sp, #40	@ 0x28
 8007840:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007842:	2300      	movs	r3, #0
 8007844:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007846:	f000 fb13 	bl	8007e70 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800784a:	4b1d      	ldr	r3, [pc, #116]	@ (80078c0 <xTimerCreateTimerTask+0x84>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d021      	beq.n	8007896 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007852:	2300      	movs	r3, #0
 8007854:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007856:	2300      	movs	r3, #0
 8007858:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800785a:	1d3a      	adds	r2, r7, #4
 800785c:	f107 0108 	add.w	r1, r7, #8
 8007860:	f107 030c 	add.w	r3, r7, #12
 8007864:	4618      	mov	r0, r3
 8007866:	f7fd fcbb 	bl	80051e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800786a:	6879      	ldr	r1, [r7, #4]
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	9202      	str	r2, [sp, #8]
 8007872:	9301      	str	r3, [sp, #4]
 8007874:	2302      	movs	r3, #2
 8007876:	9300      	str	r3, [sp, #0]
 8007878:	2300      	movs	r3, #0
 800787a:	460a      	mov	r2, r1
 800787c:	4911      	ldr	r1, [pc, #68]	@ (80078c4 <xTimerCreateTimerTask+0x88>)
 800787e:	4812      	ldr	r0, [pc, #72]	@ (80078c8 <xTimerCreateTimerTask+0x8c>)
 8007880:	f7fe ff06 	bl	8006690 <xTaskCreateStatic>
 8007884:	4603      	mov	r3, r0
 8007886:	4a11      	ldr	r2, [pc, #68]	@ (80078cc <xTimerCreateTimerTask+0x90>)
 8007888:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800788a:	4b10      	ldr	r3, [pc, #64]	@ (80078cc <xTimerCreateTimerTask+0x90>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d001      	beq.n	8007896 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007892:	2301      	movs	r3, #1
 8007894:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10b      	bne.n	80078b4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800789c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a0:	f383 8811 	msr	BASEPRI, r3
 80078a4:	f3bf 8f6f 	isb	sy
 80078a8:	f3bf 8f4f 	dsb	sy
 80078ac:	613b      	str	r3, [r7, #16]
}
 80078ae:	bf00      	nop
 80078b0:	bf00      	nop
 80078b2:	e7fd      	b.n	80078b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80078b4:	697b      	ldr	r3, [r7, #20]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3718      	adds	r7, #24
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	20001288 	.word	0x20001288
 80078c4:	08009324 	.word	0x08009324
 80078c8:	08007a09 	.word	0x08007a09
 80078cc:	2000128c 	.word	0x2000128c

080078d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b08a      	sub	sp, #40	@ 0x28
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	607a      	str	r2, [r7, #4]
 80078dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80078de:	2300      	movs	r3, #0
 80078e0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d10b      	bne.n	8007900 <xTimerGenericCommand+0x30>
	__asm volatile
 80078e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ec:	f383 8811 	msr	BASEPRI, r3
 80078f0:	f3bf 8f6f 	isb	sy
 80078f4:	f3bf 8f4f 	dsb	sy
 80078f8:	623b      	str	r3, [r7, #32]
}
 80078fa:	bf00      	nop
 80078fc:	bf00      	nop
 80078fe:	e7fd      	b.n	80078fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007900:	4b19      	ldr	r3, [pc, #100]	@ (8007968 <xTimerGenericCommand+0x98>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d02a      	beq.n	800795e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	2b05      	cmp	r3, #5
 8007918:	dc18      	bgt.n	800794c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800791a:	f7ff fd95 	bl	8007448 <xTaskGetSchedulerState>
 800791e:	4603      	mov	r3, r0
 8007920:	2b02      	cmp	r3, #2
 8007922:	d109      	bne.n	8007938 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007924:	4b10      	ldr	r3, [pc, #64]	@ (8007968 <xTimerGenericCommand+0x98>)
 8007926:	6818      	ldr	r0, [r3, #0]
 8007928:	f107 0110 	add.w	r1, r7, #16
 800792c:	2300      	movs	r3, #0
 800792e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007930:	f7fe f996 	bl	8005c60 <xQueueGenericSend>
 8007934:	6278      	str	r0, [r7, #36]	@ 0x24
 8007936:	e012      	b.n	800795e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007938:	4b0b      	ldr	r3, [pc, #44]	@ (8007968 <xTimerGenericCommand+0x98>)
 800793a:	6818      	ldr	r0, [r3, #0]
 800793c:	f107 0110 	add.w	r1, r7, #16
 8007940:	2300      	movs	r3, #0
 8007942:	2200      	movs	r2, #0
 8007944:	f7fe f98c 	bl	8005c60 <xQueueGenericSend>
 8007948:	6278      	str	r0, [r7, #36]	@ 0x24
 800794a:	e008      	b.n	800795e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800794c:	4b06      	ldr	r3, [pc, #24]	@ (8007968 <xTimerGenericCommand+0x98>)
 800794e:	6818      	ldr	r0, [r3, #0]
 8007950:	f107 0110 	add.w	r1, r7, #16
 8007954:	2300      	movs	r3, #0
 8007956:	683a      	ldr	r2, [r7, #0]
 8007958:	f7fe fa84 	bl	8005e64 <xQueueGenericSendFromISR>
 800795c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800795e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007960:	4618      	mov	r0, r3
 8007962:	3728      	adds	r7, #40	@ 0x28
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	20001288 	.word	0x20001288

0800796c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b088      	sub	sp, #32
 8007970:	af02      	add	r7, sp, #8
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007976:	4b23      	ldr	r3, [pc, #140]	@ (8007a04 <prvProcessExpiredTimer+0x98>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	3304      	adds	r3, #4
 8007984:	4618      	mov	r0, r3
 8007986:	f7fd ff43 	bl	8005810 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007990:	f003 0304 	and.w	r3, r3, #4
 8007994:	2b00      	cmp	r3, #0
 8007996:	d023      	beq.n	80079e0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	699a      	ldr	r2, [r3, #24]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	18d1      	adds	r1, r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	683a      	ldr	r2, [r7, #0]
 80079a4:	6978      	ldr	r0, [r7, #20]
 80079a6:	f000 f8d5 	bl	8007b54 <prvInsertTimerInActiveList>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d020      	beq.n	80079f2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80079b0:	2300      	movs	r3, #0
 80079b2:	9300      	str	r3, [sp, #0]
 80079b4:	2300      	movs	r3, #0
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	2100      	movs	r1, #0
 80079ba:	6978      	ldr	r0, [r7, #20]
 80079bc:	f7ff ff88 	bl	80078d0 <xTimerGenericCommand>
 80079c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d114      	bne.n	80079f2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80079c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079cc:	f383 8811 	msr	BASEPRI, r3
 80079d0:	f3bf 8f6f 	isb	sy
 80079d4:	f3bf 8f4f 	dsb	sy
 80079d8:	60fb      	str	r3, [r7, #12]
}
 80079da:	bf00      	nop
 80079dc:	bf00      	nop
 80079de:	e7fd      	b.n	80079dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80079e6:	f023 0301 	bic.w	r3, r3, #1
 80079ea:	b2da      	uxtb	r2, r3
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	6a1b      	ldr	r3, [r3, #32]
 80079f6:	6978      	ldr	r0, [r7, #20]
 80079f8:	4798      	blx	r3
}
 80079fa:	bf00      	nop
 80079fc:	3718      	adds	r7, #24
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	20001280 	.word	0x20001280

08007a08 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a10:	f107 0308 	add.w	r3, r7, #8
 8007a14:	4618      	mov	r0, r3
 8007a16:	f000 f859 	bl	8007acc <prvGetNextExpireTime>
 8007a1a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	4619      	mov	r1, r3
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f000 f805 	bl	8007a30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007a26:	f000 f8d7 	bl	8007bd8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a2a:	bf00      	nop
 8007a2c:	e7f0      	b.n	8007a10 <prvTimerTask+0x8>
	...

08007a30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007a3a:	f7ff f86d 	bl	8006b18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a3e:	f107 0308 	add.w	r3, r7, #8
 8007a42:	4618      	mov	r0, r3
 8007a44:	f000 f866 	bl	8007b14 <prvSampleTimeNow>
 8007a48:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d130      	bne.n	8007ab2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d10a      	bne.n	8007a6c <prvProcessTimerOrBlockTask+0x3c>
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d806      	bhi.n	8007a6c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007a5e:	f7ff f869 	bl	8006b34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007a62:	68f9      	ldr	r1, [r7, #12]
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f7ff ff81 	bl	800796c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007a6a:	e024      	b.n	8007ab6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d008      	beq.n	8007a84 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007a72:	4b13      	ldr	r3, [pc, #76]	@ (8007ac0 <prvProcessTimerOrBlockTask+0x90>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d101      	bne.n	8007a80 <prvProcessTimerOrBlockTask+0x50>
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e000      	b.n	8007a82 <prvProcessTimerOrBlockTask+0x52>
 8007a80:	2300      	movs	r3, #0
 8007a82:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a84:	4b0f      	ldr	r3, [pc, #60]	@ (8007ac4 <prvProcessTimerOrBlockTask+0x94>)
 8007a86:	6818      	ldr	r0, [r3, #0]
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	1ad3      	subs	r3, r2, r3
 8007a8e:	683a      	ldr	r2, [r7, #0]
 8007a90:	4619      	mov	r1, r3
 8007a92:	f7fe fdc9 	bl	8006628 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007a96:	f7ff f84d 	bl	8006b34 <xTaskResumeAll>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d10a      	bne.n	8007ab6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007aa0:	4b09      	ldr	r3, [pc, #36]	@ (8007ac8 <prvProcessTimerOrBlockTask+0x98>)
 8007aa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007aa6:	601a      	str	r2, [r3, #0]
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	f3bf 8f6f 	isb	sy
}
 8007ab0:	e001      	b.n	8007ab6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007ab2:	f7ff f83f 	bl	8006b34 <xTaskResumeAll>
}
 8007ab6:	bf00      	nop
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	20001284 	.word	0x20001284
 8007ac4:	20001288 	.word	0x20001288
 8007ac8:	e000ed04 	.word	0xe000ed04

08007acc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8007b10 <prvGetNextExpireTime+0x44>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d101      	bne.n	8007ae2 <prvGetNextExpireTime+0x16>
 8007ade:	2201      	movs	r2, #1
 8007ae0:	e000      	b.n	8007ae4 <prvGetNextExpireTime+0x18>
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d105      	bne.n	8007afc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007af0:	4b07      	ldr	r3, [pc, #28]	@ (8007b10 <prvGetNextExpireTime+0x44>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	60fb      	str	r3, [r7, #12]
 8007afa:	e001      	b.n	8007b00 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007afc:	2300      	movs	r3, #0
 8007afe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007b00:	68fb      	ldr	r3, [r7, #12]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3714      	adds	r7, #20
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	20001280 	.word	0x20001280

08007b14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007b1c:	f7ff f8a8 	bl	8006c70 <xTaskGetTickCount>
 8007b20:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007b22:	4b0b      	ldr	r3, [pc, #44]	@ (8007b50 <prvSampleTimeNow+0x3c>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d205      	bcs.n	8007b38 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007b2c:	f000 f93a 	bl	8007da4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	601a      	str	r2, [r3, #0]
 8007b36:	e002      	b.n	8007b3e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007b3e:	4a04      	ldr	r2, [pc, #16]	@ (8007b50 <prvSampleTimeNow+0x3c>)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007b44:	68fb      	ldr	r3, [r7, #12]
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	20001290 	.word	0x20001290

08007b54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b086      	sub	sp, #24
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	607a      	str	r2, [r7, #4]
 8007b60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007b62:	2300      	movs	r3, #0
 8007b64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d812      	bhi.n	8007ba0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	1ad2      	subs	r2, r2, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	699b      	ldr	r3, [r3, #24]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d302      	bcc.n	8007b8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	617b      	str	r3, [r7, #20]
 8007b8c:	e01b      	b.n	8007bc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007b8e:	4b10      	ldr	r3, [pc, #64]	@ (8007bd0 <prvInsertTimerInActiveList+0x7c>)
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	3304      	adds	r3, #4
 8007b96:	4619      	mov	r1, r3
 8007b98:	4610      	mov	r0, r2
 8007b9a:	f7fd fe00 	bl	800579e <vListInsert>
 8007b9e:	e012      	b.n	8007bc6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d206      	bcs.n	8007bb6 <prvInsertTimerInActiveList+0x62>
 8007ba8:	68ba      	ldr	r2, [r7, #8]
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d302      	bcc.n	8007bb6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	617b      	str	r3, [r7, #20]
 8007bb4:	e007      	b.n	8007bc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007bb6:	4b07      	ldr	r3, [pc, #28]	@ (8007bd4 <prvInsertTimerInActiveList+0x80>)
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	3304      	adds	r3, #4
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	4610      	mov	r0, r2
 8007bc2:	f7fd fdec 	bl	800579e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007bc6:	697b      	ldr	r3, [r7, #20]
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3718      	adds	r7, #24
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	20001284 	.word	0x20001284
 8007bd4:	20001280 	.word	0x20001280

08007bd8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b08e      	sub	sp, #56	@ 0x38
 8007bdc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007bde:	e0ce      	b.n	8007d7e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	da19      	bge.n	8007c1a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007be6:	1d3b      	adds	r3, r7, #4
 8007be8:	3304      	adds	r3, #4
 8007bea:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10b      	bne.n	8007c0a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf6:	f383 8811 	msr	BASEPRI, r3
 8007bfa:	f3bf 8f6f 	isb	sy
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	61fb      	str	r3, [r7, #28]
}
 8007c04:	bf00      	nop
 8007c06:	bf00      	nop
 8007c08:	e7fd      	b.n	8007c06 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c10:	6850      	ldr	r0, [r2, #4]
 8007c12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c14:	6892      	ldr	r2, [r2, #8]
 8007c16:	4611      	mov	r1, r2
 8007c18:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f2c0 80ae 	blt.w	8007d7e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c28:	695b      	ldr	r3, [r3, #20]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d004      	beq.n	8007c38 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c30:	3304      	adds	r3, #4
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7fd fdec 	bl	8005810 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c38:	463b      	mov	r3, r7
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7ff ff6a 	bl	8007b14 <prvSampleTimeNow>
 8007c40:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2b09      	cmp	r3, #9
 8007c46:	f200 8097 	bhi.w	8007d78 <prvProcessReceivedCommands+0x1a0>
 8007c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8007c50 <prvProcessReceivedCommands+0x78>)
 8007c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c50:	08007c79 	.word	0x08007c79
 8007c54:	08007c79 	.word	0x08007c79
 8007c58:	08007c79 	.word	0x08007c79
 8007c5c:	08007cef 	.word	0x08007cef
 8007c60:	08007d03 	.word	0x08007d03
 8007c64:	08007d4f 	.word	0x08007d4f
 8007c68:	08007c79 	.word	0x08007c79
 8007c6c:	08007c79 	.word	0x08007c79
 8007c70:	08007cef 	.word	0x08007cef
 8007c74:	08007d03 	.word	0x08007d03
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c7e:	f043 0301 	orr.w	r3, r3, #1
 8007c82:	b2da      	uxtb	r2, r3
 8007c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007c8a:	68ba      	ldr	r2, [r7, #8]
 8007c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c8e:	699b      	ldr	r3, [r3, #24]
 8007c90:	18d1      	adds	r1, r2, r3
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c98:	f7ff ff5c 	bl	8007b54 <prvInsertTimerInActiveList>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d06c      	beq.n	8007d7c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca4:	6a1b      	ldr	r3, [r3, #32]
 8007ca6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ca8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007cb0:	f003 0304 	and.w	r3, r3, #4
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d061      	beq.n	8007d7c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007cb8:	68ba      	ldr	r2, [r7, #8]
 8007cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cbc:	699b      	ldr	r3, [r3, #24]
 8007cbe:	441a      	add	r2, r3
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	9300      	str	r3, [sp, #0]
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cca:	f7ff fe01 	bl	80078d0 <xTimerGenericCommand>
 8007cce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007cd0:	6a3b      	ldr	r3, [r7, #32]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d152      	bne.n	8007d7c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cda:	f383 8811 	msr	BASEPRI, r3
 8007cde:	f3bf 8f6f 	isb	sy
 8007ce2:	f3bf 8f4f 	dsb	sy
 8007ce6:	61bb      	str	r3, [r7, #24]
}
 8007ce8:	bf00      	nop
 8007cea:	bf00      	nop
 8007cec:	e7fd      	b.n	8007cea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cf0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007cf4:	f023 0301 	bic.w	r3, r3, #1
 8007cf8:	b2da      	uxtb	r2, r3
 8007cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cfc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007d00:	e03d      	b.n	8007d7e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d08:	f043 0301 	orr.w	r3, r3, #1
 8007d0c:	b2da      	uxtb	r2, r3
 8007d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d10:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d18:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d1c:	699b      	ldr	r3, [r3, #24]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10b      	bne.n	8007d3a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d26:	f383 8811 	msr	BASEPRI, r3
 8007d2a:	f3bf 8f6f 	isb	sy
 8007d2e:	f3bf 8f4f 	dsb	sy
 8007d32:	617b      	str	r3, [r7, #20]
}
 8007d34:	bf00      	nop
 8007d36:	bf00      	nop
 8007d38:	e7fd      	b.n	8007d36 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d3c:	699a      	ldr	r2, [r3, #24]
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d40:	18d1      	adds	r1, r2, r3
 8007d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d48:	f7ff ff04 	bl	8007b54 <prvInsertTimerInActiveList>
					break;
 8007d4c:	e017      	b.n	8007d7e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d54:	f003 0302 	and.w	r3, r3, #2
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d103      	bne.n	8007d64 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007d5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d5e:	f000 fc0b 	bl	8008578 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007d62:	e00c      	b.n	8007d7e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d66:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d6a:	f023 0301 	bic.w	r3, r3, #1
 8007d6e:	b2da      	uxtb	r2, r3
 8007d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007d76:	e002      	b.n	8007d7e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007d78:	bf00      	nop
 8007d7a:	e000      	b.n	8007d7e <prvProcessReceivedCommands+0x1a6>
					break;
 8007d7c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d7e:	4b08      	ldr	r3, [pc, #32]	@ (8007da0 <prvProcessReceivedCommands+0x1c8>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	1d39      	adds	r1, r7, #4
 8007d84:	2200      	movs	r2, #0
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7fe f90a 	bl	8005fa0 <xQueueReceive>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	f47f af26 	bne.w	8007be0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007d94:	bf00      	nop
 8007d96:	bf00      	nop
 8007d98:	3730      	adds	r7, #48	@ 0x30
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	20001288 	.word	0x20001288

08007da4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b088      	sub	sp, #32
 8007da8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007daa:	e049      	b.n	8007e40 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007dac:	4b2e      	ldr	r3, [pc, #184]	@ (8007e68 <prvSwitchTimerLists+0xc4>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007db6:	4b2c      	ldr	r3, [pc, #176]	@ (8007e68 <prvSwitchTimerLists+0xc4>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	3304      	adds	r3, #4
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7fd fd23 	bl	8005810 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6a1b      	ldr	r3, [r3, #32]
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007dd8:	f003 0304 	and.w	r3, r3, #4
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d02f      	beq.n	8007e40 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	699b      	ldr	r3, [r3, #24]
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	4413      	add	r3, r2
 8007de8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007dea:	68ba      	ldr	r2, [r7, #8]
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d90e      	bls.n	8007e10 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	68ba      	ldr	r2, [r7, #8]
 8007df6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8007e68 <prvSwitchTimerLists+0xc4>)
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	3304      	adds	r3, #4
 8007e06:	4619      	mov	r1, r3
 8007e08:	4610      	mov	r0, r2
 8007e0a:	f7fd fcc8 	bl	800579e <vListInsert>
 8007e0e:	e017      	b.n	8007e40 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e10:	2300      	movs	r3, #0
 8007e12:	9300      	str	r3, [sp, #0]
 8007e14:	2300      	movs	r3, #0
 8007e16:	693a      	ldr	r2, [r7, #16]
 8007e18:	2100      	movs	r1, #0
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	f7ff fd58 	bl	80078d0 <xTimerGenericCommand>
 8007e20:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d10b      	bne.n	8007e40 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e2c:	f383 8811 	msr	BASEPRI, r3
 8007e30:	f3bf 8f6f 	isb	sy
 8007e34:	f3bf 8f4f 	dsb	sy
 8007e38:	603b      	str	r3, [r7, #0]
}
 8007e3a:	bf00      	nop
 8007e3c:	bf00      	nop
 8007e3e:	e7fd      	b.n	8007e3c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e40:	4b09      	ldr	r3, [pc, #36]	@ (8007e68 <prvSwitchTimerLists+0xc4>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1b0      	bne.n	8007dac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007e4a:	4b07      	ldr	r3, [pc, #28]	@ (8007e68 <prvSwitchTimerLists+0xc4>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007e50:	4b06      	ldr	r3, [pc, #24]	@ (8007e6c <prvSwitchTimerLists+0xc8>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a04      	ldr	r2, [pc, #16]	@ (8007e68 <prvSwitchTimerLists+0xc4>)
 8007e56:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007e58:	4a04      	ldr	r2, [pc, #16]	@ (8007e6c <prvSwitchTimerLists+0xc8>)
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	6013      	str	r3, [r2, #0]
}
 8007e5e:	bf00      	nop
 8007e60:	3718      	adds	r7, #24
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	20001280 	.word	0x20001280
 8007e6c:	20001284 	.word	0x20001284

08007e70 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007e76:	f000 f98f 	bl	8008198 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007e7a:	4b15      	ldr	r3, [pc, #84]	@ (8007ed0 <prvCheckForValidListAndQueue+0x60>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d120      	bne.n	8007ec4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007e82:	4814      	ldr	r0, [pc, #80]	@ (8007ed4 <prvCheckForValidListAndQueue+0x64>)
 8007e84:	f7fd fc3a 	bl	80056fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007e88:	4813      	ldr	r0, [pc, #76]	@ (8007ed8 <prvCheckForValidListAndQueue+0x68>)
 8007e8a:	f7fd fc37 	bl	80056fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007e8e:	4b13      	ldr	r3, [pc, #76]	@ (8007edc <prvCheckForValidListAndQueue+0x6c>)
 8007e90:	4a10      	ldr	r2, [pc, #64]	@ (8007ed4 <prvCheckForValidListAndQueue+0x64>)
 8007e92:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007e94:	4b12      	ldr	r3, [pc, #72]	@ (8007ee0 <prvCheckForValidListAndQueue+0x70>)
 8007e96:	4a10      	ldr	r2, [pc, #64]	@ (8007ed8 <prvCheckForValidListAndQueue+0x68>)
 8007e98:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	9300      	str	r3, [sp, #0]
 8007e9e:	4b11      	ldr	r3, [pc, #68]	@ (8007ee4 <prvCheckForValidListAndQueue+0x74>)
 8007ea0:	4a11      	ldr	r2, [pc, #68]	@ (8007ee8 <prvCheckForValidListAndQueue+0x78>)
 8007ea2:	2110      	movs	r1, #16
 8007ea4:	200a      	movs	r0, #10
 8007ea6:	f7fd fd47 	bl	8005938 <xQueueGenericCreateStatic>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	4a08      	ldr	r2, [pc, #32]	@ (8007ed0 <prvCheckForValidListAndQueue+0x60>)
 8007eae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007eb0:	4b07      	ldr	r3, [pc, #28]	@ (8007ed0 <prvCheckForValidListAndQueue+0x60>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d005      	beq.n	8007ec4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007eb8:	4b05      	ldr	r3, [pc, #20]	@ (8007ed0 <prvCheckForValidListAndQueue+0x60>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	490b      	ldr	r1, [pc, #44]	@ (8007eec <prvCheckForValidListAndQueue+0x7c>)
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fe fb88 	bl	80065d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ec4:	f000 f99a 	bl	80081fc <vPortExitCritical>
}
 8007ec8:	bf00      	nop
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	20001288 	.word	0x20001288
 8007ed4:	20001258 	.word	0x20001258
 8007ed8:	2000126c 	.word	0x2000126c
 8007edc:	20001280 	.word	0x20001280
 8007ee0:	20001284 	.word	0x20001284
 8007ee4:	20001334 	.word	0x20001334
 8007ee8:	20001294 	.word	0x20001294
 8007eec:	0800932c 	.word	0x0800932c

08007ef0 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b08a      	sub	sp, #40	@ 0x28
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	607a      	str	r2, [r7, #4]
 8007efc:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8007efe:	f06f 0301 	mvn.w	r3, #1
 8007f02:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007f10:	4b06      	ldr	r3, [pc, #24]	@ (8007f2c <xTimerPendFunctionCallFromISR+0x3c>)
 8007f12:	6818      	ldr	r0, [r3, #0]
 8007f14:	f107 0114 	add.w	r1, r7, #20
 8007f18:	2300      	movs	r3, #0
 8007f1a:	683a      	ldr	r2, [r7, #0]
 8007f1c:	f7fd ffa2 	bl	8005e64 <xQueueGenericSendFromISR>
 8007f20:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8007f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3728      	adds	r7, #40	@ 0x28
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	20001288 	.word	0x20001288

08007f30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007f30:	b480      	push	{r7}
 8007f32:	b085      	sub	sp, #20
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	3b04      	subs	r3, #4
 8007f40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007f48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	3b04      	subs	r3, #4
 8007f4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	f023 0201 	bic.w	r2, r3, #1
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	3b04      	subs	r3, #4
 8007f5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f60:	4a0c      	ldr	r2, [pc, #48]	@ (8007f94 <pxPortInitialiseStack+0x64>)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	3b14      	subs	r3, #20
 8007f6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	3b04      	subs	r3, #4
 8007f76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f06f 0202 	mvn.w	r2, #2
 8007f7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	3b20      	subs	r3, #32
 8007f84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007f86:	68fb      	ldr	r3, [r7, #12]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3714      	adds	r7, #20
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr
 8007f94:	08007f99 	.word	0x08007f99

08007f98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007fa2:	4b13      	ldr	r3, [pc, #76]	@ (8007ff0 <prvTaskExitError+0x58>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007faa:	d00b      	beq.n	8007fc4 <prvTaskExitError+0x2c>
	__asm volatile
 8007fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb0:	f383 8811 	msr	BASEPRI, r3
 8007fb4:	f3bf 8f6f 	isb	sy
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	60fb      	str	r3, [r7, #12]
}
 8007fbe:	bf00      	nop
 8007fc0:	bf00      	nop
 8007fc2:	e7fd      	b.n	8007fc0 <prvTaskExitError+0x28>
	__asm volatile
 8007fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc8:	f383 8811 	msr	BASEPRI, r3
 8007fcc:	f3bf 8f6f 	isb	sy
 8007fd0:	f3bf 8f4f 	dsb	sy
 8007fd4:	60bb      	str	r3, [r7, #8]
}
 8007fd6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007fd8:	bf00      	nop
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d0fc      	beq.n	8007fda <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007fe0:	bf00      	nop
 8007fe2:	bf00      	nop
 8007fe4:	3714      	adds	r7, #20
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	20000018 	.word	0x20000018
	...

08008000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008000:	4b07      	ldr	r3, [pc, #28]	@ (8008020 <pxCurrentTCBConst2>)
 8008002:	6819      	ldr	r1, [r3, #0]
 8008004:	6808      	ldr	r0, [r1, #0]
 8008006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800800a:	f380 8809 	msr	PSP, r0
 800800e:	f3bf 8f6f 	isb	sy
 8008012:	f04f 0000 	mov.w	r0, #0
 8008016:	f380 8811 	msr	BASEPRI, r0
 800801a:	4770      	bx	lr
 800801c:	f3af 8000 	nop.w

08008020 <pxCurrentTCBConst2>:
 8008020:	20000d58 	.word	0x20000d58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008024:	bf00      	nop
 8008026:	bf00      	nop

08008028 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008028:	4808      	ldr	r0, [pc, #32]	@ (800804c <prvPortStartFirstTask+0x24>)
 800802a:	6800      	ldr	r0, [r0, #0]
 800802c:	6800      	ldr	r0, [r0, #0]
 800802e:	f380 8808 	msr	MSP, r0
 8008032:	f04f 0000 	mov.w	r0, #0
 8008036:	f380 8814 	msr	CONTROL, r0
 800803a:	b662      	cpsie	i
 800803c:	b661      	cpsie	f
 800803e:	f3bf 8f4f 	dsb	sy
 8008042:	f3bf 8f6f 	isb	sy
 8008046:	df00      	svc	0
 8008048:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800804a:	bf00      	nop
 800804c:	e000ed08 	.word	0xe000ed08

08008050 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b086      	sub	sp, #24
 8008054:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008056:	4b47      	ldr	r3, [pc, #284]	@ (8008174 <xPortStartScheduler+0x124>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a47      	ldr	r2, [pc, #284]	@ (8008178 <xPortStartScheduler+0x128>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d10b      	bne.n	8008078 <xPortStartScheduler+0x28>
	__asm volatile
 8008060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008064:	f383 8811 	msr	BASEPRI, r3
 8008068:	f3bf 8f6f 	isb	sy
 800806c:	f3bf 8f4f 	dsb	sy
 8008070:	60fb      	str	r3, [r7, #12]
}
 8008072:	bf00      	nop
 8008074:	bf00      	nop
 8008076:	e7fd      	b.n	8008074 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008078:	4b3e      	ldr	r3, [pc, #248]	@ (8008174 <xPortStartScheduler+0x124>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a3f      	ldr	r2, [pc, #252]	@ (800817c <xPortStartScheduler+0x12c>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d10b      	bne.n	800809a <xPortStartScheduler+0x4a>
	__asm volatile
 8008082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008086:	f383 8811 	msr	BASEPRI, r3
 800808a:	f3bf 8f6f 	isb	sy
 800808e:	f3bf 8f4f 	dsb	sy
 8008092:	613b      	str	r3, [r7, #16]
}
 8008094:	bf00      	nop
 8008096:	bf00      	nop
 8008098:	e7fd      	b.n	8008096 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800809a:	4b39      	ldr	r3, [pc, #228]	@ (8008180 <xPortStartScheduler+0x130>)
 800809c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	22ff      	movs	r2, #255	@ 0xff
 80080aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80080b4:	78fb      	ldrb	r3, [r7, #3]
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80080bc:	b2da      	uxtb	r2, r3
 80080be:	4b31      	ldr	r3, [pc, #196]	@ (8008184 <xPortStartScheduler+0x134>)
 80080c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80080c2:	4b31      	ldr	r3, [pc, #196]	@ (8008188 <xPortStartScheduler+0x138>)
 80080c4:	2207      	movs	r2, #7
 80080c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080c8:	e009      	b.n	80080de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80080ca:	4b2f      	ldr	r3, [pc, #188]	@ (8008188 <xPortStartScheduler+0x138>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	3b01      	subs	r3, #1
 80080d0:	4a2d      	ldr	r2, [pc, #180]	@ (8008188 <xPortStartScheduler+0x138>)
 80080d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80080d4:	78fb      	ldrb	r3, [r7, #3]
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	005b      	lsls	r3, r3, #1
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080de:	78fb      	ldrb	r3, [r7, #3]
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080e6:	2b80      	cmp	r3, #128	@ 0x80
 80080e8:	d0ef      	beq.n	80080ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80080ea:	4b27      	ldr	r3, [pc, #156]	@ (8008188 <xPortStartScheduler+0x138>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f1c3 0307 	rsb	r3, r3, #7
 80080f2:	2b04      	cmp	r3, #4
 80080f4:	d00b      	beq.n	800810e <xPortStartScheduler+0xbe>
	__asm volatile
 80080f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080fa:	f383 8811 	msr	BASEPRI, r3
 80080fe:	f3bf 8f6f 	isb	sy
 8008102:	f3bf 8f4f 	dsb	sy
 8008106:	60bb      	str	r3, [r7, #8]
}
 8008108:	bf00      	nop
 800810a:	bf00      	nop
 800810c:	e7fd      	b.n	800810a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800810e:	4b1e      	ldr	r3, [pc, #120]	@ (8008188 <xPortStartScheduler+0x138>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	021b      	lsls	r3, r3, #8
 8008114:	4a1c      	ldr	r2, [pc, #112]	@ (8008188 <xPortStartScheduler+0x138>)
 8008116:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008118:	4b1b      	ldr	r3, [pc, #108]	@ (8008188 <xPortStartScheduler+0x138>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008120:	4a19      	ldr	r2, [pc, #100]	@ (8008188 <xPortStartScheduler+0x138>)
 8008122:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	b2da      	uxtb	r2, r3
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800812c:	4b17      	ldr	r3, [pc, #92]	@ (800818c <xPortStartScheduler+0x13c>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a16      	ldr	r2, [pc, #88]	@ (800818c <xPortStartScheduler+0x13c>)
 8008132:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008136:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008138:	4b14      	ldr	r3, [pc, #80]	@ (800818c <xPortStartScheduler+0x13c>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a13      	ldr	r2, [pc, #76]	@ (800818c <xPortStartScheduler+0x13c>)
 800813e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008142:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008144:	f000 f8da 	bl	80082fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008148:	4b11      	ldr	r3, [pc, #68]	@ (8008190 <xPortStartScheduler+0x140>)
 800814a:	2200      	movs	r2, #0
 800814c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800814e:	f000 f8f9 	bl	8008344 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008152:	4b10      	ldr	r3, [pc, #64]	@ (8008194 <xPortStartScheduler+0x144>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a0f      	ldr	r2, [pc, #60]	@ (8008194 <xPortStartScheduler+0x144>)
 8008158:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800815c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800815e:	f7ff ff63 	bl	8008028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008162:	f7fe fe4f 	bl	8006e04 <vTaskSwitchContext>
	prvTaskExitError();
 8008166:	f7ff ff17 	bl	8007f98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3718      	adds	r7, #24
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	e000ed00 	.word	0xe000ed00
 8008178:	410fc271 	.word	0x410fc271
 800817c:	410fc270 	.word	0x410fc270
 8008180:	e000e400 	.word	0xe000e400
 8008184:	20001384 	.word	0x20001384
 8008188:	20001388 	.word	0x20001388
 800818c:	e000ed20 	.word	0xe000ed20
 8008190:	20000018 	.word	0x20000018
 8008194:	e000ef34 	.word	0xe000ef34

08008198 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
	__asm volatile
 800819e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081a2:	f383 8811 	msr	BASEPRI, r3
 80081a6:	f3bf 8f6f 	isb	sy
 80081aa:	f3bf 8f4f 	dsb	sy
 80081ae:	607b      	str	r3, [r7, #4]
}
 80081b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80081b2:	4b10      	ldr	r3, [pc, #64]	@ (80081f4 <vPortEnterCritical+0x5c>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	3301      	adds	r3, #1
 80081b8:	4a0e      	ldr	r2, [pc, #56]	@ (80081f4 <vPortEnterCritical+0x5c>)
 80081ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80081bc:	4b0d      	ldr	r3, [pc, #52]	@ (80081f4 <vPortEnterCritical+0x5c>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d110      	bne.n	80081e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80081c4:	4b0c      	ldr	r3, [pc, #48]	@ (80081f8 <vPortEnterCritical+0x60>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00b      	beq.n	80081e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80081ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081d2:	f383 8811 	msr	BASEPRI, r3
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	f3bf 8f4f 	dsb	sy
 80081de:	603b      	str	r3, [r7, #0]
}
 80081e0:	bf00      	nop
 80081e2:	bf00      	nop
 80081e4:	e7fd      	b.n	80081e2 <vPortEnterCritical+0x4a>
	}
}
 80081e6:	bf00      	nop
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	20000018 	.word	0x20000018
 80081f8:	e000ed04 	.word	0xe000ed04

080081fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008202:	4b12      	ldr	r3, [pc, #72]	@ (800824c <vPortExitCritical+0x50>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d10b      	bne.n	8008222 <vPortExitCritical+0x26>
	__asm volatile
 800820a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800820e:	f383 8811 	msr	BASEPRI, r3
 8008212:	f3bf 8f6f 	isb	sy
 8008216:	f3bf 8f4f 	dsb	sy
 800821a:	607b      	str	r3, [r7, #4]
}
 800821c:	bf00      	nop
 800821e:	bf00      	nop
 8008220:	e7fd      	b.n	800821e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008222:	4b0a      	ldr	r3, [pc, #40]	@ (800824c <vPortExitCritical+0x50>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	3b01      	subs	r3, #1
 8008228:	4a08      	ldr	r2, [pc, #32]	@ (800824c <vPortExitCritical+0x50>)
 800822a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800822c:	4b07      	ldr	r3, [pc, #28]	@ (800824c <vPortExitCritical+0x50>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d105      	bne.n	8008240 <vPortExitCritical+0x44>
 8008234:	2300      	movs	r3, #0
 8008236:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	f383 8811 	msr	BASEPRI, r3
}
 800823e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008240:	bf00      	nop
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr
 800824c:	20000018 	.word	0x20000018

08008250 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008250:	f3ef 8009 	mrs	r0, PSP
 8008254:	f3bf 8f6f 	isb	sy
 8008258:	4b15      	ldr	r3, [pc, #84]	@ (80082b0 <pxCurrentTCBConst>)
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	f01e 0f10 	tst.w	lr, #16
 8008260:	bf08      	it	eq
 8008262:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008266:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800826a:	6010      	str	r0, [r2, #0]
 800826c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008270:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008274:	f380 8811 	msr	BASEPRI, r0
 8008278:	f3bf 8f4f 	dsb	sy
 800827c:	f3bf 8f6f 	isb	sy
 8008280:	f7fe fdc0 	bl	8006e04 <vTaskSwitchContext>
 8008284:	f04f 0000 	mov.w	r0, #0
 8008288:	f380 8811 	msr	BASEPRI, r0
 800828c:	bc09      	pop	{r0, r3}
 800828e:	6819      	ldr	r1, [r3, #0]
 8008290:	6808      	ldr	r0, [r1, #0]
 8008292:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008296:	f01e 0f10 	tst.w	lr, #16
 800829a:	bf08      	it	eq
 800829c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80082a0:	f380 8809 	msr	PSP, r0
 80082a4:	f3bf 8f6f 	isb	sy
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop
 80082ac:	f3af 8000 	nop.w

080082b0 <pxCurrentTCBConst>:
 80082b0:	20000d58 	.word	0x20000d58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80082b4:	bf00      	nop
 80082b6:	bf00      	nop

080082b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
	__asm volatile
 80082be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c2:	f383 8811 	msr	BASEPRI, r3
 80082c6:	f3bf 8f6f 	isb	sy
 80082ca:	f3bf 8f4f 	dsb	sy
 80082ce:	607b      	str	r3, [r7, #4]
}
 80082d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80082d2:	f7fe fcdd 	bl	8006c90 <xTaskIncrementTick>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d003      	beq.n	80082e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80082dc:	4b06      	ldr	r3, [pc, #24]	@ (80082f8 <xPortSysTickHandler+0x40>)
 80082de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082e2:	601a      	str	r2, [r3, #0]
 80082e4:	2300      	movs	r3, #0
 80082e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	f383 8811 	msr	BASEPRI, r3
}
 80082ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80082f0:	bf00      	nop
 80082f2:	3708      	adds	r7, #8
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	e000ed04 	.word	0xe000ed04

080082fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80082fc:	b480      	push	{r7}
 80082fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008300:	4b0b      	ldr	r3, [pc, #44]	@ (8008330 <vPortSetupTimerInterrupt+0x34>)
 8008302:	2200      	movs	r2, #0
 8008304:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008306:	4b0b      	ldr	r3, [pc, #44]	@ (8008334 <vPortSetupTimerInterrupt+0x38>)
 8008308:	2200      	movs	r2, #0
 800830a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800830c:	4b0a      	ldr	r3, [pc, #40]	@ (8008338 <vPortSetupTimerInterrupt+0x3c>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a0a      	ldr	r2, [pc, #40]	@ (800833c <vPortSetupTimerInterrupt+0x40>)
 8008312:	fba2 2303 	umull	r2, r3, r2, r3
 8008316:	099b      	lsrs	r3, r3, #6
 8008318:	4a09      	ldr	r2, [pc, #36]	@ (8008340 <vPortSetupTimerInterrupt+0x44>)
 800831a:	3b01      	subs	r3, #1
 800831c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800831e:	4b04      	ldr	r3, [pc, #16]	@ (8008330 <vPortSetupTimerInterrupt+0x34>)
 8008320:	2207      	movs	r2, #7
 8008322:	601a      	str	r2, [r3, #0]
}
 8008324:	bf00      	nop
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	e000e010 	.word	0xe000e010
 8008334:	e000e018 	.word	0xe000e018
 8008338:	2000000c 	.word	0x2000000c
 800833c:	10624dd3 	.word	0x10624dd3
 8008340:	e000e014 	.word	0xe000e014

08008344 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008344:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008354 <vPortEnableVFP+0x10>
 8008348:	6801      	ldr	r1, [r0, #0]
 800834a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800834e:	6001      	str	r1, [r0, #0]
 8008350:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008352:	bf00      	nop
 8008354:	e000ed88 	.word	0xe000ed88

08008358 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008358:	b480      	push	{r7}
 800835a:	b085      	sub	sp, #20
 800835c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800835e:	f3ef 8305 	mrs	r3, IPSR
 8008362:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2b0f      	cmp	r3, #15
 8008368:	d915      	bls.n	8008396 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800836a:	4a18      	ldr	r2, [pc, #96]	@ (80083cc <vPortValidateInterruptPriority+0x74>)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	4413      	add	r3, r2
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008374:	4b16      	ldr	r3, [pc, #88]	@ (80083d0 <vPortValidateInterruptPriority+0x78>)
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	7afa      	ldrb	r2, [r7, #11]
 800837a:	429a      	cmp	r2, r3
 800837c:	d20b      	bcs.n	8008396 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800837e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008382:	f383 8811 	msr	BASEPRI, r3
 8008386:	f3bf 8f6f 	isb	sy
 800838a:	f3bf 8f4f 	dsb	sy
 800838e:	607b      	str	r3, [r7, #4]
}
 8008390:	bf00      	nop
 8008392:	bf00      	nop
 8008394:	e7fd      	b.n	8008392 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008396:	4b0f      	ldr	r3, [pc, #60]	@ (80083d4 <vPortValidateInterruptPriority+0x7c>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800839e:	4b0e      	ldr	r3, [pc, #56]	@ (80083d8 <vPortValidateInterruptPriority+0x80>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d90b      	bls.n	80083be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80083a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083aa:	f383 8811 	msr	BASEPRI, r3
 80083ae:	f3bf 8f6f 	isb	sy
 80083b2:	f3bf 8f4f 	dsb	sy
 80083b6:	603b      	str	r3, [r7, #0]
}
 80083b8:	bf00      	nop
 80083ba:	bf00      	nop
 80083bc:	e7fd      	b.n	80083ba <vPortValidateInterruptPriority+0x62>
	}
 80083be:	bf00      	nop
 80083c0:	3714      	adds	r7, #20
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	e000e3f0 	.word	0xe000e3f0
 80083d0:	20001384 	.word	0x20001384
 80083d4:	e000ed0c 	.word	0xe000ed0c
 80083d8:	20001388 	.word	0x20001388

080083dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b08a      	sub	sp, #40	@ 0x28
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80083e4:	2300      	movs	r3, #0
 80083e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80083e8:	f7fe fb96 	bl	8006b18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80083ec:	4b5c      	ldr	r3, [pc, #368]	@ (8008560 <pvPortMalloc+0x184>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d101      	bne.n	80083f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80083f4:	f000 f924 	bl	8008640 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80083f8:	4b5a      	ldr	r3, [pc, #360]	@ (8008564 <pvPortMalloc+0x188>)
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4013      	ands	r3, r2
 8008400:	2b00      	cmp	r3, #0
 8008402:	f040 8095 	bne.w	8008530 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d01e      	beq.n	800844a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800840c:	2208      	movs	r2, #8
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4413      	add	r3, r2
 8008412:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f003 0307 	and.w	r3, r3, #7
 800841a:	2b00      	cmp	r3, #0
 800841c:	d015      	beq.n	800844a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f023 0307 	bic.w	r3, r3, #7
 8008424:	3308      	adds	r3, #8
 8008426:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f003 0307 	and.w	r3, r3, #7
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00b      	beq.n	800844a <pvPortMalloc+0x6e>
	__asm volatile
 8008432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008436:	f383 8811 	msr	BASEPRI, r3
 800843a:	f3bf 8f6f 	isb	sy
 800843e:	f3bf 8f4f 	dsb	sy
 8008442:	617b      	str	r3, [r7, #20]
}
 8008444:	bf00      	nop
 8008446:	bf00      	nop
 8008448:	e7fd      	b.n	8008446 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d06f      	beq.n	8008530 <pvPortMalloc+0x154>
 8008450:	4b45      	ldr	r3, [pc, #276]	@ (8008568 <pvPortMalloc+0x18c>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	429a      	cmp	r2, r3
 8008458:	d86a      	bhi.n	8008530 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800845a:	4b44      	ldr	r3, [pc, #272]	@ (800856c <pvPortMalloc+0x190>)
 800845c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800845e:	4b43      	ldr	r3, [pc, #268]	@ (800856c <pvPortMalloc+0x190>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008464:	e004      	b.n	8008470 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008468:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800846a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	429a      	cmp	r2, r3
 8008478:	d903      	bls.n	8008482 <pvPortMalloc+0xa6>
 800847a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d1f1      	bne.n	8008466 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008482:	4b37      	ldr	r3, [pc, #220]	@ (8008560 <pvPortMalloc+0x184>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008488:	429a      	cmp	r2, r3
 800848a:	d051      	beq.n	8008530 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800848c:	6a3b      	ldr	r3, [r7, #32]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2208      	movs	r2, #8
 8008492:	4413      	add	r3, r2
 8008494:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	6a3b      	ldr	r3, [r7, #32]
 800849c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800849e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a0:	685a      	ldr	r2, [r3, #4]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	1ad2      	subs	r2, r2, r3
 80084a6:	2308      	movs	r3, #8
 80084a8:	005b      	lsls	r3, r3, #1
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d920      	bls.n	80084f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80084ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4413      	add	r3, r2
 80084b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	f003 0307 	and.w	r3, r3, #7
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d00b      	beq.n	80084d8 <pvPortMalloc+0xfc>
	__asm volatile
 80084c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084c4:	f383 8811 	msr	BASEPRI, r3
 80084c8:	f3bf 8f6f 	isb	sy
 80084cc:	f3bf 8f4f 	dsb	sy
 80084d0:	613b      	str	r3, [r7, #16]
}
 80084d2:	bf00      	nop
 80084d4:	bf00      	nop
 80084d6:	e7fd      	b.n	80084d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80084d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084da:	685a      	ldr	r2, [r3, #4]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	1ad2      	subs	r2, r2, r3
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80084e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80084ea:	69b8      	ldr	r0, [r7, #24]
 80084ec:	f000 f90a 	bl	8008704 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80084f0:	4b1d      	ldr	r3, [pc, #116]	@ (8008568 <pvPortMalloc+0x18c>)
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	4a1b      	ldr	r2, [pc, #108]	@ (8008568 <pvPortMalloc+0x18c>)
 80084fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80084fe:	4b1a      	ldr	r3, [pc, #104]	@ (8008568 <pvPortMalloc+0x18c>)
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	4b1b      	ldr	r3, [pc, #108]	@ (8008570 <pvPortMalloc+0x194>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	429a      	cmp	r2, r3
 8008508:	d203      	bcs.n	8008512 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800850a:	4b17      	ldr	r3, [pc, #92]	@ (8008568 <pvPortMalloc+0x18c>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a18      	ldr	r2, [pc, #96]	@ (8008570 <pvPortMalloc+0x194>)
 8008510:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008514:	685a      	ldr	r2, [r3, #4]
 8008516:	4b13      	ldr	r3, [pc, #76]	@ (8008564 <pvPortMalloc+0x188>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	431a      	orrs	r2, r3
 800851c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800851e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008522:	2200      	movs	r2, #0
 8008524:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008526:	4b13      	ldr	r3, [pc, #76]	@ (8008574 <pvPortMalloc+0x198>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	3301      	adds	r3, #1
 800852c:	4a11      	ldr	r2, [pc, #68]	@ (8008574 <pvPortMalloc+0x198>)
 800852e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008530:	f7fe fb00 	bl	8006b34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	f003 0307 	and.w	r3, r3, #7
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00b      	beq.n	8008556 <pvPortMalloc+0x17a>
	__asm volatile
 800853e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008542:	f383 8811 	msr	BASEPRI, r3
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	60fb      	str	r3, [r7, #12]
}
 8008550:	bf00      	nop
 8008552:	bf00      	nop
 8008554:	e7fd      	b.n	8008552 <pvPortMalloc+0x176>
	return pvReturn;
 8008556:	69fb      	ldr	r3, [r7, #28]
}
 8008558:	4618      	mov	r0, r3
 800855a:	3728      	adds	r7, #40	@ 0x28
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}
 8008560:	20004f94 	.word	0x20004f94
 8008564:	20004fa8 	.word	0x20004fa8
 8008568:	20004f98 	.word	0x20004f98
 800856c:	20004f8c 	.word	0x20004f8c
 8008570:	20004f9c 	.word	0x20004f9c
 8008574:	20004fa0 	.word	0x20004fa0

08008578 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b086      	sub	sp, #24
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d04f      	beq.n	800862a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800858a:	2308      	movs	r3, #8
 800858c:	425b      	negs	r3, r3
 800858e:	697a      	ldr	r2, [r7, #20]
 8008590:	4413      	add	r3, r2
 8008592:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	685a      	ldr	r2, [r3, #4]
 800859c:	4b25      	ldr	r3, [pc, #148]	@ (8008634 <vPortFree+0xbc>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4013      	ands	r3, r2
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d10b      	bne.n	80085be <vPortFree+0x46>
	__asm volatile
 80085a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085aa:	f383 8811 	msr	BASEPRI, r3
 80085ae:	f3bf 8f6f 	isb	sy
 80085b2:	f3bf 8f4f 	dsb	sy
 80085b6:	60fb      	str	r3, [r7, #12]
}
 80085b8:	bf00      	nop
 80085ba:	bf00      	nop
 80085bc:	e7fd      	b.n	80085ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00b      	beq.n	80085de <vPortFree+0x66>
	__asm volatile
 80085c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ca:	f383 8811 	msr	BASEPRI, r3
 80085ce:	f3bf 8f6f 	isb	sy
 80085d2:	f3bf 8f4f 	dsb	sy
 80085d6:	60bb      	str	r3, [r7, #8]
}
 80085d8:	bf00      	nop
 80085da:	bf00      	nop
 80085dc:	e7fd      	b.n	80085da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	685a      	ldr	r2, [r3, #4]
 80085e2:	4b14      	ldr	r3, [pc, #80]	@ (8008634 <vPortFree+0xbc>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4013      	ands	r3, r2
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d01e      	beq.n	800862a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d11a      	bne.n	800862a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	685a      	ldr	r2, [r3, #4]
 80085f8:	4b0e      	ldr	r3, [pc, #56]	@ (8008634 <vPortFree+0xbc>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	43db      	mvns	r3, r3
 80085fe:	401a      	ands	r2, r3
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008604:	f7fe fa88 	bl	8006b18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	685a      	ldr	r2, [r3, #4]
 800860c:	4b0a      	ldr	r3, [pc, #40]	@ (8008638 <vPortFree+0xc0>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4413      	add	r3, r2
 8008612:	4a09      	ldr	r2, [pc, #36]	@ (8008638 <vPortFree+0xc0>)
 8008614:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008616:	6938      	ldr	r0, [r7, #16]
 8008618:	f000 f874 	bl	8008704 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800861c:	4b07      	ldr	r3, [pc, #28]	@ (800863c <vPortFree+0xc4>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	3301      	adds	r3, #1
 8008622:	4a06      	ldr	r2, [pc, #24]	@ (800863c <vPortFree+0xc4>)
 8008624:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008626:	f7fe fa85 	bl	8006b34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800862a:	bf00      	nop
 800862c:	3718      	adds	r7, #24
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	20004fa8 	.word	0x20004fa8
 8008638:	20004f98 	.word	0x20004f98
 800863c:	20004fa4 	.word	0x20004fa4

08008640 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008640:	b480      	push	{r7}
 8008642:	b085      	sub	sp, #20
 8008644:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008646:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800864a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800864c:	4b27      	ldr	r3, [pc, #156]	@ (80086ec <prvHeapInit+0xac>)
 800864e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f003 0307 	and.w	r3, r3, #7
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00c      	beq.n	8008674 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	3307      	adds	r3, #7
 800865e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f023 0307 	bic.w	r3, r3, #7
 8008666:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008668:	68ba      	ldr	r2, [r7, #8]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	1ad3      	subs	r3, r2, r3
 800866e:	4a1f      	ldr	r2, [pc, #124]	@ (80086ec <prvHeapInit+0xac>)
 8008670:	4413      	add	r3, r2
 8008672:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008678:	4a1d      	ldr	r2, [pc, #116]	@ (80086f0 <prvHeapInit+0xb0>)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800867e:	4b1c      	ldr	r3, [pc, #112]	@ (80086f0 <prvHeapInit+0xb0>)
 8008680:	2200      	movs	r2, #0
 8008682:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	68ba      	ldr	r2, [r7, #8]
 8008688:	4413      	add	r3, r2
 800868a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800868c:	2208      	movs	r2, #8
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	1a9b      	subs	r3, r3, r2
 8008692:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f023 0307 	bic.w	r3, r3, #7
 800869a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	4a15      	ldr	r2, [pc, #84]	@ (80086f4 <prvHeapInit+0xb4>)
 80086a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80086a2:	4b14      	ldr	r3, [pc, #80]	@ (80086f4 <prvHeapInit+0xb4>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2200      	movs	r2, #0
 80086a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80086aa:	4b12      	ldr	r3, [pc, #72]	@ (80086f4 <prvHeapInit+0xb4>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2200      	movs	r2, #0
 80086b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	1ad2      	subs	r2, r2, r3
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80086c0:	4b0c      	ldr	r3, [pc, #48]	@ (80086f4 <prvHeapInit+0xb4>)
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	4a0a      	ldr	r2, [pc, #40]	@ (80086f8 <prvHeapInit+0xb8>)
 80086ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	4a09      	ldr	r2, [pc, #36]	@ (80086fc <prvHeapInit+0xbc>)
 80086d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80086d8:	4b09      	ldr	r3, [pc, #36]	@ (8008700 <prvHeapInit+0xc0>)
 80086da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80086de:	601a      	str	r2, [r3, #0]
}
 80086e0:	bf00      	nop
 80086e2:	3714      	adds	r7, #20
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr
 80086ec:	2000138c 	.word	0x2000138c
 80086f0:	20004f8c 	.word	0x20004f8c
 80086f4:	20004f94 	.word	0x20004f94
 80086f8:	20004f9c 	.word	0x20004f9c
 80086fc:	20004f98 	.word	0x20004f98
 8008700:	20004fa8 	.word	0x20004fa8

08008704 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008704:	b480      	push	{r7}
 8008706:	b085      	sub	sp, #20
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800870c:	4b28      	ldr	r3, [pc, #160]	@ (80087b0 <prvInsertBlockIntoFreeList+0xac>)
 800870e:	60fb      	str	r3, [r7, #12]
 8008710:	e002      	b.n	8008718 <prvInsertBlockIntoFreeList+0x14>
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	60fb      	str	r3, [r7, #12]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	429a      	cmp	r2, r3
 8008720:	d8f7      	bhi.n	8008712 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	68ba      	ldr	r2, [r7, #8]
 800872c:	4413      	add	r3, r2
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	429a      	cmp	r2, r3
 8008732:	d108      	bne.n	8008746 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	685a      	ldr	r2, [r3, #4]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	441a      	add	r2, r3
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	68ba      	ldr	r2, [r7, #8]
 8008750:	441a      	add	r2, r3
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	429a      	cmp	r2, r3
 8008758:	d118      	bne.n	800878c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	4b15      	ldr	r3, [pc, #84]	@ (80087b4 <prvInsertBlockIntoFreeList+0xb0>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	429a      	cmp	r2, r3
 8008764:	d00d      	beq.n	8008782 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	685a      	ldr	r2, [r3, #4]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	441a      	add	r2, r3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	601a      	str	r2, [r3, #0]
 8008780:	e008      	b.n	8008794 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008782:	4b0c      	ldr	r3, [pc, #48]	@ (80087b4 <prvInsertBlockIntoFreeList+0xb0>)
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	601a      	str	r2, [r3, #0]
 800878a:	e003      	b.n	8008794 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	429a      	cmp	r2, r3
 800879a:	d002      	beq.n	80087a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087a2:	bf00      	nop
 80087a4:	3714      	adds	r7, #20
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop
 80087b0:	20004f8c 	.word	0x20004f8c
 80087b4:	20004f94 	.word	0x20004f94

080087b8 <sniprintf>:
 80087b8:	b40c      	push	{r2, r3}
 80087ba:	b530      	push	{r4, r5, lr}
 80087bc:	4b18      	ldr	r3, [pc, #96]	@ (8008820 <sniprintf+0x68>)
 80087be:	1e0c      	subs	r4, r1, #0
 80087c0:	681d      	ldr	r5, [r3, #0]
 80087c2:	b09d      	sub	sp, #116	@ 0x74
 80087c4:	da08      	bge.n	80087d8 <sniprintf+0x20>
 80087c6:	238b      	movs	r3, #139	@ 0x8b
 80087c8:	602b      	str	r3, [r5, #0]
 80087ca:	f04f 30ff 	mov.w	r0, #4294967295
 80087ce:	b01d      	add	sp, #116	@ 0x74
 80087d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087d4:	b002      	add	sp, #8
 80087d6:	4770      	bx	lr
 80087d8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80087dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80087e0:	f04f 0300 	mov.w	r3, #0
 80087e4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80087e6:	bf14      	ite	ne
 80087e8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80087ec:	4623      	moveq	r3, r4
 80087ee:	9304      	str	r3, [sp, #16]
 80087f0:	9307      	str	r3, [sp, #28]
 80087f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80087f6:	9002      	str	r0, [sp, #8]
 80087f8:	9006      	str	r0, [sp, #24]
 80087fa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80087fe:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008800:	ab21      	add	r3, sp, #132	@ 0x84
 8008802:	a902      	add	r1, sp, #8
 8008804:	4628      	mov	r0, r5
 8008806:	9301      	str	r3, [sp, #4]
 8008808:	f000 f9a2 	bl	8008b50 <_svfiprintf_r>
 800880c:	1c43      	adds	r3, r0, #1
 800880e:	bfbc      	itt	lt
 8008810:	238b      	movlt	r3, #139	@ 0x8b
 8008812:	602b      	strlt	r3, [r5, #0]
 8008814:	2c00      	cmp	r4, #0
 8008816:	d0da      	beq.n	80087ce <sniprintf+0x16>
 8008818:	9b02      	ldr	r3, [sp, #8]
 800881a:	2200      	movs	r2, #0
 800881c:	701a      	strb	r2, [r3, #0]
 800881e:	e7d6      	b.n	80087ce <sniprintf+0x16>
 8008820:	2000001c 	.word	0x2000001c

08008824 <memset>:
 8008824:	4402      	add	r2, r0
 8008826:	4603      	mov	r3, r0
 8008828:	4293      	cmp	r3, r2
 800882a:	d100      	bne.n	800882e <memset+0xa>
 800882c:	4770      	bx	lr
 800882e:	f803 1b01 	strb.w	r1, [r3], #1
 8008832:	e7f9      	b.n	8008828 <memset+0x4>

08008834 <__errno>:
 8008834:	4b01      	ldr	r3, [pc, #4]	@ (800883c <__errno+0x8>)
 8008836:	6818      	ldr	r0, [r3, #0]
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	2000001c 	.word	0x2000001c

08008840 <__libc_init_array>:
 8008840:	b570      	push	{r4, r5, r6, lr}
 8008842:	4d0d      	ldr	r5, [pc, #52]	@ (8008878 <__libc_init_array+0x38>)
 8008844:	4c0d      	ldr	r4, [pc, #52]	@ (800887c <__libc_init_array+0x3c>)
 8008846:	1b64      	subs	r4, r4, r5
 8008848:	10a4      	asrs	r4, r4, #2
 800884a:	2600      	movs	r6, #0
 800884c:	42a6      	cmp	r6, r4
 800884e:	d109      	bne.n	8008864 <__libc_init_array+0x24>
 8008850:	4d0b      	ldr	r5, [pc, #44]	@ (8008880 <__libc_init_array+0x40>)
 8008852:	4c0c      	ldr	r4, [pc, #48]	@ (8008884 <__libc_init_array+0x44>)
 8008854:	f000 fc64 	bl	8009120 <_init>
 8008858:	1b64      	subs	r4, r4, r5
 800885a:	10a4      	asrs	r4, r4, #2
 800885c:	2600      	movs	r6, #0
 800885e:	42a6      	cmp	r6, r4
 8008860:	d105      	bne.n	800886e <__libc_init_array+0x2e>
 8008862:	bd70      	pop	{r4, r5, r6, pc}
 8008864:	f855 3b04 	ldr.w	r3, [r5], #4
 8008868:	4798      	blx	r3
 800886a:	3601      	adds	r6, #1
 800886c:	e7ee      	b.n	800884c <__libc_init_array+0xc>
 800886e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008872:	4798      	blx	r3
 8008874:	3601      	adds	r6, #1
 8008876:	e7f2      	b.n	800885e <__libc_init_array+0x1e>
 8008878:	08009564 	.word	0x08009564
 800887c:	08009564 	.word	0x08009564
 8008880:	08009564 	.word	0x08009564
 8008884:	08009568 	.word	0x08009568

08008888 <__retarget_lock_acquire_recursive>:
 8008888:	4770      	bx	lr

0800888a <__retarget_lock_release_recursive>:
 800888a:	4770      	bx	lr

0800888c <memcpy>:
 800888c:	440a      	add	r2, r1
 800888e:	4291      	cmp	r1, r2
 8008890:	f100 33ff 	add.w	r3, r0, #4294967295
 8008894:	d100      	bne.n	8008898 <memcpy+0xc>
 8008896:	4770      	bx	lr
 8008898:	b510      	push	{r4, lr}
 800889a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800889e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088a2:	4291      	cmp	r1, r2
 80088a4:	d1f9      	bne.n	800889a <memcpy+0xe>
 80088a6:	bd10      	pop	{r4, pc}

080088a8 <_free_r>:
 80088a8:	b538      	push	{r3, r4, r5, lr}
 80088aa:	4605      	mov	r5, r0
 80088ac:	2900      	cmp	r1, #0
 80088ae:	d041      	beq.n	8008934 <_free_r+0x8c>
 80088b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088b4:	1f0c      	subs	r4, r1, #4
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	bfb8      	it	lt
 80088ba:	18e4      	addlt	r4, r4, r3
 80088bc:	f000 f8e0 	bl	8008a80 <__malloc_lock>
 80088c0:	4a1d      	ldr	r2, [pc, #116]	@ (8008938 <_free_r+0x90>)
 80088c2:	6813      	ldr	r3, [r2, #0]
 80088c4:	b933      	cbnz	r3, 80088d4 <_free_r+0x2c>
 80088c6:	6063      	str	r3, [r4, #4]
 80088c8:	6014      	str	r4, [r2, #0]
 80088ca:	4628      	mov	r0, r5
 80088cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088d0:	f000 b8dc 	b.w	8008a8c <__malloc_unlock>
 80088d4:	42a3      	cmp	r3, r4
 80088d6:	d908      	bls.n	80088ea <_free_r+0x42>
 80088d8:	6820      	ldr	r0, [r4, #0]
 80088da:	1821      	adds	r1, r4, r0
 80088dc:	428b      	cmp	r3, r1
 80088de:	bf01      	itttt	eq
 80088e0:	6819      	ldreq	r1, [r3, #0]
 80088e2:	685b      	ldreq	r3, [r3, #4]
 80088e4:	1809      	addeq	r1, r1, r0
 80088e6:	6021      	streq	r1, [r4, #0]
 80088e8:	e7ed      	b.n	80088c6 <_free_r+0x1e>
 80088ea:	461a      	mov	r2, r3
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	b10b      	cbz	r3, 80088f4 <_free_r+0x4c>
 80088f0:	42a3      	cmp	r3, r4
 80088f2:	d9fa      	bls.n	80088ea <_free_r+0x42>
 80088f4:	6811      	ldr	r1, [r2, #0]
 80088f6:	1850      	adds	r0, r2, r1
 80088f8:	42a0      	cmp	r0, r4
 80088fa:	d10b      	bne.n	8008914 <_free_r+0x6c>
 80088fc:	6820      	ldr	r0, [r4, #0]
 80088fe:	4401      	add	r1, r0
 8008900:	1850      	adds	r0, r2, r1
 8008902:	4283      	cmp	r3, r0
 8008904:	6011      	str	r1, [r2, #0]
 8008906:	d1e0      	bne.n	80088ca <_free_r+0x22>
 8008908:	6818      	ldr	r0, [r3, #0]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	6053      	str	r3, [r2, #4]
 800890e:	4408      	add	r0, r1
 8008910:	6010      	str	r0, [r2, #0]
 8008912:	e7da      	b.n	80088ca <_free_r+0x22>
 8008914:	d902      	bls.n	800891c <_free_r+0x74>
 8008916:	230c      	movs	r3, #12
 8008918:	602b      	str	r3, [r5, #0]
 800891a:	e7d6      	b.n	80088ca <_free_r+0x22>
 800891c:	6820      	ldr	r0, [r4, #0]
 800891e:	1821      	adds	r1, r4, r0
 8008920:	428b      	cmp	r3, r1
 8008922:	bf04      	itt	eq
 8008924:	6819      	ldreq	r1, [r3, #0]
 8008926:	685b      	ldreq	r3, [r3, #4]
 8008928:	6063      	str	r3, [r4, #4]
 800892a:	bf04      	itt	eq
 800892c:	1809      	addeq	r1, r1, r0
 800892e:	6021      	streq	r1, [r4, #0]
 8008930:	6054      	str	r4, [r2, #4]
 8008932:	e7ca      	b.n	80088ca <_free_r+0x22>
 8008934:	bd38      	pop	{r3, r4, r5, pc}
 8008936:	bf00      	nop
 8008938:	200050f0 	.word	0x200050f0

0800893c <sbrk_aligned>:
 800893c:	b570      	push	{r4, r5, r6, lr}
 800893e:	4e0f      	ldr	r6, [pc, #60]	@ (800897c <sbrk_aligned+0x40>)
 8008940:	460c      	mov	r4, r1
 8008942:	6831      	ldr	r1, [r6, #0]
 8008944:	4605      	mov	r5, r0
 8008946:	b911      	cbnz	r1, 800894e <sbrk_aligned+0x12>
 8008948:	f000 fba4 	bl	8009094 <_sbrk_r>
 800894c:	6030      	str	r0, [r6, #0]
 800894e:	4621      	mov	r1, r4
 8008950:	4628      	mov	r0, r5
 8008952:	f000 fb9f 	bl	8009094 <_sbrk_r>
 8008956:	1c43      	adds	r3, r0, #1
 8008958:	d103      	bne.n	8008962 <sbrk_aligned+0x26>
 800895a:	f04f 34ff 	mov.w	r4, #4294967295
 800895e:	4620      	mov	r0, r4
 8008960:	bd70      	pop	{r4, r5, r6, pc}
 8008962:	1cc4      	adds	r4, r0, #3
 8008964:	f024 0403 	bic.w	r4, r4, #3
 8008968:	42a0      	cmp	r0, r4
 800896a:	d0f8      	beq.n	800895e <sbrk_aligned+0x22>
 800896c:	1a21      	subs	r1, r4, r0
 800896e:	4628      	mov	r0, r5
 8008970:	f000 fb90 	bl	8009094 <_sbrk_r>
 8008974:	3001      	adds	r0, #1
 8008976:	d1f2      	bne.n	800895e <sbrk_aligned+0x22>
 8008978:	e7ef      	b.n	800895a <sbrk_aligned+0x1e>
 800897a:	bf00      	nop
 800897c:	200050ec 	.word	0x200050ec

08008980 <_malloc_r>:
 8008980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008984:	1ccd      	adds	r5, r1, #3
 8008986:	f025 0503 	bic.w	r5, r5, #3
 800898a:	3508      	adds	r5, #8
 800898c:	2d0c      	cmp	r5, #12
 800898e:	bf38      	it	cc
 8008990:	250c      	movcc	r5, #12
 8008992:	2d00      	cmp	r5, #0
 8008994:	4606      	mov	r6, r0
 8008996:	db01      	blt.n	800899c <_malloc_r+0x1c>
 8008998:	42a9      	cmp	r1, r5
 800899a:	d904      	bls.n	80089a6 <_malloc_r+0x26>
 800899c:	230c      	movs	r3, #12
 800899e:	6033      	str	r3, [r6, #0]
 80089a0:	2000      	movs	r0, #0
 80089a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a7c <_malloc_r+0xfc>
 80089aa:	f000 f869 	bl	8008a80 <__malloc_lock>
 80089ae:	f8d8 3000 	ldr.w	r3, [r8]
 80089b2:	461c      	mov	r4, r3
 80089b4:	bb44      	cbnz	r4, 8008a08 <_malloc_r+0x88>
 80089b6:	4629      	mov	r1, r5
 80089b8:	4630      	mov	r0, r6
 80089ba:	f7ff ffbf 	bl	800893c <sbrk_aligned>
 80089be:	1c43      	adds	r3, r0, #1
 80089c0:	4604      	mov	r4, r0
 80089c2:	d158      	bne.n	8008a76 <_malloc_r+0xf6>
 80089c4:	f8d8 4000 	ldr.w	r4, [r8]
 80089c8:	4627      	mov	r7, r4
 80089ca:	2f00      	cmp	r7, #0
 80089cc:	d143      	bne.n	8008a56 <_malloc_r+0xd6>
 80089ce:	2c00      	cmp	r4, #0
 80089d0:	d04b      	beq.n	8008a6a <_malloc_r+0xea>
 80089d2:	6823      	ldr	r3, [r4, #0]
 80089d4:	4639      	mov	r1, r7
 80089d6:	4630      	mov	r0, r6
 80089d8:	eb04 0903 	add.w	r9, r4, r3
 80089dc:	f000 fb5a 	bl	8009094 <_sbrk_r>
 80089e0:	4581      	cmp	r9, r0
 80089e2:	d142      	bne.n	8008a6a <_malloc_r+0xea>
 80089e4:	6821      	ldr	r1, [r4, #0]
 80089e6:	1a6d      	subs	r5, r5, r1
 80089e8:	4629      	mov	r1, r5
 80089ea:	4630      	mov	r0, r6
 80089ec:	f7ff ffa6 	bl	800893c <sbrk_aligned>
 80089f0:	3001      	adds	r0, #1
 80089f2:	d03a      	beq.n	8008a6a <_malloc_r+0xea>
 80089f4:	6823      	ldr	r3, [r4, #0]
 80089f6:	442b      	add	r3, r5
 80089f8:	6023      	str	r3, [r4, #0]
 80089fa:	f8d8 3000 	ldr.w	r3, [r8]
 80089fe:	685a      	ldr	r2, [r3, #4]
 8008a00:	bb62      	cbnz	r2, 8008a5c <_malloc_r+0xdc>
 8008a02:	f8c8 7000 	str.w	r7, [r8]
 8008a06:	e00f      	b.n	8008a28 <_malloc_r+0xa8>
 8008a08:	6822      	ldr	r2, [r4, #0]
 8008a0a:	1b52      	subs	r2, r2, r5
 8008a0c:	d420      	bmi.n	8008a50 <_malloc_r+0xd0>
 8008a0e:	2a0b      	cmp	r2, #11
 8008a10:	d917      	bls.n	8008a42 <_malloc_r+0xc2>
 8008a12:	1961      	adds	r1, r4, r5
 8008a14:	42a3      	cmp	r3, r4
 8008a16:	6025      	str	r5, [r4, #0]
 8008a18:	bf18      	it	ne
 8008a1a:	6059      	strne	r1, [r3, #4]
 8008a1c:	6863      	ldr	r3, [r4, #4]
 8008a1e:	bf08      	it	eq
 8008a20:	f8c8 1000 	streq.w	r1, [r8]
 8008a24:	5162      	str	r2, [r4, r5]
 8008a26:	604b      	str	r3, [r1, #4]
 8008a28:	4630      	mov	r0, r6
 8008a2a:	f000 f82f 	bl	8008a8c <__malloc_unlock>
 8008a2e:	f104 000b 	add.w	r0, r4, #11
 8008a32:	1d23      	adds	r3, r4, #4
 8008a34:	f020 0007 	bic.w	r0, r0, #7
 8008a38:	1ac2      	subs	r2, r0, r3
 8008a3a:	bf1c      	itt	ne
 8008a3c:	1a1b      	subne	r3, r3, r0
 8008a3e:	50a3      	strne	r3, [r4, r2]
 8008a40:	e7af      	b.n	80089a2 <_malloc_r+0x22>
 8008a42:	6862      	ldr	r2, [r4, #4]
 8008a44:	42a3      	cmp	r3, r4
 8008a46:	bf0c      	ite	eq
 8008a48:	f8c8 2000 	streq.w	r2, [r8]
 8008a4c:	605a      	strne	r2, [r3, #4]
 8008a4e:	e7eb      	b.n	8008a28 <_malloc_r+0xa8>
 8008a50:	4623      	mov	r3, r4
 8008a52:	6864      	ldr	r4, [r4, #4]
 8008a54:	e7ae      	b.n	80089b4 <_malloc_r+0x34>
 8008a56:	463c      	mov	r4, r7
 8008a58:	687f      	ldr	r7, [r7, #4]
 8008a5a:	e7b6      	b.n	80089ca <_malloc_r+0x4a>
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	42a3      	cmp	r3, r4
 8008a62:	d1fb      	bne.n	8008a5c <_malloc_r+0xdc>
 8008a64:	2300      	movs	r3, #0
 8008a66:	6053      	str	r3, [r2, #4]
 8008a68:	e7de      	b.n	8008a28 <_malloc_r+0xa8>
 8008a6a:	230c      	movs	r3, #12
 8008a6c:	6033      	str	r3, [r6, #0]
 8008a6e:	4630      	mov	r0, r6
 8008a70:	f000 f80c 	bl	8008a8c <__malloc_unlock>
 8008a74:	e794      	b.n	80089a0 <_malloc_r+0x20>
 8008a76:	6005      	str	r5, [r0, #0]
 8008a78:	e7d6      	b.n	8008a28 <_malloc_r+0xa8>
 8008a7a:	bf00      	nop
 8008a7c:	200050f0 	.word	0x200050f0

08008a80 <__malloc_lock>:
 8008a80:	4801      	ldr	r0, [pc, #4]	@ (8008a88 <__malloc_lock+0x8>)
 8008a82:	f7ff bf01 	b.w	8008888 <__retarget_lock_acquire_recursive>
 8008a86:	bf00      	nop
 8008a88:	200050e8 	.word	0x200050e8

08008a8c <__malloc_unlock>:
 8008a8c:	4801      	ldr	r0, [pc, #4]	@ (8008a94 <__malloc_unlock+0x8>)
 8008a8e:	f7ff befc 	b.w	800888a <__retarget_lock_release_recursive>
 8008a92:	bf00      	nop
 8008a94:	200050e8 	.word	0x200050e8

08008a98 <__ssputs_r>:
 8008a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a9c:	688e      	ldr	r6, [r1, #8]
 8008a9e:	461f      	mov	r7, r3
 8008aa0:	42be      	cmp	r6, r7
 8008aa2:	680b      	ldr	r3, [r1, #0]
 8008aa4:	4682      	mov	sl, r0
 8008aa6:	460c      	mov	r4, r1
 8008aa8:	4690      	mov	r8, r2
 8008aaa:	d82d      	bhi.n	8008b08 <__ssputs_r+0x70>
 8008aac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ab0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008ab4:	d026      	beq.n	8008b04 <__ssputs_r+0x6c>
 8008ab6:	6965      	ldr	r5, [r4, #20]
 8008ab8:	6909      	ldr	r1, [r1, #16]
 8008aba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008abe:	eba3 0901 	sub.w	r9, r3, r1
 8008ac2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ac6:	1c7b      	adds	r3, r7, #1
 8008ac8:	444b      	add	r3, r9
 8008aca:	106d      	asrs	r5, r5, #1
 8008acc:	429d      	cmp	r5, r3
 8008ace:	bf38      	it	cc
 8008ad0:	461d      	movcc	r5, r3
 8008ad2:	0553      	lsls	r3, r2, #21
 8008ad4:	d527      	bpl.n	8008b26 <__ssputs_r+0x8e>
 8008ad6:	4629      	mov	r1, r5
 8008ad8:	f7ff ff52 	bl	8008980 <_malloc_r>
 8008adc:	4606      	mov	r6, r0
 8008ade:	b360      	cbz	r0, 8008b3a <__ssputs_r+0xa2>
 8008ae0:	6921      	ldr	r1, [r4, #16]
 8008ae2:	464a      	mov	r2, r9
 8008ae4:	f7ff fed2 	bl	800888c <memcpy>
 8008ae8:	89a3      	ldrh	r3, [r4, #12]
 8008aea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008aee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008af2:	81a3      	strh	r3, [r4, #12]
 8008af4:	6126      	str	r6, [r4, #16]
 8008af6:	6165      	str	r5, [r4, #20]
 8008af8:	444e      	add	r6, r9
 8008afa:	eba5 0509 	sub.w	r5, r5, r9
 8008afe:	6026      	str	r6, [r4, #0]
 8008b00:	60a5      	str	r5, [r4, #8]
 8008b02:	463e      	mov	r6, r7
 8008b04:	42be      	cmp	r6, r7
 8008b06:	d900      	bls.n	8008b0a <__ssputs_r+0x72>
 8008b08:	463e      	mov	r6, r7
 8008b0a:	6820      	ldr	r0, [r4, #0]
 8008b0c:	4632      	mov	r2, r6
 8008b0e:	4641      	mov	r1, r8
 8008b10:	f000 faa6 	bl	8009060 <memmove>
 8008b14:	68a3      	ldr	r3, [r4, #8]
 8008b16:	1b9b      	subs	r3, r3, r6
 8008b18:	60a3      	str	r3, [r4, #8]
 8008b1a:	6823      	ldr	r3, [r4, #0]
 8008b1c:	4433      	add	r3, r6
 8008b1e:	6023      	str	r3, [r4, #0]
 8008b20:	2000      	movs	r0, #0
 8008b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b26:	462a      	mov	r2, r5
 8008b28:	f000 fac4 	bl	80090b4 <_realloc_r>
 8008b2c:	4606      	mov	r6, r0
 8008b2e:	2800      	cmp	r0, #0
 8008b30:	d1e0      	bne.n	8008af4 <__ssputs_r+0x5c>
 8008b32:	6921      	ldr	r1, [r4, #16]
 8008b34:	4650      	mov	r0, sl
 8008b36:	f7ff feb7 	bl	80088a8 <_free_r>
 8008b3a:	230c      	movs	r3, #12
 8008b3c:	f8ca 3000 	str.w	r3, [sl]
 8008b40:	89a3      	ldrh	r3, [r4, #12]
 8008b42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b46:	81a3      	strh	r3, [r4, #12]
 8008b48:	f04f 30ff 	mov.w	r0, #4294967295
 8008b4c:	e7e9      	b.n	8008b22 <__ssputs_r+0x8a>
	...

08008b50 <_svfiprintf_r>:
 8008b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b54:	4698      	mov	r8, r3
 8008b56:	898b      	ldrh	r3, [r1, #12]
 8008b58:	061b      	lsls	r3, r3, #24
 8008b5a:	b09d      	sub	sp, #116	@ 0x74
 8008b5c:	4607      	mov	r7, r0
 8008b5e:	460d      	mov	r5, r1
 8008b60:	4614      	mov	r4, r2
 8008b62:	d510      	bpl.n	8008b86 <_svfiprintf_r+0x36>
 8008b64:	690b      	ldr	r3, [r1, #16]
 8008b66:	b973      	cbnz	r3, 8008b86 <_svfiprintf_r+0x36>
 8008b68:	2140      	movs	r1, #64	@ 0x40
 8008b6a:	f7ff ff09 	bl	8008980 <_malloc_r>
 8008b6e:	6028      	str	r0, [r5, #0]
 8008b70:	6128      	str	r0, [r5, #16]
 8008b72:	b930      	cbnz	r0, 8008b82 <_svfiprintf_r+0x32>
 8008b74:	230c      	movs	r3, #12
 8008b76:	603b      	str	r3, [r7, #0]
 8008b78:	f04f 30ff 	mov.w	r0, #4294967295
 8008b7c:	b01d      	add	sp, #116	@ 0x74
 8008b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b82:	2340      	movs	r3, #64	@ 0x40
 8008b84:	616b      	str	r3, [r5, #20]
 8008b86:	2300      	movs	r3, #0
 8008b88:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b8a:	2320      	movs	r3, #32
 8008b8c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008b90:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b94:	2330      	movs	r3, #48	@ 0x30
 8008b96:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008d34 <_svfiprintf_r+0x1e4>
 8008b9a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008b9e:	f04f 0901 	mov.w	r9, #1
 8008ba2:	4623      	mov	r3, r4
 8008ba4:	469a      	mov	sl, r3
 8008ba6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008baa:	b10a      	cbz	r2, 8008bb0 <_svfiprintf_r+0x60>
 8008bac:	2a25      	cmp	r2, #37	@ 0x25
 8008bae:	d1f9      	bne.n	8008ba4 <_svfiprintf_r+0x54>
 8008bb0:	ebba 0b04 	subs.w	fp, sl, r4
 8008bb4:	d00b      	beq.n	8008bce <_svfiprintf_r+0x7e>
 8008bb6:	465b      	mov	r3, fp
 8008bb8:	4622      	mov	r2, r4
 8008bba:	4629      	mov	r1, r5
 8008bbc:	4638      	mov	r0, r7
 8008bbe:	f7ff ff6b 	bl	8008a98 <__ssputs_r>
 8008bc2:	3001      	adds	r0, #1
 8008bc4:	f000 80a7 	beq.w	8008d16 <_svfiprintf_r+0x1c6>
 8008bc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008bca:	445a      	add	r2, fp
 8008bcc:	9209      	str	r2, [sp, #36]	@ 0x24
 8008bce:	f89a 3000 	ldrb.w	r3, [sl]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	f000 809f 	beq.w	8008d16 <_svfiprintf_r+0x1c6>
 8008bd8:	2300      	movs	r3, #0
 8008bda:	f04f 32ff 	mov.w	r2, #4294967295
 8008bde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008be2:	f10a 0a01 	add.w	sl, sl, #1
 8008be6:	9304      	str	r3, [sp, #16]
 8008be8:	9307      	str	r3, [sp, #28]
 8008bea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008bee:	931a      	str	r3, [sp, #104]	@ 0x68
 8008bf0:	4654      	mov	r4, sl
 8008bf2:	2205      	movs	r2, #5
 8008bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bf8:	484e      	ldr	r0, [pc, #312]	@ (8008d34 <_svfiprintf_r+0x1e4>)
 8008bfa:	f7f7 fb09 	bl	8000210 <memchr>
 8008bfe:	9a04      	ldr	r2, [sp, #16]
 8008c00:	b9d8      	cbnz	r0, 8008c3a <_svfiprintf_r+0xea>
 8008c02:	06d0      	lsls	r0, r2, #27
 8008c04:	bf44      	itt	mi
 8008c06:	2320      	movmi	r3, #32
 8008c08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c0c:	0711      	lsls	r1, r2, #28
 8008c0e:	bf44      	itt	mi
 8008c10:	232b      	movmi	r3, #43	@ 0x2b
 8008c12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c16:	f89a 3000 	ldrb.w	r3, [sl]
 8008c1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c1c:	d015      	beq.n	8008c4a <_svfiprintf_r+0xfa>
 8008c1e:	9a07      	ldr	r2, [sp, #28]
 8008c20:	4654      	mov	r4, sl
 8008c22:	2000      	movs	r0, #0
 8008c24:	f04f 0c0a 	mov.w	ip, #10
 8008c28:	4621      	mov	r1, r4
 8008c2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c2e:	3b30      	subs	r3, #48	@ 0x30
 8008c30:	2b09      	cmp	r3, #9
 8008c32:	d94b      	bls.n	8008ccc <_svfiprintf_r+0x17c>
 8008c34:	b1b0      	cbz	r0, 8008c64 <_svfiprintf_r+0x114>
 8008c36:	9207      	str	r2, [sp, #28]
 8008c38:	e014      	b.n	8008c64 <_svfiprintf_r+0x114>
 8008c3a:	eba0 0308 	sub.w	r3, r0, r8
 8008c3e:	fa09 f303 	lsl.w	r3, r9, r3
 8008c42:	4313      	orrs	r3, r2
 8008c44:	9304      	str	r3, [sp, #16]
 8008c46:	46a2      	mov	sl, r4
 8008c48:	e7d2      	b.n	8008bf0 <_svfiprintf_r+0xa0>
 8008c4a:	9b03      	ldr	r3, [sp, #12]
 8008c4c:	1d19      	adds	r1, r3, #4
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	9103      	str	r1, [sp, #12]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	bfbb      	ittet	lt
 8008c56:	425b      	neglt	r3, r3
 8008c58:	f042 0202 	orrlt.w	r2, r2, #2
 8008c5c:	9307      	strge	r3, [sp, #28]
 8008c5e:	9307      	strlt	r3, [sp, #28]
 8008c60:	bfb8      	it	lt
 8008c62:	9204      	strlt	r2, [sp, #16]
 8008c64:	7823      	ldrb	r3, [r4, #0]
 8008c66:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c68:	d10a      	bne.n	8008c80 <_svfiprintf_r+0x130>
 8008c6a:	7863      	ldrb	r3, [r4, #1]
 8008c6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c6e:	d132      	bne.n	8008cd6 <_svfiprintf_r+0x186>
 8008c70:	9b03      	ldr	r3, [sp, #12]
 8008c72:	1d1a      	adds	r2, r3, #4
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	9203      	str	r2, [sp, #12]
 8008c78:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008c7c:	3402      	adds	r4, #2
 8008c7e:	9305      	str	r3, [sp, #20]
 8008c80:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008d44 <_svfiprintf_r+0x1f4>
 8008c84:	7821      	ldrb	r1, [r4, #0]
 8008c86:	2203      	movs	r2, #3
 8008c88:	4650      	mov	r0, sl
 8008c8a:	f7f7 fac1 	bl	8000210 <memchr>
 8008c8e:	b138      	cbz	r0, 8008ca0 <_svfiprintf_r+0x150>
 8008c90:	9b04      	ldr	r3, [sp, #16]
 8008c92:	eba0 000a 	sub.w	r0, r0, sl
 8008c96:	2240      	movs	r2, #64	@ 0x40
 8008c98:	4082      	lsls	r2, r0
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	3401      	adds	r4, #1
 8008c9e:	9304      	str	r3, [sp, #16]
 8008ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ca4:	4824      	ldr	r0, [pc, #144]	@ (8008d38 <_svfiprintf_r+0x1e8>)
 8008ca6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008caa:	2206      	movs	r2, #6
 8008cac:	f7f7 fab0 	bl	8000210 <memchr>
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	d036      	beq.n	8008d22 <_svfiprintf_r+0x1d2>
 8008cb4:	4b21      	ldr	r3, [pc, #132]	@ (8008d3c <_svfiprintf_r+0x1ec>)
 8008cb6:	bb1b      	cbnz	r3, 8008d00 <_svfiprintf_r+0x1b0>
 8008cb8:	9b03      	ldr	r3, [sp, #12]
 8008cba:	3307      	adds	r3, #7
 8008cbc:	f023 0307 	bic.w	r3, r3, #7
 8008cc0:	3308      	adds	r3, #8
 8008cc2:	9303      	str	r3, [sp, #12]
 8008cc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cc6:	4433      	add	r3, r6
 8008cc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cca:	e76a      	b.n	8008ba2 <_svfiprintf_r+0x52>
 8008ccc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cd0:	460c      	mov	r4, r1
 8008cd2:	2001      	movs	r0, #1
 8008cd4:	e7a8      	b.n	8008c28 <_svfiprintf_r+0xd8>
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	3401      	adds	r4, #1
 8008cda:	9305      	str	r3, [sp, #20]
 8008cdc:	4619      	mov	r1, r3
 8008cde:	f04f 0c0a 	mov.w	ip, #10
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ce8:	3a30      	subs	r2, #48	@ 0x30
 8008cea:	2a09      	cmp	r2, #9
 8008cec:	d903      	bls.n	8008cf6 <_svfiprintf_r+0x1a6>
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d0c6      	beq.n	8008c80 <_svfiprintf_r+0x130>
 8008cf2:	9105      	str	r1, [sp, #20]
 8008cf4:	e7c4      	b.n	8008c80 <_svfiprintf_r+0x130>
 8008cf6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cfa:	4604      	mov	r4, r0
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e7f0      	b.n	8008ce2 <_svfiprintf_r+0x192>
 8008d00:	ab03      	add	r3, sp, #12
 8008d02:	9300      	str	r3, [sp, #0]
 8008d04:	462a      	mov	r2, r5
 8008d06:	4b0e      	ldr	r3, [pc, #56]	@ (8008d40 <_svfiprintf_r+0x1f0>)
 8008d08:	a904      	add	r1, sp, #16
 8008d0a:	4638      	mov	r0, r7
 8008d0c:	f3af 8000 	nop.w
 8008d10:	1c42      	adds	r2, r0, #1
 8008d12:	4606      	mov	r6, r0
 8008d14:	d1d6      	bne.n	8008cc4 <_svfiprintf_r+0x174>
 8008d16:	89ab      	ldrh	r3, [r5, #12]
 8008d18:	065b      	lsls	r3, r3, #25
 8008d1a:	f53f af2d 	bmi.w	8008b78 <_svfiprintf_r+0x28>
 8008d1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d20:	e72c      	b.n	8008b7c <_svfiprintf_r+0x2c>
 8008d22:	ab03      	add	r3, sp, #12
 8008d24:	9300      	str	r3, [sp, #0]
 8008d26:	462a      	mov	r2, r5
 8008d28:	4b05      	ldr	r3, [pc, #20]	@ (8008d40 <_svfiprintf_r+0x1f0>)
 8008d2a:	a904      	add	r1, sp, #16
 8008d2c:	4638      	mov	r0, r7
 8008d2e:	f000 f879 	bl	8008e24 <_printf_i>
 8008d32:	e7ed      	b.n	8008d10 <_svfiprintf_r+0x1c0>
 8008d34:	08009528 	.word	0x08009528
 8008d38:	08009532 	.word	0x08009532
 8008d3c:	00000000 	.word	0x00000000
 8008d40:	08008a99 	.word	0x08008a99
 8008d44:	0800952e 	.word	0x0800952e

08008d48 <_printf_common>:
 8008d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d4c:	4616      	mov	r6, r2
 8008d4e:	4698      	mov	r8, r3
 8008d50:	688a      	ldr	r2, [r1, #8]
 8008d52:	690b      	ldr	r3, [r1, #16]
 8008d54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	bfb8      	it	lt
 8008d5c:	4613      	movlt	r3, r2
 8008d5e:	6033      	str	r3, [r6, #0]
 8008d60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008d64:	4607      	mov	r7, r0
 8008d66:	460c      	mov	r4, r1
 8008d68:	b10a      	cbz	r2, 8008d6e <_printf_common+0x26>
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	6033      	str	r3, [r6, #0]
 8008d6e:	6823      	ldr	r3, [r4, #0]
 8008d70:	0699      	lsls	r1, r3, #26
 8008d72:	bf42      	ittt	mi
 8008d74:	6833      	ldrmi	r3, [r6, #0]
 8008d76:	3302      	addmi	r3, #2
 8008d78:	6033      	strmi	r3, [r6, #0]
 8008d7a:	6825      	ldr	r5, [r4, #0]
 8008d7c:	f015 0506 	ands.w	r5, r5, #6
 8008d80:	d106      	bne.n	8008d90 <_printf_common+0x48>
 8008d82:	f104 0a19 	add.w	sl, r4, #25
 8008d86:	68e3      	ldr	r3, [r4, #12]
 8008d88:	6832      	ldr	r2, [r6, #0]
 8008d8a:	1a9b      	subs	r3, r3, r2
 8008d8c:	42ab      	cmp	r3, r5
 8008d8e:	dc26      	bgt.n	8008dde <_printf_common+0x96>
 8008d90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008d94:	6822      	ldr	r2, [r4, #0]
 8008d96:	3b00      	subs	r3, #0
 8008d98:	bf18      	it	ne
 8008d9a:	2301      	movne	r3, #1
 8008d9c:	0692      	lsls	r2, r2, #26
 8008d9e:	d42b      	bmi.n	8008df8 <_printf_common+0xb0>
 8008da0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008da4:	4641      	mov	r1, r8
 8008da6:	4638      	mov	r0, r7
 8008da8:	47c8      	blx	r9
 8008daa:	3001      	adds	r0, #1
 8008dac:	d01e      	beq.n	8008dec <_printf_common+0xa4>
 8008dae:	6823      	ldr	r3, [r4, #0]
 8008db0:	6922      	ldr	r2, [r4, #16]
 8008db2:	f003 0306 	and.w	r3, r3, #6
 8008db6:	2b04      	cmp	r3, #4
 8008db8:	bf02      	ittt	eq
 8008dba:	68e5      	ldreq	r5, [r4, #12]
 8008dbc:	6833      	ldreq	r3, [r6, #0]
 8008dbe:	1aed      	subeq	r5, r5, r3
 8008dc0:	68a3      	ldr	r3, [r4, #8]
 8008dc2:	bf0c      	ite	eq
 8008dc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008dc8:	2500      	movne	r5, #0
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	bfc4      	itt	gt
 8008dce:	1a9b      	subgt	r3, r3, r2
 8008dd0:	18ed      	addgt	r5, r5, r3
 8008dd2:	2600      	movs	r6, #0
 8008dd4:	341a      	adds	r4, #26
 8008dd6:	42b5      	cmp	r5, r6
 8008dd8:	d11a      	bne.n	8008e10 <_printf_common+0xc8>
 8008dda:	2000      	movs	r0, #0
 8008ddc:	e008      	b.n	8008df0 <_printf_common+0xa8>
 8008dde:	2301      	movs	r3, #1
 8008de0:	4652      	mov	r2, sl
 8008de2:	4641      	mov	r1, r8
 8008de4:	4638      	mov	r0, r7
 8008de6:	47c8      	blx	r9
 8008de8:	3001      	adds	r0, #1
 8008dea:	d103      	bne.n	8008df4 <_printf_common+0xac>
 8008dec:	f04f 30ff 	mov.w	r0, #4294967295
 8008df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008df4:	3501      	adds	r5, #1
 8008df6:	e7c6      	b.n	8008d86 <_printf_common+0x3e>
 8008df8:	18e1      	adds	r1, r4, r3
 8008dfa:	1c5a      	adds	r2, r3, #1
 8008dfc:	2030      	movs	r0, #48	@ 0x30
 8008dfe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008e02:	4422      	add	r2, r4
 8008e04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008e08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008e0c:	3302      	adds	r3, #2
 8008e0e:	e7c7      	b.n	8008da0 <_printf_common+0x58>
 8008e10:	2301      	movs	r3, #1
 8008e12:	4622      	mov	r2, r4
 8008e14:	4641      	mov	r1, r8
 8008e16:	4638      	mov	r0, r7
 8008e18:	47c8      	blx	r9
 8008e1a:	3001      	adds	r0, #1
 8008e1c:	d0e6      	beq.n	8008dec <_printf_common+0xa4>
 8008e1e:	3601      	adds	r6, #1
 8008e20:	e7d9      	b.n	8008dd6 <_printf_common+0x8e>
	...

08008e24 <_printf_i>:
 8008e24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e28:	7e0f      	ldrb	r7, [r1, #24]
 8008e2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008e2c:	2f78      	cmp	r7, #120	@ 0x78
 8008e2e:	4691      	mov	r9, r2
 8008e30:	4680      	mov	r8, r0
 8008e32:	460c      	mov	r4, r1
 8008e34:	469a      	mov	sl, r3
 8008e36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008e3a:	d807      	bhi.n	8008e4c <_printf_i+0x28>
 8008e3c:	2f62      	cmp	r7, #98	@ 0x62
 8008e3e:	d80a      	bhi.n	8008e56 <_printf_i+0x32>
 8008e40:	2f00      	cmp	r7, #0
 8008e42:	f000 80d1 	beq.w	8008fe8 <_printf_i+0x1c4>
 8008e46:	2f58      	cmp	r7, #88	@ 0x58
 8008e48:	f000 80b8 	beq.w	8008fbc <_printf_i+0x198>
 8008e4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008e54:	e03a      	b.n	8008ecc <_printf_i+0xa8>
 8008e56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008e5a:	2b15      	cmp	r3, #21
 8008e5c:	d8f6      	bhi.n	8008e4c <_printf_i+0x28>
 8008e5e:	a101      	add	r1, pc, #4	@ (adr r1, 8008e64 <_printf_i+0x40>)
 8008e60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e64:	08008ebd 	.word	0x08008ebd
 8008e68:	08008ed1 	.word	0x08008ed1
 8008e6c:	08008e4d 	.word	0x08008e4d
 8008e70:	08008e4d 	.word	0x08008e4d
 8008e74:	08008e4d 	.word	0x08008e4d
 8008e78:	08008e4d 	.word	0x08008e4d
 8008e7c:	08008ed1 	.word	0x08008ed1
 8008e80:	08008e4d 	.word	0x08008e4d
 8008e84:	08008e4d 	.word	0x08008e4d
 8008e88:	08008e4d 	.word	0x08008e4d
 8008e8c:	08008e4d 	.word	0x08008e4d
 8008e90:	08008fcf 	.word	0x08008fcf
 8008e94:	08008efb 	.word	0x08008efb
 8008e98:	08008f89 	.word	0x08008f89
 8008e9c:	08008e4d 	.word	0x08008e4d
 8008ea0:	08008e4d 	.word	0x08008e4d
 8008ea4:	08008ff1 	.word	0x08008ff1
 8008ea8:	08008e4d 	.word	0x08008e4d
 8008eac:	08008efb 	.word	0x08008efb
 8008eb0:	08008e4d 	.word	0x08008e4d
 8008eb4:	08008e4d 	.word	0x08008e4d
 8008eb8:	08008f91 	.word	0x08008f91
 8008ebc:	6833      	ldr	r3, [r6, #0]
 8008ebe:	1d1a      	adds	r2, r3, #4
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	6032      	str	r2, [r6, #0]
 8008ec4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ec8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008ecc:	2301      	movs	r3, #1
 8008ece:	e09c      	b.n	800900a <_printf_i+0x1e6>
 8008ed0:	6833      	ldr	r3, [r6, #0]
 8008ed2:	6820      	ldr	r0, [r4, #0]
 8008ed4:	1d19      	adds	r1, r3, #4
 8008ed6:	6031      	str	r1, [r6, #0]
 8008ed8:	0606      	lsls	r6, r0, #24
 8008eda:	d501      	bpl.n	8008ee0 <_printf_i+0xbc>
 8008edc:	681d      	ldr	r5, [r3, #0]
 8008ede:	e003      	b.n	8008ee8 <_printf_i+0xc4>
 8008ee0:	0645      	lsls	r5, r0, #25
 8008ee2:	d5fb      	bpl.n	8008edc <_printf_i+0xb8>
 8008ee4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ee8:	2d00      	cmp	r5, #0
 8008eea:	da03      	bge.n	8008ef4 <_printf_i+0xd0>
 8008eec:	232d      	movs	r3, #45	@ 0x2d
 8008eee:	426d      	negs	r5, r5
 8008ef0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ef4:	4858      	ldr	r0, [pc, #352]	@ (8009058 <_printf_i+0x234>)
 8008ef6:	230a      	movs	r3, #10
 8008ef8:	e011      	b.n	8008f1e <_printf_i+0xfa>
 8008efa:	6821      	ldr	r1, [r4, #0]
 8008efc:	6833      	ldr	r3, [r6, #0]
 8008efe:	0608      	lsls	r0, r1, #24
 8008f00:	f853 5b04 	ldr.w	r5, [r3], #4
 8008f04:	d402      	bmi.n	8008f0c <_printf_i+0xe8>
 8008f06:	0649      	lsls	r1, r1, #25
 8008f08:	bf48      	it	mi
 8008f0a:	b2ad      	uxthmi	r5, r5
 8008f0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008f0e:	4852      	ldr	r0, [pc, #328]	@ (8009058 <_printf_i+0x234>)
 8008f10:	6033      	str	r3, [r6, #0]
 8008f12:	bf14      	ite	ne
 8008f14:	230a      	movne	r3, #10
 8008f16:	2308      	moveq	r3, #8
 8008f18:	2100      	movs	r1, #0
 8008f1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008f1e:	6866      	ldr	r6, [r4, #4]
 8008f20:	60a6      	str	r6, [r4, #8]
 8008f22:	2e00      	cmp	r6, #0
 8008f24:	db05      	blt.n	8008f32 <_printf_i+0x10e>
 8008f26:	6821      	ldr	r1, [r4, #0]
 8008f28:	432e      	orrs	r6, r5
 8008f2a:	f021 0104 	bic.w	r1, r1, #4
 8008f2e:	6021      	str	r1, [r4, #0]
 8008f30:	d04b      	beq.n	8008fca <_printf_i+0x1a6>
 8008f32:	4616      	mov	r6, r2
 8008f34:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f38:	fb03 5711 	mls	r7, r3, r1, r5
 8008f3c:	5dc7      	ldrb	r7, [r0, r7]
 8008f3e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f42:	462f      	mov	r7, r5
 8008f44:	42bb      	cmp	r3, r7
 8008f46:	460d      	mov	r5, r1
 8008f48:	d9f4      	bls.n	8008f34 <_printf_i+0x110>
 8008f4a:	2b08      	cmp	r3, #8
 8008f4c:	d10b      	bne.n	8008f66 <_printf_i+0x142>
 8008f4e:	6823      	ldr	r3, [r4, #0]
 8008f50:	07df      	lsls	r7, r3, #31
 8008f52:	d508      	bpl.n	8008f66 <_printf_i+0x142>
 8008f54:	6923      	ldr	r3, [r4, #16]
 8008f56:	6861      	ldr	r1, [r4, #4]
 8008f58:	4299      	cmp	r1, r3
 8008f5a:	bfde      	ittt	le
 8008f5c:	2330      	movle	r3, #48	@ 0x30
 8008f5e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f62:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008f66:	1b92      	subs	r2, r2, r6
 8008f68:	6122      	str	r2, [r4, #16]
 8008f6a:	f8cd a000 	str.w	sl, [sp]
 8008f6e:	464b      	mov	r3, r9
 8008f70:	aa03      	add	r2, sp, #12
 8008f72:	4621      	mov	r1, r4
 8008f74:	4640      	mov	r0, r8
 8008f76:	f7ff fee7 	bl	8008d48 <_printf_common>
 8008f7a:	3001      	adds	r0, #1
 8008f7c:	d14a      	bne.n	8009014 <_printf_i+0x1f0>
 8008f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f82:	b004      	add	sp, #16
 8008f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f88:	6823      	ldr	r3, [r4, #0]
 8008f8a:	f043 0320 	orr.w	r3, r3, #32
 8008f8e:	6023      	str	r3, [r4, #0]
 8008f90:	4832      	ldr	r0, [pc, #200]	@ (800905c <_printf_i+0x238>)
 8008f92:	2778      	movs	r7, #120	@ 0x78
 8008f94:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008f98:	6823      	ldr	r3, [r4, #0]
 8008f9a:	6831      	ldr	r1, [r6, #0]
 8008f9c:	061f      	lsls	r7, r3, #24
 8008f9e:	f851 5b04 	ldr.w	r5, [r1], #4
 8008fa2:	d402      	bmi.n	8008faa <_printf_i+0x186>
 8008fa4:	065f      	lsls	r7, r3, #25
 8008fa6:	bf48      	it	mi
 8008fa8:	b2ad      	uxthmi	r5, r5
 8008faa:	6031      	str	r1, [r6, #0]
 8008fac:	07d9      	lsls	r1, r3, #31
 8008fae:	bf44      	itt	mi
 8008fb0:	f043 0320 	orrmi.w	r3, r3, #32
 8008fb4:	6023      	strmi	r3, [r4, #0]
 8008fb6:	b11d      	cbz	r5, 8008fc0 <_printf_i+0x19c>
 8008fb8:	2310      	movs	r3, #16
 8008fba:	e7ad      	b.n	8008f18 <_printf_i+0xf4>
 8008fbc:	4826      	ldr	r0, [pc, #152]	@ (8009058 <_printf_i+0x234>)
 8008fbe:	e7e9      	b.n	8008f94 <_printf_i+0x170>
 8008fc0:	6823      	ldr	r3, [r4, #0]
 8008fc2:	f023 0320 	bic.w	r3, r3, #32
 8008fc6:	6023      	str	r3, [r4, #0]
 8008fc8:	e7f6      	b.n	8008fb8 <_printf_i+0x194>
 8008fca:	4616      	mov	r6, r2
 8008fcc:	e7bd      	b.n	8008f4a <_printf_i+0x126>
 8008fce:	6833      	ldr	r3, [r6, #0]
 8008fd0:	6825      	ldr	r5, [r4, #0]
 8008fd2:	6961      	ldr	r1, [r4, #20]
 8008fd4:	1d18      	adds	r0, r3, #4
 8008fd6:	6030      	str	r0, [r6, #0]
 8008fd8:	062e      	lsls	r6, r5, #24
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	d501      	bpl.n	8008fe2 <_printf_i+0x1be>
 8008fde:	6019      	str	r1, [r3, #0]
 8008fe0:	e002      	b.n	8008fe8 <_printf_i+0x1c4>
 8008fe2:	0668      	lsls	r0, r5, #25
 8008fe4:	d5fb      	bpl.n	8008fde <_printf_i+0x1ba>
 8008fe6:	8019      	strh	r1, [r3, #0]
 8008fe8:	2300      	movs	r3, #0
 8008fea:	6123      	str	r3, [r4, #16]
 8008fec:	4616      	mov	r6, r2
 8008fee:	e7bc      	b.n	8008f6a <_printf_i+0x146>
 8008ff0:	6833      	ldr	r3, [r6, #0]
 8008ff2:	1d1a      	adds	r2, r3, #4
 8008ff4:	6032      	str	r2, [r6, #0]
 8008ff6:	681e      	ldr	r6, [r3, #0]
 8008ff8:	6862      	ldr	r2, [r4, #4]
 8008ffa:	2100      	movs	r1, #0
 8008ffc:	4630      	mov	r0, r6
 8008ffe:	f7f7 f907 	bl	8000210 <memchr>
 8009002:	b108      	cbz	r0, 8009008 <_printf_i+0x1e4>
 8009004:	1b80      	subs	r0, r0, r6
 8009006:	6060      	str	r0, [r4, #4]
 8009008:	6863      	ldr	r3, [r4, #4]
 800900a:	6123      	str	r3, [r4, #16]
 800900c:	2300      	movs	r3, #0
 800900e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009012:	e7aa      	b.n	8008f6a <_printf_i+0x146>
 8009014:	6923      	ldr	r3, [r4, #16]
 8009016:	4632      	mov	r2, r6
 8009018:	4649      	mov	r1, r9
 800901a:	4640      	mov	r0, r8
 800901c:	47d0      	blx	sl
 800901e:	3001      	adds	r0, #1
 8009020:	d0ad      	beq.n	8008f7e <_printf_i+0x15a>
 8009022:	6823      	ldr	r3, [r4, #0]
 8009024:	079b      	lsls	r3, r3, #30
 8009026:	d413      	bmi.n	8009050 <_printf_i+0x22c>
 8009028:	68e0      	ldr	r0, [r4, #12]
 800902a:	9b03      	ldr	r3, [sp, #12]
 800902c:	4298      	cmp	r0, r3
 800902e:	bfb8      	it	lt
 8009030:	4618      	movlt	r0, r3
 8009032:	e7a6      	b.n	8008f82 <_printf_i+0x15e>
 8009034:	2301      	movs	r3, #1
 8009036:	4632      	mov	r2, r6
 8009038:	4649      	mov	r1, r9
 800903a:	4640      	mov	r0, r8
 800903c:	47d0      	blx	sl
 800903e:	3001      	adds	r0, #1
 8009040:	d09d      	beq.n	8008f7e <_printf_i+0x15a>
 8009042:	3501      	adds	r5, #1
 8009044:	68e3      	ldr	r3, [r4, #12]
 8009046:	9903      	ldr	r1, [sp, #12]
 8009048:	1a5b      	subs	r3, r3, r1
 800904a:	42ab      	cmp	r3, r5
 800904c:	dcf2      	bgt.n	8009034 <_printf_i+0x210>
 800904e:	e7eb      	b.n	8009028 <_printf_i+0x204>
 8009050:	2500      	movs	r5, #0
 8009052:	f104 0619 	add.w	r6, r4, #25
 8009056:	e7f5      	b.n	8009044 <_printf_i+0x220>
 8009058:	08009539 	.word	0x08009539
 800905c:	0800954a 	.word	0x0800954a

08009060 <memmove>:
 8009060:	4288      	cmp	r0, r1
 8009062:	b510      	push	{r4, lr}
 8009064:	eb01 0402 	add.w	r4, r1, r2
 8009068:	d902      	bls.n	8009070 <memmove+0x10>
 800906a:	4284      	cmp	r4, r0
 800906c:	4623      	mov	r3, r4
 800906e:	d807      	bhi.n	8009080 <memmove+0x20>
 8009070:	1e43      	subs	r3, r0, #1
 8009072:	42a1      	cmp	r1, r4
 8009074:	d008      	beq.n	8009088 <memmove+0x28>
 8009076:	f811 2b01 	ldrb.w	r2, [r1], #1
 800907a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800907e:	e7f8      	b.n	8009072 <memmove+0x12>
 8009080:	4402      	add	r2, r0
 8009082:	4601      	mov	r1, r0
 8009084:	428a      	cmp	r2, r1
 8009086:	d100      	bne.n	800908a <memmove+0x2a>
 8009088:	bd10      	pop	{r4, pc}
 800908a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800908e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009092:	e7f7      	b.n	8009084 <memmove+0x24>

08009094 <_sbrk_r>:
 8009094:	b538      	push	{r3, r4, r5, lr}
 8009096:	4d06      	ldr	r5, [pc, #24]	@ (80090b0 <_sbrk_r+0x1c>)
 8009098:	2300      	movs	r3, #0
 800909a:	4604      	mov	r4, r0
 800909c:	4608      	mov	r0, r1
 800909e:	602b      	str	r3, [r5, #0]
 80090a0:	f7f8 fbbc 	bl	800181c <_sbrk>
 80090a4:	1c43      	adds	r3, r0, #1
 80090a6:	d102      	bne.n	80090ae <_sbrk_r+0x1a>
 80090a8:	682b      	ldr	r3, [r5, #0]
 80090aa:	b103      	cbz	r3, 80090ae <_sbrk_r+0x1a>
 80090ac:	6023      	str	r3, [r4, #0]
 80090ae:	bd38      	pop	{r3, r4, r5, pc}
 80090b0:	200050e4 	.word	0x200050e4

080090b4 <_realloc_r>:
 80090b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090b8:	4607      	mov	r7, r0
 80090ba:	4614      	mov	r4, r2
 80090bc:	460d      	mov	r5, r1
 80090be:	b921      	cbnz	r1, 80090ca <_realloc_r+0x16>
 80090c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090c4:	4611      	mov	r1, r2
 80090c6:	f7ff bc5b 	b.w	8008980 <_malloc_r>
 80090ca:	b92a      	cbnz	r2, 80090d8 <_realloc_r+0x24>
 80090cc:	f7ff fbec 	bl	80088a8 <_free_r>
 80090d0:	4625      	mov	r5, r4
 80090d2:	4628      	mov	r0, r5
 80090d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090d8:	f000 f81a 	bl	8009110 <_malloc_usable_size_r>
 80090dc:	4284      	cmp	r4, r0
 80090de:	4606      	mov	r6, r0
 80090e0:	d802      	bhi.n	80090e8 <_realloc_r+0x34>
 80090e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80090e6:	d8f4      	bhi.n	80090d2 <_realloc_r+0x1e>
 80090e8:	4621      	mov	r1, r4
 80090ea:	4638      	mov	r0, r7
 80090ec:	f7ff fc48 	bl	8008980 <_malloc_r>
 80090f0:	4680      	mov	r8, r0
 80090f2:	b908      	cbnz	r0, 80090f8 <_realloc_r+0x44>
 80090f4:	4645      	mov	r5, r8
 80090f6:	e7ec      	b.n	80090d2 <_realloc_r+0x1e>
 80090f8:	42b4      	cmp	r4, r6
 80090fa:	4622      	mov	r2, r4
 80090fc:	4629      	mov	r1, r5
 80090fe:	bf28      	it	cs
 8009100:	4632      	movcs	r2, r6
 8009102:	f7ff fbc3 	bl	800888c <memcpy>
 8009106:	4629      	mov	r1, r5
 8009108:	4638      	mov	r0, r7
 800910a:	f7ff fbcd 	bl	80088a8 <_free_r>
 800910e:	e7f1      	b.n	80090f4 <_realloc_r+0x40>

08009110 <_malloc_usable_size_r>:
 8009110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009114:	1f18      	subs	r0, r3, #4
 8009116:	2b00      	cmp	r3, #0
 8009118:	bfbc      	itt	lt
 800911a:	580b      	ldrlt	r3, [r1, r0]
 800911c:	18c0      	addlt	r0, r0, r3
 800911e:	4770      	bx	lr

08009120 <_init>:
 8009120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009122:	bf00      	nop
 8009124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009126:	bc08      	pop	{r3}
 8009128:	469e      	mov	lr, r3
 800912a:	4770      	bx	lr

0800912c <_fini>:
 800912c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800912e:	bf00      	nop
 8009130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009132:	bc08      	pop	{r3}
 8009134:	469e      	mov	lr, r3
 8009136:	4770      	bx	lr
