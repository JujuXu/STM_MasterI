
TP2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067c4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08006994  08006994  00007994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006acc  08006acc  00008010  2**0
                  CONTENTS
  4 .ARM          00000008  08006acc  08006acc  00007acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ad4  08006ad4  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ad4  08006ad4  00007ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ad8  08006ad8  00007ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08006adc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004eac  20000010  08006aec  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ebc  08006aec  00008ebc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016527  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003784  00000000  00000000  0001e567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001268  00000000  00000000  00021cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e0f  00000000  00000000  00022f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023fca  00000000  00000000  00023d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016f41  00000000  00000000  00047d31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4c2c  00000000  00000000  0005ec72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013389e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c00  00000000  00000000  001338e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001384e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800697c 	.word	0x0800697c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	0800697c 	.word	0x0800697c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of serialMutex */
  serialMutexHandle = osMutexNew(&serialMutex_attributes);
 8000514:	480f      	ldr	r0, [pc, #60]	@ (8000554 <MX_FREERTOS_Init+0x44>)
 8000516:	f003 f936 	bl	8003786 <osMutexNew>
 800051a:	4603      	mov	r3, r0
 800051c:	4a0e      	ldr	r2, [pc, #56]	@ (8000558 <MX_FREERTOS_Init+0x48>)
 800051e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000520:	4a0e      	ldr	r2, [pc, #56]	@ (800055c <MX_FREERTOS_Init+0x4c>)
 8000522:	2100      	movs	r1, #0
 8000524:	480e      	ldr	r0, [pc, #56]	@ (8000560 <MX_FREERTOS_Init+0x50>)
 8000526:	f003 f881 	bl	800362c <osThreadNew>
 800052a:	4603      	mov	r3, r0
 800052c:	4a0d      	ldr	r2, [pc, #52]	@ (8000564 <MX_FREERTOS_Init+0x54>)
 800052e:	6013      	str	r3, [r2, #0]

  /* creation of announceOscarsT */
  announceOscarsTHandle = osThreadNew(announceOscars, NULL, &announceOscarsT_attributes);
 8000530:	4a0d      	ldr	r2, [pc, #52]	@ (8000568 <MX_FREERTOS_Init+0x58>)
 8000532:	2100      	movs	r1, #0
 8000534:	480d      	ldr	r0, [pc, #52]	@ (800056c <MX_FREERTOS_Init+0x5c>)
 8000536:	f003 f879 	bl	800362c <osThreadNew>
 800053a:	4603      	mov	r3, r0
 800053c:	4a0c      	ldr	r2, [pc, #48]	@ (8000570 <MX_FREERTOS_Init+0x60>)
 800053e:	6013      	str	r3, [r2, #0]

  /* creation of winnerAnnounceT */
  winnerAnnounceTHandle = osThreadNew(winnerAnnounce, NULL, &winnerAnnounceT_attributes);
 8000540:	4a0c      	ldr	r2, [pc, #48]	@ (8000574 <MX_FREERTOS_Init+0x64>)
 8000542:	2100      	movs	r1, #0
 8000544:	480c      	ldr	r0, [pc, #48]	@ (8000578 <MX_FREERTOS_Init+0x68>)
 8000546:	f003 f871 	bl	800362c <osThreadNew>
 800054a:	4603      	mov	r3, r0
 800054c:	4a0b      	ldr	r2, [pc, #44]	@ (800057c <MX_FREERTOS_Init+0x6c>)
 800054e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000550:	bf00      	nop
 8000552:	bd80      	pop	{r7, pc}
 8000554:	08006aa4 	.word	0x08006aa4
 8000558:	20000038 	.word	0x20000038
 800055c:	08006a38 	.word	0x08006a38
 8000560:	08000581 	.word	0x08000581
 8000564:	2000002c 	.word	0x2000002c
 8000568:	08006a5c 	.word	0x08006a5c
 800056c:	08000591 	.word	0x08000591
 8000570:	20000030 	.word	0x20000030
 8000574:	08006a80 	.word	0x08006a80
 8000578:	080005f9 	.word	0x080005f9
 800057c:	20000034 	.word	0x20000034

08000580 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000588:	2001      	movs	r0, #1
 800058a:	f003 f8e1 	bl	8003750 <osDelay>
 800058e:	e7fb      	b.n	8000588 <StartDefaultTask+0x8>

08000590 <announceOscars>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_announceOscars */
void announceOscars(void *argument)
{
 8000590:	b5b0      	push	{r4, r5, r7, lr}
 8000592:	b08a      	sub	sp, #40	@ 0x28
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN announceOscars */
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(serialMutexHandle, osWaitForever);
 8000598:	4b14      	ldr	r3, [pc, #80]	@ (80005ec <announceOscars+0x5c>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f04f 31ff 	mov.w	r1, #4294967295
 80005a0:	4618      	mov	r0, r3
 80005a2:	f003 f976 	bl	8003892 <osMutexAcquire>
	  char tosend[] = "***OSCARS CEREMONY 2020***\r\n";
 80005a6:	4b12      	ldr	r3, [pc, #72]	@ (80005f0 <announceOscars+0x60>)
 80005a8:	f107 0408 	add.w	r4, r7, #8
 80005ac:	461d      	mov	r5, r3
 80005ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80005b6:	c407      	stmia	r4!, {r0, r1, r2}
 80005b8:	7023      	strb	r3, [r4, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t *) tosend, strlen(tosend), 10);
 80005ba:	f107 0308 	add.w	r3, r7, #8
 80005be:	4618      	mov	r0, r3
 80005c0:	f7ff fe26 	bl	8000210 <strlen>
 80005c4:	4603      	mov	r3, r0
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	f107 0108 	add.w	r1, r7, #8
 80005cc:	230a      	movs	r3, #10
 80005ce:	4809      	ldr	r0, [pc, #36]	@ (80005f4 <announceOscars+0x64>)
 80005d0:	f002 f8f8 	bl	80027c4 <HAL_UART_Transmit>
	  osMutexRelease(serialMutexHandle);
 80005d4:	4b05      	ldr	r3, [pc, #20]	@ (80005ec <announceOscars+0x5c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4618      	mov	r0, r3
 80005da:	f003 f9a5 	bl	8003928 <osMutexRelease>

	  osDelay(500);
 80005de:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005e2:	f003 f8b5 	bl	8003750 <osDelay>
  {
 80005e6:	bf00      	nop
 80005e8:	e7d6      	b.n	8000598 <announceOscars+0x8>
 80005ea:	bf00      	nop
 80005ec:	20000038 	.word	0x20000038
 80005f0:	080069cc 	.word	0x080069cc
 80005f4:	2000003c 	.word	0x2000003c

080005f8 <winnerAnnounce>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_winnerAnnounce */
void winnerAnnounce(void *argument)
{
 80005f8:	b5b0      	push	{r4, r5, r7, lr}
 80005fa:	b090      	sub	sp, #64	@ 0x40
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN winnerAnnounce */
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(serialMutexHandle, osWaitForever);
 8000600:	4b1f      	ldr	r3, [pc, #124]	@ (8000680 <winnerAnnounce+0x88>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f04f 31ff 	mov.w	r1, #4294967295
 8000608:	4618      	mov	r0, r3
 800060a:	f003 f942 	bl	8003892 <osMutexAcquire>
	  char tosend[] = "The best movie award goes to...\r\n"; // string se termine par \0 donc longueur va être +2
 800060e:	4b1d      	ldr	r3, [pc, #116]	@ (8000684 <winnerAnnounce+0x8c>)
 8000610:	f107 040c 	add.w	r4, r7, #12
 8000614:	461d      	mov	r5, r3
 8000616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061e:	682b      	ldr	r3, [r5, #0]
 8000620:	8023      	strh	r3, [r4, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t *) tosend, strlen(tosend), 10);
 8000622:	f107 030c 	add.w	r3, r7, #12
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff fdf2 	bl	8000210 <strlen>
 800062c:	4603      	mov	r3, r0
 800062e:	b29a      	uxth	r2, r3
 8000630:	f107 010c 	add.w	r1, r7, #12
 8000634:	230a      	movs	r3, #10
 8000636:	4814      	ldr	r0, [pc, #80]	@ (8000688 <winnerAnnounce+0x90>)
 8000638:	f002 f8c4 	bl	80027c4 <HAL_UART_Transmit>
	  osDelay(1000);
 800063c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000640:	f003 f886 	bl	8003750 <osDelay>

	  char tosend2[] = "PARASITE !!!!\r\n";
 8000644:	4b11      	ldr	r3, [pc, #68]	@ (800068c <winnerAnnounce+0x94>)
 8000646:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800064a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800064c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  HAL_UART_Transmit(&huart3, (uint8_t *) tosend2, strlen(tosend2), 10);
 8000650:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff fddb 	bl	8000210 <strlen>
 800065a:	4603      	mov	r3, r0
 800065c:	b29a      	uxth	r2, r3
 800065e:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000662:	230a      	movs	r3, #10
 8000664:	4808      	ldr	r0, [pc, #32]	@ (8000688 <winnerAnnounce+0x90>)
 8000666:	f002 f8ad 	bl	80027c4 <HAL_UART_Transmit>

	  osMutexRelease(serialMutexHandle);
 800066a:	4b05      	ldr	r3, [pc, #20]	@ (8000680 <winnerAnnounce+0x88>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4618      	mov	r0, r3
 8000670:	f003 f95a 	bl	8003928 <osMutexRelease>
	  osDelay(4000);
 8000674:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000678:	f003 f86a 	bl	8003750 <osDelay>
  {
 800067c:	bf00      	nop
 800067e:	e7bf      	b.n	8000600 <winnerAnnounce+0x8>
 8000680:	20000038 	.word	0x20000038
 8000684:	080069ec 	.word	0x080069ec
 8000688:	2000003c 	.word	0x2000003c
 800068c:	08006a10 	.word	0x08006a10

08000690 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08c      	sub	sp, #48	@ 0x30
 8000694:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	61bb      	str	r3, [r7, #24]
 80006aa:	4b4c      	ldr	r3, [pc, #304]	@ (80007dc <MX_GPIO_Init+0x14c>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	4a4b      	ldr	r2, [pc, #300]	@ (80007dc <MX_GPIO_Init+0x14c>)
 80006b0:	f043 0304 	orr.w	r3, r3, #4
 80006b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b6:	4b49      	ldr	r3, [pc, #292]	@ (80007dc <MX_GPIO_Init+0x14c>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	f003 0304 	and.w	r3, r3, #4
 80006be:	61bb      	str	r3, [r7, #24]
 80006c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
 80006c6:	4b45      	ldr	r3, [pc, #276]	@ (80007dc <MX_GPIO_Init+0x14c>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	4a44      	ldr	r2, [pc, #272]	@ (80007dc <MX_GPIO_Init+0x14c>)
 80006cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d2:	4b42      	ldr	r3, [pc, #264]	@ (80007dc <MX_GPIO_Init+0x14c>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006da:	617b      	str	r3, [r7, #20]
 80006dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	4b3e      	ldr	r3, [pc, #248]	@ (80007dc <MX_GPIO_Init+0x14c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	4a3d      	ldr	r2, [pc, #244]	@ (80007dc <MX_GPIO_Init+0x14c>)
 80006e8:	f043 0302 	orr.w	r3, r3, #2
 80006ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ee:	4b3b      	ldr	r3, [pc, #236]	@ (80007dc <MX_GPIO_Init+0x14c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	f003 0302 	and.w	r3, r3, #2
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	4b37      	ldr	r3, [pc, #220]	@ (80007dc <MX_GPIO_Init+0x14c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	4a36      	ldr	r2, [pc, #216]	@ (80007dc <MX_GPIO_Init+0x14c>)
 8000704:	f043 0308 	orr.w	r3, r3, #8
 8000708:	6313      	str	r3, [r2, #48]	@ 0x30
 800070a:	4b34      	ldr	r3, [pc, #208]	@ (80007dc <MX_GPIO_Init+0x14c>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	f003 0308 	and.w	r3, r3, #8
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	4b30      	ldr	r3, [pc, #192]	@ (80007dc <MX_GPIO_Init+0x14c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	4a2f      	ldr	r2, [pc, #188]	@ (80007dc <MX_GPIO_Init+0x14c>)
 8000720:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000724:	6313      	str	r3, [r2, #48]	@ 0x30
 8000726:	4b2d      	ldr	r3, [pc, #180]	@ (80007dc <MX_GPIO_Init+0x14c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4b29      	ldr	r3, [pc, #164]	@ (80007dc <MX_GPIO_Init+0x14c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a28      	ldr	r2, [pc, #160]	@ (80007dc <MX_GPIO_Init+0x14c>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b26      	ldr	r3, [pc, #152]	@ (80007dc <MX_GPIO_Init+0x14c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000754:	4822      	ldr	r0, [pc, #136]	@ (80007e0 <MX_GPIO_Init+0x150>)
 8000756:	f000 fd7f 	bl	8001258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	2140      	movs	r1, #64	@ 0x40
 800075e:	4821      	ldr	r0, [pc, #132]	@ (80007e4 <MX_GPIO_Init+0x154>)
 8000760:	f000 fd7a 	bl	8001258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000764:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000768:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800076a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800076e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4619      	mov	r1, r3
 800077a:	481b      	ldr	r0, [pc, #108]	@ (80007e8 <MX_GPIO_Init+0x158>)
 800077c:	f000 fbd8 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000780:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	4619      	mov	r1, r3
 8000798:	4811      	ldr	r0, [pc, #68]	@ (80007e0 <MX_GPIO_Init+0x150>)
 800079a:	f000 fbc9 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800079e:	2340      	movs	r3, #64	@ 0x40
 80007a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a2:	2301      	movs	r3, #1
 80007a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007aa:	2300      	movs	r3, #0
 80007ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	4619      	mov	r1, r3
 80007b4:	480b      	ldr	r0, [pc, #44]	@ (80007e4 <MX_GPIO_Init+0x154>)
 80007b6:	f000 fbbb 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007ba:	2380      	movs	r3, #128	@ 0x80
 80007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007be:	2300      	movs	r3, #0
 80007c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	4619      	mov	r1, r3
 80007cc:	4805      	ldr	r0, [pc, #20]	@ (80007e4 <MX_GPIO_Init+0x154>)
 80007ce:	f000 fbaf 	bl	8000f30 <HAL_GPIO_Init>

}
 80007d2:	bf00      	nop
 80007d4:	3730      	adds	r7, #48	@ 0x30
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40020400 	.word	0x40020400
 80007e4:	40021800 	.word	0x40021800
 80007e8:	40020800 	.word	0x40020800

080007ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f0:	f000 fa22 	bl	8000c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f4:	f000 f80e 	bl	8000814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f8:	f7ff ff4a 	bl	8000690 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007fc:	f000 f8e2 	bl	80009c4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000800:	f000 f952 	bl	8000aa8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000804:	f002 fec8 	bl	8003598 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000808:	f7ff fe82 	bl	8000510 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800080c:	f002 fee8 	bl	80035e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <main+0x24>

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b094      	sub	sp, #80	@ 0x50
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	2234      	movs	r2, #52	@ 0x34
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f006 f870 	bl	8006908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	f107 0308 	add.w	r3, r7, #8
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000838:	2300      	movs	r3, #0
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	4b29      	ldr	r3, [pc, #164]	@ (80008e4 <SystemClock_Config+0xd0>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000840:	4a28      	ldr	r2, [pc, #160]	@ (80008e4 <SystemClock_Config+0xd0>)
 8000842:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000846:	6413      	str	r3, [r2, #64]	@ 0x40
 8000848:	4b26      	ldr	r3, [pc, #152]	@ (80008e4 <SystemClock_Config+0xd0>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000854:	2300      	movs	r3, #0
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	4b23      	ldr	r3, [pc, #140]	@ (80008e8 <SystemClock_Config+0xd4>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a22      	ldr	r2, [pc, #136]	@ (80008e8 <SystemClock_Config+0xd4>)
 800085e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000862:	6013      	str	r3, [r2, #0]
 8000864:	4b20      	ldr	r3, [pc, #128]	@ (80008e8 <SystemClock_Config+0xd4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000870:	2301      	movs	r3, #1
 8000872:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000874:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000878:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087a:	2302      	movs	r3, #2
 800087c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800087e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000882:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000884:	2304      	movs	r3, #4
 8000886:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000888:	23a8      	movs	r3, #168	@ 0xa8
 800088a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800088c:	2302      	movs	r3, #2
 800088e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000890:	2307      	movs	r3, #7
 8000892:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000894:	2302      	movs	r3, #2
 8000896:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4618      	mov	r0, r3
 800089e:	f001 fca3 	bl	80021e8 <HAL_RCC_OscConfig>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008a8:	f000 f820 	bl	80008ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ac:	230f      	movs	r3, #15
 80008ae:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b0:	2302      	movs	r3, #2
 80008b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008b8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008c2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008c4:	f107 0308 	add.w	r3, r7, #8
 80008c8:	2105      	movs	r1, #5
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 fe18 	bl	8001500 <HAL_RCC_ClockConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008d6:	f000 f809 	bl	80008ec <Error_Handler>
  }
}
 80008da:	bf00      	nop
 80008dc:	3750      	adds	r7, #80	@ 0x50
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40007000 	.word	0x40007000

080008ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
}
 80008f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <Error_Handler+0x8>

080008f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	4b12      	ldr	r3, [pc, #72]	@ (800094c <HAL_MspInit+0x54>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000906:	4a11      	ldr	r2, [pc, #68]	@ (800094c <HAL_MspInit+0x54>)
 8000908:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800090c:	6453      	str	r3, [r2, #68]	@ 0x44
 800090e:	4b0f      	ldr	r3, [pc, #60]	@ (800094c <HAL_MspInit+0x54>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000912:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <HAL_MspInit+0x54>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000922:	4a0a      	ldr	r2, [pc, #40]	@ (800094c <HAL_MspInit+0x54>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000928:	6413      	str	r3, [r2, #64]	@ 0x40
 800092a:	4b08      	ldr	r3, [pc, #32]	@ (800094c <HAL_MspInit+0x54>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	210f      	movs	r1, #15
 800093a:	f06f 0001 	mvn.w	r0, #1
 800093e:	f000 face 	bl	8000ede <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <NMI_Handler+0x4>

08000958 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <HardFault_Handler+0x4>

08000960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <MemManage_Handler+0x4>

08000968 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <BusFault_Handler+0x4>

08000970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <UsageFault_Handler+0x4>

08000978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800098a:	f000 f9a7 	bl	8000cdc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800098e:	f004 fe41 	bl	8005614 <xTaskGetSchedulerState>
 8000992:	4603      	mov	r3, r0
 8000994:	2b01      	cmp	r3, #1
 8000996:	d001      	beq.n	800099c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000998:	f005 fd36 	bl	8006408 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}

080009a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <SystemInit+0x20>)
 80009a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009aa:	4a05      	ldr	r2, [pc, #20]	@ (80009c0 <SystemInit+0x20>)
 80009ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009c8:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <MX_USART3_UART_Init+0x4c>)
 80009ca:	4a12      	ldr	r2, [pc, #72]	@ (8000a14 <MX_USART3_UART_Init+0x50>)
 80009cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009ce:	4b10      	ldr	r3, [pc, #64]	@ (8000a10 <MX_USART3_UART_Init+0x4c>)
 80009d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <MX_USART3_UART_Init+0x4c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <MX_USART3_UART_Init+0x4c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <MX_USART3_UART_Init+0x4c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009e8:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <MX_USART3_UART_Init+0x4c>)
 80009ea:	220c      	movs	r2, #12
 80009ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ee:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <MX_USART3_UART_Init+0x4c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f4:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <MX_USART3_UART_Init+0x4c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009fa:	4805      	ldr	r0, [pc, #20]	@ (8000a10 <MX_USART3_UART_Init+0x4c>)
 80009fc:	f001 fe92 	bl	8002724 <HAL_UART_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a06:	f7ff ff71 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	2000003c 	.word	0x2000003c
 8000a14:	40004800 	.word	0x40004800

08000a18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	@ 0x28
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a19      	ldr	r2, [pc, #100]	@ (8000a9c <HAL_UART_MspInit+0x84>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d12c      	bne.n	8000a94 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	4b18      	ldr	r3, [pc, #96]	@ (8000aa0 <HAL_UART_MspInit+0x88>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a42:	4a17      	ldr	r2, [pc, #92]	@ (8000aa0 <HAL_UART_MspInit+0x88>)
 8000a44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a4a:	4b15      	ldr	r3, [pc, #84]	@ (8000aa0 <HAL_UART_MspInit+0x88>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	4b11      	ldr	r3, [pc, #68]	@ (8000aa0 <HAL_UART_MspInit+0x88>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	4a10      	ldr	r2, [pc, #64]	@ (8000aa0 <HAL_UART_MspInit+0x88>)
 8000a60:	f043 0308 	orr.w	r3, r3, #8
 8000a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a66:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa0 <HAL_UART_MspInit+0x88>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	f003 0308 	and.w	r3, r3, #8
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a72:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a84:	2307      	movs	r3, #7
 8000a86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4805      	ldr	r0, [pc, #20]	@ (8000aa4 <HAL_UART_MspInit+0x8c>)
 8000a90:	f000 fa4e 	bl	8000f30 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000a94:	bf00      	nop
 8000a96:	3728      	adds	r7, #40	@ 0x28
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40004800 	.word	0x40004800
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40020c00 	.word	0x40020c00

08000aa8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000aac:	4b14      	ldr	r3, [pc, #80]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000ab2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab6:	2206      	movs	r2, #6
 8000ab8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000aba:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000abc:	2202      	movs	r2, #2
 8000abe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac8:	2202      	movs	r2, #2
 8000aca:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ade:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000aea:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aec:	f000 fbcd 	bl	800128a <HAL_PCD_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000af6:	f7ff fef9 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000084 	.word	0x20000084

08000b04 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b0a0      	sub	sp, #128	@ 0x80
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b1c:	f107 0310 	add.w	r3, r7, #16
 8000b20:	225c      	movs	r2, #92	@ 0x5c
 8000b22:	2100      	movs	r1, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f005 feef 	bl	8006908 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000b32:	d14e      	bne.n	8000bd2 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000b34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b38:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b3e:	f107 0310 	add.w	r3, r7, #16
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 fdf6 	bl	8001734 <HAL_RCCEx_PeriphCLKConfig>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000b4e:	f7ff fecd 	bl	80008ec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	4b21      	ldr	r3, [pc, #132]	@ (8000bdc <HAL_PCD_MspInit+0xd8>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	4a20      	ldr	r2, [pc, #128]	@ (8000bdc <HAL_PCD_MspInit+0xd8>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b62:	4b1e      	ldr	r3, [pc, #120]	@ (8000bdc <HAL_PCD_MspInit+0xd8>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b6e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000b72:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b80:	230a      	movs	r3, #10
 8000b82:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b84:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4815      	ldr	r0, [pc, #84]	@ (8000be0 <HAL_PCD_MspInit+0xdc>)
 8000b8c:	f000 f9d0 	bl	8000f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b94:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b96:	2300      	movs	r3, #0
 8000b98:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	480e      	ldr	r0, [pc, #56]	@ (8000be0 <HAL_PCD_MspInit+0xdc>)
 8000ba6:	f000 f9c3 	bl	8000f30 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000baa:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <HAL_PCD_MspInit+0xd8>)
 8000bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bae:	4a0b      	ldr	r2, [pc, #44]	@ (8000bdc <HAL_PCD_MspInit+0xd8>)
 8000bb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bb4:	6353      	str	r3, [r2, #52]	@ 0x34
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <HAL_PCD_MspInit+0xd8>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bbe:	4a07      	ldr	r2, [pc, #28]	@ (8000bdc <HAL_PCD_MspInit+0xd8>)
 8000bc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bc6:	4b05      	ldr	r3, [pc, #20]	@ (8000bdc <HAL_PCD_MspInit+0xd8>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000bd2:	bf00      	nop
 8000bd4:	3780      	adds	r7, #128	@ 0x80
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020000 	.word	0x40020000

08000be4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000be4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c1c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000be8:	f7ff feda 	bl	80009a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bec:	480c      	ldr	r0, [pc, #48]	@ (8000c20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bee:	490d      	ldr	r1, [pc, #52]	@ (8000c24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8000c28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf4:	e002      	b.n	8000bfc <LoopCopyDataInit>

08000bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfa:	3304      	adds	r3, #4

08000bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c00:	d3f9      	bcc.n	8000bf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c02:	4a0a      	ldr	r2, [pc, #40]	@ (8000c2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c04:	4c0a      	ldr	r4, [pc, #40]	@ (8000c30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c08:	e001      	b.n	8000c0e <LoopFillZerobss>

08000c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c0c:	3204      	adds	r2, #4

08000c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c10:	d3fb      	bcc.n	8000c0a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c12:	f005 fe81 	bl	8006918 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c16:	f7ff fde9 	bl	80007ec <main>
  bx  lr    
 8000c1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c24:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c28:	08006adc 	.word	0x08006adc
  ldr r2, =_sbss
 8000c2c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c30:	20004ebc 	.word	0x20004ebc

08000c34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c34:	e7fe      	b.n	8000c34 <ADC_IRQHandler>
	...

08000c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c78 <HAL_Init+0x40>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a0d      	ldr	r2, [pc, #52]	@ (8000c78 <HAL_Init+0x40>)
 8000c42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c48:	4b0b      	ldr	r3, [pc, #44]	@ (8000c78 <HAL_Init+0x40>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c78 <HAL_Init+0x40>)
 8000c4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c54:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <HAL_Init+0x40>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a07      	ldr	r2, [pc, #28]	@ (8000c78 <HAL_Init+0x40>)
 8000c5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c60:	2003      	movs	r0, #3
 8000c62:	f000 f931 	bl	8000ec8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c66:	200f      	movs	r0, #15
 8000c68:	f000 f808 	bl	8000c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c6c:	f7ff fe44 	bl	80008f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40023c00 	.word	0x40023c00

08000c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c84:	4b12      	ldr	r3, [pc, #72]	@ (8000cd0 <HAL_InitTick+0x54>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b12      	ldr	r3, [pc, #72]	@ (8000cd4 <HAL_InitTick+0x58>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 f93b 	bl	8000f16 <HAL_SYSTICK_Config>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e00e      	b.n	8000cc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2b0f      	cmp	r3, #15
 8000cae:	d80a      	bhi.n	8000cc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb8:	f000 f911 	bl	8000ede <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cbc:	4a06      	ldr	r2, [pc, #24]	@ (8000cd8 <HAL_InitTick+0x5c>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e000      	b.n	8000cc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	20000008 	.word	0x20000008
 8000cd8:	20000004 	.word	0x20000004

08000cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <HAL_IncTick+0x20>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <HAL_IncTick+0x24>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a04      	ldr	r2, [pc, #16]	@ (8000d00 <HAL_IncTick+0x24>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	20000568 	.word	0x20000568

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b03      	ldr	r3, [pc, #12]	@ (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000568 	.word	0x20000568

08000d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d24:	f7ff ffee 	bl	8000d04 <HAL_GetTick>
 8000d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d34:	d005      	beq.n	8000d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d36:	4b0a      	ldr	r3, [pc, #40]	@ (8000d60 <HAL_Delay+0x44>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4413      	add	r3, r2
 8000d40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d42:	bf00      	nop
 8000d44:	f7ff ffde 	bl	8000d04 <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d8f7      	bhi.n	8000d44 <HAL_Delay+0x28>
  {
  }
}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000008 	.word	0x20000008

08000d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d74:	4b0c      	ldr	r3, [pc, #48]	@ (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d80:	4013      	ands	r3, r2
 8000d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d96:	4a04      	ldr	r2, [pc, #16]	@ (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	60d3      	str	r3, [r2, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db0:	4b04      	ldr	r3, [pc, #16]	@ (8000dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	f003 0307 	and.w	r3, r3, #7
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	6039      	str	r1, [r7, #0]
 8000dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	db0a      	blt.n	8000df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	490c      	ldr	r1, [pc, #48]	@ (8000e14 <__NVIC_SetPriority+0x4c>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	0112      	lsls	r2, r2, #4
 8000de8:	b2d2      	uxtb	r2, r2
 8000dea:	440b      	add	r3, r1
 8000dec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df0:	e00a      	b.n	8000e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	4908      	ldr	r1, [pc, #32]	@ (8000e18 <__NVIC_SetPriority+0x50>)
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	f003 030f 	and.w	r3, r3, #15
 8000dfe:	3b04      	subs	r3, #4
 8000e00:	0112      	lsls	r2, r2, #4
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	440b      	add	r3, r1
 8000e06:	761a      	strb	r2, [r3, #24]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000e100 	.word	0xe000e100
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b089      	sub	sp, #36	@ 0x24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	f1c3 0307 	rsb	r3, r3, #7
 8000e36:	2b04      	cmp	r3, #4
 8000e38:	bf28      	it	cs
 8000e3a:	2304      	movcs	r3, #4
 8000e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3304      	adds	r3, #4
 8000e42:	2b06      	cmp	r3, #6
 8000e44:	d902      	bls.n	8000e4c <NVIC_EncodePriority+0x30>
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3b03      	subs	r3, #3
 8000e4a:	e000      	b.n	8000e4e <NVIC_EncodePriority+0x32>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	f04f 32ff 	mov.w	r2, #4294967295
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43da      	mvns	r2, r3
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	401a      	ands	r2, r3
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e64:	f04f 31ff 	mov.w	r1, #4294967295
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6e:	43d9      	mvns	r1, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	4313      	orrs	r3, r2
         );
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3724      	adds	r7, #36	@ 0x24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
	...

08000e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e94:	d301      	bcc.n	8000e9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e96:	2301      	movs	r3, #1
 8000e98:	e00f      	b.n	8000eba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec4 <SysTick_Config+0x40>)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ea2:	210f      	movs	r1, #15
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea8:	f7ff ff8e 	bl	8000dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eac:	4b05      	ldr	r3, [pc, #20]	@ (8000ec4 <SysTick_Config+0x40>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eb2:	4b04      	ldr	r3, [pc, #16]	@ (8000ec4 <SysTick_Config+0x40>)
 8000eb4:	2207      	movs	r2, #7
 8000eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	e000e010 	.word	0xe000e010

08000ec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff ff47 	bl	8000d64 <__NVIC_SetPriorityGrouping>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b086      	sub	sp, #24
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	60b9      	str	r1, [r7, #8]
 8000ee8:	607a      	str	r2, [r7, #4]
 8000eea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef0:	f7ff ff5c 	bl	8000dac <__NVIC_GetPriorityGrouping>
 8000ef4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	68b9      	ldr	r1, [r7, #8]
 8000efa:	6978      	ldr	r0, [r7, #20]
 8000efc:	f7ff ff8e 	bl	8000e1c <NVIC_EncodePriority>
 8000f00:	4602      	mov	r2, r0
 8000f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f06:	4611      	mov	r1, r2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ff5d 	bl	8000dc8 <__NVIC_SetPriority>
}
 8000f0e:	bf00      	nop
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff ffb0 	bl	8000e84 <SysTick_Config>
 8000f24:	4603      	mov	r3, r0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b089      	sub	sp, #36	@ 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
 8000f4a:	e165      	b.n	8001218 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	f040 8154 	bne.w	8001212 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d005      	beq.n	8000f82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d130      	bne.n	8000fe4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	68da      	ldr	r2, [r3, #12]
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fb8:	2201      	movs	r2, #1
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	091b      	lsrs	r3, r3, #4
 8000fce:	f003 0201 	and.w	r2, r3, #1
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 0303 	and.w	r3, r3, #3
 8000fec:	2b03      	cmp	r3, #3
 8000fee:	d017      	beq.n	8001020 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	689a      	ldr	r2, [r3, #8]
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 0303 	and.w	r3, r3, #3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d123      	bne.n	8001074 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	08da      	lsrs	r2, r3, #3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3208      	adds	r2, #8
 8001034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001038:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	f003 0307 	and.w	r3, r3, #7
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	220f      	movs	r2, #15
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	691a      	ldr	r2, [r3, #16]
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	08da      	lsrs	r2, r3, #3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3208      	adds	r2, #8
 800106e:	69b9      	ldr	r1, [r7, #24]
 8001070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	2203      	movs	r2, #3
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0203 	and.w	r2, r3, #3
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f000 80ae 	beq.w	8001212 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001230 <HAL_GPIO_Init+0x300>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010be:	4a5c      	ldr	r2, [pc, #368]	@ (8001230 <HAL_GPIO_Init+0x300>)
 80010c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010c6:	4b5a      	ldr	r3, [pc, #360]	@ (8001230 <HAL_GPIO_Init+0x300>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010d2:	4a58      	ldr	r2, [pc, #352]	@ (8001234 <HAL_GPIO_Init+0x304>)
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	089b      	lsrs	r3, r3, #2
 80010d8:	3302      	adds	r3, #2
 80010da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f003 0303 	and.w	r3, r3, #3
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	220f      	movs	r2, #15
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4f      	ldr	r2, [pc, #316]	@ (8001238 <HAL_GPIO_Init+0x308>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d025      	beq.n	800114a <HAL_GPIO_Init+0x21a>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4e      	ldr	r2, [pc, #312]	@ (800123c <HAL_GPIO_Init+0x30c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d01f      	beq.n	8001146 <HAL_GPIO_Init+0x216>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a4d      	ldr	r2, [pc, #308]	@ (8001240 <HAL_GPIO_Init+0x310>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d019      	beq.n	8001142 <HAL_GPIO_Init+0x212>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a4c      	ldr	r2, [pc, #304]	@ (8001244 <HAL_GPIO_Init+0x314>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d013      	beq.n	800113e <HAL_GPIO_Init+0x20e>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a4b      	ldr	r2, [pc, #300]	@ (8001248 <HAL_GPIO_Init+0x318>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d00d      	beq.n	800113a <HAL_GPIO_Init+0x20a>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a4a      	ldr	r2, [pc, #296]	@ (800124c <HAL_GPIO_Init+0x31c>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d007      	beq.n	8001136 <HAL_GPIO_Init+0x206>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a49      	ldr	r2, [pc, #292]	@ (8001250 <HAL_GPIO_Init+0x320>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d101      	bne.n	8001132 <HAL_GPIO_Init+0x202>
 800112e:	2306      	movs	r3, #6
 8001130:	e00c      	b.n	800114c <HAL_GPIO_Init+0x21c>
 8001132:	2307      	movs	r3, #7
 8001134:	e00a      	b.n	800114c <HAL_GPIO_Init+0x21c>
 8001136:	2305      	movs	r3, #5
 8001138:	e008      	b.n	800114c <HAL_GPIO_Init+0x21c>
 800113a:	2304      	movs	r3, #4
 800113c:	e006      	b.n	800114c <HAL_GPIO_Init+0x21c>
 800113e:	2303      	movs	r3, #3
 8001140:	e004      	b.n	800114c <HAL_GPIO_Init+0x21c>
 8001142:	2302      	movs	r3, #2
 8001144:	e002      	b.n	800114c <HAL_GPIO_Init+0x21c>
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <HAL_GPIO_Init+0x21c>
 800114a:	2300      	movs	r3, #0
 800114c:	69fa      	ldr	r2, [r7, #28]
 800114e:	f002 0203 	and.w	r2, r2, #3
 8001152:	0092      	lsls	r2, r2, #2
 8001154:	4093      	lsls	r3, r2
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4313      	orrs	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800115c:	4935      	ldr	r1, [pc, #212]	@ (8001234 <HAL_GPIO_Init+0x304>)
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	089b      	lsrs	r3, r3, #2
 8001162:	3302      	adds	r3, #2
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800116a:	4b3a      	ldr	r3, [pc, #232]	@ (8001254 <HAL_GPIO_Init+0x324>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800118e:	4a31      	ldr	r2, [pc, #196]	@ (8001254 <HAL_GPIO_Init+0x324>)
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001194:	4b2f      	ldr	r3, [pc, #188]	@ (8001254 <HAL_GPIO_Init+0x324>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d003      	beq.n	80011b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011b8:	4a26      	ldr	r2, [pc, #152]	@ (8001254 <HAL_GPIO_Init+0x324>)
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011be:	4b25      	ldr	r3, [pc, #148]	@ (8001254 <HAL_GPIO_Init+0x324>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	43db      	mvns	r3, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4013      	ands	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001254 <HAL_GPIO_Init+0x324>)
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001254 <HAL_GPIO_Init+0x324>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800120c:	4a11      	ldr	r2, [pc, #68]	@ (8001254 <HAL_GPIO_Init+0x324>)
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3301      	adds	r3, #1
 8001216:	61fb      	str	r3, [r7, #28]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	2b0f      	cmp	r3, #15
 800121c:	f67f ae96 	bls.w	8000f4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001220:	bf00      	nop
 8001222:	bf00      	nop
 8001224:	3724      	adds	r7, #36	@ 0x24
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	40023800 	.word	0x40023800
 8001234:	40013800 	.word	0x40013800
 8001238:	40020000 	.word	0x40020000
 800123c:	40020400 	.word	0x40020400
 8001240:	40020800 	.word	0x40020800
 8001244:	40020c00 	.word	0x40020c00
 8001248:	40021000 	.word	0x40021000
 800124c:	40021400 	.word	0x40021400
 8001250:	40021800 	.word	0x40021800
 8001254:	40013c00 	.word	0x40013c00

08001258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	807b      	strh	r3, [r7, #2]
 8001264:	4613      	mov	r3, r2
 8001266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001268:	787b      	ldrb	r3, [r7, #1]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800126e:	887a      	ldrh	r2, [r7, #2]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001274:	e003      	b.n	800127e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001276:	887b      	ldrh	r3, [r7, #2]
 8001278:	041a      	lsls	r2, r3, #16
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	619a      	str	r2, [r3, #24]
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b086      	sub	sp, #24
 800128e:	af02      	add	r7, sp, #8
 8001290:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d101      	bne.n	800129c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e108      	b.n	80014ae <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d106      	bne.n	80012bc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff fc24 	bl	8000b04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2203      	movs	r2, #3
 80012c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012ca:	d102      	bne.n	80012d2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f001 fe94 	bl	8003004 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6818      	ldr	r0, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	7c1a      	ldrb	r2, [r3, #16]
 80012e4:	f88d 2000 	strb.w	r2, [sp]
 80012e8:	3304      	adds	r3, #4
 80012ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012ec:	f001 fe26 	bl	8002f3c <USB_CoreInit>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d005      	beq.n	8001302 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2202      	movs	r2, #2
 80012fa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e0d5      	b.n	80014ae <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2100      	movs	r1, #0
 8001308:	4618      	mov	r0, r3
 800130a:	f001 fe8c 	bl	8003026 <USB_SetCurrentMode>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d005      	beq.n	8001320 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2202      	movs	r2, #2
 8001318:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e0c6      	b.n	80014ae <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001320:	2300      	movs	r3, #0
 8001322:	73fb      	strb	r3, [r7, #15]
 8001324:	e04a      	b.n	80013bc <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001326:	7bfa      	ldrb	r2, [r7, #15]
 8001328:	6879      	ldr	r1, [r7, #4]
 800132a:	4613      	mov	r3, r2
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	4413      	add	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	440b      	add	r3, r1
 8001334:	3315      	adds	r3, #21
 8001336:	2201      	movs	r2, #1
 8001338:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800133a:	7bfa      	ldrb	r2, [r7, #15]
 800133c:	6879      	ldr	r1, [r7, #4]
 800133e:	4613      	mov	r3, r2
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	4413      	add	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	440b      	add	r3, r1
 8001348:	3314      	adds	r3, #20
 800134a:	7bfa      	ldrb	r2, [r7, #15]
 800134c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800134e:	7bfa      	ldrb	r2, [r7, #15]
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	b298      	uxth	r0, r3
 8001354:	6879      	ldr	r1, [r7, #4]
 8001356:	4613      	mov	r3, r2
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	4413      	add	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	440b      	add	r3, r1
 8001360:	332e      	adds	r3, #46	@ 0x2e
 8001362:	4602      	mov	r2, r0
 8001364:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001366:	7bfa      	ldrb	r2, [r7, #15]
 8001368:	6879      	ldr	r1, [r7, #4]
 800136a:	4613      	mov	r3, r2
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	4413      	add	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	440b      	add	r3, r1
 8001374:	3318      	adds	r3, #24
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800137a:	7bfa      	ldrb	r2, [r7, #15]
 800137c:	6879      	ldr	r1, [r7, #4]
 800137e:	4613      	mov	r3, r2
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	4413      	add	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	440b      	add	r3, r1
 8001388:	331c      	adds	r3, #28
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800138e:	7bfa      	ldrb	r2, [r7, #15]
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	4613      	mov	r3, r2
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	4413      	add	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	440b      	add	r3, r1
 800139c:	3320      	adds	r3, #32
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013a2:	7bfa      	ldrb	r2, [r7, #15]
 80013a4:	6879      	ldr	r1, [r7, #4]
 80013a6:	4613      	mov	r3, r2
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	4413      	add	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	440b      	add	r3, r1
 80013b0:	3324      	adds	r3, #36	@ 0x24
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	3301      	adds	r3, #1
 80013ba:	73fb      	strb	r3, [r7, #15]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	791b      	ldrb	r3, [r3, #4]
 80013c0:	7bfa      	ldrb	r2, [r7, #15]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d3af      	bcc.n	8001326 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013c6:	2300      	movs	r3, #0
 80013c8:	73fb      	strb	r3, [r7, #15]
 80013ca:	e044      	b.n	8001456 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013cc:	7bfa      	ldrb	r2, [r7, #15]
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	4413      	add	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	440b      	add	r3, r1
 80013da:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80013e2:	7bfa      	ldrb	r2, [r7, #15]
 80013e4:	6879      	ldr	r1, [r7, #4]
 80013e6:	4613      	mov	r3, r2
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	4413      	add	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	440b      	add	r3, r1
 80013f0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80013f4:	7bfa      	ldrb	r2, [r7, #15]
 80013f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013f8:	7bfa      	ldrb	r2, [r7, #15]
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	4613      	mov	r3, r2
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	4413      	add	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	440b      	add	r3, r1
 8001406:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800140e:	7bfa      	ldrb	r2, [r7, #15]
 8001410:	6879      	ldr	r1, [r7, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	4413      	add	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	440b      	add	r3, r1
 800141c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001424:	7bfa      	ldrb	r2, [r7, #15]
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	4613      	mov	r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	4413      	add	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	440b      	add	r3, r1
 8001432:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800143a:	7bfa      	ldrb	r2, [r7, #15]
 800143c:	6879      	ldr	r1, [r7, #4]
 800143e:	4613      	mov	r3, r2
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	4413      	add	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	440b      	add	r3, r1
 8001448:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	3301      	adds	r3, #1
 8001454:	73fb      	strb	r3, [r7, #15]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	791b      	ldrb	r3, [r3, #4]
 800145a:	7bfa      	ldrb	r2, [r7, #15]
 800145c:	429a      	cmp	r2, r3
 800145e:	d3b5      	bcc.n	80013cc <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6818      	ldr	r0, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	7c1a      	ldrb	r2, [r3, #16]
 8001468:	f88d 2000 	strb.w	r2, [sp]
 800146c:	3304      	adds	r3, #4
 800146e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001470:	f001 fe26 	bl	80030c0 <USB_DevInit>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d005      	beq.n	8001486 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2202      	movs	r2, #2
 800147e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e013      	b.n	80014ae <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	7b1b      	ldrb	r3, [r3, #12]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d102      	bne.n	80014a2 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 f80a 	bl	80014b6 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f001 ffe1 	bl	800346e <USB_DevDisconnect>

  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b085      	sub	sp, #20
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014e8:	f043 0303 	orr.w	r3, r3, #3
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
	...

08001500 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d101      	bne.n	8001514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e0cc      	b.n	80016ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001514:	4b68      	ldr	r3, [pc, #416]	@ (80016b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 030f 	and.w	r3, r3, #15
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	429a      	cmp	r2, r3
 8001520:	d90c      	bls.n	800153c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001522:	4b65      	ldr	r3, [pc, #404]	@ (80016b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800152a:	4b63      	ldr	r3, [pc, #396]	@ (80016b8 <HAL_RCC_ClockConfig+0x1b8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	d001      	beq.n	800153c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e0b8      	b.n	80016ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d020      	beq.n	800158a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b00      	cmp	r3, #0
 8001552:	d005      	beq.n	8001560 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001554:	4b59      	ldr	r3, [pc, #356]	@ (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	4a58      	ldr	r2, [pc, #352]	@ (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 800155a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800155e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0308 	and.w	r3, r3, #8
 8001568:	2b00      	cmp	r3, #0
 800156a:	d005      	beq.n	8001578 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800156c:	4b53      	ldr	r3, [pc, #332]	@ (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	4a52      	ldr	r2, [pc, #328]	@ (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 8001572:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001576:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001578:	4b50      	ldr	r3, [pc, #320]	@ (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	494d      	ldr	r1, [pc, #308]	@ (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 8001586:	4313      	orrs	r3, r2
 8001588:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b00      	cmp	r3, #0
 8001594:	d044      	beq.n	8001620 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d107      	bne.n	80015ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159e:	4b47      	ldr	r3, [pc, #284]	@ (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d119      	bne.n	80015de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e07f      	b.n	80016ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d003      	beq.n	80015be <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ba:	2b03      	cmp	r3, #3
 80015bc:	d107      	bne.n	80015ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015be:	4b3f      	ldr	r3, [pc, #252]	@ (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d109      	bne.n	80015de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e06f      	b.n	80016ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ce:	4b3b      	ldr	r3, [pc, #236]	@ (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e067      	b.n	80016ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015de:	4b37      	ldr	r3, [pc, #220]	@ (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f023 0203 	bic.w	r2, r3, #3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	4934      	ldr	r1, [pc, #208]	@ (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015f0:	f7ff fb88 	bl	8000d04 <HAL_GetTick>
 80015f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015f6:	e00a      	b.n	800160e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f8:	f7ff fb84 	bl	8000d04 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001606:	4293      	cmp	r3, r2
 8001608:	d901      	bls.n	800160e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e04f      	b.n	80016ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800160e:	4b2b      	ldr	r3, [pc, #172]	@ (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 020c 	and.w	r2, r3, #12
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	429a      	cmp	r2, r3
 800161e:	d1eb      	bne.n	80015f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001620:	4b25      	ldr	r3, [pc, #148]	@ (80016b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 030f 	and.w	r3, r3, #15
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	429a      	cmp	r2, r3
 800162c:	d20c      	bcs.n	8001648 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800162e:	4b22      	ldr	r3, [pc, #136]	@ (80016b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001636:	4b20      	ldr	r3, [pc, #128]	@ (80016b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	429a      	cmp	r2, r3
 8001642:	d001      	beq.n	8001648 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e032      	b.n	80016ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	2b00      	cmp	r3, #0
 8001652:	d008      	beq.n	8001666 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001654:	4b19      	ldr	r3, [pc, #100]	@ (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	4916      	ldr	r1, [pc, #88]	@ (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 8001662:	4313      	orrs	r3, r2
 8001664:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	2b00      	cmp	r3, #0
 8001670:	d009      	beq.n	8001686 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001672:	4b12      	ldr	r3, [pc, #72]	@ (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	490e      	ldr	r1, [pc, #56]	@ (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	4313      	orrs	r3, r2
 8001684:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001686:	f000 fb7f 	bl	8001d88 <HAL_RCC_GetSysClockFreq>
 800168a:	4602      	mov	r2, r0
 800168c:	4b0b      	ldr	r3, [pc, #44]	@ (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	091b      	lsrs	r3, r3, #4
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	490a      	ldr	r1, [pc, #40]	@ (80016c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001698:	5ccb      	ldrb	r3, [r1, r3]
 800169a:	fa22 f303 	lsr.w	r3, r2, r3
 800169e:	4a09      	ldr	r2, [pc, #36]	@ (80016c4 <HAL_RCC_ClockConfig+0x1c4>)
 80016a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80016a2:	4b09      	ldr	r3, [pc, #36]	@ (80016c8 <HAL_RCC_ClockConfig+0x1c8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fae8 	bl	8000c7c <HAL_InitTick>

  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40023c00 	.word	0x40023c00
 80016bc:	40023800 	.word	0x40023800
 80016c0:	08006ab4 	.word	0x08006ab4
 80016c4:	20000000 	.word	0x20000000
 80016c8:	20000004 	.word	0x20000004

080016cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016d0:	4b03      	ldr	r3, [pc, #12]	@ (80016e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80016d2:	681b      	ldr	r3, [r3, #0]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	20000000 	.word	0x20000000

080016e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016e8:	f7ff fff0 	bl	80016cc <HAL_RCC_GetHCLKFreq>
 80016ec:	4602      	mov	r2, r0
 80016ee:	4b05      	ldr	r3, [pc, #20]	@ (8001704 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	0a9b      	lsrs	r3, r3, #10
 80016f4:	f003 0307 	and.w	r3, r3, #7
 80016f8:	4903      	ldr	r1, [pc, #12]	@ (8001708 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016fa:	5ccb      	ldrb	r3, [r1, r3]
 80016fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001700:	4618      	mov	r0, r3
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40023800 	.word	0x40023800
 8001708:	08006ac4 	.word	0x08006ac4

0800170c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001710:	f7ff ffdc 	bl	80016cc <HAL_RCC_GetHCLKFreq>
 8001714:	4602      	mov	r2, r0
 8001716:	4b05      	ldr	r3, [pc, #20]	@ (800172c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	0b5b      	lsrs	r3, r3, #13
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	4903      	ldr	r1, [pc, #12]	@ (8001730 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001722:	5ccb      	ldrb	r3, [r1, r3]
 8001724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001728:	4618      	mov	r0, r3
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40023800 	.word	0x40023800
 8001730:	08006ac4 	.word	0x08006ac4

08001734 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08c      	sub	sp, #48	@ 0x30
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8001740:	2300      	movs	r3, #0
 8001742:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001744:	2300      	movs	r3, #0
 8001746:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001754:	2300      	movs	r3, #0
 8001756:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001758:	2300      	movs	r3, #0
 800175a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 800175c:	2300      	movs	r3, #0
 800175e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	2b00      	cmp	r3, #0
 800176a:	d010      	beq.n	800178e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800176c:	4b6f      	ldr	r3, [pc, #444]	@ (800192c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800176e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001772:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800177a:	496c      	ldr	r1, [pc, #432]	@ (800192c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800177c:	4313      	orrs	r3, r2
 800177e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800178a:	2301      	movs	r3, #1
 800178c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d010      	beq.n	80017bc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800179a:	4b64      	ldr	r3, [pc, #400]	@ (800192c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800179c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017a0:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017a8:	4960      	ldr	r1, [pc, #384]	@ (800192c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80017b8:	2301      	movs	r3, #1
 80017ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d017      	beq.n	80017f8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80017c8:	4b58      	ldr	r3, [pc, #352]	@ (800192c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	4955      	ldr	r1, [pc, #340]	@ (800192c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80017e6:	d101      	bne.n	80017ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80017e8:	2301      	movs	r3, #1
 80017ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d101      	bne.n	80017f8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80017f4:	2301      	movs	r3, #1
 80017f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b00      	cmp	r3, #0
 8001802:	d017      	beq.n	8001834 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001804:	4b49      	ldr	r3, [pc, #292]	@ (800192c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001806:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800180a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001812:	4946      	ldr	r1, [pc, #280]	@ (800192c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001814:	4313      	orrs	r3, r2
 8001816:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800181e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001822:	d101      	bne.n	8001828 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001824:	2301      	movs	r3, #1
 8001826:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001830:	2301      	movs	r3, #1
 8001832:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0320 	and.w	r3, r3, #32
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 808a 	beq.w	8001956 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	4b39      	ldr	r3, [pc, #228]	@ (800192c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184a:	4a38      	ldr	r2, [pc, #224]	@ (800192c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800184c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001850:	6413      	str	r3, [r2, #64]	@ 0x40
 8001852:	4b36      	ldr	r3, [pc, #216]	@ (800192c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800185e:	4b34      	ldr	r3, [pc, #208]	@ (8001930 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a33      	ldr	r2, [pc, #204]	@ (8001930 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001864:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001868:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800186a:	f7ff fa4b 	bl	8000d04 <HAL_GetTick>
 800186e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001870:	e008      	b.n	8001884 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001872:	f7ff fa47 	bl	8000d04 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e278      	b.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001884:	4b2a      	ldr	r3, [pc, #168]	@ (8001930 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0f0      	beq.n	8001872 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001890:	4b26      	ldr	r3, [pc, #152]	@ (800192c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001894:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001898:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800189a:	6a3b      	ldr	r3, [r7, #32]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d02f      	beq.n	8001900 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80018a8:	6a3a      	ldr	r2, [r7, #32]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d028      	beq.n	8001900 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018ae:	4b1f      	ldr	r3, [pc, #124]	@ (800192c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80018b6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80018b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001934 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80018be:	4b1d      	ldr	r3, [pc, #116]	@ (8001934 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80018c4:	4a19      	ldr	r2, [pc, #100]	@ (800192c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018c6:	6a3b      	ldr	r3, [r7, #32]
 80018c8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80018ca:	4b18      	ldr	r3, [pc, #96]	@ (800192c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d114      	bne.n	8001900 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80018d6:	f7ff fa15 	bl	8000d04 <HAL_GetTick>
 80018da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018dc:	e00a      	b.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018de:	f7ff fa11 	bl	8000d04 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e240      	b.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f4:	4b0d      	ldr	r3, [pc, #52]	@ (800192c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0ee      	beq.n	80018de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001904:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001908:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800190c:	d114      	bne.n	8001938 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800190e:	4b07      	ldr	r3, [pc, #28]	@ (800192c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800191e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001922:	4902      	ldr	r1, [pc, #8]	@ (800192c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001924:	4313      	orrs	r3, r2
 8001926:	608b      	str	r3, [r1, #8]
 8001928:	e00c      	b.n	8001944 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800192a:	bf00      	nop
 800192c:	40023800 	.word	0x40023800
 8001930:	40007000 	.word	0x40007000
 8001934:	42470e40 	.word	0x42470e40
 8001938:	4b4a      	ldr	r3, [pc, #296]	@ (8001a64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	4a49      	ldr	r2, [pc, #292]	@ (8001a64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800193e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001942:	6093      	str	r3, [r2, #8]
 8001944:	4b47      	ldr	r3, [pc, #284]	@ (8001a64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001946:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001950:	4944      	ldr	r1, [pc, #272]	@ (8001a64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001952:	4313      	orrs	r3, r2
 8001954:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0310 	and.w	r3, r3, #16
 800195e:	2b00      	cmp	r3, #0
 8001960:	d004      	beq.n	800196c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8001968:	4b3f      	ldr	r3, [pc, #252]	@ (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800196a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00a      	beq.n	800198e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001978:	4b3a      	ldr	r3, [pc, #232]	@ (8001a64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800197a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800197e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001986:	4937      	ldr	r1, [pc, #220]	@ (8001a64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001988:	4313      	orrs	r3, r2
 800198a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00a      	beq.n	80019b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800199a:	4b32      	ldr	r3, [pc, #200]	@ (8001a64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800199c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019a0:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019a8:	492e      	ldr	r1, [pc, #184]	@ (8001a64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d011      	beq.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80019bc:	4b29      	ldr	r3, [pc, #164]	@ (8001a64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019c2:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ca:	4926      	ldr	r1, [pc, #152]	@ (8001a64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80019da:	d101      	bne.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80019dc:	2301      	movs	r3, #1
 80019de:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d00a      	beq.n	8001a02 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80019ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001a64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019f2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019fa:	491a      	ldr	r1, [pc, #104]	@ (8001a64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d011      	beq.n	8001a32 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001a0e:	4b15      	ldr	r3, [pc, #84]	@ (8001a64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a14:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a1c:	4911      	ldr	r1, [pc, #68]	@ (8001a64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a2c:	d101      	bne.n	8001a32 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d005      	beq.n	8001a44 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001a40:	f040 80ff 	bne.w	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001a44:	4b09      	ldr	r3, [pc, #36]	@ (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001a4a:	f7ff f95b 	bl	8000d04 <HAL_GetTick>
 8001a4e:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001a50:	e00e      	b.n	8001a70 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001a52:	f7ff f957 	bl	8000d04 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d907      	bls.n	8001a70 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e188      	b.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001a64:	40023800 	.word	0x40023800
 8001a68:	424711e0 	.word	0x424711e0
 8001a6c:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001a70:	4b7e      	ldr	r3, [pc, #504]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1ea      	bne.n	8001a52 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d009      	beq.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d028      	beq.n	8001aee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d124      	bne.n	8001aee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001aa4:	4b71      	ldr	r3, [pc, #452]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001aaa:	0c1b      	lsrs	r3, r3, #16
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001ab6:	4b6d      	ldr	r3, [pc, #436]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001abc:	0e1b      	lsrs	r3, r3, #24
 8001abe:	f003 030f 	and.w	r3, r3, #15
 8001ac2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	019b      	lsls	r3, r3, #6
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	085b      	lsrs	r3, r3, #1
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	041b      	lsls	r3, r3, #16
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	061b      	lsls	r3, r3, #24
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	071b      	lsls	r3, r3, #28
 8001ae6:	4961      	ldr	r1, [pc, #388]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d004      	beq.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001b02:	d00a      	beq.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d035      	beq.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b18:	d130      	bne.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001b1a:	4b54      	ldr	r3, [pc, #336]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b20:	0c1b      	lsrs	r3, r3, #16
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	3301      	adds	r3, #1
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001b2c:	4b4f      	ldr	r3, [pc, #316]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b32:	0f1b      	lsrs	r3, r3, #28
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685a      	ldr	r2, [r3, #4]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	019b      	lsls	r3, r3, #6
 8001b44:	431a      	orrs	r2, r3
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	085b      	lsrs	r3, r3, #1
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	041b      	lsls	r3, r3, #16
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	061b      	lsls	r3, r3, #24
 8001b56:	431a      	orrs	r2, r3
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	071b      	lsls	r3, r3, #28
 8001b5c:	4943      	ldr	r1, [pc, #268]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001b64:	4b41      	ldr	r3, [pc, #260]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b6a:	f023 021f 	bic.w	r2, r3, #31
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b72:	3b01      	subs	r3, #1
 8001b74:	493d      	ldr	r1, [pc, #244]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d029      	beq.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b90:	d124      	bne.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001b92:	4b36      	ldr	r3, [pc, #216]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b98:	0c1b      	lsrs	r3, r3, #16
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001ba4:	4b31      	ldr	r3, [pc, #196]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ba6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001baa:	0f1b      	lsrs	r3, r3, #28
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	019b      	lsls	r3, r3, #6
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	085b      	lsrs	r3, r3, #1
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	041b      	lsls	r3, r3, #16
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	061b      	lsls	r3, r3, #24
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	071b      	lsls	r3, r3, #28
 8001bd4:	4925      	ldr	r1, [pc, #148]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d016      	beq.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	019b      	lsls	r3, r3, #6
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	085b      	lsrs	r3, r3, #1
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	041b      	lsls	r3, r3, #16
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	061b      	lsls	r3, r3, #24
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	071b      	lsls	r3, r3, #28
 8001c0e:	4917      	ldr	r1, [pc, #92]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001c16:	4b16      	ldr	r3, [pc, #88]	@ (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c1c:	f7ff f872 	bl	8000d04 <HAL_GetTick>
 8001c20:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001c24:	f7ff f86e 	bl	8000d04 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e09f      	b.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c36:	4b0d      	ldr	r3, [pc, #52]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0f0      	beq.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8001c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	f040 8095 	bne.w	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c50:	f7ff f858 	bl	8000d04 <HAL_GetTick>
 8001c54:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001c56:	e00f      	b.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001c58:	f7ff f854 	bl	8000d04 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d908      	bls.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e085      	b.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001c6a:	bf00      	nop
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	42470068 	.word	0x42470068
 8001c74:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001c78:	4b41      	ldr	r3, [pc, #260]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c84:	d0e8      	beq.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d009      	beq.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d02b      	beq.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d127      	bne.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001cae:	4b34      	ldr	r3, [pc, #208]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cb4:	0c1b      	lsrs	r3, r3, #16
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	3301      	adds	r3, #1
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	699a      	ldr	r2, [r3, #24]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69db      	ldr	r3, [r3, #28]
 8001cc8:	019b      	lsls	r3, r3, #6
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	085b      	lsrs	r3, r3, #1
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	041b      	lsls	r3, r3, #16
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cda:	061b      	lsls	r3, r3, #24
 8001cdc:	4928      	ldr	r1, [pc, #160]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001ce4:	4b26      	ldr	r3, [pc, #152]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ce6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cea:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	021b      	lsls	r3, r3, #8
 8001cf6:	4922      	ldr	r1, [pc, #136]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d01d      	beq.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001d12:	d118      	bne.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001d14:	4b1a      	ldr	r3, [pc, #104]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d1a:	0e1b      	lsrs	r3, r3, #24
 8001d1c:	f003 030f 	and.w	r3, r3, #15
 8001d20:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699a      	ldr	r2, [r3, #24]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	019b      	lsls	r3, r3, #6
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	085b      	lsrs	r3, r3, #1
 8001d34:	3b01      	subs	r3, #1
 8001d36:	041b      	lsls	r3, r3, #16
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	061b      	lsls	r3, r3, #24
 8001d3e:	4910      	ldr	r1, [pc, #64]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001d46:	4b0f      	ldr	r3, [pc, #60]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d4c:	f7fe ffda 	bl	8000d04 <HAL_GetTick>
 8001d50:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001d52:	e008      	b.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001d54:	f7fe ffd6 	bl	8000d04 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e007      	b.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001d66:	4b06      	ldr	r3, [pc, #24]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d72:	d1ef      	bne.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3730      	adds	r7, #48	@ 0x30
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40023800 	.word	0x40023800
 8001d84:	42470070 	.word	0x42470070

08001d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d8c:	b0ae      	sub	sp, #184	@ 0xb8
 8001d8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dae:	4bcb      	ldr	r3, [pc, #812]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 030c 	and.w	r3, r3, #12
 8001db6:	2b0c      	cmp	r3, #12
 8001db8:	f200 8206 	bhi.w	80021c8 <HAL_RCC_GetSysClockFreq+0x440>
 8001dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8001dc4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc2:	bf00      	nop
 8001dc4:	08001df9 	.word	0x08001df9
 8001dc8:	080021c9 	.word	0x080021c9
 8001dcc:	080021c9 	.word	0x080021c9
 8001dd0:	080021c9 	.word	0x080021c9
 8001dd4:	08001e01 	.word	0x08001e01
 8001dd8:	080021c9 	.word	0x080021c9
 8001ddc:	080021c9 	.word	0x080021c9
 8001de0:	080021c9 	.word	0x080021c9
 8001de4:	08001e09 	.word	0x08001e09
 8001de8:	080021c9 	.word	0x080021c9
 8001dec:	080021c9 	.word	0x080021c9
 8001df0:	080021c9 	.word	0x080021c9
 8001df4:	08001ff9 	.word	0x08001ff9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001df8:	4bb9      	ldr	r3, [pc, #740]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001dfa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001dfe:	e1e7      	b.n	80021d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e00:	4bb8      	ldr	r3, [pc, #736]	@ (80020e4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001e02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001e06:	e1e3      	b.n	80021d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e08:	4bb4      	ldr	r3, [pc, #720]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e14:	4bb1      	ldr	r3, [pc, #708]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d071      	beq.n	8001f04 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e20:	4bae      	ldr	r3, [pc, #696]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	099b      	lsrs	r3, r3, #6
 8001e26:	2200      	movs	r2, #0
 8001e28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001e2c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001e30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e38:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001e42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001e46:	4622      	mov	r2, r4
 8001e48:	462b      	mov	r3, r5
 8001e4a:	f04f 0000 	mov.w	r0, #0
 8001e4e:	f04f 0100 	mov.w	r1, #0
 8001e52:	0159      	lsls	r1, r3, #5
 8001e54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e58:	0150      	lsls	r0, r2, #5
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4621      	mov	r1, r4
 8001e60:	1a51      	subs	r1, r2, r1
 8001e62:	6439      	str	r1, [r7, #64]	@ 0x40
 8001e64:	4629      	mov	r1, r5
 8001e66:	eb63 0301 	sbc.w	r3, r3, r1
 8001e6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	f04f 0300 	mov.w	r3, #0
 8001e74:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001e78:	4649      	mov	r1, r9
 8001e7a:	018b      	lsls	r3, r1, #6
 8001e7c:	4641      	mov	r1, r8
 8001e7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e82:	4641      	mov	r1, r8
 8001e84:	018a      	lsls	r2, r1, #6
 8001e86:	4641      	mov	r1, r8
 8001e88:	1a51      	subs	r1, r2, r1
 8001e8a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001e8c:	4649      	mov	r1, r9
 8001e8e:	eb63 0301 	sbc.w	r3, r3, r1
 8001e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e94:	f04f 0200 	mov.w	r2, #0
 8001e98:	f04f 0300 	mov.w	r3, #0
 8001e9c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001ea0:	4649      	mov	r1, r9
 8001ea2:	00cb      	lsls	r3, r1, #3
 8001ea4:	4641      	mov	r1, r8
 8001ea6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001eaa:	4641      	mov	r1, r8
 8001eac:	00ca      	lsls	r2, r1, #3
 8001eae:	4610      	mov	r0, r2
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4622      	mov	r2, r4
 8001eb6:	189b      	adds	r3, r3, r2
 8001eb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001eba:	462b      	mov	r3, r5
 8001ebc:	460a      	mov	r2, r1
 8001ebe:	eb42 0303 	adc.w	r3, r2, r3
 8001ec2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ec4:	f04f 0200 	mov.w	r2, #0
 8001ec8:	f04f 0300 	mov.w	r3, #0
 8001ecc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001ed0:	4629      	mov	r1, r5
 8001ed2:	024b      	lsls	r3, r1, #9
 8001ed4:	4621      	mov	r1, r4
 8001ed6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001eda:	4621      	mov	r1, r4
 8001edc:	024a      	lsls	r2, r1, #9
 8001ede:	4610      	mov	r0, r2
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001eec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001ef0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001ef4:	f7fe f994 	bl	8000220 <__aeabi_uldivmod>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	4613      	mov	r3, r2
 8001efe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001f02:	e067      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f04:	4b75      	ldr	r3, [pc, #468]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	099b      	lsrs	r3, r3, #6
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001f10:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001f14:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f1c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001f1e:	2300      	movs	r3, #0
 8001f20:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001f22:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001f26:	4622      	mov	r2, r4
 8001f28:	462b      	mov	r3, r5
 8001f2a:	f04f 0000 	mov.w	r0, #0
 8001f2e:	f04f 0100 	mov.w	r1, #0
 8001f32:	0159      	lsls	r1, r3, #5
 8001f34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f38:	0150      	lsls	r0, r2, #5
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4621      	mov	r1, r4
 8001f40:	1a51      	subs	r1, r2, r1
 8001f42:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001f44:	4629      	mov	r1, r5
 8001f46:	eb63 0301 	sbc.w	r3, r3, r1
 8001f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f4c:	f04f 0200 	mov.w	r2, #0
 8001f50:	f04f 0300 	mov.w	r3, #0
 8001f54:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001f58:	4649      	mov	r1, r9
 8001f5a:	018b      	lsls	r3, r1, #6
 8001f5c:	4641      	mov	r1, r8
 8001f5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f62:	4641      	mov	r1, r8
 8001f64:	018a      	lsls	r2, r1, #6
 8001f66:	4641      	mov	r1, r8
 8001f68:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f6c:	4649      	mov	r1, r9
 8001f6e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	f04f 0300 	mov.w	r3, #0
 8001f7a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f7e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001f82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f86:	4692      	mov	sl, r2
 8001f88:	469b      	mov	fp, r3
 8001f8a:	4623      	mov	r3, r4
 8001f8c:	eb1a 0303 	adds.w	r3, sl, r3
 8001f90:	623b      	str	r3, [r7, #32]
 8001f92:	462b      	mov	r3, r5
 8001f94:	eb4b 0303 	adc.w	r3, fp, r3
 8001f98:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f9a:	f04f 0200 	mov.w	r2, #0
 8001f9e:	f04f 0300 	mov.w	r3, #0
 8001fa2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001fa6:	4629      	mov	r1, r5
 8001fa8:	028b      	lsls	r3, r1, #10
 8001faa:	4621      	mov	r1, r4
 8001fac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fb0:	4621      	mov	r1, r4
 8001fb2:	028a      	lsls	r2, r1, #10
 8001fb4:	4610      	mov	r0, r2
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	673b      	str	r3, [r7, #112]	@ 0x70
 8001fc0:	677a      	str	r2, [r7, #116]	@ 0x74
 8001fc2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001fc6:	f7fe f92b 	bl	8000220 <__aeabi_uldivmod>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4613      	mov	r3, r2
 8001fd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001fd4:	4b41      	ldr	r3, [pc, #260]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	0c1b      	lsrs	r3, r3, #16
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	3301      	adds	r3, #1
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001fe6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001fea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001ff6:	e0eb      	b.n	80021d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ff8:	4b38      	ldr	r3, [pc, #224]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002000:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002004:	4b35      	ldr	r3, [pc, #212]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x354>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d06b      	beq.n	80020e8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002010:	4b32      	ldr	r3, [pc, #200]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x354>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	099b      	lsrs	r3, r3, #6
 8002016:	2200      	movs	r2, #0
 8002018:	66bb      	str	r3, [r7, #104]	@ 0x68
 800201a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800201c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800201e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002022:	663b      	str	r3, [r7, #96]	@ 0x60
 8002024:	2300      	movs	r3, #0
 8002026:	667b      	str	r3, [r7, #100]	@ 0x64
 8002028:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800202c:	4622      	mov	r2, r4
 800202e:	462b      	mov	r3, r5
 8002030:	f04f 0000 	mov.w	r0, #0
 8002034:	f04f 0100 	mov.w	r1, #0
 8002038:	0159      	lsls	r1, r3, #5
 800203a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800203e:	0150      	lsls	r0, r2, #5
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	4621      	mov	r1, r4
 8002046:	1a51      	subs	r1, r2, r1
 8002048:	61b9      	str	r1, [r7, #24]
 800204a:	4629      	mov	r1, r5
 800204c:	eb63 0301 	sbc.w	r3, r3, r1
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	f04f 0300 	mov.w	r3, #0
 800205a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800205e:	4659      	mov	r1, fp
 8002060:	018b      	lsls	r3, r1, #6
 8002062:	4651      	mov	r1, sl
 8002064:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002068:	4651      	mov	r1, sl
 800206a:	018a      	lsls	r2, r1, #6
 800206c:	4651      	mov	r1, sl
 800206e:	ebb2 0801 	subs.w	r8, r2, r1
 8002072:	4659      	mov	r1, fp
 8002074:	eb63 0901 	sbc.w	r9, r3, r1
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	f04f 0300 	mov.w	r3, #0
 8002080:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002084:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002088:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800208c:	4690      	mov	r8, r2
 800208e:	4699      	mov	r9, r3
 8002090:	4623      	mov	r3, r4
 8002092:	eb18 0303 	adds.w	r3, r8, r3
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	462b      	mov	r3, r5
 800209a:	eb49 0303 	adc.w	r3, r9, r3
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	f04f 0200 	mov.w	r2, #0
 80020a4:	f04f 0300 	mov.w	r3, #0
 80020a8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80020ac:	4629      	mov	r1, r5
 80020ae:	024b      	lsls	r3, r1, #9
 80020b0:	4621      	mov	r1, r4
 80020b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020b6:	4621      	mov	r1, r4
 80020b8:	024a      	lsls	r2, r1, #9
 80020ba:	4610      	mov	r0, r2
 80020bc:	4619      	mov	r1, r3
 80020be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020c2:	2200      	movs	r2, #0
 80020c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80020c6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80020c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80020cc:	f7fe f8a8 	bl	8000220 <__aeabi_uldivmod>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	4613      	mov	r3, r2
 80020d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80020da:	e065      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0x420>
 80020dc:	40023800 	.word	0x40023800
 80020e0:	00f42400 	.word	0x00f42400
 80020e4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020e8:	4b3d      	ldr	r3, [pc, #244]	@ (80021e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	099b      	lsrs	r3, r3, #6
 80020ee:	2200      	movs	r2, #0
 80020f0:	4618      	mov	r0, r3
 80020f2:	4611      	mov	r1, r2
 80020f4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80020f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80020fa:	2300      	movs	r3, #0
 80020fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80020fe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002102:	4642      	mov	r2, r8
 8002104:	464b      	mov	r3, r9
 8002106:	f04f 0000 	mov.w	r0, #0
 800210a:	f04f 0100 	mov.w	r1, #0
 800210e:	0159      	lsls	r1, r3, #5
 8002110:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002114:	0150      	lsls	r0, r2, #5
 8002116:	4602      	mov	r2, r0
 8002118:	460b      	mov	r3, r1
 800211a:	4641      	mov	r1, r8
 800211c:	1a51      	subs	r1, r2, r1
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	4649      	mov	r1, r9
 8002122:	eb63 0301 	sbc.w	r3, r3, r1
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	f04f 0300 	mov.w	r3, #0
 8002130:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002134:	4659      	mov	r1, fp
 8002136:	018b      	lsls	r3, r1, #6
 8002138:	4651      	mov	r1, sl
 800213a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800213e:	4651      	mov	r1, sl
 8002140:	018a      	lsls	r2, r1, #6
 8002142:	4651      	mov	r1, sl
 8002144:	1a54      	subs	r4, r2, r1
 8002146:	4659      	mov	r1, fp
 8002148:	eb63 0501 	sbc.w	r5, r3, r1
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	f04f 0300 	mov.w	r3, #0
 8002154:	00eb      	lsls	r3, r5, #3
 8002156:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800215a:	00e2      	lsls	r2, r4, #3
 800215c:	4614      	mov	r4, r2
 800215e:	461d      	mov	r5, r3
 8002160:	4643      	mov	r3, r8
 8002162:	18e3      	adds	r3, r4, r3
 8002164:	603b      	str	r3, [r7, #0]
 8002166:	464b      	mov	r3, r9
 8002168:	eb45 0303 	adc.w	r3, r5, r3
 800216c:	607b      	str	r3, [r7, #4]
 800216e:	f04f 0200 	mov.w	r2, #0
 8002172:	f04f 0300 	mov.w	r3, #0
 8002176:	e9d7 4500 	ldrd	r4, r5, [r7]
 800217a:	4629      	mov	r1, r5
 800217c:	028b      	lsls	r3, r1, #10
 800217e:	4621      	mov	r1, r4
 8002180:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002184:	4621      	mov	r1, r4
 8002186:	028a      	lsls	r2, r1, #10
 8002188:	4610      	mov	r0, r2
 800218a:	4619      	mov	r1, r3
 800218c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002190:	2200      	movs	r2, #0
 8002192:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002194:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002196:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800219a:	f7fe f841 	bl	8000220 <__aeabi_uldivmod>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4613      	mov	r3, r2
 80021a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80021a8:	4b0d      	ldr	r3, [pc, #52]	@ (80021e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	0f1b      	lsrs	r3, r3, #28
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80021b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80021ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80021be:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80021c6:	e003      	b.n	80021d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021c8:	4b06      	ldr	r3, [pc, #24]	@ (80021e4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80021ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80021ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	37b8      	adds	r7, #184	@ 0xb8
 80021d8:	46bd      	mov	sp, r7
 80021da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021de:	bf00      	nop
 80021e0:	40023800 	.word	0x40023800
 80021e4:	00f42400 	.word	0x00f42400

080021e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e28d      	b.n	8002716 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 8083 	beq.w	800230e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002208:	4b94      	ldr	r3, [pc, #592]	@ (800245c <HAL_RCC_OscConfig+0x274>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f003 030c 	and.w	r3, r3, #12
 8002210:	2b04      	cmp	r3, #4
 8002212:	d019      	beq.n	8002248 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002214:	4b91      	ldr	r3, [pc, #580]	@ (800245c <HAL_RCC_OscConfig+0x274>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 030c 	and.w	r3, r3, #12
        || \
 800221c:	2b08      	cmp	r3, #8
 800221e:	d106      	bne.n	800222e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002220:	4b8e      	ldr	r3, [pc, #568]	@ (800245c <HAL_RCC_OscConfig+0x274>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002228:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800222c:	d00c      	beq.n	8002248 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800222e:	4b8b      	ldr	r3, [pc, #556]	@ (800245c <HAL_RCC_OscConfig+0x274>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002236:	2b0c      	cmp	r3, #12
 8002238:	d112      	bne.n	8002260 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800223a:	4b88      	ldr	r3, [pc, #544]	@ (800245c <HAL_RCC_OscConfig+0x274>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002242:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002246:	d10b      	bne.n	8002260 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002248:	4b84      	ldr	r3, [pc, #528]	@ (800245c <HAL_RCC_OscConfig+0x274>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d05b      	beq.n	800230c <HAL_RCC_OscConfig+0x124>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d157      	bne.n	800230c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e25a      	b.n	8002716 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002268:	d106      	bne.n	8002278 <HAL_RCC_OscConfig+0x90>
 800226a:	4b7c      	ldr	r3, [pc, #496]	@ (800245c <HAL_RCC_OscConfig+0x274>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a7b      	ldr	r2, [pc, #492]	@ (800245c <HAL_RCC_OscConfig+0x274>)
 8002270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	e01d      	b.n	80022b4 <HAL_RCC_OscConfig+0xcc>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002280:	d10c      	bne.n	800229c <HAL_RCC_OscConfig+0xb4>
 8002282:	4b76      	ldr	r3, [pc, #472]	@ (800245c <HAL_RCC_OscConfig+0x274>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a75      	ldr	r2, [pc, #468]	@ (800245c <HAL_RCC_OscConfig+0x274>)
 8002288:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	4b73      	ldr	r3, [pc, #460]	@ (800245c <HAL_RCC_OscConfig+0x274>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a72      	ldr	r2, [pc, #456]	@ (800245c <HAL_RCC_OscConfig+0x274>)
 8002294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	e00b      	b.n	80022b4 <HAL_RCC_OscConfig+0xcc>
 800229c:	4b6f      	ldr	r3, [pc, #444]	@ (800245c <HAL_RCC_OscConfig+0x274>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a6e      	ldr	r2, [pc, #440]	@ (800245c <HAL_RCC_OscConfig+0x274>)
 80022a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	4b6c      	ldr	r3, [pc, #432]	@ (800245c <HAL_RCC_OscConfig+0x274>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a6b      	ldr	r2, [pc, #428]	@ (800245c <HAL_RCC_OscConfig+0x274>)
 80022ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d013      	beq.n	80022e4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022bc:	f7fe fd22 	bl	8000d04 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c4:	f7fe fd1e 	bl	8000d04 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b64      	cmp	r3, #100	@ 0x64
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e21f      	b.n	8002716 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d6:	4b61      	ldr	r3, [pc, #388]	@ (800245c <HAL_RCC_OscConfig+0x274>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0xdc>
 80022e2:	e014      	b.n	800230e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e4:	f7fe fd0e 	bl	8000d04 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022ec:	f7fe fd0a 	bl	8000d04 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b64      	cmp	r3, #100	@ 0x64
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e20b      	b.n	8002716 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022fe:	4b57      	ldr	r3, [pc, #348]	@ (800245c <HAL_RCC_OscConfig+0x274>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f0      	bne.n	80022ec <HAL_RCC_OscConfig+0x104>
 800230a:	e000      	b.n	800230e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800230c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d06f      	beq.n	80023fa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800231a:	4b50      	ldr	r3, [pc, #320]	@ (800245c <HAL_RCC_OscConfig+0x274>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	2b00      	cmp	r3, #0
 8002324:	d017      	beq.n	8002356 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002326:	4b4d      	ldr	r3, [pc, #308]	@ (800245c <HAL_RCC_OscConfig+0x274>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 030c 	and.w	r3, r3, #12
        || \
 800232e:	2b08      	cmp	r3, #8
 8002330:	d105      	bne.n	800233e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002332:	4b4a      	ldr	r3, [pc, #296]	@ (800245c <HAL_RCC_OscConfig+0x274>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00b      	beq.n	8002356 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800233e:	4b47      	ldr	r3, [pc, #284]	@ (800245c <HAL_RCC_OscConfig+0x274>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002346:	2b0c      	cmp	r3, #12
 8002348:	d11c      	bne.n	8002384 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800234a:	4b44      	ldr	r3, [pc, #272]	@ (800245c <HAL_RCC_OscConfig+0x274>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d116      	bne.n	8002384 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002356:	4b41      	ldr	r3, [pc, #260]	@ (800245c <HAL_RCC_OscConfig+0x274>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d005      	beq.n	800236e <HAL_RCC_OscConfig+0x186>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d001      	beq.n	800236e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e1d3      	b.n	8002716 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236e:	4b3b      	ldr	r3, [pc, #236]	@ (800245c <HAL_RCC_OscConfig+0x274>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4937      	ldr	r1, [pc, #220]	@ (800245c <HAL_RCC_OscConfig+0x274>)
 800237e:	4313      	orrs	r3, r2
 8002380:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002382:	e03a      	b.n	80023fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d020      	beq.n	80023ce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800238c:	4b34      	ldr	r3, [pc, #208]	@ (8002460 <HAL_RCC_OscConfig+0x278>)
 800238e:	2201      	movs	r2, #1
 8002390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002392:	f7fe fcb7 	bl	8000d04 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239a:	f7fe fcb3 	bl	8000d04 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e1b4      	b.n	8002716 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ac:	4b2b      	ldr	r3, [pc, #172]	@ (800245c <HAL_RCC_OscConfig+0x274>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b8:	4b28      	ldr	r3, [pc, #160]	@ (800245c <HAL_RCC_OscConfig+0x274>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4925      	ldr	r1, [pc, #148]	@ (800245c <HAL_RCC_OscConfig+0x274>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	600b      	str	r3, [r1, #0]
 80023cc:	e015      	b.n	80023fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ce:	4b24      	ldr	r3, [pc, #144]	@ (8002460 <HAL_RCC_OscConfig+0x278>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d4:	f7fe fc96 	bl	8000d04 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023dc:	f7fe fc92 	bl	8000d04 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e193      	b.n	8002716 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ee:	4b1b      	ldr	r3, [pc, #108]	@ (800245c <HAL_RCC_OscConfig+0x274>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b00      	cmp	r3, #0
 8002404:	d036      	beq.n	8002474 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d016      	beq.n	800243c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800240e:	4b15      	ldr	r3, [pc, #84]	@ (8002464 <HAL_RCC_OscConfig+0x27c>)
 8002410:	2201      	movs	r2, #1
 8002412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002414:	f7fe fc76 	bl	8000d04 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800241c:	f7fe fc72 	bl	8000d04 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e173      	b.n	8002716 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242e:	4b0b      	ldr	r3, [pc, #44]	@ (800245c <HAL_RCC_OscConfig+0x274>)
 8002430:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0x234>
 800243a:	e01b      	b.n	8002474 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800243c:	4b09      	ldr	r3, [pc, #36]	@ (8002464 <HAL_RCC_OscConfig+0x27c>)
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002442:	f7fe fc5f 	bl	8000d04 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002448:	e00e      	b.n	8002468 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800244a:	f7fe fc5b 	bl	8000d04 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d907      	bls.n	8002468 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e15c      	b.n	8002716 <HAL_RCC_OscConfig+0x52e>
 800245c:	40023800 	.word	0x40023800
 8002460:	42470000 	.word	0x42470000
 8002464:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002468:	4b8a      	ldr	r3, [pc, #552]	@ (8002694 <HAL_RCC_OscConfig+0x4ac>)
 800246a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1ea      	bne.n	800244a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 8097 	beq.w	80025b0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002482:	2300      	movs	r3, #0
 8002484:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002486:	4b83      	ldr	r3, [pc, #524]	@ (8002694 <HAL_RCC_OscConfig+0x4ac>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10f      	bne.n	80024b2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	4b7f      	ldr	r3, [pc, #508]	@ (8002694 <HAL_RCC_OscConfig+0x4ac>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249a:	4a7e      	ldr	r2, [pc, #504]	@ (8002694 <HAL_RCC_OscConfig+0x4ac>)
 800249c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024a2:	4b7c      	ldr	r3, [pc, #496]	@ (8002694 <HAL_RCC_OscConfig+0x4ac>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024aa:	60bb      	str	r3, [r7, #8]
 80024ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ae:	2301      	movs	r3, #1
 80024b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b2:	4b79      	ldr	r3, [pc, #484]	@ (8002698 <HAL_RCC_OscConfig+0x4b0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d118      	bne.n	80024f0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024be:	4b76      	ldr	r3, [pc, #472]	@ (8002698 <HAL_RCC_OscConfig+0x4b0>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a75      	ldr	r2, [pc, #468]	@ (8002698 <HAL_RCC_OscConfig+0x4b0>)
 80024c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ca:	f7fe fc1b 	bl	8000d04 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d2:	f7fe fc17 	bl	8000d04 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e118      	b.n	8002716 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e4:	4b6c      	ldr	r3, [pc, #432]	@ (8002698 <HAL_RCC_OscConfig+0x4b0>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0f0      	beq.n	80024d2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d106      	bne.n	8002506 <HAL_RCC_OscConfig+0x31e>
 80024f8:	4b66      	ldr	r3, [pc, #408]	@ (8002694 <HAL_RCC_OscConfig+0x4ac>)
 80024fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024fc:	4a65      	ldr	r2, [pc, #404]	@ (8002694 <HAL_RCC_OscConfig+0x4ac>)
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	6713      	str	r3, [r2, #112]	@ 0x70
 8002504:	e01c      	b.n	8002540 <HAL_RCC_OscConfig+0x358>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2b05      	cmp	r3, #5
 800250c:	d10c      	bne.n	8002528 <HAL_RCC_OscConfig+0x340>
 800250e:	4b61      	ldr	r3, [pc, #388]	@ (8002694 <HAL_RCC_OscConfig+0x4ac>)
 8002510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002512:	4a60      	ldr	r2, [pc, #384]	@ (8002694 <HAL_RCC_OscConfig+0x4ac>)
 8002514:	f043 0304 	orr.w	r3, r3, #4
 8002518:	6713      	str	r3, [r2, #112]	@ 0x70
 800251a:	4b5e      	ldr	r3, [pc, #376]	@ (8002694 <HAL_RCC_OscConfig+0x4ac>)
 800251c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800251e:	4a5d      	ldr	r2, [pc, #372]	@ (8002694 <HAL_RCC_OscConfig+0x4ac>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6713      	str	r3, [r2, #112]	@ 0x70
 8002526:	e00b      	b.n	8002540 <HAL_RCC_OscConfig+0x358>
 8002528:	4b5a      	ldr	r3, [pc, #360]	@ (8002694 <HAL_RCC_OscConfig+0x4ac>)
 800252a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800252c:	4a59      	ldr	r2, [pc, #356]	@ (8002694 <HAL_RCC_OscConfig+0x4ac>)
 800252e:	f023 0301 	bic.w	r3, r3, #1
 8002532:	6713      	str	r3, [r2, #112]	@ 0x70
 8002534:	4b57      	ldr	r3, [pc, #348]	@ (8002694 <HAL_RCC_OscConfig+0x4ac>)
 8002536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002538:	4a56      	ldr	r2, [pc, #344]	@ (8002694 <HAL_RCC_OscConfig+0x4ac>)
 800253a:	f023 0304 	bic.w	r3, r3, #4
 800253e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d015      	beq.n	8002574 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002548:	f7fe fbdc 	bl	8000d04 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800254e:	e00a      	b.n	8002566 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002550:	f7fe fbd8 	bl	8000d04 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800255e:	4293      	cmp	r3, r2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e0d7      	b.n	8002716 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002566:	4b4b      	ldr	r3, [pc, #300]	@ (8002694 <HAL_RCC_OscConfig+0x4ac>)
 8002568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0ee      	beq.n	8002550 <HAL_RCC_OscConfig+0x368>
 8002572:	e014      	b.n	800259e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002574:	f7fe fbc6 	bl	8000d04 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800257a:	e00a      	b.n	8002592 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257c:	f7fe fbc2 	bl	8000d04 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800258a:	4293      	cmp	r3, r2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e0c1      	b.n	8002716 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002592:	4b40      	ldr	r3, [pc, #256]	@ (8002694 <HAL_RCC_OscConfig+0x4ac>)
 8002594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1ee      	bne.n	800257c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800259e:	7dfb      	ldrb	r3, [r7, #23]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d105      	bne.n	80025b0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a4:	4b3b      	ldr	r3, [pc, #236]	@ (8002694 <HAL_RCC_OscConfig+0x4ac>)
 80025a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a8:	4a3a      	ldr	r2, [pc, #232]	@ (8002694 <HAL_RCC_OscConfig+0x4ac>)
 80025aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 80ad 	beq.w	8002714 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025ba:	4b36      	ldr	r3, [pc, #216]	@ (8002694 <HAL_RCC_OscConfig+0x4ac>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d060      	beq.n	8002688 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d145      	bne.n	800265a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ce:	4b33      	ldr	r3, [pc, #204]	@ (800269c <HAL_RCC_OscConfig+0x4b4>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d4:	f7fe fb96 	bl	8000d04 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025dc:	f7fe fb92 	bl	8000d04 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e093      	b.n	8002716 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ee:	4b29      	ldr	r3, [pc, #164]	@ (8002694 <HAL_RCC_OscConfig+0x4ac>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69da      	ldr	r2, [r3, #28]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002608:	019b      	lsls	r3, r3, #6
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002610:	085b      	lsrs	r3, r3, #1
 8002612:	3b01      	subs	r3, #1
 8002614:	041b      	lsls	r3, r3, #16
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800261c:	061b      	lsls	r3, r3, #24
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002624:	071b      	lsls	r3, r3, #28
 8002626:	491b      	ldr	r1, [pc, #108]	@ (8002694 <HAL_RCC_OscConfig+0x4ac>)
 8002628:	4313      	orrs	r3, r2
 800262a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800262c:	4b1b      	ldr	r3, [pc, #108]	@ (800269c <HAL_RCC_OscConfig+0x4b4>)
 800262e:	2201      	movs	r2, #1
 8002630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002632:	f7fe fb67 	bl	8000d04 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263a:	f7fe fb63 	bl	8000d04 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e064      	b.n	8002716 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800264c:	4b11      	ldr	r3, [pc, #68]	@ (8002694 <HAL_RCC_OscConfig+0x4ac>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0f0      	beq.n	800263a <HAL_RCC_OscConfig+0x452>
 8002658:	e05c      	b.n	8002714 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265a:	4b10      	ldr	r3, [pc, #64]	@ (800269c <HAL_RCC_OscConfig+0x4b4>)
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002660:	f7fe fb50 	bl	8000d04 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002668:	f7fe fb4c 	bl	8000d04 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e04d      	b.n	8002716 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800267a:	4b06      	ldr	r3, [pc, #24]	@ (8002694 <HAL_RCC_OscConfig+0x4ac>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0x480>
 8002686:	e045      	b.n	8002714 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d107      	bne.n	80026a0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e040      	b.n	8002716 <HAL_RCC_OscConfig+0x52e>
 8002694:	40023800 	.word	0x40023800
 8002698:	40007000 	.word	0x40007000
 800269c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002720 <HAL_RCC_OscConfig+0x538>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d030      	beq.n	8002710 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d129      	bne.n	8002710 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d122      	bne.n	8002710 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80026d0:	4013      	ands	r3, r2
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026d8:	4293      	cmp	r3, r2
 80026da:	d119      	bne.n	8002710 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e6:	085b      	lsrs	r3, r3, #1
 80026e8:	3b01      	subs	r3, #1
 80026ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d10f      	bne.n	8002710 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d107      	bne.n	8002710 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800270c:	429a      	cmp	r2, r3
 800270e:	d001      	beq.n	8002714 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e000      	b.n	8002716 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40023800 	.word	0x40023800

08002724 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e042      	b.n	80027bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d106      	bne.n	8002750 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7fe f964 	bl	8000a18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2224      	movs	r2, #36	@ 0x24
 8002754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002766:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f973 	bl	8002a54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	691a      	ldr	r2, [r3, #16]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800277c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695a      	ldr	r2, [r3, #20]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800278c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800279c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2220      	movs	r2, #32
 80027a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2220      	movs	r2, #32
 80027b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08a      	sub	sp, #40	@ 0x28
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	603b      	str	r3, [r7, #0]
 80027d0:	4613      	mov	r3, r2
 80027d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b20      	cmp	r3, #32
 80027e2:	d175      	bne.n	80028d0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <HAL_UART_Transmit+0x2c>
 80027ea:	88fb      	ldrh	r3, [r7, #6]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e06e      	b.n	80028d2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2221      	movs	r2, #33	@ 0x21
 80027fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002802:	f7fe fa7f 	bl	8000d04 <HAL_GetTick>
 8002806:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	88fa      	ldrh	r2, [r7, #6]
 800280c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	88fa      	ldrh	r2, [r7, #6]
 8002812:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800281c:	d108      	bne.n	8002830 <HAL_UART_Transmit+0x6c>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d104      	bne.n	8002830 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002826:	2300      	movs	r3, #0
 8002828:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	61bb      	str	r3, [r7, #24]
 800282e:	e003      	b.n	8002838 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002834:	2300      	movs	r3, #0
 8002836:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002838:	e02e      	b.n	8002898 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	2200      	movs	r2, #0
 8002842:	2180      	movs	r1, #128	@ 0x80
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 f848 	bl	80028da <UART_WaitOnFlagUntilTimeout>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2220      	movs	r2, #32
 8002854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e03a      	b.n	80028d2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10b      	bne.n	800287a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	461a      	mov	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002870:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	3302      	adds	r3, #2
 8002876:	61bb      	str	r3, [r7, #24]
 8002878:	e007      	b.n	800288a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	781a      	ldrb	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	3301      	adds	r3, #1
 8002888:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800288e:	b29b      	uxth	r3, r3
 8002890:	3b01      	subs	r3, #1
 8002892:	b29a      	uxth	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800289c:	b29b      	uxth	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1cb      	bne.n	800283a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2200      	movs	r2, #0
 80028aa:	2140      	movs	r1, #64	@ 0x40
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 f814 	bl	80028da <UART_WaitOnFlagUntilTimeout>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d005      	beq.n	80028c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2220      	movs	r2, #32
 80028bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e006      	b.n	80028d2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80028cc:	2300      	movs	r3, #0
 80028ce:	e000      	b.n	80028d2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80028d0:	2302      	movs	r3, #2
  }
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3720      	adds	r7, #32
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b086      	sub	sp, #24
 80028de:	af00      	add	r7, sp, #0
 80028e0:	60f8      	str	r0, [r7, #12]
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	603b      	str	r3, [r7, #0]
 80028e6:	4613      	mov	r3, r2
 80028e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028ea:	e03b      	b.n	8002964 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f2:	d037      	beq.n	8002964 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028f4:	f7fe fa06 	bl	8000d04 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	6a3a      	ldr	r2, [r7, #32]
 8002900:	429a      	cmp	r2, r3
 8002902:	d302      	bcc.n	800290a <UART_WaitOnFlagUntilTimeout+0x30>
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e03a      	b.n	8002984 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d023      	beq.n	8002964 <UART_WaitOnFlagUntilTimeout+0x8a>
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2b80      	cmp	r3, #128	@ 0x80
 8002920:	d020      	beq.n	8002964 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	2b40      	cmp	r3, #64	@ 0x40
 8002926:	d01d      	beq.n	8002964 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b08      	cmp	r3, #8
 8002934:	d116      	bne.n	8002964 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002936:	2300      	movs	r3, #0
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	617b      	str	r3, [r7, #20]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 f81d 	bl	800298c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2208      	movs	r2, #8
 8002956:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e00f      	b.n	8002984 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	4013      	ands	r3, r2
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	429a      	cmp	r2, r3
 8002972:	bf0c      	ite	eq
 8002974:	2301      	moveq	r3, #1
 8002976:	2300      	movne	r3, #0
 8002978:	b2db      	uxtb	r3, r3
 800297a:	461a      	mov	r2, r3
 800297c:	79fb      	ldrb	r3, [r7, #7]
 800297e:	429a      	cmp	r2, r3
 8002980:	d0b4      	beq.n	80028ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800298c:	b480      	push	{r7}
 800298e:	b095      	sub	sp, #84	@ 0x54
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	330c      	adds	r3, #12
 800299a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800299c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800299e:	e853 3f00 	ldrex	r3, [r3]
 80029a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80029a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80029aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	330c      	adds	r3, #12
 80029b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80029b4:	643a      	str	r2, [r7, #64]	@ 0x40
 80029b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80029ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80029bc:	e841 2300 	strex	r3, r2, [r1]
 80029c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80029c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1e5      	bne.n	8002994 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	3314      	adds	r3, #20
 80029ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d0:	6a3b      	ldr	r3, [r7, #32]
 80029d2:	e853 3f00 	ldrex	r3, [r3]
 80029d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f023 0301 	bic.w	r3, r3, #1
 80029de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	3314      	adds	r3, #20
 80029e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80029e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029f0:	e841 2300 	strex	r3, r2, [r1]
 80029f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80029f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1e5      	bne.n	80029c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d119      	bne.n	8002a38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	330c      	adds	r3, #12
 8002a0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	e853 3f00 	ldrex	r3, [r3]
 8002a12:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f023 0310 	bic.w	r3, r3, #16
 8002a1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	330c      	adds	r3, #12
 8002a22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a24:	61ba      	str	r2, [r7, #24]
 8002a26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a28:	6979      	ldr	r1, [r7, #20]
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	e841 2300 	strex	r3, r2, [r1]
 8002a30:	613b      	str	r3, [r7, #16]
   return(result);
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1e5      	bne.n	8002a04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002a46:	bf00      	nop
 8002a48:	3754      	adds	r7, #84	@ 0x54
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
	...

08002a54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a58:	b0c0      	sub	sp, #256	@ 0x100
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a70:	68d9      	ldr	r1, [r3, #12]
 8002a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	ea40 0301 	orr.w	r3, r0, r1
 8002a7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	431a      	orrs	r2, r3
 8002a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002aac:	f021 010c 	bic.w	r1, r1, #12
 8002ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002aba:	430b      	orrs	r3, r1
 8002abc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ace:	6999      	ldr	r1, [r3, #24]
 8002ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	ea40 0301 	orr.w	r3, r0, r1
 8002ada:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	4b8f      	ldr	r3, [pc, #572]	@ (8002d20 <UART_SetConfig+0x2cc>)
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d005      	beq.n	8002af4 <UART_SetConfig+0xa0>
 8002ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	4b8d      	ldr	r3, [pc, #564]	@ (8002d24 <UART_SetConfig+0x2d0>)
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d104      	bne.n	8002afe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002af4:	f7fe fe0a 	bl	800170c <HAL_RCC_GetPCLK2Freq>
 8002af8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002afc:	e003      	b.n	8002b06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002afe:	f7fe fdf1 	bl	80016e4 <HAL_RCC_GetPCLK1Freq>
 8002b02:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b0a:	69db      	ldr	r3, [r3, #28]
 8002b0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b10:	f040 810c 	bne.w	8002d2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002b1e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002b22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002b26:	4622      	mov	r2, r4
 8002b28:	462b      	mov	r3, r5
 8002b2a:	1891      	adds	r1, r2, r2
 8002b2c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002b2e:	415b      	adcs	r3, r3
 8002b30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b36:	4621      	mov	r1, r4
 8002b38:	eb12 0801 	adds.w	r8, r2, r1
 8002b3c:	4629      	mov	r1, r5
 8002b3e:	eb43 0901 	adc.w	r9, r3, r1
 8002b42:	f04f 0200 	mov.w	r2, #0
 8002b46:	f04f 0300 	mov.w	r3, #0
 8002b4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b56:	4690      	mov	r8, r2
 8002b58:	4699      	mov	r9, r3
 8002b5a:	4623      	mov	r3, r4
 8002b5c:	eb18 0303 	adds.w	r3, r8, r3
 8002b60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002b64:	462b      	mov	r3, r5
 8002b66:	eb49 0303 	adc.w	r3, r9, r3
 8002b6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002b7a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002b7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002b82:	460b      	mov	r3, r1
 8002b84:	18db      	adds	r3, r3, r3
 8002b86:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b88:	4613      	mov	r3, r2
 8002b8a:	eb42 0303 	adc.w	r3, r2, r3
 8002b8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002b94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002b98:	f7fd fb42 	bl	8000220 <__aeabi_uldivmod>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	4b61      	ldr	r3, [pc, #388]	@ (8002d28 <UART_SetConfig+0x2d4>)
 8002ba2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ba6:	095b      	lsrs	r3, r3, #5
 8002ba8:	011c      	lsls	r4, r3, #4
 8002baa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002bb4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002bb8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002bbc:	4642      	mov	r2, r8
 8002bbe:	464b      	mov	r3, r9
 8002bc0:	1891      	adds	r1, r2, r2
 8002bc2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002bc4:	415b      	adcs	r3, r3
 8002bc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bc8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002bcc:	4641      	mov	r1, r8
 8002bce:	eb12 0a01 	adds.w	sl, r2, r1
 8002bd2:	4649      	mov	r1, r9
 8002bd4:	eb43 0b01 	adc.w	fp, r3, r1
 8002bd8:	f04f 0200 	mov.w	r2, #0
 8002bdc:	f04f 0300 	mov.w	r3, #0
 8002be0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002be4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002be8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bec:	4692      	mov	sl, r2
 8002bee:	469b      	mov	fp, r3
 8002bf0:	4643      	mov	r3, r8
 8002bf2:	eb1a 0303 	adds.w	r3, sl, r3
 8002bf6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002bfa:	464b      	mov	r3, r9
 8002bfc:	eb4b 0303 	adc.w	r3, fp, r3
 8002c00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c10:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002c14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	18db      	adds	r3, r3, r3
 8002c1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c1e:	4613      	mov	r3, r2
 8002c20:	eb42 0303 	adc.w	r3, r2, r3
 8002c24:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002c2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002c2e:	f7fd faf7 	bl	8000220 <__aeabi_uldivmod>
 8002c32:	4602      	mov	r2, r0
 8002c34:	460b      	mov	r3, r1
 8002c36:	4611      	mov	r1, r2
 8002c38:	4b3b      	ldr	r3, [pc, #236]	@ (8002d28 <UART_SetConfig+0x2d4>)
 8002c3a:	fba3 2301 	umull	r2, r3, r3, r1
 8002c3e:	095b      	lsrs	r3, r3, #5
 8002c40:	2264      	movs	r2, #100	@ 0x64
 8002c42:	fb02 f303 	mul.w	r3, r2, r3
 8002c46:	1acb      	subs	r3, r1, r3
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002c4e:	4b36      	ldr	r3, [pc, #216]	@ (8002d28 <UART_SetConfig+0x2d4>)
 8002c50:	fba3 2302 	umull	r2, r3, r3, r2
 8002c54:	095b      	lsrs	r3, r3, #5
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002c5c:	441c      	add	r4, r3
 8002c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c62:	2200      	movs	r2, #0
 8002c64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c68:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002c6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002c70:	4642      	mov	r2, r8
 8002c72:	464b      	mov	r3, r9
 8002c74:	1891      	adds	r1, r2, r2
 8002c76:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002c78:	415b      	adcs	r3, r3
 8002c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002c80:	4641      	mov	r1, r8
 8002c82:	1851      	adds	r1, r2, r1
 8002c84:	6339      	str	r1, [r7, #48]	@ 0x30
 8002c86:	4649      	mov	r1, r9
 8002c88:	414b      	adcs	r3, r1
 8002c8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002c98:	4659      	mov	r1, fp
 8002c9a:	00cb      	lsls	r3, r1, #3
 8002c9c:	4651      	mov	r1, sl
 8002c9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ca2:	4651      	mov	r1, sl
 8002ca4:	00ca      	lsls	r2, r1, #3
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4603      	mov	r3, r0
 8002cac:	4642      	mov	r2, r8
 8002cae:	189b      	adds	r3, r3, r2
 8002cb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002cb4:	464b      	mov	r3, r9
 8002cb6:	460a      	mov	r2, r1
 8002cb8:	eb42 0303 	adc.w	r3, r2, r3
 8002cbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002ccc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002cd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	18db      	adds	r3, r3, r3
 8002cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cda:	4613      	mov	r3, r2
 8002cdc:	eb42 0303 	adc.w	r3, r2, r3
 8002ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ce2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ce6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002cea:	f7fd fa99 	bl	8000220 <__aeabi_uldivmod>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8002d28 <UART_SetConfig+0x2d4>)
 8002cf4:	fba3 1302 	umull	r1, r3, r3, r2
 8002cf8:	095b      	lsrs	r3, r3, #5
 8002cfa:	2164      	movs	r1, #100	@ 0x64
 8002cfc:	fb01 f303 	mul.w	r3, r1, r3
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	3332      	adds	r3, #50	@ 0x32
 8002d06:	4a08      	ldr	r2, [pc, #32]	@ (8002d28 <UART_SetConfig+0x2d4>)
 8002d08:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0c:	095b      	lsrs	r3, r3, #5
 8002d0e:	f003 0207 	and.w	r2, r3, #7
 8002d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4422      	add	r2, r4
 8002d1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d1c:	e106      	b.n	8002f2c <UART_SetConfig+0x4d8>
 8002d1e:	bf00      	nop
 8002d20:	40011000 	.word	0x40011000
 8002d24:	40011400 	.word	0x40011400
 8002d28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d30:	2200      	movs	r2, #0
 8002d32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002d36:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002d3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002d3e:	4642      	mov	r2, r8
 8002d40:	464b      	mov	r3, r9
 8002d42:	1891      	adds	r1, r2, r2
 8002d44:	6239      	str	r1, [r7, #32]
 8002d46:	415b      	adcs	r3, r3
 8002d48:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d4e:	4641      	mov	r1, r8
 8002d50:	1854      	adds	r4, r2, r1
 8002d52:	4649      	mov	r1, r9
 8002d54:	eb43 0501 	adc.w	r5, r3, r1
 8002d58:	f04f 0200 	mov.w	r2, #0
 8002d5c:	f04f 0300 	mov.w	r3, #0
 8002d60:	00eb      	lsls	r3, r5, #3
 8002d62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d66:	00e2      	lsls	r2, r4, #3
 8002d68:	4614      	mov	r4, r2
 8002d6a:	461d      	mov	r5, r3
 8002d6c:	4643      	mov	r3, r8
 8002d6e:	18e3      	adds	r3, r4, r3
 8002d70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d74:	464b      	mov	r3, r9
 8002d76:	eb45 0303 	adc.w	r3, r5, r3
 8002d7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d8e:	f04f 0200 	mov.w	r2, #0
 8002d92:	f04f 0300 	mov.w	r3, #0
 8002d96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002d9a:	4629      	mov	r1, r5
 8002d9c:	008b      	lsls	r3, r1, #2
 8002d9e:	4621      	mov	r1, r4
 8002da0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002da4:	4621      	mov	r1, r4
 8002da6:	008a      	lsls	r2, r1, #2
 8002da8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002dac:	f7fd fa38 	bl	8000220 <__aeabi_uldivmod>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4b60      	ldr	r3, [pc, #384]	@ (8002f38 <UART_SetConfig+0x4e4>)
 8002db6:	fba3 2302 	umull	r2, r3, r3, r2
 8002dba:	095b      	lsrs	r3, r3, #5
 8002dbc:	011c      	lsls	r4, r3, #4
 8002dbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002dc8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002dcc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002dd0:	4642      	mov	r2, r8
 8002dd2:	464b      	mov	r3, r9
 8002dd4:	1891      	adds	r1, r2, r2
 8002dd6:	61b9      	str	r1, [r7, #24]
 8002dd8:	415b      	adcs	r3, r3
 8002dda:	61fb      	str	r3, [r7, #28]
 8002ddc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002de0:	4641      	mov	r1, r8
 8002de2:	1851      	adds	r1, r2, r1
 8002de4:	6139      	str	r1, [r7, #16]
 8002de6:	4649      	mov	r1, r9
 8002de8:	414b      	adcs	r3, r1
 8002dea:	617b      	str	r3, [r7, #20]
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	f04f 0300 	mov.w	r3, #0
 8002df4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002df8:	4659      	mov	r1, fp
 8002dfa:	00cb      	lsls	r3, r1, #3
 8002dfc:	4651      	mov	r1, sl
 8002dfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e02:	4651      	mov	r1, sl
 8002e04:	00ca      	lsls	r2, r1, #3
 8002e06:	4610      	mov	r0, r2
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	4642      	mov	r2, r8
 8002e0e:	189b      	adds	r3, r3, r2
 8002e10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e14:	464b      	mov	r3, r9
 8002e16:	460a      	mov	r2, r1
 8002e18:	eb42 0303 	adc.w	r3, r2, r3
 8002e1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e2a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	f04f 0300 	mov.w	r3, #0
 8002e34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002e38:	4649      	mov	r1, r9
 8002e3a:	008b      	lsls	r3, r1, #2
 8002e3c:	4641      	mov	r1, r8
 8002e3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e42:	4641      	mov	r1, r8
 8002e44:	008a      	lsls	r2, r1, #2
 8002e46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002e4a:	f7fd f9e9 	bl	8000220 <__aeabi_uldivmod>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	460b      	mov	r3, r1
 8002e52:	4611      	mov	r1, r2
 8002e54:	4b38      	ldr	r3, [pc, #224]	@ (8002f38 <UART_SetConfig+0x4e4>)
 8002e56:	fba3 2301 	umull	r2, r3, r3, r1
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	2264      	movs	r2, #100	@ 0x64
 8002e5e:	fb02 f303 	mul.w	r3, r2, r3
 8002e62:	1acb      	subs	r3, r1, r3
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	3332      	adds	r3, #50	@ 0x32
 8002e68:	4a33      	ldr	r2, [pc, #204]	@ (8002f38 <UART_SetConfig+0x4e4>)
 8002e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6e:	095b      	lsrs	r3, r3, #5
 8002e70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e74:	441c      	add	r4, r3
 8002e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e7e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002e80:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002e84:	4642      	mov	r2, r8
 8002e86:	464b      	mov	r3, r9
 8002e88:	1891      	adds	r1, r2, r2
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	415b      	adcs	r3, r3
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e94:	4641      	mov	r1, r8
 8002e96:	1851      	adds	r1, r2, r1
 8002e98:	6039      	str	r1, [r7, #0]
 8002e9a:	4649      	mov	r1, r9
 8002e9c:	414b      	adcs	r3, r1
 8002e9e:	607b      	str	r3, [r7, #4]
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	f04f 0300 	mov.w	r3, #0
 8002ea8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002eac:	4659      	mov	r1, fp
 8002eae:	00cb      	lsls	r3, r1, #3
 8002eb0:	4651      	mov	r1, sl
 8002eb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002eb6:	4651      	mov	r1, sl
 8002eb8:	00ca      	lsls	r2, r1, #3
 8002eba:	4610      	mov	r0, r2
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	4642      	mov	r2, r8
 8002ec2:	189b      	adds	r3, r3, r2
 8002ec4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ec6:	464b      	mov	r3, r9
 8002ec8:	460a      	mov	r2, r1
 8002eca:	eb42 0303 	adc.w	r3, r2, r3
 8002ece:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	663b      	str	r3, [r7, #96]	@ 0x60
 8002eda:	667a      	str	r2, [r7, #100]	@ 0x64
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	f04f 0300 	mov.w	r3, #0
 8002ee4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002ee8:	4649      	mov	r1, r9
 8002eea:	008b      	lsls	r3, r1, #2
 8002eec:	4641      	mov	r1, r8
 8002eee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ef2:	4641      	mov	r1, r8
 8002ef4:	008a      	lsls	r2, r1, #2
 8002ef6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002efa:	f7fd f991 	bl	8000220 <__aeabi_uldivmod>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4b0d      	ldr	r3, [pc, #52]	@ (8002f38 <UART_SetConfig+0x4e4>)
 8002f04:	fba3 1302 	umull	r1, r3, r3, r2
 8002f08:	095b      	lsrs	r3, r3, #5
 8002f0a:	2164      	movs	r1, #100	@ 0x64
 8002f0c:	fb01 f303 	mul.w	r3, r1, r3
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	011b      	lsls	r3, r3, #4
 8002f14:	3332      	adds	r3, #50	@ 0x32
 8002f16:	4a08      	ldr	r2, [pc, #32]	@ (8002f38 <UART_SetConfig+0x4e4>)
 8002f18:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1c:	095b      	lsrs	r3, r3, #5
 8002f1e:	f003 020f 	and.w	r2, r3, #15
 8002f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4422      	add	r2, r4
 8002f2a:	609a      	str	r2, [r3, #8]
}
 8002f2c:	bf00      	nop
 8002f2e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002f32:	46bd      	mov	sp, r7
 8002f34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f38:	51eb851f 	.word	0x51eb851f

08002f3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f3c:	b084      	sub	sp, #16
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b084      	sub	sp, #16
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	f107 001c 	add.w	r0, r7, #28
 8002f4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f4e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d123      	bne.n	8002f9e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f5a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002f6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002f7e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d105      	bne.n	8002f92 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 fa9a 	bl	80034cc <USB_CoreReset>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	73fb      	strb	r3, [r7, #15]
 8002f9c:	e01b      	b.n	8002fd6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 fa8e 	bl	80034cc <USB_CoreReset>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002fb4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d106      	bne.n	8002fca <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	639a      	str	r2, [r3, #56]	@ 0x38
 8002fc8:	e005      	b.n	8002fd6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002fd6:	7fbb      	ldrb	r3, [r7, #30]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d10b      	bne.n	8002ff4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f043 0206 	orr.w	r2, r3, #6
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f043 0220 	orr.w	r2, r3, #32
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003000:	b004      	add	sp, #16
 8003002:	4770      	bx	lr

08003004 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f023 0201 	bic.w	r2, r3, #1
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b084      	sub	sp, #16
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
 800302e:	460b      	mov	r3, r1
 8003030:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003032:	2300      	movs	r3, #0
 8003034:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003042:	78fb      	ldrb	r3, [r7, #3]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d115      	bne.n	8003074 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003054:	200a      	movs	r0, #10
 8003056:	f7fd fe61 	bl	8000d1c <HAL_Delay>
      ms += 10U;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	330a      	adds	r3, #10
 800305e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 fa25 	bl	80034b0 <USB_GetMode>
 8003066:	4603      	mov	r3, r0
 8003068:	2b01      	cmp	r3, #1
 800306a:	d01e      	beq.n	80030aa <USB_SetCurrentMode+0x84>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003070:	d9f0      	bls.n	8003054 <USB_SetCurrentMode+0x2e>
 8003072:	e01a      	b.n	80030aa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003074:	78fb      	ldrb	r3, [r7, #3]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d115      	bne.n	80030a6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003086:	200a      	movs	r0, #10
 8003088:	f7fd fe48 	bl	8000d1c <HAL_Delay>
      ms += 10U;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	330a      	adds	r3, #10
 8003090:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 fa0c 	bl	80034b0 <USB_GetMode>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d005      	beq.n	80030aa <USB_SetCurrentMode+0x84>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2bc7      	cmp	r3, #199	@ 0xc7
 80030a2:	d9f0      	bls.n	8003086 <USB_SetCurrentMode+0x60>
 80030a4:	e001      	b.n	80030aa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e005      	b.n	80030b6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2bc8      	cmp	r3, #200	@ 0xc8
 80030ae:	d101      	bne.n	80030b4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e000      	b.n	80030b6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
	...

080030c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80030c0:	b084      	sub	sp, #16
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b086      	sub	sp, #24
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
 80030ca:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80030ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80030d2:	2300      	movs	r3, #0
 80030d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80030da:	2300      	movs	r3, #0
 80030dc:	613b      	str	r3, [r7, #16]
 80030de:	e009      	b.n	80030f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	3340      	adds	r3, #64	@ 0x40
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	2200      	movs	r2, #0
 80030ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	3301      	adds	r3, #1
 80030f2:	613b      	str	r3, [r7, #16]
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	2b0e      	cmp	r3, #14
 80030f8:	d9f2      	bls.n	80030e0 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80030fa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d11c      	bne.n	800313c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003110:	f043 0302 	orr.w	r3, r3, #2
 8003114:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800311a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	e005      	b.n	8003148 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003140:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800314e:	461a      	mov	r2, r3
 8003150:	2300      	movs	r3, #0
 8003152:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003154:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003158:	2b01      	cmp	r3, #1
 800315a:	d10d      	bne.n	8003178 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800315c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003160:	2b00      	cmp	r3, #0
 8003162:	d104      	bne.n	800316e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003164:	2100      	movs	r1, #0
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f968 	bl	800343c <USB_SetDevSpeed>
 800316c:	e008      	b.n	8003180 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800316e:	2101      	movs	r1, #1
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f963 	bl	800343c <USB_SetDevSpeed>
 8003176:	e003      	b.n	8003180 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003178:	2103      	movs	r1, #3
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f95e 	bl	800343c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003180:	2110      	movs	r1, #16
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f8fa 	bl	800337c <USB_FlushTxFifo>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f924 	bl	80033e0 <USB_FlushRxFifo>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031a8:	461a      	mov	r2, r3
 80031aa:	2300      	movs	r3, #0
 80031ac:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031b4:	461a      	mov	r2, r3
 80031b6:	2300      	movs	r3, #0
 80031b8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031c0:	461a      	mov	r2, r3
 80031c2:	2300      	movs	r3, #0
 80031c4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031c6:	2300      	movs	r3, #0
 80031c8:	613b      	str	r3, [r7, #16]
 80031ca:	e043      	b.n	8003254 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	015a      	lsls	r2, r3, #5
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80031de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80031e2:	d118      	bne.n	8003216 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10a      	bne.n	8003200 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	015a      	lsls	r2, r3, #5
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031f6:	461a      	mov	r2, r3
 80031f8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	e013      	b.n	8003228 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	015a      	lsls	r2, r3, #5
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4413      	add	r3, r2
 8003208:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800320c:	461a      	mov	r2, r3
 800320e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003212:	6013      	str	r3, [r2, #0]
 8003214:	e008      	b.n	8003228 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	015a      	lsls	r2, r3, #5
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4413      	add	r3, r2
 800321e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003222:	461a      	mov	r2, r3
 8003224:	2300      	movs	r3, #0
 8003226:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	015a      	lsls	r2, r3, #5
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4413      	add	r3, r2
 8003230:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003234:	461a      	mov	r2, r3
 8003236:	2300      	movs	r3, #0
 8003238:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	015a      	lsls	r2, r3, #5
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	4413      	add	r3, r2
 8003242:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003246:	461a      	mov	r2, r3
 8003248:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800324c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	3301      	adds	r3, #1
 8003252:	613b      	str	r3, [r7, #16]
 8003254:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003258:	461a      	mov	r2, r3
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	4293      	cmp	r3, r2
 800325e:	d3b5      	bcc.n	80031cc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003260:	2300      	movs	r3, #0
 8003262:	613b      	str	r3, [r7, #16]
 8003264:	e043      	b.n	80032ee <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	015a      	lsls	r2, r3, #5
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	4413      	add	r3, r2
 800326e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003278:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800327c:	d118      	bne.n	80032b0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10a      	bne.n	800329a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	015a      	lsls	r2, r3, #5
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4413      	add	r3, r2
 800328c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003290:	461a      	mov	r2, r3
 8003292:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003296:	6013      	str	r3, [r2, #0]
 8003298:	e013      	b.n	80032c2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	015a      	lsls	r2, r3, #5
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4413      	add	r3, r2
 80032a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032a6:	461a      	mov	r2, r3
 80032a8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	e008      	b.n	80032c2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	015a      	lsls	r2, r3, #5
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4413      	add	r3, r2
 80032b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032bc:	461a      	mov	r2, r3
 80032be:	2300      	movs	r3, #0
 80032c0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	015a      	lsls	r2, r3, #5
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	4413      	add	r3, r2
 80032ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032ce:	461a      	mov	r2, r3
 80032d0:	2300      	movs	r3, #0
 80032d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	015a      	lsls	r2, r3, #5
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4413      	add	r3, r2
 80032dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032e0:	461a      	mov	r2, r3
 80032e2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80032e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	3301      	adds	r3, #1
 80032ec:	613b      	str	r3, [r7, #16]
 80032ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80032f2:	461a      	mov	r2, r3
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d3b5      	bcc.n	8003266 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003308:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800330c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800331a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800331c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003320:	2b00      	cmp	r3, #0
 8003322:	d105      	bne.n	8003330 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	f043 0210 	orr.w	r2, r3, #16
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	699a      	ldr	r2, [r3, #24]
 8003334:	4b10      	ldr	r3, [pc, #64]	@ (8003378 <USB_DevInit+0x2b8>)
 8003336:	4313      	orrs	r3, r2
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800333c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003340:	2b00      	cmp	r3, #0
 8003342:	d005      	beq.n	8003350 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	f043 0208 	orr.w	r2, r3, #8
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003350:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003354:	2b01      	cmp	r3, #1
 8003356:	d107      	bne.n	8003368 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003360:	f043 0304 	orr.w	r3, r3, #4
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003368:	7dfb      	ldrb	r3, [r7, #23]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3718      	adds	r7, #24
 800336e:	46bd      	mov	sp, r7
 8003370:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003374:	b004      	add	sp, #16
 8003376:	4770      	bx	lr
 8003378:	803c3800 	.word	0x803c3800

0800337c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003386:	2300      	movs	r3, #0
 8003388:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	3301      	adds	r3, #1
 800338e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003396:	d901      	bls.n	800339c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e01b      	b.n	80033d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	daf2      	bge.n	800338a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	019b      	lsls	r3, r3, #6
 80033ac:	f043 0220 	orr.w	r2, r3, #32
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	3301      	adds	r3, #1
 80033b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80033c0:	d901      	bls.n	80033c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e006      	b.n	80033d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	f003 0320 	and.w	r3, r3, #32
 80033ce:	2b20      	cmp	r3, #32
 80033d0:	d0f0      	beq.n	80033b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3714      	adds	r7, #20
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	3301      	adds	r3, #1
 80033f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80033f8:	d901      	bls.n	80033fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e018      	b.n	8003430 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	2b00      	cmp	r3, #0
 8003404:	daf2      	bge.n	80033ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003406:	2300      	movs	r3, #0
 8003408:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2210      	movs	r2, #16
 800340e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	3301      	adds	r3, #1
 8003414:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800341c:	d901      	bls.n	8003422 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e006      	b.n	8003430 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	f003 0310 	and.w	r3, r3, #16
 800342a:	2b10      	cmp	r3, #16
 800342c:	d0f0      	beq.n	8003410 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	78fb      	ldrb	r3, [r7, #3]
 8003456:	68f9      	ldr	r1, [r7, #12]
 8003458:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800345c:	4313      	orrs	r3, r2
 800345e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800346e:	b480      	push	{r7}
 8003470:	b085      	sub	sp, #20
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003488:	f023 0303 	bic.w	r3, r3, #3
 800348c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800349c:	f043 0302 	orr.w	r3, r3, #2
 80034a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	f003 0301 	and.w	r3, r3, #1
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	3301      	adds	r3, #1
 80034dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80034e4:	d901      	bls.n	80034ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e01b      	b.n	8003522 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	daf2      	bge.n	80034d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	f043 0201 	orr.w	r2, r3, #1
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	3301      	adds	r3, #1
 8003506:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800350e:	d901      	bls.n	8003514 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e006      	b.n	8003522 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b01      	cmp	r3, #1
 800351e:	d0f0      	beq.n	8003502 <USB_CoreReset+0x36>

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
	...

08003530 <__NVIC_SetPriority>:
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	4603      	mov	r3, r0
 8003538:	6039      	str	r1, [r7, #0]
 800353a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800353c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003540:	2b00      	cmp	r3, #0
 8003542:	db0a      	blt.n	800355a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	b2da      	uxtb	r2, r3
 8003548:	490c      	ldr	r1, [pc, #48]	@ (800357c <__NVIC_SetPriority+0x4c>)
 800354a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354e:	0112      	lsls	r2, r2, #4
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	440b      	add	r3, r1
 8003554:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003558:	e00a      	b.n	8003570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	b2da      	uxtb	r2, r3
 800355e:	4908      	ldr	r1, [pc, #32]	@ (8003580 <__NVIC_SetPriority+0x50>)
 8003560:	79fb      	ldrb	r3, [r7, #7]
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	3b04      	subs	r3, #4
 8003568:	0112      	lsls	r2, r2, #4
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	440b      	add	r3, r1
 800356e:	761a      	strb	r2, [r3, #24]
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	e000e100 	.word	0xe000e100
 8003580:	e000ed00 	.word	0xe000ed00

08003584 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003588:	2100      	movs	r1, #0
 800358a:	f06f 0004 	mvn.w	r0, #4
 800358e:	f7ff ffcf 	bl	8003530 <__NVIC_SetPriority>
#endif
}
 8003592:	bf00      	nop
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800359e:	f3ef 8305 	mrs	r3, IPSR
 80035a2:	603b      	str	r3, [r7, #0]
  return(result);
 80035a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80035aa:	f06f 0305 	mvn.w	r3, #5
 80035ae:	607b      	str	r3, [r7, #4]
 80035b0:	e00c      	b.n	80035cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80035b2:	4b0a      	ldr	r3, [pc, #40]	@ (80035dc <osKernelInitialize+0x44>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d105      	bne.n	80035c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80035ba:	4b08      	ldr	r3, [pc, #32]	@ (80035dc <osKernelInitialize+0x44>)
 80035bc:	2201      	movs	r2, #1
 80035be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80035c0:	2300      	movs	r3, #0
 80035c2:	607b      	str	r3, [r7, #4]
 80035c4:	e002      	b.n	80035cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80035c6:	f04f 33ff 	mov.w	r3, #4294967295
 80035ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80035cc:	687b      	ldr	r3, [r7, #4]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	2000056c 	.word	0x2000056c

080035e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035e6:	f3ef 8305 	mrs	r3, IPSR
 80035ea:	603b      	str	r3, [r7, #0]
  return(result);
 80035ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <osKernelStart+0x1a>
    stat = osErrorISR;
 80035f2:	f06f 0305 	mvn.w	r3, #5
 80035f6:	607b      	str	r3, [r7, #4]
 80035f8:	e010      	b.n	800361c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80035fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003628 <osKernelStart+0x48>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d109      	bne.n	8003616 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003602:	f7ff ffbf 	bl	8003584 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003606:	4b08      	ldr	r3, [pc, #32]	@ (8003628 <osKernelStart+0x48>)
 8003608:	2202      	movs	r2, #2
 800360a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800360c:	f001 fba4 	bl	8004d58 <vTaskStartScheduler>
      stat = osOK;
 8003610:	2300      	movs	r3, #0
 8003612:	607b      	str	r3, [r7, #4]
 8003614:	e002      	b.n	800361c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003616:	f04f 33ff 	mov.w	r3, #4294967295
 800361a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800361c:	687b      	ldr	r3, [r7, #4]
}
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	2000056c 	.word	0x2000056c

0800362c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800362c:	b580      	push	{r7, lr}
 800362e:	b08e      	sub	sp, #56	@ 0x38
 8003630:	af04      	add	r7, sp, #16
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003638:	2300      	movs	r3, #0
 800363a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800363c:	f3ef 8305 	mrs	r3, IPSR
 8003640:	617b      	str	r3, [r7, #20]
  return(result);
 8003642:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003644:	2b00      	cmp	r3, #0
 8003646:	d17e      	bne.n	8003746 <osThreadNew+0x11a>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d07b      	beq.n	8003746 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800364e:	2380      	movs	r3, #128	@ 0x80
 8003650:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003652:	2318      	movs	r3, #24
 8003654:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003656:	2300      	movs	r3, #0
 8003658:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800365a:	f04f 33ff 	mov.w	r3, #4294967295
 800365e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d045      	beq.n	80036f2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <osThreadNew+0x48>
        name = attr->name;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d008      	beq.n	800369a <osThreadNew+0x6e>
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	2b38      	cmp	r3, #56	@ 0x38
 800368c:	d805      	bhi.n	800369a <osThreadNew+0x6e>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <osThreadNew+0x72>
        return (NULL);
 800369a:	2300      	movs	r3, #0
 800369c:	e054      	b.n	8003748 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	089b      	lsrs	r3, r3, #2
 80036ac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00e      	beq.n	80036d4 <osThreadNew+0xa8>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	2b5b      	cmp	r3, #91	@ 0x5b
 80036bc:	d90a      	bls.n	80036d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d006      	beq.n	80036d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d002      	beq.n	80036d4 <osThreadNew+0xa8>
        mem = 1;
 80036ce:	2301      	movs	r3, #1
 80036d0:	61bb      	str	r3, [r7, #24]
 80036d2:	e010      	b.n	80036f6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10c      	bne.n	80036f6 <osThreadNew+0xca>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d108      	bne.n	80036f6 <osThreadNew+0xca>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d104      	bne.n	80036f6 <osThreadNew+0xca>
          mem = 0;
 80036ec:	2300      	movs	r3, #0
 80036ee:	61bb      	str	r3, [r7, #24]
 80036f0:	e001      	b.n	80036f6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80036f2:	2300      	movs	r3, #0
 80036f4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d110      	bne.n	800371e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003704:	9202      	str	r2, [sp, #8]
 8003706:	9301      	str	r3, [sp, #4]
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	6a3a      	ldr	r2, [r7, #32]
 8003710:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f001 f944 	bl	80049a0 <xTaskCreateStatic>
 8003718:	4603      	mov	r3, r0
 800371a:	613b      	str	r3, [r7, #16]
 800371c:	e013      	b.n	8003746 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d110      	bne.n	8003746 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	b29a      	uxth	r2, r3
 8003728:	f107 0310 	add.w	r3, r7, #16
 800372c:	9301      	str	r3, [sp, #4]
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f001 f992 	bl	8004a60 <xTaskCreate>
 800373c:	4603      	mov	r3, r0
 800373e:	2b01      	cmp	r3, #1
 8003740:	d001      	beq.n	8003746 <osThreadNew+0x11a>
            hTask = NULL;
 8003742:	2300      	movs	r3, #0
 8003744:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003746:	693b      	ldr	r3, [r7, #16]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3728      	adds	r7, #40	@ 0x28
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003758:	f3ef 8305 	mrs	r3, IPSR
 800375c:	60bb      	str	r3, [r7, #8]
  return(result);
 800375e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003760:	2b00      	cmp	r3, #0
 8003762:	d003      	beq.n	800376c <osDelay+0x1c>
    stat = osErrorISR;
 8003764:	f06f 0305 	mvn.w	r3, #5
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	e007      	b.n	800377c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800376c:	2300      	movs	r3, #0
 800376e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d002      	beq.n	800377c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f001 fab8 	bl	8004cec <vTaskDelay>
    }
  }

  return (stat);
 800377c:	68fb      	ldr	r3, [r7, #12]
}
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003786:	b580      	push	{r7, lr}
 8003788:	b088      	sub	sp, #32
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800378e:	2300      	movs	r3, #0
 8003790:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003792:	f3ef 8305 	mrs	r3, IPSR
 8003796:	60bb      	str	r3, [r7, #8]
  return(result);
 8003798:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800379a:	2b00      	cmp	r3, #0
 800379c:	d174      	bne.n	8003888 <osMutexNew+0x102>
    if (attr != NULL) {
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <osMutexNew+0x26>
      type = attr->attr_bits;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	61bb      	str	r3, [r7, #24]
 80037aa:	e001      	b.n	80037b0 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <osMutexNew+0x3a>
      rmtx = 1U;
 80037ba:	2301      	movs	r3, #1
 80037bc:	617b      	str	r3, [r7, #20]
 80037be:	e001      	b.n	80037c4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d15c      	bne.n	8003888 <osMutexNew+0x102>
      mem = -1;
 80037ce:	f04f 33ff 	mov.w	r3, #4294967295
 80037d2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d015      	beq.n	8003806 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d006      	beq.n	80037f0 <osMutexNew+0x6a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	2b4f      	cmp	r3, #79	@ 0x4f
 80037e8:	d902      	bls.n	80037f0 <osMutexNew+0x6a>
          mem = 1;
 80037ea:	2301      	movs	r3, #1
 80037ec:	613b      	str	r3, [r7, #16]
 80037ee:	e00c      	b.n	800380a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d108      	bne.n	800380a <osMutexNew+0x84>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d104      	bne.n	800380a <osMutexNew+0x84>
            mem = 0;
 8003800:	2300      	movs	r3, #0
 8003802:	613b      	str	r3, [r7, #16]
 8003804:	e001      	b.n	800380a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8003806:	2300      	movs	r3, #0
 8003808:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d112      	bne.n	8003836 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d007      	beq.n	8003826 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	4619      	mov	r1, r3
 800381c:	2004      	movs	r0, #4
 800381e:	f000 fb20 	bl	8003e62 <xQueueCreateMutexStatic>
 8003822:	61f8      	str	r0, [r7, #28]
 8003824:	e016      	b.n	8003854 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	4619      	mov	r1, r3
 800382c:	2001      	movs	r0, #1
 800382e:	f000 fb18 	bl	8003e62 <xQueueCreateMutexStatic>
 8003832:	61f8      	str	r0, [r7, #28]
 8003834:	e00e      	b.n	8003854 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10b      	bne.n	8003854 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d004      	beq.n	800384c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8003842:	2004      	movs	r0, #4
 8003844:	f000 faf5 	bl	8003e32 <xQueueCreateMutex>
 8003848:	61f8      	str	r0, [r7, #28]
 800384a:	e003      	b.n	8003854 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800384c:	2001      	movs	r0, #1
 800384e:	f000 faf0 	bl	8003e32 <xQueueCreateMutex>
 8003852:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00c      	beq.n	8003874 <osMutexNew+0xee>
        if (attr != NULL) {
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <osMutexNew+0xe2>
          name = attr->name;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	e001      	b.n	800386c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8003868:	2300      	movs	r3, #0
 800386a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800386c:	68f9      	ldr	r1, [r7, #12]
 800386e:	69f8      	ldr	r0, [r7, #28]
 8003870:	f001 f838 	bl	80048e4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d006      	beq.n	8003888 <osMutexNew+0x102>
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f043 0301 	orr.w	r3, r3, #1
 8003886:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8003888:	69fb      	ldr	r3, [r7, #28]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3720      	adds	r7, #32
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8003892:	b580      	push	{r7, lr}
 8003894:	b086      	sub	sp, #24
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
 800389a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f023 0301 	bic.w	r3, r3, #1
 80038a2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80038ac:	2300      	movs	r3, #0
 80038ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038b0:	f3ef 8305 	mrs	r3, IPSR
 80038b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80038b6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80038bc:	f06f 0305 	mvn.w	r3, #5
 80038c0:	617b      	str	r3, [r7, #20]
 80038c2:	e02c      	b.n	800391e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d103      	bne.n	80038d2 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80038ca:	f06f 0303 	mvn.w	r3, #3
 80038ce:	617b      	str	r3, [r7, #20]
 80038d0:	e025      	b.n	800391e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d011      	beq.n	80038fc <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80038d8:	6839      	ldr	r1, [r7, #0]
 80038da:	6938      	ldr	r0, [r7, #16]
 80038dc:	f000 fb11 	bl	8003f02 <xQueueTakeMutexRecursive>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d01b      	beq.n	800391e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80038ec:	f06f 0301 	mvn.w	r3, #1
 80038f0:	617b      	str	r3, [r7, #20]
 80038f2:	e014      	b.n	800391e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80038f4:	f06f 0302 	mvn.w	r3, #2
 80038f8:	617b      	str	r3, [r7, #20]
 80038fa:	e010      	b.n	800391e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80038fc:	6839      	ldr	r1, [r7, #0]
 80038fe:	6938      	ldr	r0, [r7, #16]
 8003900:	f000 fdb8 	bl	8004474 <xQueueSemaphoreTake>
 8003904:	4603      	mov	r3, r0
 8003906:	2b01      	cmp	r3, #1
 8003908:	d009      	beq.n	800391e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8003910:	f06f 0301 	mvn.w	r3, #1
 8003914:	617b      	str	r3, [r7, #20]
 8003916:	e002      	b.n	800391e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003918:	f06f 0302 	mvn.w	r3, #2
 800391c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800391e:	697b      	ldr	r3, [r7, #20]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3718      	adds	r7, #24
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f023 0301 	bic.w	r3, r3, #1
 8003936:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003940:	2300      	movs	r3, #0
 8003942:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003944:	f3ef 8305 	mrs	r3, IPSR
 8003948:	60bb      	str	r3, [r7, #8]
  return(result);
 800394a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <osMutexRelease+0x30>
    stat = osErrorISR;
 8003950:	f06f 0305 	mvn.w	r3, #5
 8003954:	617b      	str	r3, [r7, #20]
 8003956:	e01f      	b.n	8003998 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d103      	bne.n	8003966 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800395e:	f06f 0303 	mvn.w	r3, #3
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	e018      	b.n	8003998 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d009      	beq.n	8003980 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800396c:	6938      	ldr	r0, [r7, #16]
 800396e:	f000 fa93 	bl	8003e98 <xQueueGiveMutexRecursive>
 8003972:	4603      	mov	r3, r0
 8003974:	2b01      	cmp	r3, #1
 8003976:	d00f      	beq.n	8003998 <osMutexRelease+0x70>
        stat = osErrorResource;
 8003978:	f06f 0302 	mvn.w	r3, #2
 800397c:	617b      	str	r3, [r7, #20]
 800397e:	e00b      	b.n	8003998 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8003980:	2300      	movs	r3, #0
 8003982:	2200      	movs	r2, #0
 8003984:	2100      	movs	r1, #0
 8003986:	6938      	ldr	r0, [r7, #16]
 8003988:	f000 faf2 	bl	8003f70 <xQueueGenericSend>
 800398c:	4603      	mov	r3, r0
 800398e:	2b01      	cmp	r3, #1
 8003990:	d002      	beq.n	8003998 <osMutexRelease+0x70>
        stat = osErrorResource;
 8003992:	f06f 0302 	mvn.w	r3, #2
 8003996:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003998:	697b      	ldr	r3, [r7, #20]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4a07      	ldr	r2, [pc, #28]	@ (80039d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80039b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	4a06      	ldr	r2, [pc, #24]	@ (80039d4 <vApplicationGetIdleTaskMemory+0x30>)
 80039ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2280      	movs	r2, #128	@ 0x80
 80039c0:	601a      	str	r2, [r3, #0]
}
 80039c2:	bf00      	nop
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	20000570 	.word	0x20000570
 80039d4:	200005cc 	.word	0x200005cc

080039d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4a07      	ldr	r2, [pc, #28]	@ (8003a04 <vApplicationGetTimerTaskMemory+0x2c>)
 80039e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	4a06      	ldr	r2, [pc, #24]	@ (8003a08 <vApplicationGetTimerTaskMemory+0x30>)
 80039ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039f6:	601a      	str	r2, [r3, #0]
}
 80039f8:	bf00      	nop
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	200007cc 	.word	0x200007cc
 8003a08:	20000828 	.word	0x20000828

08003a0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f103 0208 	add.w	r2, r3, #8
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f04f 32ff 	mov.w	r2, #4294967295
 8003a24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f103 0208 	add.w	r2, r3, #8
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f103 0208 	add.w	r2, r3, #8
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a66:	b480      	push	{r7}
 8003a68:	b085      	sub	sp, #20
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
 8003a6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	1c5a      	adds	r2, r3, #1
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	601a      	str	r2, [r3, #0]
}
 8003aa2:	bf00      	nop
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b085      	sub	sp, #20
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
 8003ab6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac4:	d103      	bne.n	8003ace <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	60fb      	str	r3, [r7, #12]
 8003acc:	e00c      	b.n	8003ae8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	3308      	adds	r3, #8
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	e002      	b.n	8003adc <vListInsert+0x2e>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d2f6      	bcs.n	8003ad6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	601a      	str	r2, [r3, #0]
}
 8003b14:	bf00      	nop
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	6892      	ldr	r2, [r2, #8]
 8003b36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6852      	ldr	r2, [r2, #4]
 8003b40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d103      	bne.n	8003b54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	1e5a      	subs	r2, r3, #1
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10b      	bne.n	8003ba0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b8c:	f383 8811 	msr	BASEPRI, r3
 8003b90:	f3bf 8f6f 	isb	sy
 8003b94:	f3bf 8f4f 	dsb	sy
 8003b98:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003b9a:	bf00      	nop
 8003b9c:	bf00      	nop
 8003b9e:	e7fd      	b.n	8003b9c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003ba0:	f002 fba2 	bl	80062e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bac:	68f9      	ldr	r1, [r7, #12]
 8003bae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003bb0:	fb01 f303 	mul.w	r3, r1, r3
 8003bb4:	441a      	add	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	68f9      	ldr	r1, [r7, #12]
 8003bd4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003bd6:	fb01 f303 	mul.w	r3, r1, r3
 8003bda:	441a      	add	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	22ff      	movs	r2, #255	@ 0xff
 8003be4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	22ff      	movs	r2, #255	@ 0xff
 8003bec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d114      	bne.n	8003c20 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d01a      	beq.n	8003c34 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	3310      	adds	r3, #16
 8003c02:	4618      	mov	r0, r3
 8003c04:	f001 fb36 	bl	8005274 <xTaskRemoveFromEventList>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d012      	beq.n	8003c34 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c44 <xQueueGenericReset+0xd0>)
 8003c10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	f3bf 8f4f 	dsb	sy
 8003c1a:	f3bf 8f6f 	isb	sy
 8003c1e:	e009      	b.n	8003c34 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	3310      	adds	r3, #16
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7ff fef1 	bl	8003a0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	3324      	adds	r3, #36	@ 0x24
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7ff feec 	bl	8003a0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003c34:	f002 fb8a 	bl	800634c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003c38:	2301      	movs	r3, #1
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	e000ed04 	.word	0xe000ed04

08003c48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b08e      	sub	sp, #56	@ 0x38
 8003c4c:	af02      	add	r7, sp, #8
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
 8003c54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10b      	bne.n	8003c74 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c60:	f383 8811 	msr	BASEPRI, r3
 8003c64:	f3bf 8f6f 	isb	sy
 8003c68:	f3bf 8f4f 	dsb	sy
 8003c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003c6e:	bf00      	nop
 8003c70:	bf00      	nop
 8003c72:	e7fd      	b.n	8003c70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10b      	bne.n	8003c92 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c7e:	f383 8811 	msr	BASEPRI, r3
 8003c82:	f3bf 8f6f 	isb	sy
 8003c86:	f3bf 8f4f 	dsb	sy
 8003c8a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003c8c:	bf00      	nop
 8003c8e:	bf00      	nop
 8003c90:	e7fd      	b.n	8003c8e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d002      	beq.n	8003c9e <xQueueGenericCreateStatic+0x56>
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <xQueueGenericCreateStatic+0x5a>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e000      	b.n	8003ca4 <xQueueGenericCreateStatic+0x5c>
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10b      	bne.n	8003cc0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cac:	f383 8811 	msr	BASEPRI, r3
 8003cb0:	f3bf 8f6f 	isb	sy
 8003cb4:	f3bf 8f4f 	dsb	sy
 8003cb8:	623b      	str	r3, [r7, #32]
}
 8003cba:	bf00      	nop
 8003cbc:	bf00      	nop
 8003cbe:	e7fd      	b.n	8003cbc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d102      	bne.n	8003ccc <xQueueGenericCreateStatic+0x84>
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d101      	bne.n	8003cd0 <xQueueGenericCreateStatic+0x88>
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e000      	b.n	8003cd2 <xQueueGenericCreateStatic+0x8a>
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10b      	bne.n	8003cee <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cda:	f383 8811 	msr	BASEPRI, r3
 8003cde:	f3bf 8f6f 	isb	sy
 8003ce2:	f3bf 8f4f 	dsb	sy
 8003ce6:	61fb      	str	r3, [r7, #28]
}
 8003ce8:	bf00      	nop
 8003cea:	bf00      	nop
 8003cec:	e7fd      	b.n	8003cea <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003cee:	2350      	movs	r3, #80	@ 0x50
 8003cf0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2b50      	cmp	r3, #80	@ 0x50
 8003cf6:	d00b      	beq.n	8003d10 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cfc:	f383 8811 	msr	BASEPRI, r3
 8003d00:	f3bf 8f6f 	isb	sy
 8003d04:	f3bf 8f4f 	dsb	sy
 8003d08:	61bb      	str	r3, [r7, #24]
}
 8003d0a:	bf00      	nop
 8003d0c:	bf00      	nop
 8003d0e:	e7fd      	b.n	8003d0c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003d10:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00d      	beq.n	8003d38 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d24:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d2a:	9300      	str	r3, [sp, #0]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	68b9      	ldr	r1, [r7, #8]
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f000 f840 	bl	8003db8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3730      	adds	r7, #48	@ 0x30
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b08a      	sub	sp, #40	@ 0x28
 8003d46:	af02      	add	r7, sp, #8
 8003d48:	60f8      	str	r0, [r7, #12]
 8003d4a:	60b9      	str	r1, [r7, #8]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10b      	bne.n	8003d6e <xQueueGenericCreate+0x2c>
	__asm volatile
 8003d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d5a:	f383 8811 	msr	BASEPRI, r3
 8003d5e:	f3bf 8f6f 	isb	sy
 8003d62:	f3bf 8f4f 	dsb	sy
 8003d66:	613b      	str	r3, [r7, #16]
}
 8003d68:	bf00      	nop
 8003d6a:	bf00      	nop
 8003d6c:	e7fd      	b.n	8003d6a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	fb02 f303 	mul.w	r3, r2, r3
 8003d76:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	3350      	adds	r3, #80	@ 0x50
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f002 fbd5 	bl	800652c <pvPortMalloc>
 8003d82:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d011      	beq.n	8003dae <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	3350      	adds	r3, #80	@ 0x50
 8003d92:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d9c:	79fa      	ldrb	r2, [r7, #7]
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	4613      	mov	r3, r2
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	68b9      	ldr	r1, [r7, #8]
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 f805 	bl	8003db8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003dae:	69bb      	ldr	r3, [r7, #24]
	}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3720      	adds	r7, #32
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
 8003dc4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d103      	bne.n	8003dd4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	e002      	b.n	8003dda <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003de6:	2101      	movs	r1, #1
 8003de8:	69b8      	ldr	r0, [r7, #24]
 8003dea:	f7ff fec3 	bl	8003b74 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	78fa      	ldrb	r2, [r7, #3]
 8003df2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003df6:	bf00      	nop
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b082      	sub	sp, #8
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00e      	beq.n	8003e2a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003e1e:	2300      	movs	r3, #0
 8003e20:	2200      	movs	r2, #0
 8003e22:	2100      	movs	r1, #0
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f8a3 	bl	8003f70 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003e2a:	bf00      	nop
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b086      	sub	sp, #24
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	4603      	mov	r3, r0
 8003e3a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	617b      	str	r3, [r7, #20]
 8003e40:	2300      	movs	r3, #0
 8003e42:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003e44:	79fb      	ldrb	r3, [r7, #7]
 8003e46:	461a      	mov	r2, r3
 8003e48:	6939      	ldr	r1, [r7, #16]
 8003e4a:	6978      	ldr	r0, [r7, #20]
 8003e4c:	f7ff ff79 	bl	8003d42 <xQueueGenericCreate>
 8003e50:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f7ff ffd3 	bl	8003dfe <prvInitialiseMutex>

		return xNewQueue;
 8003e58:	68fb      	ldr	r3, [r7, #12]
	}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3718      	adds	r7, #24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b088      	sub	sp, #32
 8003e66:	af02      	add	r7, sp, #8
 8003e68:	4603      	mov	r3, r0
 8003e6a:	6039      	str	r1, [r7, #0]
 8003e6c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	617b      	str	r3, [r7, #20]
 8003e72:	2300      	movs	r3, #0
 8003e74:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003e76:	79fb      	ldrb	r3, [r7, #7]
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	6939      	ldr	r1, [r7, #16]
 8003e80:	6978      	ldr	r0, [r7, #20]
 8003e82:	f7ff fee1 	bl	8003c48 <xQueueGenericCreateStatic>
 8003e86:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f7ff ffb8 	bl	8003dfe <prvInitialiseMutex>

		return xNewQueue;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
	}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3718      	adds	r7, #24
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8003e98:	b590      	push	{r4, r7, lr}
 8003e9a:	b087      	sub	sp, #28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10b      	bne.n	8003ec2 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8003eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eae:	f383 8811 	msr	BASEPRI, r3
 8003eb2:	f3bf 8f6f 	isb	sy
 8003eb6:	f3bf 8f4f 	dsb	sy
 8003eba:	60fb      	str	r3, [r7, #12]
}
 8003ebc:	bf00      	nop
 8003ebe:	bf00      	nop
 8003ec0:	e7fd      	b.n	8003ebe <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	689c      	ldr	r4, [r3, #8]
 8003ec6:	f001 fb95 	bl	80055f4 <xTaskGetCurrentTaskHandle>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	429c      	cmp	r4, r3
 8003ece:	d111      	bne.n	8003ef4 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	1e5a      	subs	r2, r3, #1
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d105      	bne.n	8003eee <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	6938      	ldr	r0, [r7, #16]
 8003eea:	f000 f841 	bl	8003f70 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	617b      	str	r3, [r7, #20]
 8003ef2:	e001      	b.n	8003ef8 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8003ef8:	697b      	ldr	r3, [r7, #20]
	}
 8003efa:	4618      	mov	r0, r3
 8003efc:	371c      	adds	r7, #28
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd90      	pop	{r4, r7, pc}

08003f02 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8003f02:	b590      	push	{r4, r7, lr}
 8003f04:	b087      	sub	sp, #28
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
 8003f0a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10b      	bne.n	8003f2e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8003f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f1a:	f383 8811 	msr	BASEPRI, r3
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	60fb      	str	r3, [r7, #12]
}
 8003f28:	bf00      	nop
 8003f2a:	bf00      	nop
 8003f2c:	e7fd      	b.n	8003f2a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	689c      	ldr	r4, [r3, #8]
 8003f32:	f001 fb5f 	bl	80055f4 <xTaskGetCurrentTaskHandle>
 8003f36:	4603      	mov	r3, r0
 8003f38:	429c      	cmp	r4, r3
 8003f3a:	d107      	bne.n	8003f4c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8003f46:	2301      	movs	r3, #1
 8003f48:	617b      	str	r3, [r7, #20]
 8003f4a:	e00c      	b.n	8003f66 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8003f4c:	6839      	ldr	r1, [r7, #0]
 8003f4e:	6938      	ldr	r0, [r7, #16]
 8003f50:	f000 fa90 	bl	8004474 <xQueueSemaphoreTake>
 8003f54:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d004      	beq.n	8003f66 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8003f66:	697b      	ldr	r3, [r7, #20]
	}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	371c      	adds	r7, #28
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd90      	pop	{r4, r7, pc}

08003f70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b08e      	sub	sp, #56	@ 0x38
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
 8003f7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10b      	bne.n	8003fa4 <xQueueGenericSend+0x34>
	__asm volatile
 8003f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f90:	f383 8811 	msr	BASEPRI, r3
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	f3bf 8f4f 	dsb	sy
 8003f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003f9e:	bf00      	nop
 8003fa0:	bf00      	nop
 8003fa2:	e7fd      	b.n	8003fa0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d103      	bne.n	8003fb2 <xQueueGenericSend+0x42>
 8003faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <xQueueGenericSend+0x46>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e000      	b.n	8003fb8 <xQueueGenericSend+0x48>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10b      	bne.n	8003fd4 <xQueueGenericSend+0x64>
	__asm volatile
 8003fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc0:	f383 8811 	msr	BASEPRI, r3
 8003fc4:	f3bf 8f6f 	isb	sy
 8003fc8:	f3bf 8f4f 	dsb	sy
 8003fcc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003fce:	bf00      	nop
 8003fd0:	bf00      	nop
 8003fd2:	e7fd      	b.n	8003fd0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d103      	bne.n	8003fe2 <xQueueGenericSend+0x72>
 8003fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <xQueueGenericSend+0x76>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e000      	b.n	8003fe8 <xQueueGenericSend+0x78>
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10b      	bne.n	8004004 <xQueueGenericSend+0x94>
	__asm volatile
 8003fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ff0:	f383 8811 	msr	BASEPRI, r3
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	623b      	str	r3, [r7, #32]
}
 8003ffe:	bf00      	nop
 8004000:	bf00      	nop
 8004002:	e7fd      	b.n	8004000 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004004:	f001 fb06 	bl	8005614 <xTaskGetSchedulerState>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d102      	bne.n	8004014 <xQueueGenericSend+0xa4>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d101      	bne.n	8004018 <xQueueGenericSend+0xa8>
 8004014:	2301      	movs	r3, #1
 8004016:	e000      	b.n	800401a <xQueueGenericSend+0xaa>
 8004018:	2300      	movs	r3, #0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10b      	bne.n	8004036 <xQueueGenericSend+0xc6>
	__asm volatile
 800401e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004022:	f383 8811 	msr	BASEPRI, r3
 8004026:	f3bf 8f6f 	isb	sy
 800402a:	f3bf 8f4f 	dsb	sy
 800402e:	61fb      	str	r3, [r7, #28]
}
 8004030:	bf00      	nop
 8004032:	bf00      	nop
 8004034:	e7fd      	b.n	8004032 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004036:	f002 f957 	bl	80062e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800403a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800403c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800403e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004042:	429a      	cmp	r2, r3
 8004044:	d302      	bcc.n	800404c <xQueueGenericSend+0xdc>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b02      	cmp	r3, #2
 800404a:	d129      	bne.n	80040a0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	68b9      	ldr	r1, [r7, #8]
 8004050:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004052:	f000 fb37 	bl	80046c4 <prvCopyDataToQueue>
 8004056:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800405a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405c:	2b00      	cmp	r3, #0
 800405e:	d010      	beq.n	8004082 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004062:	3324      	adds	r3, #36	@ 0x24
 8004064:	4618      	mov	r0, r3
 8004066:	f001 f905 	bl	8005274 <xTaskRemoveFromEventList>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d013      	beq.n	8004098 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004070:	4b3f      	ldr	r3, [pc, #252]	@ (8004170 <xQueueGenericSend+0x200>)
 8004072:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	f3bf 8f6f 	isb	sy
 8004080:	e00a      	b.n	8004098 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004084:	2b00      	cmp	r3, #0
 8004086:	d007      	beq.n	8004098 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004088:	4b39      	ldr	r3, [pc, #228]	@ (8004170 <xQueueGenericSend+0x200>)
 800408a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004098:	f002 f958 	bl	800634c <vPortExitCritical>
				return pdPASS;
 800409c:	2301      	movs	r3, #1
 800409e:	e063      	b.n	8004168 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d103      	bne.n	80040ae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80040a6:	f002 f951 	bl	800634c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80040aa:	2300      	movs	r3, #0
 80040ac:	e05c      	b.n	8004168 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80040ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d106      	bne.n	80040c2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80040b4:	f107 0314 	add.w	r3, r7, #20
 80040b8:	4618      	mov	r0, r3
 80040ba:	f001 f93f 	bl	800533c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80040be:	2301      	movs	r3, #1
 80040c0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80040c2:	f002 f943 	bl	800634c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80040c6:	f000 feaf 	bl	8004e28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80040ca:	f002 f90d 	bl	80062e8 <vPortEnterCritical>
 80040ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80040d4:	b25b      	sxtb	r3, r3
 80040d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040da:	d103      	bne.n	80040e4 <xQueueGenericSend+0x174>
 80040dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80040ea:	b25b      	sxtb	r3, r3
 80040ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f0:	d103      	bne.n	80040fa <xQueueGenericSend+0x18a>
 80040f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80040fa:	f002 f927 	bl	800634c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040fe:	1d3a      	adds	r2, r7, #4
 8004100:	f107 0314 	add.w	r3, r7, #20
 8004104:	4611      	mov	r1, r2
 8004106:	4618      	mov	r0, r3
 8004108:	f001 f92e 	bl	8005368 <xTaskCheckForTimeOut>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d124      	bne.n	800415c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004112:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004114:	f000 fbce 	bl	80048b4 <prvIsQueueFull>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d018      	beq.n	8004150 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800411e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004120:	3310      	adds	r3, #16
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	4611      	mov	r1, r2
 8004126:	4618      	mov	r0, r3
 8004128:	f001 f852 	bl	80051d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800412c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800412e:	f000 fb59 	bl	80047e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004132:	f000 fe87 	bl	8004e44 <xTaskResumeAll>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	f47f af7c 	bne.w	8004036 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800413e:	4b0c      	ldr	r3, [pc, #48]	@ (8004170 <xQueueGenericSend+0x200>)
 8004140:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	f3bf 8f4f 	dsb	sy
 800414a:	f3bf 8f6f 	isb	sy
 800414e:	e772      	b.n	8004036 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004150:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004152:	f000 fb47 	bl	80047e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004156:	f000 fe75 	bl	8004e44 <xTaskResumeAll>
 800415a:	e76c      	b.n	8004036 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800415c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800415e:	f000 fb41 	bl	80047e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004162:	f000 fe6f 	bl	8004e44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004166:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004168:	4618      	mov	r0, r3
 800416a:	3738      	adds	r7, #56	@ 0x38
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	e000ed04 	.word	0xe000ed04

08004174 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b090      	sub	sp, #64	@ 0x40
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
 8004180:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10b      	bne.n	80041a4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800418c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004190:	f383 8811 	msr	BASEPRI, r3
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800419e:	bf00      	nop
 80041a0:	bf00      	nop
 80041a2:	e7fd      	b.n	80041a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d103      	bne.n	80041b2 <xQueueGenericSendFromISR+0x3e>
 80041aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <xQueueGenericSendFromISR+0x42>
 80041b2:	2301      	movs	r3, #1
 80041b4:	e000      	b.n	80041b8 <xQueueGenericSendFromISR+0x44>
 80041b6:	2300      	movs	r3, #0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10b      	bne.n	80041d4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80041bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c0:	f383 8811 	msr	BASEPRI, r3
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80041ce:	bf00      	nop
 80041d0:	bf00      	nop
 80041d2:	e7fd      	b.n	80041d0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d103      	bne.n	80041e2 <xQueueGenericSendFromISR+0x6e>
 80041da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d101      	bne.n	80041e6 <xQueueGenericSendFromISR+0x72>
 80041e2:	2301      	movs	r3, #1
 80041e4:	e000      	b.n	80041e8 <xQueueGenericSendFromISR+0x74>
 80041e6:	2300      	movs	r3, #0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10b      	bne.n	8004204 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80041ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f0:	f383 8811 	msr	BASEPRI, r3
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	623b      	str	r3, [r7, #32]
}
 80041fe:	bf00      	nop
 8004200:	bf00      	nop
 8004202:	e7fd      	b.n	8004200 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004204:	f002 f950 	bl	80064a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004208:	f3ef 8211 	mrs	r2, BASEPRI
 800420c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004210:	f383 8811 	msr	BASEPRI, r3
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	61fa      	str	r2, [r7, #28]
 800421e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004220:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004222:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004226:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800422a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800422c:	429a      	cmp	r2, r3
 800422e:	d302      	bcc.n	8004236 <xQueueGenericSendFromISR+0xc2>
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	2b02      	cmp	r3, #2
 8004234:	d12f      	bne.n	8004296 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004238:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800423c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004244:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	68b9      	ldr	r1, [r7, #8]
 800424a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800424c:	f000 fa3a 	bl	80046c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004250:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004258:	d112      	bne.n	8004280 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800425a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800425c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425e:	2b00      	cmp	r3, #0
 8004260:	d016      	beq.n	8004290 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004264:	3324      	adds	r3, #36	@ 0x24
 8004266:	4618      	mov	r0, r3
 8004268:	f001 f804 	bl	8005274 <xTaskRemoveFromEventList>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00e      	beq.n	8004290 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00b      	beq.n	8004290 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	e007      	b.n	8004290 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004280:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004284:	3301      	adds	r3, #1
 8004286:	b2db      	uxtb	r3, r3
 8004288:	b25a      	sxtb	r2, r3
 800428a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800428c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004290:	2301      	movs	r3, #1
 8004292:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004294:	e001      	b.n	800429a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004296:	2300      	movs	r3, #0
 8004298:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800429a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800429c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80042a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80042a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3740      	adds	r7, #64	@ 0x40
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b08c      	sub	sp, #48	@ 0x30
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80042bc:	2300      	movs	r3, #0
 80042be:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80042c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10b      	bne.n	80042e2 <xQueueReceive+0x32>
	__asm volatile
 80042ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ce:	f383 8811 	msr	BASEPRI, r3
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	623b      	str	r3, [r7, #32]
}
 80042dc:	bf00      	nop
 80042de:	bf00      	nop
 80042e0:	e7fd      	b.n	80042de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d103      	bne.n	80042f0 <xQueueReceive+0x40>
 80042e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <xQueueReceive+0x44>
 80042f0:	2301      	movs	r3, #1
 80042f2:	e000      	b.n	80042f6 <xQueueReceive+0x46>
 80042f4:	2300      	movs	r3, #0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10b      	bne.n	8004312 <xQueueReceive+0x62>
	__asm volatile
 80042fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042fe:	f383 8811 	msr	BASEPRI, r3
 8004302:	f3bf 8f6f 	isb	sy
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	61fb      	str	r3, [r7, #28]
}
 800430c:	bf00      	nop
 800430e:	bf00      	nop
 8004310:	e7fd      	b.n	800430e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004312:	f001 f97f 	bl	8005614 <xTaskGetSchedulerState>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d102      	bne.n	8004322 <xQueueReceive+0x72>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <xQueueReceive+0x76>
 8004322:	2301      	movs	r3, #1
 8004324:	e000      	b.n	8004328 <xQueueReceive+0x78>
 8004326:	2300      	movs	r3, #0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10b      	bne.n	8004344 <xQueueReceive+0x94>
	__asm volatile
 800432c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004330:	f383 8811 	msr	BASEPRI, r3
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	f3bf 8f4f 	dsb	sy
 800433c:	61bb      	str	r3, [r7, #24]
}
 800433e:	bf00      	nop
 8004340:	bf00      	nop
 8004342:	e7fd      	b.n	8004340 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004344:	f001 ffd0 	bl	80062e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800434a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800434c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800434e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004350:	2b00      	cmp	r3, #0
 8004352:	d01f      	beq.n	8004394 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004354:	68b9      	ldr	r1, [r7, #8]
 8004356:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004358:	f000 fa1e 	bl	8004798 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800435c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435e:	1e5a      	subs	r2, r3, #1
 8004360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004362:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00f      	beq.n	800438c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800436c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800436e:	3310      	adds	r3, #16
 8004370:	4618      	mov	r0, r3
 8004372:	f000 ff7f 	bl	8005274 <xTaskRemoveFromEventList>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d007      	beq.n	800438c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800437c:	4b3c      	ldr	r3, [pc, #240]	@ (8004470 <xQueueReceive+0x1c0>)
 800437e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	f3bf 8f4f 	dsb	sy
 8004388:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800438c:	f001 ffde 	bl	800634c <vPortExitCritical>
				return pdPASS;
 8004390:	2301      	movs	r3, #1
 8004392:	e069      	b.n	8004468 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d103      	bne.n	80043a2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800439a:	f001 ffd7 	bl	800634c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800439e:	2300      	movs	r3, #0
 80043a0:	e062      	b.n	8004468 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d106      	bne.n	80043b6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043a8:	f107 0310 	add.w	r3, r7, #16
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 ffc5 	bl	800533c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043b2:	2301      	movs	r3, #1
 80043b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043b6:	f001 ffc9 	bl	800634c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043ba:	f000 fd35 	bl	8004e28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043be:	f001 ff93 	bl	80062e8 <vPortEnterCritical>
 80043c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80043c8:	b25b      	sxtb	r3, r3
 80043ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ce:	d103      	bne.n	80043d8 <xQueueReceive+0x128>
 80043d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80043de:	b25b      	sxtb	r3, r3
 80043e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e4:	d103      	bne.n	80043ee <xQueueReceive+0x13e>
 80043e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043ee:	f001 ffad 	bl	800634c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043f2:	1d3a      	adds	r2, r7, #4
 80043f4:	f107 0310 	add.w	r3, r7, #16
 80043f8:	4611      	mov	r1, r2
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 ffb4 	bl	8005368 <xTaskCheckForTimeOut>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d123      	bne.n	800444e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004406:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004408:	f000 fa3e 	bl	8004888 <prvIsQueueEmpty>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d017      	beq.n	8004442 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004414:	3324      	adds	r3, #36	@ 0x24
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	4611      	mov	r1, r2
 800441a:	4618      	mov	r0, r3
 800441c:	f000 fed8 	bl	80051d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004420:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004422:	f000 f9df 	bl	80047e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004426:	f000 fd0d 	bl	8004e44 <xTaskResumeAll>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d189      	bne.n	8004344 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004430:	4b0f      	ldr	r3, [pc, #60]	@ (8004470 <xQueueReceive+0x1c0>)
 8004432:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	f3bf 8f4f 	dsb	sy
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	e780      	b.n	8004344 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004442:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004444:	f000 f9ce 	bl	80047e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004448:	f000 fcfc 	bl	8004e44 <xTaskResumeAll>
 800444c:	e77a      	b.n	8004344 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800444e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004450:	f000 f9c8 	bl	80047e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004454:	f000 fcf6 	bl	8004e44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004458:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800445a:	f000 fa15 	bl	8004888 <prvIsQueueEmpty>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	f43f af6f 	beq.w	8004344 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004466:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004468:	4618      	mov	r0, r3
 800446a:	3730      	adds	r7, #48	@ 0x30
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	e000ed04 	.word	0xe000ed04

08004474 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b08e      	sub	sp, #56	@ 0x38
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800447e:	2300      	movs	r3, #0
 8004480:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004486:	2300      	movs	r3, #0
 8004488:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800448a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10b      	bne.n	80044a8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004494:	f383 8811 	msr	BASEPRI, r3
 8004498:	f3bf 8f6f 	isb	sy
 800449c:	f3bf 8f4f 	dsb	sy
 80044a0:	623b      	str	r3, [r7, #32]
}
 80044a2:	bf00      	nop
 80044a4:	bf00      	nop
 80044a6:	e7fd      	b.n	80044a4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80044a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00b      	beq.n	80044c8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80044b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b4:	f383 8811 	msr	BASEPRI, r3
 80044b8:	f3bf 8f6f 	isb	sy
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	61fb      	str	r3, [r7, #28]
}
 80044c2:	bf00      	nop
 80044c4:	bf00      	nop
 80044c6:	e7fd      	b.n	80044c4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044c8:	f001 f8a4 	bl	8005614 <xTaskGetSchedulerState>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d102      	bne.n	80044d8 <xQueueSemaphoreTake+0x64>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d101      	bne.n	80044dc <xQueueSemaphoreTake+0x68>
 80044d8:	2301      	movs	r3, #1
 80044da:	e000      	b.n	80044de <xQueueSemaphoreTake+0x6a>
 80044dc:	2300      	movs	r3, #0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10b      	bne.n	80044fa <xQueueSemaphoreTake+0x86>
	__asm volatile
 80044e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e6:	f383 8811 	msr	BASEPRI, r3
 80044ea:	f3bf 8f6f 	isb	sy
 80044ee:	f3bf 8f4f 	dsb	sy
 80044f2:	61bb      	str	r3, [r7, #24]
}
 80044f4:	bf00      	nop
 80044f6:	bf00      	nop
 80044f8:	e7fd      	b.n	80044f6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80044fa:	f001 fef5 	bl	80062e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80044fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004502:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004506:	2b00      	cmp	r3, #0
 8004508:	d024      	beq.n	8004554 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800450a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800450c:	1e5a      	subs	r2, r3, #1
 800450e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004510:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d104      	bne.n	8004524 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800451a:	f001 f9f5 	bl	8005908 <pvTaskIncrementMutexHeldCount>
 800451e:	4602      	mov	r2, r0
 8004520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004522:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00f      	beq.n	800454c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800452c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800452e:	3310      	adds	r3, #16
 8004530:	4618      	mov	r0, r3
 8004532:	f000 fe9f 	bl	8005274 <xTaskRemoveFromEventList>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d007      	beq.n	800454c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800453c:	4b54      	ldr	r3, [pc, #336]	@ (8004690 <xQueueSemaphoreTake+0x21c>)
 800453e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	f3bf 8f4f 	dsb	sy
 8004548:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800454c:	f001 fefe 	bl	800634c <vPortExitCritical>
				return pdPASS;
 8004550:	2301      	movs	r3, #1
 8004552:	e098      	b.n	8004686 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d112      	bne.n	8004580 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800455a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00b      	beq.n	8004578 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004564:	f383 8811 	msr	BASEPRI, r3
 8004568:	f3bf 8f6f 	isb	sy
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	617b      	str	r3, [r7, #20]
}
 8004572:	bf00      	nop
 8004574:	bf00      	nop
 8004576:	e7fd      	b.n	8004574 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004578:	f001 fee8 	bl	800634c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800457c:	2300      	movs	r3, #0
 800457e:	e082      	b.n	8004686 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004582:	2b00      	cmp	r3, #0
 8004584:	d106      	bne.n	8004594 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004586:	f107 030c 	add.w	r3, r7, #12
 800458a:	4618      	mov	r0, r3
 800458c:	f000 fed6 	bl	800533c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004590:	2301      	movs	r3, #1
 8004592:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004594:	f001 feda 	bl	800634c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004598:	f000 fc46 	bl	8004e28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800459c:	f001 fea4 	bl	80062e8 <vPortEnterCritical>
 80045a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045a2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80045a6:	b25b      	sxtb	r3, r3
 80045a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ac:	d103      	bne.n	80045b6 <xQueueSemaphoreTake+0x142>
 80045ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80045bc:	b25b      	sxtb	r3, r3
 80045be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c2:	d103      	bne.n	80045cc <xQueueSemaphoreTake+0x158>
 80045c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045cc:	f001 febe 	bl	800634c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045d0:	463a      	mov	r2, r7
 80045d2:	f107 030c 	add.w	r3, r7, #12
 80045d6:	4611      	mov	r1, r2
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 fec5 	bl	8005368 <xTaskCheckForTimeOut>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d132      	bne.n	800464a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80045e6:	f000 f94f 	bl	8004888 <prvIsQueueEmpty>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d026      	beq.n	800463e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80045f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d109      	bne.n	800460c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80045f8:	f001 fe76 	bl	80062e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80045fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	4618      	mov	r0, r3
 8004602:	f001 f825 	bl	8005650 <xTaskPriorityInherit>
 8004606:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004608:	f001 fea0 	bl	800634c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800460c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800460e:	3324      	adds	r3, #36	@ 0x24
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	4611      	mov	r1, r2
 8004614:	4618      	mov	r0, r3
 8004616:	f000 fddb 	bl	80051d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800461a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800461c:	f000 f8e2 	bl	80047e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004620:	f000 fc10 	bl	8004e44 <xTaskResumeAll>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	f47f af67 	bne.w	80044fa <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800462c:	4b18      	ldr	r3, [pc, #96]	@ (8004690 <xQueueSemaphoreTake+0x21c>)
 800462e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	e75d      	b.n	80044fa <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800463e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004640:	f000 f8d0 	bl	80047e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004644:	f000 fbfe 	bl	8004e44 <xTaskResumeAll>
 8004648:	e757      	b.n	80044fa <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800464a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800464c:	f000 f8ca 	bl	80047e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004650:	f000 fbf8 	bl	8004e44 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004654:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004656:	f000 f917 	bl	8004888 <prvIsQueueEmpty>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	f43f af4c 	beq.w	80044fa <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00d      	beq.n	8004684 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004668:	f001 fe3e 	bl	80062e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800466c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800466e:	f000 f811 	bl	8004694 <prvGetDisinheritPriorityAfterTimeout>
 8004672:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800467a:	4618      	mov	r0, r3
 800467c:	f001 f8c0 	bl	8005800 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004680:	f001 fe64 	bl	800634c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004684:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004686:	4618      	mov	r0, r3
 8004688:	3738      	adds	r7, #56	@ 0x38
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	e000ed04 	.word	0xe000ed04

08004694 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d006      	beq.n	80046b2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	e001      	b.n	80046b6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80046b2:	2300      	movs	r3, #0
 80046b4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80046b6:	68fb      	ldr	r3, [r7, #12]
	}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3714      	adds	r7, #20
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80046d0:	2300      	movs	r3, #0
 80046d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10d      	bne.n	80046fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d14d      	bne.n	8004786 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f001 f816 	bl	8005720 <xTaskPriorityDisinherit>
 80046f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	609a      	str	r2, [r3, #8]
 80046fc:	e043      	b.n	8004786 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d119      	bne.n	8004738 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6858      	ldr	r0, [r3, #4]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470c:	461a      	mov	r2, r3
 800470e:	68b9      	ldr	r1, [r7, #8]
 8004710:	f002 f926 	bl	8006960 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471c:	441a      	add	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	429a      	cmp	r2, r3
 800472c:	d32b      	bcc.n	8004786 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	605a      	str	r2, [r3, #4]
 8004736:	e026      	b.n	8004786 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	68d8      	ldr	r0, [r3, #12]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004740:	461a      	mov	r2, r3
 8004742:	68b9      	ldr	r1, [r7, #8]
 8004744:	f002 f90c 	bl	8006960 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	68da      	ldr	r2, [r3, #12]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004750:	425b      	negs	r3, r3
 8004752:	441a      	add	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	68da      	ldr	r2, [r3, #12]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	429a      	cmp	r2, r3
 8004762:	d207      	bcs.n	8004774 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476c:	425b      	negs	r3, r3
 800476e:	441a      	add	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b02      	cmp	r3, #2
 8004778:	d105      	bne.n	8004786 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d002      	beq.n	8004786 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	3b01      	subs	r3, #1
 8004784:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1c5a      	adds	r2, r3, #1
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800478e:	697b      	ldr	r3, [r7, #20]
}
 8004790:	4618      	mov	r0, r3
 8004792:	3718      	adds	r7, #24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d018      	beq.n	80047dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68da      	ldr	r2, [r3, #12]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b2:	441a      	add	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68da      	ldr	r2, [r3, #12]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d303      	bcc.n	80047cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68d9      	ldr	r1, [r3, #12]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d4:	461a      	mov	r2, r3
 80047d6:	6838      	ldr	r0, [r7, #0]
 80047d8:	f002 f8c2 	bl	8006960 <memcpy>
	}
}
 80047dc:	bf00      	nop
 80047de:	3708      	adds	r7, #8
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80047ec:	f001 fd7c 	bl	80062e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80047f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80047f8:	e011      	b.n	800481e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d012      	beq.n	8004828 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	3324      	adds	r3, #36	@ 0x24
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fd34 	bl	8005274 <xTaskRemoveFromEventList>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004812:	f000 fe0d 	bl	8005430 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004816:	7bfb      	ldrb	r3, [r7, #15]
 8004818:	3b01      	subs	r3, #1
 800481a:	b2db      	uxtb	r3, r3
 800481c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800481e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004822:	2b00      	cmp	r3, #0
 8004824:	dce9      	bgt.n	80047fa <prvUnlockQueue+0x16>
 8004826:	e000      	b.n	800482a <prvUnlockQueue+0x46>
					break;
 8004828:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	22ff      	movs	r2, #255	@ 0xff
 800482e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004832:	f001 fd8b 	bl	800634c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004836:	f001 fd57 	bl	80062e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004840:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004842:	e011      	b.n	8004868 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d012      	beq.n	8004872 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3310      	adds	r3, #16
 8004850:	4618      	mov	r0, r3
 8004852:	f000 fd0f 	bl	8005274 <xTaskRemoveFromEventList>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800485c:	f000 fde8 	bl	8005430 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004860:	7bbb      	ldrb	r3, [r7, #14]
 8004862:	3b01      	subs	r3, #1
 8004864:	b2db      	uxtb	r3, r3
 8004866:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004868:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800486c:	2b00      	cmp	r3, #0
 800486e:	dce9      	bgt.n	8004844 <prvUnlockQueue+0x60>
 8004870:	e000      	b.n	8004874 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004872:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	22ff      	movs	r2, #255	@ 0xff
 8004878:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800487c:	f001 fd66 	bl	800634c <vPortExitCritical>
}
 8004880:	bf00      	nop
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004890:	f001 fd2a 	bl	80062e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004898:	2b00      	cmp	r3, #0
 800489a:	d102      	bne.n	80048a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800489c:	2301      	movs	r3, #1
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	e001      	b.n	80048a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80048a2:	2300      	movs	r3, #0
 80048a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80048a6:	f001 fd51 	bl	800634c <vPortExitCritical>

	return xReturn;
 80048aa:	68fb      	ldr	r3, [r7, #12]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80048bc:	f001 fd14 	bl	80062e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d102      	bne.n	80048d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80048cc:	2301      	movs	r3, #1
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	e001      	b.n	80048d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80048d2:	2300      	movs	r3, #0
 80048d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80048d6:	f001 fd39 	bl	800634c <vPortExitCritical>

	return xReturn;
 80048da:	68fb      	ldr	r3, [r7, #12]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80048ee:	2300      	movs	r3, #0
 80048f0:	60fb      	str	r3, [r7, #12]
 80048f2:	e014      	b.n	800491e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80048f4:	4a0f      	ldr	r2, [pc, #60]	@ (8004934 <vQueueAddToRegistry+0x50>)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10b      	bne.n	8004918 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004900:	490c      	ldr	r1, [pc, #48]	@ (8004934 <vQueueAddToRegistry+0x50>)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800490a:	4a0a      	ldr	r2, [pc, #40]	@ (8004934 <vQueueAddToRegistry+0x50>)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	4413      	add	r3, r2
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004916:	e006      	b.n	8004926 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	3301      	adds	r3, #1
 800491c:	60fb      	str	r3, [r7, #12]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2b07      	cmp	r3, #7
 8004922:	d9e7      	bls.n	80048f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004924:	bf00      	nop
 8004926:	bf00      	nop
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	20000c28 	.word	0x20000c28

08004938 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004948:	f001 fcce 	bl	80062e8 <vPortEnterCritical>
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004952:	b25b      	sxtb	r3, r3
 8004954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004958:	d103      	bne.n	8004962 <vQueueWaitForMessageRestricted+0x2a>
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004968:	b25b      	sxtb	r3, r3
 800496a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496e:	d103      	bne.n	8004978 <vQueueWaitForMessageRestricted+0x40>
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004978:	f001 fce8 	bl	800634c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004980:	2b00      	cmp	r3, #0
 8004982:	d106      	bne.n	8004992 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	3324      	adds	r3, #36	@ 0x24
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	68b9      	ldr	r1, [r7, #8]
 800498c:	4618      	mov	r0, r3
 800498e:	f000 fc45 	bl	800521c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004992:	6978      	ldr	r0, [r7, #20]
 8004994:	f7ff ff26 	bl	80047e4 <prvUnlockQueue>
	}
 8004998:	bf00      	nop
 800499a:	3718      	adds	r7, #24
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b08e      	sub	sp, #56	@ 0x38
 80049a4:	af04      	add	r7, sp, #16
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
 80049ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80049ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d10b      	bne.n	80049cc <xTaskCreateStatic+0x2c>
	__asm volatile
 80049b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049b8:	f383 8811 	msr	BASEPRI, r3
 80049bc:	f3bf 8f6f 	isb	sy
 80049c0:	f3bf 8f4f 	dsb	sy
 80049c4:	623b      	str	r3, [r7, #32]
}
 80049c6:	bf00      	nop
 80049c8:	bf00      	nop
 80049ca:	e7fd      	b.n	80049c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80049cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10b      	bne.n	80049ea <xTaskCreateStatic+0x4a>
	__asm volatile
 80049d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049d6:	f383 8811 	msr	BASEPRI, r3
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	61fb      	str	r3, [r7, #28]
}
 80049e4:	bf00      	nop
 80049e6:	bf00      	nop
 80049e8:	e7fd      	b.n	80049e6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80049ea:	235c      	movs	r3, #92	@ 0x5c
 80049ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	2b5c      	cmp	r3, #92	@ 0x5c
 80049f2:	d00b      	beq.n	8004a0c <xTaskCreateStatic+0x6c>
	__asm volatile
 80049f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	61bb      	str	r3, [r7, #24]
}
 8004a06:	bf00      	nop
 8004a08:	bf00      	nop
 8004a0a:	e7fd      	b.n	8004a08 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004a0c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d01e      	beq.n	8004a52 <xTaskCreateStatic+0xb2>
 8004a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d01b      	beq.n	8004a52 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a1c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a22:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a26:	2202      	movs	r2, #2
 8004a28:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	9303      	str	r3, [sp, #12]
 8004a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a32:	9302      	str	r3, [sp, #8]
 8004a34:	f107 0314 	add.w	r3, r7, #20
 8004a38:	9301      	str	r3, [sp, #4]
 8004a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a3c:	9300      	str	r3, [sp, #0]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	68b9      	ldr	r1, [r7, #8]
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f000 f850 	bl	8004aea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a4a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004a4c:	f000 f8de 	bl	8004c0c <prvAddNewTaskToReadyList>
 8004a50:	e001      	b.n	8004a56 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004a52:	2300      	movs	r3, #0
 8004a54:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004a56:	697b      	ldr	r3, [r7, #20]
	}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3728      	adds	r7, #40	@ 0x28
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b08c      	sub	sp, #48	@ 0x30
 8004a64:	af04      	add	r7, sp, #16
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	603b      	str	r3, [r7, #0]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004a70:	88fb      	ldrh	r3, [r7, #6]
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4618      	mov	r0, r3
 8004a76:	f001 fd59 	bl	800652c <pvPortMalloc>
 8004a7a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00e      	beq.n	8004aa0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004a82:	205c      	movs	r0, #92	@ 0x5c
 8004a84:	f001 fd52 	bl	800652c <pvPortMalloc>
 8004a88:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	631a      	str	r2, [r3, #48]	@ 0x30
 8004a96:	e005      	b.n	8004aa4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004a98:	6978      	ldr	r0, [r7, #20]
 8004a9a:	f001 fe15 	bl	80066c8 <vPortFree>
 8004a9e:	e001      	b.n	8004aa4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d017      	beq.n	8004ada <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ab2:	88fa      	ldrh	r2, [r7, #6]
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	9303      	str	r3, [sp, #12]
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	9302      	str	r3, [sp, #8]
 8004abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004abe:	9301      	str	r3, [sp, #4]
 8004ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	68b9      	ldr	r1, [r7, #8]
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f000 f80e 	bl	8004aea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ace:	69f8      	ldr	r0, [r7, #28]
 8004ad0:	f000 f89c 	bl	8004c0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	61bb      	str	r3, [r7, #24]
 8004ad8:	e002      	b.n	8004ae0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004ada:	f04f 33ff 	mov.w	r3, #4294967295
 8004ade:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004ae0:	69bb      	ldr	r3, [r7, #24]
	}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3720      	adds	r7, #32
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b088      	sub	sp, #32
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	60f8      	str	r0, [r7, #12]
 8004af2:	60b9      	str	r1, [r7, #8]
 8004af4:	607a      	str	r2, [r7, #4]
 8004af6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	461a      	mov	r2, r3
 8004b02:	21a5      	movs	r1, #165	@ 0xa5
 8004b04:	f001 ff00 	bl	8006908 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b12:	3b01      	subs	r3, #1
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4413      	add	r3, r2
 8004b18:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	f023 0307 	bic.w	r3, r3, #7
 8004b20:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	f003 0307 	and.w	r3, r3, #7
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00b      	beq.n	8004b44 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b30:	f383 8811 	msr	BASEPRI, r3
 8004b34:	f3bf 8f6f 	isb	sy
 8004b38:	f3bf 8f4f 	dsb	sy
 8004b3c:	617b      	str	r3, [r7, #20]
}
 8004b3e:	bf00      	nop
 8004b40:	bf00      	nop
 8004b42:	e7fd      	b.n	8004b40 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d01f      	beq.n	8004b8a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	61fb      	str	r3, [r7, #28]
 8004b4e:	e012      	b.n	8004b76 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	4413      	add	r3, r2
 8004b56:	7819      	ldrb	r1, [r3, #0]
 8004b58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	3334      	adds	r3, #52	@ 0x34
 8004b60:	460a      	mov	r2, r1
 8004b62:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	4413      	add	r3, r2
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d006      	beq.n	8004b7e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	3301      	adds	r3, #1
 8004b74:	61fb      	str	r3, [r7, #28]
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	2b0f      	cmp	r3, #15
 8004b7a:	d9e9      	bls.n	8004b50 <prvInitialiseNewTask+0x66>
 8004b7c:	e000      	b.n	8004b80 <prvInitialiseNewTask+0x96>
			{
				break;
 8004b7e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b88:	e003      	b.n	8004b92 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b94:	2b37      	cmp	r3, #55	@ 0x37
 8004b96:	d901      	bls.n	8004b9c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004b98:	2337      	movs	r3, #55	@ 0x37
 8004b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ba0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ba6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004baa:	2200      	movs	r2, #0
 8004bac:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7fe ff4a 	bl	8003a4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bba:	3318      	adds	r3, #24
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7fe ff45 	bl	8003a4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bc6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bca:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bd6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bda:	2200      	movs	r2, #0
 8004bdc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	68f9      	ldr	r1, [r7, #12]
 8004bea:	69b8      	ldr	r0, [r7, #24]
 8004bec:	f001 fa4e 	bl	800608c <pxPortInitialiseStack>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d002      	beq.n	8004c02 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c02:	bf00      	nop
 8004c04:	3720      	adds	r7, #32
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
	...

08004c0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c14:	f001 fb68 	bl	80062e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c18:	4b2d      	ldr	r3, [pc, #180]	@ (8004cd0 <prvAddNewTaskToReadyList+0xc4>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	4a2c      	ldr	r2, [pc, #176]	@ (8004cd0 <prvAddNewTaskToReadyList+0xc4>)
 8004c20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c22:	4b2c      	ldr	r3, [pc, #176]	@ (8004cd4 <prvAddNewTaskToReadyList+0xc8>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d109      	bne.n	8004c3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004c2a:	4a2a      	ldr	r2, [pc, #168]	@ (8004cd4 <prvAddNewTaskToReadyList+0xc8>)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c30:	4b27      	ldr	r3, [pc, #156]	@ (8004cd0 <prvAddNewTaskToReadyList+0xc4>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d110      	bne.n	8004c5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004c38:	f000 fc1e 	bl	8005478 <prvInitialiseTaskLists>
 8004c3c:	e00d      	b.n	8004c5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004c3e:	4b26      	ldr	r3, [pc, #152]	@ (8004cd8 <prvAddNewTaskToReadyList+0xcc>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d109      	bne.n	8004c5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c46:	4b23      	ldr	r3, [pc, #140]	@ (8004cd4 <prvAddNewTaskToReadyList+0xc8>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d802      	bhi.n	8004c5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004c54:	4a1f      	ldr	r2, [pc, #124]	@ (8004cd4 <prvAddNewTaskToReadyList+0xc8>)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004c5a:	4b20      	ldr	r3, [pc, #128]	@ (8004cdc <prvAddNewTaskToReadyList+0xd0>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	4a1e      	ldr	r2, [pc, #120]	@ (8004cdc <prvAddNewTaskToReadyList+0xd0>)
 8004c62:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004c64:	4b1d      	ldr	r3, [pc, #116]	@ (8004cdc <prvAddNewTaskToReadyList+0xd0>)
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c70:	4b1b      	ldr	r3, [pc, #108]	@ (8004ce0 <prvAddNewTaskToReadyList+0xd4>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d903      	bls.n	8004c80 <prvAddNewTaskToReadyList+0x74>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7c:	4a18      	ldr	r2, [pc, #96]	@ (8004ce0 <prvAddNewTaskToReadyList+0xd4>)
 8004c7e:	6013      	str	r3, [r2, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c84:	4613      	mov	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4a15      	ldr	r2, [pc, #84]	@ (8004ce4 <prvAddNewTaskToReadyList+0xd8>)
 8004c8e:	441a      	add	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3304      	adds	r3, #4
 8004c94:	4619      	mov	r1, r3
 8004c96:	4610      	mov	r0, r2
 8004c98:	f7fe fee5 	bl	8003a66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004c9c:	f001 fb56 	bl	800634c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8004cd8 <prvAddNewTaskToReadyList+0xcc>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00e      	beq.n	8004cc6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8004cd4 <prvAddNewTaskToReadyList+0xc8>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d207      	bcs.n	8004cc6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8004ce8 <prvAddNewTaskToReadyList+0xdc>)
 8004cb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	f3bf 8f4f 	dsb	sy
 8004cc2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cc6:	bf00      	nop
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	2000113c 	.word	0x2000113c
 8004cd4:	20000c68 	.word	0x20000c68
 8004cd8:	20001148 	.word	0x20001148
 8004cdc:	20001158 	.word	0x20001158
 8004ce0:	20001144 	.word	0x20001144
 8004ce4:	20000c6c 	.word	0x20000c6c
 8004ce8:	e000ed04 	.word	0xe000ed04

08004cec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d018      	beq.n	8004d30 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004cfe:	4b14      	ldr	r3, [pc, #80]	@ (8004d50 <vTaskDelay+0x64>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00b      	beq.n	8004d1e <vTaskDelay+0x32>
	__asm volatile
 8004d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d0a:	f383 8811 	msr	BASEPRI, r3
 8004d0e:	f3bf 8f6f 	isb	sy
 8004d12:	f3bf 8f4f 	dsb	sy
 8004d16:	60bb      	str	r3, [r7, #8]
}
 8004d18:	bf00      	nop
 8004d1a:	bf00      	nop
 8004d1c:	e7fd      	b.n	8004d1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004d1e:	f000 f883 	bl	8004e28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d22:	2100      	movs	r1, #0
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 fe03 	bl	8005930 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004d2a:	f000 f88b 	bl	8004e44 <xTaskResumeAll>
 8004d2e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d107      	bne.n	8004d46 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004d36:	4b07      	ldr	r3, [pc, #28]	@ (8004d54 <vTaskDelay+0x68>)
 8004d38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d3c:	601a      	str	r2, [r3, #0]
 8004d3e:	f3bf 8f4f 	dsb	sy
 8004d42:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d46:	bf00      	nop
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	20001164 	.word	0x20001164
 8004d54:	e000ed04 	.word	0xe000ed04

08004d58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b08a      	sub	sp, #40	@ 0x28
 8004d5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004d62:	2300      	movs	r3, #0
 8004d64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004d66:	463a      	mov	r2, r7
 8004d68:	1d39      	adds	r1, r7, #4
 8004d6a:	f107 0308 	add.w	r3, r7, #8
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7fe fe18 	bl	80039a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004d74:	6839      	ldr	r1, [r7, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	9202      	str	r2, [sp, #8]
 8004d7c:	9301      	str	r3, [sp, #4]
 8004d7e:	2300      	movs	r3, #0
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	2300      	movs	r3, #0
 8004d84:	460a      	mov	r2, r1
 8004d86:	4922      	ldr	r1, [pc, #136]	@ (8004e10 <vTaskStartScheduler+0xb8>)
 8004d88:	4822      	ldr	r0, [pc, #136]	@ (8004e14 <vTaskStartScheduler+0xbc>)
 8004d8a:	f7ff fe09 	bl	80049a0 <xTaskCreateStatic>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	4a21      	ldr	r2, [pc, #132]	@ (8004e18 <vTaskStartScheduler+0xc0>)
 8004d92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004d94:	4b20      	ldr	r3, [pc, #128]	@ (8004e18 <vTaskStartScheduler+0xc0>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d002      	beq.n	8004da2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	617b      	str	r3, [r7, #20]
 8004da0:	e001      	b.n	8004da6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004da2:	2300      	movs	r3, #0
 8004da4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d102      	bne.n	8004db2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004dac:	f000 fe14 	bl	80059d8 <xTimerCreateTimerTask>
 8004db0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d116      	bne.n	8004de6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dbc:	f383 8811 	msr	BASEPRI, r3
 8004dc0:	f3bf 8f6f 	isb	sy
 8004dc4:	f3bf 8f4f 	dsb	sy
 8004dc8:	613b      	str	r3, [r7, #16]
}
 8004dca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004dcc:	4b13      	ldr	r3, [pc, #76]	@ (8004e1c <vTaskStartScheduler+0xc4>)
 8004dce:	f04f 32ff 	mov.w	r2, #4294967295
 8004dd2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004dd4:	4b12      	ldr	r3, [pc, #72]	@ (8004e20 <vTaskStartScheduler+0xc8>)
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004dda:	4b12      	ldr	r3, [pc, #72]	@ (8004e24 <vTaskStartScheduler+0xcc>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004de0:	f001 f9de 	bl	80061a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004de4:	e00f      	b.n	8004e06 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dec:	d10b      	bne.n	8004e06 <vTaskStartScheduler+0xae>
	__asm volatile
 8004dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	60fb      	str	r3, [r7, #12]
}
 8004e00:	bf00      	nop
 8004e02:	bf00      	nop
 8004e04:	e7fd      	b.n	8004e02 <vTaskStartScheduler+0xaa>
}
 8004e06:	bf00      	nop
 8004e08:	3718      	adds	r7, #24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	08006a20 	.word	0x08006a20
 8004e14:	08005449 	.word	0x08005449
 8004e18:	20001160 	.word	0x20001160
 8004e1c:	2000115c 	.word	0x2000115c
 8004e20:	20001148 	.word	0x20001148
 8004e24:	20001140 	.word	0x20001140

08004e28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e28:	b480      	push	{r7}
 8004e2a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004e2c:	4b04      	ldr	r3, [pc, #16]	@ (8004e40 <vTaskSuspendAll+0x18>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	3301      	adds	r3, #1
 8004e32:	4a03      	ldr	r2, [pc, #12]	@ (8004e40 <vTaskSuspendAll+0x18>)
 8004e34:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004e36:	bf00      	nop
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	20001164 	.word	0x20001164

08004e44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004e52:	4b42      	ldr	r3, [pc, #264]	@ (8004f5c <xTaskResumeAll+0x118>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10b      	bne.n	8004e72 <xTaskResumeAll+0x2e>
	__asm volatile
 8004e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e5e:	f383 8811 	msr	BASEPRI, r3
 8004e62:	f3bf 8f6f 	isb	sy
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	603b      	str	r3, [r7, #0]
}
 8004e6c:	bf00      	nop
 8004e6e:	bf00      	nop
 8004e70:	e7fd      	b.n	8004e6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004e72:	f001 fa39 	bl	80062e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004e76:	4b39      	ldr	r3, [pc, #228]	@ (8004f5c <xTaskResumeAll+0x118>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	4a37      	ldr	r2, [pc, #220]	@ (8004f5c <xTaskResumeAll+0x118>)
 8004e7e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e80:	4b36      	ldr	r3, [pc, #216]	@ (8004f5c <xTaskResumeAll+0x118>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d162      	bne.n	8004f4e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004e88:	4b35      	ldr	r3, [pc, #212]	@ (8004f60 <xTaskResumeAll+0x11c>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d05e      	beq.n	8004f4e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e90:	e02f      	b.n	8004ef2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e92:	4b34      	ldr	r3, [pc, #208]	@ (8004f64 <xTaskResumeAll+0x120>)
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	3318      	adds	r3, #24
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7fe fe3e 	bl	8003b20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	3304      	adds	r3, #4
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7fe fe39 	bl	8003b20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eb2:	4b2d      	ldr	r3, [pc, #180]	@ (8004f68 <xTaskResumeAll+0x124>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d903      	bls.n	8004ec2 <xTaskResumeAll+0x7e>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ebe:	4a2a      	ldr	r2, [pc, #168]	@ (8004f68 <xTaskResumeAll+0x124>)
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4413      	add	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4a27      	ldr	r2, [pc, #156]	@ (8004f6c <xTaskResumeAll+0x128>)
 8004ed0:	441a      	add	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	4610      	mov	r0, r2
 8004eda:	f7fe fdc4 	bl	8003a66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ee2:	4b23      	ldr	r3, [pc, #140]	@ (8004f70 <xTaskResumeAll+0x12c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d302      	bcc.n	8004ef2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004eec:	4b21      	ldr	r3, [pc, #132]	@ (8004f74 <xTaskResumeAll+0x130>)
 8004eee:	2201      	movs	r2, #1
 8004ef0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ef2:	4b1c      	ldr	r3, [pc, #112]	@ (8004f64 <xTaskResumeAll+0x120>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1cb      	bne.n	8004e92 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f00:	f000 fb58 	bl	80055b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004f04:	4b1c      	ldr	r3, [pc, #112]	@ (8004f78 <xTaskResumeAll+0x134>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d010      	beq.n	8004f32 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f10:	f000 f846 	bl	8004fa0 <xTaskIncrementTick>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d002      	beq.n	8004f20 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004f1a:	4b16      	ldr	r3, [pc, #88]	@ (8004f74 <xTaskResumeAll+0x130>)
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	3b01      	subs	r3, #1
 8004f24:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1f1      	bne.n	8004f10 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004f2c:	4b12      	ldr	r3, [pc, #72]	@ (8004f78 <xTaskResumeAll+0x134>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f32:	4b10      	ldr	r3, [pc, #64]	@ (8004f74 <xTaskResumeAll+0x130>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d009      	beq.n	8004f4e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8004f7c <xTaskResumeAll+0x138>)
 8004f40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f44:	601a      	str	r2, [r3, #0]
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f4e:	f001 f9fd 	bl	800634c <vPortExitCritical>

	return xAlreadyYielded;
 8004f52:	68bb      	ldr	r3, [r7, #8]
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	20001164 	.word	0x20001164
 8004f60:	2000113c 	.word	0x2000113c
 8004f64:	200010fc 	.word	0x200010fc
 8004f68:	20001144 	.word	0x20001144
 8004f6c:	20000c6c 	.word	0x20000c6c
 8004f70:	20000c68 	.word	0x20000c68
 8004f74:	20001150 	.word	0x20001150
 8004f78:	2000114c 	.word	0x2000114c
 8004f7c:	e000ed04 	.word	0xe000ed04

08004f80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004f86:	4b05      	ldr	r3, [pc, #20]	@ (8004f9c <xTaskGetTickCount+0x1c>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004f8c:	687b      	ldr	r3, [r7, #4]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	20001140 	.word	0x20001140

08004fa0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004faa:	4b4f      	ldr	r3, [pc, #316]	@ (80050e8 <xTaskIncrementTick+0x148>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f040 8090 	bne.w	80050d4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004fb4:	4b4d      	ldr	r3, [pc, #308]	@ (80050ec <xTaskIncrementTick+0x14c>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004fbc:	4a4b      	ldr	r2, [pc, #300]	@ (80050ec <xTaskIncrementTick+0x14c>)
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d121      	bne.n	800500c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004fc8:	4b49      	ldr	r3, [pc, #292]	@ (80050f0 <xTaskIncrementTick+0x150>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00b      	beq.n	8004fea <xTaskIncrementTick+0x4a>
	__asm volatile
 8004fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd6:	f383 8811 	msr	BASEPRI, r3
 8004fda:	f3bf 8f6f 	isb	sy
 8004fde:	f3bf 8f4f 	dsb	sy
 8004fe2:	603b      	str	r3, [r7, #0]
}
 8004fe4:	bf00      	nop
 8004fe6:	bf00      	nop
 8004fe8:	e7fd      	b.n	8004fe6 <xTaskIncrementTick+0x46>
 8004fea:	4b41      	ldr	r3, [pc, #260]	@ (80050f0 <xTaskIncrementTick+0x150>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	4b40      	ldr	r3, [pc, #256]	@ (80050f4 <xTaskIncrementTick+0x154>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a3e      	ldr	r2, [pc, #248]	@ (80050f0 <xTaskIncrementTick+0x150>)
 8004ff6:	6013      	str	r3, [r2, #0]
 8004ff8:	4a3e      	ldr	r2, [pc, #248]	@ (80050f4 <xTaskIncrementTick+0x154>)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6013      	str	r3, [r2, #0]
 8004ffe:	4b3e      	ldr	r3, [pc, #248]	@ (80050f8 <xTaskIncrementTick+0x158>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	3301      	adds	r3, #1
 8005004:	4a3c      	ldr	r2, [pc, #240]	@ (80050f8 <xTaskIncrementTick+0x158>)
 8005006:	6013      	str	r3, [r2, #0]
 8005008:	f000 fad4 	bl	80055b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800500c:	4b3b      	ldr	r3, [pc, #236]	@ (80050fc <xTaskIncrementTick+0x15c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	429a      	cmp	r2, r3
 8005014:	d349      	bcc.n	80050aa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005016:	4b36      	ldr	r3, [pc, #216]	@ (80050f0 <xTaskIncrementTick+0x150>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d104      	bne.n	800502a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005020:	4b36      	ldr	r3, [pc, #216]	@ (80050fc <xTaskIncrementTick+0x15c>)
 8005022:	f04f 32ff 	mov.w	r2, #4294967295
 8005026:	601a      	str	r2, [r3, #0]
					break;
 8005028:	e03f      	b.n	80050aa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800502a:	4b31      	ldr	r3, [pc, #196]	@ (80050f0 <xTaskIncrementTick+0x150>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	429a      	cmp	r2, r3
 8005040:	d203      	bcs.n	800504a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005042:	4a2e      	ldr	r2, [pc, #184]	@ (80050fc <xTaskIncrementTick+0x15c>)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005048:	e02f      	b.n	80050aa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	3304      	adds	r3, #4
 800504e:	4618      	mov	r0, r3
 8005050:	f7fe fd66 	bl	8003b20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005058:	2b00      	cmp	r3, #0
 800505a:	d004      	beq.n	8005066 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	3318      	adds	r3, #24
 8005060:	4618      	mov	r0, r3
 8005062:	f7fe fd5d 	bl	8003b20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800506a:	4b25      	ldr	r3, [pc, #148]	@ (8005100 <xTaskIncrementTick+0x160>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	429a      	cmp	r2, r3
 8005070:	d903      	bls.n	800507a <xTaskIncrementTick+0xda>
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005076:	4a22      	ldr	r2, [pc, #136]	@ (8005100 <xTaskIncrementTick+0x160>)
 8005078:	6013      	str	r3, [r2, #0]
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800507e:	4613      	mov	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4413      	add	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4a1f      	ldr	r2, [pc, #124]	@ (8005104 <xTaskIncrementTick+0x164>)
 8005088:	441a      	add	r2, r3
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	3304      	adds	r3, #4
 800508e:	4619      	mov	r1, r3
 8005090:	4610      	mov	r0, r2
 8005092:	f7fe fce8 	bl	8003a66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800509a:	4b1b      	ldr	r3, [pc, #108]	@ (8005108 <xTaskIncrementTick+0x168>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d3b8      	bcc.n	8005016 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80050a4:	2301      	movs	r3, #1
 80050a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050a8:	e7b5      	b.n	8005016 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80050aa:	4b17      	ldr	r3, [pc, #92]	@ (8005108 <xTaskIncrementTick+0x168>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050b0:	4914      	ldr	r1, [pc, #80]	@ (8005104 <xTaskIncrementTick+0x164>)
 80050b2:	4613      	mov	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4413      	add	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	440b      	add	r3, r1
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d901      	bls.n	80050c6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80050c2:	2301      	movs	r3, #1
 80050c4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80050c6:	4b11      	ldr	r3, [pc, #68]	@ (800510c <xTaskIncrementTick+0x16c>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d007      	beq.n	80050de <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80050ce:	2301      	movs	r3, #1
 80050d0:	617b      	str	r3, [r7, #20]
 80050d2:	e004      	b.n	80050de <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80050d4:	4b0e      	ldr	r3, [pc, #56]	@ (8005110 <xTaskIncrementTick+0x170>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	3301      	adds	r3, #1
 80050da:	4a0d      	ldr	r2, [pc, #52]	@ (8005110 <xTaskIncrementTick+0x170>)
 80050dc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80050de:	697b      	ldr	r3, [r7, #20]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3718      	adds	r7, #24
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	20001164 	.word	0x20001164
 80050ec:	20001140 	.word	0x20001140
 80050f0:	200010f4 	.word	0x200010f4
 80050f4:	200010f8 	.word	0x200010f8
 80050f8:	20001154 	.word	0x20001154
 80050fc:	2000115c 	.word	0x2000115c
 8005100:	20001144 	.word	0x20001144
 8005104:	20000c6c 	.word	0x20000c6c
 8005108:	20000c68 	.word	0x20000c68
 800510c:	20001150 	.word	0x20001150
 8005110:	2000114c 	.word	0x2000114c

08005114 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800511a:	4b28      	ldr	r3, [pc, #160]	@ (80051bc <vTaskSwitchContext+0xa8>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005122:	4b27      	ldr	r3, [pc, #156]	@ (80051c0 <vTaskSwitchContext+0xac>)
 8005124:	2201      	movs	r2, #1
 8005126:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005128:	e042      	b.n	80051b0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800512a:	4b25      	ldr	r3, [pc, #148]	@ (80051c0 <vTaskSwitchContext+0xac>)
 800512c:	2200      	movs	r2, #0
 800512e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005130:	4b24      	ldr	r3, [pc, #144]	@ (80051c4 <vTaskSwitchContext+0xb0>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	60fb      	str	r3, [r7, #12]
 8005136:	e011      	b.n	800515c <vTaskSwitchContext+0x48>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10b      	bne.n	8005156 <vTaskSwitchContext+0x42>
	__asm volatile
 800513e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	607b      	str	r3, [r7, #4]
}
 8005150:	bf00      	nop
 8005152:	bf00      	nop
 8005154:	e7fd      	b.n	8005152 <vTaskSwitchContext+0x3e>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	3b01      	subs	r3, #1
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	491a      	ldr	r1, [pc, #104]	@ (80051c8 <vTaskSwitchContext+0xb4>)
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	4613      	mov	r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	440b      	add	r3, r1
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d0e3      	beq.n	8005138 <vTaskSwitchContext+0x24>
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	4613      	mov	r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	4413      	add	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4a13      	ldr	r2, [pc, #76]	@ (80051c8 <vTaskSwitchContext+0xb4>)
 800517c:	4413      	add	r3, r2
 800517e:	60bb      	str	r3, [r7, #8]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	605a      	str	r2, [r3, #4]
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	3308      	adds	r3, #8
 8005192:	429a      	cmp	r2, r3
 8005194:	d104      	bne.n	80051a0 <vTaskSwitchContext+0x8c>
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	605a      	str	r2, [r3, #4]
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	4a09      	ldr	r2, [pc, #36]	@ (80051cc <vTaskSwitchContext+0xb8>)
 80051a8:	6013      	str	r3, [r2, #0]
 80051aa:	4a06      	ldr	r2, [pc, #24]	@ (80051c4 <vTaskSwitchContext+0xb0>)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6013      	str	r3, [r2, #0]
}
 80051b0:	bf00      	nop
 80051b2:	3714      	adds	r7, #20
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	20001164 	.word	0x20001164
 80051c0:	20001150 	.word	0x20001150
 80051c4:	20001144 	.word	0x20001144
 80051c8:	20000c6c 	.word	0x20000c6c
 80051cc:	20000c68 	.word	0x20000c68

080051d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10b      	bne.n	80051f8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	60fb      	str	r3, [r7, #12]
}
 80051f2:	bf00      	nop
 80051f4:	bf00      	nop
 80051f6:	e7fd      	b.n	80051f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80051f8:	4b07      	ldr	r3, [pc, #28]	@ (8005218 <vTaskPlaceOnEventList+0x48>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	3318      	adds	r3, #24
 80051fe:	4619      	mov	r1, r3
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f7fe fc54 	bl	8003aae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005206:	2101      	movs	r1, #1
 8005208:	6838      	ldr	r0, [r7, #0]
 800520a:	f000 fb91 	bl	8005930 <prvAddCurrentTaskToDelayedList>
}
 800520e:	bf00      	nop
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	20000c68 	.word	0x20000c68

0800521c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10b      	bne.n	8005246 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800522e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	617b      	str	r3, [r7, #20]
}
 8005240:	bf00      	nop
 8005242:	bf00      	nop
 8005244:	e7fd      	b.n	8005242 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005246:	4b0a      	ldr	r3, [pc, #40]	@ (8005270 <vTaskPlaceOnEventListRestricted+0x54>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	3318      	adds	r3, #24
 800524c:	4619      	mov	r1, r3
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f7fe fc09 	bl	8003a66 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d002      	beq.n	8005260 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800525a:	f04f 33ff 	mov.w	r3, #4294967295
 800525e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005260:	6879      	ldr	r1, [r7, #4]
 8005262:	68b8      	ldr	r0, [r7, #8]
 8005264:	f000 fb64 	bl	8005930 <prvAddCurrentTaskToDelayedList>
	}
 8005268:	bf00      	nop
 800526a:	3718      	adds	r7, #24
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	20000c68 	.word	0x20000c68

08005274 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10b      	bne.n	80052a2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800528a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	60fb      	str	r3, [r7, #12]
}
 800529c:	bf00      	nop
 800529e:	bf00      	nop
 80052a0:	e7fd      	b.n	800529e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	3318      	adds	r3, #24
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7fe fc3a 	bl	8003b20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052ac:	4b1d      	ldr	r3, [pc, #116]	@ (8005324 <xTaskRemoveFromEventList+0xb0>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d11d      	bne.n	80052f0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	3304      	adds	r3, #4
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7fe fc31 	bl	8003b20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052c2:	4b19      	ldr	r3, [pc, #100]	@ (8005328 <xTaskRemoveFromEventList+0xb4>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d903      	bls.n	80052d2 <xTaskRemoveFromEventList+0x5e>
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ce:	4a16      	ldr	r2, [pc, #88]	@ (8005328 <xTaskRemoveFromEventList+0xb4>)
 80052d0:	6013      	str	r3, [r2, #0]
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052d6:	4613      	mov	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	4413      	add	r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4a13      	ldr	r2, [pc, #76]	@ (800532c <xTaskRemoveFromEventList+0xb8>)
 80052e0:	441a      	add	r2, r3
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	3304      	adds	r3, #4
 80052e6:	4619      	mov	r1, r3
 80052e8:	4610      	mov	r0, r2
 80052ea:	f7fe fbbc 	bl	8003a66 <vListInsertEnd>
 80052ee:	e005      	b.n	80052fc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	3318      	adds	r3, #24
 80052f4:	4619      	mov	r1, r3
 80052f6:	480e      	ldr	r0, [pc, #56]	@ (8005330 <xTaskRemoveFromEventList+0xbc>)
 80052f8:	f7fe fbb5 	bl	8003a66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005300:	4b0c      	ldr	r3, [pc, #48]	@ (8005334 <xTaskRemoveFromEventList+0xc0>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005306:	429a      	cmp	r2, r3
 8005308:	d905      	bls.n	8005316 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800530a:	2301      	movs	r3, #1
 800530c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800530e:	4b0a      	ldr	r3, [pc, #40]	@ (8005338 <xTaskRemoveFromEventList+0xc4>)
 8005310:	2201      	movs	r2, #1
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	e001      	b.n	800531a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005316:	2300      	movs	r3, #0
 8005318:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800531a:	697b      	ldr	r3, [r7, #20]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3718      	adds	r7, #24
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	20001164 	.word	0x20001164
 8005328:	20001144 	.word	0x20001144
 800532c:	20000c6c 	.word	0x20000c6c
 8005330:	200010fc 	.word	0x200010fc
 8005334:	20000c68 	.word	0x20000c68
 8005338:	20001150 	.word	0x20001150

0800533c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005344:	4b06      	ldr	r3, [pc, #24]	@ (8005360 <vTaskInternalSetTimeOutState+0x24>)
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800534c:	4b05      	ldr	r3, [pc, #20]	@ (8005364 <vTaskInternalSetTimeOutState+0x28>)
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	605a      	str	r2, [r3, #4]
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	20001154 	.word	0x20001154
 8005364:	20001140 	.word	0x20001140

08005368 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b088      	sub	sp, #32
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10b      	bne.n	8005390 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800537c:	f383 8811 	msr	BASEPRI, r3
 8005380:	f3bf 8f6f 	isb	sy
 8005384:	f3bf 8f4f 	dsb	sy
 8005388:	613b      	str	r3, [r7, #16]
}
 800538a:	bf00      	nop
 800538c:	bf00      	nop
 800538e:	e7fd      	b.n	800538c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10b      	bne.n	80053ae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	60fb      	str	r3, [r7, #12]
}
 80053a8:	bf00      	nop
 80053aa:	bf00      	nop
 80053ac:	e7fd      	b.n	80053aa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80053ae:	f000 ff9b 	bl	80062e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80053b2:	4b1d      	ldr	r3, [pc, #116]	@ (8005428 <xTaskCheckForTimeOut+0xc0>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ca:	d102      	bne.n	80053d2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80053cc:	2300      	movs	r3, #0
 80053ce:	61fb      	str	r3, [r7, #28]
 80053d0:	e023      	b.n	800541a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	4b15      	ldr	r3, [pc, #84]	@ (800542c <xTaskCheckForTimeOut+0xc4>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d007      	beq.n	80053ee <xTaskCheckForTimeOut+0x86>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d302      	bcc.n	80053ee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80053e8:	2301      	movs	r3, #1
 80053ea:	61fb      	str	r3, [r7, #28]
 80053ec:	e015      	b.n	800541a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d20b      	bcs.n	8005410 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	1ad2      	subs	r2, r2, r3
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f7ff ff99 	bl	800533c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800540a:	2300      	movs	r3, #0
 800540c:	61fb      	str	r3, [r7, #28]
 800540e:	e004      	b.n	800541a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	2200      	movs	r2, #0
 8005414:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005416:	2301      	movs	r3, #1
 8005418:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800541a:	f000 ff97 	bl	800634c <vPortExitCritical>

	return xReturn;
 800541e:	69fb      	ldr	r3, [r7, #28]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3720      	adds	r7, #32
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	20001140 	.word	0x20001140
 800542c:	20001154 	.word	0x20001154

08005430 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005430:	b480      	push	{r7}
 8005432:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005434:	4b03      	ldr	r3, [pc, #12]	@ (8005444 <vTaskMissedYield+0x14>)
 8005436:	2201      	movs	r2, #1
 8005438:	601a      	str	r2, [r3, #0]
}
 800543a:	bf00      	nop
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr
 8005444:	20001150 	.word	0x20001150

08005448 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005450:	f000 f852 	bl	80054f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005454:	4b06      	ldr	r3, [pc, #24]	@ (8005470 <prvIdleTask+0x28>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d9f9      	bls.n	8005450 <prvIdleTask+0x8>
			{
				taskYIELD();
 800545c:	4b05      	ldr	r3, [pc, #20]	@ (8005474 <prvIdleTask+0x2c>)
 800545e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	f3bf 8f4f 	dsb	sy
 8005468:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800546c:	e7f0      	b.n	8005450 <prvIdleTask+0x8>
 800546e:	bf00      	nop
 8005470:	20000c6c 	.word	0x20000c6c
 8005474:	e000ed04 	.word	0xe000ed04

08005478 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800547e:	2300      	movs	r3, #0
 8005480:	607b      	str	r3, [r7, #4]
 8005482:	e00c      	b.n	800549e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	4613      	mov	r3, r2
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	4413      	add	r3, r2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	4a12      	ldr	r2, [pc, #72]	@ (80054d8 <prvInitialiseTaskLists+0x60>)
 8005490:	4413      	add	r3, r2
 8005492:	4618      	mov	r0, r3
 8005494:	f7fe faba 	bl	8003a0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	3301      	adds	r3, #1
 800549c:	607b      	str	r3, [r7, #4]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b37      	cmp	r3, #55	@ 0x37
 80054a2:	d9ef      	bls.n	8005484 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80054a4:	480d      	ldr	r0, [pc, #52]	@ (80054dc <prvInitialiseTaskLists+0x64>)
 80054a6:	f7fe fab1 	bl	8003a0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80054aa:	480d      	ldr	r0, [pc, #52]	@ (80054e0 <prvInitialiseTaskLists+0x68>)
 80054ac:	f7fe faae 	bl	8003a0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80054b0:	480c      	ldr	r0, [pc, #48]	@ (80054e4 <prvInitialiseTaskLists+0x6c>)
 80054b2:	f7fe faab 	bl	8003a0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80054b6:	480c      	ldr	r0, [pc, #48]	@ (80054e8 <prvInitialiseTaskLists+0x70>)
 80054b8:	f7fe faa8 	bl	8003a0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80054bc:	480b      	ldr	r0, [pc, #44]	@ (80054ec <prvInitialiseTaskLists+0x74>)
 80054be:	f7fe faa5 	bl	8003a0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80054c2:	4b0b      	ldr	r3, [pc, #44]	@ (80054f0 <prvInitialiseTaskLists+0x78>)
 80054c4:	4a05      	ldr	r2, [pc, #20]	@ (80054dc <prvInitialiseTaskLists+0x64>)
 80054c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80054c8:	4b0a      	ldr	r3, [pc, #40]	@ (80054f4 <prvInitialiseTaskLists+0x7c>)
 80054ca:	4a05      	ldr	r2, [pc, #20]	@ (80054e0 <prvInitialiseTaskLists+0x68>)
 80054cc:	601a      	str	r2, [r3, #0]
}
 80054ce:	bf00      	nop
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	20000c6c 	.word	0x20000c6c
 80054dc:	200010cc 	.word	0x200010cc
 80054e0:	200010e0 	.word	0x200010e0
 80054e4:	200010fc 	.word	0x200010fc
 80054e8:	20001110 	.word	0x20001110
 80054ec:	20001128 	.word	0x20001128
 80054f0:	200010f4 	.word	0x200010f4
 80054f4:	200010f8 	.word	0x200010f8

080054f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054fe:	e019      	b.n	8005534 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005500:	f000 fef2 	bl	80062e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005504:	4b10      	ldr	r3, [pc, #64]	@ (8005548 <prvCheckTasksWaitingTermination+0x50>)
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	3304      	adds	r3, #4
 8005510:	4618      	mov	r0, r3
 8005512:	f7fe fb05 	bl	8003b20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005516:	4b0d      	ldr	r3, [pc, #52]	@ (800554c <prvCheckTasksWaitingTermination+0x54>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	3b01      	subs	r3, #1
 800551c:	4a0b      	ldr	r2, [pc, #44]	@ (800554c <prvCheckTasksWaitingTermination+0x54>)
 800551e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005520:	4b0b      	ldr	r3, [pc, #44]	@ (8005550 <prvCheckTasksWaitingTermination+0x58>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	3b01      	subs	r3, #1
 8005526:	4a0a      	ldr	r2, [pc, #40]	@ (8005550 <prvCheckTasksWaitingTermination+0x58>)
 8005528:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800552a:	f000 ff0f 	bl	800634c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f810 	bl	8005554 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005534:	4b06      	ldr	r3, [pc, #24]	@ (8005550 <prvCheckTasksWaitingTermination+0x58>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1e1      	bne.n	8005500 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800553c:	bf00      	nop
 800553e:	bf00      	nop
 8005540:	3708      	adds	r7, #8
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	20001110 	.word	0x20001110
 800554c:	2000113c 	.word	0x2000113c
 8005550:	20001124 	.word	0x20001124

08005554 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005562:	2b00      	cmp	r3, #0
 8005564:	d108      	bne.n	8005578 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800556a:	4618      	mov	r0, r3
 800556c:	f001 f8ac 	bl	80066c8 <vPortFree>
				vPortFree( pxTCB );
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f001 f8a9 	bl	80066c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005576:	e019      	b.n	80055ac <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800557e:	2b01      	cmp	r3, #1
 8005580:	d103      	bne.n	800558a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f001 f8a0 	bl	80066c8 <vPortFree>
	}
 8005588:	e010      	b.n	80055ac <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005590:	2b02      	cmp	r3, #2
 8005592:	d00b      	beq.n	80055ac <prvDeleteTCB+0x58>
	__asm volatile
 8005594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005598:	f383 8811 	msr	BASEPRI, r3
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	60fb      	str	r3, [r7, #12]
}
 80055a6:	bf00      	nop
 80055a8:	bf00      	nop
 80055aa:	e7fd      	b.n	80055a8 <prvDeleteTCB+0x54>
	}
 80055ac:	bf00      	nop
 80055ae:	3710      	adds	r7, #16
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055ba:	4b0c      	ldr	r3, [pc, #48]	@ (80055ec <prvResetNextTaskUnblockTime+0x38>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d104      	bne.n	80055ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80055c4:	4b0a      	ldr	r3, [pc, #40]	@ (80055f0 <prvResetNextTaskUnblockTime+0x3c>)
 80055c6:	f04f 32ff 	mov.w	r2, #4294967295
 80055ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80055cc:	e008      	b.n	80055e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055ce:	4b07      	ldr	r3, [pc, #28]	@ (80055ec <prvResetNextTaskUnblockTime+0x38>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	4a04      	ldr	r2, [pc, #16]	@ (80055f0 <prvResetNextTaskUnblockTime+0x3c>)
 80055de:	6013      	str	r3, [r2, #0]
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr
 80055ec:	200010f4 	.word	0x200010f4
 80055f0:	2000115c 	.word	0x2000115c

080055f4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80055fa:	4b05      	ldr	r3, [pc, #20]	@ (8005610 <xTaskGetCurrentTaskHandle+0x1c>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005600:	687b      	ldr	r3, [r7, #4]
	}
 8005602:	4618      	mov	r0, r3
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	20000c68 	.word	0x20000c68

08005614 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800561a:	4b0b      	ldr	r3, [pc, #44]	@ (8005648 <xTaskGetSchedulerState+0x34>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d102      	bne.n	8005628 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005622:	2301      	movs	r3, #1
 8005624:	607b      	str	r3, [r7, #4]
 8005626:	e008      	b.n	800563a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005628:	4b08      	ldr	r3, [pc, #32]	@ (800564c <xTaskGetSchedulerState+0x38>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d102      	bne.n	8005636 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005630:	2302      	movs	r3, #2
 8005632:	607b      	str	r3, [r7, #4]
 8005634:	e001      	b.n	800563a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005636:	2300      	movs	r3, #0
 8005638:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800563a:	687b      	ldr	r3, [r7, #4]
	}
 800563c:	4618      	mov	r0, r3
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	20001148 	.word	0x20001148
 800564c:	20001164 	.word	0x20001164

08005650 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800565c:	2300      	movs	r3, #0
 800565e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d051      	beq.n	800570a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800566a:	4b2a      	ldr	r3, [pc, #168]	@ (8005714 <xTaskPriorityInherit+0xc4>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005670:	429a      	cmp	r2, r3
 8005672:	d241      	bcs.n	80056f8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	2b00      	cmp	r3, #0
 800567a:	db06      	blt.n	800568a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800567c:	4b25      	ldr	r3, [pc, #148]	@ (8005714 <xTaskPriorityInherit+0xc4>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005682:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	6959      	ldr	r1, [r3, #20]
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005692:	4613      	mov	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4413      	add	r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	4a1f      	ldr	r2, [pc, #124]	@ (8005718 <xTaskPriorityInherit+0xc8>)
 800569c:	4413      	add	r3, r2
 800569e:	4299      	cmp	r1, r3
 80056a0:	d122      	bne.n	80056e8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	3304      	adds	r3, #4
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fe fa3a 	bl	8003b20 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80056ac:	4b19      	ldr	r3, [pc, #100]	@ (8005714 <xTaskPriorityInherit+0xc4>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056ba:	4b18      	ldr	r3, [pc, #96]	@ (800571c <xTaskPriorityInherit+0xcc>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d903      	bls.n	80056ca <xTaskPriorityInherit+0x7a>
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c6:	4a15      	ldr	r2, [pc, #84]	@ (800571c <xTaskPriorityInherit+0xcc>)
 80056c8:	6013      	str	r3, [r2, #0]
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056ce:	4613      	mov	r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	4413      	add	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4a10      	ldr	r2, [pc, #64]	@ (8005718 <xTaskPriorityInherit+0xc8>)
 80056d8:	441a      	add	r2, r3
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	3304      	adds	r3, #4
 80056de:	4619      	mov	r1, r3
 80056e0:	4610      	mov	r0, r2
 80056e2:	f7fe f9c0 	bl	8003a66 <vListInsertEnd>
 80056e6:	e004      	b.n	80056f2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80056e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005714 <xTaskPriorityInherit+0xc4>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80056f2:	2301      	movs	r3, #1
 80056f4:	60fb      	str	r3, [r7, #12]
 80056f6:	e008      	b.n	800570a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80056fc:	4b05      	ldr	r3, [pc, #20]	@ (8005714 <xTaskPriorityInherit+0xc4>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005702:	429a      	cmp	r2, r3
 8005704:	d201      	bcs.n	800570a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005706:	2301      	movs	r3, #1
 8005708:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800570a:	68fb      	ldr	r3, [r7, #12]
	}
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	20000c68 	.word	0x20000c68
 8005718:	20000c6c 	.word	0x20000c6c
 800571c:	20001144 	.word	0x20001144

08005720 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800572c:	2300      	movs	r3, #0
 800572e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d058      	beq.n	80057e8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005736:	4b2f      	ldr	r3, [pc, #188]	@ (80057f4 <xTaskPriorityDisinherit+0xd4>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	429a      	cmp	r2, r3
 800573e:	d00b      	beq.n	8005758 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	60fb      	str	r3, [r7, #12]
}
 8005752:	bf00      	nop
 8005754:	bf00      	nop
 8005756:	e7fd      	b.n	8005754 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10b      	bne.n	8005778 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005764:	f383 8811 	msr	BASEPRI, r3
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	60bb      	str	r3, [r7, #8]
}
 8005772:	bf00      	nop
 8005774:	bf00      	nop
 8005776:	e7fd      	b.n	8005774 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800577c:	1e5a      	subs	r2, r3, #1
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800578a:	429a      	cmp	r2, r3
 800578c:	d02c      	beq.n	80057e8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005792:	2b00      	cmp	r3, #0
 8005794:	d128      	bne.n	80057e8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	3304      	adds	r3, #4
 800579a:	4618      	mov	r0, r3
 800579c:	f7fe f9c0 	bl	8003b20 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ac:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057b8:	4b0f      	ldr	r3, [pc, #60]	@ (80057f8 <xTaskPriorityDisinherit+0xd8>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d903      	bls.n	80057c8 <xTaskPriorityDisinherit+0xa8>
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c4:	4a0c      	ldr	r2, [pc, #48]	@ (80057f8 <xTaskPriorityDisinherit+0xd8>)
 80057c6:	6013      	str	r3, [r2, #0]
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057cc:	4613      	mov	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4413      	add	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4a09      	ldr	r2, [pc, #36]	@ (80057fc <xTaskPriorityDisinherit+0xdc>)
 80057d6:	441a      	add	r2, r3
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	3304      	adds	r3, #4
 80057dc:	4619      	mov	r1, r3
 80057de:	4610      	mov	r0, r2
 80057e0:	f7fe f941 	bl	8003a66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80057e4:	2301      	movs	r3, #1
 80057e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80057e8:	697b      	ldr	r3, [r7, #20]
	}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3718      	adds	r7, #24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	20000c68 	.word	0x20000c68
 80057f8:	20001144 	.word	0x20001144
 80057fc:	20000c6c 	.word	0x20000c6c

08005800 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005800:	b580      	push	{r7, lr}
 8005802:	b088      	sub	sp, #32
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800580e:	2301      	movs	r3, #1
 8005810:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d06c      	beq.n	80058f2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10b      	bne.n	8005838 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	60fb      	str	r3, [r7, #12]
}
 8005832:	bf00      	nop
 8005834:	bf00      	nop
 8005836:	e7fd      	b.n	8005834 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800583c:	683a      	ldr	r2, [r7, #0]
 800583e:	429a      	cmp	r2, r3
 8005840:	d902      	bls.n	8005848 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	61fb      	str	r3, [r7, #28]
 8005846:	e002      	b.n	800584e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800584c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005852:	69fa      	ldr	r2, [r7, #28]
 8005854:	429a      	cmp	r2, r3
 8005856:	d04c      	beq.n	80058f2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	429a      	cmp	r2, r3
 8005860:	d147      	bne.n	80058f2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005862:	4b26      	ldr	r3, [pc, #152]	@ (80058fc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	429a      	cmp	r2, r3
 800586a:	d10b      	bne.n	8005884 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800586c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005870:	f383 8811 	msr	BASEPRI, r3
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	60bb      	str	r3, [r7, #8]
}
 800587e:	bf00      	nop
 8005880:	bf00      	nop
 8005882:	e7fd      	b.n	8005880 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005888:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	69fa      	ldr	r2, [r7, #28]
 800588e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	2b00      	cmp	r3, #0
 8005896:	db04      	blt.n	80058a2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	6959      	ldr	r1, [r3, #20]
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	4613      	mov	r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4413      	add	r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4a13      	ldr	r2, [pc, #76]	@ (8005900 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80058b2:	4413      	add	r3, r2
 80058b4:	4299      	cmp	r1, r3
 80058b6:	d11c      	bne.n	80058f2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	3304      	adds	r3, #4
 80058bc:	4618      	mov	r0, r3
 80058be:	f7fe f92f 	bl	8003b20 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005904 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d903      	bls.n	80058d6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d2:	4a0c      	ldr	r2, [pc, #48]	@ (8005904 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80058d4:	6013      	str	r3, [r2, #0]
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058da:	4613      	mov	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4413      	add	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4a07      	ldr	r2, [pc, #28]	@ (8005900 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80058e4:	441a      	add	r2, r3
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	3304      	adds	r3, #4
 80058ea:	4619      	mov	r1, r3
 80058ec:	4610      	mov	r0, r2
 80058ee:	f7fe f8ba 	bl	8003a66 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80058f2:	bf00      	nop
 80058f4:	3720      	adds	r7, #32
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	20000c68 	.word	0x20000c68
 8005900:	20000c6c 	.word	0x20000c6c
 8005904:	20001144 	.word	0x20001144

08005908 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005908:	b480      	push	{r7}
 800590a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800590c:	4b07      	ldr	r3, [pc, #28]	@ (800592c <pvTaskIncrementMutexHeldCount+0x24>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d004      	beq.n	800591e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005914:	4b05      	ldr	r3, [pc, #20]	@ (800592c <pvTaskIncrementMutexHeldCount+0x24>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800591a:	3201      	adds	r2, #1
 800591c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800591e:	4b03      	ldr	r3, [pc, #12]	@ (800592c <pvTaskIncrementMutexHeldCount+0x24>)
 8005920:	681b      	ldr	r3, [r3, #0]
	}
 8005922:	4618      	mov	r0, r3
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr
 800592c:	20000c68 	.word	0x20000c68

08005930 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800593a:	4b21      	ldr	r3, [pc, #132]	@ (80059c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005940:	4b20      	ldr	r3, [pc, #128]	@ (80059c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	3304      	adds	r3, #4
 8005946:	4618      	mov	r0, r3
 8005948:	f7fe f8ea 	bl	8003b20 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005952:	d10a      	bne.n	800596a <prvAddCurrentTaskToDelayedList+0x3a>
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d007      	beq.n	800596a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800595a:	4b1a      	ldr	r3, [pc, #104]	@ (80059c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	3304      	adds	r3, #4
 8005960:	4619      	mov	r1, r3
 8005962:	4819      	ldr	r0, [pc, #100]	@ (80059c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005964:	f7fe f87f 	bl	8003a66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005968:	e026      	b.n	80059b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4413      	add	r3, r2
 8005970:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005972:	4b14      	ldr	r3, [pc, #80]	@ (80059c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	429a      	cmp	r2, r3
 8005980:	d209      	bcs.n	8005996 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005982:	4b12      	ldr	r3, [pc, #72]	@ (80059cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	4b0f      	ldr	r3, [pc, #60]	@ (80059c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	3304      	adds	r3, #4
 800598c:	4619      	mov	r1, r3
 800598e:	4610      	mov	r0, r2
 8005990:	f7fe f88d 	bl	8003aae <vListInsert>
}
 8005994:	e010      	b.n	80059b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005996:	4b0e      	ldr	r3, [pc, #56]	@ (80059d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	4b0a      	ldr	r3, [pc, #40]	@ (80059c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	3304      	adds	r3, #4
 80059a0:	4619      	mov	r1, r3
 80059a2:	4610      	mov	r0, r2
 80059a4:	f7fe f883 	bl	8003aae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80059a8:	4b0a      	ldr	r3, [pc, #40]	@ (80059d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d202      	bcs.n	80059b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80059b2:	4a08      	ldr	r2, [pc, #32]	@ (80059d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	6013      	str	r3, [r2, #0]
}
 80059b8:	bf00      	nop
 80059ba:	3710      	adds	r7, #16
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	20001140 	.word	0x20001140
 80059c4:	20000c68 	.word	0x20000c68
 80059c8:	20001128 	.word	0x20001128
 80059cc:	200010f8 	.word	0x200010f8
 80059d0:	200010f4 	.word	0x200010f4
 80059d4:	2000115c 	.word	0x2000115c

080059d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b08a      	sub	sp, #40	@ 0x28
 80059dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80059de:	2300      	movs	r3, #0
 80059e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80059e2:	f000 fb13 	bl	800600c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80059e6:	4b1d      	ldr	r3, [pc, #116]	@ (8005a5c <xTimerCreateTimerTask+0x84>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d021      	beq.n	8005a32 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80059ee:	2300      	movs	r3, #0
 80059f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80059f2:	2300      	movs	r3, #0
 80059f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80059f6:	1d3a      	adds	r2, r7, #4
 80059f8:	f107 0108 	add.w	r1, r7, #8
 80059fc:	f107 030c 	add.w	r3, r7, #12
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7fd ffe9 	bl	80039d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005a06:	6879      	ldr	r1, [r7, #4]
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	9202      	str	r2, [sp, #8]
 8005a0e:	9301      	str	r3, [sp, #4]
 8005a10:	2302      	movs	r3, #2
 8005a12:	9300      	str	r3, [sp, #0]
 8005a14:	2300      	movs	r3, #0
 8005a16:	460a      	mov	r2, r1
 8005a18:	4911      	ldr	r1, [pc, #68]	@ (8005a60 <xTimerCreateTimerTask+0x88>)
 8005a1a:	4812      	ldr	r0, [pc, #72]	@ (8005a64 <xTimerCreateTimerTask+0x8c>)
 8005a1c:	f7fe ffc0 	bl	80049a0 <xTaskCreateStatic>
 8005a20:	4603      	mov	r3, r0
 8005a22:	4a11      	ldr	r2, [pc, #68]	@ (8005a68 <xTimerCreateTimerTask+0x90>)
 8005a24:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005a26:	4b10      	ldr	r3, [pc, #64]	@ (8005a68 <xTimerCreateTimerTask+0x90>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10b      	bne.n	8005a50 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a3c:	f383 8811 	msr	BASEPRI, r3
 8005a40:	f3bf 8f6f 	isb	sy
 8005a44:	f3bf 8f4f 	dsb	sy
 8005a48:	613b      	str	r3, [r7, #16]
}
 8005a4a:	bf00      	nop
 8005a4c:	bf00      	nop
 8005a4e:	e7fd      	b.n	8005a4c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005a50:	697b      	ldr	r3, [r7, #20]
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3718      	adds	r7, #24
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	20001198 	.word	0x20001198
 8005a60:	08006a28 	.word	0x08006a28
 8005a64:	08005ba5 	.word	0x08005ba5
 8005a68:	2000119c 	.word	0x2000119c

08005a6c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b08a      	sub	sp, #40	@ 0x28
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
 8005a78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10b      	bne.n	8005a9c <xTimerGenericCommand+0x30>
	__asm volatile
 8005a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a88:	f383 8811 	msr	BASEPRI, r3
 8005a8c:	f3bf 8f6f 	isb	sy
 8005a90:	f3bf 8f4f 	dsb	sy
 8005a94:	623b      	str	r3, [r7, #32]
}
 8005a96:	bf00      	nop
 8005a98:	bf00      	nop
 8005a9a:	e7fd      	b.n	8005a98 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005a9c:	4b19      	ldr	r3, [pc, #100]	@ (8005b04 <xTimerGenericCommand+0x98>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d02a      	beq.n	8005afa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	2b05      	cmp	r3, #5
 8005ab4:	dc18      	bgt.n	8005ae8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005ab6:	f7ff fdad 	bl	8005614 <xTaskGetSchedulerState>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d109      	bne.n	8005ad4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005ac0:	4b10      	ldr	r3, [pc, #64]	@ (8005b04 <xTimerGenericCommand+0x98>)
 8005ac2:	6818      	ldr	r0, [r3, #0]
 8005ac4:	f107 0110 	add.w	r1, r7, #16
 8005ac8:	2300      	movs	r3, #0
 8005aca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005acc:	f7fe fa50 	bl	8003f70 <xQueueGenericSend>
 8005ad0:	6278      	str	r0, [r7, #36]	@ 0x24
 8005ad2:	e012      	b.n	8005afa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8005b04 <xTimerGenericCommand+0x98>)
 8005ad6:	6818      	ldr	r0, [r3, #0]
 8005ad8:	f107 0110 	add.w	r1, r7, #16
 8005adc:	2300      	movs	r3, #0
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f7fe fa46 	bl	8003f70 <xQueueGenericSend>
 8005ae4:	6278      	str	r0, [r7, #36]	@ 0x24
 8005ae6:	e008      	b.n	8005afa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005ae8:	4b06      	ldr	r3, [pc, #24]	@ (8005b04 <xTimerGenericCommand+0x98>)
 8005aea:	6818      	ldr	r0, [r3, #0]
 8005aec:	f107 0110 	add.w	r1, r7, #16
 8005af0:	2300      	movs	r3, #0
 8005af2:	683a      	ldr	r2, [r7, #0]
 8005af4:	f7fe fb3e 	bl	8004174 <xQueueGenericSendFromISR>
 8005af8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3728      	adds	r7, #40	@ 0x28
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	20001198 	.word	0x20001198

08005b08 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b088      	sub	sp, #32
 8005b0c:	af02      	add	r7, sp, #8
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b12:	4b23      	ldr	r3, [pc, #140]	@ (8005ba0 <prvProcessExpiredTimer+0x98>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	3304      	adds	r3, #4
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7fd fffd 	bl	8003b20 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b2c:	f003 0304 	and.w	r3, r3, #4
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d023      	beq.n	8005b7c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	699a      	ldr	r2, [r3, #24]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	18d1      	adds	r1, r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	6978      	ldr	r0, [r7, #20]
 8005b42:	f000 f8d5 	bl	8005cf0 <prvInsertTimerInActiveList>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d020      	beq.n	8005b8e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	2300      	movs	r3, #0
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	2100      	movs	r1, #0
 8005b56:	6978      	ldr	r0, [r7, #20]
 8005b58:	f7ff ff88 	bl	8005a6c <xTimerGenericCommand>
 8005b5c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d114      	bne.n	8005b8e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b68:	f383 8811 	msr	BASEPRI, r3
 8005b6c:	f3bf 8f6f 	isb	sy
 8005b70:	f3bf 8f4f 	dsb	sy
 8005b74:	60fb      	str	r3, [r7, #12]
}
 8005b76:	bf00      	nop
 8005b78:	bf00      	nop
 8005b7a:	e7fd      	b.n	8005b78 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b82:	f023 0301 	bic.w	r3, r3, #1
 8005b86:	b2da      	uxtb	r2, r3
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	6978      	ldr	r0, [r7, #20]
 8005b94:	4798      	blx	r3
}
 8005b96:	bf00      	nop
 8005b98:	3718      	adds	r7, #24
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	20001190 	.word	0x20001190

08005ba4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005bac:	f107 0308 	add.w	r3, r7, #8
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f000 f859 	bl	8005c68 <prvGetNextExpireTime>
 8005bb6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	4619      	mov	r1, r3
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f000 f805 	bl	8005bcc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005bc2:	f000 f8d7 	bl	8005d74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005bc6:	bf00      	nop
 8005bc8:	e7f0      	b.n	8005bac <prvTimerTask+0x8>
	...

08005bcc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005bd6:	f7ff f927 	bl	8004e28 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005bda:	f107 0308 	add.w	r3, r7, #8
 8005bde:	4618      	mov	r0, r3
 8005be0:	f000 f866 	bl	8005cb0 <prvSampleTimeNow>
 8005be4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d130      	bne.n	8005c4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10a      	bne.n	8005c08 <prvProcessTimerOrBlockTask+0x3c>
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d806      	bhi.n	8005c08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005bfa:	f7ff f923 	bl	8004e44 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005bfe:	68f9      	ldr	r1, [r7, #12]
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f7ff ff81 	bl	8005b08 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005c06:	e024      	b.n	8005c52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d008      	beq.n	8005c20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005c0e:	4b13      	ldr	r3, [pc, #76]	@ (8005c5c <prvProcessTimerOrBlockTask+0x90>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d101      	bne.n	8005c1c <prvProcessTimerOrBlockTask+0x50>
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e000      	b.n	8005c1e <prvProcessTimerOrBlockTask+0x52>
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005c20:	4b0f      	ldr	r3, [pc, #60]	@ (8005c60 <prvProcessTimerOrBlockTask+0x94>)
 8005c22:	6818      	ldr	r0, [r3, #0]
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	f7fe fe83 	bl	8004938 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005c32:	f7ff f907 	bl	8004e44 <xTaskResumeAll>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10a      	bne.n	8005c52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005c3c:	4b09      	ldr	r3, [pc, #36]	@ (8005c64 <prvProcessTimerOrBlockTask+0x98>)
 8005c3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	f3bf 8f4f 	dsb	sy
 8005c48:	f3bf 8f6f 	isb	sy
}
 8005c4c:	e001      	b.n	8005c52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005c4e:	f7ff f8f9 	bl	8004e44 <xTaskResumeAll>
}
 8005c52:	bf00      	nop
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	20001194 	.word	0x20001194
 8005c60:	20001198 	.word	0x20001198
 8005c64:	e000ed04 	.word	0xe000ed04

08005c68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005c70:	4b0e      	ldr	r3, [pc, #56]	@ (8005cac <prvGetNextExpireTime+0x44>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <prvGetNextExpireTime+0x16>
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	e000      	b.n	8005c80 <prvGetNextExpireTime+0x18>
 8005c7e:	2200      	movs	r2, #0
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d105      	bne.n	8005c98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c8c:	4b07      	ldr	r3, [pc, #28]	@ (8005cac <prvGetNextExpireTime+0x44>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	60fb      	str	r3, [r7, #12]
 8005c96:	e001      	b.n	8005c9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3714      	adds	r7, #20
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	20001190 	.word	0x20001190

08005cb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005cb8:	f7ff f962 	bl	8004f80 <xTaskGetTickCount>
 8005cbc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8005cec <prvSampleTimeNow+0x3c>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d205      	bcs.n	8005cd4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005cc8:	f000 f93a 	bl	8005f40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	601a      	str	r2, [r3, #0]
 8005cd2:	e002      	b.n	8005cda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005cda:	4a04      	ldr	r2, [pc, #16]	@ (8005cec <prvSampleTimeNow+0x3c>)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	200011a0 	.word	0x200011a0

08005cf0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
 8005cfc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d812      	bhi.n	8005d3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	1ad2      	subs	r2, r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d302      	bcc.n	8005d2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005d24:	2301      	movs	r3, #1
 8005d26:	617b      	str	r3, [r7, #20]
 8005d28:	e01b      	b.n	8005d62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005d2a:	4b10      	ldr	r3, [pc, #64]	@ (8005d6c <prvInsertTimerInActiveList+0x7c>)
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	3304      	adds	r3, #4
 8005d32:	4619      	mov	r1, r3
 8005d34:	4610      	mov	r0, r2
 8005d36:	f7fd feba 	bl	8003aae <vListInsert>
 8005d3a:	e012      	b.n	8005d62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d206      	bcs.n	8005d52 <prvInsertTimerInActiveList+0x62>
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d302      	bcc.n	8005d52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	617b      	str	r3, [r7, #20]
 8005d50:	e007      	b.n	8005d62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d52:	4b07      	ldr	r3, [pc, #28]	@ (8005d70 <prvInsertTimerInActiveList+0x80>)
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	3304      	adds	r3, #4
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	4610      	mov	r0, r2
 8005d5e:	f7fd fea6 	bl	8003aae <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005d62:	697b      	ldr	r3, [r7, #20]
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3718      	adds	r7, #24
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	20001194 	.word	0x20001194
 8005d70:	20001190 	.word	0x20001190

08005d74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b08e      	sub	sp, #56	@ 0x38
 8005d78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d7a:	e0ce      	b.n	8005f1a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	da19      	bge.n	8005db6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005d82:	1d3b      	adds	r3, r7, #4
 8005d84:	3304      	adds	r3, #4
 8005d86:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10b      	bne.n	8005da6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	61fb      	str	r3, [r7, #28]
}
 8005da0:	bf00      	nop
 8005da2:	bf00      	nop
 8005da4:	e7fd      	b.n	8005da2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dac:	6850      	ldr	r0, [r2, #4]
 8005dae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005db0:	6892      	ldr	r2, [r2, #8]
 8005db2:	4611      	mov	r1, r2
 8005db4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f2c0 80ae 	blt.w	8005f1a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d004      	beq.n	8005dd4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dcc:	3304      	adds	r3, #4
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7fd fea6 	bl	8003b20 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005dd4:	463b      	mov	r3, r7
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7ff ff6a 	bl	8005cb0 <prvSampleTimeNow>
 8005ddc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2b09      	cmp	r3, #9
 8005de2:	f200 8097 	bhi.w	8005f14 <prvProcessReceivedCommands+0x1a0>
 8005de6:	a201      	add	r2, pc, #4	@ (adr r2, 8005dec <prvProcessReceivedCommands+0x78>)
 8005de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dec:	08005e15 	.word	0x08005e15
 8005df0:	08005e15 	.word	0x08005e15
 8005df4:	08005e15 	.word	0x08005e15
 8005df8:	08005e8b 	.word	0x08005e8b
 8005dfc:	08005e9f 	.word	0x08005e9f
 8005e00:	08005eeb 	.word	0x08005eeb
 8005e04:	08005e15 	.word	0x08005e15
 8005e08:	08005e15 	.word	0x08005e15
 8005e0c:	08005e8b 	.word	0x08005e8b
 8005e10:	08005e9f 	.word	0x08005e9f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e1a:	f043 0301 	orr.w	r3, r3, #1
 8005e1e:	b2da      	uxtb	r2, r3
 8005e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005e26:	68ba      	ldr	r2, [r7, #8]
 8005e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	18d1      	adds	r1, r2, r3
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e34:	f7ff ff5c 	bl	8005cf0 <prvInsertTimerInActiveList>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d06c      	beq.n	8005f18 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e40:	6a1b      	ldr	r3, [r3, #32]
 8005e42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e4c:	f003 0304 	and.w	r3, r3, #4
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d061      	beq.n	8005f18 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	441a      	add	r2, r3
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	9300      	str	r3, [sp, #0]
 8005e60:	2300      	movs	r3, #0
 8005e62:	2100      	movs	r1, #0
 8005e64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e66:	f7ff fe01 	bl	8005a6c <xTimerGenericCommand>
 8005e6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005e6c:	6a3b      	ldr	r3, [r7, #32]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d152      	bne.n	8005f18 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e76:	f383 8811 	msr	BASEPRI, r3
 8005e7a:	f3bf 8f6f 	isb	sy
 8005e7e:	f3bf 8f4f 	dsb	sy
 8005e82:	61bb      	str	r3, [r7, #24]
}
 8005e84:	bf00      	nop
 8005e86:	bf00      	nop
 8005e88:	e7fd      	b.n	8005e86 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e90:	f023 0301 	bic.w	r3, r3, #1
 8005e94:	b2da      	uxtb	r2, r3
 8005e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e98:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005e9c:	e03d      	b.n	8005f1a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ea4:	f043 0301 	orr.w	r3, r3, #1
 8005ea8:	b2da      	uxtb	r2, r3
 8005eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10b      	bne.n	8005ed6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec2:	f383 8811 	msr	BASEPRI, r3
 8005ec6:	f3bf 8f6f 	isb	sy
 8005eca:	f3bf 8f4f 	dsb	sy
 8005ece:	617b      	str	r3, [r7, #20]
}
 8005ed0:	bf00      	nop
 8005ed2:	bf00      	nop
 8005ed4:	e7fd      	b.n	8005ed2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed8:	699a      	ldr	r2, [r3, #24]
 8005eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005edc:	18d1      	adds	r1, r2, r3
 8005ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ee2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ee4:	f7ff ff04 	bl	8005cf0 <prvInsertTimerInActiveList>
					break;
 8005ee8:	e017      	b.n	8005f1a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ef0:	f003 0302 	and.w	r3, r3, #2
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d103      	bne.n	8005f00 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005ef8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005efa:	f000 fbe5 	bl	80066c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005efe:	e00c      	b.n	8005f1a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f06:	f023 0301 	bic.w	r3, r3, #1
 8005f0a:	b2da      	uxtb	r2, r3
 8005f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005f12:	e002      	b.n	8005f1a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005f14:	bf00      	nop
 8005f16:	e000      	b.n	8005f1a <prvProcessReceivedCommands+0x1a6>
					break;
 8005f18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f1a:	4b08      	ldr	r3, [pc, #32]	@ (8005f3c <prvProcessReceivedCommands+0x1c8>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	1d39      	adds	r1, r7, #4
 8005f20:	2200      	movs	r2, #0
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7fe f9c4 	bl	80042b0 <xQueueReceive>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f47f af26 	bne.w	8005d7c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005f30:	bf00      	nop
 8005f32:	bf00      	nop
 8005f34:	3730      	adds	r7, #48	@ 0x30
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	20001198 	.word	0x20001198

08005f40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b088      	sub	sp, #32
 8005f44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f46:	e049      	b.n	8005fdc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f48:	4b2e      	ldr	r3, [pc, #184]	@ (8006004 <prvSwitchTimerLists+0xc4>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f52:	4b2c      	ldr	r3, [pc, #176]	@ (8006004 <prvSwitchTimerLists+0xc4>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	3304      	adds	r3, #4
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fd fddd 	bl	8003b20 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f74:	f003 0304 	and.w	r3, r3, #4
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d02f      	beq.n	8005fdc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	4413      	add	r3, r2
 8005f84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005f86:	68ba      	ldr	r2, [r7, #8]
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d90e      	bls.n	8005fac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	68ba      	ldr	r2, [r7, #8]
 8005f92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f9a:	4b1a      	ldr	r3, [pc, #104]	@ (8006004 <prvSwitchTimerLists+0xc4>)
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	3304      	adds	r3, #4
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	4610      	mov	r0, r2
 8005fa6:	f7fd fd82 	bl	8003aae <vListInsert>
 8005faa:	e017      	b.n	8005fdc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005fac:	2300      	movs	r3, #0
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	693a      	ldr	r2, [r7, #16]
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f7ff fd58 	bl	8005a6c <xTimerGenericCommand>
 8005fbc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d10b      	bne.n	8005fdc <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc8:	f383 8811 	msr	BASEPRI, r3
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	f3bf 8f4f 	dsb	sy
 8005fd4:	603b      	str	r3, [r7, #0]
}
 8005fd6:	bf00      	nop
 8005fd8:	bf00      	nop
 8005fda:	e7fd      	b.n	8005fd8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005fdc:	4b09      	ldr	r3, [pc, #36]	@ (8006004 <prvSwitchTimerLists+0xc4>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1b0      	bne.n	8005f48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005fe6:	4b07      	ldr	r3, [pc, #28]	@ (8006004 <prvSwitchTimerLists+0xc4>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005fec:	4b06      	ldr	r3, [pc, #24]	@ (8006008 <prvSwitchTimerLists+0xc8>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a04      	ldr	r2, [pc, #16]	@ (8006004 <prvSwitchTimerLists+0xc4>)
 8005ff2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005ff4:	4a04      	ldr	r2, [pc, #16]	@ (8006008 <prvSwitchTimerLists+0xc8>)
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	6013      	str	r3, [r2, #0]
}
 8005ffa:	bf00      	nop
 8005ffc:	3718      	adds	r7, #24
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	20001190 	.word	0x20001190
 8006008:	20001194 	.word	0x20001194

0800600c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006012:	f000 f969 	bl	80062e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006016:	4b15      	ldr	r3, [pc, #84]	@ (800606c <prvCheckForValidListAndQueue+0x60>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d120      	bne.n	8006060 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800601e:	4814      	ldr	r0, [pc, #80]	@ (8006070 <prvCheckForValidListAndQueue+0x64>)
 8006020:	f7fd fcf4 	bl	8003a0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006024:	4813      	ldr	r0, [pc, #76]	@ (8006074 <prvCheckForValidListAndQueue+0x68>)
 8006026:	f7fd fcf1 	bl	8003a0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800602a:	4b13      	ldr	r3, [pc, #76]	@ (8006078 <prvCheckForValidListAndQueue+0x6c>)
 800602c:	4a10      	ldr	r2, [pc, #64]	@ (8006070 <prvCheckForValidListAndQueue+0x64>)
 800602e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006030:	4b12      	ldr	r3, [pc, #72]	@ (800607c <prvCheckForValidListAndQueue+0x70>)
 8006032:	4a10      	ldr	r2, [pc, #64]	@ (8006074 <prvCheckForValidListAndQueue+0x68>)
 8006034:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006036:	2300      	movs	r3, #0
 8006038:	9300      	str	r3, [sp, #0]
 800603a:	4b11      	ldr	r3, [pc, #68]	@ (8006080 <prvCheckForValidListAndQueue+0x74>)
 800603c:	4a11      	ldr	r2, [pc, #68]	@ (8006084 <prvCheckForValidListAndQueue+0x78>)
 800603e:	2110      	movs	r1, #16
 8006040:	200a      	movs	r0, #10
 8006042:	f7fd fe01 	bl	8003c48 <xQueueGenericCreateStatic>
 8006046:	4603      	mov	r3, r0
 8006048:	4a08      	ldr	r2, [pc, #32]	@ (800606c <prvCheckForValidListAndQueue+0x60>)
 800604a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800604c:	4b07      	ldr	r3, [pc, #28]	@ (800606c <prvCheckForValidListAndQueue+0x60>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d005      	beq.n	8006060 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006054:	4b05      	ldr	r3, [pc, #20]	@ (800606c <prvCheckForValidListAndQueue+0x60>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	490b      	ldr	r1, [pc, #44]	@ (8006088 <prvCheckForValidListAndQueue+0x7c>)
 800605a:	4618      	mov	r0, r3
 800605c:	f7fe fc42 	bl	80048e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006060:	f000 f974 	bl	800634c <vPortExitCritical>
}
 8006064:	bf00      	nop
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	20001198 	.word	0x20001198
 8006070:	20001168 	.word	0x20001168
 8006074:	2000117c 	.word	0x2000117c
 8006078:	20001190 	.word	0x20001190
 800607c:	20001194 	.word	0x20001194
 8006080:	20001244 	.word	0x20001244
 8006084:	200011a4 	.word	0x200011a4
 8006088:	08006a30 	.word	0x08006a30

0800608c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	3b04      	subs	r3, #4
 800609c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80060a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	3b04      	subs	r3, #4
 80060aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	f023 0201 	bic.w	r2, r3, #1
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	3b04      	subs	r3, #4
 80060ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80060bc:	4a0c      	ldr	r2, [pc, #48]	@ (80060f0 <pxPortInitialiseStack+0x64>)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	3b14      	subs	r3, #20
 80060c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	3b04      	subs	r3, #4
 80060d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f06f 0202 	mvn.w	r2, #2
 80060da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	3b20      	subs	r3, #32
 80060e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80060e2:	68fb      	ldr	r3, [r7, #12]
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3714      	adds	r7, #20
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr
 80060f0:	080060f5 	.word	0x080060f5

080060f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80060fa:	2300      	movs	r3, #0
 80060fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80060fe:	4b13      	ldr	r3, [pc, #76]	@ (800614c <prvTaskExitError+0x58>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006106:	d00b      	beq.n	8006120 <prvTaskExitError+0x2c>
	__asm volatile
 8006108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800610c:	f383 8811 	msr	BASEPRI, r3
 8006110:	f3bf 8f6f 	isb	sy
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	60fb      	str	r3, [r7, #12]
}
 800611a:	bf00      	nop
 800611c:	bf00      	nop
 800611e:	e7fd      	b.n	800611c <prvTaskExitError+0x28>
	__asm volatile
 8006120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006124:	f383 8811 	msr	BASEPRI, r3
 8006128:	f3bf 8f6f 	isb	sy
 800612c:	f3bf 8f4f 	dsb	sy
 8006130:	60bb      	str	r3, [r7, #8]
}
 8006132:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006134:	bf00      	nop
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d0fc      	beq.n	8006136 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800613c:	bf00      	nop
 800613e:	bf00      	nop
 8006140:	3714      	adds	r7, #20
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	2000000c 	.word	0x2000000c

08006150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006150:	4b07      	ldr	r3, [pc, #28]	@ (8006170 <pxCurrentTCBConst2>)
 8006152:	6819      	ldr	r1, [r3, #0]
 8006154:	6808      	ldr	r0, [r1, #0]
 8006156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800615a:	f380 8809 	msr	PSP, r0
 800615e:	f3bf 8f6f 	isb	sy
 8006162:	f04f 0000 	mov.w	r0, #0
 8006166:	f380 8811 	msr	BASEPRI, r0
 800616a:	4770      	bx	lr
 800616c:	f3af 8000 	nop.w

08006170 <pxCurrentTCBConst2>:
 8006170:	20000c68 	.word	0x20000c68
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006174:	bf00      	nop
 8006176:	bf00      	nop

08006178 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006178:	4808      	ldr	r0, [pc, #32]	@ (800619c <prvPortStartFirstTask+0x24>)
 800617a:	6800      	ldr	r0, [r0, #0]
 800617c:	6800      	ldr	r0, [r0, #0]
 800617e:	f380 8808 	msr	MSP, r0
 8006182:	f04f 0000 	mov.w	r0, #0
 8006186:	f380 8814 	msr	CONTROL, r0
 800618a:	b662      	cpsie	i
 800618c:	b661      	cpsie	f
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	df00      	svc	0
 8006198:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800619a:	bf00      	nop
 800619c:	e000ed08 	.word	0xe000ed08

080061a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b086      	sub	sp, #24
 80061a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80061a6:	4b47      	ldr	r3, [pc, #284]	@ (80062c4 <xPortStartScheduler+0x124>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a47      	ldr	r2, [pc, #284]	@ (80062c8 <xPortStartScheduler+0x128>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d10b      	bne.n	80061c8 <xPortStartScheduler+0x28>
	__asm volatile
 80061b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b4:	f383 8811 	msr	BASEPRI, r3
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	613b      	str	r3, [r7, #16]
}
 80061c2:	bf00      	nop
 80061c4:	bf00      	nop
 80061c6:	e7fd      	b.n	80061c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80061c8:	4b3e      	ldr	r3, [pc, #248]	@ (80062c4 <xPortStartScheduler+0x124>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a3f      	ldr	r2, [pc, #252]	@ (80062cc <xPortStartScheduler+0x12c>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d10b      	bne.n	80061ea <xPortStartScheduler+0x4a>
	__asm volatile
 80061d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d6:	f383 8811 	msr	BASEPRI, r3
 80061da:	f3bf 8f6f 	isb	sy
 80061de:	f3bf 8f4f 	dsb	sy
 80061e2:	60fb      	str	r3, [r7, #12]
}
 80061e4:	bf00      	nop
 80061e6:	bf00      	nop
 80061e8:	e7fd      	b.n	80061e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80061ea:	4b39      	ldr	r3, [pc, #228]	@ (80062d0 <xPortStartScheduler+0x130>)
 80061ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	22ff      	movs	r2, #255	@ 0xff
 80061fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	b2db      	uxtb	r3, r3
 8006202:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006204:	78fb      	ldrb	r3, [r7, #3]
 8006206:	b2db      	uxtb	r3, r3
 8006208:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800620c:	b2da      	uxtb	r2, r3
 800620e:	4b31      	ldr	r3, [pc, #196]	@ (80062d4 <xPortStartScheduler+0x134>)
 8006210:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006212:	4b31      	ldr	r3, [pc, #196]	@ (80062d8 <xPortStartScheduler+0x138>)
 8006214:	2207      	movs	r2, #7
 8006216:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006218:	e009      	b.n	800622e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800621a:	4b2f      	ldr	r3, [pc, #188]	@ (80062d8 <xPortStartScheduler+0x138>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	3b01      	subs	r3, #1
 8006220:	4a2d      	ldr	r2, [pc, #180]	@ (80062d8 <xPortStartScheduler+0x138>)
 8006222:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006224:	78fb      	ldrb	r3, [r7, #3]
 8006226:	b2db      	uxtb	r3, r3
 8006228:	005b      	lsls	r3, r3, #1
 800622a:	b2db      	uxtb	r3, r3
 800622c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800622e:	78fb      	ldrb	r3, [r7, #3]
 8006230:	b2db      	uxtb	r3, r3
 8006232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006236:	2b80      	cmp	r3, #128	@ 0x80
 8006238:	d0ef      	beq.n	800621a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800623a:	4b27      	ldr	r3, [pc, #156]	@ (80062d8 <xPortStartScheduler+0x138>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f1c3 0307 	rsb	r3, r3, #7
 8006242:	2b04      	cmp	r3, #4
 8006244:	d00b      	beq.n	800625e <xPortStartScheduler+0xbe>
	__asm volatile
 8006246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800624a:	f383 8811 	msr	BASEPRI, r3
 800624e:	f3bf 8f6f 	isb	sy
 8006252:	f3bf 8f4f 	dsb	sy
 8006256:	60bb      	str	r3, [r7, #8]
}
 8006258:	bf00      	nop
 800625a:	bf00      	nop
 800625c:	e7fd      	b.n	800625a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800625e:	4b1e      	ldr	r3, [pc, #120]	@ (80062d8 <xPortStartScheduler+0x138>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	021b      	lsls	r3, r3, #8
 8006264:	4a1c      	ldr	r2, [pc, #112]	@ (80062d8 <xPortStartScheduler+0x138>)
 8006266:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006268:	4b1b      	ldr	r3, [pc, #108]	@ (80062d8 <xPortStartScheduler+0x138>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006270:	4a19      	ldr	r2, [pc, #100]	@ (80062d8 <xPortStartScheduler+0x138>)
 8006272:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	b2da      	uxtb	r2, r3
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800627c:	4b17      	ldr	r3, [pc, #92]	@ (80062dc <xPortStartScheduler+0x13c>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a16      	ldr	r2, [pc, #88]	@ (80062dc <xPortStartScheduler+0x13c>)
 8006282:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006286:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006288:	4b14      	ldr	r3, [pc, #80]	@ (80062dc <xPortStartScheduler+0x13c>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a13      	ldr	r2, [pc, #76]	@ (80062dc <xPortStartScheduler+0x13c>)
 800628e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006292:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006294:	f000 f8da 	bl	800644c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006298:	4b11      	ldr	r3, [pc, #68]	@ (80062e0 <xPortStartScheduler+0x140>)
 800629a:	2200      	movs	r2, #0
 800629c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800629e:	f000 f8f9 	bl	8006494 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80062a2:	4b10      	ldr	r3, [pc, #64]	@ (80062e4 <xPortStartScheduler+0x144>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a0f      	ldr	r2, [pc, #60]	@ (80062e4 <xPortStartScheduler+0x144>)
 80062a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80062ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80062ae:	f7ff ff63 	bl	8006178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80062b2:	f7fe ff2f 	bl	8005114 <vTaskSwitchContext>
	prvTaskExitError();
 80062b6:	f7ff ff1d 	bl	80060f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3718      	adds	r7, #24
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	e000ed00 	.word	0xe000ed00
 80062c8:	410fc271 	.word	0x410fc271
 80062cc:	410fc270 	.word	0x410fc270
 80062d0:	e000e400 	.word	0xe000e400
 80062d4:	20001294 	.word	0x20001294
 80062d8:	20001298 	.word	0x20001298
 80062dc:	e000ed20 	.word	0xe000ed20
 80062e0:	2000000c 	.word	0x2000000c
 80062e4:	e000ef34 	.word	0xe000ef34

080062e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	607b      	str	r3, [r7, #4]
}
 8006300:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006302:	4b10      	ldr	r3, [pc, #64]	@ (8006344 <vPortEnterCritical+0x5c>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	3301      	adds	r3, #1
 8006308:	4a0e      	ldr	r2, [pc, #56]	@ (8006344 <vPortEnterCritical+0x5c>)
 800630a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800630c:	4b0d      	ldr	r3, [pc, #52]	@ (8006344 <vPortEnterCritical+0x5c>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d110      	bne.n	8006336 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006314:	4b0c      	ldr	r3, [pc, #48]	@ (8006348 <vPortEnterCritical+0x60>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00b      	beq.n	8006336 <vPortEnterCritical+0x4e>
	__asm volatile
 800631e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	603b      	str	r3, [r7, #0]
}
 8006330:	bf00      	nop
 8006332:	bf00      	nop
 8006334:	e7fd      	b.n	8006332 <vPortEnterCritical+0x4a>
	}
}
 8006336:	bf00      	nop
 8006338:	370c      	adds	r7, #12
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	2000000c 	.word	0x2000000c
 8006348:	e000ed04 	.word	0xe000ed04

0800634c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006352:	4b12      	ldr	r3, [pc, #72]	@ (800639c <vPortExitCritical+0x50>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10b      	bne.n	8006372 <vPortExitCritical+0x26>
	__asm volatile
 800635a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800635e:	f383 8811 	msr	BASEPRI, r3
 8006362:	f3bf 8f6f 	isb	sy
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	607b      	str	r3, [r7, #4]
}
 800636c:	bf00      	nop
 800636e:	bf00      	nop
 8006370:	e7fd      	b.n	800636e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006372:	4b0a      	ldr	r3, [pc, #40]	@ (800639c <vPortExitCritical+0x50>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	3b01      	subs	r3, #1
 8006378:	4a08      	ldr	r2, [pc, #32]	@ (800639c <vPortExitCritical+0x50>)
 800637a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800637c:	4b07      	ldr	r3, [pc, #28]	@ (800639c <vPortExitCritical+0x50>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d105      	bne.n	8006390 <vPortExitCritical+0x44>
 8006384:	2300      	movs	r3, #0
 8006386:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	f383 8811 	msr	BASEPRI, r3
}
 800638e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr
 800639c:	2000000c 	.word	0x2000000c

080063a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80063a0:	f3ef 8009 	mrs	r0, PSP
 80063a4:	f3bf 8f6f 	isb	sy
 80063a8:	4b15      	ldr	r3, [pc, #84]	@ (8006400 <pxCurrentTCBConst>)
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	f01e 0f10 	tst.w	lr, #16
 80063b0:	bf08      	it	eq
 80063b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80063b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ba:	6010      	str	r0, [r2, #0]
 80063bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80063c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80063c4:	f380 8811 	msr	BASEPRI, r0
 80063c8:	f3bf 8f4f 	dsb	sy
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f7fe fea0 	bl	8005114 <vTaskSwitchContext>
 80063d4:	f04f 0000 	mov.w	r0, #0
 80063d8:	f380 8811 	msr	BASEPRI, r0
 80063dc:	bc09      	pop	{r0, r3}
 80063de:	6819      	ldr	r1, [r3, #0]
 80063e0:	6808      	ldr	r0, [r1, #0]
 80063e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063e6:	f01e 0f10 	tst.w	lr, #16
 80063ea:	bf08      	it	eq
 80063ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80063f0:	f380 8809 	msr	PSP, r0
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	f3af 8000 	nop.w

08006400 <pxCurrentTCBConst>:
 8006400:	20000c68 	.word	0x20000c68
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006404:	bf00      	nop
 8006406:	bf00      	nop

08006408 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
	__asm volatile
 800640e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	607b      	str	r3, [r7, #4]
}
 8006420:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006422:	f7fe fdbd 	bl	8004fa0 <xTaskIncrementTick>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d003      	beq.n	8006434 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800642c:	4b06      	ldr	r3, [pc, #24]	@ (8006448 <xPortSysTickHandler+0x40>)
 800642e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006432:	601a      	str	r2, [r3, #0]
 8006434:	2300      	movs	r3, #0
 8006436:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	f383 8811 	msr	BASEPRI, r3
}
 800643e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006440:	bf00      	nop
 8006442:	3708      	adds	r7, #8
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	e000ed04 	.word	0xe000ed04

0800644c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800644c:	b480      	push	{r7}
 800644e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006450:	4b0b      	ldr	r3, [pc, #44]	@ (8006480 <vPortSetupTimerInterrupt+0x34>)
 8006452:	2200      	movs	r2, #0
 8006454:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006456:	4b0b      	ldr	r3, [pc, #44]	@ (8006484 <vPortSetupTimerInterrupt+0x38>)
 8006458:	2200      	movs	r2, #0
 800645a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800645c:	4b0a      	ldr	r3, [pc, #40]	@ (8006488 <vPortSetupTimerInterrupt+0x3c>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a0a      	ldr	r2, [pc, #40]	@ (800648c <vPortSetupTimerInterrupt+0x40>)
 8006462:	fba2 2303 	umull	r2, r3, r2, r3
 8006466:	099b      	lsrs	r3, r3, #6
 8006468:	4a09      	ldr	r2, [pc, #36]	@ (8006490 <vPortSetupTimerInterrupt+0x44>)
 800646a:	3b01      	subs	r3, #1
 800646c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800646e:	4b04      	ldr	r3, [pc, #16]	@ (8006480 <vPortSetupTimerInterrupt+0x34>)
 8006470:	2207      	movs	r2, #7
 8006472:	601a      	str	r2, [r3, #0]
}
 8006474:	bf00      	nop
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	e000e010 	.word	0xe000e010
 8006484:	e000e018 	.word	0xe000e018
 8006488:	20000000 	.word	0x20000000
 800648c:	10624dd3 	.word	0x10624dd3
 8006490:	e000e014 	.word	0xe000e014

08006494 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006494:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80064a4 <vPortEnableVFP+0x10>
 8006498:	6801      	ldr	r1, [r0, #0]
 800649a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800649e:	6001      	str	r1, [r0, #0]
 80064a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80064a2:	bf00      	nop
 80064a4:	e000ed88 	.word	0xe000ed88

080064a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80064ae:	f3ef 8305 	mrs	r3, IPSR
 80064b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2b0f      	cmp	r3, #15
 80064b8:	d915      	bls.n	80064e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80064ba:	4a18      	ldr	r2, [pc, #96]	@ (800651c <vPortValidateInterruptPriority+0x74>)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	4413      	add	r3, r2
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80064c4:	4b16      	ldr	r3, [pc, #88]	@ (8006520 <vPortValidateInterruptPriority+0x78>)
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	7afa      	ldrb	r2, [r7, #11]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d20b      	bcs.n	80064e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80064ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d2:	f383 8811 	msr	BASEPRI, r3
 80064d6:	f3bf 8f6f 	isb	sy
 80064da:	f3bf 8f4f 	dsb	sy
 80064de:	607b      	str	r3, [r7, #4]
}
 80064e0:	bf00      	nop
 80064e2:	bf00      	nop
 80064e4:	e7fd      	b.n	80064e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80064e6:	4b0f      	ldr	r3, [pc, #60]	@ (8006524 <vPortValidateInterruptPriority+0x7c>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80064ee:	4b0e      	ldr	r3, [pc, #56]	@ (8006528 <vPortValidateInterruptPriority+0x80>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d90b      	bls.n	800650e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80064f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064fa:	f383 8811 	msr	BASEPRI, r3
 80064fe:	f3bf 8f6f 	isb	sy
 8006502:	f3bf 8f4f 	dsb	sy
 8006506:	603b      	str	r3, [r7, #0]
}
 8006508:	bf00      	nop
 800650a:	bf00      	nop
 800650c:	e7fd      	b.n	800650a <vPortValidateInterruptPriority+0x62>
	}
 800650e:	bf00      	nop
 8006510:	3714      	adds	r7, #20
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	e000e3f0 	.word	0xe000e3f0
 8006520:	20001294 	.word	0x20001294
 8006524:	e000ed0c 	.word	0xe000ed0c
 8006528:	20001298 	.word	0x20001298

0800652c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b08a      	sub	sp, #40	@ 0x28
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006534:	2300      	movs	r3, #0
 8006536:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006538:	f7fe fc76 	bl	8004e28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800653c:	4b5c      	ldr	r3, [pc, #368]	@ (80066b0 <pvPortMalloc+0x184>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d101      	bne.n	8006548 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006544:	f000 f924 	bl	8006790 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006548:	4b5a      	ldr	r3, [pc, #360]	@ (80066b4 <pvPortMalloc+0x188>)
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4013      	ands	r3, r2
 8006550:	2b00      	cmp	r3, #0
 8006552:	f040 8095 	bne.w	8006680 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d01e      	beq.n	800659a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800655c:	2208      	movs	r2, #8
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4413      	add	r3, r2
 8006562:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f003 0307 	and.w	r3, r3, #7
 800656a:	2b00      	cmp	r3, #0
 800656c:	d015      	beq.n	800659a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f023 0307 	bic.w	r3, r3, #7
 8006574:	3308      	adds	r3, #8
 8006576:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f003 0307 	and.w	r3, r3, #7
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00b      	beq.n	800659a <pvPortMalloc+0x6e>
	__asm volatile
 8006582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006586:	f383 8811 	msr	BASEPRI, r3
 800658a:	f3bf 8f6f 	isb	sy
 800658e:	f3bf 8f4f 	dsb	sy
 8006592:	617b      	str	r3, [r7, #20]
}
 8006594:	bf00      	nop
 8006596:	bf00      	nop
 8006598:	e7fd      	b.n	8006596 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d06f      	beq.n	8006680 <pvPortMalloc+0x154>
 80065a0:	4b45      	ldr	r3, [pc, #276]	@ (80066b8 <pvPortMalloc+0x18c>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d86a      	bhi.n	8006680 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80065aa:	4b44      	ldr	r3, [pc, #272]	@ (80066bc <pvPortMalloc+0x190>)
 80065ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80065ae:	4b43      	ldr	r3, [pc, #268]	@ (80066bc <pvPortMalloc+0x190>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065b4:	e004      	b.n	80065c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80065b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80065ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d903      	bls.n	80065d2 <pvPortMalloc+0xa6>
 80065ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1f1      	bne.n	80065b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80065d2:	4b37      	ldr	r3, [pc, #220]	@ (80066b0 <pvPortMalloc+0x184>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065d8:	429a      	cmp	r2, r3
 80065da:	d051      	beq.n	8006680 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80065dc:	6a3b      	ldr	r3, [r7, #32]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2208      	movs	r2, #8
 80065e2:	4413      	add	r3, r2
 80065e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80065e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	6a3b      	ldr	r3, [r7, #32]
 80065ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80065ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	1ad2      	subs	r2, r2, r3
 80065f6:	2308      	movs	r3, #8
 80065f8:	005b      	lsls	r3, r3, #1
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d920      	bls.n	8006640 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80065fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4413      	add	r3, r2
 8006604:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	f003 0307 	and.w	r3, r3, #7
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00b      	beq.n	8006628 <pvPortMalloc+0xfc>
	__asm volatile
 8006610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006614:	f383 8811 	msr	BASEPRI, r3
 8006618:	f3bf 8f6f 	isb	sy
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	613b      	str	r3, [r7, #16]
}
 8006622:	bf00      	nop
 8006624:	bf00      	nop
 8006626:	e7fd      	b.n	8006624 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	1ad2      	subs	r2, r2, r3
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800663a:	69b8      	ldr	r0, [r7, #24]
 800663c:	f000 f90a 	bl	8006854 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006640:	4b1d      	ldr	r3, [pc, #116]	@ (80066b8 <pvPortMalloc+0x18c>)
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	4a1b      	ldr	r2, [pc, #108]	@ (80066b8 <pvPortMalloc+0x18c>)
 800664c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800664e:	4b1a      	ldr	r3, [pc, #104]	@ (80066b8 <pvPortMalloc+0x18c>)
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	4b1b      	ldr	r3, [pc, #108]	@ (80066c0 <pvPortMalloc+0x194>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	429a      	cmp	r2, r3
 8006658:	d203      	bcs.n	8006662 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800665a:	4b17      	ldr	r3, [pc, #92]	@ (80066b8 <pvPortMalloc+0x18c>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a18      	ldr	r2, [pc, #96]	@ (80066c0 <pvPortMalloc+0x194>)
 8006660:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006664:	685a      	ldr	r2, [r3, #4]
 8006666:	4b13      	ldr	r3, [pc, #76]	@ (80066b4 <pvPortMalloc+0x188>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	431a      	orrs	r2, r3
 800666c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006672:	2200      	movs	r2, #0
 8006674:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006676:	4b13      	ldr	r3, [pc, #76]	@ (80066c4 <pvPortMalloc+0x198>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	3301      	adds	r3, #1
 800667c:	4a11      	ldr	r2, [pc, #68]	@ (80066c4 <pvPortMalloc+0x198>)
 800667e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006680:	f7fe fbe0 	bl	8004e44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	f003 0307 	and.w	r3, r3, #7
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00b      	beq.n	80066a6 <pvPortMalloc+0x17a>
	__asm volatile
 800668e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006692:	f383 8811 	msr	BASEPRI, r3
 8006696:	f3bf 8f6f 	isb	sy
 800669a:	f3bf 8f4f 	dsb	sy
 800669e:	60fb      	str	r3, [r7, #12]
}
 80066a0:	bf00      	nop
 80066a2:	bf00      	nop
 80066a4:	e7fd      	b.n	80066a2 <pvPortMalloc+0x176>
	return pvReturn;
 80066a6:	69fb      	ldr	r3, [r7, #28]
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3728      	adds	r7, #40	@ 0x28
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	20004ea4 	.word	0x20004ea4
 80066b4:	20004eb8 	.word	0x20004eb8
 80066b8:	20004ea8 	.word	0x20004ea8
 80066bc:	20004e9c 	.word	0x20004e9c
 80066c0:	20004eac 	.word	0x20004eac
 80066c4:	20004eb0 	.word	0x20004eb0

080066c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d04f      	beq.n	800677a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80066da:	2308      	movs	r3, #8
 80066dc:	425b      	negs	r3, r3
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	4413      	add	r3, r2
 80066e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	685a      	ldr	r2, [r3, #4]
 80066ec:	4b25      	ldr	r3, [pc, #148]	@ (8006784 <vPortFree+0xbc>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4013      	ands	r3, r2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10b      	bne.n	800670e <vPortFree+0x46>
	__asm volatile
 80066f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066fa:	f383 8811 	msr	BASEPRI, r3
 80066fe:	f3bf 8f6f 	isb	sy
 8006702:	f3bf 8f4f 	dsb	sy
 8006706:	60fb      	str	r3, [r7, #12]
}
 8006708:	bf00      	nop
 800670a:	bf00      	nop
 800670c:	e7fd      	b.n	800670a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00b      	beq.n	800672e <vPortFree+0x66>
	__asm volatile
 8006716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800671a:	f383 8811 	msr	BASEPRI, r3
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	f3bf 8f4f 	dsb	sy
 8006726:	60bb      	str	r3, [r7, #8]
}
 8006728:	bf00      	nop
 800672a:	bf00      	nop
 800672c:	e7fd      	b.n	800672a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	4b14      	ldr	r3, [pc, #80]	@ (8006784 <vPortFree+0xbc>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4013      	ands	r3, r2
 8006738:	2b00      	cmp	r3, #0
 800673a:	d01e      	beq.n	800677a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d11a      	bne.n	800677a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	685a      	ldr	r2, [r3, #4]
 8006748:	4b0e      	ldr	r3, [pc, #56]	@ (8006784 <vPortFree+0xbc>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	43db      	mvns	r3, r3
 800674e:	401a      	ands	r2, r3
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006754:	f7fe fb68 	bl	8004e28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	4b0a      	ldr	r3, [pc, #40]	@ (8006788 <vPortFree+0xc0>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4413      	add	r3, r2
 8006762:	4a09      	ldr	r2, [pc, #36]	@ (8006788 <vPortFree+0xc0>)
 8006764:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006766:	6938      	ldr	r0, [r7, #16]
 8006768:	f000 f874 	bl	8006854 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800676c:	4b07      	ldr	r3, [pc, #28]	@ (800678c <vPortFree+0xc4>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	3301      	adds	r3, #1
 8006772:	4a06      	ldr	r2, [pc, #24]	@ (800678c <vPortFree+0xc4>)
 8006774:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006776:	f7fe fb65 	bl	8004e44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800677a:	bf00      	nop
 800677c:	3718      	adds	r7, #24
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	20004eb8 	.word	0x20004eb8
 8006788:	20004ea8 	.word	0x20004ea8
 800678c:	20004eb4 	.word	0x20004eb4

08006790 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006796:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800679a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800679c:	4b27      	ldr	r3, [pc, #156]	@ (800683c <prvHeapInit+0xac>)
 800679e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f003 0307 	and.w	r3, r3, #7
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00c      	beq.n	80067c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	3307      	adds	r3, #7
 80067ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f023 0307 	bic.w	r3, r3, #7
 80067b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	4a1f      	ldr	r2, [pc, #124]	@ (800683c <prvHeapInit+0xac>)
 80067c0:	4413      	add	r3, r2
 80067c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80067c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006840 <prvHeapInit+0xb0>)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80067ce:	4b1c      	ldr	r3, [pc, #112]	@ (8006840 <prvHeapInit+0xb0>)
 80067d0:	2200      	movs	r2, #0
 80067d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68ba      	ldr	r2, [r7, #8]
 80067d8:	4413      	add	r3, r2
 80067da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80067dc:	2208      	movs	r2, #8
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	1a9b      	subs	r3, r3, r2
 80067e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f023 0307 	bic.w	r3, r3, #7
 80067ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	4a15      	ldr	r2, [pc, #84]	@ (8006844 <prvHeapInit+0xb4>)
 80067f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80067f2:	4b14      	ldr	r3, [pc, #80]	@ (8006844 <prvHeapInit+0xb4>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2200      	movs	r2, #0
 80067f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80067fa:	4b12      	ldr	r3, [pc, #72]	@ (8006844 <prvHeapInit+0xb4>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2200      	movs	r2, #0
 8006800:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	1ad2      	subs	r2, r2, r3
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006810:	4b0c      	ldr	r3, [pc, #48]	@ (8006844 <prvHeapInit+0xb4>)
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	4a0a      	ldr	r2, [pc, #40]	@ (8006848 <prvHeapInit+0xb8>)
 800681e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	4a09      	ldr	r2, [pc, #36]	@ (800684c <prvHeapInit+0xbc>)
 8006826:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006828:	4b09      	ldr	r3, [pc, #36]	@ (8006850 <prvHeapInit+0xc0>)
 800682a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800682e:	601a      	str	r2, [r3, #0]
}
 8006830:	bf00      	nop
 8006832:	3714      	adds	r7, #20
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	2000129c 	.word	0x2000129c
 8006840:	20004e9c 	.word	0x20004e9c
 8006844:	20004ea4 	.word	0x20004ea4
 8006848:	20004eac 	.word	0x20004eac
 800684c:	20004ea8 	.word	0x20004ea8
 8006850:	20004eb8 	.word	0x20004eb8

08006854 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800685c:	4b28      	ldr	r3, [pc, #160]	@ (8006900 <prvInsertBlockIntoFreeList+0xac>)
 800685e:	60fb      	str	r3, [r7, #12]
 8006860:	e002      	b.n	8006868 <prvInsertBlockIntoFreeList+0x14>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	60fb      	str	r3, [r7, #12]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	429a      	cmp	r2, r3
 8006870:	d8f7      	bhi.n	8006862 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	4413      	add	r3, r2
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	429a      	cmp	r2, r3
 8006882:	d108      	bne.n	8006896 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	685a      	ldr	r2, [r3, #4]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	441a      	add	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	441a      	add	r2, r3
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d118      	bne.n	80068dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	4b15      	ldr	r3, [pc, #84]	@ (8006904 <prvInsertBlockIntoFreeList+0xb0>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d00d      	beq.n	80068d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	685a      	ldr	r2, [r3, #4]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	441a      	add	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	601a      	str	r2, [r3, #0]
 80068d0:	e008      	b.n	80068e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80068d2:	4b0c      	ldr	r3, [pc, #48]	@ (8006904 <prvInsertBlockIntoFreeList+0xb0>)
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	601a      	str	r2, [r3, #0]
 80068da:	e003      	b.n	80068e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d002      	beq.n	80068f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068f2:	bf00      	nop
 80068f4:	3714      	adds	r7, #20
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	20004e9c 	.word	0x20004e9c
 8006904:	20004ea4 	.word	0x20004ea4

08006908 <memset>:
 8006908:	4402      	add	r2, r0
 800690a:	4603      	mov	r3, r0
 800690c:	4293      	cmp	r3, r2
 800690e:	d100      	bne.n	8006912 <memset+0xa>
 8006910:	4770      	bx	lr
 8006912:	f803 1b01 	strb.w	r1, [r3], #1
 8006916:	e7f9      	b.n	800690c <memset+0x4>

08006918 <__libc_init_array>:
 8006918:	b570      	push	{r4, r5, r6, lr}
 800691a:	4d0d      	ldr	r5, [pc, #52]	@ (8006950 <__libc_init_array+0x38>)
 800691c:	4c0d      	ldr	r4, [pc, #52]	@ (8006954 <__libc_init_array+0x3c>)
 800691e:	1b64      	subs	r4, r4, r5
 8006920:	10a4      	asrs	r4, r4, #2
 8006922:	2600      	movs	r6, #0
 8006924:	42a6      	cmp	r6, r4
 8006926:	d109      	bne.n	800693c <__libc_init_array+0x24>
 8006928:	4d0b      	ldr	r5, [pc, #44]	@ (8006958 <__libc_init_array+0x40>)
 800692a:	4c0c      	ldr	r4, [pc, #48]	@ (800695c <__libc_init_array+0x44>)
 800692c:	f000 f826 	bl	800697c <_init>
 8006930:	1b64      	subs	r4, r4, r5
 8006932:	10a4      	asrs	r4, r4, #2
 8006934:	2600      	movs	r6, #0
 8006936:	42a6      	cmp	r6, r4
 8006938:	d105      	bne.n	8006946 <__libc_init_array+0x2e>
 800693a:	bd70      	pop	{r4, r5, r6, pc}
 800693c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006940:	4798      	blx	r3
 8006942:	3601      	adds	r6, #1
 8006944:	e7ee      	b.n	8006924 <__libc_init_array+0xc>
 8006946:	f855 3b04 	ldr.w	r3, [r5], #4
 800694a:	4798      	blx	r3
 800694c:	3601      	adds	r6, #1
 800694e:	e7f2      	b.n	8006936 <__libc_init_array+0x1e>
 8006950:	08006ad4 	.word	0x08006ad4
 8006954:	08006ad4 	.word	0x08006ad4
 8006958:	08006ad4 	.word	0x08006ad4
 800695c:	08006ad8 	.word	0x08006ad8

08006960 <memcpy>:
 8006960:	440a      	add	r2, r1
 8006962:	4291      	cmp	r1, r2
 8006964:	f100 33ff 	add.w	r3, r0, #4294967295
 8006968:	d100      	bne.n	800696c <memcpy+0xc>
 800696a:	4770      	bx	lr
 800696c:	b510      	push	{r4, lr}
 800696e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006972:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006976:	4291      	cmp	r1, r2
 8006978:	d1f9      	bne.n	800696e <memcpy+0xe>
 800697a:	bd10      	pop	{r4, pc}

0800697c <_init>:
 800697c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800697e:	bf00      	nop
 8006980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006982:	bc08      	pop	{r3}
 8006984:	469e      	mov	lr, r3
 8006986:	4770      	bx	lr

08006988 <_fini>:
 8006988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800698a:	bf00      	nop
 800698c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800698e:	bc08      	pop	{r3}
 8006990:	469e      	mov	lr, r3
 8006992:	4770      	bx	lr
