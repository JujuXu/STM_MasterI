
TP3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007630  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  08007800  08007800  00008800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a34  08007a34  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  08007a34  08007a34  00008a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a3c  08007a3c  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a3c  08007a3c  00008a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a40  08007a40  00008a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007a44  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000500c  20000060  08007aa4  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000506c  08007aa4  0000906c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001698c  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038a9  00000000  00000000  0001fa1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  000232c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e34  00000000  00000000  00024568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000244dd  00000000  00000000  0002539c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001758a  00000000  00000000  00049879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d56bf  00000000  00000000  00060e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001364c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000519c  00000000  00000000  00136508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0013b6a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080077e8 	.word	0x080077e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	080077e8 	.word	0x080077e8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of uartMutex */
  uartMutexHandle = osMutexNew(&uartMutex_attributes);
 80005b4:	4823      	ldr	r0, [pc, #140]	@ (8000644 <MX_FREERTOS_Init+0x94>)
 80005b6:	f003 fa02 	bl	80039be <osMutexNew>
 80005ba:	4603      	mov	r3, r0
 80005bc:	4a22      	ldr	r2, [pc, #136]	@ (8000648 <MX_FREERTOS_Init+0x98>)
 80005be:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of printQueue */
  printQueueHandle = osMessageQueueNew (32, sizeof(impData_t), &printQueue_attributes);
 80005c0:	4a22      	ldr	r2, [pc, #136]	@ (800064c <MX_FREERTOS_Init+0x9c>)
 80005c2:	2108      	movs	r1, #8
 80005c4:	2020      	movs	r0, #32
 80005c6:	f003 fb08 	bl	8003bda <osMessageQueueNew>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4a20      	ldr	r2, [pc, #128]	@ (8000650 <MX_FREERTOS_Init+0xa0>)
 80005ce:	6013      	str	r3, [r2, #0]

  /* creation of printStrQueue */
  printStrQueueHandle = osMessageQueueNew (32, sizeof(impDataStr_t), &printStrQueue_attributes);
 80005d0:	4a20      	ldr	r2, [pc, #128]	@ (8000654 <MX_FREERTOS_Init+0xa4>)
 80005d2:	2108      	movs	r1, #8
 80005d4:	2020      	movs	r0, #32
 80005d6:	f003 fb00 	bl	8003bda <osMessageQueueNew>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a1e      	ldr	r2, [pc, #120]	@ (8000658 <MX_FREERTOS_Init+0xa8>)
 80005de:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005e0:	4a1e      	ldr	r2, [pc, #120]	@ (800065c <MX_FREERTOS_Init+0xac>)
 80005e2:	2100      	movs	r1, #0
 80005e4:	481e      	ldr	r0, [pc, #120]	@ (8000660 <MX_FREERTOS_Init+0xb0>)
 80005e6:	f003 f93d 	bl	8003864 <osThreadNew>
 80005ea:	4603      	mov	r3, r0
 80005ec:	4a1d      	ldr	r2, [pc, #116]	@ (8000664 <MX_FREERTOS_Init+0xb4>)
 80005ee:	6013      	str	r3, [r2, #0]

  /* creation of printThreadTask */
  printThreadTaskHandle = osThreadNew(printThread, NULL, &printThreadTask_attributes);
 80005f0:	4a1d      	ldr	r2, [pc, #116]	@ (8000668 <MX_FREERTOS_Init+0xb8>)
 80005f2:	2100      	movs	r1, #0
 80005f4:	481d      	ldr	r0, [pc, #116]	@ (800066c <MX_FREERTOS_Init+0xbc>)
 80005f6:	f003 f935 	bl	8003864 <osThreadNew>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a1c      	ldr	r2, [pc, #112]	@ (8000670 <MX_FREERTOS_Init+0xc0>)
 80005fe:	6013      	str	r3, [r2, #0]

  /* creation of processThread1T */
  processThread1THandle = osThreadNew(processThread1, NULL, &processThread1T_attributes);
 8000600:	4a1c      	ldr	r2, [pc, #112]	@ (8000674 <MX_FREERTOS_Init+0xc4>)
 8000602:	2100      	movs	r1, #0
 8000604:	481c      	ldr	r0, [pc, #112]	@ (8000678 <MX_FREERTOS_Init+0xc8>)
 8000606:	f003 f92d 	bl	8003864 <osThreadNew>
 800060a:	4603      	mov	r3, r0
 800060c:	4a1b      	ldr	r2, [pc, #108]	@ (800067c <MX_FREERTOS_Init+0xcc>)
 800060e:	6013      	str	r3, [r2, #0]

  /* creation of processThread2T */
  processThread2THandle = osThreadNew(processThread2, NULL, &processThread2T_attributes);
 8000610:	4a1b      	ldr	r2, [pc, #108]	@ (8000680 <MX_FREERTOS_Init+0xd0>)
 8000612:	2100      	movs	r1, #0
 8000614:	481b      	ldr	r0, [pc, #108]	@ (8000684 <MX_FREERTOS_Init+0xd4>)
 8000616:	f003 f925 	bl	8003864 <osThreadNew>
 800061a:	4603      	mov	r3, r0
 800061c:	4a1a      	ldr	r2, [pc, #104]	@ (8000688 <MX_FREERTOS_Init+0xd8>)
 800061e:	6013      	str	r3, [r2, #0]

  /* creation of printStrThreadT */
  printStrThreadTHandle = osThreadNew(printStrThread, NULL, &printStrThreadT_attributes);
 8000620:	4a1a      	ldr	r2, [pc, #104]	@ (800068c <MX_FREERTOS_Init+0xdc>)
 8000622:	2100      	movs	r1, #0
 8000624:	481a      	ldr	r0, [pc, #104]	@ (8000690 <MX_FREERTOS_Init+0xe0>)
 8000626:	f003 f91d 	bl	8003864 <osThreadNew>
 800062a:	4603      	mov	r3, r0
 800062c:	4a19      	ldr	r2, [pc, #100]	@ (8000694 <MX_FREERTOS_Init+0xe4>)
 800062e:	6013      	str	r3, [r2, #0]

  /* creation of processStrTask */
  processStrTaskHandle = osThreadNew(processStr, NULL, &processStrTask_attributes);
 8000630:	4a19      	ldr	r2, [pc, #100]	@ (8000698 <MX_FREERTOS_Init+0xe8>)
 8000632:	2100      	movs	r1, #0
 8000634:	4819      	ldr	r0, [pc, #100]	@ (800069c <MX_FREERTOS_Init+0xec>)
 8000636:	f003 f915 	bl	8003864 <osThreadNew>
 800063a:	4603      	mov	r3, r0
 800063c:	4a18      	ldr	r2, [pc, #96]	@ (80006a0 <MX_FREERTOS_Init+0xf0>)
 800063e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	080079d8 	.word	0x080079d8
 8000648:	2000009c 	.word	0x2000009c
 800064c:	080079a8 	.word	0x080079a8
 8000650:	20000094 	.word	0x20000094
 8000654:	080079c0 	.word	0x080079c0
 8000658:	20000098 	.word	0x20000098
 800065c:	080078d0 	.word	0x080078d0
 8000660:	080006a5 	.word	0x080006a5
 8000664:	2000007c 	.word	0x2000007c
 8000668:	080078f4 	.word	0x080078f4
 800066c:	080006b5 	.word	0x080006b5
 8000670:	20000080 	.word	0x20000080
 8000674:	08007918 	.word	0x08007918
 8000678:	0800072d 	.word	0x0800072d
 800067c:	20000084 	.word	0x20000084
 8000680:	0800793c 	.word	0x0800793c
 8000684:	08000769 	.word	0x08000769
 8000688:	20000088 	.word	0x20000088
 800068c:	08007960 	.word	0x08007960
 8000690:	080007a5 	.word	0x080007a5
 8000694:	2000008c 	.word	0x2000008c
 8000698:	08007984 	.word	0x08007984
 800069c:	08000819 	.word	0x08000819
 80006a0:	20000090 	.word	0x20000090

080006a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006ac:	2001      	movs	r0, #1
 80006ae:	f003 f96b 	bl	8003988 <osDelay>
 80006b2:	e7fb      	b.n	80006ac <StartDefaultTask+0x8>

080006b4 <printThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_printThread */
void printThread(void *argument)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	@ 0x28
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN printThread */
  /* Infinite loop */
  for(;;)
  {
	  impData_t data;
	  osMessageQueueGet(printQueueHandle, &data, 0, osWaitForever);
 80006bc:	4b17      	ldr	r3, [pc, #92]	@ (800071c <printThread+0x68>)
 80006be:	6818      	ldr	r0, [r3, #0]
 80006c0:	f107 0120 	add.w	r1, r7, #32
 80006c4:	f04f 33ff 	mov.w	r3, #4294967295
 80006c8:	2200      	movs	r2, #0
 80006ca:	f003 fb59 	bl	8003d80 <osMessageQueueGet>

	  char buffer[20];
	  sprintf(buffer, "%c %u\r\n", data.c, (unsigned int) data.val);
 80006ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80006d2:	461a      	mov	r2, r3
 80006d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006d6:	f107 000c 	add.w	r0, r7, #12
 80006da:	4911      	ldr	r1, [pc, #68]	@ (8000720 <printThread+0x6c>)
 80006dc:	f006 fbe4 	bl	8006ea8 <siprintf>

	  osMutexAcquire(uartMutexHandle, osWaitForever);
 80006e0:	4b10      	ldr	r3, [pc, #64]	@ (8000724 <printThread+0x70>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f04f 31ff 	mov.w	r1, #4294967295
 80006e8:	4618      	mov	r0, r3
 80006ea:	f003 f9ee 	bl	8003aca <osMutexAcquire>

	  HAL_UART_Transmit(&huart3, (uint8_t *) buffer, strlen(buffer), 30);
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff fd8c 	bl	8000210 <strlen>
 80006f8:	4603      	mov	r3, r0
 80006fa:	b29a      	uxth	r2, r3
 80006fc:	f107 010c 	add.w	r1, r7, #12
 8000700:	231e      	movs	r3, #30
 8000702:	4809      	ldr	r0, [pc, #36]	@ (8000728 <printThread+0x74>)
 8000704:	f002 f97a 	bl	80029fc <HAL_UART_Transmit>

	  osMutexRelease(uartMutexHandle);
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <printThread+0x70>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4618      	mov	r0, r3
 800070e:	f003 fa27 	bl	8003b60 <osMutexRelease>
	  osDelay(1);
 8000712:	2001      	movs	r0, #1
 8000714:	f003 f938 	bl	8003988 <osDelay>
  {
 8000718:	bf00      	nop
 800071a:	e7cf      	b.n	80006bc <printThread+0x8>
 800071c:	20000094 	.word	0x20000094
 8000720:	08007884 	.word	0x08007884
 8000724:	2000009c 	.word	0x2000009c
 8000728:	200000a4 	.word	0x200000a4

0800072c <processThread1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_processThread1 */
void processThread1(void *argument)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN processThread1 */
  /* Infinite loop */
  for(;;)
  {
	  impData_t data = {'a',1};
 8000734:	4a0a      	ldr	r2, [pc, #40]	@ (8000760 <processThread1+0x34>)
 8000736:	f107 0308 	add.w	r3, r7, #8
 800073a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800073e:	e883 0003 	stmia.w	r3, {r0, r1}
//	  strcpy(data.c, "process");

	  osMessageQueuePut(printQueueHandle, &data, 0, osWaitForever);
 8000742:	4b08      	ldr	r3, [pc, #32]	@ (8000764 <processThread1+0x38>)
 8000744:	6818      	ldr	r0, [r3, #0]
 8000746:	f107 0108 	add.w	r1, r7, #8
 800074a:	f04f 33ff 	mov.w	r3, #4294967295
 800074e:	2200      	movs	r2, #0
 8000750:	f003 fab6 	bl	8003cc0 <osMessageQueuePut>

	  osDelay(500);
 8000754:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000758:	f003 f916 	bl	8003988 <osDelay>
  {
 800075c:	bf00      	nop
 800075e:	e7e9      	b.n	8000734 <processThread1+0x8>
 8000760:	0800788c 	.word	0x0800788c
 8000764:	20000094 	.word	0x20000094

08000768 <processThread2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_processThread2 */
void processThread2(void *argument)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN processThread2 */
  /* Infinite loop */
  for(;;)
  {
		impData_t data = {'b', 2};
 8000770:	4a0a      	ldr	r2, [pc, #40]	@ (800079c <processThread2+0x34>)
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	e892 0003 	ldmia.w	r2, {r0, r1}
 800077a:	e883 0003 	stmia.w	r3, {r0, r1}
		//strcpy(data.c, "process2");

		osMessageQueuePut(printQueueHandle, &data, 0, osWaitForever);
 800077e:	4b08      	ldr	r3, [pc, #32]	@ (80007a0 <processThread2+0x38>)
 8000780:	6818      	ldr	r0, [r3, #0]
 8000782:	f107 0108 	add.w	r1, r7, #8
 8000786:	f04f 33ff 	mov.w	r3, #4294967295
 800078a:	2200      	movs	r2, #0
 800078c:	f003 fa98 	bl	8003cc0 <osMessageQueuePut>

		osDelay(500);
 8000790:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000794:	f003 f8f8 	bl	8003988 <osDelay>
  {
 8000798:	bf00      	nop
 800079a:	e7e9      	b.n	8000770 <processThread2+0x8>
 800079c:	08007894 	.word	0x08007894
 80007a0:	20000094 	.word	0x20000094

080007a4 <printStrThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_printStrThread */
void printStrThread(void *argument)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b094      	sub	sp, #80	@ 0x50
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN printStrThread */
  /* Infinite loop */
  for(;;)
  {
	  impDataStr_t data;
	  osMessageQueueGet(printQueueHandle, &data, 0, osWaitForever);
 80007ac:	4b16      	ldr	r3, [pc, #88]	@ (8000808 <printStrThread+0x64>)
 80007ae:	6818      	ldr	r0, [r3, #0]
 80007b0:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80007b4:	f04f 33ff 	mov.w	r3, #4294967295
 80007b8:	2200      	movs	r2, #0
 80007ba:	f003 fae1 	bl	8003d80 <osMessageQueueGet>

	  char buffer[64];
	  sprintf(buffer, "%s %lu\r\n", data.c, data.val);
 80007be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80007c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80007c2:	f107 0008 	add.w	r0, r7, #8
 80007c6:	4911      	ldr	r1, [pc, #68]	@ (800080c <printStrThread+0x68>)
 80007c8:	f006 fb6e 	bl	8006ea8 <siprintf>

	  osMutexAcquire(uartMutexHandle, osWaitForever);
 80007cc:	4b10      	ldr	r3, [pc, #64]	@ (8000810 <printStrThread+0x6c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f04f 31ff 	mov.w	r1, #4294967295
 80007d4:	4618      	mov	r0, r3
 80007d6:	f003 f978 	bl	8003aca <osMutexAcquire>

	  HAL_UART_Transmit(&huart3, (uint8_t *) buffer, strlen(buffer), 30);
 80007da:	f107 0308 	add.w	r3, r7, #8
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff fd16 	bl	8000210 <strlen>
 80007e4:	4603      	mov	r3, r0
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	f107 0108 	add.w	r1, r7, #8
 80007ec:	231e      	movs	r3, #30
 80007ee:	4809      	ldr	r0, [pc, #36]	@ (8000814 <printStrThread+0x70>)
 80007f0:	f002 f904 	bl	80029fc <HAL_UART_Transmit>

	  osMutexRelease(uartMutexHandle);
 80007f4:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <printStrThread+0x6c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f003 f9b1 	bl	8003b60 <osMutexRelease>

	  osDelay(1);
 80007fe:	2001      	movs	r0, #1
 8000800:	f003 f8c2 	bl	8003988 <osDelay>
  {
 8000804:	bf00      	nop
 8000806:	e7d1      	b.n	80007ac <printStrThread+0x8>
 8000808:	20000094 	.word	0x20000094
 800080c:	0800789c 	.word	0x0800789c
 8000810:	2000009c 	.word	0x2000009c
 8000814:	200000a4 	.word	0x200000a4

08000818 <processStr>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_processStr */
void processStr(void *argument)
{
 8000818:	b590      	push	{r4, r7, lr}
 800081a:	b089      	sub	sp, #36	@ 0x24
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN processStr */
  /* Infinite loop */
  for(;;)
  {
	  char str[] = "Hello World!";
 8000820:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <processStr+0x3c>)
 8000822:	f107 0410 	add.w	r4, r7, #16
 8000826:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000828:	c407      	stmia	r4!, {r0, r1, r2}
 800082a:	7023      	strb	r3, [r4, #0]
	  impDataStr_t data = {str, 69};
 800082c:	f107 0310 	add.w	r3, r7, #16
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	2345      	movs	r3, #69	@ 0x45
 8000834:	60fb      	str	r3, [r7, #12]
	  //strcpy(data.c, "process2");

	  osMessageQueuePut(printQueueHandle, &data, 0, osWaitForever);
 8000836:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <processStr+0x40>)
 8000838:	6818      	ldr	r0, [r3, #0]
 800083a:	f107 0108 	add.w	r1, r7, #8
 800083e:	f04f 33ff 	mov.w	r3, #4294967295
 8000842:	2200      	movs	r2, #0
 8000844:	f003 fa3c 	bl	8003cc0 <osMessageQueuePut>

	  osDelay(500);
 8000848:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800084c:	f003 f89c 	bl	8003988 <osDelay>
  {
 8000850:	bf00      	nop
 8000852:	e7e5      	b.n	8000820 <processStr+0x8>
 8000854:	080078a8 	.word	0x080078a8
 8000858:	20000094 	.word	0x20000094

0800085c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08c      	sub	sp, #48	@ 0x30
 8000860:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	61bb      	str	r3, [r7, #24]
 8000876:	4b4c      	ldr	r3, [pc, #304]	@ (80009a8 <MX_GPIO_Init+0x14c>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	4a4b      	ldr	r2, [pc, #300]	@ (80009a8 <MX_GPIO_Init+0x14c>)
 800087c:	f043 0304 	orr.w	r3, r3, #4
 8000880:	6313      	str	r3, [r2, #48]	@ 0x30
 8000882:	4b49      	ldr	r3, [pc, #292]	@ (80009a8 <MX_GPIO_Init+0x14c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	f003 0304 	and.w	r3, r3, #4
 800088a:	61bb      	str	r3, [r7, #24]
 800088c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
 8000892:	4b45      	ldr	r3, [pc, #276]	@ (80009a8 <MX_GPIO_Init+0x14c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a44      	ldr	r2, [pc, #272]	@ (80009a8 <MX_GPIO_Init+0x14c>)
 8000898:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b42      	ldr	r3, [pc, #264]	@ (80009a8 <MX_GPIO_Init+0x14c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
 80008ae:	4b3e      	ldr	r3, [pc, #248]	@ (80009a8 <MX_GPIO_Init+0x14c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a3d      	ldr	r2, [pc, #244]	@ (80009a8 <MX_GPIO_Init+0x14c>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b3b      	ldr	r3, [pc, #236]	@ (80009a8 <MX_GPIO_Init+0x14c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	4b37      	ldr	r3, [pc, #220]	@ (80009a8 <MX_GPIO_Init+0x14c>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a36      	ldr	r2, [pc, #216]	@ (80009a8 <MX_GPIO_Init+0x14c>)
 80008d0:	f043 0308 	orr.w	r3, r3, #8
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b34      	ldr	r3, [pc, #208]	@ (80009a8 <MX_GPIO_Init+0x14c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0308 	and.w	r3, r3, #8
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	4b30      	ldr	r3, [pc, #192]	@ (80009a8 <MX_GPIO_Init+0x14c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a2f      	ldr	r2, [pc, #188]	@ (80009a8 <MX_GPIO_Init+0x14c>)
 80008ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b2d      	ldr	r3, [pc, #180]	@ (80009a8 <MX_GPIO_Init+0x14c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	4b29      	ldr	r3, [pc, #164]	@ (80009a8 <MX_GPIO_Init+0x14c>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a28      	ldr	r2, [pc, #160]	@ (80009a8 <MX_GPIO_Init+0x14c>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b26      	ldr	r3, [pc, #152]	@ (80009a8 <MX_GPIO_Init+0x14c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000920:	4822      	ldr	r0, [pc, #136]	@ (80009ac <MX_GPIO_Init+0x150>)
 8000922:	f000 fdb5 	bl	8001490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	2140      	movs	r1, #64	@ 0x40
 800092a:	4821      	ldr	r0, [pc, #132]	@ (80009b0 <MX_GPIO_Init+0x154>)
 800092c:	f000 fdb0 	bl	8001490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000930:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000936:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800093a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	4619      	mov	r1, r3
 8000946:	481b      	ldr	r0, [pc, #108]	@ (80009b4 <MX_GPIO_Init+0x158>)
 8000948:	f000 fc0e 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800094c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	4811      	ldr	r0, [pc, #68]	@ (80009ac <MX_GPIO_Init+0x150>)
 8000966:	f000 fbff 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800096a:	2340      	movs	r3, #64	@ 0x40
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	480b      	ldr	r0, [pc, #44]	@ (80009b0 <MX_GPIO_Init+0x154>)
 8000982:	f000 fbf1 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000986:	2380      	movs	r3, #128	@ 0x80
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098a:	2300      	movs	r3, #0
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	4805      	ldr	r0, [pc, #20]	@ (80009b0 <MX_GPIO_Init+0x154>)
 800099a:	f000 fbe5 	bl	8001168 <HAL_GPIO_Init>

}
 800099e:	bf00      	nop
 80009a0:	3730      	adds	r7, #48	@ 0x30
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020400 	.word	0x40020400
 80009b0:	40021800 	.word	0x40021800
 80009b4:	40020800 	.word	0x40020800

080009b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009bc:	f000 fa58 	bl	8000e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c0:	f000 f80e 	bl	80009e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c4:	f7ff ff4a 	bl	800085c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009c8:	f000 f918 	bl	8000bfc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009cc:	f000 f988 	bl	8000ce0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80009d0:	f002 fefe 	bl	80037d0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80009d4:	f7ff fdec 	bl	80005b0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80009d8:	f002 ff1e 	bl	8003818 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <main+0x24>

080009e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b094      	sub	sp, #80	@ 0x50
 80009e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	2234      	movs	r2, #52	@ 0x34
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f006 fa7a 	bl	8006ee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f4:	f107 0308 	add.w	r3, r7, #8
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a04:	2300      	movs	r3, #0
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	4b29      	ldr	r3, [pc, #164]	@ (8000ab0 <SystemClock_Config+0xd0>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0c:	4a28      	ldr	r2, [pc, #160]	@ (8000ab0 <SystemClock_Config+0xd0>)
 8000a0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a12:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a14:	4b26      	ldr	r3, [pc, #152]	@ (8000ab0 <SystemClock_Config+0xd0>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a20:	2300      	movs	r3, #0
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	4b23      	ldr	r3, [pc, #140]	@ (8000ab4 <SystemClock_Config+0xd4>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a22      	ldr	r2, [pc, #136]	@ (8000ab4 <SystemClock_Config+0xd4>)
 8000a2a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a2e:	6013      	str	r3, [r2, #0]
 8000a30:	4b20      	ldr	r3, [pc, #128]	@ (8000ab4 <SystemClock_Config+0xd4>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a38:	603b      	str	r3, [r7, #0]
 8000a3a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a40:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a44:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a46:	2302      	movs	r3, #2
 8000a48:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a4a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a50:	2304      	movs	r3, #4
 8000a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a54:	23a8      	movs	r3, #168	@ 0xa8
 8000a56:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a5c:	2307      	movs	r3, #7
 8000a5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a60:	2302      	movs	r3, #2
 8000a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f001 fcd9 	bl	8002420 <HAL_RCC_OscConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a74:	f000 f820 	bl	8000ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a78:	230f      	movs	r3, #15
 8000a7a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a84:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a88:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a8e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a90:	f107 0308 	add.w	r3, r7, #8
 8000a94:	2105      	movs	r1, #5
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 fe4e 	bl	8001738 <HAL_RCC_ClockConfig>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000aa2:	f000 f809 	bl	8000ab8 <Error_Handler>
  }
}
 8000aa6:	bf00      	nop
 8000aa8:	3750      	adds	r7, #80	@ 0x50
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40007000 	.word	0x40007000

08000ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000abc:	b672      	cpsid	i
}
 8000abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <Error_Handler+0x8>

08000ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <HAL_MspInit+0x54>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad2:	4a11      	ldr	r2, [pc, #68]	@ (8000b18 <HAL_MspInit+0x54>)
 8000ad4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ad8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ada:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <HAL_MspInit+0x54>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ade:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	603b      	str	r3, [r7, #0]
 8000aea:	4b0b      	ldr	r3, [pc, #44]	@ (8000b18 <HAL_MspInit+0x54>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aee:	4a0a      	ldr	r2, [pc, #40]	@ (8000b18 <HAL_MspInit+0x54>)
 8000af0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000af4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000af6:	4b08      	ldr	r3, [pc, #32]	@ (8000b18 <HAL_MspInit+0x54>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	210f      	movs	r1, #15
 8000b06:	f06f 0001 	mvn.w	r0, #1
 8000b0a:	f000 fb04 	bl	8001116 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800

08000b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <NMI_Handler+0x4>

08000b24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <HardFault_Handler+0x4>

08000b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <MemManage_Handler+0x4>

08000b34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <BusFault_Handler+0x4>

08000b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <UsageFault_Handler+0x4>

08000b44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b56:	f000 f9dd 	bl	8000f14 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b5a:	f005 f829 	bl	8005bb0 <xTaskGetSchedulerState>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d001      	beq.n	8000b68 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b64:	f005 ff20 	bl	80069a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b74:	4a14      	ldr	r2, [pc, #80]	@ (8000bc8 <_sbrk+0x5c>)
 8000b76:	4b15      	ldr	r3, [pc, #84]	@ (8000bcc <_sbrk+0x60>)
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b80:	4b13      	ldr	r3, [pc, #76]	@ (8000bd0 <_sbrk+0x64>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d102      	bne.n	8000b8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b88:	4b11      	ldr	r3, [pc, #68]	@ (8000bd0 <_sbrk+0x64>)
 8000b8a:	4a12      	ldr	r2, [pc, #72]	@ (8000bd4 <_sbrk+0x68>)
 8000b8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b8e:	4b10      	ldr	r3, [pc, #64]	@ (8000bd0 <_sbrk+0x64>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4413      	add	r3, r2
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d207      	bcs.n	8000bac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b9c:	f006 f9ac 	bl	8006ef8 <__errno>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8000baa:	e009      	b.n	8000bc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bac:	4b08      	ldr	r3, [pc, #32]	@ (8000bd0 <_sbrk+0x64>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <_sbrk+0x64>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	4a05      	ldr	r2, [pc, #20]	@ (8000bd0 <_sbrk+0x64>)
 8000bbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3718      	adds	r7, #24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20020000 	.word	0x20020000
 8000bcc:	00000400 	.word	0x00000400
 8000bd0:	200000a0 	.word	0x200000a0
 8000bd4:	20005070 	.word	0x20005070

08000bd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bdc:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <SystemInit+0x20>)
 8000bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000be2:	4a05      	ldr	r2, [pc, #20]	@ (8000bf8 <SystemInit+0x20>)
 8000be4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000be8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c00:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <MX_USART3_UART_Init+0x4c>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	@ (8000c4c <MX_USART3_UART_Init+0x50>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c06:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <MX_USART3_UART_Init+0x4c>)
 8000c08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <MX_USART3_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <MX_USART3_UART_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c48 <MX_USART3_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c20:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <MX_USART3_UART_Init+0x4c>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <MX_USART3_UART_Init+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <MX_USART3_UART_Init+0x4c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <MX_USART3_UART_Init+0x4c>)
 8000c34:	f001 fe92 	bl	800295c <HAL_UART_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c3e:	f7ff ff3b 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200000a4 	.word	0x200000a4
 8000c4c:	40004800 	.word	0x40004800

08000c50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	@ 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a19      	ldr	r2, [pc, #100]	@ (8000cd4 <HAL_UART_MspInit+0x84>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d12c      	bne.n	8000ccc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	4b18      	ldr	r3, [pc, #96]	@ (8000cd8 <HAL_UART_MspInit+0x88>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7a:	4a17      	ldr	r2, [pc, #92]	@ (8000cd8 <HAL_UART_MspInit+0x88>)
 8000c7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c82:	4b15      	ldr	r3, [pc, #84]	@ (8000cd8 <HAL_UART_MspInit+0x88>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	4b11      	ldr	r3, [pc, #68]	@ (8000cd8 <HAL_UART_MspInit+0x88>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	4a10      	ldr	r2, [pc, #64]	@ (8000cd8 <HAL_UART_MspInit+0x88>)
 8000c98:	f043 0308 	orr.w	r3, r3, #8
 8000c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd8 <HAL_UART_MspInit+0x88>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	f003 0308 	and.w	r3, r3, #8
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000caa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cbc:	2307      	movs	r3, #7
 8000cbe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4805      	ldr	r0, [pc, #20]	@ (8000cdc <HAL_UART_MspInit+0x8c>)
 8000cc8:	f000 fa4e 	bl	8001168 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ccc:	bf00      	nop
 8000cce:	3728      	adds	r7, #40	@ 0x28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40004800 	.word	0x40004800
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020c00 	.word	0x40020c00

08000ce0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ce4:	4b14      	ldr	r3, [pc, #80]	@ (8000d38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ce6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000cea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000cec:	4b12      	ldr	r3, [pc, #72]	@ (8000d38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cee:	2206      	movs	r2, #6
 8000cf0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000cf2:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cf4:	2202      	movs	r2, #2
 8000cf6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000d38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d00:	2202      	movs	r2, #2
 8000d02:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d04:	4b0c      	ldr	r3, [pc, #48]	@ (8000d38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d10:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d16:	4b08      	ldr	r3, [pc, #32]	@ (8000d38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d22:	4805      	ldr	r0, [pc, #20]	@ (8000d38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d24:	f000 fbcd 	bl	80014c2 <HAL_PCD_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000d2e:	f7ff fec3 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200000ec 	.word	0x200000ec

08000d3c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b0a0      	sub	sp, #128	@ 0x80
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d54:	f107 0310 	add.w	r3, r7, #16
 8000d58:	225c      	movs	r2, #92	@ 0x5c
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f006 f8c3 	bl	8006ee8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d6a:	d14e      	bne.n	8000e0a <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000d6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d70:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000d72:	2300      	movs	r3, #0
 8000d74:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d76:	f107 0310 	add.w	r3, r7, #16
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 fdf6 	bl	800196c <HAL_RCCEx_PeriphCLKConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000d86:	f7ff fe97 	bl	8000ab8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	4b21      	ldr	r3, [pc, #132]	@ (8000e14 <HAL_PCD_MspInit+0xd8>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	4a20      	ldr	r2, [pc, #128]	@ (8000e14 <HAL_PCD_MspInit+0xd8>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000e14 <HAL_PCD_MspInit+0xd8>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000da6:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000daa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000db8:	230a      	movs	r3, #10
 8000dba:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4815      	ldr	r0, [pc, #84]	@ (8000e18 <HAL_PCD_MspInit+0xdc>)
 8000dc4:	f000 f9d0 	bl	8001168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000dc8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dcc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000dda:	4619      	mov	r1, r3
 8000ddc:	480e      	ldr	r0, [pc, #56]	@ (8000e18 <HAL_PCD_MspInit+0xdc>)
 8000dde:	f000 f9c3 	bl	8001168 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000de2:	4b0c      	ldr	r3, [pc, #48]	@ (8000e14 <HAL_PCD_MspInit+0xd8>)
 8000de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000de6:	4a0b      	ldr	r2, [pc, #44]	@ (8000e14 <HAL_PCD_MspInit+0xd8>)
 8000de8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dec:	6353      	str	r3, [r2, #52]	@ 0x34
 8000dee:	2300      	movs	r3, #0
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <HAL_PCD_MspInit+0xd8>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df6:	4a07      	ldr	r2, [pc, #28]	@ (8000e14 <HAL_PCD_MspInit+0xd8>)
 8000df8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dfe:	4b05      	ldr	r3, [pc, #20]	@ (8000e14 <HAL_PCD_MspInit+0xd8>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000e0a:	bf00      	nop
 8000e0c:	3780      	adds	r7, #128	@ 0x80
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40020000 	.word	0x40020000

08000e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e54 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e20:	f7ff feda 	bl	8000bd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e24:	480c      	ldr	r0, [pc, #48]	@ (8000e58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e26:	490d      	ldr	r1, [pc, #52]	@ (8000e5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e28:	4a0d      	ldr	r2, [pc, #52]	@ (8000e60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e2c:	e002      	b.n	8000e34 <LoopCopyDataInit>

08000e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e32:	3304      	adds	r3, #4

08000e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e38:	d3f9      	bcc.n	8000e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e40:	e001      	b.n	8000e46 <LoopFillZerobss>

08000e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e44:	3204      	adds	r2, #4

08000e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e48:	d3fb      	bcc.n	8000e42 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e4a:	f006 f85b 	bl	8006f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4e:	f7ff fdb3 	bl	80009b8 <main>
  bx  lr    
 8000e52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e5c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e60:	08007a44 	.word	0x08007a44
  ldr r2, =_sbss
 8000e64:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e68:	2000506c 	.word	0x2000506c

08000e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e6c:	e7fe      	b.n	8000e6c <ADC_IRQHandler>
	...

08000e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e74:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb0 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb0 <HAL_Init+0x40>)
 8000e7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e80:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb0 <HAL_Init+0x40>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb0 <HAL_Init+0x40>)
 8000e86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e8c:	4b08      	ldr	r3, [pc, #32]	@ (8000eb0 <HAL_Init+0x40>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a07      	ldr	r2, [pc, #28]	@ (8000eb0 <HAL_Init+0x40>)
 8000e92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e98:	2003      	movs	r0, #3
 8000e9a:	f000 f931 	bl	8001100 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9e:	200f      	movs	r0, #15
 8000ea0:	f000 f808 	bl	8000eb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea4:	f7ff fe0e 	bl	8000ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40023c00 	.word	0x40023c00

08000eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ebc:	4b12      	ldr	r3, [pc, #72]	@ (8000f08 <HAL_InitTick+0x54>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4b12      	ldr	r3, [pc, #72]	@ (8000f0c <HAL_InitTick+0x58>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 f93b 	bl	800114e <HAL_SYSTICK_Config>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00e      	b.n	8000f00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b0f      	cmp	r3, #15
 8000ee6:	d80a      	bhi.n	8000efe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef0:	f000 f911 	bl	8001116 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef4:	4a06      	ldr	r2, [pc, #24]	@ (8000f10 <HAL_InitTick+0x5c>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000efa:	2300      	movs	r3, #0
 8000efc:	e000      	b.n	8000f00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	20000004 	.word	0x20000004

08000f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f18:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <HAL_IncTick+0x20>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <HAL_IncTick+0x24>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4413      	add	r3, r2
 8000f24:	4a04      	ldr	r2, [pc, #16]	@ (8000f38 <HAL_IncTick+0x24>)
 8000f26:	6013      	str	r3, [r2, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20000008 	.word	0x20000008
 8000f38:	200005d0 	.word	0x200005d0

08000f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f40:	4b03      	ldr	r3, [pc, #12]	@ (8000f50 <HAL_GetTick+0x14>)
 8000f42:	681b      	ldr	r3, [r3, #0]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	200005d0 	.word	0x200005d0

08000f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f5c:	f7ff ffee 	bl	8000f3c <HAL_GetTick>
 8000f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f6c:	d005      	beq.n	8000f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f98 <HAL_Delay+0x44>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4413      	add	r3, r2
 8000f78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f7a:	bf00      	nop
 8000f7c:	f7ff ffde 	bl	8000f3c <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d8f7      	bhi.n	8000f7c <HAL_Delay+0x28>
  {
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000008 	.word	0x20000008

08000f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fac:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb2:	68ba      	ldr	r2, [r7, #8]
 8000fb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fb8:	4013      	ands	r3, r2
 8000fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fce:	4a04      	ldr	r2, [pc, #16]	@ (8000fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	60d3      	str	r3, [r2, #12]
}
 8000fd4:	bf00      	nop
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe8:	4b04      	ldr	r3, [pc, #16]	@ (8000ffc <__NVIC_GetPriorityGrouping+0x18>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	0a1b      	lsrs	r3, r3, #8
 8000fee:	f003 0307 	and.w	r3, r3, #7
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	2b00      	cmp	r3, #0
 8001012:	db0a      	blt.n	800102a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	490c      	ldr	r1, [pc, #48]	@ (800104c <__NVIC_SetPriority+0x4c>)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	440b      	add	r3, r1
 8001024:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001028:	e00a      	b.n	8001040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4908      	ldr	r1, [pc, #32]	@ (8001050 <__NVIC_SetPriority+0x50>)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	3b04      	subs	r3, #4
 8001038:	0112      	lsls	r2, r2, #4
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	440b      	add	r3, r1
 800103e:	761a      	strb	r2, [r3, #24]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000e100 	.word	0xe000e100
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	@ 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f1c3 0307 	rsb	r3, r3, #7
 800106e:	2b04      	cmp	r3, #4
 8001070:	bf28      	it	cs
 8001072:	2304      	movcs	r3, #4
 8001074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3304      	adds	r3, #4
 800107a:	2b06      	cmp	r3, #6
 800107c:	d902      	bls.n	8001084 <NVIC_EncodePriority+0x30>
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3b03      	subs	r3, #3
 8001082:	e000      	b.n	8001086 <NVIC_EncodePriority+0x32>
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	f04f 32ff 	mov.w	r2, #4294967295
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43da      	mvns	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	401a      	ands	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800109c:	f04f 31ff 	mov.w	r1, #4294967295
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	43d9      	mvns	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	4313      	orrs	r3, r2
         );
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3724      	adds	r7, #36	@ 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010cc:	d301      	bcc.n	80010d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00f      	b.n	80010f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d2:	4a0a      	ldr	r2, [pc, #40]	@ (80010fc <SysTick_Config+0x40>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010da:	210f      	movs	r1, #15
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295
 80010e0:	f7ff ff8e 	bl	8001000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e4:	4b05      	ldr	r3, [pc, #20]	@ (80010fc <SysTick_Config+0x40>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ea:	4b04      	ldr	r3, [pc, #16]	@ (80010fc <SysTick_Config+0x40>)
 80010ec:	2207      	movs	r2, #7
 80010ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	e000e010 	.word	0xe000e010

08001100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff47 	bl	8000f9c <__NVIC_SetPriorityGrouping>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001116:	b580      	push	{r7, lr}
 8001118:	b086      	sub	sp, #24
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	60b9      	str	r1, [r7, #8]
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001128:	f7ff ff5c 	bl	8000fe4 <__NVIC_GetPriorityGrouping>
 800112c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	68b9      	ldr	r1, [r7, #8]
 8001132:	6978      	ldr	r0, [r7, #20]
 8001134:	f7ff ff8e 	bl	8001054 <NVIC_EncodePriority>
 8001138:	4602      	mov	r2, r0
 800113a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113e:	4611      	mov	r1, r2
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff5d 	bl	8001000 <__NVIC_SetPriority>
}
 8001146:	bf00      	nop
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff ffb0 	bl	80010bc <SysTick_Config>
 800115c:	4603      	mov	r3, r0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	@ 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800117a:	2300      	movs	r3, #0
 800117c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
 8001182:	e165      	b.n	8001450 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001184:	2201      	movs	r2, #1
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	429a      	cmp	r2, r3
 800119e:	f040 8154 	bne.w	800144a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 0303 	and.w	r3, r3, #3
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d005      	beq.n	80011ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d130      	bne.n	800121c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	2203      	movs	r2, #3
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	68da      	ldr	r2, [r3, #12]
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f0:	2201      	movs	r2, #1
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	091b      	lsrs	r3, r3, #4
 8001206:	f003 0201 	and.w	r2, r3, #1
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	2b03      	cmp	r3, #3
 8001226:	d017      	beq.n	8001258 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2203      	movs	r2, #3
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 0303 	and.w	r3, r3, #3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d123      	bne.n	80012ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	08da      	lsrs	r2, r3, #3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3208      	adds	r2, #8
 800126c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001270:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	220f      	movs	r2, #15
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	691a      	ldr	r2, [r3, #16]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	08da      	lsrs	r2, r3, #3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3208      	adds	r2, #8
 80012a6:	69b9      	ldr	r1, [r7, #24]
 80012a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	2203      	movs	r2, #3
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 0203 	and.w	r2, r3, #3
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 80ae 	beq.w	800144a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	4b5d      	ldr	r3, [pc, #372]	@ (8001468 <HAL_GPIO_Init+0x300>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f6:	4a5c      	ldr	r2, [pc, #368]	@ (8001468 <HAL_GPIO_Init+0x300>)
 80012f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80012fe:	4b5a      	ldr	r3, [pc, #360]	@ (8001468 <HAL_GPIO_Init+0x300>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001302:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800130a:	4a58      	ldr	r2, [pc, #352]	@ (800146c <HAL_GPIO_Init+0x304>)
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	089b      	lsrs	r3, r3, #2
 8001310:	3302      	adds	r3, #2
 8001312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	220f      	movs	r2, #15
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a4f      	ldr	r2, [pc, #316]	@ (8001470 <HAL_GPIO_Init+0x308>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d025      	beq.n	8001382 <HAL_GPIO_Init+0x21a>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a4e      	ldr	r2, [pc, #312]	@ (8001474 <HAL_GPIO_Init+0x30c>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d01f      	beq.n	800137e <HAL_GPIO_Init+0x216>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a4d      	ldr	r2, [pc, #308]	@ (8001478 <HAL_GPIO_Init+0x310>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d019      	beq.n	800137a <HAL_GPIO_Init+0x212>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a4c      	ldr	r2, [pc, #304]	@ (800147c <HAL_GPIO_Init+0x314>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d013      	beq.n	8001376 <HAL_GPIO_Init+0x20e>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a4b      	ldr	r2, [pc, #300]	@ (8001480 <HAL_GPIO_Init+0x318>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d00d      	beq.n	8001372 <HAL_GPIO_Init+0x20a>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a4a      	ldr	r2, [pc, #296]	@ (8001484 <HAL_GPIO_Init+0x31c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d007      	beq.n	800136e <HAL_GPIO_Init+0x206>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a49      	ldr	r2, [pc, #292]	@ (8001488 <HAL_GPIO_Init+0x320>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d101      	bne.n	800136a <HAL_GPIO_Init+0x202>
 8001366:	2306      	movs	r3, #6
 8001368:	e00c      	b.n	8001384 <HAL_GPIO_Init+0x21c>
 800136a:	2307      	movs	r3, #7
 800136c:	e00a      	b.n	8001384 <HAL_GPIO_Init+0x21c>
 800136e:	2305      	movs	r3, #5
 8001370:	e008      	b.n	8001384 <HAL_GPIO_Init+0x21c>
 8001372:	2304      	movs	r3, #4
 8001374:	e006      	b.n	8001384 <HAL_GPIO_Init+0x21c>
 8001376:	2303      	movs	r3, #3
 8001378:	e004      	b.n	8001384 <HAL_GPIO_Init+0x21c>
 800137a:	2302      	movs	r3, #2
 800137c:	e002      	b.n	8001384 <HAL_GPIO_Init+0x21c>
 800137e:	2301      	movs	r3, #1
 8001380:	e000      	b.n	8001384 <HAL_GPIO_Init+0x21c>
 8001382:	2300      	movs	r3, #0
 8001384:	69fa      	ldr	r2, [r7, #28]
 8001386:	f002 0203 	and.w	r2, r2, #3
 800138a:	0092      	lsls	r2, r2, #2
 800138c:	4093      	lsls	r3, r2
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001394:	4935      	ldr	r1, [pc, #212]	@ (800146c <HAL_GPIO_Init+0x304>)
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	089b      	lsrs	r3, r3, #2
 800139a:	3302      	adds	r3, #2
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013a2:	4b3a      	ldr	r3, [pc, #232]	@ (800148c <HAL_GPIO_Init+0x324>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4013      	ands	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013c6:	4a31      	ldr	r2, [pc, #196]	@ (800148c <HAL_GPIO_Init+0x324>)
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013cc:	4b2f      	ldr	r3, [pc, #188]	@ (800148c <HAL_GPIO_Init+0x324>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013f0:	4a26      	ldr	r2, [pc, #152]	@ (800148c <HAL_GPIO_Init+0x324>)
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013f6:	4b25      	ldr	r3, [pc, #148]	@ (800148c <HAL_GPIO_Init+0x324>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	43db      	mvns	r3, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4013      	ands	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800141a:	4a1c      	ldr	r2, [pc, #112]	@ (800148c <HAL_GPIO_Init+0x324>)
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001420:	4b1a      	ldr	r3, [pc, #104]	@ (800148c <HAL_GPIO_Init+0x324>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001444:	4a11      	ldr	r2, [pc, #68]	@ (800148c <HAL_GPIO_Init+0x324>)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3301      	adds	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	2b0f      	cmp	r3, #15
 8001454:	f67f ae96 	bls.w	8001184 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001458:	bf00      	nop
 800145a:	bf00      	nop
 800145c:	3724      	adds	r7, #36	@ 0x24
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800
 800146c:	40013800 	.word	0x40013800
 8001470:	40020000 	.word	0x40020000
 8001474:	40020400 	.word	0x40020400
 8001478:	40020800 	.word	0x40020800
 800147c:	40020c00 	.word	0x40020c00
 8001480:	40021000 	.word	0x40021000
 8001484:	40021400 	.word	0x40021400
 8001488:	40021800 	.word	0x40021800
 800148c:	40013c00 	.word	0x40013c00

08001490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	807b      	strh	r3, [r7, #2]
 800149c:	4613      	mov	r3, r2
 800149e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014a0:	787b      	ldrb	r3, [r7, #1]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014a6:	887a      	ldrh	r2, [r7, #2]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014ac:	e003      	b.n	80014b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014ae:	887b      	ldrh	r3, [r7, #2]
 80014b0:	041a      	lsls	r2, r3, #16
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	619a      	str	r2, [r3, #24]
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b086      	sub	sp, #24
 80014c6:	af02      	add	r7, sp, #8
 80014c8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d101      	bne.n	80014d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e108      	b.n	80016e6 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d106      	bne.n	80014f4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff fc24 	bl	8000d3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2203      	movs	r2, #3
 80014f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001502:	d102      	bne.n	800150a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f001 fe94 	bl	800323c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6818      	ldr	r0, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	7c1a      	ldrb	r2, [r3, #16]
 800151c:	f88d 2000 	strb.w	r2, [sp]
 8001520:	3304      	adds	r3, #4
 8001522:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001524:	f001 fe26 	bl	8003174 <USB_CoreInit>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d005      	beq.n	800153a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2202      	movs	r2, #2
 8001532:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e0d5      	b.n	80016e6 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2100      	movs	r1, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f001 fe8c 	bl	800325e <USB_SetCurrentMode>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2202      	movs	r2, #2
 8001550:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e0c6      	b.n	80016e6 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001558:	2300      	movs	r3, #0
 800155a:	73fb      	strb	r3, [r7, #15]
 800155c:	e04a      	b.n	80015f4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800155e:	7bfa      	ldrb	r2, [r7, #15]
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	4613      	mov	r3, r2
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	4413      	add	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	440b      	add	r3, r1
 800156c:	3315      	adds	r3, #21
 800156e:	2201      	movs	r2, #1
 8001570:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001572:	7bfa      	ldrb	r2, [r7, #15]
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	4613      	mov	r3, r2
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	4413      	add	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	440b      	add	r3, r1
 8001580:	3314      	adds	r3, #20
 8001582:	7bfa      	ldrb	r2, [r7, #15]
 8001584:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001586:	7bfa      	ldrb	r2, [r7, #15]
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	b298      	uxth	r0, r3
 800158c:	6879      	ldr	r1, [r7, #4]
 800158e:	4613      	mov	r3, r2
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	4413      	add	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	440b      	add	r3, r1
 8001598:	332e      	adds	r3, #46	@ 0x2e
 800159a:	4602      	mov	r2, r0
 800159c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800159e:	7bfa      	ldrb	r2, [r7, #15]
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	4413      	add	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	440b      	add	r3, r1
 80015ac:	3318      	adds	r3, #24
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015b2:	7bfa      	ldrb	r2, [r7, #15]
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	4413      	add	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	440b      	add	r3, r1
 80015c0:	331c      	adds	r3, #28
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015c6:	7bfa      	ldrb	r2, [r7, #15]
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	4613      	mov	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	4413      	add	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	440b      	add	r3, r1
 80015d4:	3320      	adds	r3, #32
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015da:	7bfa      	ldrb	r2, [r7, #15]
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	4613      	mov	r3, r2
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	4413      	add	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	440b      	add	r3, r1
 80015e8:	3324      	adds	r3, #36	@ 0x24
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	3301      	adds	r3, #1
 80015f2:	73fb      	strb	r3, [r7, #15]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	791b      	ldrb	r3, [r3, #4]
 80015f8:	7bfa      	ldrb	r2, [r7, #15]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d3af      	bcc.n	800155e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015fe:	2300      	movs	r3, #0
 8001600:	73fb      	strb	r3, [r7, #15]
 8001602:	e044      	b.n	800168e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001604:	7bfa      	ldrb	r2, [r7, #15]
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	4613      	mov	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	4413      	add	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	440b      	add	r3, r1
 8001612:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800161a:	7bfa      	ldrb	r2, [r7, #15]
 800161c:	6879      	ldr	r1, [r7, #4]
 800161e:	4613      	mov	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	4413      	add	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	440b      	add	r3, r1
 8001628:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800162c:	7bfa      	ldrb	r2, [r7, #15]
 800162e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001630:	7bfa      	ldrb	r2, [r7, #15]
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	4613      	mov	r3, r2
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	4413      	add	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	440b      	add	r3, r1
 800163e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001642:	2200      	movs	r2, #0
 8001644:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001646:	7bfa      	ldrb	r2, [r7, #15]
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	4413      	add	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	440b      	add	r3, r1
 8001654:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800165c:	7bfa      	ldrb	r2, [r7, #15]
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	4613      	mov	r3, r2
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	4413      	add	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	440b      	add	r3, r1
 800166a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001672:	7bfa      	ldrb	r2, [r7, #15]
 8001674:	6879      	ldr	r1, [r7, #4]
 8001676:	4613      	mov	r3, r2
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	4413      	add	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	440b      	add	r3, r1
 8001680:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001688:	7bfb      	ldrb	r3, [r7, #15]
 800168a:	3301      	adds	r3, #1
 800168c:	73fb      	strb	r3, [r7, #15]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	791b      	ldrb	r3, [r3, #4]
 8001692:	7bfa      	ldrb	r2, [r7, #15]
 8001694:	429a      	cmp	r2, r3
 8001696:	d3b5      	bcc.n	8001604 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6818      	ldr	r0, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	7c1a      	ldrb	r2, [r3, #16]
 80016a0:	f88d 2000 	strb.w	r2, [sp]
 80016a4:	3304      	adds	r3, #4
 80016a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016a8:	f001 fe26 	bl	80032f8 <USB_DevInit>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d005      	beq.n	80016be <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2202      	movs	r2, #2
 80016b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e013      	b.n	80016e6 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	7b1b      	ldrb	r3, [r3, #12]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d102      	bne.n	80016da <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 f80a 	bl	80016ee <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f001 ffe1 	bl	80036a6 <USB_DevDisconnect>

  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b085      	sub	sp, #20
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2201      	movs	r2, #1
 8001700:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800171c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001720:	f043 0303 	orr.w	r3, r3, #3
 8001724:	68fa      	ldr	r2, [r7, #12]
 8001726:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
	...

08001738 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d101      	bne.n	800174c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e0cc      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800174c:	4b68      	ldr	r3, [pc, #416]	@ (80018f0 <HAL_RCC_ClockConfig+0x1b8>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 030f 	and.w	r3, r3, #15
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	d90c      	bls.n	8001774 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175a:	4b65      	ldr	r3, [pc, #404]	@ (80018f0 <HAL_RCC_ClockConfig+0x1b8>)
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001762:	4b63      	ldr	r3, [pc, #396]	@ (80018f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 030f 	and.w	r3, r3, #15
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	429a      	cmp	r2, r3
 800176e:	d001      	beq.n	8001774 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e0b8      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d020      	beq.n	80017c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	d005      	beq.n	8001798 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800178c:	4b59      	ldr	r3, [pc, #356]	@ (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	4a58      	ldr	r2, [pc, #352]	@ (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001796:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0308 	and.w	r3, r3, #8
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d005      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017a4:	4b53      	ldr	r3, [pc, #332]	@ (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	4a52      	ldr	r2, [pc, #328]	@ (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b0:	4b50      	ldr	r3, [pc, #320]	@ (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	494d      	ldr	r1, [pc, #308]	@ (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d044      	beq.n	8001858 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d107      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d6:	4b47      	ldr	r3, [pc, #284]	@ (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d119      	bne.n	8001816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e07f      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d003      	beq.n	80017f6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	d107      	bne.n	8001806 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f6:	4b3f      	ldr	r3, [pc, #252]	@ (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d109      	bne.n	8001816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e06f      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001806:	4b3b      	ldr	r3, [pc, #236]	@ (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e067      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001816:	4b37      	ldr	r3, [pc, #220]	@ (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f023 0203 	bic.w	r2, r3, #3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	4934      	ldr	r1, [pc, #208]	@ (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	4313      	orrs	r3, r2
 8001826:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001828:	f7ff fb88 	bl	8000f3c <HAL_GetTick>
 800182c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182e:	e00a      	b.n	8001846 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001830:	f7ff fb84 	bl	8000f3c <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800183e:	4293      	cmp	r3, r2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e04f      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001846:	4b2b      	ldr	r3, [pc, #172]	@ (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 020c 	and.w	r2, r3, #12
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	429a      	cmp	r2, r3
 8001856:	d1eb      	bne.n	8001830 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001858:	4b25      	ldr	r3, [pc, #148]	@ (80018f0 <HAL_RCC_ClockConfig+0x1b8>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 030f 	and.w	r3, r3, #15
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	429a      	cmp	r2, r3
 8001864:	d20c      	bcs.n	8001880 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001866:	4b22      	ldr	r3, [pc, #136]	@ (80018f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800186e:	4b20      	ldr	r3, [pc, #128]	@ (80018f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	429a      	cmp	r2, r3
 800187a:	d001      	beq.n	8001880 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e032      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b00      	cmp	r3, #0
 800188a:	d008      	beq.n	800189e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800188c:	4b19      	ldr	r3, [pc, #100]	@ (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	4916      	ldr	r1, [pc, #88]	@ (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	4313      	orrs	r3, r2
 800189c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d009      	beq.n	80018be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018aa:	4b12      	ldr	r3, [pc, #72]	@ (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	490e      	ldr	r1, [pc, #56]	@ (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018be:	f000 fb7f 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 80018c2:	4602      	mov	r2, r0
 80018c4:	4b0b      	ldr	r3, [pc, #44]	@ (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	091b      	lsrs	r3, r3, #4
 80018ca:	f003 030f 	and.w	r3, r3, #15
 80018ce:	490a      	ldr	r1, [pc, #40]	@ (80018f8 <HAL_RCC_ClockConfig+0x1c0>)
 80018d0:	5ccb      	ldrb	r3, [r1, r3]
 80018d2:	fa22 f303 	lsr.w	r3, r2, r3
 80018d6:	4a09      	ldr	r2, [pc, #36]	@ (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 80018d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80018da:	4b09      	ldr	r3, [pc, #36]	@ (8001900 <HAL_RCC_ClockConfig+0x1c8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fae8 	bl	8000eb4 <HAL_InitTick>

  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40023c00 	.word	0x40023c00
 80018f4:	40023800 	.word	0x40023800
 80018f8:	080079e8 	.word	0x080079e8
 80018fc:	20000000 	.word	0x20000000
 8001900:	20000004 	.word	0x20000004

08001904 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001908:	4b03      	ldr	r3, [pc, #12]	@ (8001918 <HAL_RCC_GetHCLKFreq+0x14>)
 800190a:	681b      	ldr	r3, [r3, #0]
}
 800190c:	4618      	mov	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	20000000 	.word	0x20000000

0800191c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001920:	f7ff fff0 	bl	8001904 <HAL_RCC_GetHCLKFreq>
 8001924:	4602      	mov	r2, r0
 8001926:	4b05      	ldr	r3, [pc, #20]	@ (800193c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	0a9b      	lsrs	r3, r3, #10
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	4903      	ldr	r1, [pc, #12]	@ (8001940 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001932:	5ccb      	ldrb	r3, [r1, r3]
 8001934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001938:	4618      	mov	r0, r3
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40023800 	.word	0x40023800
 8001940:	080079f8 	.word	0x080079f8

08001944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001948:	f7ff ffdc 	bl	8001904 <HAL_RCC_GetHCLKFreq>
 800194c:	4602      	mov	r2, r0
 800194e:	4b05      	ldr	r3, [pc, #20]	@ (8001964 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	0b5b      	lsrs	r3, r3, #13
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	4903      	ldr	r1, [pc, #12]	@ (8001968 <HAL_RCC_GetPCLK2Freq+0x24>)
 800195a:	5ccb      	ldrb	r3, [r1, r3]
 800195c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001960:	4618      	mov	r0, r3
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40023800 	.word	0x40023800
 8001968:	080079f8 	.word	0x080079f8

0800196c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08c      	sub	sp, #48	@ 0x30
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001988:	2300      	movs	r3, #0
 800198a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d010      	beq.n	80019c6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80019a4:	4b6f      	ldr	r3, [pc, #444]	@ (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019aa:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019b2:	496c      	ldr	r1, [pc, #432]	@ (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80019c2:	2301      	movs	r3, #1
 80019c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d010      	beq.n	80019f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80019d2:	4b64      	ldr	r3, [pc, #400]	@ (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019d8:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019e0:	4960      	ldr	r1, [pc, #384]	@ (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d101      	bne.n	80019f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80019f0:	2301      	movs	r3, #1
 80019f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d017      	beq.n	8001a30 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a00:	4b58      	ldr	r3, [pc, #352]	@ (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a06:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	4955      	ldr	r1, [pc, #340]	@ (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001a1e:	d101      	bne.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001a20:	2301      	movs	r3, #1
 8001a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d017      	beq.n	8001a6c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001a3c:	4b49      	ldr	r3, [pc, #292]	@ (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a42:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a4a:	4946      	ldr	r1, [pc, #280]	@ (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a5a:	d101      	bne.n	8001a60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0320 	and.w	r3, r3, #32
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 808a 	beq.w	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	4b39      	ldr	r3, [pc, #228]	@ (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a82:	4a38      	ldr	r2, [pc, #224]	@ (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a8a:	4b36      	ldr	r3, [pc, #216]	@ (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001a96:	4b34      	ldr	r3, [pc, #208]	@ (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a33      	ldr	r2, [pc, #204]	@ (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001a9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aa0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001aa2:	f7ff fa4b 	bl	8000f3c <HAL_GetTick>
 8001aa6:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001aa8:	e008      	b.n	8001abc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aaa:	f7ff fa47 	bl	8000f3c <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e278      	b.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001abc:	4b2a      	ldr	r3, [pc, #168]	@ (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0f0      	beq.n	8001aaa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ac8:	4b26      	ldr	r3, [pc, #152]	@ (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001acc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ad0:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ad2:	6a3b      	ldr	r3, [r7, #32]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d02f      	beq.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001adc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ae0:	6a3a      	ldr	r2, [r7, #32]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d028      	beq.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ae6:	4b1f      	ldr	r3, [pc, #124]	@ (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001aee:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001af0:	4b1e      	ldr	r3, [pc, #120]	@ (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001af6:	4b1d      	ldr	r3, [pc, #116]	@ (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001afc:	4a19      	ldr	r2, [pc, #100]	@ (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001afe:	6a3b      	ldr	r3, [r7, #32]
 8001b00:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001b02:	4b18      	ldr	r3, [pc, #96]	@ (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d114      	bne.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001b0e:	f7ff fa15 	bl	8000f3c <HAL_GetTick>
 8001b12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b14:	e00a      	b.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b16:	f7ff fa11 	bl	8000f3c <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e240      	b.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0ee      	beq.n	8001b16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001b44:	d114      	bne.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001b46:	4b07      	ldr	r3, [pc, #28]	@ (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b52:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001b56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b5a:	4902      	ldr	r1, [pc, #8]	@ (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	608b      	str	r3, [r1, #8]
 8001b60:	e00c      	b.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40007000 	.word	0x40007000
 8001b6c:	42470e40 	.word	0x42470e40
 8001b70:	4b4a      	ldr	r3, [pc, #296]	@ (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	4a49      	ldr	r2, [pc, #292]	@ (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b76:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001b7a:	6093      	str	r3, [r2, #8]
 8001b7c:	4b47      	ldr	r3, [pc, #284]	@ (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b7e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b88:	4944      	ldr	r1, [pc, #272]	@ (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0310 	and.w	r3, r3, #16
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d004      	beq.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8001ba0:	4b3f      	ldr	r3, [pc, #252]	@ (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001ba2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00a      	beq.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001bb0:	4b3a      	ldr	r3, [pc, #232]	@ (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bb6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bbe:	4937      	ldr	r1, [pc, #220]	@ (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00a      	beq.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001bd2:	4b32      	ldr	r3, [pc, #200]	@ (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bd8:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001be0:	492e      	ldr	r1, [pc, #184]	@ (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d011      	beq.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001bf4:	4b29      	ldr	r3, [pc, #164]	@ (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bfa:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c02:	4926      	ldr	r1, [pc, #152]	@ (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001c12:	d101      	bne.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001c14:	2301      	movs	r3, #1
 8001c16:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d00a      	beq.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001c24:	4b1d      	ldr	r3, [pc, #116]	@ (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c2a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c32:	491a      	ldr	r1, [pc, #104]	@ (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d011      	beq.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001c46:	4b15      	ldr	r3, [pc, #84]	@ (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c4c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c54:	4911      	ldr	r1, [pc, #68]	@ (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c64:	d101      	bne.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001c66:	2301      	movs	r3, #1
 8001c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d005      	beq.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001c78:	f040 80ff 	bne.w	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001c7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c82:	f7ff f95b 	bl	8000f3c <HAL_GetTick>
 8001c86:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c88:	e00e      	b.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001c8a:	f7ff f957 	bl	8000f3c <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d907      	bls.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e188      	b.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	424711e0 	.word	0x424711e0
 8001ca4:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ca8:	4b7e      	ldr	r3, [pc, #504]	@ (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1ea      	bne.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d009      	beq.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d028      	beq.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d124      	bne.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001cdc:	4b71      	ldr	r3, [pc, #452]	@ (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ce2:	0c1b      	lsrs	r3, r3, #16
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	3301      	adds	r3, #1
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001cee:	4b6d      	ldr	r3, [pc, #436]	@ (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001cf4:	0e1b      	lsrs	r3, r3, #24
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	019b      	lsls	r3, r3, #6
 8001d06:	431a      	orrs	r2, r3
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	085b      	lsrs	r3, r3, #1
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	041b      	lsls	r3, r3, #16
 8001d10:	431a      	orrs	r2, r3
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	061b      	lsls	r3, r3, #24
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	071b      	lsls	r3, r3, #28
 8001d1e:	4961      	ldr	r1, [pc, #388]	@ (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d004      	beq.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001d3a:	d00a      	beq.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d035      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d50:	d130      	bne.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001d52:	4b54      	ldr	r3, [pc, #336]	@ (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d58:	0c1b      	lsrs	r3, r3, #16
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	3301      	adds	r3, #1
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001d64:	4b4f      	ldr	r3, [pc, #316]	@ (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d6a:	0f1b      	lsrs	r3, r3, #28
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	019b      	lsls	r3, r3, #6
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	085b      	lsrs	r3, r3, #1
 8001d82:	3b01      	subs	r3, #1
 8001d84:	041b      	lsls	r3, r3, #16
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	061b      	lsls	r3, r3, #24
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	071b      	lsls	r3, r3, #28
 8001d94:	4943      	ldr	r1, [pc, #268]	@ (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001d9c:	4b41      	ldr	r3, [pc, #260]	@ (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001da2:	f023 021f 	bic.w	r2, r3, #31
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001daa:	3b01      	subs	r3, #1
 8001dac:	493d      	ldr	r1, [pc, #244]	@ (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d029      	beq.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001dc8:	d124      	bne.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001dca:	4b36      	ldr	r3, [pc, #216]	@ (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001dd0:	0c1b      	lsrs	r3, r3, #16
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001ddc:	4b31      	ldr	r3, [pc, #196]	@ (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001de2:	0f1b      	lsrs	r3, r3, #28
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	019b      	lsls	r3, r3, #6
 8001df4:	431a      	orrs	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	085b      	lsrs	r3, r3, #1
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	041b      	lsls	r3, r3, #16
 8001e00:	431a      	orrs	r2, r3
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	061b      	lsls	r3, r3, #24
 8001e06:	431a      	orrs	r2, r3
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	071b      	lsls	r3, r3, #28
 8001e0c:	4925      	ldr	r1, [pc, #148]	@ (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d016      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	019b      	lsls	r3, r3, #6
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	085b      	lsrs	r3, r3, #1
 8001e32:	3b01      	subs	r3, #1
 8001e34:	041b      	lsls	r3, r3, #16
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	061b      	lsls	r3, r3, #24
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	071b      	lsls	r3, r3, #28
 8001e46:	4917      	ldr	r1, [pc, #92]	@ (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001e4e:	4b16      	ldr	r3, [pc, #88]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e54:	f7ff f872 	bl	8000f3c <HAL_GetTick>
 8001e58:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001e5c:	f7ff f86e 	bl	8000f3c <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e09f      	b.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0f0      	beq.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8001e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	f040 8095 	bne.w	8001fac <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001e82:	4b0a      	ldr	r3, [pc, #40]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e88:	f7ff f858 	bl	8000f3c <HAL_GetTick>
 8001e8c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001e8e:	e00f      	b.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001e90:	f7ff f854 	bl	8000f3c <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d908      	bls.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e085      	b.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	42470068 	.word	0x42470068
 8001eac:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001eb0:	4b41      	ldr	r3, [pc, #260]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001eb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ebc:	d0e8      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d009      	beq.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d02b      	beq.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d127      	bne.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001ee6:	4b34      	ldr	r3, [pc, #208]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eec:	0c1b      	lsrs	r3, r3, #16
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	699a      	ldr	r2, [r3, #24]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	019b      	lsls	r3, r3, #6
 8001f02:	431a      	orrs	r2, r3
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	085b      	lsrs	r3, r3, #1
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	041b      	lsls	r3, r3, #16
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f12:	061b      	lsls	r3, r3, #24
 8001f14:	4928      	ldr	r1, [pc, #160]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001f1c:	4b26      	ldr	r3, [pc, #152]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f22:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	021b      	lsls	r3, r3, #8
 8001f2e:	4922      	ldr	r1, [pc, #136]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d01d      	beq.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001f4a:	d118      	bne.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001f4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f52:	0e1b      	lsrs	r3, r3, #24
 8001f54:	f003 030f 	and.w	r3, r3, #15
 8001f58:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	699a      	ldr	r2, [r3, #24]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	019b      	lsls	r3, r3, #6
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	085b      	lsrs	r3, r3, #1
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	041b      	lsls	r3, r3, #16
 8001f70:	431a      	orrs	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	061b      	lsls	r3, r3, #24
 8001f76:	4910      	ldr	r1, [pc, #64]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f84:	f7fe ffda 	bl	8000f3c <HAL_GetTick>
 8001f88:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001f8c:	f7fe ffd6 	bl	8000f3c <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e007      	b.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001f9e:	4b06      	ldr	r3, [pc, #24]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001fa6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001faa:	d1ef      	bne.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3730      	adds	r7, #48	@ 0x30
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	42470070 	.word	0x42470070

08001fc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fc4:	b0ae      	sub	sp, #184	@ 0xb8
 8001fc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fe6:	4bcb      	ldr	r3, [pc, #812]	@ (8002314 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 030c 	and.w	r3, r3, #12
 8001fee:	2b0c      	cmp	r3, #12
 8001ff0:	f200 8206 	bhi.w	8002400 <HAL_RCC_GetSysClockFreq+0x440>
 8001ff4:	a201      	add	r2, pc, #4	@ (adr r2, 8001ffc <HAL_RCC_GetSysClockFreq+0x3c>)
 8001ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffa:	bf00      	nop
 8001ffc:	08002031 	.word	0x08002031
 8002000:	08002401 	.word	0x08002401
 8002004:	08002401 	.word	0x08002401
 8002008:	08002401 	.word	0x08002401
 800200c:	08002039 	.word	0x08002039
 8002010:	08002401 	.word	0x08002401
 8002014:	08002401 	.word	0x08002401
 8002018:	08002401 	.word	0x08002401
 800201c:	08002041 	.word	0x08002041
 8002020:	08002401 	.word	0x08002401
 8002024:	08002401 	.word	0x08002401
 8002028:	08002401 	.word	0x08002401
 800202c:	08002231 	.word	0x08002231
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002030:	4bb9      	ldr	r3, [pc, #740]	@ (8002318 <HAL_RCC_GetSysClockFreq+0x358>)
 8002032:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002036:	e1e7      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002038:	4bb8      	ldr	r3, [pc, #736]	@ (800231c <HAL_RCC_GetSysClockFreq+0x35c>)
 800203a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800203e:	e1e3      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002040:	4bb4      	ldr	r3, [pc, #720]	@ (8002314 <HAL_RCC_GetSysClockFreq+0x354>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002048:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800204c:	4bb1      	ldr	r3, [pc, #708]	@ (8002314 <HAL_RCC_GetSysClockFreq+0x354>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d071      	beq.n	800213c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002058:	4bae      	ldr	r3, [pc, #696]	@ (8002314 <HAL_RCC_GetSysClockFreq+0x354>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	099b      	lsrs	r3, r3, #6
 800205e:	2200      	movs	r2, #0
 8002060:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002064:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002068:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800206c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002070:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002074:	2300      	movs	r3, #0
 8002076:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800207a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800207e:	4622      	mov	r2, r4
 8002080:	462b      	mov	r3, r5
 8002082:	f04f 0000 	mov.w	r0, #0
 8002086:	f04f 0100 	mov.w	r1, #0
 800208a:	0159      	lsls	r1, r3, #5
 800208c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002090:	0150      	lsls	r0, r2, #5
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	4621      	mov	r1, r4
 8002098:	1a51      	subs	r1, r2, r1
 800209a:	6439      	str	r1, [r7, #64]	@ 0x40
 800209c:	4629      	mov	r1, r5
 800209e:	eb63 0301 	sbc.w	r3, r3, r1
 80020a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	f04f 0300 	mov.w	r3, #0
 80020ac:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80020b0:	4649      	mov	r1, r9
 80020b2:	018b      	lsls	r3, r1, #6
 80020b4:	4641      	mov	r1, r8
 80020b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020ba:	4641      	mov	r1, r8
 80020bc:	018a      	lsls	r2, r1, #6
 80020be:	4641      	mov	r1, r8
 80020c0:	1a51      	subs	r1, r2, r1
 80020c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80020c4:	4649      	mov	r1, r9
 80020c6:	eb63 0301 	sbc.w	r3, r3, r1
 80020ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020cc:	f04f 0200 	mov.w	r2, #0
 80020d0:	f04f 0300 	mov.w	r3, #0
 80020d4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80020d8:	4649      	mov	r1, r9
 80020da:	00cb      	lsls	r3, r1, #3
 80020dc:	4641      	mov	r1, r8
 80020de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020e2:	4641      	mov	r1, r8
 80020e4:	00ca      	lsls	r2, r1, #3
 80020e6:	4610      	mov	r0, r2
 80020e8:	4619      	mov	r1, r3
 80020ea:	4603      	mov	r3, r0
 80020ec:	4622      	mov	r2, r4
 80020ee:	189b      	adds	r3, r3, r2
 80020f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80020f2:	462b      	mov	r3, r5
 80020f4:	460a      	mov	r2, r1
 80020f6:	eb42 0303 	adc.w	r3, r2, r3
 80020fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80020fc:	f04f 0200 	mov.w	r2, #0
 8002100:	f04f 0300 	mov.w	r3, #0
 8002104:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002108:	4629      	mov	r1, r5
 800210a:	024b      	lsls	r3, r1, #9
 800210c:	4621      	mov	r1, r4
 800210e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002112:	4621      	mov	r1, r4
 8002114:	024a      	lsls	r2, r1, #9
 8002116:	4610      	mov	r0, r2
 8002118:	4619      	mov	r1, r3
 800211a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800211e:	2200      	movs	r2, #0
 8002120:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002124:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002128:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800212c:	f7fe f8c8 	bl	80002c0 <__aeabi_uldivmod>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	4613      	mov	r3, r2
 8002136:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800213a:	e067      	b.n	800220c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800213c:	4b75      	ldr	r3, [pc, #468]	@ (8002314 <HAL_RCC_GetSysClockFreq+0x354>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	099b      	lsrs	r3, r3, #6
 8002142:	2200      	movs	r2, #0
 8002144:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002148:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800214c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002154:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002156:	2300      	movs	r3, #0
 8002158:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800215a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800215e:	4622      	mov	r2, r4
 8002160:	462b      	mov	r3, r5
 8002162:	f04f 0000 	mov.w	r0, #0
 8002166:	f04f 0100 	mov.w	r1, #0
 800216a:	0159      	lsls	r1, r3, #5
 800216c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002170:	0150      	lsls	r0, r2, #5
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	4621      	mov	r1, r4
 8002178:	1a51      	subs	r1, r2, r1
 800217a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800217c:	4629      	mov	r1, r5
 800217e:	eb63 0301 	sbc.w	r3, r3, r1
 8002182:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	f04f 0300 	mov.w	r3, #0
 800218c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002190:	4649      	mov	r1, r9
 8002192:	018b      	lsls	r3, r1, #6
 8002194:	4641      	mov	r1, r8
 8002196:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800219a:	4641      	mov	r1, r8
 800219c:	018a      	lsls	r2, r1, #6
 800219e:	4641      	mov	r1, r8
 80021a0:	ebb2 0a01 	subs.w	sl, r2, r1
 80021a4:	4649      	mov	r1, r9
 80021a6:	eb63 0b01 	sbc.w	fp, r3, r1
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	f04f 0300 	mov.w	r3, #0
 80021b2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80021b6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80021ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021be:	4692      	mov	sl, r2
 80021c0:	469b      	mov	fp, r3
 80021c2:	4623      	mov	r3, r4
 80021c4:	eb1a 0303 	adds.w	r3, sl, r3
 80021c8:	623b      	str	r3, [r7, #32]
 80021ca:	462b      	mov	r3, r5
 80021cc:	eb4b 0303 	adc.w	r3, fp, r3
 80021d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	f04f 0300 	mov.w	r3, #0
 80021da:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80021de:	4629      	mov	r1, r5
 80021e0:	028b      	lsls	r3, r1, #10
 80021e2:	4621      	mov	r1, r4
 80021e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021e8:	4621      	mov	r1, r4
 80021ea:	028a      	lsls	r2, r1, #10
 80021ec:	4610      	mov	r0, r2
 80021ee:	4619      	mov	r1, r3
 80021f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80021f4:	2200      	movs	r2, #0
 80021f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80021f8:	677a      	str	r2, [r7, #116]	@ 0x74
 80021fa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80021fe:	f7fe f85f 	bl	80002c0 <__aeabi_uldivmod>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	4613      	mov	r3, r2
 8002208:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800220c:	4b41      	ldr	r3, [pc, #260]	@ (8002314 <HAL_RCC_GetSysClockFreq+0x354>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	0c1b      	lsrs	r3, r3, #16
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	3301      	adds	r3, #1
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800221e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002222:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002226:	fbb2 f3f3 	udiv	r3, r2, r3
 800222a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800222e:	e0eb      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002230:	4b38      	ldr	r3, [pc, #224]	@ (8002314 <HAL_RCC_GetSysClockFreq+0x354>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002238:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800223c:	4b35      	ldr	r3, [pc, #212]	@ (8002314 <HAL_RCC_GetSysClockFreq+0x354>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d06b      	beq.n	8002320 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002248:	4b32      	ldr	r3, [pc, #200]	@ (8002314 <HAL_RCC_GetSysClockFreq+0x354>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	099b      	lsrs	r3, r3, #6
 800224e:	2200      	movs	r2, #0
 8002250:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002252:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002254:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800225a:	663b      	str	r3, [r7, #96]	@ 0x60
 800225c:	2300      	movs	r3, #0
 800225e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002260:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002264:	4622      	mov	r2, r4
 8002266:	462b      	mov	r3, r5
 8002268:	f04f 0000 	mov.w	r0, #0
 800226c:	f04f 0100 	mov.w	r1, #0
 8002270:	0159      	lsls	r1, r3, #5
 8002272:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002276:	0150      	lsls	r0, r2, #5
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	4621      	mov	r1, r4
 800227e:	1a51      	subs	r1, r2, r1
 8002280:	61b9      	str	r1, [r7, #24]
 8002282:	4629      	mov	r1, r5
 8002284:	eb63 0301 	sbc.w	r3, r3, r1
 8002288:	61fb      	str	r3, [r7, #28]
 800228a:	f04f 0200 	mov.w	r2, #0
 800228e:	f04f 0300 	mov.w	r3, #0
 8002292:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002296:	4659      	mov	r1, fp
 8002298:	018b      	lsls	r3, r1, #6
 800229a:	4651      	mov	r1, sl
 800229c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022a0:	4651      	mov	r1, sl
 80022a2:	018a      	lsls	r2, r1, #6
 80022a4:	4651      	mov	r1, sl
 80022a6:	ebb2 0801 	subs.w	r8, r2, r1
 80022aa:	4659      	mov	r1, fp
 80022ac:	eb63 0901 	sbc.w	r9, r3, r1
 80022b0:	f04f 0200 	mov.w	r2, #0
 80022b4:	f04f 0300 	mov.w	r3, #0
 80022b8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022c0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022c4:	4690      	mov	r8, r2
 80022c6:	4699      	mov	r9, r3
 80022c8:	4623      	mov	r3, r4
 80022ca:	eb18 0303 	adds.w	r3, r8, r3
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	462b      	mov	r3, r5
 80022d2:	eb49 0303 	adc.w	r3, r9, r3
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	f04f 0300 	mov.w	r3, #0
 80022e0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80022e4:	4629      	mov	r1, r5
 80022e6:	024b      	lsls	r3, r1, #9
 80022e8:	4621      	mov	r1, r4
 80022ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022ee:	4621      	mov	r1, r4
 80022f0:	024a      	lsls	r2, r1, #9
 80022f2:	4610      	mov	r0, r2
 80022f4:	4619      	mov	r1, r3
 80022f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80022fa:	2200      	movs	r2, #0
 80022fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80022fe:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002300:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002304:	f7fd ffdc 	bl	80002c0 <__aeabi_uldivmod>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4613      	mov	r3, r2
 800230e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002312:	e065      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0x420>
 8002314:	40023800 	.word	0x40023800
 8002318:	00f42400 	.word	0x00f42400
 800231c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002320:	4b3d      	ldr	r3, [pc, #244]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x458>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	099b      	lsrs	r3, r3, #6
 8002326:	2200      	movs	r2, #0
 8002328:	4618      	mov	r0, r3
 800232a:	4611      	mov	r1, r2
 800232c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002330:	653b      	str	r3, [r7, #80]	@ 0x50
 8002332:	2300      	movs	r3, #0
 8002334:	657b      	str	r3, [r7, #84]	@ 0x54
 8002336:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800233a:	4642      	mov	r2, r8
 800233c:	464b      	mov	r3, r9
 800233e:	f04f 0000 	mov.w	r0, #0
 8002342:	f04f 0100 	mov.w	r1, #0
 8002346:	0159      	lsls	r1, r3, #5
 8002348:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800234c:	0150      	lsls	r0, r2, #5
 800234e:	4602      	mov	r2, r0
 8002350:	460b      	mov	r3, r1
 8002352:	4641      	mov	r1, r8
 8002354:	1a51      	subs	r1, r2, r1
 8002356:	60b9      	str	r1, [r7, #8]
 8002358:	4649      	mov	r1, r9
 800235a:	eb63 0301 	sbc.w	r3, r3, r1
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	f04f 0200 	mov.w	r2, #0
 8002364:	f04f 0300 	mov.w	r3, #0
 8002368:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800236c:	4659      	mov	r1, fp
 800236e:	018b      	lsls	r3, r1, #6
 8002370:	4651      	mov	r1, sl
 8002372:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002376:	4651      	mov	r1, sl
 8002378:	018a      	lsls	r2, r1, #6
 800237a:	4651      	mov	r1, sl
 800237c:	1a54      	subs	r4, r2, r1
 800237e:	4659      	mov	r1, fp
 8002380:	eb63 0501 	sbc.w	r5, r3, r1
 8002384:	f04f 0200 	mov.w	r2, #0
 8002388:	f04f 0300 	mov.w	r3, #0
 800238c:	00eb      	lsls	r3, r5, #3
 800238e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002392:	00e2      	lsls	r2, r4, #3
 8002394:	4614      	mov	r4, r2
 8002396:	461d      	mov	r5, r3
 8002398:	4643      	mov	r3, r8
 800239a:	18e3      	adds	r3, r4, r3
 800239c:	603b      	str	r3, [r7, #0]
 800239e:	464b      	mov	r3, r9
 80023a0:	eb45 0303 	adc.w	r3, r5, r3
 80023a4:	607b      	str	r3, [r7, #4]
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	f04f 0300 	mov.w	r3, #0
 80023ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023b2:	4629      	mov	r1, r5
 80023b4:	028b      	lsls	r3, r1, #10
 80023b6:	4621      	mov	r1, r4
 80023b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023bc:	4621      	mov	r1, r4
 80023be:	028a      	lsls	r2, r1, #10
 80023c0:	4610      	mov	r0, r2
 80023c2:	4619      	mov	r1, r3
 80023c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023c8:	2200      	movs	r2, #0
 80023ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023cc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80023ce:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80023d2:	f7fd ff75 	bl	80002c0 <__aeabi_uldivmod>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	4613      	mov	r3, r2
 80023dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80023e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x458>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	0f1b      	lsrs	r3, r3, #28
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80023ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80023f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80023f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80023fe:	e003      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002400:	4b06      	ldr	r3, [pc, #24]	@ (800241c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002402:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002406:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002408:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800240c:	4618      	mov	r0, r3
 800240e:	37b8      	adds	r7, #184	@ 0xb8
 8002410:	46bd      	mov	sp, r7
 8002412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002416:	bf00      	nop
 8002418:	40023800 	.word	0x40023800
 800241c:	00f42400 	.word	0x00f42400

08002420 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e28d      	b.n	800294e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 8083 	beq.w	8002546 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002440:	4b94      	ldr	r3, [pc, #592]	@ (8002694 <HAL_RCC_OscConfig+0x274>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 030c 	and.w	r3, r3, #12
 8002448:	2b04      	cmp	r3, #4
 800244a:	d019      	beq.n	8002480 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800244c:	4b91      	ldr	r3, [pc, #580]	@ (8002694 <HAL_RCC_OscConfig+0x274>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 030c 	and.w	r3, r3, #12
        || \
 8002454:	2b08      	cmp	r3, #8
 8002456:	d106      	bne.n	8002466 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002458:	4b8e      	ldr	r3, [pc, #568]	@ (8002694 <HAL_RCC_OscConfig+0x274>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002460:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002464:	d00c      	beq.n	8002480 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002466:	4b8b      	ldr	r3, [pc, #556]	@ (8002694 <HAL_RCC_OscConfig+0x274>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800246e:	2b0c      	cmp	r3, #12
 8002470:	d112      	bne.n	8002498 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002472:	4b88      	ldr	r3, [pc, #544]	@ (8002694 <HAL_RCC_OscConfig+0x274>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800247a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800247e:	d10b      	bne.n	8002498 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002480:	4b84      	ldr	r3, [pc, #528]	@ (8002694 <HAL_RCC_OscConfig+0x274>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d05b      	beq.n	8002544 <HAL_RCC_OscConfig+0x124>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d157      	bne.n	8002544 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e25a      	b.n	800294e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024a0:	d106      	bne.n	80024b0 <HAL_RCC_OscConfig+0x90>
 80024a2:	4b7c      	ldr	r3, [pc, #496]	@ (8002694 <HAL_RCC_OscConfig+0x274>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a7b      	ldr	r2, [pc, #492]	@ (8002694 <HAL_RCC_OscConfig+0x274>)
 80024a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	e01d      	b.n	80024ec <HAL_RCC_OscConfig+0xcc>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024b8:	d10c      	bne.n	80024d4 <HAL_RCC_OscConfig+0xb4>
 80024ba:	4b76      	ldr	r3, [pc, #472]	@ (8002694 <HAL_RCC_OscConfig+0x274>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a75      	ldr	r2, [pc, #468]	@ (8002694 <HAL_RCC_OscConfig+0x274>)
 80024c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	4b73      	ldr	r3, [pc, #460]	@ (8002694 <HAL_RCC_OscConfig+0x274>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a72      	ldr	r2, [pc, #456]	@ (8002694 <HAL_RCC_OscConfig+0x274>)
 80024cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	e00b      	b.n	80024ec <HAL_RCC_OscConfig+0xcc>
 80024d4:	4b6f      	ldr	r3, [pc, #444]	@ (8002694 <HAL_RCC_OscConfig+0x274>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a6e      	ldr	r2, [pc, #440]	@ (8002694 <HAL_RCC_OscConfig+0x274>)
 80024da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024de:	6013      	str	r3, [r2, #0]
 80024e0:	4b6c      	ldr	r3, [pc, #432]	@ (8002694 <HAL_RCC_OscConfig+0x274>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a6b      	ldr	r2, [pc, #428]	@ (8002694 <HAL_RCC_OscConfig+0x274>)
 80024e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d013      	beq.n	800251c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f4:	f7fe fd22 	bl	8000f3c <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024fc:	f7fe fd1e 	bl	8000f3c <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b64      	cmp	r3, #100	@ 0x64
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e21f      	b.n	800294e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250e:	4b61      	ldr	r3, [pc, #388]	@ (8002694 <HAL_RCC_OscConfig+0x274>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f0      	beq.n	80024fc <HAL_RCC_OscConfig+0xdc>
 800251a:	e014      	b.n	8002546 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251c:	f7fe fd0e 	bl	8000f3c <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002524:	f7fe fd0a 	bl	8000f3c <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b64      	cmp	r3, #100	@ 0x64
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e20b      	b.n	800294e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002536:	4b57      	ldr	r3, [pc, #348]	@ (8002694 <HAL_RCC_OscConfig+0x274>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f0      	bne.n	8002524 <HAL_RCC_OscConfig+0x104>
 8002542:	e000      	b.n	8002546 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d06f      	beq.n	8002632 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002552:	4b50      	ldr	r3, [pc, #320]	@ (8002694 <HAL_RCC_OscConfig+0x274>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 030c 	and.w	r3, r3, #12
 800255a:	2b00      	cmp	r3, #0
 800255c:	d017      	beq.n	800258e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800255e:	4b4d      	ldr	r3, [pc, #308]	@ (8002694 <HAL_RCC_OscConfig+0x274>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 030c 	and.w	r3, r3, #12
        || \
 8002566:	2b08      	cmp	r3, #8
 8002568:	d105      	bne.n	8002576 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800256a:	4b4a      	ldr	r3, [pc, #296]	@ (8002694 <HAL_RCC_OscConfig+0x274>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00b      	beq.n	800258e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002576:	4b47      	ldr	r3, [pc, #284]	@ (8002694 <HAL_RCC_OscConfig+0x274>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800257e:	2b0c      	cmp	r3, #12
 8002580:	d11c      	bne.n	80025bc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002582:	4b44      	ldr	r3, [pc, #272]	@ (8002694 <HAL_RCC_OscConfig+0x274>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d116      	bne.n	80025bc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258e:	4b41      	ldr	r3, [pc, #260]	@ (8002694 <HAL_RCC_OscConfig+0x274>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d005      	beq.n	80025a6 <HAL_RCC_OscConfig+0x186>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d001      	beq.n	80025a6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e1d3      	b.n	800294e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002694 <HAL_RCC_OscConfig+0x274>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	4937      	ldr	r1, [pc, #220]	@ (8002694 <HAL_RCC_OscConfig+0x274>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ba:	e03a      	b.n	8002632 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d020      	beq.n	8002606 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025c4:	4b34      	ldr	r3, [pc, #208]	@ (8002698 <HAL_RCC_OscConfig+0x278>)
 80025c6:	2201      	movs	r2, #1
 80025c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ca:	f7fe fcb7 	bl	8000f3c <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d2:	f7fe fcb3 	bl	8000f3c <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e1b4      	b.n	800294e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002694 <HAL_RCC_OscConfig+0x274>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0f0      	beq.n	80025d2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f0:	4b28      	ldr	r3, [pc, #160]	@ (8002694 <HAL_RCC_OscConfig+0x274>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	4925      	ldr	r1, [pc, #148]	@ (8002694 <HAL_RCC_OscConfig+0x274>)
 8002600:	4313      	orrs	r3, r2
 8002602:	600b      	str	r3, [r1, #0]
 8002604:	e015      	b.n	8002632 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002606:	4b24      	ldr	r3, [pc, #144]	@ (8002698 <HAL_RCC_OscConfig+0x278>)
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260c:	f7fe fc96 	bl	8000f3c <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002614:	f7fe fc92 	bl	8000f3c <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e193      	b.n	800294e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002626:	4b1b      	ldr	r3, [pc, #108]	@ (8002694 <HAL_RCC_OscConfig+0x274>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	2b00      	cmp	r3, #0
 800263c:	d036      	beq.n	80026ac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d016      	beq.n	8002674 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002646:	4b15      	ldr	r3, [pc, #84]	@ (800269c <HAL_RCC_OscConfig+0x27c>)
 8002648:	2201      	movs	r2, #1
 800264a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264c:	f7fe fc76 	bl	8000f3c <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002654:	f7fe fc72 	bl	8000f3c <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e173      	b.n	800294e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002666:	4b0b      	ldr	r3, [pc, #44]	@ (8002694 <HAL_RCC_OscConfig+0x274>)
 8002668:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f0      	beq.n	8002654 <HAL_RCC_OscConfig+0x234>
 8002672:	e01b      	b.n	80026ac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002674:	4b09      	ldr	r3, [pc, #36]	@ (800269c <HAL_RCC_OscConfig+0x27c>)
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267a:	f7fe fc5f 	bl	8000f3c <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002680:	e00e      	b.n	80026a0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002682:	f7fe fc5b 	bl	8000f3c <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d907      	bls.n	80026a0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e15c      	b.n	800294e <HAL_RCC_OscConfig+0x52e>
 8002694:	40023800 	.word	0x40023800
 8002698:	42470000 	.word	0x42470000
 800269c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a0:	4b8a      	ldr	r3, [pc, #552]	@ (80028cc <HAL_RCC_OscConfig+0x4ac>)
 80026a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1ea      	bne.n	8002682 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 8097 	beq.w	80027e8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ba:	2300      	movs	r3, #0
 80026bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026be:	4b83      	ldr	r3, [pc, #524]	@ (80028cc <HAL_RCC_OscConfig+0x4ac>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10f      	bne.n	80026ea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	60bb      	str	r3, [r7, #8]
 80026ce:	4b7f      	ldr	r3, [pc, #508]	@ (80028cc <HAL_RCC_OscConfig+0x4ac>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d2:	4a7e      	ldr	r2, [pc, #504]	@ (80028cc <HAL_RCC_OscConfig+0x4ac>)
 80026d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80026da:	4b7c      	ldr	r3, [pc, #496]	@ (80028cc <HAL_RCC_OscConfig+0x4ac>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026e2:	60bb      	str	r3, [r7, #8]
 80026e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026e6:	2301      	movs	r3, #1
 80026e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ea:	4b79      	ldr	r3, [pc, #484]	@ (80028d0 <HAL_RCC_OscConfig+0x4b0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d118      	bne.n	8002728 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026f6:	4b76      	ldr	r3, [pc, #472]	@ (80028d0 <HAL_RCC_OscConfig+0x4b0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a75      	ldr	r2, [pc, #468]	@ (80028d0 <HAL_RCC_OscConfig+0x4b0>)
 80026fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002702:	f7fe fc1b 	bl	8000f3c <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800270a:	f7fe fc17 	bl	8000f3c <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e118      	b.n	800294e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271c:	4b6c      	ldr	r3, [pc, #432]	@ (80028d0 <HAL_RCC_OscConfig+0x4b0>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0f0      	beq.n	800270a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d106      	bne.n	800273e <HAL_RCC_OscConfig+0x31e>
 8002730:	4b66      	ldr	r3, [pc, #408]	@ (80028cc <HAL_RCC_OscConfig+0x4ac>)
 8002732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002734:	4a65      	ldr	r2, [pc, #404]	@ (80028cc <HAL_RCC_OscConfig+0x4ac>)
 8002736:	f043 0301 	orr.w	r3, r3, #1
 800273a:	6713      	str	r3, [r2, #112]	@ 0x70
 800273c:	e01c      	b.n	8002778 <HAL_RCC_OscConfig+0x358>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2b05      	cmp	r3, #5
 8002744:	d10c      	bne.n	8002760 <HAL_RCC_OscConfig+0x340>
 8002746:	4b61      	ldr	r3, [pc, #388]	@ (80028cc <HAL_RCC_OscConfig+0x4ac>)
 8002748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800274a:	4a60      	ldr	r2, [pc, #384]	@ (80028cc <HAL_RCC_OscConfig+0x4ac>)
 800274c:	f043 0304 	orr.w	r3, r3, #4
 8002750:	6713      	str	r3, [r2, #112]	@ 0x70
 8002752:	4b5e      	ldr	r3, [pc, #376]	@ (80028cc <HAL_RCC_OscConfig+0x4ac>)
 8002754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002756:	4a5d      	ldr	r2, [pc, #372]	@ (80028cc <HAL_RCC_OscConfig+0x4ac>)
 8002758:	f043 0301 	orr.w	r3, r3, #1
 800275c:	6713      	str	r3, [r2, #112]	@ 0x70
 800275e:	e00b      	b.n	8002778 <HAL_RCC_OscConfig+0x358>
 8002760:	4b5a      	ldr	r3, [pc, #360]	@ (80028cc <HAL_RCC_OscConfig+0x4ac>)
 8002762:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002764:	4a59      	ldr	r2, [pc, #356]	@ (80028cc <HAL_RCC_OscConfig+0x4ac>)
 8002766:	f023 0301 	bic.w	r3, r3, #1
 800276a:	6713      	str	r3, [r2, #112]	@ 0x70
 800276c:	4b57      	ldr	r3, [pc, #348]	@ (80028cc <HAL_RCC_OscConfig+0x4ac>)
 800276e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002770:	4a56      	ldr	r2, [pc, #344]	@ (80028cc <HAL_RCC_OscConfig+0x4ac>)
 8002772:	f023 0304 	bic.w	r3, r3, #4
 8002776:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d015      	beq.n	80027ac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002780:	f7fe fbdc 	bl	8000f3c <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002786:	e00a      	b.n	800279e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002788:	f7fe fbd8 	bl	8000f3c <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002796:	4293      	cmp	r3, r2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e0d7      	b.n	800294e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279e:	4b4b      	ldr	r3, [pc, #300]	@ (80028cc <HAL_RCC_OscConfig+0x4ac>)
 80027a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0ee      	beq.n	8002788 <HAL_RCC_OscConfig+0x368>
 80027aa:	e014      	b.n	80027d6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ac:	f7fe fbc6 	bl	8000f3c <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b2:	e00a      	b.n	80027ca <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b4:	f7fe fbc2 	bl	8000f3c <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e0c1      	b.n	800294e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ca:	4b40      	ldr	r3, [pc, #256]	@ (80028cc <HAL_RCC_OscConfig+0x4ac>)
 80027cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1ee      	bne.n	80027b4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027d6:	7dfb      	ldrb	r3, [r7, #23]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d105      	bne.n	80027e8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027dc:	4b3b      	ldr	r3, [pc, #236]	@ (80028cc <HAL_RCC_OscConfig+0x4ac>)
 80027de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e0:	4a3a      	ldr	r2, [pc, #232]	@ (80028cc <HAL_RCC_OscConfig+0x4ac>)
 80027e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 80ad 	beq.w	800294c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027f2:	4b36      	ldr	r3, [pc, #216]	@ (80028cc <HAL_RCC_OscConfig+0x4ac>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 030c 	and.w	r3, r3, #12
 80027fa:	2b08      	cmp	r3, #8
 80027fc:	d060      	beq.n	80028c0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	2b02      	cmp	r3, #2
 8002804:	d145      	bne.n	8002892 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002806:	4b33      	ldr	r3, [pc, #204]	@ (80028d4 <HAL_RCC_OscConfig+0x4b4>)
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280c:	f7fe fb96 	bl	8000f3c <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002814:	f7fe fb92 	bl	8000f3c <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e093      	b.n	800294e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002826:	4b29      	ldr	r3, [pc, #164]	@ (80028cc <HAL_RCC_OscConfig+0x4ac>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f0      	bne.n	8002814 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69da      	ldr	r2, [r3, #28]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002840:	019b      	lsls	r3, r3, #6
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002848:	085b      	lsrs	r3, r3, #1
 800284a:	3b01      	subs	r3, #1
 800284c:	041b      	lsls	r3, r3, #16
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002854:	061b      	lsls	r3, r3, #24
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285c:	071b      	lsls	r3, r3, #28
 800285e:	491b      	ldr	r1, [pc, #108]	@ (80028cc <HAL_RCC_OscConfig+0x4ac>)
 8002860:	4313      	orrs	r3, r2
 8002862:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002864:	4b1b      	ldr	r3, [pc, #108]	@ (80028d4 <HAL_RCC_OscConfig+0x4b4>)
 8002866:	2201      	movs	r2, #1
 8002868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286a:	f7fe fb67 	bl	8000f3c <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002872:	f7fe fb63 	bl	8000f3c <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e064      	b.n	800294e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002884:	4b11      	ldr	r3, [pc, #68]	@ (80028cc <HAL_RCC_OscConfig+0x4ac>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0f0      	beq.n	8002872 <HAL_RCC_OscConfig+0x452>
 8002890:	e05c      	b.n	800294c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002892:	4b10      	ldr	r3, [pc, #64]	@ (80028d4 <HAL_RCC_OscConfig+0x4b4>)
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002898:	f7fe fb50 	bl	8000f3c <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a0:	f7fe fb4c 	bl	8000f3c <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e04d      	b.n	800294e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b2:	4b06      	ldr	r3, [pc, #24]	@ (80028cc <HAL_RCC_OscConfig+0x4ac>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f0      	bne.n	80028a0 <HAL_RCC_OscConfig+0x480>
 80028be:	e045      	b.n	800294c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d107      	bne.n	80028d8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e040      	b.n	800294e <HAL_RCC_OscConfig+0x52e>
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40007000 	.word	0x40007000
 80028d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002958 <HAL_RCC_OscConfig+0x538>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d030      	beq.n	8002948 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d129      	bne.n	8002948 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fe:	429a      	cmp	r2, r3
 8002900:	d122      	bne.n	8002948 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002908:	4013      	ands	r3, r2
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800290e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002910:	4293      	cmp	r3, r2
 8002912:	d119      	bne.n	8002948 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291e:	085b      	lsrs	r3, r3, #1
 8002920:	3b01      	subs	r3, #1
 8002922:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002924:	429a      	cmp	r2, r3
 8002926:	d10f      	bne.n	8002948 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002932:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002934:	429a      	cmp	r2, r3
 8002936:	d107      	bne.n	8002948 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002942:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002944:	429a      	cmp	r2, r3
 8002946:	d001      	beq.n	800294c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e000      	b.n	800294e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40023800 	.word	0x40023800

0800295c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e042      	b.n	80029f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d106      	bne.n	8002988 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7fe f964 	bl	8000c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2224      	movs	r2, #36	@ 0x24
 800298c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68da      	ldr	r2, [r3, #12]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800299e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 f973 	bl	8002c8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	691a      	ldr	r2, [r3, #16]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80029b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	695a      	ldr	r2, [r3, #20]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80029c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68da      	ldr	r2, [r3, #12]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80029d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2220      	movs	r2, #32
 80029e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2220      	movs	r2, #32
 80029e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08a      	sub	sp, #40	@ 0x28
 8002a00:	af02      	add	r7, sp, #8
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b20      	cmp	r3, #32
 8002a1a:	d175      	bne.n	8002b08 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <HAL_UART_Transmit+0x2c>
 8002a22:	88fb      	ldrh	r3, [r7, #6]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e06e      	b.n	8002b0a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2221      	movs	r2, #33	@ 0x21
 8002a36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a3a:	f7fe fa7f 	bl	8000f3c <HAL_GetTick>
 8002a3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	88fa      	ldrh	r2, [r7, #6]
 8002a44:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	88fa      	ldrh	r2, [r7, #6]
 8002a4a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a54:	d108      	bne.n	8002a68 <HAL_UART_Transmit+0x6c>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d104      	bne.n	8002a68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	61bb      	str	r3, [r7, #24]
 8002a66:	e003      	b.n	8002a70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a70:	e02e      	b.n	8002ad0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	2180      	movs	r1, #128	@ 0x80
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f000 f848 	bl	8002b12 <UART_WaitOnFlagUntilTimeout>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d005      	beq.n	8002a94 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e03a      	b.n	8002b0a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10b      	bne.n	8002ab2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002aa8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	3302      	adds	r3, #2
 8002aae:	61bb      	str	r3, [r7, #24]
 8002ab0:	e007      	b.n	8002ac2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	781a      	ldrb	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1cb      	bne.n	8002a72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2140      	movs	r1, #64	@ 0x40
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 f814 	bl	8002b12 <UART_WaitOnFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d005      	beq.n	8002afc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2220      	movs	r2, #32
 8002af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e006      	b.n	8002b0a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2220      	movs	r2, #32
 8002b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002b04:	2300      	movs	r3, #0
 8002b06:	e000      	b.n	8002b0a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002b08:	2302      	movs	r3, #2
  }
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3720      	adds	r7, #32
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b086      	sub	sp, #24
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	60f8      	str	r0, [r7, #12]
 8002b1a:	60b9      	str	r1, [r7, #8]
 8002b1c:	603b      	str	r3, [r7, #0]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b22:	e03b      	b.n	8002b9c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b2a:	d037      	beq.n	8002b9c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b2c:	f7fe fa06 	bl	8000f3c <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	6a3a      	ldr	r2, [r7, #32]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d302      	bcc.n	8002b42 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b3c:	6a3b      	ldr	r3, [r7, #32]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e03a      	b.n	8002bbc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d023      	beq.n	8002b9c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b80      	cmp	r3, #128	@ 0x80
 8002b58:	d020      	beq.n	8002b9c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2b40      	cmp	r3, #64	@ 0x40
 8002b5e:	d01d      	beq.n	8002b9c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b08      	cmp	r3, #8
 8002b6c:	d116      	bne.n	8002b9c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	617b      	str	r3, [r7, #20]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 f81d 	bl	8002bc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2208      	movs	r2, #8
 8002b8e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e00f      	b.n	8002bbc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	bf0c      	ite	eq
 8002bac:	2301      	moveq	r3, #1
 8002bae:	2300      	movne	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	79fb      	ldrb	r3, [r7, #7]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d0b4      	beq.n	8002b24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3718      	adds	r7, #24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b095      	sub	sp, #84	@ 0x54
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	330c      	adds	r3, #12
 8002bd2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bd6:	e853 3f00 	ldrex	r3, [r3]
 8002bda:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	330c      	adds	r3, #12
 8002bea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002bec:	643a      	str	r2, [r7, #64]	@ 0x40
 8002bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002bf2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002bf4:	e841 2300 	strex	r3, r2, [r1]
 8002bf8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1e5      	bne.n	8002bcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	3314      	adds	r3, #20
 8002c06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	e853 3f00 	ldrex	r3, [r3]
 8002c0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	f023 0301 	bic.w	r3, r3, #1
 8002c16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	3314      	adds	r3, #20
 8002c1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c28:	e841 2300 	strex	r3, r2, [r1]
 8002c2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1e5      	bne.n	8002c00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d119      	bne.n	8002c70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	330c      	adds	r3, #12
 8002c42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	e853 3f00 	ldrex	r3, [r3]
 8002c4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f023 0310 	bic.w	r3, r3, #16
 8002c52:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	330c      	adds	r3, #12
 8002c5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c5c:	61ba      	str	r2, [r7, #24]
 8002c5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c60:	6979      	ldr	r1, [r7, #20]
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	e841 2300 	strex	r3, r2, [r1]
 8002c68:	613b      	str	r3, [r7, #16]
   return(result);
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1e5      	bne.n	8002c3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2220      	movs	r2, #32
 8002c74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002c7e:	bf00      	nop
 8002c80:	3754      	adds	r7, #84	@ 0x54
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
	...

08002c8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c90:	b0c0      	sub	sp, #256	@ 0x100
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ca8:	68d9      	ldr	r1, [r3, #12]
 8002caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	ea40 0301 	orr.w	r3, r0, r1
 8002cb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002ce4:	f021 010c 	bic.w	r1, r1, #12
 8002ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002cf2:	430b      	orrs	r3, r1
 8002cf4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d06:	6999      	ldr	r1, [r3, #24]
 8002d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	ea40 0301 	orr.w	r3, r0, r1
 8002d12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	4b8f      	ldr	r3, [pc, #572]	@ (8002f58 <UART_SetConfig+0x2cc>)
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d005      	beq.n	8002d2c <UART_SetConfig+0xa0>
 8002d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	4b8d      	ldr	r3, [pc, #564]	@ (8002f5c <UART_SetConfig+0x2d0>)
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d104      	bne.n	8002d36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d2c:	f7fe fe0a 	bl	8001944 <HAL_RCC_GetPCLK2Freq>
 8002d30:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002d34:	e003      	b.n	8002d3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d36:	f7fe fdf1 	bl	800191c <HAL_RCC_GetPCLK1Freq>
 8002d3a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d48:	f040 810c 	bne.w	8002f64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d50:	2200      	movs	r2, #0
 8002d52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002d56:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002d5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002d5e:	4622      	mov	r2, r4
 8002d60:	462b      	mov	r3, r5
 8002d62:	1891      	adds	r1, r2, r2
 8002d64:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002d66:	415b      	adcs	r3, r3
 8002d68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d6e:	4621      	mov	r1, r4
 8002d70:	eb12 0801 	adds.w	r8, r2, r1
 8002d74:	4629      	mov	r1, r5
 8002d76:	eb43 0901 	adc.w	r9, r3, r1
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	f04f 0300 	mov.w	r3, #0
 8002d82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d8e:	4690      	mov	r8, r2
 8002d90:	4699      	mov	r9, r3
 8002d92:	4623      	mov	r3, r4
 8002d94:	eb18 0303 	adds.w	r3, r8, r3
 8002d98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002d9c:	462b      	mov	r3, r5
 8002d9e:	eb49 0303 	adc.w	r3, r9, r3
 8002da2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002db2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002db6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002dba:	460b      	mov	r3, r1
 8002dbc:	18db      	adds	r3, r3, r3
 8002dbe:	653b      	str	r3, [r7, #80]	@ 0x50
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	eb42 0303 	adc.w	r3, r2, r3
 8002dc6:	657b      	str	r3, [r7, #84]	@ 0x54
 8002dc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002dcc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002dd0:	f7fd fa76 	bl	80002c0 <__aeabi_uldivmod>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4b61      	ldr	r3, [pc, #388]	@ (8002f60 <UART_SetConfig+0x2d4>)
 8002dda:	fba3 2302 	umull	r2, r3, r3, r2
 8002dde:	095b      	lsrs	r3, r3, #5
 8002de0:	011c      	lsls	r4, r3, #4
 8002de2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002de6:	2200      	movs	r2, #0
 8002de8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002dec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002df0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002df4:	4642      	mov	r2, r8
 8002df6:	464b      	mov	r3, r9
 8002df8:	1891      	adds	r1, r2, r2
 8002dfa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002dfc:	415b      	adcs	r3, r3
 8002dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002e04:	4641      	mov	r1, r8
 8002e06:	eb12 0a01 	adds.w	sl, r2, r1
 8002e0a:	4649      	mov	r1, r9
 8002e0c:	eb43 0b01 	adc.w	fp, r3, r1
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e24:	4692      	mov	sl, r2
 8002e26:	469b      	mov	fp, r3
 8002e28:	4643      	mov	r3, r8
 8002e2a:	eb1a 0303 	adds.w	r3, sl, r3
 8002e2e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e32:	464b      	mov	r3, r9
 8002e34:	eb4b 0303 	adc.w	r3, fp, r3
 8002e38:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e48:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002e4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002e50:	460b      	mov	r3, r1
 8002e52:	18db      	adds	r3, r3, r3
 8002e54:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e56:	4613      	mov	r3, r2
 8002e58:	eb42 0303 	adc.w	r3, r2, r3
 8002e5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002e62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002e66:	f7fd fa2b 	bl	80002c0 <__aeabi_uldivmod>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	4611      	mov	r1, r2
 8002e70:	4b3b      	ldr	r3, [pc, #236]	@ (8002f60 <UART_SetConfig+0x2d4>)
 8002e72:	fba3 2301 	umull	r2, r3, r3, r1
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	2264      	movs	r2, #100	@ 0x64
 8002e7a:	fb02 f303 	mul.w	r3, r2, r3
 8002e7e:	1acb      	subs	r3, r1, r3
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002e86:	4b36      	ldr	r3, [pc, #216]	@ (8002f60 <UART_SetConfig+0x2d4>)
 8002e88:	fba3 2302 	umull	r2, r3, r3, r2
 8002e8c:	095b      	lsrs	r3, r3, #5
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002e94:	441c      	add	r4, r3
 8002e96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ea0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002ea4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002ea8:	4642      	mov	r2, r8
 8002eaa:	464b      	mov	r3, r9
 8002eac:	1891      	adds	r1, r2, r2
 8002eae:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002eb0:	415b      	adcs	r3, r3
 8002eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002eb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002eb8:	4641      	mov	r1, r8
 8002eba:	1851      	adds	r1, r2, r1
 8002ebc:	6339      	str	r1, [r7, #48]	@ 0x30
 8002ebe:	4649      	mov	r1, r9
 8002ec0:	414b      	adcs	r3, r1
 8002ec2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002ed0:	4659      	mov	r1, fp
 8002ed2:	00cb      	lsls	r3, r1, #3
 8002ed4:	4651      	mov	r1, sl
 8002ed6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002eda:	4651      	mov	r1, sl
 8002edc:	00ca      	lsls	r2, r1, #3
 8002ede:	4610      	mov	r0, r2
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	4642      	mov	r2, r8
 8002ee6:	189b      	adds	r3, r3, r2
 8002ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002eec:	464b      	mov	r3, r9
 8002eee:	460a      	mov	r2, r1
 8002ef0:	eb42 0303 	adc.w	r3, r2, r3
 8002ef4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002f04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002f08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	18db      	adds	r3, r3, r3
 8002f10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f12:	4613      	mov	r3, r2
 8002f14:	eb42 0303 	adc.w	r3, r2, r3
 8002f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002f22:	f7fd f9cd 	bl	80002c0 <__aeabi_uldivmod>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f60 <UART_SetConfig+0x2d4>)
 8002f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f30:	095b      	lsrs	r3, r3, #5
 8002f32:	2164      	movs	r1, #100	@ 0x64
 8002f34:	fb01 f303 	mul.w	r3, r1, r3
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	3332      	adds	r3, #50	@ 0x32
 8002f3e:	4a08      	ldr	r2, [pc, #32]	@ (8002f60 <UART_SetConfig+0x2d4>)
 8002f40:	fba2 2303 	umull	r2, r3, r2, r3
 8002f44:	095b      	lsrs	r3, r3, #5
 8002f46:	f003 0207 	and.w	r2, r3, #7
 8002f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4422      	add	r2, r4
 8002f52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f54:	e106      	b.n	8003164 <UART_SetConfig+0x4d8>
 8002f56:	bf00      	nop
 8002f58:	40011000 	.word	0x40011000
 8002f5c:	40011400 	.word	0x40011400
 8002f60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002f6e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002f72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002f76:	4642      	mov	r2, r8
 8002f78:	464b      	mov	r3, r9
 8002f7a:	1891      	adds	r1, r2, r2
 8002f7c:	6239      	str	r1, [r7, #32]
 8002f7e:	415b      	adcs	r3, r3
 8002f80:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f86:	4641      	mov	r1, r8
 8002f88:	1854      	adds	r4, r2, r1
 8002f8a:	4649      	mov	r1, r9
 8002f8c:	eb43 0501 	adc.w	r5, r3, r1
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	00eb      	lsls	r3, r5, #3
 8002f9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f9e:	00e2      	lsls	r2, r4, #3
 8002fa0:	4614      	mov	r4, r2
 8002fa2:	461d      	mov	r5, r3
 8002fa4:	4643      	mov	r3, r8
 8002fa6:	18e3      	adds	r3, r4, r3
 8002fa8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002fac:	464b      	mov	r3, r9
 8002fae:	eb45 0303 	adc.w	r3, r5, r3
 8002fb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002fc2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	f04f 0300 	mov.w	r3, #0
 8002fce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002fd2:	4629      	mov	r1, r5
 8002fd4:	008b      	lsls	r3, r1, #2
 8002fd6:	4621      	mov	r1, r4
 8002fd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fdc:	4621      	mov	r1, r4
 8002fde:	008a      	lsls	r2, r1, #2
 8002fe0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002fe4:	f7fd f96c 	bl	80002c0 <__aeabi_uldivmod>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	4b60      	ldr	r3, [pc, #384]	@ (8003170 <UART_SetConfig+0x4e4>)
 8002fee:	fba3 2302 	umull	r2, r3, r3, r2
 8002ff2:	095b      	lsrs	r3, r3, #5
 8002ff4:	011c      	lsls	r4, r3, #4
 8002ff6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003000:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003004:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003008:	4642      	mov	r2, r8
 800300a:	464b      	mov	r3, r9
 800300c:	1891      	adds	r1, r2, r2
 800300e:	61b9      	str	r1, [r7, #24]
 8003010:	415b      	adcs	r3, r3
 8003012:	61fb      	str	r3, [r7, #28]
 8003014:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003018:	4641      	mov	r1, r8
 800301a:	1851      	adds	r1, r2, r1
 800301c:	6139      	str	r1, [r7, #16]
 800301e:	4649      	mov	r1, r9
 8003020:	414b      	adcs	r3, r1
 8003022:	617b      	str	r3, [r7, #20]
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003030:	4659      	mov	r1, fp
 8003032:	00cb      	lsls	r3, r1, #3
 8003034:	4651      	mov	r1, sl
 8003036:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800303a:	4651      	mov	r1, sl
 800303c:	00ca      	lsls	r2, r1, #3
 800303e:	4610      	mov	r0, r2
 8003040:	4619      	mov	r1, r3
 8003042:	4603      	mov	r3, r0
 8003044:	4642      	mov	r2, r8
 8003046:	189b      	adds	r3, r3, r2
 8003048:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800304c:	464b      	mov	r3, r9
 800304e:	460a      	mov	r2, r1
 8003050:	eb42 0303 	adc.w	r3, r2, r3
 8003054:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003062:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003070:	4649      	mov	r1, r9
 8003072:	008b      	lsls	r3, r1, #2
 8003074:	4641      	mov	r1, r8
 8003076:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800307a:	4641      	mov	r1, r8
 800307c:	008a      	lsls	r2, r1, #2
 800307e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003082:	f7fd f91d 	bl	80002c0 <__aeabi_uldivmod>
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	4611      	mov	r1, r2
 800308c:	4b38      	ldr	r3, [pc, #224]	@ (8003170 <UART_SetConfig+0x4e4>)
 800308e:	fba3 2301 	umull	r2, r3, r3, r1
 8003092:	095b      	lsrs	r3, r3, #5
 8003094:	2264      	movs	r2, #100	@ 0x64
 8003096:	fb02 f303 	mul.w	r3, r2, r3
 800309a:	1acb      	subs	r3, r1, r3
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	3332      	adds	r3, #50	@ 0x32
 80030a0:	4a33      	ldr	r2, [pc, #204]	@ (8003170 <UART_SetConfig+0x4e4>)
 80030a2:	fba2 2303 	umull	r2, r3, r2, r3
 80030a6:	095b      	lsrs	r3, r3, #5
 80030a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030ac:	441c      	add	r4, r3
 80030ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030b2:	2200      	movs	r2, #0
 80030b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80030b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80030b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80030bc:	4642      	mov	r2, r8
 80030be:	464b      	mov	r3, r9
 80030c0:	1891      	adds	r1, r2, r2
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	415b      	adcs	r3, r3
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030cc:	4641      	mov	r1, r8
 80030ce:	1851      	adds	r1, r2, r1
 80030d0:	6039      	str	r1, [r7, #0]
 80030d2:	4649      	mov	r1, r9
 80030d4:	414b      	adcs	r3, r1
 80030d6:	607b      	str	r3, [r7, #4]
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	f04f 0300 	mov.w	r3, #0
 80030e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80030e4:	4659      	mov	r1, fp
 80030e6:	00cb      	lsls	r3, r1, #3
 80030e8:	4651      	mov	r1, sl
 80030ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030ee:	4651      	mov	r1, sl
 80030f0:	00ca      	lsls	r2, r1, #3
 80030f2:	4610      	mov	r0, r2
 80030f4:	4619      	mov	r1, r3
 80030f6:	4603      	mov	r3, r0
 80030f8:	4642      	mov	r2, r8
 80030fa:	189b      	adds	r3, r3, r2
 80030fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80030fe:	464b      	mov	r3, r9
 8003100:	460a      	mov	r2, r1
 8003102:	eb42 0303 	adc.w	r3, r2, r3
 8003106:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	663b      	str	r3, [r7, #96]	@ 0x60
 8003112:	667a      	str	r2, [r7, #100]	@ 0x64
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	f04f 0300 	mov.w	r3, #0
 800311c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003120:	4649      	mov	r1, r9
 8003122:	008b      	lsls	r3, r1, #2
 8003124:	4641      	mov	r1, r8
 8003126:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800312a:	4641      	mov	r1, r8
 800312c:	008a      	lsls	r2, r1, #2
 800312e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003132:	f7fd f8c5 	bl	80002c0 <__aeabi_uldivmod>
 8003136:	4602      	mov	r2, r0
 8003138:	460b      	mov	r3, r1
 800313a:	4b0d      	ldr	r3, [pc, #52]	@ (8003170 <UART_SetConfig+0x4e4>)
 800313c:	fba3 1302 	umull	r1, r3, r3, r2
 8003140:	095b      	lsrs	r3, r3, #5
 8003142:	2164      	movs	r1, #100	@ 0x64
 8003144:	fb01 f303 	mul.w	r3, r1, r3
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	3332      	adds	r3, #50	@ 0x32
 800314e:	4a08      	ldr	r2, [pc, #32]	@ (8003170 <UART_SetConfig+0x4e4>)
 8003150:	fba2 2303 	umull	r2, r3, r2, r3
 8003154:	095b      	lsrs	r3, r3, #5
 8003156:	f003 020f 	and.w	r2, r3, #15
 800315a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4422      	add	r2, r4
 8003162:	609a      	str	r2, [r3, #8]
}
 8003164:	bf00      	nop
 8003166:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800316a:	46bd      	mov	sp, r7
 800316c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003170:	51eb851f 	.word	0x51eb851f

08003174 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003174:	b084      	sub	sp, #16
 8003176:	b580      	push	{r7, lr}
 8003178:	b084      	sub	sp, #16
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	f107 001c 	add.w	r0, r7, #28
 8003182:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003186:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800318a:	2b01      	cmp	r3, #1
 800318c:	d123      	bne.n	80031d6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003192:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80031a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80031b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d105      	bne.n	80031ca <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 fa9a 	bl	8003704 <USB_CoreReset>
 80031d0:	4603      	mov	r3, r0
 80031d2:	73fb      	strb	r3, [r7, #15]
 80031d4:	e01b      	b.n	800320e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 fa8e 	bl	8003704 <USB_CoreReset>
 80031e8:	4603      	mov	r3, r0
 80031ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80031ec:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d106      	bne.n	8003202 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	639a      	str	r2, [r3, #56]	@ 0x38
 8003200:	e005      	b.n	800320e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003206:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800320e:	7fbb      	ldrb	r3, [r7, #30]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d10b      	bne.n	800322c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f043 0206 	orr.w	r2, r3, #6
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f043 0220 	orr.w	r2, r3, #32
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800322c:	7bfb      	ldrb	r3, [r7, #15]
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003238:	b004      	add	sp, #16
 800323a:	4770      	bx	lr

0800323c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f023 0201 	bic.w	r2, r3, #1
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b084      	sub	sp, #16
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
 8003266:	460b      	mov	r3, r1
 8003268:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800327a:	78fb      	ldrb	r3, [r7, #3]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d115      	bne.n	80032ac <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800328c:	200a      	movs	r0, #10
 800328e:	f7fd fe61 	bl	8000f54 <HAL_Delay>
      ms += 10U;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	330a      	adds	r3, #10
 8003296:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 fa25 	bl	80036e8 <USB_GetMode>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d01e      	beq.n	80032e2 <USB_SetCurrentMode+0x84>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2bc7      	cmp	r3, #199	@ 0xc7
 80032a8:	d9f0      	bls.n	800328c <USB_SetCurrentMode+0x2e>
 80032aa:	e01a      	b.n	80032e2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80032ac:	78fb      	ldrb	r3, [r7, #3]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d115      	bne.n	80032de <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80032be:	200a      	movs	r0, #10
 80032c0:	f7fd fe48 	bl	8000f54 <HAL_Delay>
      ms += 10U;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	330a      	adds	r3, #10
 80032c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 fa0c 	bl	80036e8 <USB_GetMode>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d005      	beq.n	80032e2 <USB_SetCurrentMode+0x84>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2bc7      	cmp	r3, #199	@ 0xc7
 80032da:	d9f0      	bls.n	80032be <USB_SetCurrentMode+0x60>
 80032dc:	e001      	b.n	80032e2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e005      	b.n	80032ee <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2bc8      	cmp	r3, #200	@ 0xc8
 80032e6:	d101      	bne.n	80032ec <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e000      	b.n	80032ee <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
	...

080032f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80032f8:	b084      	sub	sp, #16
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b086      	sub	sp, #24
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
 8003302:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003306:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800330a:	2300      	movs	r3, #0
 800330c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003312:	2300      	movs	r3, #0
 8003314:	613b      	str	r3, [r7, #16]
 8003316:	e009      	b.n	800332c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	3340      	adds	r3, #64	@ 0x40
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	2200      	movs	r2, #0
 8003324:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	3301      	adds	r3, #1
 800332a:	613b      	str	r3, [r7, #16]
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	2b0e      	cmp	r3, #14
 8003330:	d9f2      	bls.n	8003318 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003332:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003336:	2b00      	cmp	r3, #0
 8003338:	d11c      	bne.n	8003374 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003348:	f043 0302 	orr.w	r3, r3, #2
 800334c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003352:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	e005      	b.n	8003380 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003378:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003386:	461a      	mov	r2, r3
 8003388:	2300      	movs	r3, #0
 800338a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800338c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003390:	2b01      	cmp	r3, #1
 8003392:	d10d      	bne.n	80033b0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003394:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003398:	2b00      	cmp	r3, #0
 800339a:	d104      	bne.n	80033a6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800339c:	2100      	movs	r1, #0
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f968 	bl	8003674 <USB_SetDevSpeed>
 80033a4:	e008      	b.n	80033b8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80033a6:	2101      	movs	r1, #1
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 f963 	bl	8003674 <USB_SetDevSpeed>
 80033ae:	e003      	b.n	80033b8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80033b0:	2103      	movs	r1, #3
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f95e 	bl	8003674 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80033b8:	2110      	movs	r1, #16
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f8fa 	bl	80035b4 <USB_FlushTxFifo>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f924 	bl	8003618 <USB_FlushRxFifo>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033e0:	461a      	mov	r2, r3
 80033e2:	2300      	movs	r3, #0
 80033e4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033ec:	461a      	mov	r2, r3
 80033ee:	2300      	movs	r3, #0
 80033f0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033f8:	461a      	mov	r2, r3
 80033fa:	2300      	movs	r3, #0
 80033fc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80033fe:	2300      	movs	r3, #0
 8003400:	613b      	str	r3, [r7, #16]
 8003402:	e043      	b.n	800348c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	015a      	lsls	r2, r3, #5
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4413      	add	r3, r2
 800340c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003416:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800341a:	d118      	bne.n	800344e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10a      	bne.n	8003438 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	015a      	lsls	r2, r3, #5
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	4413      	add	r3, r2
 800342a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800342e:	461a      	mov	r2, r3
 8003430:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	e013      	b.n	8003460 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	015a      	lsls	r2, r3, #5
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4413      	add	r3, r2
 8003440:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003444:	461a      	mov	r2, r3
 8003446:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800344a:	6013      	str	r3, [r2, #0]
 800344c:	e008      	b.n	8003460 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	015a      	lsls	r2, r3, #5
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	4413      	add	r3, r2
 8003456:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800345a:	461a      	mov	r2, r3
 800345c:	2300      	movs	r3, #0
 800345e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	015a      	lsls	r2, r3, #5
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4413      	add	r3, r2
 8003468:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800346c:	461a      	mov	r2, r3
 800346e:	2300      	movs	r3, #0
 8003470:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	015a      	lsls	r2, r3, #5
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	4413      	add	r3, r2
 800347a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800347e:	461a      	mov	r2, r3
 8003480:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003484:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	3301      	adds	r3, #1
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003490:	461a      	mov	r2, r3
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	4293      	cmp	r3, r2
 8003496:	d3b5      	bcc.n	8003404 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003498:	2300      	movs	r3, #0
 800349a:	613b      	str	r3, [r7, #16]
 800349c:	e043      	b.n	8003526 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	015a      	lsls	r2, r3, #5
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	4413      	add	r3, r2
 80034a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80034b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80034b4:	d118      	bne.n	80034e8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10a      	bne.n	80034d2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	015a      	lsls	r2, r3, #5
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4413      	add	r3, r2
 80034c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034c8:	461a      	mov	r2, r3
 80034ca:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80034ce:	6013      	str	r3, [r2, #0]
 80034d0:	e013      	b.n	80034fa <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	015a      	lsls	r2, r3, #5
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	4413      	add	r3, r2
 80034da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034de:	461a      	mov	r2, r3
 80034e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80034e4:	6013      	str	r3, [r2, #0]
 80034e6:	e008      	b.n	80034fa <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	015a      	lsls	r2, r3, #5
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4413      	add	r3, r2
 80034f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034f4:	461a      	mov	r2, r3
 80034f6:	2300      	movs	r3, #0
 80034f8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	015a      	lsls	r2, r3, #5
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	4413      	add	r3, r2
 8003502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003506:	461a      	mov	r2, r3
 8003508:	2300      	movs	r3, #0
 800350a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	015a      	lsls	r2, r3, #5
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4413      	add	r3, r2
 8003514:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003518:	461a      	mov	r2, r3
 800351a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800351e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	3301      	adds	r3, #1
 8003524:	613b      	str	r3, [r7, #16]
 8003526:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800352a:	461a      	mov	r2, r3
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	4293      	cmp	r3, r2
 8003530:	d3b5      	bcc.n	800349e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003540:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003544:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003552:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003554:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003558:	2b00      	cmp	r3, #0
 800355a:	d105      	bne.n	8003568 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	f043 0210 	orr.w	r2, r3, #16
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	699a      	ldr	r2, [r3, #24]
 800356c:	4b10      	ldr	r3, [pc, #64]	@ (80035b0 <USB_DevInit+0x2b8>)
 800356e:	4313      	orrs	r3, r2
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003574:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	f043 0208 	orr.w	r2, r3, #8
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003588:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800358c:	2b01      	cmp	r3, #1
 800358e:	d107      	bne.n	80035a0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003598:	f043 0304 	orr.w	r3, r3, #4
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80035a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3718      	adds	r7, #24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035ac:	b004      	add	sp, #16
 80035ae:	4770      	bx	lr
 80035b0:	803c3800 	.word	0x803c3800

080035b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80035be:	2300      	movs	r3, #0
 80035c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	3301      	adds	r3, #1
 80035c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80035ce:	d901      	bls.n	80035d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e01b      	b.n	800360c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	daf2      	bge.n	80035c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	019b      	lsls	r3, r3, #6
 80035e4:	f043 0220 	orr.w	r2, r3, #32
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	3301      	adds	r3, #1
 80035f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80035f8:	d901      	bls.n	80035fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e006      	b.n	800360c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	f003 0320 	and.w	r3, r3, #32
 8003606:	2b20      	cmp	r3, #32
 8003608:	d0f0      	beq.n	80035ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003620:	2300      	movs	r3, #0
 8003622:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	3301      	adds	r3, #1
 8003628:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003630:	d901      	bls.n	8003636 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e018      	b.n	8003668 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	2b00      	cmp	r3, #0
 800363c:	daf2      	bge.n	8003624 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800363e:	2300      	movs	r3, #0
 8003640:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2210      	movs	r2, #16
 8003646:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	3301      	adds	r3, #1
 800364c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003654:	d901      	bls.n	800365a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e006      	b.n	8003668 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	f003 0310 	and.w	r3, r3, #16
 8003662:	2b10      	cmp	r3, #16
 8003664:	d0f0      	beq.n	8003648 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	460b      	mov	r3, r1
 800367e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	78fb      	ldrb	r3, [r7, #3]
 800368e:	68f9      	ldr	r1, [r7, #12]
 8003690:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003694:	4313      	orrs	r3, r2
 8003696:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b085      	sub	sp, #20
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80036c0:	f023 0303 	bic.w	r3, r3, #3
 80036c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036d4:	f043 0302 	orr.w	r3, r3, #2
 80036d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	f003 0301 	and.w	r3, r3, #1
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800370c:	2300      	movs	r3, #0
 800370e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	3301      	adds	r3, #1
 8003714:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800371c:	d901      	bls.n	8003722 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e01b      	b.n	800375a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	2b00      	cmp	r3, #0
 8003728:	daf2      	bge.n	8003710 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800372a:	2300      	movs	r3, #0
 800372c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f043 0201 	orr.w	r2, r3, #1
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	3301      	adds	r3, #1
 800373e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003746:	d901      	bls.n	800374c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e006      	b.n	800375a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b01      	cmp	r3, #1
 8003756:	d0f0      	beq.n	800373a <USB_CoreReset+0x36>

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3714      	adds	r7, #20
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
	...

08003768 <__NVIC_SetPriority>:
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	4603      	mov	r3, r0
 8003770:	6039      	str	r1, [r7, #0]
 8003772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003778:	2b00      	cmp	r3, #0
 800377a:	db0a      	blt.n	8003792 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	b2da      	uxtb	r2, r3
 8003780:	490c      	ldr	r1, [pc, #48]	@ (80037b4 <__NVIC_SetPriority+0x4c>)
 8003782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003786:	0112      	lsls	r2, r2, #4
 8003788:	b2d2      	uxtb	r2, r2
 800378a:	440b      	add	r3, r1
 800378c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003790:	e00a      	b.n	80037a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	b2da      	uxtb	r2, r3
 8003796:	4908      	ldr	r1, [pc, #32]	@ (80037b8 <__NVIC_SetPriority+0x50>)
 8003798:	79fb      	ldrb	r3, [r7, #7]
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	3b04      	subs	r3, #4
 80037a0:	0112      	lsls	r2, r2, #4
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	440b      	add	r3, r1
 80037a6:	761a      	strb	r2, [r3, #24]
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	e000e100 	.word	0xe000e100
 80037b8:	e000ed00 	.word	0xe000ed00

080037bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80037c0:	2100      	movs	r1, #0
 80037c2:	f06f 0004 	mvn.w	r0, #4
 80037c6:	f7ff ffcf 	bl	8003768 <__NVIC_SetPriority>
#endif
}
 80037ca:	bf00      	nop
 80037cc:	bd80      	pop	{r7, pc}
	...

080037d0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037d6:	f3ef 8305 	mrs	r3, IPSR
 80037da:	603b      	str	r3, [r7, #0]
  return(result);
 80037dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80037e2:	f06f 0305 	mvn.w	r3, #5
 80037e6:	607b      	str	r3, [r7, #4]
 80037e8:	e00c      	b.n	8003804 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80037ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003814 <osKernelInitialize+0x44>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d105      	bne.n	80037fe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80037f2:	4b08      	ldr	r3, [pc, #32]	@ (8003814 <osKernelInitialize+0x44>)
 80037f4:	2201      	movs	r2, #1
 80037f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80037f8:	2300      	movs	r3, #0
 80037fa:	607b      	str	r3, [r7, #4]
 80037fc:	e002      	b.n	8003804 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80037fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003802:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003804:	687b      	ldr	r3, [r7, #4]
}
 8003806:	4618      	mov	r0, r3
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	200005d4 	.word	0x200005d4

08003818 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800381e:	f3ef 8305 	mrs	r3, IPSR
 8003822:	603b      	str	r3, [r7, #0]
  return(result);
 8003824:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <osKernelStart+0x1a>
    stat = osErrorISR;
 800382a:	f06f 0305 	mvn.w	r3, #5
 800382e:	607b      	str	r3, [r7, #4]
 8003830:	e010      	b.n	8003854 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003832:	4b0b      	ldr	r3, [pc, #44]	@ (8003860 <osKernelStart+0x48>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d109      	bne.n	800384e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800383a:	f7ff ffbf 	bl	80037bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800383e:	4b08      	ldr	r3, [pc, #32]	@ (8003860 <osKernelStart+0x48>)
 8003840:	2202      	movs	r2, #2
 8003842:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003844:	f001 fd56 	bl	80052f4 <vTaskStartScheduler>
      stat = osOK;
 8003848:	2300      	movs	r3, #0
 800384a:	607b      	str	r3, [r7, #4]
 800384c:	e002      	b.n	8003854 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800384e:	f04f 33ff 	mov.w	r3, #4294967295
 8003852:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003854:	687b      	ldr	r3, [r7, #4]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	200005d4 	.word	0x200005d4

08003864 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003864:	b580      	push	{r7, lr}
 8003866:	b08e      	sub	sp, #56	@ 0x38
 8003868:	af04      	add	r7, sp, #16
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003870:	2300      	movs	r3, #0
 8003872:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003874:	f3ef 8305 	mrs	r3, IPSR
 8003878:	617b      	str	r3, [r7, #20]
  return(result);
 800387a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800387c:	2b00      	cmp	r3, #0
 800387e:	d17e      	bne.n	800397e <osThreadNew+0x11a>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d07b      	beq.n	800397e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003886:	2380      	movs	r3, #128	@ 0x80
 8003888:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800388a:	2318      	movs	r3, #24
 800388c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800388e:	2300      	movs	r3, #0
 8003890:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003892:	f04f 33ff 	mov.w	r3, #4294967295
 8003896:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d045      	beq.n	800392a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d002      	beq.n	80038ac <osThreadNew+0x48>
        name = attr->name;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d008      	beq.n	80038d2 <osThreadNew+0x6e>
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	2b38      	cmp	r3, #56	@ 0x38
 80038c4:	d805      	bhi.n	80038d2 <osThreadNew+0x6e>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <osThreadNew+0x72>
        return (NULL);
 80038d2:	2300      	movs	r3, #0
 80038d4:	e054      	b.n	8003980 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	089b      	lsrs	r3, r3, #2
 80038e4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00e      	beq.n	800390c <osThreadNew+0xa8>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	2b5b      	cmp	r3, #91	@ 0x5b
 80038f4:	d90a      	bls.n	800390c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d006      	beq.n	800390c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d002      	beq.n	800390c <osThreadNew+0xa8>
        mem = 1;
 8003906:	2301      	movs	r3, #1
 8003908:	61bb      	str	r3, [r7, #24]
 800390a:	e010      	b.n	800392e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10c      	bne.n	800392e <osThreadNew+0xca>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d108      	bne.n	800392e <osThreadNew+0xca>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d104      	bne.n	800392e <osThreadNew+0xca>
          mem = 0;
 8003924:	2300      	movs	r3, #0
 8003926:	61bb      	str	r3, [r7, #24]
 8003928:	e001      	b.n	800392e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800392a:	2300      	movs	r3, #0
 800392c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d110      	bne.n	8003956 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800393c:	9202      	str	r2, [sp, #8]
 800393e:	9301      	str	r3, [sp, #4]
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	6a3a      	ldr	r2, [r7, #32]
 8003948:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f001 faf6 	bl	8004f3c <xTaskCreateStatic>
 8003950:	4603      	mov	r3, r0
 8003952:	613b      	str	r3, [r7, #16]
 8003954:	e013      	b.n	800397e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d110      	bne.n	800397e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800395c:	6a3b      	ldr	r3, [r7, #32]
 800395e:	b29a      	uxth	r2, r3
 8003960:	f107 0310 	add.w	r3, r7, #16
 8003964:	9301      	str	r3, [sp, #4]
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f001 fb44 	bl	8004ffc <xTaskCreate>
 8003974:	4603      	mov	r3, r0
 8003976:	2b01      	cmp	r3, #1
 8003978:	d001      	beq.n	800397e <osThreadNew+0x11a>
            hTask = NULL;
 800397a:	2300      	movs	r3, #0
 800397c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800397e:	693b      	ldr	r3, [r7, #16]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3728      	adds	r7, #40	@ 0x28
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003990:	f3ef 8305 	mrs	r3, IPSR
 8003994:	60bb      	str	r3, [r7, #8]
  return(result);
 8003996:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <osDelay+0x1c>
    stat = osErrorISR;
 800399c:	f06f 0305 	mvn.w	r3, #5
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	e007      	b.n	80039b4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80039a4:	2300      	movs	r3, #0
 80039a6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d002      	beq.n	80039b4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f001 fc6a 	bl	8005288 <vTaskDelay>
    }
  }

  return (stat);
 80039b4:	68fb      	ldr	r3, [r7, #12]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80039be:	b580      	push	{r7, lr}
 80039c0:	b088      	sub	sp, #32
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80039c6:	2300      	movs	r3, #0
 80039c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039ca:	f3ef 8305 	mrs	r3, IPSR
 80039ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80039d0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d174      	bne.n	8003ac0 <osMutexNew+0x102>
    if (attr != NULL) {
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d003      	beq.n	80039e4 <osMutexNew+0x26>
      type = attr->attr_bits;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	61bb      	str	r3, [r7, #24]
 80039e2:	e001      	b.n	80039e8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d002      	beq.n	80039f8 <osMutexNew+0x3a>
      rmtx = 1U;
 80039f2:	2301      	movs	r3, #1
 80039f4:	617b      	str	r3, [r7, #20]
 80039f6:	e001      	b.n	80039fc <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80039f8:	2300      	movs	r3, #0
 80039fa:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	f003 0308 	and.w	r3, r3, #8
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d15c      	bne.n	8003ac0 <osMutexNew+0x102>
      mem = -1;
 8003a06:	f04f 33ff 	mov.w	r3, #4294967295
 8003a0a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d015      	beq.n	8003a3e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d006      	beq.n	8003a28 <osMutexNew+0x6a>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	2b4f      	cmp	r3, #79	@ 0x4f
 8003a20:	d902      	bls.n	8003a28 <osMutexNew+0x6a>
          mem = 1;
 8003a22:	2301      	movs	r3, #1
 8003a24:	613b      	str	r3, [r7, #16]
 8003a26:	e00c      	b.n	8003a42 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d108      	bne.n	8003a42 <osMutexNew+0x84>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d104      	bne.n	8003a42 <osMutexNew+0x84>
            mem = 0;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	613b      	str	r3, [r7, #16]
 8003a3c:	e001      	b.n	8003a42 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d112      	bne.n	8003a6e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d007      	beq.n	8003a5e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	4619      	mov	r1, r3
 8003a54:	2004      	movs	r0, #4
 8003a56:	f000 fc50 	bl	80042fa <xQueueCreateMutexStatic>
 8003a5a:	61f8      	str	r0, [r7, #28]
 8003a5c:	e016      	b.n	8003a8c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	4619      	mov	r1, r3
 8003a64:	2001      	movs	r0, #1
 8003a66:	f000 fc48 	bl	80042fa <xQueueCreateMutexStatic>
 8003a6a:	61f8      	str	r0, [r7, #28]
 8003a6c:	e00e      	b.n	8003a8c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10b      	bne.n	8003a8c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d004      	beq.n	8003a84 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8003a7a:	2004      	movs	r0, #4
 8003a7c:	f000 fc25 	bl	80042ca <xQueueCreateMutex>
 8003a80:	61f8      	str	r0, [r7, #28]
 8003a82:	e003      	b.n	8003a8c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8003a84:	2001      	movs	r0, #1
 8003a86:	f000 fc20 	bl	80042ca <xQueueCreateMutex>
 8003a8a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00c      	beq.n	8003aac <osMutexNew+0xee>
        if (attr != NULL) {
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <osMutexNew+0xe2>
          name = attr->name;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	60fb      	str	r3, [r7, #12]
 8003a9e:	e001      	b.n	8003aa4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8003aa4:	68f9      	ldr	r1, [r7, #12]
 8003aa6:	69f8      	ldr	r0, [r7, #28]
 8003aa8:	f001 f9ea 	bl	8004e80 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d006      	beq.n	8003ac0 <osMutexNew+0x102>
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d003      	beq.n	8003ac0 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f043 0301 	orr.w	r3, r3, #1
 8003abe:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8003ac0:	69fb      	ldr	r3, [r7, #28]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3720      	adds	r7, #32
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b086      	sub	sp, #24
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
 8003ad2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f023 0301 	bic.w	r3, r3, #1
 8003ada:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ae8:	f3ef 8305 	mrs	r3, IPSR
 8003aec:	60bb      	str	r3, [r7, #8]
  return(result);
 8003aee:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <osMutexAcquire+0x32>
    stat = osErrorISR;
 8003af4:	f06f 0305 	mvn.w	r3, #5
 8003af8:	617b      	str	r3, [r7, #20]
 8003afa:	e02c      	b.n	8003b56 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d103      	bne.n	8003b0a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8003b02:	f06f 0303 	mvn.w	r3, #3
 8003b06:	617b      	str	r3, [r7, #20]
 8003b08:	e025      	b.n	8003b56 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d011      	beq.n	8003b34 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8003b10:	6839      	ldr	r1, [r7, #0]
 8003b12:	6938      	ldr	r0, [r7, #16]
 8003b14:	f000 fc41 	bl	800439a <xQueueTakeMutexRecursive>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d01b      	beq.n	8003b56 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d003      	beq.n	8003b2c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8003b24:	f06f 0301 	mvn.w	r3, #1
 8003b28:	617b      	str	r3, [r7, #20]
 8003b2a:	e014      	b.n	8003b56 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003b2c:	f06f 0302 	mvn.w	r3, #2
 8003b30:	617b      	str	r3, [r7, #20]
 8003b32:	e010      	b.n	8003b56 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8003b34:	6839      	ldr	r1, [r7, #0]
 8003b36:	6938      	ldr	r0, [r7, #16]
 8003b38:	f000 fee8 	bl	800490c <xQueueSemaphoreTake>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d009      	beq.n	8003b56 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8003b48:	f06f 0301 	mvn.w	r3, #1
 8003b4c:	617b      	str	r3, [r7, #20]
 8003b4e:	e002      	b.n	8003b56 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003b50:	f06f 0302 	mvn.w	r3, #2
 8003b54:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8003b56:	697b      	ldr	r3, [r7, #20]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3718      	adds	r7, #24
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f023 0301 	bic.w	r3, r3, #1
 8003b6e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b7c:	f3ef 8305 	mrs	r3, IPSR
 8003b80:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b82:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d003      	beq.n	8003b90 <osMutexRelease+0x30>
    stat = osErrorISR;
 8003b88:	f06f 0305 	mvn.w	r3, #5
 8003b8c:	617b      	str	r3, [r7, #20]
 8003b8e:	e01f      	b.n	8003bd0 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d103      	bne.n	8003b9e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8003b96:	f06f 0303 	mvn.w	r3, #3
 8003b9a:	617b      	str	r3, [r7, #20]
 8003b9c:	e018      	b.n	8003bd0 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d009      	beq.n	8003bb8 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8003ba4:	6938      	ldr	r0, [r7, #16]
 8003ba6:	f000 fbc3 	bl	8004330 <xQueueGiveMutexRecursive>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d00f      	beq.n	8003bd0 <osMutexRelease+0x70>
        stat = osErrorResource;
 8003bb0:	f06f 0302 	mvn.w	r3, #2
 8003bb4:	617b      	str	r3, [r7, #20]
 8003bb6:	e00b      	b.n	8003bd0 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8003bb8:	2300      	movs	r3, #0
 8003bba:	2200      	movs	r2, #0
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	6938      	ldr	r0, [r7, #16]
 8003bc0:	f000 fc22 	bl	8004408 <xQueueGenericSend>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d002      	beq.n	8003bd0 <osMutexRelease+0x70>
        stat = osErrorResource;
 8003bca:	f06f 0302 	mvn.w	r3, #2
 8003bce:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003bd0:	697b      	ldr	r3, [r7, #20]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3718      	adds	r7, #24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b08a      	sub	sp, #40	@ 0x28
 8003bde:	af02      	add	r7, sp, #8
 8003be0:	60f8      	str	r0, [r7, #12]
 8003be2:	60b9      	str	r1, [r7, #8]
 8003be4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bea:	f3ef 8305 	mrs	r3, IPSR
 8003bee:	613b      	str	r3, [r7, #16]
  return(result);
 8003bf0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d15f      	bne.n	8003cb6 <osMessageQueueNew+0xdc>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d05c      	beq.n	8003cb6 <osMessageQueueNew+0xdc>
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d059      	beq.n	8003cb6 <osMessageQueueNew+0xdc>
    mem = -1;
 8003c02:	f04f 33ff 	mov.w	r3, #4294967295
 8003c06:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d029      	beq.n	8003c62 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d012      	beq.n	8003c3c <osMessageQueueNew+0x62>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	2b4f      	cmp	r3, #79	@ 0x4f
 8003c1c:	d90e      	bls.n	8003c3c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00a      	beq.n	8003c3c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	695a      	ldr	r2, [r3, #20]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	68b9      	ldr	r1, [r7, #8]
 8003c2e:	fb01 f303 	mul.w	r3, r1, r3
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d302      	bcc.n	8003c3c <osMessageQueueNew+0x62>
        mem = 1;
 8003c36:	2301      	movs	r3, #1
 8003c38:	61bb      	str	r3, [r7, #24]
 8003c3a:	e014      	b.n	8003c66 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d110      	bne.n	8003c66 <osMessageQueueNew+0x8c>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10c      	bne.n	8003c66 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d108      	bne.n	8003c66 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d104      	bne.n	8003c66 <osMessageQueueNew+0x8c>
          mem = 0;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	61bb      	str	r3, [r7, #24]
 8003c60:	e001      	b.n	8003c66 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003c62:	2300      	movs	r3, #0
 8003c64:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d10b      	bne.n	8003c84 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	2100      	movs	r1, #0
 8003c76:	9100      	str	r1, [sp, #0]
 8003c78:	68b9      	ldr	r1, [r7, #8]
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 fa30 	bl	80040e0 <xQueueGenericCreateStatic>
 8003c80:	61f8      	str	r0, [r7, #28]
 8003c82:	e008      	b.n	8003c96 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d105      	bne.n	8003c96 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	68b9      	ldr	r1, [r7, #8]
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 faa3 	bl	80041da <xQueueGenericCreate>
 8003c94:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00c      	beq.n	8003cb6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <osMessageQueueNew+0xd0>
        name = attr->name;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	617b      	str	r3, [r7, #20]
 8003ca8:	e001      	b.n	8003cae <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003caa:	2300      	movs	r3, #0
 8003cac:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003cae:	6979      	ldr	r1, [r7, #20]
 8003cb0:	69f8      	ldr	r0, [r7, #28]
 8003cb2:	f001 f8e5 	bl	8004e80 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003cb6:	69fb      	ldr	r3, [r7, #28]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3720      	adds	r7, #32
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b088      	sub	sp, #32
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	603b      	str	r3, [r7, #0]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cd8:	f3ef 8305 	mrs	r3, IPSR
 8003cdc:	617b      	str	r3, [r7, #20]
  return(result);
 8003cde:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d028      	beq.n	8003d36 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d005      	beq.n	8003cf6 <osMessageQueuePut+0x36>
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <osMessageQueuePut+0x36>
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8003cf6:	f06f 0303 	mvn.w	r3, #3
 8003cfa:	61fb      	str	r3, [r7, #28]
 8003cfc:	e038      	b.n	8003d70 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003d02:	f107 0210 	add.w	r2, r7, #16
 8003d06:	2300      	movs	r3, #0
 8003d08:	68b9      	ldr	r1, [r7, #8]
 8003d0a:	69b8      	ldr	r0, [r7, #24]
 8003d0c:	f000 fc7e 	bl	800460c <xQueueGenericSendFromISR>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d003      	beq.n	8003d1e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8003d16:	f06f 0302 	mvn.w	r3, #2
 8003d1a:	61fb      	str	r3, [r7, #28]
 8003d1c:	e028      	b.n	8003d70 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d025      	beq.n	8003d70 <osMessageQueuePut+0xb0>
 8003d24:	4b15      	ldr	r3, [pc, #84]	@ (8003d7c <osMessageQueuePut+0xbc>)
 8003d26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d2a:	601a      	str	r2, [r3, #0]
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	f3bf 8f6f 	isb	sy
 8003d34:	e01c      	b.n	8003d70 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d002      	beq.n	8003d42 <osMessageQueuePut+0x82>
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d103      	bne.n	8003d4a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8003d42:	f06f 0303 	mvn.w	r3, #3
 8003d46:	61fb      	str	r3, [r7, #28]
 8003d48:	e012      	b.n	8003d70 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	68b9      	ldr	r1, [r7, #8]
 8003d50:	69b8      	ldr	r0, [r7, #24]
 8003d52:	f000 fb59 	bl	8004408 <xQueueGenericSend>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d009      	beq.n	8003d70 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8003d62:	f06f 0301 	mvn.w	r3, #1
 8003d66:	61fb      	str	r3, [r7, #28]
 8003d68:	e002      	b.n	8003d70 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8003d6a:	f06f 0302 	mvn.w	r3, #2
 8003d6e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003d70:	69fb      	ldr	r3, [r7, #28]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3720      	adds	r7, #32
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	e000ed04 	.word	0xe000ed04

08003d80 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b088      	sub	sp, #32
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
 8003d8c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003d92:	2300      	movs	r3, #0
 8003d94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d96:	f3ef 8305 	mrs	r3, IPSR
 8003d9a:	617b      	str	r3, [r7, #20]
  return(result);
 8003d9c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d028      	beq.n	8003df4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d005      	beq.n	8003db4 <osMessageQueueGet+0x34>
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d002      	beq.n	8003db4 <osMessageQueueGet+0x34>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003db4:	f06f 0303 	mvn.w	r3, #3
 8003db8:	61fb      	str	r3, [r7, #28]
 8003dba:	e037      	b.n	8003e2c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003dc0:	f107 0310 	add.w	r3, r7, #16
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	68b9      	ldr	r1, [r7, #8]
 8003dc8:	69b8      	ldr	r0, [r7, #24]
 8003dca:	f000 feaf 	bl	8004b2c <xQueueReceiveFromISR>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d003      	beq.n	8003ddc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8003dd4:	f06f 0302 	mvn.w	r3, #2
 8003dd8:	61fb      	str	r3, [r7, #28]
 8003dda:	e027      	b.n	8003e2c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d024      	beq.n	8003e2c <osMessageQueueGet+0xac>
 8003de2:	4b15      	ldr	r3, [pc, #84]	@ (8003e38 <osMessageQueueGet+0xb8>)
 8003de4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	f3bf 8f4f 	dsb	sy
 8003dee:	f3bf 8f6f 	isb	sy
 8003df2:	e01b      	b.n	8003e2c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d002      	beq.n	8003e00 <osMessageQueueGet+0x80>
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d103      	bne.n	8003e08 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8003e00:	f06f 0303 	mvn.w	r3, #3
 8003e04:	61fb      	str	r3, [r7, #28]
 8003e06:	e011      	b.n	8003e2c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	68b9      	ldr	r1, [r7, #8]
 8003e0c:	69b8      	ldr	r0, [r7, #24]
 8003e0e:	f000 fc9b 	bl	8004748 <xQueueReceive>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d009      	beq.n	8003e2c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8003e1e:	f06f 0301 	mvn.w	r3, #1
 8003e22:	61fb      	str	r3, [r7, #28]
 8003e24:	e002      	b.n	8003e2c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8003e26:	f06f 0302 	mvn.w	r3, #2
 8003e2a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003e2c:	69fb      	ldr	r3, [r7, #28]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3720      	adds	r7, #32
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	e000ed04 	.word	0xe000ed04

08003e3c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4a07      	ldr	r2, [pc, #28]	@ (8003e68 <vApplicationGetIdleTaskMemory+0x2c>)
 8003e4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	4a06      	ldr	r2, [pc, #24]	@ (8003e6c <vApplicationGetIdleTaskMemory+0x30>)
 8003e52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2280      	movs	r2, #128	@ 0x80
 8003e58:	601a      	str	r2, [r3, #0]
}
 8003e5a:	bf00      	nop
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	200005d8 	.word	0x200005d8
 8003e6c:	20000634 	.word	0x20000634

08003e70 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4a07      	ldr	r2, [pc, #28]	@ (8003e9c <vApplicationGetTimerTaskMemory+0x2c>)
 8003e80:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	4a06      	ldr	r2, [pc, #24]	@ (8003ea0 <vApplicationGetTimerTaskMemory+0x30>)
 8003e86:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e8e:	601a      	str	r2, [r3, #0]
}
 8003e90:	bf00      	nop
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	20000834 	.word	0x20000834
 8003ea0:	20000890 	.word	0x20000890

08003ea4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f103 0208 	add.w	r2, r3, #8
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ebc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f103 0208 	add.w	r2, r3, #8
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f103 0208 	add.w	r2, r3, #8
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003ef2:	bf00      	nop
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003efe:	b480      	push	{r7}
 8003f00:	b085      	sub	sp, #20
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
 8003f06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	1c5a      	adds	r2, r3, #1
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	601a      	str	r2, [r3, #0]
}
 8003f3a:	bf00      	nop
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f46:	b480      	push	{r7}
 8003f48:	b085      	sub	sp, #20
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5c:	d103      	bne.n	8003f66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	e00c      	b.n	8003f80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	3308      	adds	r3, #8
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	e002      	b.n	8003f74 <vListInsert+0x2e>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d2f6      	bcs.n	8003f6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	601a      	str	r2, [r3, #0]
}
 8003fac:	bf00      	nop
 8003fae:	3714      	adds	r7, #20
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	6892      	ldr	r2, [r2, #8]
 8003fce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6852      	ldr	r2, [r2, #4]
 8003fd8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d103      	bne.n	8003fec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	1e5a      	subs	r2, r3, #1
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10b      	bne.n	8004038 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004032:	bf00      	nop
 8004034:	bf00      	nop
 8004036:	e7fd      	b.n	8004034 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004038:	f002 fc26 	bl	8006888 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004044:	68f9      	ldr	r1, [r7, #12]
 8004046:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004048:	fb01 f303 	mul.w	r3, r1, r3
 800404c:	441a      	add	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004068:	3b01      	subs	r3, #1
 800406a:	68f9      	ldr	r1, [r7, #12]
 800406c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800406e:	fb01 f303 	mul.w	r3, r1, r3
 8004072:	441a      	add	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	22ff      	movs	r2, #255	@ 0xff
 800407c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	22ff      	movs	r2, #255	@ 0xff
 8004084:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d114      	bne.n	80040b8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d01a      	beq.n	80040cc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	3310      	adds	r3, #16
 800409a:	4618      	mov	r0, r3
 800409c:	f001 fbb8 	bl	8005810 <xTaskRemoveFromEventList>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d012      	beq.n	80040cc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80040a6:	4b0d      	ldr	r3, [pc, #52]	@ (80040dc <xQueueGenericReset+0xd0>)
 80040a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	f3bf 8f6f 	isb	sy
 80040b6:	e009      	b.n	80040cc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	3310      	adds	r3, #16
 80040bc:	4618      	mov	r0, r3
 80040be:	f7ff fef1 	bl	8003ea4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	3324      	adds	r3, #36	@ 0x24
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7ff feec 	bl	8003ea4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80040cc:	f002 fc0e 	bl	80068ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80040d0:	2301      	movs	r3, #1
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	e000ed04 	.word	0xe000ed04

080040e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08e      	sub	sp, #56	@ 0x38
 80040e4:	af02      	add	r7, sp, #8
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
 80040ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10b      	bne.n	800410c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80040f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040f8:	f383 8811 	msr	BASEPRI, r3
 80040fc:	f3bf 8f6f 	isb	sy
 8004100:	f3bf 8f4f 	dsb	sy
 8004104:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004106:	bf00      	nop
 8004108:	bf00      	nop
 800410a:	e7fd      	b.n	8004108 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10b      	bne.n	800412a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004116:	f383 8811 	msr	BASEPRI, r3
 800411a:	f3bf 8f6f 	isb	sy
 800411e:	f3bf 8f4f 	dsb	sy
 8004122:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004124:	bf00      	nop
 8004126:	bf00      	nop
 8004128:	e7fd      	b.n	8004126 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d002      	beq.n	8004136 <xQueueGenericCreateStatic+0x56>
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <xQueueGenericCreateStatic+0x5a>
 8004136:	2301      	movs	r3, #1
 8004138:	e000      	b.n	800413c <xQueueGenericCreateStatic+0x5c>
 800413a:	2300      	movs	r3, #0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10b      	bne.n	8004158 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004144:	f383 8811 	msr	BASEPRI, r3
 8004148:	f3bf 8f6f 	isb	sy
 800414c:	f3bf 8f4f 	dsb	sy
 8004150:	623b      	str	r3, [r7, #32]
}
 8004152:	bf00      	nop
 8004154:	bf00      	nop
 8004156:	e7fd      	b.n	8004154 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d102      	bne.n	8004164 <xQueueGenericCreateStatic+0x84>
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <xQueueGenericCreateStatic+0x88>
 8004164:	2301      	movs	r3, #1
 8004166:	e000      	b.n	800416a <xQueueGenericCreateStatic+0x8a>
 8004168:	2300      	movs	r3, #0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10b      	bne.n	8004186 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800416e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004172:	f383 8811 	msr	BASEPRI, r3
 8004176:	f3bf 8f6f 	isb	sy
 800417a:	f3bf 8f4f 	dsb	sy
 800417e:	61fb      	str	r3, [r7, #28]
}
 8004180:	bf00      	nop
 8004182:	bf00      	nop
 8004184:	e7fd      	b.n	8004182 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004186:	2350      	movs	r3, #80	@ 0x50
 8004188:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	2b50      	cmp	r3, #80	@ 0x50
 800418e:	d00b      	beq.n	80041a8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	61bb      	str	r3, [r7, #24]
}
 80041a2:	bf00      	nop
 80041a4:	bf00      	nop
 80041a6:	e7fd      	b.n	80041a4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80041a8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80041ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00d      	beq.n	80041d0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80041b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80041bc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80041c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	4613      	mov	r3, r2
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	68b9      	ldr	r1, [r7, #8]
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 f840 	bl	8004250 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80041d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3730      	adds	r7, #48	@ 0x30
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b08a      	sub	sp, #40	@ 0x28
 80041de:	af02      	add	r7, sp, #8
 80041e0:	60f8      	str	r0, [r7, #12]
 80041e2:	60b9      	str	r1, [r7, #8]
 80041e4:	4613      	mov	r3, r2
 80041e6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10b      	bne.n	8004206 <xQueueGenericCreate+0x2c>
	__asm volatile
 80041ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f2:	f383 8811 	msr	BASEPRI, r3
 80041f6:	f3bf 8f6f 	isb	sy
 80041fa:	f3bf 8f4f 	dsb	sy
 80041fe:	613b      	str	r3, [r7, #16]
}
 8004200:	bf00      	nop
 8004202:	bf00      	nop
 8004204:	e7fd      	b.n	8004202 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	fb02 f303 	mul.w	r3, r2, r3
 800420e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	3350      	adds	r3, #80	@ 0x50
 8004214:	4618      	mov	r0, r3
 8004216:	f002 fc59 	bl	8006acc <pvPortMalloc>
 800421a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d011      	beq.n	8004246 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	3350      	adds	r3, #80	@ 0x50
 800422a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004234:	79fa      	ldrb	r2, [r7, #7]
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	4613      	mov	r3, r2
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	68b9      	ldr	r1, [r7, #8]
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f000 f805 	bl	8004250 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004246:	69bb      	ldr	r3, [r7, #24]
	}
 8004248:	4618      	mov	r0, r3
 800424a:	3720      	adds	r7, #32
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
 800425c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d103      	bne.n	800426c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	e002      	b.n	8004272 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800427e:	2101      	movs	r1, #1
 8004280:	69b8      	ldr	r0, [r7, #24]
 8004282:	f7ff fec3 	bl	800400c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	78fa      	ldrb	r2, [r7, #3]
 800428a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800428e:	bf00      	nop
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004296:	b580      	push	{r7, lr}
 8004298:	b082      	sub	sp, #8
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00e      	beq.n	80042c2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80042b6:	2300      	movs	r3, #0
 80042b8:	2200      	movs	r2, #0
 80042ba:	2100      	movs	r1, #0
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f8a3 	bl	8004408 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80042c2:	bf00      	nop
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b086      	sub	sp, #24
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	4603      	mov	r3, r0
 80042d2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80042d4:	2301      	movs	r3, #1
 80042d6:	617b      	str	r3, [r7, #20]
 80042d8:	2300      	movs	r3, #0
 80042da:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80042dc:	79fb      	ldrb	r3, [r7, #7]
 80042de:	461a      	mov	r2, r3
 80042e0:	6939      	ldr	r1, [r7, #16]
 80042e2:	6978      	ldr	r0, [r7, #20]
 80042e4:	f7ff ff79 	bl	80041da <xQueueGenericCreate>
 80042e8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f7ff ffd3 	bl	8004296 <prvInitialiseMutex>

		return xNewQueue;
 80042f0:	68fb      	ldr	r3, [r7, #12]
	}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3718      	adds	r7, #24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b088      	sub	sp, #32
 80042fe:	af02      	add	r7, sp, #8
 8004300:	4603      	mov	r3, r0
 8004302:	6039      	str	r1, [r7, #0]
 8004304:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004306:	2301      	movs	r3, #1
 8004308:	617b      	str	r3, [r7, #20]
 800430a:	2300      	movs	r3, #0
 800430c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800430e:	79fb      	ldrb	r3, [r7, #7]
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	2200      	movs	r2, #0
 8004316:	6939      	ldr	r1, [r7, #16]
 8004318:	6978      	ldr	r0, [r7, #20]
 800431a:	f7ff fee1 	bl	80040e0 <xQueueGenericCreateStatic>
 800431e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f7ff ffb8 	bl	8004296 <prvInitialiseMutex>

		return xNewQueue;
 8004326:	68fb      	ldr	r3, [r7, #12]
	}
 8004328:	4618      	mov	r0, r3
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004330:	b590      	push	{r4, r7, lr}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10b      	bne.n	800435a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8004342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004346:	f383 8811 	msr	BASEPRI, r3
 800434a:	f3bf 8f6f 	isb	sy
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	60fb      	str	r3, [r7, #12]
}
 8004354:	bf00      	nop
 8004356:	bf00      	nop
 8004358:	e7fd      	b.n	8004356 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	689c      	ldr	r4, [r3, #8]
 800435e:	f001 fc17 	bl	8005b90 <xTaskGetCurrentTaskHandle>
 8004362:	4603      	mov	r3, r0
 8004364:	429c      	cmp	r4, r3
 8004366:	d111      	bne.n	800438c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	1e5a      	subs	r2, r3, #1
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d105      	bne.n	8004386 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800437a:	2300      	movs	r3, #0
 800437c:	2200      	movs	r2, #0
 800437e:	2100      	movs	r1, #0
 8004380:	6938      	ldr	r0, [r7, #16]
 8004382:	f000 f841 	bl	8004408 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8004386:	2301      	movs	r3, #1
 8004388:	617b      	str	r3, [r7, #20]
 800438a:	e001      	b.n	8004390 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800438c:	2300      	movs	r3, #0
 800438e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8004390:	697b      	ldr	r3, [r7, #20]
	}
 8004392:	4618      	mov	r0, r3
 8004394:	371c      	adds	r7, #28
 8004396:	46bd      	mov	sp, r7
 8004398:	bd90      	pop	{r4, r7, pc}

0800439a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800439a:	b590      	push	{r4, r7, lr}
 800439c:	b087      	sub	sp, #28
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
 80043a2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10b      	bne.n	80043c6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80043ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043b2:	f383 8811 	msr	BASEPRI, r3
 80043b6:	f3bf 8f6f 	isb	sy
 80043ba:	f3bf 8f4f 	dsb	sy
 80043be:	60fb      	str	r3, [r7, #12]
}
 80043c0:	bf00      	nop
 80043c2:	bf00      	nop
 80043c4:	e7fd      	b.n	80043c2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	689c      	ldr	r4, [r3, #8]
 80043ca:	f001 fbe1 	bl	8005b90 <xTaskGetCurrentTaskHandle>
 80043ce:	4603      	mov	r3, r0
 80043d0:	429c      	cmp	r4, r3
 80043d2:	d107      	bne.n	80043e4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80043de:	2301      	movs	r3, #1
 80043e0:	617b      	str	r3, [r7, #20]
 80043e2:	e00c      	b.n	80043fe <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80043e4:	6839      	ldr	r1, [r7, #0]
 80043e6:	6938      	ldr	r0, [r7, #16]
 80043e8:	f000 fa90 	bl	800490c <xQueueSemaphoreTake>
 80043ec:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d004      	beq.n	80043fe <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	1c5a      	adds	r2, r3, #1
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80043fe:	697b      	ldr	r3, [r7, #20]
	}
 8004400:	4618      	mov	r0, r3
 8004402:	371c      	adds	r7, #28
 8004404:	46bd      	mov	sp, r7
 8004406:	bd90      	pop	{r4, r7, pc}

08004408 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b08e      	sub	sp, #56	@ 0x38
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
 8004414:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004416:	2300      	movs	r3, #0
 8004418:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800441e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10b      	bne.n	800443c <xQueueGenericSend+0x34>
	__asm volatile
 8004424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004428:	f383 8811 	msr	BASEPRI, r3
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004436:	bf00      	nop
 8004438:	bf00      	nop
 800443a:	e7fd      	b.n	8004438 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d103      	bne.n	800444a <xQueueGenericSend+0x42>
 8004442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <xQueueGenericSend+0x46>
 800444a:	2301      	movs	r3, #1
 800444c:	e000      	b.n	8004450 <xQueueGenericSend+0x48>
 800444e:	2300      	movs	r3, #0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10b      	bne.n	800446c <xQueueGenericSend+0x64>
	__asm volatile
 8004454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004458:	f383 8811 	msr	BASEPRI, r3
 800445c:	f3bf 8f6f 	isb	sy
 8004460:	f3bf 8f4f 	dsb	sy
 8004464:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004466:	bf00      	nop
 8004468:	bf00      	nop
 800446a:	e7fd      	b.n	8004468 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	2b02      	cmp	r3, #2
 8004470:	d103      	bne.n	800447a <xQueueGenericSend+0x72>
 8004472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004476:	2b01      	cmp	r3, #1
 8004478:	d101      	bne.n	800447e <xQueueGenericSend+0x76>
 800447a:	2301      	movs	r3, #1
 800447c:	e000      	b.n	8004480 <xQueueGenericSend+0x78>
 800447e:	2300      	movs	r3, #0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10b      	bne.n	800449c <xQueueGenericSend+0x94>
	__asm volatile
 8004484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004488:	f383 8811 	msr	BASEPRI, r3
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	623b      	str	r3, [r7, #32]
}
 8004496:	bf00      	nop
 8004498:	bf00      	nop
 800449a:	e7fd      	b.n	8004498 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800449c:	f001 fb88 	bl	8005bb0 <xTaskGetSchedulerState>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d102      	bne.n	80044ac <xQueueGenericSend+0xa4>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d101      	bne.n	80044b0 <xQueueGenericSend+0xa8>
 80044ac:	2301      	movs	r3, #1
 80044ae:	e000      	b.n	80044b2 <xQueueGenericSend+0xaa>
 80044b0:	2300      	movs	r3, #0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10b      	bne.n	80044ce <xQueueGenericSend+0xc6>
	__asm volatile
 80044b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ba:	f383 8811 	msr	BASEPRI, r3
 80044be:	f3bf 8f6f 	isb	sy
 80044c2:	f3bf 8f4f 	dsb	sy
 80044c6:	61fb      	str	r3, [r7, #28]
}
 80044c8:	bf00      	nop
 80044ca:	bf00      	nop
 80044cc:	e7fd      	b.n	80044ca <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80044ce:	f002 f9db 	bl	8006888 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044da:	429a      	cmp	r2, r3
 80044dc:	d302      	bcc.n	80044e4 <xQueueGenericSend+0xdc>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d129      	bne.n	8004538 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044e4:	683a      	ldr	r2, [r7, #0]
 80044e6:	68b9      	ldr	r1, [r7, #8]
 80044e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80044ea:	f000 fbb9 	bl	8004c60 <prvCopyDataToQueue>
 80044ee:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d010      	beq.n	800451a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044fa:	3324      	adds	r3, #36	@ 0x24
 80044fc:	4618      	mov	r0, r3
 80044fe:	f001 f987 	bl	8005810 <xTaskRemoveFromEventList>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d013      	beq.n	8004530 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004508:	4b3f      	ldr	r3, [pc, #252]	@ (8004608 <xQueueGenericSend+0x200>)
 800450a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800450e:	601a      	str	r2, [r3, #0]
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	f3bf 8f6f 	isb	sy
 8004518:	e00a      	b.n	8004530 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800451a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800451c:	2b00      	cmp	r3, #0
 800451e:	d007      	beq.n	8004530 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004520:	4b39      	ldr	r3, [pc, #228]	@ (8004608 <xQueueGenericSend+0x200>)
 8004522:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004530:	f002 f9dc 	bl	80068ec <vPortExitCritical>
				return pdPASS;
 8004534:	2301      	movs	r3, #1
 8004536:	e063      	b.n	8004600 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d103      	bne.n	8004546 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800453e:	f002 f9d5 	bl	80068ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004542:	2300      	movs	r3, #0
 8004544:	e05c      	b.n	8004600 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004548:	2b00      	cmp	r3, #0
 800454a:	d106      	bne.n	800455a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800454c:	f107 0314 	add.w	r3, r7, #20
 8004550:	4618      	mov	r0, r3
 8004552:	f001 f9c1 	bl	80058d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004556:	2301      	movs	r3, #1
 8004558:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800455a:	f002 f9c7 	bl	80068ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800455e:	f000 ff31 	bl	80053c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004562:	f002 f991 	bl	8006888 <vPortEnterCritical>
 8004566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004568:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800456c:	b25b      	sxtb	r3, r3
 800456e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004572:	d103      	bne.n	800457c <xQueueGenericSend+0x174>
 8004574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004576:	2200      	movs	r2, #0
 8004578:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800457c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004582:	b25b      	sxtb	r3, r3
 8004584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004588:	d103      	bne.n	8004592 <xQueueGenericSend+0x18a>
 800458a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004592:	f002 f9ab 	bl	80068ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004596:	1d3a      	adds	r2, r7, #4
 8004598:	f107 0314 	add.w	r3, r7, #20
 800459c:	4611      	mov	r1, r2
 800459e:	4618      	mov	r0, r3
 80045a0:	f001 f9b0 	bl	8005904 <xTaskCheckForTimeOut>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d124      	bne.n	80045f4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80045aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80045ac:	f000 fc50 	bl	8004e50 <prvIsQueueFull>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d018      	beq.n	80045e8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80045b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b8:	3310      	adds	r3, #16
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	4611      	mov	r1, r2
 80045be:	4618      	mov	r0, r3
 80045c0:	f001 f8d4 	bl	800576c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80045c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80045c6:	f000 fbdb 	bl	8004d80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80045ca:	f000 ff09 	bl	80053e0 <xTaskResumeAll>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f47f af7c 	bne.w	80044ce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80045d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004608 <xQueueGenericSend+0x200>)
 80045d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	f3bf 8f4f 	dsb	sy
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	e772      	b.n	80044ce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80045e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80045ea:	f000 fbc9 	bl	8004d80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045ee:	f000 fef7 	bl	80053e0 <xTaskResumeAll>
 80045f2:	e76c      	b.n	80044ce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80045f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80045f6:	f000 fbc3 	bl	8004d80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045fa:	f000 fef1 	bl	80053e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80045fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004600:	4618      	mov	r0, r3
 8004602:	3738      	adds	r7, #56	@ 0x38
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	e000ed04 	.word	0xe000ed04

0800460c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b090      	sub	sp, #64	@ 0x40
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
 8004618:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800461e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10b      	bne.n	800463c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004636:	bf00      	nop
 8004638:	bf00      	nop
 800463a:	e7fd      	b.n	8004638 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d103      	bne.n	800464a <xQueueGenericSendFromISR+0x3e>
 8004642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <xQueueGenericSendFromISR+0x42>
 800464a:	2301      	movs	r3, #1
 800464c:	e000      	b.n	8004650 <xQueueGenericSendFromISR+0x44>
 800464e:	2300      	movs	r3, #0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10b      	bne.n	800466c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004658:	f383 8811 	msr	BASEPRI, r3
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004666:	bf00      	nop
 8004668:	bf00      	nop
 800466a:	e7fd      	b.n	8004668 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	2b02      	cmp	r3, #2
 8004670:	d103      	bne.n	800467a <xQueueGenericSendFromISR+0x6e>
 8004672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004676:	2b01      	cmp	r3, #1
 8004678:	d101      	bne.n	800467e <xQueueGenericSendFromISR+0x72>
 800467a:	2301      	movs	r3, #1
 800467c:	e000      	b.n	8004680 <xQueueGenericSendFromISR+0x74>
 800467e:	2300      	movs	r3, #0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10b      	bne.n	800469c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	623b      	str	r3, [r7, #32]
}
 8004696:	bf00      	nop
 8004698:	bf00      	nop
 800469a:	e7fd      	b.n	8004698 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800469c:	f002 f9d4 	bl	8006a48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80046a0:	f3ef 8211 	mrs	r2, BASEPRI
 80046a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a8:	f383 8811 	msr	BASEPRI, r3
 80046ac:	f3bf 8f6f 	isb	sy
 80046b0:	f3bf 8f4f 	dsb	sy
 80046b4:	61fa      	str	r2, [r7, #28]
 80046b6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80046b8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80046ba:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d302      	bcc.n	80046ce <xQueueGenericSendFromISR+0xc2>
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d12f      	bne.n	800472e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80046ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80046d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	68b9      	ldr	r1, [r7, #8]
 80046e2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80046e4:	f000 fabc 	bl	8004c60 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80046e8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80046ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f0:	d112      	bne.n	8004718 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d016      	beq.n	8004728 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046fc:	3324      	adds	r3, #36	@ 0x24
 80046fe:	4618      	mov	r0, r3
 8004700:	f001 f886 	bl	8005810 <xTaskRemoveFromEventList>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00e      	beq.n	8004728 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00b      	beq.n	8004728 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	e007      	b.n	8004728 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004718:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800471c:	3301      	adds	r3, #1
 800471e:	b2db      	uxtb	r3, r3
 8004720:	b25a      	sxtb	r2, r3
 8004722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004724:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004728:	2301      	movs	r3, #1
 800472a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800472c:	e001      	b.n	8004732 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800472e:	2300      	movs	r3, #0
 8004730:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004734:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800473c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800473e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004740:	4618      	mov	r0, r3
 8004742:	3740      	adds	r7, #64	@ 0x40
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b08c      	sub	sp, #48	@ 0x30
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004754:	2300      	movs	r3, #0
 8004756:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800475c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10b      	bne.n	800477a <xQueueReceive+0x32>
	__asm volatile
 8004762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004766:	f383 8811 	msr	BASEPRI, r3
 800476a:	f3bf 8f6f 	isb	sy
 800476e:	f3bf 8f4f 	dsb	sy
 8004772:	623b      	str	r3, [r7, #32]
}
 8004774:	bf00      	nop
 8004776:	bf00      	nop
 8004778:	e7fd      	b.n	8004776 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d103      	bne.n	8004788 <xQueueReceive+0x40>
 8004780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <xQueueReceive+0x44>
 8004788:	2301      	movs	r3, #1
 800478a:	e000      	b.n	800478e <xQueueReceive+0x46>
 800478c:	2300      	movs	r3, #0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10b      	bne.n	80047aa <xQueueReceive+0x62>
	__asm volatile
 8004792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004796:	f383 8811 	msr	BASEPRI, r3
 800479a:	f3bf 8f6f 	isb	sy
 800479e:	f3bf 8f4f 	dsb	sy
 80047a2:	61fb      	str	r3, [r7, #28]
}
 80047a4:	bf00      	nop
 80047a6:	bf00      	nop
 80047a8:	e7fd      	b.n	80047a6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047aa:	f001 fa01 	bl	8005bb0 <xTaskGetSchedulerState>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d102      	bne.n	80047ba <xQueueReceive+0x72>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <xQueueReceive+0x76>
 80047ba:	2301      	movs	r3, #1
 80047bc:	e000      	b.n	80047c0 <xQueueReceive+0x78>
 80047be:	2300      	movs	r3, #0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10b      	bne.n	80047dc <xQueueReceive+0x94>
	__asm volatile
 80047c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c8:	f383 8811 	msr	BASEPRI, r3
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	61bb      	str	r3, [r7, #24]
}
 80047d6:	bf00      	nop
 80047d8:	bf00      	nop
 80047da:	e7fd      	b.n	80047d8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80047dc:	f002 f854 	bl	8006888 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80047e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d01f      	beq.n	800482c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80047ec:	68b9      	ldr	r1, [r7, #8]
 80047ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047f0:	f000 faa0 	bl	8004d34 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80047f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f6:	1e5a      	subs	r2, r3, #1
 80047f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047fa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00f      	beq.n	8004824 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004806:	3310      	adds	r3, #16
 8004808:	4618      	mov	r0, r3
 800480a:	f001 f801 	bl	8005810 <xTaskRemoveFromEventList>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d007      	beq.n	8004824 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004814:	4b3c      	ldr	r3, [pc, #240]	@ (8004908 <xQueueReceive+0x1c0>)
 8004816:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004824:	f002 f862 	bl	80068ec <vPortExitCritical>
				return pdPASS;
 8004828:	2301      	movs	r3, #1
 800482a:	e069      	b.n	8004900 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d103      	bne.n	800483a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004832:	f002 f85b 	bl	80068ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004836:	2300      	movs	r3, #0
 8004838:	e062      	b.n	8004900 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800483a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800483c:	2b00      	cmp	r3, #0
 800483e:	d106      	bne.n	800484e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004840:	f107 0310 	add.w	r3, r7, #16
 8004844:	4618      	mov	r0, r3
 8004846:	f001 f847 	bl	80058d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800484a:	2301      	movs	r3, #1
 800484c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800484e:	f002 f84d 	bl	80068ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004852:	f000 fdb7 	bl	80053c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004856:	f002 f817 	bl	8006888 <vPortEnterCritical>
 800485a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800485c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004860:	b25b      	sxtb	r3, r3
 8004862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004866:	d103      	bne.n	8004870 <xQueueReceive+0x128>
 8004868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004872:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004876:	b25b      	sxtb	r3, r3
 8004878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487c:	d103      	bne.n	8004886 <xQueueReceive+0x13e>
 800487e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004886:	f002 f831 	bl	80068ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800488a:	1d3a      	adds	r2, r7, #4
 800488c:	f107 0310 	add.w	r3, r7, #16
 8004890:	4611      	mov	r1, r2
 8004892:	4618      	mov	r0, r3
 8004894:	f001 f836 	bl	8005904 <xTaskCheckForTimeOut>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d123      	bne.n	80048e6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800489e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048a0:	f000 fac0 	bl	8004e24 <prvIsQueueEmpty>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d017      	beq.n	80048da <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80048aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ac:	3324      	adds	r3, #36	@ 0x24
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	4611      	mov	r1, r2
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 ff5a 	bl	800576c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80048b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048ba:	f000 fa61 	bl	8004d80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80048be:	f000 fd8f 	bl	80053e0 <xTaskResumeAll>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d189      	bne.n	80047dc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80048c8:	4b0f      	ldr	r3, [pc, #60]	@ (8004908 <xQueueReceive+0x1c0>)
 80048ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	f3bf 8f4f 	dsb	sy
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	e780      	b.n	80047dc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80048da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048dc:	f000 fa50 	bl	8004d80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048e0:	f000 fd7e 	bl	80053e0 <xTaskResumeAll>
 80048e4:	e77a      	b.n	80047dc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80048e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048e8:	f000 fa4a 	bl	8004d80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048ec:	f000 fd78 	bl	80053e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80048f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048f2:	f000 fa97 	bl	8004e24 <prvIsQueueEmpty>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f43f af6f 	beq.w	80047dc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80048fe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004900:	4618      	mov	r0, r3
 8004902:	3730      	adds	r7, #48	@ 0x30
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	e000ed04 	.word	0xe000ed04

0800490c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b08e      	sub	sp, #56	@ 0x38
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004916:	2300      	movs	r3, #0
 8004918:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800491e:	2300      	movs	r3, #0
 8004920:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10b      	bne.n	8004940 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800492c:	f383 8811 	msr	BASEPRI, r3
 8004930:	f3bf 8f6f 	isb	sy
 8004934:	f3bf 8f4f 	dsb	sy
 8004938:	623b      	str	r3, [r7, #32]
}
 800493a:	bf00      	nop
 800493c:	bf00      	nop
 800493e:	e7fd      	b.n	800493c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00b      	beq.n	8004960 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800494c:	f383 8811 	msr	BASEPRI, r3
 8004950:	f3bf 8f6f 	isb	sy
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	61fb      	str	r3, [r7, #28]
}
 800495a:	bf00      	nop
 800495c:	bf00      	nop
 800495e:	e7fd      	b.n	800495c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004960:	f001 f926 	bl	8005bb0 <xTaskGetSchedulerState>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d102      	bne.n	8004970 <xQueueSemaphoreTake+0x64>
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <xQueueSemaphoreTake+0x68>
 8004970:	2301      	movs	r3, #1
 8004972:	e000      	b.n	8004976 <xQueueSemaphoreTake+0x6a>
 8004974:	2300      	movs	r3, #0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10b      	bne.n	8004992 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800497a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800497e:	f383 8811 	msr	BASEPRI, r3
 8004982:	f3bf 8f6f 	isb	sy
 8004986:	f3bf 8f4f 	dsb	sy
 800498a:	61bb      	str	r3, [r7, #24]
}
 800498c:	bf00      	nop
 800498e:	bf00      	nop
 8004990:	e7fd      	b.n	800498e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004992:	f001 ff79 	bl	8006888 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800499a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800499c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d024      	beq.n	80049ec <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80049a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a4:	1e5a      	subs	r2, r3, #1
 80049a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049a8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80049aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d104      	bne.n	80049bc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80049b2:	f001 fa77 	bl	8005ea4 <pvTaskIncrementMutexHeldCount>
 80049b6:	4602      	mov	r2, r0
 80049b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ba:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00f      	beq.n	80049e4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049c6:	3310      	adds	r3, #16
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 ff21 	bl	8005810 <xTaskRemoveFromEventList>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d007      	beq.n	80049e4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80049d4:	4b54      	ldr	r3, [pc, #336]	@ (8004b28 <xQueueSemaphoreTake+0x21c>)
 80049d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	f3bf 8f4f 	dsb	sy
 80049e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80049e4:	f001 ff82 	bl	80068ec <vPortExitCritical>
				return pdPASS;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e098      	b.n	8004b1e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d112      	bne.n	8004a18 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80049f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00b      	beq.n	8004a10 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80049f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049fc:	f383 8811 	msr	BASEPRI, r3
 8004a00:	f3bf 8f6f 	isb	sy
 8004a04:	f3bf 8f4f 	dsb	sy
 8004a08:	617b      	str	r3, [r7, #20]
}
 8004a0a:	bf00      	nop
 8004a0c:	bf00      	nop
 8004a0e:	e7fd      	b.n	8004a0c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004a10:	f001 ff6c 	bl	80068ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a14:	2300      	movs	r3, #0
 8004a16:	e082      	b.n	8004b1e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d106      	bne.n	8004a2c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a1e:	f107 030c 	add.w	r3, r7, #12
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 ff58 	bl	80058d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a2c:	f001 ff5e 	bl	80068ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a30:	f000 fcc8 	bl	80053c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a34:	f001 ff28 	bl	8006888 <vPortEnterCritical>
 8004a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a3a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a3e:	b25b      	sxtb	r3, r3
 8004a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a44:	d103      	bne.n	8004a4e <xQueueSemaphoreTake+0x142>
 8004a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a54:	b25b      	sxtb	r3, r3
 8004a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5a:	d103      	bne.n	8004a64 <xQueueSemaphoreTake+0x158>
 8004a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a64:	f001 ff42 	bl	80068ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a68:	463a      	mov	r2, r7
 8004a6a:	f107 030c 	add.w	r3, r7, #12
 8004a6e:	4611      	mov	r1, r2
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 ff47 	bl	8005904 <xTaskCheckForTimeOut>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d132      	bne.n	8004ae2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a7c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004a7e:	f000 f9d1 	bl	8004e24 <prvIsQueueEmpty>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d026      	beq.n	8004ad6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d109      	bne.n	8004aa4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004a90:	f001 fefa 	bl	8006888 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f001 f8a7 	bl	8005bec <xTaskPriorityInherit>
 8004a9e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004aa0:	f001 ff24 	bl	80068ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aa6:	3324      	adds	r3, #36	@ 0x24
 8004aa8:	683a      	ldr	r2, [r7, #0]
 8004aaa:	4611      	mov	r1, r2
 8004aac:	4618      	mov	r0, r3
 8004aae:	f000 fe5d 	bl	800576c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ab2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ab4:	f000 f964 	bl	8004d80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ab8:	f000 fc92 	bl	80053e0 <xTaskResumeAll>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f47f af67 	bne.w	8004992 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004ac4:	4b18      	ldr	r3, [pc, #96]	@ (8004b28 <xQueueSemaphoreTake+0x21c>)
 8004ac6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	f3bf 8f4f 	dsb	sy
 8004ad0:	f3bf 8f6f 	isb	sy
 8004ad4:	e75d      	b.n	8004992 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004ad6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ad8:	f000 f952 	bl	8004d80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004adc:	f000 fc80 	bl	80053e0 <xTaskResumeAll>
 8004ae0:	e757      	b.n	8004992 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004ae2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ae4:	f000 f94c 	bl	8004d80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ae8:	f000 fc7a 	bl	80053e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004aec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004aee:	f000 f999 	bl	8004e24 <prvIsQueueEmpty>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f43f af4c 	beq.w	8004992 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00d      	beq.n	8004b1c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004b00:	f001 fec2 	bl	8006888 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004b04:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b06:	f000 f893 	bl	8004c30 <prvGetDisinheritPriorityAfterTimeout>
 8004b0a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b12:	4618      	mov	r0, r3
 8004b14:	f001 f942 	bl	8005d9c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004b18:	f001 fee8 	bl	80068ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3738      	adds	r7, #56	@ 0x38
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	e000ed04 	.word	0xe000ed04

08004b2c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08e      	sub	sp, #56	@ 0x38
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10b      	bne.n	8004b5a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b46:	f383 8811 	msr	BASEPRI, r3
 8004b4a:	f3bf 8f6f 	isb	sy
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	623b      	str	r3, [r7, #32]
}
 8004b54:	bf00      	nop
 8004b56:	bf00      	nop
 8004b58:	e7fd      	b.n	8004b56 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d103      	bne.n	8004b68 <xQueueReceiveFromISR+0x3c>
 8004b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <xQueueReceiveFromISR+0x40>
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e000      	b.n	8004b6e <xQueueReceiveFromISR+0x42>
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10b      	bne.n	8004b8a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b76:	f383 8811 	msr	BASEPRI, r3
 8004b7a:	f3bf 8f6f 	isb	sy
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	61fb      	str	r3, [r7, #28]
}
 8004b84:	bf00      	nop
 8004b86:	bf00      	nop
 8004b88:	e7fd      	b.n	8004b86 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b8a:	f001 ff5d 	bl	8006a48 <vPortValidateInterruptPriority>
	__asm volatile
 8004b8e:	f3ef 8211 	mrs	r2, BASEPRI
 8004b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b96:	f383 8811 	msr	BASEPRI, r3
 8004b9a:	f3bf 8f6f 	isb	sy
 8004b9e:	f3bf 8f4f 	dsb	sy
 8004ba2:	61ba      	str	r2, [r7, #24]
 8004ba4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004ba6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bae:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d02f      	beq.n	8004c16 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004bbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004bc0:	68b9      	ldr	r1, [r7, #8]
 8004bc2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004bc4:	f000 f8b6 	bl	8004d34 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bca:	1e5a      	subs	r2, r3, #1
 8004bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bce:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004bd0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd8:	d112      	bne.n	8004c00 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d016      	beq.n	8004c10 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be4:	3310      	adds	r3, #16
 8004be6:	4618      	mov	r0, r3
 8004be8:	f000 fe12 	bl	8005810 <xTaskRemoveFromEventList>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00e      	beq.n	8004c10 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00b      	beq.n	8004c10 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	e007      	b.n	8004c10 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004c00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c04:	3301      	adds	r3, #1
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	b25a      	sxtb	r2, r3
 8004c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004c10:	2301      	movs	r3, #1
 8004c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c14:	e001      	b.n	8004c1a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8004c16:	2300      	movs	r3, #0
 8004c18:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c1c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	f383 8811 	msr	BASEPRI, r3
}
 8004c24:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3738      	adds	r7, #56	@ 0x38
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d006      	beq.n	8004c4e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8004c4a:	60fb      	str	r3, [r7, #12]
 8004c4c:	e001      	b.n	8004c52 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004c52:	68fb      	ldr	r3, [r7, #12]
	}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10d      	bne.n	8004c9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d14d      	bne.n	8004d22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f001 f816 	bl	8005cbc <xTaskPriorityDisinherit>
 8004c90:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	609a      	str	r2, [r3, #8]
 8004c98:	e043      	b.n	8004d22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d119      	bne.n	8004cd4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6858      	ldr	r0, [r3, #4]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca8:	461a      	mov	r2, r3
 8004caa:	68b9      	ldr	r1, [r7, #8]
 8004cac:	f002 f950 	bl	8006f50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb8:	441a      	add	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	685a      	ldr	r2, [r3, #4]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d32b      	bcc.n	8004d22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	605a      	str	r2, [r3, #4]
 8004cd2:	e026      	b.n	8004d22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	68d8      	ldr	r0, [r3, #12]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cdc:	461a      	mov	r2, r3
 8004cde:	68b9      	ldr	r1, [r7, #8]
 8004ce0:	f002 f936 	bl	8006f50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	68da      	ldr	r2, [r3, #12]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cec:	425b      	negs	r3, r3
 8004cee:	441a      	add	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	68da      	ldr	r2, [r3, #12]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d207      	bcs.n	8004d10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	689a      	ldr	r2, [r3, #8]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d08:	425b      	negs	r3, r3
 8004d0a:	441a      	add	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d105      	bne.n	8004d22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d002      	beq.n	8004d22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1c5a      	adds	r2, r3, #1
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004d2a:	697b      	ldr	r3, [r7, #20]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3718      	adds	r7, #24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d018      	beq.n	8004d78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68da      	ldr	r2, [r3, #12]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4e:	441a      	add	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68da      	ldr	r2, [r3, #12]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d303      	bcc.n	8004d68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68d9      	ldr	r1, [r3, #12]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d70:	461a      	mov	r2, r3
 8004d72:	6838      	ldr	r0, [r7, #0]
 8004d74:	f002 f8ec 	bl	8006f50 <memcpy>
	}
}
 8004d78:	bf00      	nop
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004d88:	f001 fd7e 	bl	8006888 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d94:	e011      	b.n	8004dba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d012      	beq.n	8004dc4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	3324      	adds	r3, #36	@ 0x24
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 fd34 	bl	8005810 <xTaskRemoveFromEventList>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004dae:	f000 fe0d 	bl	80059cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004db2:	7bfb      	ldrb	r3, [r7, #15]
 8004db4:	3b01      	subs	r3, #1
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	dce9      	bgt.n	8004d96 <prvUnlockQueue+0x16>
 8004dc2:	e000      	b.n	8004dc6 <prvUnlockQueue+0x46>
					break;
 8004dc4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	22ff      	movs	r2, #255	@ 0xff
 8004dca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004dce:	f001 fd8d 	bl	80068ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004dd2:	f001 fd59 	bl	8006888 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ddc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004dde:	e011      	b.n	8004e04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d012      	beq.n	8004e0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3310      	adds	r3, #16
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 fd0f 	bl	8005810 <xTaskRemoveFromEventList>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d001      	beq.n	8004dfc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004df8:	f000 fde8 	bl	80059cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004dfc:	7bbb      	ldrb	r3, [r7, #14]
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	dce9      	bgt.n	8004de0 <prvUnlockQueue+0x60>
 8004e0c:	e000      	b.n	8004e10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004e0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	22ff      	movs	r2, #255	@ 0xff
 8004e14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004e18:	f001 fd68 	bl	80068ec <vPortExitCritical>
}
 8004e1c:	bf00      	nop
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e2c:	f001 fd2c 	bl	8006888 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d102      	bne.n	8004e3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	e001      	b.n	8004e42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e42:	f001 fd53 	bl	80068ec <vPortExitCritical>

	return xReturn;
 8004e46:	68fb      	ldr	r3, [r7, #12]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e58:	f001 fd16 	bl	8006888 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d102      	bne.n	8004e6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	e001      	b.n	8004e72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e72:	f001 fd3b 	bl	80068ec <vPortExitCritical>

	return xReturn;
 8004e76:	68fb      	ldr	r3, [r7, #12]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60fb      	str	r3, [r7, #12]
 8004e8e:	e014      	b.n	8004eba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004e90:	4a0f      	ldr	r2, [pc, #60]	@ (8004ed0 <vQueueAddToRegistry+0x50>)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10b      	bne.n	8004eb4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004e9c:	490c      	ldr	r1, [pc, #48]	@ (8004ed0 <vQueueAddToRegistry+0x50>)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8004ed0 <vQueueAddToRegistry+0x50>)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	4413      	add	r3, r2
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004eb2:	e006      	b.n	8004ec2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	60fb      	str	r3, [r7, #12]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2b07      	cmp	r3, #7
 8004ebe:	d9e7      	bls.n	8004e90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004ec0:	bf00      	nop
 8004ec2:	bf00      	nop
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	20000c90 	.word	0x20000c90

08004ed4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004ee4:	f001 fcd0 	bl	8006888 <vPortEnterCritical>
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004eee:	b25b      	sxtb	r3, r3
 8004ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef4:	d103      	bne.n	8004efe <vQueueWaitForMessageRestricted+0x2a>
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f04:	b25b      	sxtb	r3, r3
 8004f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0a:	d103      	bne.n	8004f14 <vQueueWaitForMessageRestricted+0x40>
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f14:	f001 fcea 	bl	80068ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d106      	bne.n	8004f2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	3324      	adds	r3, #36	@ 0x24
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	68b9      	ldr	r1, [r7, #8]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f000 fc45 	bl	80057b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004f2e:	6978      	ldr	r0, [r7, #20]
 8004f30:	f7ff ff26 	bl	8004d80 <prvUnlockQueue>
	}
 8004f34:	bf00      	nop
 8004f36:	3718      	adds	r7, #24
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b08e      	sub	sp, #56	@ 0x38
 8004f40:	af04      	add	r7, sp, #16
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
 8004f48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10b      	bne.n	8004f68 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	623b      	str	r3, [r7, #32]
}
 8004f62:	bf00      	nop
 8004f64:	bf00      	nop
 8004f66:	e7fd      	b.n	8004f64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10b      	bne.n	8004f86 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f72:	f383 8811 	msr	BASEPRI, r3
 8004f76:	f3bf 8f6f 	isb	sy
 8004f7a:	f3bf 8f4f 	dsb	sy
 8004f7e:	61fb      	str	r3, [r7, #28]
}
 8004f80:	bf00      	nop
 8004f82:	bf00      	nop
 8004f84:	e7fd      	b.n	8004f82 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f86:	235c      	movs	r3, #92	@ 0x5c
 8004f88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	2b5c      	cmp	r3, #92	@ 0x5c
 8004f8e:	d00b      	beq.n	8004fa8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f94:	f383 8811 	msr	BASEPRI, r3
 8004f98:	f3bf 8f6f 	isb	sy
 8004f9c:	f3bf 8f4f 	dsb	sy
 8004fa0:	61bb      	str	r3, [r7, #24]
}
 8004fa2:	bf00      	nop
 8004fa4:	bf00      	nop
 8004fa6:	e7fd      	b.n	8004fa4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004fa8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d01e      	beq.n	8004fee <xTaskCreateStatic+0xb2>
 8004fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d01b      	beq.n	8004fee <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fb8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004fbe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004fc8:	2300      	movs	r3, #0
 8004fca:	9303      	str	r3, [sp, #12]
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fce:	9302      	str	r3, [sp, #8]
 8004fd0:	f107 0314 	add.w	r3, r7, #20
 8004fd4:	9301      	str	r3, [sp, #4]
 8004fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd8:	9300      	str	r3, [sp, #0]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	68b9      	ldr	r1, [r7, #8]
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f000 f850 	bl	8005086 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004fe6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004fe8:	f000 f8de 	bl	80051a8 <prvAddNewTaskToReadyList>
 8004fec:	e001      	b.n	8004ff2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ff2:	697b      	ldr	r3, [r7, #20]
	}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3728      	adds	r7, #40	@ 0x28
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b08c      	sub	sp, #48	@ 0x30
 8005000:	af04      	add	r7, sp, #16
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	603b      	str	r3, [r7, #0]
 8005008:	4613      	mov	r3, r2
 800500a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800500c:	88fb      	ldrh	r3, [r7, #6]
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4618      	mov	r0, r3
 8005012:	f001 fd5b 	bl	8006acc <pvPortMalloc>
 8005016:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00e      	beq.n	800503c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800501e:	205c      	movs	r0, #92	@ 0x5c
 8005020:	f001 fd54 	bl	8006acc <pvPortMalloc>
 8005024:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d003      	beq.n	8005034 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	631a      	str	r2, [r3, #48]	@ 0x30
 8005032:	e005      	b.n	8005040 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005034:	6978      	ldr	r0, [r7, #20]
 8005036:	f001 fe17 	bl	8006c68 <vPortFree>
 800503a:	e001      	b.n	8005040 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800503c:	2300      	movs	r3, #0
 800503e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d017      	beq.n	8005076 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800504e:	88fa      	ldrh	r2, [r7, #6]
 8005050:	2300      	movs	r3, #0
 8005052:	9303      	str	r3, [sp, #12]
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	9302      	str	r3, [sp, #8]
 8005058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800505a:	9301      	str	r3, [sp, #4]
 800505c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	68b9      	ldr	r1, [r7, #8]
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f000 f80e 	bl	8005086 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800506a:	69f8      	ldr	r0, [r7, #28]
 800506c:	f000 f89c 	bl	80051a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005070:	2301      	movs	r3, #1
 8005072:	61bb      	str	r3, [r7, #24]
 8005074:	e002      	b.n	800507c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005076:	f04f 33ff 	mov.w	r3, #4294967295
 800507a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800507c:	69bb      	ldr	r3, [r7, #24]
	}
 800507e:	4618      	mov	r0, r3
 8005080:	3720      	adds	r7, #32
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b088      	sub	sp, #32
 800508a:	af00      	add	r7, sp, #0
 800508c:	60f8      	str	r0, [r7, #12]
 800508e:	60b9      	str	r1, [r7, #8]
 8005090:	607a      	str	r2, [r7, #4]
 8005092:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005096:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	461a      	mov	r2, r3
 800509e:	21a5      	movs	r1, #165	@ 0xa5
 80050a0:	f001 ff22 	bl	8006ee8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80050a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80050ae:	3b01      	subs	r3, #1
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	f023 0307 	bic.w	r3, r3, #7
 80050bc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	f003 0307 	and.w	r3, r3, #7
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00b      	beq.n	80050e0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80050c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050cc:	f383 8811 	msr	BASEPRI, r3
 80050d0:	f3bf 8f6f 	isb	sy
 80050d4:	f3bf 8f4f 	dsb	sy
 80050d8:	617b      	str	r3, [r7, #20]
}
 80050da:	bf00      	nop
 80050dc:	bf00      	nop
 80050de:	e7fd      	b.n	80050dc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d01f      	beq.n	8005126 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050e6:	2300      	movs	r3, #0
 80050e8:	61fb      	str	r3, [r7, #28]
 80050ea:	e012      	b.n	8005112 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	4413      	add	r3, r2
 80050f2:	7819      	ldrb	r1, [r3, #0]
 80050f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	4413      	add	r3, r2
 80050fa:	3334      	adds	r3, #52	@ 0x34
 80050fc:	460a      	mov	r2, r1
 80050fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	4413      	add	r3, r2
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d006      	beq.n	800511a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	3301      	adds	r3, #1
 8005110:	61fb      	str	r3, [r7, #28]
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	2b0f      	cmp	r3, #15
 8005116:	d9e9      	bls.n	80050ec <prvInitialiseNewTask+0x66>
 8005118:	e000      	b.n	800511c <prvInitialiseNewTask+0x96>
			{
				break;
 800511a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800511c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800511e:	2200      	movs	r2, #0
 8005120:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005124:	e003      	b.n	800512e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800512e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005130:	2b37      	cmp	r3, #55	@ 0x37
 8005132:	d901      	bls.n	8005138 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005134:	2337      	movs	r3, #55	@ 0x37
 8005136:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800513a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800513c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800513e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005140:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005142:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005146:	2200      	movs	r2, #0
 8005148:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800514a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800514c:	3304      	adds	r3, #4
 800514e:	4618      	mov	r0, r3
 8005150:	f7fe fec8 	bl	8003ee4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005156:	3318      	adds	r3, #24
 8005158:	4618      	mov	r0, r3
 800515a:	f7fe fec3 	bl	8003ee4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800515e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005160:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005162:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005166:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800516a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800516c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800516e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005170:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005172:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005176:	2200      	movs	r2, #0
 8005178:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800517a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800517c:	2200      	movs	r2, #0
 800517e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	68f9      	ldr	r1, [r7, #12]
 8005186:	69b8      	ldr	r0, [r7, #24]
 8005188:	f001 fa4e 	bl	8006628 <pxPortInitialiseStack>
 800518c:	4602      	mov	r2, r0
 800518e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005190:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005194:	2b00      	cmp	r3, #0
 8005196:	d002      	beq.n	800519e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800519a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800519c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800519e:	bf00      	nop
 80051a0:	3720      	adds	r7, #32
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
	...

080051a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80051b0:	f001 fb6a 	bl	8006888 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80051b4:	4b2d      	ldr	r3, [pc, #180]	@ (800526c <prvAddNewTaskToReadyList+0xc4>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	3301      	adds	r3, #1
 80051ba:	4a2c      	ldr	r2, [pc, #176]	@ (800526c <prvAddNewTaskToReadyList+0xc4>)
 80051bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80051be:	4b2c      	ldr	r3, [pc, #176]	@ (8005270 <prvAddNewTaskToReadyList+0xc8>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d109      	bne.n	80051da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80051c6:	4a2a      	ldr	r2, [pc, #168]	@ (8005270 <prvAddNewTaskToReadyList+0xc8>)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80051cc:	4b27      	ldr	r3, [pc, #156]	@ (800526c <prvAddNewTaskToReadyList+0xc4>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d110      	bne.n	80051f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80051d4:	f000 fc1e 	bl	8005a14 <prvInitialiseTaskLists>
 80051d8:	e00d      	b.n	80051f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80051da:	4b26      	ldr	r3, [pc, #152]	@ (8005274 <prvAddNewTaskToReadyList+0xcc>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d109      	bne.n	80051f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80051e2:	4b23      	ldr	r3, [pc, #140]	@ (8005270 <prvAddNewTaskToReadyList+0xc8>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d802      	bhi.n	80051f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80051f0:	4a1f      	ldr	r2, [pc, #124]	@ (8005270 <prvAddNewTaskToReadyList+0xc8>)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80051f6:	4b20      	ldr	r3, [pc, #128]	@ (8005278 <prvAddNewTaskToReadyList+0xd0>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	3301      	adds	r3, #1
 80051fc:	4a1e      	ldr	r2, [pc, #120]	@ (8005278 <prvAddNewTaskToReadyList+0xd0>)
 80051fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005200:	4b1d      	ldr	r3, [pc, #116]	@ (8005278 <prvAddNewTaskToReadyList+0xd0>)
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800520c:	4b1b      	ldr	r3, [pc, #108]	@ (800527c <prvAddNewTaskToReadyList+0xd4>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	429a      	cmp	r2, r3
 8005212:	d903      	bls.n	800521c <prvAddNewTaskToReadyList+0x74>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005218:	4a18      	ldr	r2, [pc, #96]	@ (800527c <prvAddNewTaskToReadyList+0xd4>)
 800521a:	6013      	str	r3, [r2, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005220:	4613      	mov	r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4413      	add	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	4a15      	ldr	r2, [pc, #84]	@ (8005280 <prvAddNewTaskToReadyList+0xd8>)
 800522a:	441a      	add	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	3304      	adds	r3, #4
 8005230:	4619      	mov	r1, r3
 8005232:	4610      	mov	r0, r2
 8005234:	f7fe fe63 	bl	8003efe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005238:	f001 fb58 	bl	80068ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800523c:	4b0d      	ldr	r3, [pc, #52]	@ (8005274 <prvAddNewTaskToReadyList+0xcc>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00e      	beq.n	8005262 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005244:	4b0a      	ldr	r3, [pc, #40]	@ (8005270 <prvAddNewTaskToReadyList+0xc8>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800524e:	429a      	cmp	r2, r3
 8005250:	d207      	bcs.n	8005262 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005252:	4b0c      	ldr	r3, [pc, #48]	@ (8005284 <prvAddNewTaskToReadyList+0xdc>)
 8005254:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005258:	601a      	str	r2, [r3, #0]
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005262:	bf00      	nop
 8005264:	3708      	adds	r7, #8
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	200011a4 	.word	0x200011a4
 8005270:	20000cd0 	.word	0x20000cd0
 8005274:	200011b0 	.word	0x200011b0
 8005278:	200011c0 	.word	0x200011c0
 800527c:	200011ac 	.word	0x200011ac
 8005280:	20000cd4 	.word	0x20000cd4
 8005284:	e000ed04 	.word	0xe000ed04

08005288 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005290:	2300      	movs	r3, #0
 8005292:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d018      	beq.n	80052cc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800529a:	4b14      	ldr	r3, [pc, #80]	@ (80052ec <vTaskDelay+0x64>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00b      	beq.n	80052ba <vTaskDelay+0x32>
	__asm volatile
 80052a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a6:	f383 8811 	msr	BASEPRI, r3
 80052aa:	f3bf 8f6f 	isb	sy
 80052ae:	f3bf 8f4f 	dsb	sy
 80052b2:	60bb      	str	r3, [r7, #8]
}
 80052b4:	bf00      	nop
 80052b6:	bf00      	nop
 80052b8:	e7fd      	b.n	80052b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80052ba:	f000 f883 	bl	80053c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80052be:	2100      	movs	r1, #0
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 fe03 	bl	8005ecc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80052c6:	f000 f88b 	bl	80053e0 <xTaskResumeAll>
 80052ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d107      	bne.n	80052e2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80052d2:	4b07      	ldr	r3, [pc, #28]	@ (80052f0 <vTaskDelay+0x68>)
 80052d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	f3bf 8f4f 	dsb	sy
 80052de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80052e2:	bf00      	nop
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	200011cc 	.word	0x200011cc
 80052f0:	e000ed04 	.word	0xe000ed04

080052f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b08a      	sub	sp, #40	@ 0x28
 80052f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80052fa:	2300      	movs	r3, #0
 80052fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80052fe:	2300      	movs	r3, #0
 8005300:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005302:	463a      	mov	r2, r7
 8005304:	1d39      	adds	r1, r7, #4
 8005306:	f107 0308 	add.w	r3, r7, #8
 800530a:	4618      	mov	r0, r3
 800530c:	f7fe fd96 	bl	8003e3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005310:	6839      	ldr	r1, [r7, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68ba      	ldr	r2, [r7, #8]
 8005316:	9202      	str	r2, [sp, #8]
 8005318:	9301      	str	r3, [sp, #4]
 800531a:	2300      	movs	r3, #0
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	2300      	movs	r3, #0
 8005320:	460a      	mov	r2, r1
 8005322:	4922      	ldr	r1, [pc, #136]	@ (80053ac <vTaskStartScheduler+0xb8>)
 8005324:	4822      	ldr	r0, [pc, #136]	@ (80053b0 <vTaskStartScheduler+0xbc>)
 8005326:	f7ff fe09 	bl	8004f3c <xTaskCreateStatic>
 800532a:	4603      	mov	r3, r0
 800532c:	4a21      	ldr	r2, [pc, #132]	@ (80053b4 <vTaskStartScheduler+0xc0>)
 800532e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005330:	4b20      	ldr	r3, [pc, #128]	@ (80053b4 <vTaskStartScheduler+0xc0>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d002      	beq.n	800533e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005338:	2301      	movs	r3, #1
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	e001      	b.n	8005342 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800533e:	2300      	movs	r3, #0
 8005340:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d102      	bne.n	800534e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005348:	f000 fe14 	bl	8005f74 <xTimerCreateTimerTask>
 800534c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d116      	bne.n	8005382 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005358:	f383 8811 	msr	BASEPRI, r3
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	613b      	str	r3, [r7, #16]
}
 8005366:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005368:	4b13      	ldr	r3, [pc, #76]	@ (80053b8 <vTaskStartScheduler+0xc4>)
 800536a:	f04f 32ff 	mov.w	r2, #4294967295
 800536e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005370:	4b12      	ldr	r3, [pc, #72]	@ (80053bc <vTaskStartScheduler+0xc8>)
 8005372:	2201      	movs	r2, #1
 8005374:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005376:	4b12      	ldr	r3, [pc, #72]	@ (80053c0 <vTaskStartScheduler+0xcc>)
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800537c:	f001 f9e0 	bl	8006740 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005380:	e00f      	b.n	80053a2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005388:	d10b      	bne.n	80053a2 <vTaskStartScheduler+0xae>
	__asm volatile
 800538a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800538e:	f383 8811 	msr	BASEPRI, r3
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	60fb      	str	r3, [r7, #12]
}
 800539c:	bf00      	nop
 800539e:	bf00      	nop
 80053a0:	e7fd      	b.n	800539e <vTaskStartScheduler+0xaa>
}
 80053a2:	bf00      	nop
 80053a4:	3718      	adds	r7, #24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	080078b8 	.word	0x080078b8
 80053b0:	080059e5 	.word	0x080059e5
 80053b4:	200011c8 	.word	0x200011c8
 80053b8:	200011c4 	.word	0x200011c4
 80053bc:	200011b0 	.word	0x200011b0
 80053c0:	200011a8 	.word	0x200011a8

080053c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80053c4:	b480      	push	{r7}
 80053c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80053c8:	4b04      	ldr	r3, [pc, #16]	@ (80053dc <vTaskSuspendAll+0x18>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	3301      	adds	r3, #1
 80053ce:	4a03      	ldr	r2, [pc, #12]	@ (80053dc <vTaskSuspendAll+0x18>)
 80053d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80053d2:	bf00      	nop
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	200011cc 	.word	0x200011cc

080053e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80053e6:	2300      	movs	r3, #0
 80053e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80053ea:	2300      	movs	r3, #0
 80053ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80053ee:	4b42      	ldr	r3, [pc, #264]	@ (80054f8 <xTaskResumeAll+0x118>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d10b      	bne.n	800540e <xTaskResumeAll+0x2e>
	__asm volatile
 80053f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053fa:	f383 8811 	msr	BASEPRI, r3
 80053fe:	f3bf 8f6f 	isb	sy
 8005402:	f3bf 8f4f 	dsb	sy
 8005406:	603b      	str	r3, [r7, #0]
}
 8005408:	bf00      	nop
 800540a:	bf00      	nop
 800540c:	e7fd      	b.n	800540a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800540e:	f001 fa3b 	bl	8006888 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005412:	4b39      	ldr	r3, [pc, #228]	@ (80054f8 <xTaskResumeAll+0x118>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	3b01      	subs	r3, #1
 8005418:	4a37      	ldr	r2, [pc, #220]	@ (80054f8 <xTaskResumeAll+0x118>)
 800541a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800541c:	4b36      	ldr	r3, [pc, #216]	@ (80054f8 <xTaskResumeAll+0x118>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d162      	bne.n	80054ea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005424:	4b35      	ldr	r3, [pc, #212]	@ (80054fc <xTaskResumeAll+0x11c>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d05e      	beq.n	80054ea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800542c:	e02f      	b.n	800548e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800542e:	4b34      	ldr	r3, [pc, #208]	@ (8005500 <xTaskResumeAll+0x120>)
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	3318      	adds	r3, #24
 800543a:	4618      	mov	r0, r3
 800543c:	f7fe fdbc 	bl	8003fb8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	3304      	adds	r3, #4
 8005444:	4618      	mov	r0, r3
 8005446:	f7fe fdb7 	bl	8003fb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800544e:	4b2d      	ldr	r3, [pc, #180]	@ (8005504 <xTaskResumeAll+0x124>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	429a      	cmp	r2, r3
 8005454:	d903      	bls.n	800545e <xTaskResumeAll+0x7e>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545a:	4a2a      	ldr	r2, [pc, #168]	@ (8005504 <xTaskResumeAll+0x124>)
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005462:	4613      	mov	r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4413      	add	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	4a27      	ldr	r2, [pc, #156]	@ (8005508 <xTaskResumeAll+0x128>)
 800546c:	441a      	add	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	3304      	adds	r3, #4
 8005472:	4619      	mov	r1, r3
 8005474:	4610      	mov	r0, r2
 8005476:	f7fe fd42 	bl	8003efe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800547e:	4b23      	ldr	r3, [pc, #140]	@ (800550c <xTaskResumeAll+0x12c>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005484:	429a      	cmp	r2, r3
 8005486:	d302      	bcc.n	800548e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005488:	4b21      	ldr	r3, [pc, #132]	@ (8005510 <xTaskResumeAll+0x130>)
 800548a:	2201      	movs	r2, #1
 800548c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800548e:	4b1c      	ldr	r3, [pc, #112]	@ (8005500 <xTaskResumeAll+0x120>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1cb      	bne.n	800542e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d001      	beq.n	80054a0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800549c:	f000 fb58 	bl	8005b50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80054a0:	4b1c      	ldr	r3, [pc, #112]	@ (8005514 <xTaskResumeAll+0x134>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d010      	beq.n	80054ce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80054ac:	f000 f846 	bl	800553c <xTaskIncrementTick>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d002      	beq.n	80054bc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80054b6:	4b16      	ldr	r3, [pc, #88]	@ (8005510 <xTaskResumeAll+0x130>)
 80054b8:	2201      	movs	r2, #1
 80054ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3b01      	subs	r3, #1
 80054c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1f1      	bne.n	80054ac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80054c8:	4b12      	ldr	r3, [pc, #72]	@ (8005514 <xTaskResumeAll+0x134>)
 80054ca:	2200      	movs	r2, #0
 80054cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80054ce:	4b10      	ldr	r3, [pc, #64]	@ (8005510 <xTaskResumeAll+0x130>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d009      	beq.n	80054ea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80054d6:	2301      	movs	r3, #1
 80054d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80054da:	4b0f      	ldr	r3, [pc, #60]	@ (8005518 <xTaskResumeAll+0x138>)
 80054dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054e0:	601a      	str	r2, [r3, #0]
 80054e2:	f3bf 8f4f 	dsb	sy
 80054e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80054ea:	f001 f9ff 	bl	80068ec <vPortExitCritical>

	return xAlreadyYielded;
 80054ee:	68bb      	ldr	r3, [r7, #8]
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	200011cc 	.word	0x200011cc
 80054fc:	200011a4 	.word	0x200011a4
 8005500:	20001164 	.word	0x20001164
 8005504:	200011ac 	.word	0x200011ac
 8005508:	20000cd4 	.word	0x20000cd4
 800550c:	20000cd0 	.word	0x20000cd0
 8005510:	200011b8 	.word	0x200011b8
 8005514:	200011b4 	.word	0x200011b4
 8005518:	e000ed04 	.word	0xe000ed04

0800551c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005522:	4b05      	ldr	r3, [pc, #20]	@ (8005538 <xTaskGetTickCount+0x1c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005528:	687b      	ldr	r3, [r7, #4]
}
 800552a:	4618      	mov	r0, r3
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	200011a8 	.word	0x200011a8

0800553c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005542:	2300      	movs	r3, #0
 8005544:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005546:	4b4f      	ldr	r3, [pc, #316]	@ (8005684 <xTaskIncrementTick+0x148>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	f040 8090 	bne.w	8005670 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005550:	4b4d      	ldr	r3, [pc, #308]	@ (8005688 <xTaskIncrementTick+0x14c>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	3301      	adds	r3, #1
 8005556:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005558:	4a4b      	ldr	r2, [pc, #300]	@ (8005688 <xTaskIncrementTick+0x14c>)
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d121      	bne.n	80055a8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005564:	4b49      	ldr	r3, [pc, #292]	@ (800568c <xTaskIncrementTick+0x150>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00b      	beq.n	8005586 <xTaskIncrementTick+0x4a>
	__asm volatile
 800556e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005572:	f383 8811 	msr	BASEPRI, r3
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	603b      	str	r3, [r7, #0]
}
 8005580:	bf00      	nop
 8005582:	bf00      	nop
 8005584:	e7fd      	b.n	8005582 <xTaskIncrementTick+0x46>
 8005586:	4b41      	ldr	r3, [pc, #260]	@ (800568c <xTaskIncrementTick+0x150>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	4b40      	ldr	r3, [pc, #256]	@ (8005690 <xTaskIncrementTick+0x154>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a3e      	ldr	r2, [pc, #248]	@ (800568c <xTaskIncrementTick+0x150>)
 8005592:	6013      	str	r3, [r2, #0]
 8005594:	4a3e      	ldr	r2, [pc, #248]	@ (8005690 <xTaskIncrementTick+0x154>)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6013      	str	r3, [r2, #0]
 800559a:	4b3e      	ldr	r3, [pc, #248]	@ (8005694 <xTaskIncrementTick+0x158>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	3301      	adds	r3, #1
 80055a0:	4a3c      	ldr	r2, [pc, #240]	@ (8005694 <xTaskIncrementTick+0x158>)
 80055a2:	6013      	str	r3, [r2, #0]
 80055a4:	f000 fad4 	bl	8005b50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80055a8:	4b3b      	ldr	r3, [pc, #236]	@ (8005698 <xTaskIncrementTick+0x15c>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d349      	bcc.n	8005646 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055b2:	4b36      	ldr	r3, [pc, #216]	@ (800568c <xTaskIncrementTick+0x150>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d104      	bne.n	80055c6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055bc:	4b36      	ldr	r3, [pc, #216]	@ (8005698 <xTaskIncrementTick+0x15c>)
 80055be:	f04f 32ff 	mov.w	r2, #4294967295
 80055c2:	601a      	str	r2, [r3, #0]
					break;
 80055c4:	e03f      	b.n	8005646 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055c6:	4b31      	ldr	r3, [pc, #196]	@ (800568c <xTaskIncrementTick+0x150>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d203      	bcs.n	80055e6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80055de:	4a2e      	ldr	r2, [pc, #184]	@ (8005698 <xTaskIncrementTick+0x15c>)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80055e4:	e02f      	b.n	8005646 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	3304      	adds	r3, #4
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fe fce4 	bl	8003fb8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d004      	beq.n	8005602 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	3318      	adds	r3, #24
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7fe fcdb 	bl	8003fb8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005606:	4b25      	ldr	r3, [pc, #148]	@ (800569c <xTaskIncrementTick+0x160>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	429a      	cmp	r2, r3
 800560c:	d903      	bls.n	8005616 <xTaskIncrementTick+0xda>
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005612:	4a22      	ldr	r2, [pc, #136]	@ (800569c <xTaskIncrementTick+0x160>)
 8005614:	6013      	str	r3, [r2, #0]
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800561a:	4613      	mov	r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4413      	add	r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	4a1f      	ldr	r2, [pc, #124]	@ (80056a0 <xTaskIncrementTick+0x164>)
 8005624:	441a      	add	r2, r3
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	3304      	adds	r3, #4
 800562a:	4619      	mov	r1, r3
 800562c:	4610      	mov	r0, r2
 800562e:	f7fe fc66 	bl	8003efe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005636:	4b1b      	ldr	r3, [pc, #108]	@ (80056a4 <xTaskIncrementTick+0x168>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800563c:	429a      	cmp	r2, r3
 800563e:	d3b8      	bcc.n	80055b2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005640:	2301      	movs	r3, #1
 8005642:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005644:	e7b5      	b.n	80055b2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005646:	4b17      	ldr	r3, [pc, #92]	@ (80056a4 <xTaskIncrementTick+0x168>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800564c:	4914      	ldr	r1, [pc, #80]	@ (80056a0 <xTaskIncrementTick+0x164>)
 800564e:	4613      	mov	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4413      	add	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	440b      	add	r3, r1
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d901      	bls.n	8005662 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800565e:	2301      	movs	r3, #1
 8005660:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005662:	4b11      	ldr	r3, [pc, #68]	@ (80056a8 <xTaskIncrementTick+0x16c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d007      	beq.n	800567a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800566a:	2301      	movs	r3, #1
 800566c:	617b      	str	r3, [r7, #20]
 800566e:	e004      	b.n	800567a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005670:	4b0e      	ldr	r3, [pc, #56]	@ (80056ac <xTaskIncrementTick+0x170>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	3301      	adds	r3, #1
 8005676:	4a0d      	ldr	r2, [pc, #52]	@ (80056ac <xTaskIncrementTick+0x170>)
 8005678:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800567a:	697b      	ldr	r3, [r7, #20]
}
 800567c:	4618      	mov	r0, r3
 800567e:	3718      	adds	r7, #24
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	200011cc 	.word	0x200011cc
 8005688:	200011a8 	.word	0x200011a8
 800568c:	2000115c 	.word	0x2000115c
 8005690:	20001160 	.word	0x20001160
 8005694:	200011bc 	.word	0x200011bc
 8005698:	200011c4 	.word	0x200011c4
 800569c:	200011ac 	.word	0x200011ac
 80056a0:	20000cd4 	.word	0x20000cd4
 80056a4:	20000cd0 	.word	0x20000cd0
 80056a8:	200011b8 	.word	0x200011b8
 80056ac:	200011b4 	.word	0x200011b4

080056b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80056b6:	4b28      	ldr	r3, [pc, #160]	@ (8005758 <vTaskSwitchContext+0xa8>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d003      	beq.n	80056c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80056be:	4b27      	ldr	r3, [pc, #156]	@ (800575c <vTaskSwitchContext+0xac>)
 80056c0:	2201      	movs	r2, #1
 80056c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80056c4:	e042      	b.n	800574c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80056c6:	4b25      	ldr	r3, [pc, #148]	@ (800575c <vTaskSwitchContext+0xac>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056cc:	4b24      	ldr	r3, [pc, #144]	@ (8005760 <vTaskSwitchContext+0xb0>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	60fb      	str	r3, [r7, #12]
 80056d2:	e011      	b.n	80056f8 <vTaskSwitchContext+0x48>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10b      	bne.n	80056f2 <vTaskSwitchContext+0x42>
	__asm volatile
 80056da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056de:	f383 8811 	msr	BASEPRI, r3
 80056e2:	f3bf 8f6f 	isb	sy
 80056e6:	f3bf 8f4f 	dsb	sy
 80056ea:	607b      	str	r3, [r7, #4]
}
 80056ec:	bf00      	nop
 80056ee:	bf00      	nop
 80056f0:	e7fd      	b.n	80056ee <vTaskSwitchContext+0x3e>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	3b01      	subs	r3, #1
 80056f6:	60fb      	str	r3, [r7, #12]
 80056f8:	491a      	ldr	r1, [pc, #104]	@ (8005764 <vTaskSwitchContext+0xb4>)
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	4613      	mov	r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4413      	add	r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	440b      	add	r3, r1
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d0e3      	beq.n	80056d4 <vTaskSwitchContext+0x24>
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	4613      	mov	r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4413      	add	r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4a13      	ldr	r2, [pc, #76]	@ (8005764 <vTaskSwitchContext+0xb4>)
 8005718:	4413      	add	r3, r2
 800571a:	60bb      	str	r3, [r7, #8]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	605a      	str	r2, [r3, #4]
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	685a      	ldr	r2, [r3, #4]
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	3308      	adds	r3, #8
 800572e:	429a      	cmp	r2, r3
 8005730:	d104      	bne.n	800573c <vTaskSwitchContext+0x8c>
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	605a      	str	r2, [r3, #4]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	4a09      	ldr	r2, [pc, #36]	@ (8005768 <vTaskSwitchContext+0xb8>)
 8005744:	6013      	str	r3, [r2, #0]
 8005746:	4a06      	ldr	r2, [pc, #24]	@ (8005760 <vTaskSwitchContext+0xb0>)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6013      	str	r3, [r2, #0]
}
 800574c:	bf00      	nop
 800574e:	3714      	adds	r7, #20
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr
 8005758:	200011cc 	.word	0x200011cc
 800575c:	200011b8 	.word	0x200011b8
 8005760:	200011ac 	.word	0x200011ac
 8005764:	20000cd4 	.word	0x20000cd4
 8005768:	20000cd0 	.word	0x20000cd0

0800576c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10b      	bne.n	8005794 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800577c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005780:	f383 8811 	msr	BASEPRI, r3
 8005784:	f3bf 8f6f 	isb	sy
 8005788:	f3bf 8f4f 	dsb	sy
 800578c:	60fb      	str	r3, [r7, #12]
}
 800578e:	bf00      	nop
 8005790:	bf00      	nop
 8005792:	e7fd      	b.n	8005790 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005794:	4b07      	ldr	r3, [pc, #28]	@ (80057b4 <vTaskPlaceOnEventList+0x48>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	3318      	adds	r3, #24
 800579a:	4619      	mov	r1, r3
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f7fe fbd2 	bl	8003f46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80057a2:	2101      	movs	r1, #1
 80057a4:	6838      	ldr	r0, [r7, #0]
 80057a6:	f000 fb91 	bl	8005ecc <prvAddCurrentTaskToDelayedList>
}
 80057aa:	bf00      	nop
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	20000cd0 	.word	0x20000cd0

080057b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10b      	bne.n	80057e2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80057ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ce:	f383 8811 	msr	BASEPRI, r3
 80057d2:	f3bf 8f6f 	isb	sy
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	617b      	str	r3, [r7, #20]
}
 80057dc:	bf00      	nop
 80057de:	bf00      	nop
 80057e0:	e7fd      	b.n	80057de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80057e2:	4b0a      	ldr	r3, [pc, #40]	@ (800580c <vTaskPlaceOnEventListRestricted+0x54>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	3318      	adds	r3, #24
 80057e8:	4619      	mov	r1, r3
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f7fe fb87 	bl	8003efe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d002      	beq.n	80057fc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80057f6:	f04f 33ff 	mov.w	r3, #4294967295
 80057fa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80057fc:	6879      	ldr	r1, [r7, #4]
 80057fe:	68b8      	ldr	r0, [r7, #8]
 8005800:	f000 fb64 	bl	8005ecc <prvAddCurrentTaskToDelayedList>
	}
 8005804:	bf00      	nop
 8005806:	3718      	adds	r7, #24
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	20000cd0 	.word	0x20000cd0

08005810 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10b      	bne.n	800583e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800582a:	f383 8811 	msr	BASEPRI, r3
 800582e:	f3bf 8f6f 	isb	sy
 8005832:	f3bf 8f4f 	dsb	sy
 8005836:	60fb      	str	r3, [r7, #12]
}
 8005838:	bf00      	nop
 800583a:	bf00      	nop
 800583c:	e7fd      	b.n	800583a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	3318      	adds	r3, #24
 8005842:	4618      	mov	r0, r3
 8005844:	f7fe fbb8 	bl	8003fb8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005848:	4b1d      	ldr	r3, [pc, #116]	@ (80058c0 <xTaskRemoveFromEventList+0xb0>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d11d      	bne.n	800588c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	3304      	adds	r3, #4
 8005854:	4618      	mov	r0, r3
 8005856:	f7fe fbaf 	bl	8003fb8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800585e:	4b19      	ldr	r3, [pc, #100]	@ (80058c4 <xTaskRemoveFromEventList+0xb4>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	429a      	cmp	r2, r3
 8005864:	d903      	bls.n	800586e <xTaskRemoveFromEventList+0x5e>
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800586a:	4a16      	ldr	r2, [pc, #88]	@ (80058c4 <xTaskRemoveFromEventList+0xb4>)
 800586c:	6013      	str	r3, [r2, #0]
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005872:	4613      	mov	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4413      	add	r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4a13      	ldr	r2, [pc, #76]	@ (80058c8 <xTaskRemoveFromEventList+0xb8>)
 800587c:	441a      	add	r2, r3
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	3304      	adds	r3, #4
 8005882:	4619      	mov	r1, r3
 8005884:	4610      	mov	r0, r2
 8005886:	f7fe fb3a 	bl	8003efe <vListInsertEnd>
 800588a:	e005      	b.n	8005898 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	3318      	adds	r3, #24
 8005890:	4619      	mov	r1, r3
 8005892:	480e      	ldr	r0, [pc, #56]	@ (80058cc <xTaskRemoveFromEventList+0xbc>)
 8005894:	f7fe fb33 	bl	8003efe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800589c:	4b0c      	ldr	r3, [pc, #48]	@ (80058d0 <xTaskRemoveFromEventList+0xc0>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d905      	bls.n	80058b2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80058a6:	2301      	movs	r3, #1
 80058a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80058aa:	4b0a      	ldr	r3, [pc, #40]	@ (80058d4 <xTaskRemoveFromEventList+0xc4>)
 80058ac:	2201      	movs	r2, #1
 80058ae:	601a      	str	r2, [r3, #0]
 80058b0:	e001      	b.n	80058b6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80058b2:	2300      	movs	r3, #0
 80058b4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80058b6:	697b      	ldr	r3, [r7, #20]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3718      	adds	r7, #24
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	200011cc 	.word	0x200011cc
 80058c4:	200011ac 	.word	0x200011ac
 80058c8:	20000cd4 	.word	0x20000cd4
 80058cc:	20001164 	.word	0x20001164
 80058d0:	20000cd0 	.word	0x20000cd0
 80058d4:	200011b8 	.word	0x200011b8

080058d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80058e0:	4b06      	ldr	r3, [pc, #24]	@ (80058fc <vTaskInternalSetTimeOutState+0x24>)
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80058e8:	4b05      	ldr	r3, [pc, #20]	@ (8005900 <vTaskInternalSetTimeOutState+0x28>)
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	605a      	str	r2, [r3, #4]
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr
 80058fc:	200011bc 	.word	0x200011bc
 8005900:	200011a8 	.word	0x200011a8

08005904 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b088      	sub	sp, #32
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10b      	bne.n	800592c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005918:	f383 8811 	msr	BASEPRI, r3
 800591c:	f3bf 8f6f 	isb	sy
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	613b      	str	r3, [r7, #16]
}
 8005926:	bf00      	nop
 8005928:	bf00      	nop
 800592a:	e7fd      	b.n	8005928 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10b      	bne.n	800594a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005936:	f383 8811 	msr	BASEPRI, r3
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	60fb      	str	r3, [r7, #12]
}
 8005944:	bf00      	nop
 8005946:	bf00      	nop
 8005948:	e7fd      	b.n	8005946 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800594a:	f000 ff9d 	bl	8006888 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800594e:	4b1d      	ldr	r3, [pc, #116]	@ (80059c4 <xTaskCheckForTimeOut+0xc0>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005966:	d102      	bne.n	800596e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005968:	2300      	movs	r3, #0
 800596a:	61fb      	str	r3, [r7, #28]
 800596c:	e023      	b.n	80059b6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	4b15      	ldr	r3, [pc, #84]	@ (80059c8 <xTaskCheckForTimeOut+0xc4>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	429a      	cmp	r2, r3
 8005978:	d007      	beq.n	800598a <xTaskCheckForTimeOut+0x86>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	69ba      	ldr	r2, [r7, #24]
 8005980:	429a      	cmp	r2, r3
 8005982:	d302      	bcc.n	800598a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005984:	2301      	movs	r3, #1
 8005986:	61fb      	str	r3, [r7, #28]
 8005988:	e015      	b.n	80059b6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	429a      	cmp	r2, r3
 8005992:	d20b      	bcs.n	80059ac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	1ad2      	subs	r2, r2, r3
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f7ff ff99 	bl	80058d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80059a6:	2300      	movs	r3, #0
 80059a8:	61fb      	str	r3, [r7, #28]
 80059aa:	e004      	b.n	80059b6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	2200      	movs	r2, #0
 80059b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80059b2:	2301      	movs	r3, #1
 80059b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80059b6:	f000 ff99 	bl	80068ec <vPortExitCritical>

	return xReturn;
 80059ba:	69fb      	ldr	r3, [r7, #28]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3720      	adds	r7, #32
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	200011a8 	.word	0x200011a8
 80059c8:	200011bc 	.word	0x200011bc

080059cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80059cc:	b480      	push	{r7}
 80059ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80059d0:	4b03      	ldr	r3, [pc, #12]	@ (80059e0 <vTaskMissedYield+0x14>)
 80059d2:	2201      	movs	r2, #1
 80059d4:	601a      	str	r2, [r3, #0]
}
 80059d6:	bf00      	nop
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	200011b8 	.word	0x200011b8

080059e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80059ec:	f000 f852 	bl	8005a94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80059f0:	4b06      	ldr	r3, [pc, #24]	@ (8005a0c <prvIdleTask+0x28>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d9f9      	bls.n	80059ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80059f8:	4b05      	ldr	r3, [pc, #20]	@ (8005a10 <prvIdleTask+0x2c>)
 80059fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059fe:	601a      	str	r2, [r3, #0]
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005a08:	e7f0      	b.n	80059ec <prvIdleTask+0x8>
 8005a0a:	bf00      	nop
 8005a0c:	20000cd4 	.word	0x20000cd4
 8005a10:	e000ed04 	.word	0xe000ed04

08005a14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	607b      	str	r3, [r7, #4]
 8005a1e:	e00c      	b.n	8005a3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	4613      	mov	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4a12      	ldr	r2, [pc, #72]	@ (8005a74 <prvInitialiseTaskLists+0x60>)
 8005a2c:	4413      	add	r3, r2
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7fe fa38 	bl	8003ea4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	3301      	adds	r3, #1
 8005a38:	607b      	str	r3, [r7, #4]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2b37      	cmp	r3, #55	@ 0x37
 8005a3e:	d9ef      	bls.n	8005a20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a40:	480d      	ldr	r0, [pc, #52]	@ (8005a78 <prvInitialiseTaskLists+0x64>)
 8005a42:	f7fe fa2f 	bl	8003ea4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a46:	480d      	ldr	r0, [pc, #52]	@ (8005a7c <prvInitialiseTaskLists+0x68>)
 8005a48:	f7fe fa2c 	bl	8003ea4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a4c:	480c      	ldr	r0, [pc, #48]	@ (8005a80 <prvInitialiseTaskLists+0x6c>)
 8005a4e:	f7fe fa29 	bl	8003ea4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a52:	480c      	ldr	r0, [pc, #48]	@ (8005a84 <prvInitialiseTaskLists+0x70>)
 8005a54:	f7fe fa26 	bl	8003ea4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a58:	480b      	ldr	r0, [pc, #44]	@ (8005a88 <prvInitialiseTaskLists+0x74>)
 8005a5a:	f7fe fa23 	bl	8003ea4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8005a8c <prvInitialiseTaskLists+0x78>)
 8005a60:	4a05      	ldr	r2, [pc, #20]	@ (8005a78 <prvInitialiseTaskLists+0x64>)
 8005a62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a64:	4b0a      	ldr	r3, [pc, #40]	@ (8005a90 <prvInitialiseTaskLists+0x7c>)
 8005a66:	4a05      	ldr	r2, [pc, #20]	@ (8005a7c <prvInitialiseTaskLists+0x68>)
 8005a68:	601a      	str	r2, [r3, #0]
}
 8005a6a:	bf00      	nop
 8005a6c:	3708      	adds	r7, #8
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	20000cd4 	.word	0x20000cd4
 8005a78:	20001134 	.word	0x20001134
 8005a7c:	20001148 	.word	0x20001148
 8005a80:	20001164 	.word	0x20001164
 8005a84:	20001178 	.word	0x20001178
 8005a88:	20001190 	.word	0x20001190
 8005a8c:	2000115c 	.word	0x2000115c
 8005a90:	20001160 	.word	0x20001160

08005a94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a9a:	e019      	b.n	8005ad0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a9c:	f000 fef4 	bl	8006888 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aa0:	4b10      	ldr	r3, [pc, #64]	@ (8005ae4 <prvCheckTasksWaitingTermination+0x50>)
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	3304      	adds	r3, #4
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7fe fa83 	bl	8003fb8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ae8 <prvCheckTasksWaitingTermination+0x54>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	4a0b      	ldr	r2, [pc, #44]	@ (8005ae8 <prvCheckTasksWaitingTermination+0x54>)
 8005aba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005abc:	4b0b      	ldr	r3, [pc, #44]	@ (8005aec <prvCheckTasksWaitingTermination+0x58>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8005aec <prvCheckTasksWaitingTermination+0x58>)
 8005ac4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005ac6:	f000 ff11 	bl	80068ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f810 	bl	8005af0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ad0:	4b06      	ldr	r3, [pc, #24]	@ (8005aec <prvCheckTasksWaitingTermination+0x58>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1e1      	bne.n	8005a9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ad8:	bf00      	nop
 8005ada:	bf00      	nop
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	20001178 	.word	0x20001178
 8005ae8:	200011a4 	.word	0x200011a4
 8005aec:	2000118c 	.word	0x2000118c

08005af0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d108      	bne.n	8005b14 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b06:	4618      	mov	r0, r3
 8005b08:	f001 f8ae 	bl	8006c68 <vPortFree>
				vPortFree( pxTCB );
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f001 f8ab 	bl	8006c68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b12:	e019      	b.n	8005b48 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d103      	bne.n	8005b26 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f001 f8a2 	bl	8006c68 <vPortFree>
	}
 8005b24:	e010      	b.n	8005b48 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d00b      	beq.n	8005b48 <prvDeleteTCB+0x58>
	__asm volatile
 8005b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	60fb      	str	r3, [r7, #12]
}
 8005b42:	bf00      	nop
 8005b44:	bf00      	nop
 8005b46:	e7fd      	b.n	8005b44 <prvDeleteTCB+0x54>
	}
 8005b48:	bf00      	nop
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b56:	4b0c      	ldr	r3, [pc, #48]	@ (8005b88 <prvResetNextTaskUnblockTime+0x38>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d104      	bne.n	8005b6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b60:	4b0a      	ldr	r3, [pc, #40]	@ (8005b8c <prvResetNextTaskUnblockTime+0x3c>)
 8005b62:	f04f 32ff 	mov.w	r2, #4294967295
 8005b66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b68:	e008      	b.n	8005b7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b6a:	4b07      	ldr	r3, [pc, #28]	@ (8005b88 <prvResetNextTaskUnblockTime+0x38>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	4a04      	ldr	r2, [pc, #16]	@ (8005b8c <prvResetNextTaskUnblockTime+0x3c>)
 8005b7a:	6013      	str	r3, [r2, #0]
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr
 8005b88:	2000115c 	.word	0x2000115c
 8005b8c:	200011c4 	.word	0x200011c4

08005b90 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005b96:	4b05      	ldr	r3, [pc, #20]	@ (8005bac <xTaskGetCurrentTaskHandle+0x1c>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005b9c:	687b      	ldr	r3, [r7, #4]
	}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	20000cd0 	.word	0x20000cd0

08005bb0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8005be4 <xTaskGetSchedulerState+0x34>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d102      	bne.n	8005bc4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	607b      	str	r3, [r7, #4]
 8005bc2:	e008      	b.n	8005bd6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bc4:	4b08      	ldr	r3, [pc, #32]	@ (8005be8 <xTaskGetSchedulerState+0x38>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d102      	bne.n	8005bd2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005bcc:	2302      	movs	r3, #2
 8005bce:	607b      	str	r3, [r7, #4]
 8005bd0:	e001      	b.n	8005bd6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005bd6:	687b      	ldr	r3, [r7, #4]
	}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr
 8005be4:	200011b0 	.word	0x200011b0
 8005be8:	200011cc 	.word	0x200011cc

08005bec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d051      	beq.n	8005ca6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c06:	4b2a      	ldr	r3, [pc, #168]	@ (8005cb0 <xTaskPriorityInherit+0xc4>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d241      	bcs.n	8005c94 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	db06      	blt.n	8005c26 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c18:	4b25      	ldr	r3, [pc, #148]	@ (8005cb0 <xTaskPriorityInherit+0xc4>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c1e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	6959      	ldr	r1, [r3, #20]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c2e:	4613      	mov	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4a1f      	ldr	r2, [pc, #124]	@ (8005cb4 <xTaskPriorityInherit+0xc8>)
 8005c38:	4413      	add	r3, r2
 8005c3a:	4299      	cmp	r1, r3
 8005c3c:	d122      	bne.n	8005c84 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	3304      	adds	r3, #4
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7fe f9b8 	bl	8003fb8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005c48:	4b19      	ldr	r3, [pc, #100]	@ (8005cb0 <xTaskPriorityInherit+0xc4>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c56:	4b18      	ldr	r3, [pc, #96]	@ (8005cb8 <xTaskPriorityInherit+0xcc>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d903      	bls.n	8005c66 <xTaskPriorityInherit+0x7a>
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c62:	4a15      	ldr	r2, [pc, #84]	@ (8005cb8 <xTaskPriorityInherit+0xcc>)
 8005c64:	6013      	str	r3, [r2, #0]
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4413      	add	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4a10      	ldr	r2, [pc, #64]	@ (8005cb4 <xTaskPriorityInherit+0xc8>)
 8005c74:	441a      	add	r2, r3
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	3304      	adds	r3, #4
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	4610      	mov	r0, r2
 8005c7e:	f7fe f93e 	bl	8003efe <vListInsertEnd>
 8005c82:	e004      	b.n	8005c8e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005c84:	4b0a      	ldr	r3, [pc, #40]	@ (8005cb0 <xTaskPriorityInherit+0xc4>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	60fb      	str	r3, [r7, #12]
 8005c92:	e008      	b.n	8005ca6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005c98:	4b05      	ldr	r3, [pc, #20]	@ (8005cb0 <xTaskPriorityInherit+0xc4>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d201      	bcs.n	8005ca6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
	}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	20000cd0 	.word	0x20000cd0
 8005cb4:	20000cd4 	.word	0x20000cd4
 8005cb8:	200011ac 	.word	0x200011ac

08005cbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d058      	beq.n	8005d84 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005cd2:	4b2f      	ldr	r3, [pc, #188]	@ (8005d90 <xTaskPriorityDisinherit+0xd4>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d00b      	beq.n	8005cf4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce0:	f383 8811 	msr	BASEPRI, r3
 8005ce4:	f3bf 8f6f 	isb	sy
 8005ce8:	f3bf 8f4f 	dsb	sy
 8005cec:	60fb      	str	r3, [r7, #12]
}
 8005cee:	bf00      	nop
 8005cf0:	bf00      	nop
 8005cf2:	e7fd      	b.n	8005cf0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10b      	bne.n	8005d14 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d00:	f383 8811 	msr	BASEPRI, r3
 8005d04:	f3bf 8f6f 	isb	sy
 8005d08:	f3bf 8f4f 	dsb	sy
 8005d0c:	60bb      	str	r3, [r7, #8]
}
 8005d0e:	bf00      	nop
 8005d10:	bf00      	nop
 8005d12:	e7fd      	b.n	8005d10 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d18:	1e5a      	subs	r2, r3, #1
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d02c      	beq.n	8005d84 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d128      	bne.n	8005d84 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	3304      	adds	r3, #4
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fe f93e 	bl	8003fb8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d48:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d54:	4b0f      	ldr	r3, [pc, #60]	@ (8005d94 <xTaskPriorityDisinherit+0xd8>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d903      	bls.n	8005d64 <xTaskPriorityDisinherit+0xa8>
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d60:	4a0c      	ldr	r2, [pc, #48]	@ (8005d94 <xTaskPriorityDisinherit+0xd8>)
 8005d62:	6013      	str	r3, [r2, #0]
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d68:	4613      	mov	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	4413      	add	r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	4a09      	ldr	r2, [pc, #36]	@ (8005d98 <xTaskPriorityDisinherit+0xdc>)
 8005d72:	441a      	add	r2, r3
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	3304      	adds	r3, #4
 8005d78:	4619      	mov	r1, r3
 8005d7a:	4610      	mov	r0, r2
 8005d7c:	f7fe f8bf 	bl	8003efe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005d80:	2301      	movs	r3, #1
 8005d82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d84:	697b      	ldr	r3, [r7, #20]
	}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3718      	adds	r7, #24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	20000cd0 	.word	0x20000cd0
 8005d94:	200011ac 	.word	0x200011ac
 8005d98:	20000cd4 	.word	0x20000cd4

08005d9c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b088      	sub	sp, #32
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005daa:	2301      	movs	r3, #1
 8005dac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d06c      	beq.n	8005e8e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10b      	bne.n	8005dd4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	60fb      	str	r3, [r7, #12]
}
 8005dce:	bf00      	nop
 8005dd0:	bf00      	nop
 8005dd2:	e7fd      	b.n	8005dd0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dd8:	683a      	ldr	r2, [r7, #0]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d902      	bls.n	8005de4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	61fb      	str	r3, [r7, #28]
 8005de2:	e002      	b.n	8005dea <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005de8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dee:	69fa      	ldr	r2, [r7, #28]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d04c      	beq.n	8005e8e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d147      	bne.n	8005e8e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005dfe:	4b26      	ldr	r3, [pc, #152]	@ (8005e98 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	69ba      	ldr	r2, [r7, #24]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d10b      	bne.n	8005e20 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e0c:	f383 8811 	msr	BASEPRI, r3
 8005e10:	f3bf 8f6f 	isb	sy
 8005e14:	f3bf 8f4f 	dsb	sy
 8005e18:	60bb      	str	r3, [r7, #8]
}
 8005e1a:	bf00      	nop
 8005e1c:	bf00      	nop
 8005e1e:	e7fd      	b.n	8005e1c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e24:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	69fa      	ldr	r2, [r7, #28]
 8005e2a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	db04      	blt.n	8005e3e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	6959      	ldr	r1, [r3, #20]
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	4613      	mov	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4413      	add	r3, r2
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	4a13      	ldr	r2, [pc, #76]	@ (8005e9c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005e4e:	4413      	add	r3, r2
 8005e50:	4299      	cmp	r1, r3
 8005e52:	d11c      	bne.n	8005e8e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	3304      	adds	r3, #4
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7fe f8ad 	bl	8003fb8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e62:	4b0f      	ldr	r3, [pc, #60]	@ (8005ea0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d903      	bls.n	8005e72 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e6e:	4a0c      	ldr	r2, [pc, #48]	@ (8005ea0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005e70:	6013      	str	r3, [r2, #0]
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e76:	4613      	mov	r3, r2
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	4413      	add	r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4a07      	ldr	r2, [pc, #28]	@ (8005e9c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005e80:	441a      	add	r2, r3
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	3304      	adds	r3, #4
 8005e86:	4619      	mov	r1, r3
 8005e88:	4610      	mov	r0, r2
 8005e8a:	f7fe f838 	bl	8003efe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e8e:	bf00      	nop
 8005e90:	3720      	adds	r7, #32
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	20000cd0 	.word	0x20000cd0
 8005e9c:	20000cd4 	.word	0x20000cd4
 8005ea0:	200011ac 	.word	0x200011ac

08005ea4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005ea4:	b480      	push	{r7}
 8005ea6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005ea8:	4b07      	ldr	r3, [pc, #28]	@ (8005ec8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d004      	beq.n	8005eba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005eb0:	4b05      	ldr	r3, [pc, #20]	@ (8005ec8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005eb6:	3201      	adds	r2, #1
 8005eb8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8005eba:	4b03      	ldr	r3, [pc, #12]	@ (8005ec8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
	}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	20000cd0 	.word	0x20000cd0

08005ecc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ed6:	4b21      	ldr	r3, [pc, #132]	@ (8005f5c <prvAddCurrentTaskToDelayedList+0x90>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005edc:	4b20      	ldr	r3, [pc, #128]	@ (8005f60 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	3304      	adds	r3, #4
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7fe f868 	bl	8003fb8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eee:	d10a      	bne.n	8005f06 <prvAddCurrentTaskToDelayedList+0x3a>
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d007      	beq.n	8005f06 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ef6:	4b1a      	ldr	r3, [pc, #104]	@ (8005f60 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3304      	adds	r3, #4
 8005efc:	4619      	mov	r1, r3
 8005efe:	4819      	ldr	r0, [pc, #100]	@ (8005f64 <prvAddCurrentTaskToDelayedList+0x98>)
 8005f00:	f7fd fffd 	bl	8003efe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f04:	e026      	b.n	8005f54 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f0e:	4b14      	ldr	r3, [pc, #80]	@ (8005f60 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d209      	bcs.n	8005f32 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f1e:	4b12      	ldr	r3, [pc, #72]	@ (8005f68 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	4b0f      	ldr	r3, [pc, #60]	@ (8005f60 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	3304      	adds	r3, #4
 8005f28:	4619      	mov	r1, r3
 8005f2a:	4610      	mov	r0, r2
 8005f2c:	f7fe f80b 	bl	8003f46 <vListInsert>
}
 8005f30:	e010      	b.n	8005f54 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f32:	4b0e      	ldr	r3, [pc, #56]	@ (8005f6c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	4b0a      	ldr	r3, [pc, #40]	@ (8005f60 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3304      	adds	r3, #4
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	4610      	mov	r0, r2
 8005f40:	f7fe f801 	bl	8003f46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f44:	4b0a      	ldr	r3, [pc, #40]	@ (8005f70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d202      	bcs.n	8005f54 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005f4e:	4a08      	ldr	r2, [pc, #32]	@ (8005f70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	6013      	str	r3, [r2, #0]
}
 8005f54:	bf00      	nop
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	200011a8 	.word	0x200011a8
 8005f60:	20000cd0 	.word	0x20000cd0
 8005f64:	20001190 	.word	0x20001190
 8005f68:	20001160 	.word	0x20001160
 8005f6c:	2000115c 	.word	0x2000115c
 8005f70:	200011c4 	.word	0x200011c4

08005f74 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b08a      	sub	sp, #40	@ 0x28
 8005f78:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005f7e:	f000 fb13 	bl	80065a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005f82:	4b1d      	ldr	r3, [pc, #116]	@ (8005ff8 <xTimerCreateTimerTask+0x84>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d021      	beq.n	8005fce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005f92:	1d3a      	adds	r2, r7, #4
 8005f94:	f107 0108 	add.w	r1, r7, #8
 8005f98:	f107 030c 	add.w	r3, r7, #12
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7fd ff67 	bl	8003e70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005fa2:	6879      	ldr	r1, [r7, #4]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	9202      	str	r2, [sp, #8]
 8005faa:	9301      	str	r3, [sp, #4]
 8005fac:	2302      	movs	r3, #2
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	460a      	mov	r2, r1
 8005fb4:	4911      	ldr	r1, [pc, #68]	@ (8005ffc <xTimerCreateTimerTask+0x88>)
 8005fb6:	4812      	ldr	r0, [pc, #72]	@ (8006000 <xTimerCreateTimerTask+0x8c>)
 8005fb8:	f7fe ffc0 	bl	8004f3c <xTaskCreateStatic>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	4a11      	ldr	r2, [pc, #68]	@ (8006004 <xTimerCreateTimerTask+0x90>)
 8005fc0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005fc2:	4b10      	ldr	r3, [pc, #64]	@ (8006004 <xTimerCreateTimerTask+0x90>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10b      	bne.n	8005fec <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd8:	f383 8811 	msr	BASEPRI, r3
 8005fdc:	f3bf 8f6f 	isb	sy
 8005fe0:	f3bf 8f4f 	dsb	sy
 8005fe4:	613b      	str	r3, [r7, #16]
}
 8005fe6:	bf00      	nop
 8005fe8:	bf00      	nop
 8005fea:	e7fd      	b.n	8005fe8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005fec:	697b      	ldr	r3, [r7, #20]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3718      	adds	r7, #24
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	20001200 	.word	0x20001200
 8005ffc:	080078c0 	.word	0x080078c0
 8006000:	08006141 	.word	0x08006141
 8006004:	20001204 	.word	0x20001204

08006008 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08a      	sub	sp, #40	@ 0x28
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006016:	2300      	movs	r3, #0
 8006018:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10b      	bne.n	8006038 <xTimerGenericCommand+0x30>
	__asm volatile
 8006020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006024:	f383 8811 	msr	BASEPRI, r3
 8006028:	f3bf 8f6f 	isb	sy
 800602c:	f3bf 8f4f 	dsb	sy
 8006030:	623b      	str	r3, [r7, #32]
}
 8006032:	bf00      	nop
 8006034:	bf00      	nop
 8006036:	e7fd      	b.n	8006034 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006038:	4b19      	ldr	r3, [pc, #100]	@ (80060a0 <xTimerGenericCommand+0x98>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d02a      	beq.n	8006096 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	2b05      	cmp	r3, #5
 8006050:	dc18      	bgt.n	8006084 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006052:	f7ff fdad 	bl	8005bb0 <xTaskGetSchedulerState>
 8006056:	4603      	mov	r3, r0
 8006058:	2b02      	cmp	r3, #2
 800605a:	d109      	bne.n	8006070 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800605c:	4b10      	ldr	r3, [pc, #64]	@ (80060a0 <xTimerGenericCommand+0x98>)
 800605e:	6818      	ldr	r0, [r3, #0]
 8006060:	f107 0110 	add.w	r1, r7, #16
 8006064:	2300      	movs	r3, #0
 8006066:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006068:	f7fe f9ce 	bl	8004408 <xQueueGenericSend>
 800606c:	6278      	str	r0, [r7, #36]	@ 0x24
 800606e:	e012      	b.n	8006096 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006070:	4b0b      	ldr	r3, [pc, #44]	@ (80060a0 <xTimerGenericCommand+0x98>)
 8006072:	6818      	ldr	r0, [r3, #0]
 8006074:	f107 0110 	add.w	r1, r7, #16
 8006078:	2300      	movs	r3, #0
 800607a:	2200      	movs	r2, #0
 800607c:	f7fe f9c4 	bl	8004408 <xQueueGenericSend>
 8006080:	6278      	str	r0, [r7, #36]	@ 0x24
 8006082:	e008      	b.n	8006096 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006084:	4b06      	ldr	r3, [pc, #24]	@ (80060a0 <xTimerGenericCommand+0x98>)
 8006086:	6818      	ldr	r0, [r3, #0]
 8006088:	f107 0110 	add.w	r1, r7, #16
 800608c:	2300      	movs	r3, #0
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	f7fe fabc 	bl	800460c <xQueueGenericSendFromISR>
 8006094:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006098:	4618      	mov	r0, r3
 800609a:	3728      	adds	r7, #40	@ 0x28
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	20001200 	.word	0x20001200

080060a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b088      	sub	sp, #32
 80060a8:	af02      	add	r7, sp, #8
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060ae:	4b23      	ldr	r3, [pc, #140]	@ (800613c <prvProcessExpiredTimer+0x98>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	3304      	adds	r3, #4
 80060bc:	4618      	mov	r0, r3
 80060be:	f7fd ff7b 	bl	8003fb8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80060c8:	f003 0304 	and.w	r3, r3, #4
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d023      	beq.n	8006118 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	699a      	ldr	r2, [r3, #24]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	18d1      	adds	r1, r2, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	683a      	ldr	r2, [r7, #0]
 80060dc:	6978      	ldr	r0, [r7, #20]
 80060de:	f000 f8d5 	bl	800628c <prvInsertTimerInActiveList>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d020      	beq.n	800612a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80060e8:	2300      	movs	r3, #0
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	2300      	movs	r3, #0
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	2100      	movs	r1, #0
 80060f2:	6978      	ldr	r0, [r7, #20]
 80060f4:	f7ff ff88 	bl	8006008 <xTimerGenericCommand>
 80060f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d114      	bne.n	800612a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006104:	f383 8811 	msr	BASEPRI, r3
 8006108:	f3bf 8f6f 	isb	sy
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	60fb      	str	r3, [r7, #12]
}
 8006112:	bf00      	nop
 8006114:	bf00      	nop
 8006116:	e7fd      	b.n	8006114 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800611e:	f023 0301 	bic.w	r3, r3, #1
 8006122:	b2da      	uxtb	r2, r3
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	6978      	ldr	r0, [r7, #20]
 8006130:	4798      	blx	r3
}
 8006132:	bf00      	nop
 8006134:	3718      	adds	r7, #24
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	200011f8 	.word	0x200011f8

08006140 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006148:	f107 0308 	add.w	r3, r7, #8
 800614c:	4618      	mov	r0, r3
 800614e:	f000 f859 	bl	8006204 <prvGetNextExpireTime>
 8006152:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	4619      	mov	r1, r3
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f000 f805 	bl	8006168 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800615e:	f000 f8d7 	bl	8006310 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006162:	bf00      	nop
 8006164:	e7f0      	b.n	8006148 <prvTimerTask+0x8>
	...

08006168 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006172:	f7ff f927 	bl	80053c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006176:	f107 0308 	add.w	r3, r7, #8
 800617a:	4618      	mov	r0, r3
 800617c:	f000 f866 	bl	800624c <prvSampleTimeNow>
 8006180:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d130      	bne.n	80061ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10a      	bne.n	80061a4 <prvProcessTimerOrBlockTask+0x3c>
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	429a      	cmp	r2, r3
 8006194:	d806      	bhi.n	80061a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006196:	f7ff f923 	bl	80053e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800619a:	68f9      	ldr	r1, [r7, #12]
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f7ff ff81 	bl	80060a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80061a2:	e024      	b.n	80061ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d008      	beq.n	80061bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80061aa:	4b13      	ldr	r3, [pc, #76]	@ (80061f8 <prvProcessTimerOrBlockTask+0x90>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d101      	bne.n	80061b8 <prvProcessTimerOrBlockTask+0x50>
 80061b4:	2301      	movs	r3, #1
 80061b6:	e000      	b.n	80061ba <prvProcessTimerOrBlockTask+0x52>
 80061b8:	2300      	movs	r3, #0
 80061ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80061bc:	4b0f      	ldr	r3, [pc, #60]	@ (80061fc <prvProcessTimerOrBlockTask+0x94>)
 80061be:	6818      	ldr	r0, [r3, #0]
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	683a      	ldr	r2, [r7, #0]
 80061c8:	4619      	mov	r1, r3
 80061ca:	f7fe fe83 	bl	8004ed4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80061ce:	f7ff f907 	bl	80053e0 <xTaskResumeAll>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d10a      	bne.n	80061ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80061d8:	4b09      	ldr	r3, [pc, #36]	@ (8006200 <prvProcessTimerOrBlockTask+0x98>)
 80061da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061de:	601a      	str	r2, [r3, #0]
 80061e0:	f3bf 8f4f 	dsb	sy
 80061e4:	f3bf 8f6f 	isb	sy
}
 80061e8:	e001      	b.n	80061ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80061ea:	f7ff f8f9 	bl	80053e0 <xTaskResumeAll>
}
 80061ee:	bf00      	nop
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	200011fc 	.word	0x200011fc
 80061fc:	20001200 	.word	0x20001200
 8006200:	e000ed04 	.word	0xe000ed04

08006204 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800620c:	4b0e      	ldr	r3, [pc, #56]	@ (8006248 <prvGetNextExpireTime+0x44>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <prvGetNextExpireTime+0x16>
 8006216:	2201      	movs	r2, #1
 8006218:	e000      	b.n	800621c <prvGetNextExpireTime+0x18>
 800621a:	2200      	movs	r2, #0
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d105      	bne.n	8006234 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006228:	4b07      	ldr	r3, [pc, #28]	@ (8006248 <prvGetNextExpireTime+0x44>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	60fb      	str	r3, [r7, #12]
 8006232:	e001      	b.n	8006238 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006234:	2300      	movs	r3, #0
 8006236:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006238:	68fb      	ldr	r3, [r7, #12]
}
 800623a:	4618      	mov	r0, r3
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	200011f8 	.word	0x200011f8

0800624c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006254:	f7ff f962 	bl	800551c <xTaskGetTickCount>
 8006258:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800625a:	4b0b      	ldr	r3, [pc, #44]	@ (8006288 <prvSampleTimeNow+0x3c>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	429a      	cmp	r2, r3
 8006262:	d205      	bcs.n	8006270 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006264:	f000 f93a 	bl	80064dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	601a      	str	r2, [r3, #0]
 800626e:	e002      	b.n	8006276 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006276:	4a04      	ldr	r2, [pc, #16]	@ (8006288 <prvSampleTimeNow+0x3c>)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800627c:	68fb      	ldr	r3, [r7, #12]
}
 800627e:	4618      	mov	r0, r3
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	20001208 	.word	0x20001208

0800628c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]
 8006298:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800629a:	2300      	movs	r3, #0
 800629c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d812      	bhi.n	80062d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	1ad2      	subs	r2, r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	699b      	ldr	r3, [r3, #24]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d302      	bcc.n	80062c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80062c0:	2301      	movs	r3, #1
 80062c2:	617b      	str	r3, [r7, #20]
 80062c4:	e01b      	b.n	80062fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80062c6:	4b10      	ldr	r3, [pc, #64]	@ (8006308 <prvInsertTimerInActiveList+0x7c>)
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	3304      	adds	r3, #4
 80062ce:	4619      	mov	r1, r3
 80062d0:	4610      	mov	r0, r2
 80062d2:	f7fd fe38 	bl	8003f46 <vListInsert>
 80062d6:	e012      	b.n	80062fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d206      	bcs.n	80062ee <prvInsertTimerInActiveList+0x62>
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d302      	bcc.n	80062ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80062e8:	2301      	movs	r3, #1
 80062ea:	617b      	str	r3, [r7, #20]
 80062ec:	e007      	b.n	80062fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80062ee:	4b07      	ldr	r3, [pc, #28]	@ (800630c <prvInsertTimerInActiveList+0x80>)
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	3304      	adds	r3, #4
 80062f6:	4619      	mov	r1, r3
 80062f8:	4610      	mov	r0, r2
 80062fa:	f7fd fe24 	bl	8003f46 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80062fe:	697b      	ldr	r3, [r7, #20]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3718      	adds	r7, #24
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	200011fc 	.word	0x200011fc
 800630c:	200011f8 	.word	0x200011f8

08006310 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b08e      	sub	sp, #56	@ 0x38
 8006314:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006316:	e0ce      	b.n	80064b6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	da19      	bge.n	8006352 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800631e:	1d3b      	adds	r3, r7, #4
 8006320:	3304      	adds	r3, #4
 8006322:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10b      	bne.n	8006342 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800632a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800632e:	f383 8811 	msr	BASEPRI, r3
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	f3bf 8f4f 	dsb	sy
 800633a:	61fb      	str	r3, [r7, #28]
}
 800633c:	bf00      	nop
 800633e:	bf00      	nop
 8006340:	e7fd      	b.n	800633e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006348:	6850      	ldr	r0, [r2, #4]
 800634a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800634c:	6892      	ldr	r2, [r2, #8]
 800634e:	4611      	mov	r1, r2
 8006350:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	f2c0 80ae 	blt.w	80064b6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800635e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d004      	beq.n	8006370 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006368:	3304      	adds	r3, #4
 800636a:	4618      	mov	r0, r3
 800636c:	f7fd fe24 	bl	8003fb8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006370:	463b      	mov	r3, r7
 8006372:	4618      	mov	r0, r3
 8006374:	f7ff ff6a 	bl	800624c <prvSampleTimeNow>
 8006378:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b09      	cmp	r3, #9
 800637e:	f200 8097 	bhi.w	80064b0 <prvProcessReceivedCommands+0x1a0>
 8006382:	a201      	add	r2, pc, #4	@ (adr r2, 8006388 <prvProcessReceivedCommands+0x78>)
 8006384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006388:	080063b1 	.word	0x080063b1
 800638c:	080063b1 	.word	0x080063b1
 8006390:	080063b1 	.word	0x080063b1
 8006394:	08006427 	.word	0x08006427
 8006398:	0800643b 	.word	0x0800643b
 800639c:	08006487 	.word	0x08006487
 80063a0:	080063b1 	.word	0x080063b1
 80063a4:	080063b1 	.word	0x080063b1
 80063a8:	08006427 	.word	0x08006427
 80063ac:	0800643b 	.word	0x0800643b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80063b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063b6:	f043 0301 	orr.w	r3, r3, #1
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	18d1      	adds	r1, r2, r3
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063d0:	f7ff ff5c 	bl	800628c <prvInsertTimerInActiveList>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d06c      	beq.n	80064b4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063e8:	f003 0304 	and.w	r3, r3, #4
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d061      	beq.n	80064b4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	441a      	add	r2, r3
 80063f8:	2300      	movs	r3, #0
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	2300      	movs	r3, #0
 80063fe:	2100      	movs	r1, #0
 8006400:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006402:	f7ff fe01 	bl	8006008 <xTimerGenericCommand>
 8006406:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006408:	6a3b      	ldr	r3, [r7, #32]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d152      	bne.n	80064b4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800640e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	61bb      	str	r3, [r7, #24]
}
 8006420:	bf00      	nop
 8006422:	bf00      	nop
 8006424:	e7fd      	b.n	8006422 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006428:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800642c:	f023 0301 	bic.w	r3, r3, #1
 8006430:	b2da      	uxtb	r2, r3
 8006432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006434:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006438:	e03d      	b.n	80064b6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800643a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800643c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006440:	f043 0301 	orr.w	r3, r3, #1
 8006444:	b2da      	uxtb	r2, r3
 8006446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006448:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006450:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10b      	bne.n	8006472 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800645a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800645e:	f383 8811 	msr	BASEPRI, r3
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	617b      	str	r3, [r7, #20]
}
 800646c:	bf00      	nop
 800646e:	bf00      	nop
 8006470:	e7fd      	b.n	800646e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006474:	699a      	ldr	r2, [r3, #24]
 8006476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006478:	18d1      	adds	r1, r2, r3
 800647a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800647e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006480:	f7ff ff04 	bl	800628c <prvInsertTimerInActiveList>
					break;
 8006484:	e017      	b.n	80064b6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006488:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800648c:	f003 0302 	and.w	r3, r3, #2
 8006490:	2b00      	cmp	r3, #0
 8006492:	d103      	bne.n	800649c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006494:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006496:	f000 fbe7 	bl	8006c68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800649a:	e00c      	b.n	80064b6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800649c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800649e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064a2:	f023 0301 	bic.w	r3, r3, #1
 80064a6:	b2da      	uxtb	r2, r3
 80064a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80064ae:	e002      	b.n	80064b6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80064b0:	bf00      	nop
 80064b2:	e000      	b.n	80064b6 <prvProcessReceivedCommands+0x1a6>
					break;
 80064b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80064b6:	4b08      	ldr	r3, [pc, #32]	@ (80064d8 <prvProcessReceivedCommands+0x1c8>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	1d39      	adds	r1, r7, #4
 80064bc:	2200      	movs	r2, #0
 80064be:	4618      	mov	r0, r3
 80064c0:	f7fe f942 	bl	8004748 <xQueueReceive>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f47f af26 	bne.w	8006318 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80064cc:	bf00      	nop
 80064ce:	bf00      	nop
 80064d0:	3730      	adds	r7, #48	@ 0x30
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	20001200 	.word	0x20001200

080064dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b088      	sub	sp, #32
 80064e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80064e2:	e049      	b.n	8006578 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80064e4:	4b2e      	ldr	r3, [pc, #184]	@ (80065a0 <prvSwitchTimerLists+0xc4>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064ee:	4b2c      	ldr	r3, [pc, #176]	@ (80065a0 <prvSwitchTimerLists+0xc4>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	3304      	adds	r3, #4
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7fd fd5b 	bl	8003fb8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006510:	f003 0304 	and.w	r3, r3, #4
 8006514:	2b00      	cmp	r3, #0
 8006516:	d02f      	beq.n	8006578 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	4413      	add	r3, r2
 8006520:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	429a      	cmp	r2, r3
 8006528:	d90e      	bls.n	8006548 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	68ba      	ldr	r2, [r7, #8]
 800652e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006536:	4b1a      	ldr	r3, [pc, #104]	@ (80065a0 <prvSwitchTimerLists+0xc4>)
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	3304      	adds	r3, #4
 800653e:	4619      	mov	r1, r3
 8006540:	4610      	mov	r0, r2
 8006542:	f7fd fd00 	bl	8003f46 <vListInsert>
 8006546:	e017      	b.n	8006578 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006548:	2300      	movs	r3, #0
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	2300      	movs	r3, #0
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	2100      	movs	r1, #0
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f7ff fd58 	bl	8006008 <xTimerGenericCommand>
 8006558:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10b      	bne.n	8006578 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006564:	f383 8811 	msr	BASEPRI, r3
 8006568:	f3bf 8f6f 	isb	sy
 800656c:	f3bf 8f4f 	dsb	sy
 8006570:	603b      	str	r3, [r7, #0]
}
 8006572:	bf00      	nop
 8006574:	bf00      	nop
 8006576:	e7fd      	b.n	8006574 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006578:	4b09      	ldr	r3, [pc, #36]	@ (80065a0 <prvSwitchTimerLists+0xc4>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d1b0      	bne.n	80064e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006582:	4b07      	ldr	r3, [pc, #28]	@ (80065a0 <prvSwitchTimerLists+0xc4>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006588:	4b06      	ldr	r3, [pc, #24]	@ (80065a4 <prvSwitchTimerLists+0xc8>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a04      	ldr	r2, [pc, #16]	@ (80065a0 <prvSwitchTimerLists+0xc4>)
 800658e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006590:	4a04      	ldr	r2, [pc, #16]	@ (80065a4 <prvSwitchTimerLists+0xc8>)
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	6013      	str	r3, [r2, #0]
}
 8006596:	bf00      	nop
 8006598:	3718      	adds	r7, #24
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	200011f8 	.word	0x200011f8
 80065a4:	200011fc 	.word	0x200011fc

080065a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80065ae:	f000 f96b 	bl	8006888 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80065b2:	4b15      	ldr	r3, [pc, #84]	@ (8006608 <prvCheckForValidListAndQueue+0x60>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d120      	bne.n	80065fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80065ba:	4814      	ldr	r0, [pc, #80]	@ (800660c <prvCheckForValidListAndQueue+0x64>)
 80065bc:	f7fd fc72 	bl	8003ea4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80065c0:	4813      	ldr	r0, [pc, #76]	@ (8006610 <prvCheckForValidListAndQueue+0x68>)
 80065c2:	f7fd fc6f 	bl	8003ea4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80065c6:	4b13      	ldr	r3, [pc, #76]	@ (8006614 <prvCheckForValidListAndQueue+0x6c>)
 80065c8:	4a10      	ldr	r2, [pc, #64]	@ (800660c <prvCheckForValidListAndQueue+0x64>)
 80065ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80065cc:	4b12      	ldr	r3, [pc, #72]	@ (8006618 <prvCheckForValidListAndQueue+0x70>)
 80065ce:	4a10      	ldr	r2, [pc, #64]	@ (8006610 <prvCheckForValidListAndQueue+0x68>)
 80065d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80065d2:	2300      	movs	r3, #0
 80065d4:	9300      	str	r3, [sp, #0]
 80065d6:	4b11      	ldr	r3, [pc, #68]	@ (800661c <prvCheckForValidListAndQueue+0x74>)
 80065d8:	4a11      	ldr	r2, [pc, #68]	@ (8006620 <prvCheckForValidListAndQueue+0x78>)
 80065da:	2110      	movs	r1, #16
 80065dc:	200a      	movs	r0, #10
 80065de:	f7fd fd7f 	bl	80040e0 <xQueueGenericCreateStatic>
 80065e2:	4603      	mov	r3, r0
 80065e4:	4a08      	ldr	r2, [pc, #32]	@ (8006608 <prvCheckForValidListAndQueue+0x60>)
 80065e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80065e8:	4b07      	ldr	r3, [pc, #28]	@ (8006608 <prvCheckForValidListAndQueue+0x60>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d005      	beq.n	80065fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80065f0:	4b05      	ldr	r3, [pc, #20]	@ (8006608 <prvCheckForValidListAndQueue+0x60>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	490b      	ldr	r1, [pc, #44]	@ (8006624 <prvCheckForValidListAndQueue+0x7c>)
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7fe fc42 	bl	8004e80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80065fc:	f000 f976 	bl	80068ec <vPortExitCritical>
}
 8006600:	bf00      	nop
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	20001200 	.word	0x20001200
 800660c:	200011d0 	.word	0x200011d0
 8006610:	200011e4 	.word	0x200011e4
 8006614:	200011f8 	.word	0x200011f8
 8006618:	200011fc 	.word	0x200011fc
 800661c:	200012ac 	.word	0x200012ac
 8006620:	2000120c 	.word	0x2000120c
 8006624:	080078c8 	.word	0x080078c8

08006628 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	3b04      	subs	r3, #4
 8006638:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006640:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	3b04      	subs	r3, #4
 8006646:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	f023 0201 	bic.w	r2, r3, #1
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	3b04      	subs	r3, #4
 8006656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006658:	4a0c      	ldr	r2, [pc, #48]	@ (800668c <pxPortInitialiseStack+0x64>)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	3b14      	subs	r3, #20
 8006662:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	3b04      	subs	r3, #4
 800666e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f06f 0202 	mvn.w	r2, #2
 8006676:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	3b20      	subs	r3, #32
 800667c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800667e:	68fb      	ldr	r3, [r7, #12]
}
 8006680:	4618      	mov	r0, r3
 8006682:	3714      	adds	r7, #20
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	08006691 	.word	0x08006691

08006690 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006696:	2300      	movs	r3, #0
 8006698:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800669a:	4b13      	ldr	r3, [pc, #76]	@ (80066e8 <prvTaskExitError+0x58>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a2:	d00b      	beq.n	80066bc <prvTaskExitError+0x2c>
	__asm volatile
 80066a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a8:	f383 8811 	msr	BASEPRI, r3
 80066ac:	f3bf 8f6f 	isb	sy
 80066b0:	f3bf 8f4f 	dsb	sy
 80066b4:	60fb      	str	r3, [r7, #12]
}
 80066b6:	bf00      	nop
 80066b8:	bf00      	nop
 80066ba:	e7fd      	b.n	80066b8 <prvTaskExitError+0x28>
	__asm volatile
 80066bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c0:	f383 8811 	msr	BASEPRI, r3
 80066c4:	f3bf 8f6f 	isb	sy
 80066c8:	f3bf 8f4f 	dsb	sy
 80066cc:	60bb      	str	r3, [r7, #8]
}
 80066ce:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80066d0:	bf00      	nop
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d0fc      	beq.n	80066d2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80066d8:	bf00      	nop
 80066da:	bf00      	nop
 80066dc:	3714      	adds	r7, #20
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	2000000c 	.word	0x2000000c
 80066ec:	00000000 	.word	0x00000000

080066f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80066f0:	4b07      	ldr	r3, [pc, #28]	@ (8006710 <pxCurrentTCBConst2>)
 80066f2:	6819      	ldr	r1, [r3, #0]
 80066f4:	6808      	ldr	r0, [r1, #0]
 80066f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066fa:	f380 8809 	msr	PSP, r0
 80066fe:	f3bf 8f6f 	isb	sy
 8006702:	f04f 0000 	mov.w	r0, #0
 8006706:	f380 8811 	msr	BASEPRI, r0
 800670a:	4770      	bx	lr
 800670c:	f3af 8000 	nop.w

08006710 <pxCurrentTCBConst2>:
 8006710:	20000cd0 	.word	0x20000cd0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006714:	bf00      	nop
 8006716:	bf00      	nop

08006718 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006718:	4808      	ldr	r0, [pc, #32]	@ (800673c <prvPortStartFirstTask+0x24>)
 800671a:	6800      	ldr	r0, [r0, #0]
 800671c:	6800      	ldr	r0, [r0, #0]
 800671e:	f380 8808 	msr	MSP, r0
 8006722:	f04f 0000 	mov.w	r0, #0
 8006726:	f380 8814 	msr	CONTROL, r0
 800672a:	b662      	cpsie	i
 800672c:	b661      	cpsie	f
 800672e:	f3bf 8f4f 	dsb	sy
 8006732:	f3bf 8f6f 	isb	sy
 8006736:	df00      	svc	0
 8006738:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800673a:	bf00      	nop
 800673c:	e000ed08 	.word	0xe000ed08

08006740 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006746:	4b47      	ldr	r3, [pc, #284]	@ (8006864 <xPortStartScheduler+0x124>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a47      	ldr	r2, [pc, #284]	@ (8006868 <xPortStartScheduler+0x128>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d10b      	bne.n	8006768 <xPortStartScheduler+0x28>
	__asm volatile
 8006750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006754:	f383 8811 	msr	BASEPRI, r3
 8006758:	f3bf 8f6f 	isb	sy
 800675c:	f3bf 8f4f 	dsb	sy
 8006760:	613b      	str	r3, [r7, #16]
}
 8006762:	bf00      	nop
 8006764:	bf00      	nop
 8006766:	e7fd      	b.n	8006764 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006768:	4b3e      	ldr	r3, [pc, #248]	@ (8006864 <xPortStartScheduler+0x124>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a3f      	ldr	r2, [pc, #252]	@ (800686c <xPortStartScheduler+0x12c>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d10b      	bne.n	800678a <xPortStartScheduler+0x4a>
	__asm volatile
 8006772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006776:	f383 8811 	msr	BASEPRI, r3
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	60fb      	str	r3, [r7, #12]
}
 8006784:	bf00      	nop
 8006786:	bf00      	nop
 8006788:	e7fd      	b.n	8006786 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800678a:	4b39      	ldr	r3, [pc, #228]	@ (8006870 <xPortStartScheduler+0x130>)
 800678c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	b2db      	uxtb	r3, r3
 8006794:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	22ff      	movs	r2, #255	@ 0xff
 800679a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80067a4:	78fb      	ldrb	r3, [r7, #3]
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80067ac:	b2da      	uxtb	r2, r3
 80067ae:	4b31      	ldr	r3, [pc, #196]	@ (8006874 <xPortStartScheduler+0x134>)
 80067b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80067b2:	4b31      	ldr	r3, [pc, #196]	@ (8006878 <xPortStartScheduler+0x138>)
 80067b4:	2207      	movs	r2, #7
 80067b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067b8:	e009      	b.n	80067ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80067ba:	4b2f      	ldr	r3, [pc, #188]	@ (8006878 <xPortStartScheduler+0x138>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	3b01      	subs	r3, #1
 80067c0:	4a2d      	ldr	r2, [pc, #180]	@ (8006878 <xPortStartScheduler+0x138>)
 80067c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80067c4:	78fb      	ldrb	r3, [r7, #3]
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	005b      	lsls	r3, r3, #1
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067ce:	78fb      	ldrb	r3, [r7, #3]
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067d6:	2b80      	cmp	r3, #128	@ 0x80
 80067d8:	d0ef      	beq.n	80067ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80067da:	4b27      	ldr	r3, [pc, #156]	@ (8006878 <xPortStartScheduler+0x138>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f1c3 0307 	rsb	r3, r3, #7
 80067e2:	2b04      	cmp	r3, #4
 80067e4:	d00b      	beq.n	80067fe <xPortStartScheduler+0xbe>
	__asm volatile
 80067e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ea:	f383 8811 	msr	BASEPRI, r3
 80067ee:	f3bf 8f6f 	isb	sy
 80067f2:	f3bf 8f4f 	dsb	sy
 80067f6:	60bb      	str	r3, [r7, #8]
}
 80067f8:	bf00      	nop
 80067fa:	bf00      	nop
 80067fc:	e7fd      	b.n	80067fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80067fe:	4b1e      	ldr	r3, [pc, #120]	@ (8006878 <xPortStartScheduler+0x138>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	021b      	lsls	r3, r3, #8
 8006804:	4a1c      	ldr	r2, [pc, #112]	@ (8006878 <xPortStartScheduler+0x138>)
 8006806:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006808:	4b1b      	ldr	r3, [pc, #108]	@ (8006878 <xPortStartScheduler+0x138>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006810:	4a19      	ldr	r2, [pc, #100]	@ (8006878 <xPortStartScheduler+0x138>)
 8006812:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	b2da      	uxtb	r2, r3
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800681c:	4b17      	ldr	r3, [pc, #92]	@ (800687c <xPortStartScheduler+0x13c>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a16      	ldr	r2, [pc, #88]	@ (800687c <xPortStartScheduler+0x13c>)
 8006822:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006826:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006828:	4b14      	ldr	r3, [pc, #80]	@ (800687c <xPortStartScheduler+0x13c>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a13      	ldr	r2, [pc, #76]	@ (800687c <xPortStartScheduler+0x13c>)
 800682e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006832:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006834:	f000 f8da 	bl	80069ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006838:	4b11      	ldr	r3, [pc, #68]	@ (8006880 <xPortStartScheduler+0x140>)
 800683a:	2200      	movs	r2, #0
 800683c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800683e:	f000 f8f9 	bl	8006a34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006842:	4b10      	ldr	r3, [pc, #64]	@ (8006884 <xPortStartScheduler+0x144>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a0f      	ldr	r2, [pc, #60]	@ (8006884 <xPortStartScheduler+0x144>)
 8006848:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800684c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800684e:	f7ff ff63 	bl	8006718 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006852:	f7fe ff2d 	bl	80056b0 <vTaskSwitchContext>
	prvTaskExitError();
 8006856:	f7ff ff1b 	bl	8006690 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	3718      	adds	r7, #24
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	e000ed00 	.word	0xe000ed00
 8006868:	410fc271 	.word	0x410fc271
 800686c:	410fc270 	.word	0x410fc270
 8006870:	e000e400 	.word	0xe000e400
 8006874:	200012fc 	.word	0x200012fc
 8006878:	20001300 	.word	0x20001300
 800687c:	e000ed20 	.word	0xe000ed20
 8006880:	2000000c 	.word	0x2000000c
 8006884:	e000ef34 	.word	0xe000ef34

08006888 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
	__asm volatile
 800688e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	607b      	str	r3, [r7, #4]
}
 80068a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80068a2:	4b10      	ldr	r3, [pc, #64]	@ (80068e4 <vPortEnterCritical+0x5c>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	3301      	adds	r3, #1
 80068a8:	4a0e      	ldr	r2, [pc, #56]	@ (80068e4 <vPortEnterCritical+0x5c>)
 80068aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80068ac:	4b0d      	ldr	r3, [pc, #52]	@ (80068e4 <vPortEnterCritical+0x5c>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d110      	bne.n	80068d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80068b4:	4b0c      	ldr	r3, [pc, #48]	@ (80068e8 <vPortEnterCritical+0x60>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00b      	beq.n	80068d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80068be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c2:	f383 8811 	msr	BASEPRI, r3
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	603b      	str	r3, [r7, #0]
}
 80068d0:	bf00      	nop
 80068d2:	bf00      	nop
 80068d4:	e7fd      	b.n	80068d2 <vPortEnterCritical+0x4a>
	}
}
 80068d6:	bf00      	nop
 80068d8:	370c      	adds	r7, #12
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	2000000c 	.word	0x2000000c
 80068e8:	e000ed04 	.word	0xe000ed04

080068ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80068f2:	4b12      	ldr	r3, [pc, #72]	@ (800693c <vPortExitCritical+0x50>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10b      	bne.n	8006912 <vPortExitCritical+0x26>
	__asm volatile
 80068fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068fe:	f383 8811 	msr	BASEPRI, r3
 8006902:	f3bf 8f6f 	isb	sy
 8006906:	f3bf 8f4f 	dsb	sy
 800690a:	607b      	str	r3, [r7, #4]
}
 800690c:	bf00      	nop
 800690e:	bf00      	nop
 8006910:	e7fd      	b.n	800690e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006912:	4b0a      	ldr	r3, [pc, #40]	@ (800693c <vPortExitCritical+0x50>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	3b01      	subs	r3, #1
 8006918:	4a08      	ldr	r2, [pc, #32]	@ (800693c <vPortExitCritical+0x50>)
 800691a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800691c:	4b07      	ldr	r3, [pc, #28]	@ (800693c <vPortExitCritical+0x50>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d105      	bne.n	8006930 <vPortExitCritical+0x44>
 8006924:	2300      	movs	r3, #0
 8006926:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	f383 8811 	msr	BASEPRI, r3
}
 800692e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr
 800693c:	2000000c 	.word	0x2000000c

08006940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006940:	f3ef 8009 	mrs	r0, PSP
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	4b15      	ldr	r3, [pc, #84]	@ (80069a0 <pxCurrentTCBConst>)
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	f01e 0f10 	tst.w	lr, #16
 8006950:	bf08      	it	eq
 8006952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800695a:	6010      	str	r0, [r2, #0]
 800695c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006960:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006964:	f380 8811 	msr	BASEPRI, r0
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	f3bf 8f6f 	isb	sy
 8006970:	f7fe fe9e 	bl	80056b0 <vTaskSwitchContext>
 8006974:	f04f 0000 	mov.w	r0, #0
 8006978:	f380 8811 	msr	BASEPRI, r0
 800697c:	bc09      	pop	{r0, r3}
 800697e:	6819      	ldr	r1, [r3, #0]
 8006980:	6808      	ldr	r0, [r1, #0]
 8006982:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006986:	f01e 0f10 	tst.w	lr, #16
 800698a:	bf08      	it	eq
 800698c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006990:	f380 8809 	msr	PSP, r0
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	f3af 8000 	nop.w

080069a0 <pxCurrentTCBConst>:
 80069a0:	20000cd0 	.word	0x20000cd0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80069a4:	bf00      	nop
 80069a6:	bf00      	nop

080069a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
	__asm volatile
 80069ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	607b      	str	r3, [r7, #4]
}
 80069c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80069c2:	f7fe fdbb 	bl	800553c <xTaskIncrementTick>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d003      	beq.n	80069d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80069cc:	4b06      	ldr	r3, [pc, #24]	@ (80069e8 <xPortSysTickHandler+0x40>)
 80069ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069d2:	601a      	str	r2, [r3, #0]
 80069d4:	2300      	movs	r3, #0
 80069d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	f383 8811 	msr	BASEPRI, r3
}
 80069de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80069e0:	bf00      	nop
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	e000ed04 	.word	0xe000ed04

080069ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80069ec:	b480      	push	{r7}
 80069ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80069f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006a20 <vPortSetupTimerInterrupt+0x34>)
 80069f2:	2200      	movs	r2, #0
 80069f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80069f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006a24 <vPortSetupTimerInterrupt+0x38>)
 80069f8:	2200      	movs	r2, #0
 80069fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80069fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006a28 <vPortSetupTimerInterrupt+0x3c>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a0a      	ldr	r2, [pc, #40]	@ (8006a2c <vPortSetupTimerInterrupt+0x40>)
 8006a02:	fba2 2303 	umull	r2, r3, r2, r3
 8006a06:	099b      	lsrs	r3, r3, #6
 8006a08:	4a09      	ldr	r2, [pc, #36]	@ (8006a30 <vPortSetupTimerInterrupt+0x44>)
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a0e:	4b04      	ldr	r3, [pc, #16]	@ (8006a20 <vPortSetupTimerInterrupt+0x34>)
 8006a10:	2207      	movs	r2, #7
 8006a12:	601a      	str	r2, [r3, #0]
}
 8006a14:	bf00      	nop
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	e000e010 	.word	0xe000e010
 8006a24:	e000e018 	.word	0xe000e018
 8006a28:	20000000 	.word	0x20000000
 8006a2c:	10624dd3 	.word	0x10624dd3
 8006a30:	e000e014 	.word	0xe000e014

08006a34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006a44 <vPortEnableVFP+0x10>
 8006a38:	6801      	ldr	r1, [r0, #0]
 8006a3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006a3e:	6001      	str	r1, [r0, #0]
 8006a40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006a42:	bf00      	nop
 8006a44:	e000ed88 	.word	0xe000ed88

08006a48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006a4e:	f3ef 8305 	mrs	r3, IPSR
 8006a52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2b0f      	cmp	r3, #15
 8006a58:	d915      	bls.n	8006a86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006a5a:	4a18      	ldr	r2, [pc, #96]	@ (8006abc <vPortValidateInterruptPriority+0x74>)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	4413      	add	r3, r2
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006a64:	4b16      	ldr	r3, [pc, #88]	@ (8006ac0 <vPortValidateInterruptPriority+0x78>)
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	7afa      	ldrb	r2, [r7, #11]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d20b      	bcs.n	8006a86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a72:	f383 8811 	msr	BASEPRI, r3
 8006a76:	f3bf 8f6f 	isb	sy
 8006a7a:	f3bf 8f4f 	dsb	sy
 8006a7e:	607b      	str	r3, [r7, #4]
}
 8006a80:	bf00      	nop
 8006a82:	bf00      	nop
 8006a84:	e7fd      	b.n	8006a82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006a86:	4b0f      	ldr	r3, [pc, #60]	@ (8006ac4 <vPortValidateInterruptPriority+0x7c>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8006ac8 <vPortValidateInterruptPriority+0x80>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d90b      	bls.n	8006aae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a9a:	f383 8811 	msr	BASEPRI, r3
 8006a9e:	f3bf 8f6f 	isb	sy
 8006aa2:	f3bf 8f4f 	dsb	sy
 8006aa6:	603b      	str	r3, [r7, #0]
}
 8006aa8:	bf00      	nop
 8006aaa:	bf00      	nop
 8006aac:	e7fd      	b.n	8006aaa <vPortValidateInterruptPriority+0x62>
	}
 8006aae:	bf00      	nop
 8006ab0:	3714      	adds	r7, #20
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	e000e3f0 	.word	0xe000e3f0
 8006ac0:	200012fc 	.word	0x200012fc
 8006ac4:	e000ed0c 	.word	0xe000ed0c
 8006ac8:	20001300 	.word	0x20001300

08006acc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b08a      	sub	sp, #40	@ 0x28
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ad8:	f7fe fc74 	bl	80053c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006adc:	4b5c      	ldr	r3, [pc, #368]	@ (8006c50 <pvPortMalloc+0x184>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d101      	bne.n	8006ae8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ae4:	f000 f924 	bl	8006d30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ae8:	4b5a      	ldr	r3, [pc, #360]	@ (8006c54 <pvPortMalloc+0x188>)
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4013      	ands	r3, r2
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f040 8095 	bne.w	8006c20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d01e      	beq.n	8006b3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006afc:	2208      	movs	r2, #8
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4413      	add	r3, r2
 8006b02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f003 0307 	and.w	r3, r3, #7
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d015      	beq.n	8006b3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f023 0307 	bic.w	r3, r3, #7
 8006b14:	3308      	adds	r3, #8
 8006b16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f003 0307 	and.w	r3, r3, #7
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00b      	beq.n	8006b3a <pvPortMalloc+0x6e>
	__asm volatile
 8006b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b26:	f383 8811 	msr	BASEPRI, r3
 8006b2a:	f3bf 8f6f 	isb	sy
 8006b2e:	f3bf 8f4f 	dsb	sy
 8006b32:	617b      	str	r3, [r7, #20]
}
 8006b34:	bf00      	nop
 8006b36:	bf00      	nop
 8006b38:	e7fd      	b.n	8006b36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d06f      	beq.n	8006c20 <pvPortMalloc+0x154>
 8006b40:	4b45      	ldr	r3, [pc, #276]	@ (8006c58 <pvPortMalloc+0x18c>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d86a      	bhi.n	8006c20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b4a:	4b44      	ldr	r3, [pc, #272]	@ (8006c5c <pvPortMalloc+0x190>)
 8006b4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b4e:	4b43      	ldr	r3, [pc, #268]	@ (8006c5c <pvPortMalloc+0x190>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b54:	e004      	b.n	8006b60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d903      	bls.n	8006b72 <pvPortMalloc+0xa6>
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1f1      	bne.n	8006b56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b72:	4b37      	ldr	r3, [pc, #220]	@ (8006c50 <pvPortMalloc+0x184>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d051      	beq.n	8006c20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b7c:	6a3b      	ldr	r3, [r7, #32]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2208      	movs	r2, #8
 8006b82:	4413      	add	r3, r2
 8006b84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b90:	685a      	ldr	r2, [r3, #4]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	1ad2      	subs	r2, r2, r3
 8006b96:	2308      	movs	r3, #8
 8006b98:	005b      	lsls	r3, r3, #1
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d920      	bls.n	8006be0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	f003 0307 	and.w	r3, r3, #7
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00b      	beq.n	8006bc8 <pvPortMalloc+0xfc>
	__asm volatile
 8006bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb4:	f383 8811 	msr	BASEPRI, r3
 8006bb8:	f3bf 8f6f 	isb	sy
 8006bbc:	f3bf 8f4f 	dsb	sy
 8006bc0:	613b      	str	r3, [r7, #16]
}
 8006bc2:	bf00      	nop
 8006bc4:	bf00      	nop
 8006bc6:	e7fd      	b.n	8006bc4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bca:	685a      	ldr	r2, [r3, #4]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	1ad2      	subs	r2, r2, r3
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006bda:	69b8      	ldr	r0, [r7, #24]
 8006bdc:	f000 f90a 	bl	8006df4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006be0:	4b1d      	ldr	r3, [pc, #116]	@ (8006c58 <pvPortMalloc+0x18c>)
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	4a1b      	ldr	r2, [pc, #108]	@ (8006c58 <pvPortMalloc+0x18c>)
 8006bec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006bee:	4b1a      	ldr	r3, [pc, #104]	@ (8006c58 <pvPortMalloc+0x18c>)
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8006c60 <pvPortMalloc+0x194>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d203      	bcs.n	8006c02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006bfa:	4b17      	ldr	r3, [pc, #92]	@ (8006c58 <pvPortMalloc+0x18c>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a18      	ldr	r2, [pc, #96]	@ (8006c60 <pvPortMalloc+0x194>)
 8006c00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	4b13      	ldr	r3, [pc, #76]	@ (8006c54 <pvPortMalloc+0x188>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	431a      	orrs	r2, r3
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c12:	2200      	movs	r2, #0
 8006c14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006c16:	4b13      	ldr	r3, [pc, #76]	@ (8006c64 <pvPortMalloc+0x198>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	4a11      	ldr	r2, [pc, #68]	@ (8006c64 <pvPortMalloc+0x198>)
 8006c1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c20:	f7fe fbde 	bl	80053e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	f003 0307 	and.w	r3, r3, #7
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00b      	beq.n	8006c46 <pvPortMalloc+0x17a>
	__asm volatile
 8006c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	60fb      	str	r3, [r7, #12]
}
 8006c40:	bf00      	nop
 8006c42:	bf00      	nop
 8006c44:	e7fd      	b.n	8006c42 <pvPortMalloc+0x176>
	return pvReturn;
 8006c46:	69fb      	ldr	r3, [r7, #28]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3728      	adds	r7, #40	@ 0x28
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	20004f0c 	.word	0x20004f0c
 8006c54:	20004f20 	.word	0x20004f20
 8006c58:	20004f10 	.word	0x20004f10
 8006c5c:	20004f04 	.word	0x20004f04
 8006c60:	20004f14 	.word	0x20004f14
 8006c64:	20004f18 	.word	0x20004f18

08006c68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b086      	sub	sp, #24
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d04f      	beq.n	8006d1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c7a:	2308      	movs	r3, #8
 8006c7c:	425b      	negs	r3, r3
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	4413      	add	r3, r2
 8006c82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	685a      	ldr	r2, [r3, #4]
 8006c8c:	4b25      	ldr	r3, [pc, #148]	@ (8006d24 <vPortFree+0xbc>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4013      	ands	r3, r2
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d10b      	bne.n	8006cae <vPortFree+0x46>
	__asm volatile
 8006c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	60fb      	str	r3, [r7, #12]
}
 8006ca8:	bf00      	nop
 8006caa:	bf00      	nop
 8006cac:	e7fd      	b.n	8006caa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00b      	beq.n	8006cce <vPortFree+0x66>
	__asm volatile
 8006cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cba:	f383 8811 	msr	BASEPRI, r3
 8006cbe:	f3bf 8f6f 	isb	sy
 8006cc2:	f3bf 8f4f 	dsb	sy
 8006cc6:	60bb      	str	r3, [r7, #8]
}
 8006cc8:	bf00      	nop
 8006cca:	bf00      	nop
 8006ccc:	e7fd      	b.n	8006cca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	685a      	ldr	r2, [r3, #4]
 8006cd2:	4b14      	ldr	r3, [pc, #80]	@ (8006d24 <vPortFree+0xbc>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d01e      	beq.n	8006d1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d11a      	bne.n	8006d1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	685a      	ldr	r2, [r3, #4]
 8006ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8006d24 <vPortFree+0xbc>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	43db      	mvns	r3, r3
 8006cee:	401a      	ands	r2, r3
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006cf4:	f7fe fb66 	bl	80053c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	685a      	ldr	r2, [r3, #4]
 8006cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8006d28 <vPortFree+0xc0>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4413      	add	r3, r2
 8006d02:	4a09      	ldr	r2, [pc, #36]	@ (8006d28 <vPortFree+0xc0>)
 8006d04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d06:	6938      	ldr	r0, [r7, #16]
 8006d08:	f000 f874 	bl	8006df4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006d0c:	4b07      	ldr	r3, [pc, #28]	@ (8006d2c <vPortFree+0xc4>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	3301      	adds	r3, #1
 8006d12:	4a06      	ldr	r2, [pc, #24]	@ (8006d2c <vPortFree+0xc4>)
 8006d14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006d16:	f7fe fb63 	bl	80053e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d1a:	bf00      	nop
 8006d1c:	3718      	adds	r7, #24
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	20004f20 	.word	0x20004f20
 8006d28:	20004f10 	.word	0x20004f10
 8006d2c:	20004f1c 	.word	0x20004f1c

08006d30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d36:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006d3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d3c:	4b27      	ldr	r3, [pc, #156]	@ (8006ddc <prvHeapInit+0xac>)
 8006d3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f003 0307 	and.w	r3, r3, #7
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00c      	beq.n	8006d64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	3307      	adds	r3, #7
 8006d4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f023 0307 	bic.w	r3, r3, #7
 8006d56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	4a1f      	ldr	r2, [pc, #124]	@ (8006ddc <prvHeapInit+0xac>)
 8006d60:	4413      	add	r3, r2
 8006d62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d68:	4a1d      	ldr	r2, [pc, #116]	@ (8006de0 <prvHeapInit+0xb0>)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8006de0 <prvHeapInit+0xb0>)
 8006d70:	2200      	movs	r2, #0
 8006d72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	4413      	add	r3, r2
 8006d7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d7c:	2208      	movs	r2, #8
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	1a9b      	subs	r3, r3, r2
 8006d82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f023 0307 	bic.w	r3, r3, #7
 8006d8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	4a15      	ldr	r2, [pc, #84]	@ (8006de4 <prvHeapInit+0xb4>)
 8006d90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d92:	4b14      	ldr	r3, [pc, #80]	@ (8006de4 <prvHeapInit+0xb4>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2200      	movs	r2, #0
 8006d98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d9a:	4b12      	ldr	r3, [pc, #72]	@ (8006de4 <prvHeapInit+0xb4>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	1ad2      	subs	r2, r2, r3
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006db0:	4b0c      	ldr	r3, [pc, #48]	@ (8006de4 <prvHeapInit+0xb4>)
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	4a0a      	ldr	r2, [pc, #40]	@ (8006de8 <prvHeapInit+0xb8>)
 8006dbe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	4a09      	ldr	r2, [pc, #36]	@ (8006dec <prvHeapInit+0xbc>)
 8006dc6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006dc8:	4b09      	ldr	r3, [pc, #36]	@ (8006df0 <prvHeapInit+0xc0>)
 8006dca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006dce:	601a      	str	r2, [r3, #0]
}
 8006dd0:	bf00      	nop
 8006dd2:	3714      	adds	r7, #20
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr
 8006ddc:	20001304 	.word	0x20001304
 8006de0:	20004f04 	.word	0x20004f04
 8006de4:	20004f0c 	.word	0x20004f0c
 8006de8:	20004f14 	.word	0x20004f14
 8006dec:	20004f10 	.word	0x20004f10
 8006df0:	20004f20 	.word	0x20004f20

08006df4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006dfc:	4b28      	ldr	r3, [pc, #160]	@ (8006ea0 <prvInsertBlockIntoFreeList+0xac>)
 8006dfe:	60fb      	str	r3, [r7, #12]
 8006e00:	e002      	b.n	8006e08 <prvInsertBlockIntoFreeList+0x14>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	60fb      	str	r3, [r7, #12]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d8f7      	bhi.n	8006e02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d108      	bne.n	8006e36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	685a      	ldr	r2, [r3, #4]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	441a      	add	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	441a      	add	r2, r3
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d118      	bne.n	8006e7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	4b15      	ldr	r3, [pc, #84]	@ (8006ea4 <prvInsertBlockIntoFreeList+0xb0>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d00d      	beq.n	8006e72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	685a      	ldr	r2, [r3, #4]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	441a      	add	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	601a      	str	r2, [r3, #0]
 8006e70:	e008      	b.n	8006e84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e72:	4b0c      	ldr	r3, [pc, #48]	@ (8006ea4 <prvInsertBlockIntoFreeList+0xb0>)
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	601a      	str	r2, [r3, #0]
 8006e7a:	e003      	b.n	8006e84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d002      	beq.n	8006e92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e92:	bf00      	nop
 8006e94:	3714      	adds	r7, #20
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	20004f04 	.word	0x20004f04
 8006ea4:	20004f0c 	.word	0x20004f0c

08006ea8 <siprintf>:
 8006ea8:	b40e      	push	{r1, r2, r3}
 8006eaa:	b500      	push	{lr}
 8006eac:	b09c      	sub	sp, #112	@ 0x70
 8006eae:	ab1d      	add	r3, sp, #116	@ 0x74
 8006eb0:	9002      	str	r0, [sp, #8]
 8006eb2:	9006      	str	r0, [sp, #24]
 8006eb4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006eb8:	4809      	ldr	r0, [pc, #36]	@ (8006ee0 <siprintf+0x38>)
 8006eba:	9107      	str	r1, [sp, #28]
 8006ebc:	9104      	str	r1, [sp, #16]
 8006ebe:	4909      	ldr	r1, [pc, #36]	@ (8006ee4 <siprintf+0x3c>)
 8006ec0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ec4:	9105      	str	r1, [sp, #20]
 8006ec6:	6800      	ldr	r0, [r0, #0]
 8006ec8:	9301      	str	r3, [sp, #4]
 8006eca:	a902      	add	r1, sp, #8
 8006ecc:	f000 f9a2 	bl	8007214 <_svfiprintf_r>
 8006ed0:	9b02      	ldr	r3, [sp, #8]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	701a      	strb	r2, [r3, #0]
 8006ed6:	b01c      	add	sp, #112	@ 0x70
 8006ed8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006edc:	b003      	add	sp, #12
 8006ede:	4770      	bx	lr
 8006ee0:	20000010 	.word	0x20000010
 8006ee4:	ffff0208 	.word	0xffff0208

08006ee8 <memset>:
 8006ee8:	4402      	add	r2, r0
 8006eea:	4603      	mov	r3, r0
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d100      	bne.n	8006ef2 <memset+0xa>
 8006ef0:	4770      	bx	lr
 8006ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ef6:	e7f9      	b.n	8006eec <memset+0x4>

08006ef8 <__errno>:
 8006ef8:	4b01      	ldr	r3, [pc, #4]	@ (8006f00 <__errno+0x8>)
 8006efa:	6818      	ldr	r0, [r3, #0]
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	20000010 	.word	0x20000010

08006f04 <__libc_init_array>:
 8006f04:	b570      	push	{r4, r5, r6, lr}
 8006f06:	4d0d      	ldr	r5, [pc, #52]	@ (8006f3c <__libc_init_array+0x38>)
 8006f08:	4c0d      	ldr	r4, [pc, #52]	@ (8006f40 <__libc_init_array+0x3c>)
 8006f0a:	1b64      	subs	r4, r4, r5
 8006f0c:	10a4      	asrs	r4, r4, #2
 8006f0e:	2600      	movs	r6, #0
 8006f10:	42a6      	cmp	r6, r4
 8006f12:	d109      	bne.n	8006f28 <__libc_init_array+0x24>
 8006f14:	4d0b      	ldr	r5, [pc, #44]	@ (8006f44 <__libc_init_array+0x40>)
 8006f16:	4c0c      	ldr	r4, [pc, #48]	@ (8006f48 <__libc_init_array+0x44>)
 8006f18:	f000 fc66 	bl	80077e8 <_init>
 8006f1c:	1b64      	subs	r4, r4, r5
 8006f1e:	10a4      	asrs	r4, r4, #2
 8006f20:	2600      	movs	r6, #0
 8006f22:	42a6      	cmp	r6, r4
 8006f24:	d105      	bne.n	8006f32 <__libc_init_array+0x2e>
 8006f26:	bd70      	pop	{r4, r5, r6, pc}
 8006f28:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f2c:	4798      	blx	r3
 8006f2e:	3601      	adds	r6, #1
 8006f30:	e7ee      	b.n	8006f10 <__libc_init_array+0xc>
 8006f32:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f36:	4798      	blx	r3
 8006f38:	3601      	adds	r6, #1
 8006f3a:	e7f2      	b.n	8006f22 <__libc_init_array+0x1e>
 8006f3c:	08007a3c 	.word	0x08007a3c
 8006f40:	08007a3c 	.word	0x08007a3c
 8006f44:	08007a3c 	.word	0x08007a3c
 8006f48:	08007a40 	.word	0x08007a40

08006f4c <__retarget_lock_acquire_recursive>:
 8006f4c:	4770      	bx	lr

08006f4e <__retarget_lock_release_recursive>:
 8006f4e:	4770      	bx	lr

08006f50 <memcpy>:
 8006f50:	440a      	add	r2, r1
 8006f52:	4291      	cmp	r1, r2
 8006f54:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f58:	d100      	bne.n	8006f5c <memcpy+0xc>
 8006f5a:	4770      	bx	lr
 8006f5c:	b510      	push	{r4, lr}
 8006f5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f66:	4291      	cmp	r1, r2
 8006f68:	d1f9      	bne.n	8006f5e <memcpy+0xe>
 8006f6a:	bd10      	pop	{r4, pc}

08006f6c <_free_r>:
 8006f6c:	b538      	push	{r3, r4, r5, lr}
 8006f6e:	4605      	mov	r5, r0
 8006f70:	2900      	cmp	r1, #0
 8006f72:	d041      	beq.n	8006ff8 <_free_r+0x8c>
 8006f74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f78:	1f0c      	subs	r4, r1, #4
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	bfb8      	it	lt
 8006f7e:	18e4      	addlt	r4, r4, r3
 8006f80:	f000 f8e0 	bl	8007144 <__malloc_lock>
 8006f84:	4a1d      	ldr	r2, [pc, #116]	@ (8006ffc <_free_r+0x90>)
 8006f86:	6813      	ldr	r3, [r2, #0]
 8006f88:	b933      	cbnz	r3, 8006f98 <_free_r+0x2c>
 8006f8a:	6063      	str	r3, [r4, #4]
 8006f8c:	6014      	str	r4, [r2, #0]
 8006f8e:	4628      	mov	r0, r5
 8006f90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f94:	f000 b8dc 	b.w	8007150 <__malloc_unlock>
 8006f98:	42a3      	cmp	r3, r4
 8006f9a:	d908      	bls.n	8006fae <_free_r+0x42>
 8006f9c:	6820      	ldr	r0, [r4, #0]
 8006f9e:	1821      	adds	r1, r4, r0
 8006fa0:	428b      	cmp	r3, r1
 8006fa2:	bf01      	itttt	eq
 8006fa4:	6819      	ldreq	r1, [r3, #0]
 8006fa6:	685b      	ldreq	r3, [r3, #4]
 8006fa8:	1809      	addeq	r1, r1, r0
 8006faa:	6021      	streq	r1, [r4, #0]
 8006fac:	e7ed      	b.n	8006f8a <_free_r+0x1e>
 8006fae:	461a      	mov	r2, r3
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	b10b      	cbz	r3, 8006fb8 <_free_r+0x4c>
 8006fb4:	42a3      	cmp	r3, r4
 8006fb6:	d9fa      	bls.n	8006fae <_free_r+0x42>
 8006fb8:	6811      	ldr	r1, [r2, #0]
 8006fba:	1850      	adds	r0, r2, r1
 8006fbc:	42a0      	cmp	r0, r4
 8006fbe:	d10b      	bne.n	8006fd8 <_free_r+0x6c>
 8006fc0:	6820      	ldr	r0, [r4, #0]
 8006fc2:	4401      	add	r1, r0
 8006fc4:	1850      	adds	r0, r2, r1
 8006fc6:	4283      	cmp	r3, r0
 8006fc8:	6011      	str	r1, [r2, #0]
 8006fca:	d1e0      	bne.n	8006f8e <_free_r+0x22>
 8006fcc:	6818      	ldr	r0, [r3, #0]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	6053      	str	r3, [r2, #4]
 8006fd2:	4408      	add	r0, r1
 8006fd4:	6010      	str	r0, [r2, #0]
 8006fd6:	e7da      	b.n	8006f8e <_free_r+0x22>
 8006fd8:	d902      	bls.n	8006fe0 <_free_r+0x74>
 8006fda:	230c      	movs	r3, #12
 8006fdc:	602b      	str	r3, [r5, #0]
 8006fde:	e7d6      	b.n	8006f8e <_free_r+0x22>
 8006fe0:	6820      	ldr	r0, [r4, #0]
 8006fe2:	1821      	adds	r1, r4, r0
 8006fe4:	428b      	cmp	r3, r1
 8006fe6:	bf04      	itt	eq
 8006fe8:	6819      	ldreq	r1, [r3, #0]
 8006fea:	685b      	ldreq	r3, [r3, #4]
 8006fec:	6063      	str	r3, [r4, #4]
 8006fee:	bf04      	itt	eq
 8006ff0:	1809      	addeq	r1, r1, r0
 8006ff2:	6021      	streq	r1, [r4, #0]
 8006ff4:	6054      	str	r4, [r2, #4]
 8006ff6:	e7ca      	b.n	8006f8e <_free_r+0x22>
 8006ff8:	bd38      	pop	{r3, r4, r5, pc}
 8006ffa:	bf00      	nop
 8006ffc:	20005068 	.word	0x20005068

08007000 <sbrk_aligned>:
 8007000:	b570      	push	{r4, r5, r6, lr}
 8007002:	4e0f      	ldr	r6, [pc, #60]	@ (8007040 <sbrk_aligned+0x40>)
 8007004:	460c      	mov	r4, r1
 8007006:	6831      	ldr	r1, [r6, #0]
 8007008:	4605      	mov	r5, r0
 800700a:	b911      	cbnz	r1, 8007012 <sbrk_aligned+0x12>
 800700c:	f000 fba6 	bl	800775c <_sbrk_r>
 8007010:	6030      	str	r0, [r6, #0]
 8007012:	4621      	mov	r1, r4
 8007014:	4628      	mov	r0, r5
 8007016:	f000 fba1 	bl	800775c <_sbrk_r>
 800701a:	1c43      	adds	r3, r0, #1
 800701c:	d103      	bne.n	8007026 <sbrk_aligned+0x26>
 800701e:	f04f 34ff 	mov.w	r4, #4294967295
 8007022:	4620      	mov	r0, r4
 8007024:	bd70      	pop	{r4, r5, r6, pc}
 8007026:	1cc4      	adds	r4, r0, #3
 8007028:	f024 0403 	bic.w	r4, r4, #3
 800702c:	42a0      	cmp	r0, r4
 800702e:	d0f8      	beq.n	8007022 <sbrk_aligned+0x22>
 8007030:	1a21      	subs	r1, r4, r0
 8007032:	4628      	mov	r0, r5
 8007034:	f000 fb92 	bl	800775c <_sbrk_r>
 8007038:	3001      	adds	r0, #1
 800703a:	d1f2      	bne.n	8007022 <sbrk_aligned+0x22>
 800703c:	e7ef      	b.n	800701e <sbrk_aligned+0x1e>
 800703e:	bf00      	nop
 8007040:	20005064 	.word	0x20005064

08007044 <_malloc_r>:
 8007044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007048:	1ccd      	adds	r5, r1, #3
 800704a:	f025 0503 	bic.w	r5, r5, #3
 800704e:	3508      	adds	r5, #8
 8007050:	2d0c      	cmp	r5, #12
 8007052:	bf38      	it	cc
 8007054:	250c      	movcc	r5, #12
 8007056:	2d00      	cmp	r5, #0
 8007058:	4606      	mov	r6, r0
 800705a:	db01      	blt.n	8007060 <_malloc_r+0x1c>
 800705c:	42a9      	cmp	r1, r5
 800705e:	d904      	bls.n	800706a <_malloc_r+0x26>
 8007060:	230c      	movs	r3, #12
 8007062:	6033      	str	r3, [r6, #0]
 8007064:	2000      	movs	r0, #0
 8007066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800706a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007140 <_malloc_r+0xfc>
 800706e:	f000 f869 	bl	8007144 <__malloc_lock>
 8007072:	f8d8 3000 	ldr.w	r3, [r8]
 8007076:	461c      	mov	r4, r3
 8007078:	bb44      	cbnz	r4, 80070cc <_malloc_r+0x88>
 800707a:	4629      	mov	r1, r5
 800707c:	4630      	mov	r0, r6
 800707e:	f7ff ffbf 	bl	8007000 <sbrk_aligned>
 8007082:	1c43      	adds	r3, r0, #1
 8007084:	4604      	mov	r4, r0
 8007086:	d158      	bne.n	800713a <_malloc_r+0xf6>
 8007088:	f8d8 4000 	ldr.w	r4, [r8]
 800708c:	4627      	mov	r7, r4
 800708e:	2f00      	cmp	r7, #0
 8007090:	d143      	bne.n	800711a <_malloc_r+0xd6>
 8007092:	2c00      	cmp	r4, #0
 8007094:	d04b      	beq.n	800712e <_malloc_r+0xea>
 8007096:	6823      	ldr	r3, [r4, #0]
 8007098:	4639      	mov	r1, r7
 800709a:	4630      	mov	r0, r6
 800709c:	eb04 0903 	add.w	r9, r4, r3
 80070a0:	f000 fb5c 	bl	800775c <_sbrk_r>
 80070a4:	4581      	cmp	r9, r0
 80070a6:	d142      	bne.n	800712e <_malloc_r+0xea>
 80070a8:	6821      	ldr	r1, [r4, #0]
 80070aa:	1a6d      	subs	r5, r5, r1
 80070ac:	4629      	mov	r1, r5
 80070ae:	4630      	mov	r0, r6
 80070b0:	f7ff ffa6 	bl	8007000 <sbrk_aligned>
 80070b4:	3001      	adds	r0, #1
 80070b6:	d03a      	beq.n	800712e <_malloc_r+0xea>
 80070b8:	6823      	ldr	r3, [r4, #0]
 80070ba:	442b      	add	r3, r5
 80070bc:	6023      	str	r3, [r4, #0]
 80070be:	f8d8 3000 	ldr.w	r3, [r8]
 80070c2:	685a      	ldr	r2, [r3, #4]
 80070c4:	bb62      	cbnz	r2, 8007120 <_malloc_r+0xdc>
 80070c6:	f8c8 7000 	str.w	r7, [r8]
 80070ca:	e00f      	b.n	80070ec <_malloc_r+0xa8>
 80070cc:	6822      	ldr	r2, [r4, #0]
 80070ce:	1b52      	subs	r2, r2, r5
 80070d0:	d420      	bmi.n	8007114 <_malloc_r+0xd0>
 80070d2:	2a0b      	cmp	r2, #11
 80070d4:	d917      	bls.n	8007106 <_malloc_r+0xc2>
 80070d6:	1961      	adds	r1, r4, r5
 80070d8:	42a3      	cmp	r3, r4
 80070da:	6025      	str	r5, [r4, #0]
 80070dc:	bf18      	it	ne
 80070de:	6059      	strne	r1, [r3, #4]
 80070e0:	6863      	ldr	r3, [r4, #4]
 80070e2:	bf08      	it	eq
 80070e4:	f8c8 1000 	streq.w	r1, [r8]
 80070e8:	5162      	str	r2, [r4, r5]
 80070ea:	604b      	str	r3, [r1, #4]
 80070ec:	4630      	mov	r0, r6
 80070ee:	f000 f82f 	bl	8007150 <__malloc_unlock>
 80070f2:	f104 000b 	add.w	r0, r4, #11
 80070f6:	1d23      	adds	r3, r4, #4
 80070f8:	f020 0007 	bic.w	r0, r0, #7
 80070fc:	1ac2      	subs	r2, r0, r3
 80070fe:	bf1c      	itt	ne
 8007100:	1a1b      	subne	r3, r3, r0
 8007102:	50a3      	strne	r3, [r4, r2]
 8007104:	e7af      	b.n	8007066 <_malloc_r+0x22>
 8007106:	6862      	ldr	r2, [r4, #4]
 8007108:	42a3      	cmp	r3, r4
 800710a:	bf0c      	ite	eq
 800710c:	f8c8 2000 	streq.w	r2, [r8]
 8007110:	605a      	strne	r2, [r3, #4]
 8007112:	e7eb      	b.n	80070ec <_malloc_r+0xa8>
 8007114:	4623      	mov	r3, r4
 8007116:	6864      	ldr	r4, [r4, #4]
 8007118:	e7ae      	b.n	8007078 <_malloc_r+0x34>
 800711a:	463c      	mov	r4, r7
 800711c:	687f      	ldr	r7, [r7, #4]
 800711e:	e7b6      	b.n	800708e <_malloc_r+0x4a>
 8007120:	461a      	mov	r2, r3
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	42a3      	cmp	r3, r4
 8007126:	d1fb      	bne.n	8007120 <_malloc_r+0xdc>
 8007128:	2300      	movs	r3, #0
 800712a:	6053      	str	r3, [r2, #4]
 800712c:	e7de      	b.n	80070ec <_malloc_r+0xa8>
 800712e:	230c      	movs	r3, #12
 8007130:	6033      	str	r3, [r6, #0]
 8007132:	4630      	mov	r0, r6
 8007134:	f000 f80c 	bl	8007150 <__malloc_unlock>
 8007138:	e794      	b.n	8007064 <_malloc_r+0x20>
 800713a:	6005      	str	r5, [r0, #0]
 800713c:	e7d6      	b.n	80070ec <_malloc_r+0xa8>
 800713e:	bf00      	nop
 8007140:	20005068 	.word	0x20005068

08007144 <__malloc_lock>:
 8007144:	4801      	ldr	r0, [pc, #4]	@ (800714c <__malloc_lock+0x8>)
 8007146:	f7ff bf01 	b.w	8006f4c <__retarget_lock_acquire_recursive>
 800714a:	bf00      	nop
 800714c:	20005060 	.word	0x20005060

08007150 <__malloc_unlock>:
 8007150:	4801      	ldr	r0, [pc, #4]	@ (8007158 <__malloc_unlock+0x8>)
 8007152:	f7ff befc 	b.w	8006f4e <__retarget_lock_release_recursive>
 8007156:	bf00      	nop
 8007158:	20005060 	.word	0x20005060

0800715c <__ssputs_r>:
 800715c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007160:	688e      	ldr	r6, [r1, #8]
 8007162:	461f      	mov	r7, r3
 8007164:	42be      	cmp	r6, r7
 8007166:	680b      	ldr	r3, [r1, #0]
 8007168:	4682      	mov	sl, r0
 800716a:	460c      	mov	r4, r1
 800716c:	4690      	mov	r8, r2
 800716e:	d82d      	bhi.n	80071cc <__ssputs_r+0x70>
 8007170:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007174:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007178:	d026      	beq.n	80071c8 <__ssputs_r+0x6c>
 800717a:	6965      	ldr	r5, [r4, #20]
 800717c:	6909      	ldr	r1, [r1, #16]
 800717e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007182:	eba3 0901 	sub.w	r9, r3, r1
 8007186:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800718a:	1c7b      	adds	r3, r7, #1
 800718c:	444b      	add	r3, r9
 800718e:	106d      	asrs	r5, r5, #1
 8007190:	429d      	cmp	r5, r3
 8007192:	bf38      	it	cc
 8007194:	461d      	movcc	r5, r3
 8007196:	0553      	lsls	r3, r2, #21
 8007198:	d527      	bpl.n	80071ea <__ssputs_r+0x8e>
 800719a:	4629      	mov	r1, r5
 800719c:	f7ff ff52 	bl	8007044 <_malloc_r>
 80071a0:	4606      	mov	r6, r0
 80071a2:	b360      	cbz	r0, 80071fe <__ssputs_r+0xa2>
 80071a4:	6921      	ldr	r1, [r4, #16]
 80071a6:	464a      	mov	r2, r9
 80071a8:	f7ff fed2 	bl	8006f50 <memcpy>
 80071ac:	89a3      	ldrh	r3, [r4, #12]
 80071ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80071b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071b6:	81a3      	strh	r3, [r4, #12]
 80071b8:	6126      	str	r6, [r4, #16]
 80071ba:	6165      	str	r5, [r4, #20]
 80071bc:	444e      	add	r6, r9
 80071be:	eba5 0509 	sub.w	r5, r5, r9
 80071c2:	6026      	str	r6, [r4, #0]
 80071c4:	60a5      	str	r5, [r4, #8]
 80071c6:	463e      	mov	r6, r7
 80071c8:	42be      	cmp	r6, r7
 80071ca:	d900      	bls.n	80071ce <__ssputs_r+0x72>
 80071cc:	463e      	mov	r6, r7
 80071ce:	6820      	ldr	r0, [r4, #0]
 80071d0:	4632      	mov	r2, r6
 80071d2:	4641      	mov	r1, r8
 80071d4:	f000 faa8 	bl	8007728 <memmove>
 80071d8:	68a3      	ldr	r3, [r4, #8]
 80071da:	1b9b      	subs	r3, r3, r6
 80071dc:	60a3      	str	r3, [r4, #8]
 80071de:	6823      	ldr	r3, [r4, #0]
 80071e0:	4433      	add	r3, r6
 80071e2:	6023      	str	r3, [r4, #0]
 80071e4:	2000      	movs	r0, #0
 80071e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ea:	462a      	mov	r2, r5
 80071ec:	f000 fac6 	bl	800777c <_realloc_r>
 80071f0:	4606      	mov	r6, r0
 80071f2:	2800      	cmp	r0, #0
 80071f4:	d1e0      	bne.n	80071b8 <__ssputs_r+0x5c>
 80071f6:	6921      	ldr	r1, [r4, #16]
 80071f8:	4650      	mov	r0, sl
 80071fa:	f7ff feb7 	bl	8006f6c <_free_r>
 80071fe:	230c      	movs	r3, #12
 8007200:	f8ca 3000 	str.w	r3, [sl]
 8007204:	89a3      	ldrh	r3, [r4, #12]
 8007206:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800720a:	81a3      	strh	r3, [r4, #12]
 800720c:	f04f 30ff 	mov.w	r0, #4294967295
 8007210:	e7e9      	b.n	80071e6 <__ssputs_r+0x8a>
	...

08007214 <_svfiprintf_r>:
 8007214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007218:	4698      	mov	r8, r3
 800721a:	898b      	ldrh	r3, [r1, #12]
 800721c:	061b      	lsls	r3, r3, #24
 800721e:	b09d      	sub	sp, #116	@ 0x74
 8007220:	4607      	mov	r7, r0
 8007222:	460d      	mov	r5, r1
 8007224:	4614      	mov	r4, r2
 8007226:	d510      	bpl.n	800724a <_svfiprintf_r+0x36>
 8007228:	690b      	ldr	r3, [r1, #16]
 800722a:	b973      	cbnz	r3, 800724a <_svfiprintf_r+0x36>
 800722c:	2140      	movs	r1, #64	@ 0x40
 800722e:	f7ff ff09 	bl	8007044 <_malloc_r>
 8007232:	6028      	str	r0, [r5, #0]
 8007234:	6128      	str	r0, [r5, #16]
 8007236:	b930      	cbnz	r0, 8007246 <_svfiprintf_r+0x32>
 8007238:	230c      	movs	r3, #12
 800723a:	603b      	str	r3, [r7, #0]
 800723c:	f04f 30ff 	mov.w	r0, #4294967295
 8007240:	b01d      	add	sp, #116	@ 0x74
 8007242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007246:	2340      	movs	r3, #64	@ 0x40
 8007248:	616b      	str	r3, [r5, #20]
 800724a:	2300      	movs	r3, #0
 800724c:	9309      	str	r3, [sp, #36]	@ 0x24
 800724e:	2320      	movs	r3, #32
 8007250:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007254:	f8cd 800c 	str.w	r8, [sp, #12]
 8007258:	2330      	movs	r3, #48	@ 0x30
 800725a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80073f8 <_svfiprintf_r+0x1e4>
 800725e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007262:	f04f 0901 	mov.w	r9, #1
 8007266:	4623      	mov	r3, r4
 8007268:	469a      	mov	sl, r3
 800726a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800726e:	b10a      	cbz	r2, 8007274 <_svfiprintf_r+0x60>
 8007270:	2a25      	cmp	r2, #37	@ 0x25
 8007272:	d1f9      	bne.n	8007268 <_svfiprintf_r+0x54>
 8007274:	ebba 0b04 	subs.w	fp, sl, r4
 8007278:	d00b      	beq.n	8007292 <_svfiprintf_r+0x7e>
 800727a:	465b      	mov	r3, fp
 800727c:	4622      	mov	r2, r4
 800727e:	4629      	mov	r1, r5
 8007280:	4638      	mov	r0, r7
 8007282:	f7ff ff6b 	bl	800715c <__ssputs_r>
 8007286:	3001      	adds	r0, #1
 8007288:	f000 80a7 	beq.w	80073da <_svfiprintf_r+0x1c6>
 800728c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800728e:	445a      	add	r2, fp
 8007290:	9209      	str	r2, [sp, #36]	@ 0x24
 8007292:	f89a 3000 	ldrb.w	r3, [sl]
 8007296:	2b00      	cmp	r3, #0
 8007298:	f000 809f 	beq.w	80073da <_svfiprintf_r+0x1c6>
 800729c:	2300      	movs	r3, #0
 800729e:	f04f 32ff 	mov.w	r2, #4294967295
 80072a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072a6:	f10a 0a01 	add.w	sl, sl, #1
 80072aa:	9304      	str	r3, [sp, #16]
 80072ac:	9307      	str	r3, [sp, #28]
 80072ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80072b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80072b4:	4654      	mov	r4, sl
 80072b6:	2205      	movs	r2, #5
 80072b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072bc:	484e      	ldr	r0, [pc, #312]	@ (80073f8 <_svfiprintf_r+0x1e4>)
 80072be:	f7f8 ffaf 	bl	8000220 <memchr>
 80072c2:	9a04      	ldr	r2, [sp, #16]
 80072c4:	b9d8      	cbnz	r0, 80072fe <_svfiprintf_r+0xea>
 80072c6:	06d0      	lsls	r0, r2, #27
 80072c8:	bf44      	itt	mi
 80072ca:	2320      	movmi	r3, #32
 80072cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072d0:	0711      	lsls	r1, r2, #28
 80072d2:	bf44      	itt	mi
 80072d4:	232b      	movmi	r3, #43	@ 0x2b
 80072d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072da:	f89a 3000 	ldrb.w	r3, [sl]
 80072de:	2b2a      	cmp	r3, #42	@ 0x2a
 80072e0:	d015      	beq.n	800730e <_svfiprintf_r+0xfa>
 80072e2:	9a07      	ldr	r2, [sp, #28]
 80072e4:	4654      	mov	r4, sl
 80072e6:	2000      	movs	r0, #0
 80072e8:	f04f 0c0a 	mov.w	ip, #10
 80072ec:	4621      	mov	r1, r4
 80072ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072f2:	3b30      	subs	r3, #48	@ 0x30
 80072f4:	2b09      	cmp	r3, #9
 80072f6:	d94b      	bls.n	8007390 <_svfiprintf_r+0x17c>
 80072f8:	b1b0      	cbz	r0, 8007328 <_svfiprintf_r+0x114>
 80072fa:	9207      	str	r2, [sp, #28]
 80072fc:	e014      	b.n	8007328 <_svfiprintf_r+0x114>
 80072fe:	eba0 0308 	sub.w	r3, r0, r8
 8007302:	fa09 f303 	lsl.w	r3, r9, r3
 8007306:	4313      	orrs	r3, r2
 8007308:	9304      	str	r3, [sp, #16]
 800730a:	46a2      	mov	sl, r4
 800730c:	e7d2      	b.n	80072b4 <_svfiprintf_r+0xa0>
 800730e:	9b03      	ldr	r3, [sp, #12]
 8007310:	1d19      	adds	r1, r3, #4
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	9103      	str	r1, [sp, #12]
 8007316:	2b00      	cmp	r3, #0
 8007318:	bfbb      	ittet	lt
 800731a:	425b      	neglt	r3, r3
 800731c:	f042 0202 	orrlt.w	r2, r2, #2
 8007320:	9307      	strge	r3, [sp, #28]
 8007322:	9307      	strlt	r3, [sp, #28]
 8007324:	bfb8      	it	lt
 8007326:	9204      	strlt	r2, [sp, #16]
 8007328:	7823      	ldrb	r3, [r4, #0]
 800732a:	2b2e      	cmp	r3, #46	@ 0x2e
 800732c:	d10a      	bne.n	8007344 <_svfiprintf_r+0x130>
 800732e:	7863      	ldrb	r3, [r4, #1]
 8007330:	2b2a      	cmp	r3, #42	@ 0x2a
 8007332:	d132      	bne.n	800739a <_svfiprintf_r+0x186>
 8007334:	9b03      	ldr	r3, [sp, #12]
 8007336:	1d1a      	adds	r2, r3, #4
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	9203      	str	r2, [sp, #12]
 800733c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007340:	3402      	adds	r4, #2
 8007342:	9305      	str	r3, [sp, #20]
 8007344:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007408 <_svfiprintf_r+0x1f4>
 8007348:	7821      	ldrb	r1, [r4, #0]
 800734a:	2203      	movs	r2, #3
 800734c:	4650      	mov	r0, sl
 800734e:	f7f8 ff67 	bl	8000220 <memchr>
 8007352:	b138      	cbz	r0, 8007364 <_svfiprintf_r+0x150>
 8007354:	9b04      	ldr	r3, [sp, #16]
 8007356:	eba0 000a 	sub.w	r0, r0, sl
 800735a:	2240      	movs	r2, #64	@ 0x40
 800735c:	4082      	lsls	r2, r0
 800735e:	4313      	orrs	r3, r2
 8007360:	3401      	adds	r4, #1
 8007362:	9304      	str	r3, [sp, #16]
 8007364:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007368:	4824      	ldr	r0, [pc, #144]	@ (80073fc <_svfiprintf_r+0x1e8>)
 800736a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800736e:	2206      	movs	r2, #6
 8007370:	f7f8 ff56 	bl	8000220 <memchr>
 8007374:	2800      	cmp	r0, #0
 8007376:	d036      	beq.n	80073e6 <_svfiprintf_r+0x1d2>
 8007378:	4b21      	ldr	r3, [pc, #132]	@ (8007400 <_svfiprintf_r+0x1ec>)
 800737a:	bb1b      	cbnz	r3, 80073c4 <_svfiprintf_r+0x1b0>
 800737c:	9b03      	ldr	r3, [sp, #12]
 800737e:	3307      	adds	r3, #7
 8007380:	f023 0307 	bic.w	r3, r3, #7
 8007384:	3308      	adds	r3, #8
 8007386:	9303      	str	r3, [sp, #12]
 8007388:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800738a:	4433      	add	r3, r6
 800738c:	9309      	str	r3, [sp, #36]	@ 0x24
 800738e:	e76a      	b.n	8007266 <_svfiprintf_r+0x52>
 8007390:	fb0c 3202 	mla	r2, ip, r2, r3
 8007394:	460c      	mov	r4, r1
 8007396:	2001      	movs	r0, #1
 8007398:	e7a8      	b.n	80072ec <_svfiprintf_r+0xd8>
 800739a:	2300      	movs	r3, #0
 800739c:	3401      	adds	r4, #1
 800739e:	9305      	str	r3, [sp, #20]
 80073a0:	4619      	mov	r1, r3
 80073a2:	f04f 0c0a 	mov.w	ip, #10
 80073a6:	4620      	mov	r0, r4
 80073a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073ac:	3a30      	subs	r2, #48	@ 0x30
 80073ae:	2a09      	cmp	r2, #9
 80073b0:	d903      	bls.n	80073ba <_svfiprintf_r+0x1a6>
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d0c6      	beq.n	8007344 <_svfiprintf_r+0x130>
 80073b6:	9105      	str	r1, [sp, #20]
 80073b8:	e7c4      	b.n	8007344 <_svfiprintf_r+0x130>
 80073ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80073be:	4604      	mov	r4, r0
 80073c0:	2301      	movs	r3, #1
 80073c2:	e7f0      	b.n	80073a6 <_svfiprintf_r+0x192>
 80073c4:	ab03      	add	r3, sp, #12
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	462a      	mov	r2, r5
 80073ca:	4b0e      	ldr	r3, [pc, #56]	@ (8007404 <_svfiprintf_r+0x1f0>)
 80073cc:	a904      	add	r1, sp, #16
 80073ce:	4638      	mov	r0, r7
 80073d0:	f3af 8000 	nop.w
 80073d4:	1c42      	adds	r2, r0, #1
 80073d6:	4606      	mov	r6, r0
 80073d8:	d1d6      	bne.n	8007388 <_svfiprintf_r+0x174>
 80073da:	89ab      	ldrh	r3, [r5, #12]
 80073dc:	065b      	lsls	r3, r3, #25
 80073de:	f53f af2d 	bmi.w	800723c <_svfiprintf_r+0x28>
 80073e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80073e4:	e72c      	b.n	8007240 <_svfiprintf_r+0x2c>
 80073e6:	ab03      	add	r3, sp, #12
 80073e8:	9300      	str	r3, [sp, #0]
 80073ea:	462a      	mov	r2, r5
 80073ec:	4b05      	ldr	r3, [pc, #20]	@ (8007404 <_svfiprintf_r+0x1f0>)
 80073ee:	a904      	add	r1, sp, #16
 80073f0:	4638      	mov	r0, r7
 80073f2:	f000 f879 	bl	80074e8 <_printf_i>
 80073f6:	e7ed      	b.n	80073d4 <_svfiprintf_r+0x1c0>
 80073f8:	08007a00 	.word	0x08007a00
 80073fc:	08007a0a 	.word	0x08007a0a
 8007400:	00000000 	.word	0x00000000
 8007404:	0800715d 	.word	0x0800715d
 8007408:	08007a06 	.word	0x08007a06

0800740c <_printf_common>:
 800740c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007410:	4616      	mov	r6, r2
 8007412:	4698      	mov	r8, r3
 8007414:	688a      	ldr	r2, [r1, #8]
 8007416:	690b      	ldr	r3, [r1, #16]
 8007418:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800741c:	4293      	cmp	r3, r2
 800741e:	bfb8      	it	lt
 8007420:	4613      	movlt	r3, r2
 8007422:	6033      	str	r3, [r6, #0]
 8007424:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007428:	4607      	mov	r7, r0
 800742a:	460c      	mov	r4, r1
 800742c:	b10a      	cbz	r2, 8007432 <_printf_common+0x26>
 800742e:	3301      	adds	r3, #1
 8007430:	6033      	str	r3, [r6, #0]
 8007432:	6823      	ldr	r3, [r4, #0]
 8007434:	0699      	lsls	r1, r3, #26
 8007436:	bf42      	ittt	mi
 8007438:	6833      	ldrmi	r3, [r6, #0]
 800743a:	3302      	addmi	r3, #2
 800743c:	6033      	strmi	r3, [r6, #0]
 800743e:	6825      	ldr	r5, [r4, #0]
 8007440:	f015 0506 	ands.w	r5, r5, #6
 8007444:	d106      	bne.n	8007454 <_printf_common+0x48>
 8007446:	f104 0a19 	add.w	sl, r4, #25
 800744a:	68e3      	ldr	r3, [r4, #12]
 800744c:	6832      	ldr	r2, [r6, #0]
 800744e:	1a9b      	subs	r3, r3, r2
 8007450:	42ab      	cmp	r3, r5
 8007452:	dc26      	bgt.n	80074a2 <_printf_common+0x96>
 8007454:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007458:	6822      	ldr	r2, [r4, #0]
 800745a:	3b00      	subs	r3, #0
 800745c:	bf18      	it	ne
 800745e:	2301      	movne	r3, #1
 8007460:	0692      	lsls	r2, r2, #26
 8007462:	d42b      	bmi.n	80074bc <_printf_common+0xb0>
 8007464:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007468:	4641      	mov	r1, r8
 800746a:	4638      	mov	r0, r7
 800746c:	47c8      	blx	r9
 800746e:	3001      	adds	r0, #1
 8007470:	d01e      	beq.n	80074b0 <_printf_common+0xa4>
 8007472:	6823      	ldr	r3, [r4, #0]
 8007474:	6922      	ldr	r2, [r4, #16]
 8007476:	f003 0306 	and.w	r3, r3, #6
 800747a:	2b04      	cmp	r3, #4
 800747c:	bf02      	ittt	eq
 800747e:	68e5      	ldreq	r5, [r4, #12]
 8007480:	6833      	ldreq	r3, [r6, #0]
 8007482:	1aed      	subeq	r5, r5, r3
 8007484:	68a3      	ldr	r3, [r4, #8]
 8007486:	bf0c      	ite	eq
 8007488:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800748c:	2500      	movne	r5, #0
 800748e:	4293      	cmp	r3, r2
 8007490:	bfc4      	itt	gt
 8007492:	1a9b      	subgt	r3, r3, r2
 8007494:	18ed      	addgt	r5, r5, r3
 8007496:	2600      	movs	r6, #0
 8007498:	341a      	adds	r4, #26
 800749a:	42b5      	cmp	r5, r6
 800749c:	d11a      	bne.n	80074d4 <_printf_common+0xc8>
 800749e:	2000      	movs	r0, #0
 80074a0:	e008      	b.n	80074b4 <_printf_common+0xa8>
 80074a2:	2301      	movs	r3, #1
 80074a4:	4652      	mov	r2, sl
 80074a6:	4641      	mov	r1, r8
 80074a8:	4638      	mov	r0, r7
 80074aa:	47c8      	blx	r9
 80074ac:	3001      	adds	r0, #1
 80074ae:	d103      	bne.n	80074b8 <_printf_common+0xac>
 80074b0:	f04f 30ff 	mov.w	r0, #4294967295
 80074b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074b8:	3501      	adds	r5, #1
 80074ba:	e7c6      	b.n	800744a <_printf_common+0x3e>
 80074bc:	18e1      	adds	r1, r4, r3
 80074be:	1c5a      	adds	r2, r3, #1
 80074c0:	2030      	movs	r0, #48	@ 0x30
 80074c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80074c6:	4422      	add	r2, r4
 80074c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80074cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80074d0:	3302      	adds	r3, #2
 80074d2:	e7c7      	b.n	8007464 <_printf_common+0x58>
 80074d4:	2301      	movs	r3, #1
 80074d6:	4622      	mov	r2, r4
 80074d8:	4641      	mov	r1, r8
 80074da:	4638      	mov	r0, r7
 80074dc:	47c8      	blx	r9
 80074de:	3001      	adds	r0, #1
 80074e0:	d0e6      	beq.n	80074b0 <_printf_common+0xa4>
 80074e2:	3601      	adds	r6, #1
 80074e4:	e7d9      	b.n	800749a <_printf_common+0x8e>
	...

080074e8 <_printf_i>:
 80074e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074ec:	7e0f      	ldrb	r7, [r1, #24]
 80074ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80074f0:	2f78      	cmp	r7, #120	@ 0x78
 80074f2:	4691      	mov	r9, r2
 80074f4:	4680      	mov	r8, r0
 80074f6:	460c      	mov	r4, r1
 80074f8:	469a      	mov	sl, r3
 80074fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80074fe:	d807      	bhi.n	8007510 <_printf_i+0x28>
 8007500:	2f62      	cmp	r7, #98	@ 0x62
 8007502:	d80a      	bhi.n	800751a <_printf_i+0x32>
 8007504:	2f00      	cmp	r7, #0
 8007506:	f000 80d2 	beq.w	80076ae <_printf_i+0x1c6>
 800750a:	2f58      	cmp	r7, #88	@ 0x58
 800750c:	f000 80b9 	beq.w	8007682 <_printf_i+0x19a>
 8007510:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007514:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007518:	e03a      	b.n	8007590 <_printf_i+0xa8>
 800751a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800751e:	2b15      	cmp	r3, #21
 8007520:	d8f6      	bhi.n	8007510 <_printf_i+0x28>
 8007522:	a101      	add	r1, pc, #4	@ (adr r1, 8007528 <_printf_i+0x40>)
 8007524:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007528:	08007581 	.word	0x08007581
 800752c:	08007595 	.word	0x08007595
 8007530:	08007511 	.word	0x08007511
 8007534:	08007511 	.word	0x08007511
 8007538:	08007511 	.word	0x08007511
 800753c:	08007511 	.word	0x08007511
 8007540:	08007595 	.word	0x08007595
 8007544:	08007511 	.word	0x08007511
 8007548:	08007511 	.word	0x08007511
 800754c:	08007511 	.word	0x08007511
 8007550:	08007511 	.word	0x08007511
 8007554:	08007695 	.word	0x08007695
 8007558:	080075bf 	.word	0x080075bf
 800755c:	0800764f 	.word	0x0800764f
 8007560:	08007511 	.word	0x08007511
 8007564:	08007511 	.word	0x08007511
 8007568:	080076b7 	.word	0x080076b7
 800756c:	08007511 	.word	0x08007511
 8007570:	080075bf 	.word	0x080075bf
 8007574:	08007511 	.word	0x08007511
 8007578:	08007511 	.word	0x08007511
 800757c:	08007657 	.word	0x08007657
 8007580:	6833      	ldr	r3, [r6, #0]
 8007582:	1d1a      	adds	r2, r3, #4
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	6032      	str	r2, [r6, #0]
 8007588:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800758c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007590:	2301      	movs	r3, #1
 8007592:	e09d      	b.n	80076d0 <_printf_i+0x1e8>
 8007594:	6833      	ldr	r3, [r6, #0]
 8007596:	6820      	ldr	r0, [r4, #0]
 8007598:	1d19      	adds	r1, r3, #4
 800759a:	6031      	str	r1, [r6, #0]
 800759c:	0606      	lsls	r6, r0, #24
 800759e:	d501      	bpl.n	80075a4 <_printf_i+0xbc>
 80075a0:	681d      	ldr	r5, [r3, #0]
 80075a2:	e003      	b.n	80075ac <_printf_i+0xc4>
 80075a4:	0645      	lsls	r5, r0, #25
 80075a6:	d5fb      	bpl.n	80075a0 <_printf_i+0xb8>
 80075a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80075ac:	2d00      	cmp	r5, #0
 80075ae:	da03      	bge.n	80075b8 <_printf_i+0xd0>
 80075b0:	232d      	movs	r3, #45	@ 0x2d
 80075b2:	426d      	negs	r5, r5
 80075b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075b8:	4859      	ldr	r0, [pc, #356]	@ (8007720 <_printf_i+0x238>)
 80075ba:	230a      	movs	r3, #10
 80075bc:	e011      	b.n	80075e2 <_printf_i+0xfa>
 80075be:	6821      	ldr	r1, [r4, #0]
 80075c0:	6833      	ldr	r3, [r6, #0]
 80075c2:	0608      	lsls	r0, r1, #24
 80075c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80075c8:	d402      	bmi.n	80075d0 <_printf_i+0xe8>
 80075ca:	0649      	lsls	r1, r1, #25
 80075cc:	bf48      	it	mi
 80075ce:	b2ad      	uxthmi	r5, r5
 80075d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80075d2:	4853      	ldr	r0, [pc, #332]	@ (8007720 <_printf_i+0x238>)
 80075d4:	6033      	str	r3, [r6, #0]
 80075d6:	bf14      	ite	ne
 80075d8:	230a      	movne	r3, #10
 80075da:	2308      	moveq	r3, #8
 80075dc:	2100      	movs	r1, #0
 80075de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80075e2:	6866      	ldr	r6, [r4, #4]
 80075e4:	60a6      	str	r6, [r4, #8]
 80075e6:	2e00      	cmp	r6, #0
 80075e8:	bfa2      	ittt	ge
 80075ea:	6821      	ldrge	r1, [r4, #0]
 80075ec:	f021 0104 	bicge.w	r1, r1, #4
 80075f0:	6021      	strge	r1, [r4, #0]
 80075f2:	b90d      	cbnz	r5, 80075f8 <_printf_i+0x110>
 80075f4:	2e00      	cmp	r6, #0
 80075f6:	d04b      	beq.n	8007690 <_printf_i+0x1a8>
 80075f8:	4616      	mov	r6, r2
 80075fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80075fe:	fb03 5711 	mls	r7, r3, r1, r5
 8007602:	5dc7      	ldrb	r7, [r0, r7]
 8007604:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007608:	462f      	mov	r7, r5
 800760a:	42bb      	cmp	r3, r7
 800760c:	460d      	mov	r5, r1
 800760e:	d9f4      	bls.n	80075fa <_printf_i+0x112>
 8007610:	2b08      	cmp	r3, #8
 8007612:	d10b      	bne.n	800762c <_printf_i+0x144>
 8007614:	6823      	ldr	r3, [r4, #0]
 8007616:	07df      	lsls	r7, r3, #31
 8007618:	d508      	bpl.n	800762c <_printf_i+0x144>
 800761a:	6923      	ldr	r3, [r4, #16]
 800761c:	6861      	ldr	r1, [r4, #4]
 800761e:	4299      	cmp	r1, r3
 8007620:	bfde      	ittt	le
 8007622:	2330      	movle	r3, #48	@ 0x30
 8007624:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007628:	f106 36ff 	addle.w	r6, r6, #4294967295
 800762c:	1b92      	subs	r2, r2, r6
 800762e:	6122      	str	r2, [r4, #16]
 8007630:	f8cd a000 	str.w	sl, [sp]
 8007634:	464b      	mov	r3, r9
 8007636:	aa03      	add	r2, sp, #12
 8007638:	4621      	mov	r1, r4
 800763a:	4640      	mov	r0, r8
 800763c:	f7ff fee6 	bl	800740c <_printf_common>
 8007640:	3001      	adds	r0, #1
 8007642:	d14a      	bne.n	80076da <_printf_i+0x1f2>
 8007644:	f04f 30ff 	mov.w	r0, #4294967295
 8007648:	b004      	add	sp, #16
 800764a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800764e:	6823      	ldr	r3, [r4, #0]
 8007650:	f043 0320 	orr.w	r3, r3, #32
 8007654:	6023      	str	r3, [r4, #0]
 8007656:	4833      	ldr	r0, [pc, #204]	@ (8007724 <_printf_i+0x23c>)
 8007658:	2778      	movs	r7, #120	@ 0x78
 800765a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800765e:	6823      	ldr	r3, [r4, #0]
 8007660:	6831      	ldr	r1, [r6, #0]
 8007662:	061f      	lsls	r7, r3, #24
 8007664:	f851 5b04 	ldr.w	r5, [r1], #4
 8007668:	d402      	bmi.n	8007670 <_printf_i+0x188>
 800766a:	065f      	lsls	r7, r3, #25
 800766c:	bf48      	it	mi
 800766e:	b2ad      	uxthmi	r5, r5
 8007670:	6031      	str	r1, [r6, #0]
 8007672:	07d9      	lsls	r1, r3, #31
 8007674:	bf44      	itt	mi
 8007676:	f043 0320 	orrmi.w	r3, r3, #32
 800767a:	6023      	strmi	r3, [r4, #0]
 800767c:	b11d      	cbz	r5, 8007686 <_printf_i+0x19e>
 800767e:	2310      	movs	r3, #16
 8007680:	e7ac      	b.n	80075dc <_printf_i+0xf4>
 8007682:	4827      	ldr	r0, [pc, #156]	@ (8007720 <_printf_i+0x238>)
 8007684:	e7e9      	b.n	800765a <_printf_i+0x172>
 8007686:	6823      	ldr	r3, [r4, #0]
 8007688:	f023 0320 	bic.w	r3, r3, #32
 800768c:	6023      	str	r3, [r4, #0]
 800768e:	e7f6      	b.n	800767e <_printf_i+0x196>
 8007690:	4616      	mov	r6, r2
 8007692:	e7bd      	b.n	8007610 <_printf_i+0x128>
 8007694:	6833      	ldr	r3, [r6, #0]
 8007696:	6825      	ldr	r5, [r4, #0]
 8007698:	6961      	ldr	r1, [r4, #20]
 800769a:	1d18      	adds	r0, r3, #4
 800769c:	6030      	str	r0, [r6, #0]
 800769e:	062e      	lsls	r6, r5, #24
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	d501      	bpl.n	80076a8 <_printf_i+0x1c0>
 80076a4:	6019      	str	r1, [r3, #0]
 80076a6:	e002      	b.n	80076ae <_printf_i+0x1c6>
 80076a8:	0668      	lsls	r0, r5, #25
 80076aa:	d5fb      	bpl.n	80076a4 <_printf_i+0x1bc>
 80076ac:	8019      	strh	r1, [r3, #0]
 80076ae:	2300      	movs	r3, #0
 80076b0:	6123      	str	r3, [r4, #16]
 80076b2:	4616      	mov	r6, r2
 80076b4:	e7bc      	b.n	8007630 <_printf_i+0x148>
 80076b6:	6833      	ldr	r3, [r6, #0]
 80076b8:	1d1a      	adds	r2, r3, #4
 80076ba:	6032      	str	r2, [r6, #0]
 80076bc:	681e      	ldr	r6, [r3, #0]
 80076be:	6862      	ldr	r2, [r4, #4]
 80076c0:	2100      	movs	r1, #0
 80076c2:	4630      	mov	r0, r6
 80076c4:	f7f8 fdac 	bl	8000220 <memchr>
 80076c8:	b108      	cbz	r0, 80076ce <_printf_i+0x1e6>
 80076ca:	1b80      	subs	r0, r0, r6
 80076cc:	6060      	str	r0, [r4, #4]
 80076ce:	6863      	ldr	r3, [r4, #4]
 80076d0:	6123      	str	r3, [r4, #16]
 80076d2:	2300      	movs	r3, #0
 80076d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076d8:	e7aa      	b.n	8007630 <_printf_i+0x148>
 80076da:	6923      	ldr	r3, [r4, #16]
 80076dc:	4632      	mov	r2, r6
 80076de:	4649      	mov	r1, r9
 80076e0:	4640      	mov	r0, r8
 80076e2:	47d0      	blx	sl
 80076e4:	3001      	adds	r0, #1
 80076e6:	d0ad      	beq.n	8007644 <_printf_i+0x15c>
 80076e8:	6823      	ldr	r3, [r4, #0]
 80076ea:	079b      	lsls	r3, r3, #30
 80076ec:	d413      	bmi.n	8007716 <_printf_i+0x22e>
 80076ee:	68e0      	ldr	r0, [r4, #12]
 80076f0:	9b03      	ldr	r3, [sp, #12]
 80076f2:	4298      	cmp	r0, r3
 80076f4:	bfb8      	it	lt
 80076f6:	4618      	movlt	r0, r3
 80076f8:	e7a6      	b.n	8007648 <_printf_i+0x160>
 80076fa:	2301      	movs	r3, #1
 80076fc:	4632      	mov	r2, r6
 80076fe:	4649      	mov	r1, r9
 8007700:	4640      	mov	r0, r8
 8007702:	47d0      	blx	sl
 8007704:	3001      	adds	r0, #1
 8007706:	d09d      	beq.n	8007644 <_printf_i+0x15c>
 8007708:	3501      	adds	r5, #1
 800770a:	68e3      	ldr	r3, [r4, #12]
 800770c:	9903      	ldr	r1, [sp, #12]
 800770e:	1a5b      	subs	r3, r3, r1
 8007710:	42ab      	cmp	r3, r5
 8007712:	dcf2      	bgt.n	80076fa <_printf_i+0x212>
 8007714:	e7eb      	b.n	80076ee <_printf_i+0x206>
 8007716:	2500      	movs	r5, #0
 8007718:	f104 0619 	add.w	r6, r4, #25
 800771c:	e7f5      	b.n	800770a <_printf_i+0x222>
 800771e:	bf00      	nop
 8007720:	08007a11 	.word	0x08007a11
 8007724:	08007a22 	.word	0x08007a22

08007728 <memmove>:
 8007728:	4288      	cmp	r0, r1
 800772a:	b510      	push	{r4, lr}
 800772c:	eb01 0402 	add.w	r4, r1, r2
 8007730:	d902      	bls.n	8007738 <memmove+0x10>
 8007732:	4284      	cmp	r4, r0
 8007734:	4623      	mov	r3, r4
 8007736:	d807      	bhi.n	8007748 <memmove+0x20>
 8007738:	1e43      	subs	r3, r0, #1
 800773a:	42a1      	cmp	r1, r4
 800773c:	d008      	beq.n	8007750 <memmove+0x28>
 800773e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007742:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007746:	e7f8      	b.n	800773a <memmove+0x12>
 8007748:	4402      	add	r2, r0
 800774a:	4601      	mov	r1, r0
 800774c:	428a      	cmp	r2, r1
 800774e:	d100      	bne.n	8007752 <memmove+0x2a>
 8007750:	bd10      	pop	{r4, pc}
 8007752:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007756:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800775a:	e7f7      	b.n	800774c <memmove+0x24>

0800775c <_sbrk_r>:
 800775c:	b538      	push	{r3, r4, r5, lr}
 800775e:	4d06      	ldr	r5, [pc, #24]	@ (8007778 <_sbrk_r+0x1c>)
 8007760:	2300      	movs	r3, #0
 8007762:	4604      	mov	r4, r0
 8007764:	4608      	mov	r0, r1
 8007766:	602b      	str	r3, [r5, #0]
 8007768:	f7f9 fa00 	bl	8000b6c <_sbrk>
 800776c:	1c43      	adds	r3, r0, #1
 800776e:	d102      	bne.n	8007776 <_sbrk_r+0x1a>
 8007770:	682b      	ldr	r3, [r5, #0]
 8007772:	b103      	cbz	r3, 8007776 <_sbrk_r+0x1a>
 8007774:	6023      	str	r3, [r4, #0]
 8007776:	bd38      	pop	{r3, r4, r5, pc}
 8007778:	2000505c 	.word	0x2000505c

0800777c <_realloc_r>:
 800777c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007780:	4680      	mov	r8, r0
 8007782:	4615      	mov	r5, r2
 8007784:	460c      	mov	r4, r1
 8007786:	b921      	cbnz	r1, 8007792 <_realloc_r+0x16>
 8007788:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800778c:	4611      	mov	r1, r2
 800778e:	f7ff bc59 	b.w	8007044 <_malloc_r>
 8007792:	b92a      	cbnz	r2, 80077a0 <_realloc_r+0x24>
 8007794:	f7ff fbea 	bl	8006f6c <_free_r>
 8007798:	2400      	movs	r4, #0
 800779a:	4620      	mov	r0, r4
 800779c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077a0:	f000 f81a 	bl	80077d8 <_malloc_usable_size_r>
 80077a4:	4285      	cmp	r5, r0
 80077a6:	4606      	mov	r6, r0
 80077a8:	d802      	bhi.n	80077b0 <_realloc_r+0x34>
 80077aa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80077ae:	d8f4      	bhi.n	800779a <_realloc_r+0x1e>
 80077b0:	4629      	mov	r1, r5
 80077b2:	4640      	mov	r0, r8
 80077b4:	f7ff fc46 	bl	8007044 <_malloc_r>
 80077b8:	4607      	mov	r7, r0
 80077ba:	2800      	cmp	r0, #0
 80077bc:	d0ec      	beq.n	8007798 <_realloc_r+0x1c>
 80077be:	42b5      	cmp	r5, r6
 80077c0:	462a      	mov	r2, r5
 80077c2:	4621      	mov	r1, r4
 80077c4:	bf28      	it	cs
 80077c6:	4632      	movcs	r2, r6
 80077c8:	f7ff fbc2 	bl	8006f50 <memcpy>
 80077cc:	4621      	mov	r1, r4
 80077ce:	4640      	mov	r0, r8
 80077d0:	f7ff fbcc 	bl	8006f6c <_free_r>
 80077d4:	463c      	mov	r4, r7
 80077d6:	e7e0      	b.n	800779a <_realloc_r+0x1e>

080077d8 <_malloc_usable_size_r>:
 80077d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077dc:	1f18      	subs	r0, r3, #4
 80077de:	2b00      	cmp	r3, #0
 80077e0:	bfbc      	itt	lt
 80077e2:	580b      	ldrlt	r3, [r1, r0]
 80077e4:	18c0      	addlt	r0, r0, r3
 80077e6:	4770      	bx	lr

080077e8 <_init>:
 80077e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ea:	bf00      	nop
 80077ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ee:	bc08      	pop	{r3}
 80077f0:	469e      	mov	lr, r3
 80077f2:	4770      	bx	lr

080077f4 <_fini>:
 80077f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077f6:	bf00      	nop
 80077f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077fa:	bc08      	pop	{r3}
 80077fc:	469e      	mov	lr, r3
 80077fe:	4770      	bx	lr
